
F411-Tepelco-W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010498  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f4  08010638  08010638  00011638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801102c  0801102c  000131c4  2**0
                  CONTENTS
  4 .ARM          00000008  0801102c  0801102c  0001202c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011034  08011034  000131c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011034  08011034  00012034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011038  08011038  00012038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c4  20000000  0801103c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000464c  200001c4  08011200  000131c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004810  08011200  00013810  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151cf  00000000  00000000  000131f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db7  00000000  00000000  000283c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0002b180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0f  00000000  00000000  0002c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001860e  00000000  00000000  0002d0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179b5  00000000  00000000  000456ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009394a  00000000  00000000  0005d0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f09ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005528  00000000  00000000  000f0a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000f5f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c4 	.word	0x200001c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010620 	.word	0x08010620

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001c8 	.word	0x200001c8
 80001dc:	08010620 	.word	0x08010620

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	db0a      	blt.n	8000606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	490c      	ldr	r1, [pc, #48]	@ (8000628 <__NVIC_SetPriority+0x4c>)
 80005f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fa:	0112      	lsls	r2, r2, #4
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	440b      	add	r3, r1
 8000600:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000604:	e00a      	b.n	800061c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4908      	ldr	r1, [pc, #32]	@ (800062c <__NVIC_SetPriority+0x50>)
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	3b04      	subs	r3, #4
 8000614:	0112      	lsls	r2, r2, #4
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	440b      	add	r3, r1
 800061a:	761a      	strb	r2, [r3, #24]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000e100 	.word	0xe000e100
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3b01      	subs	r3, #1
 800063c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000640:	d301      	bcc.n	8000646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000642:	2301      	movs	r3, #1
 8000644:	e00f      	b.n	8000666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000646:	4a0a      	ldr	r2, [pc, #40]	@ (8000670 <SysTick_Config+0x40>)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3b01      	subs	r3, #1
 800064c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800064e:	210f      	movs	r1, #15
 8000650:	f04f 30ff 	mov.w	r0, #4294967295
 8000654:	f7ff ffc2 	bl	80005dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <SysTick_Config+0x40>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <SysTick_Config+0x40>)
 8000660:	2207      	movs	r2, #7
 8000662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	e000e010 	.word	0xe000e010

08000674 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800067c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000680:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000684:	f003 0301 	and.w	r3, r3, #1
 8000688:	2b00      	cmp	r3, #0
 800068a:	d013      	beq.n	80006b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800068c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000690:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000694:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000698:	2b00      	cmp	r3, #0
 800069a:	d00b      	beq.n	80006b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800069c:	e000      	b.n	80006a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800069e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006a0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0f9      	beq.n	800069e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006aa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006b4:	687b      	ldr	r3, [r7, #4]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b08b      	sub	sp, #44	@ 0x2c
 80006c8:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5500 Environment-------------------------//
	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 80006ca:	4bcf      	ldr	r3, [pc, #828]	@ (8000a08 <main+0x344>)
 80006cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80006d0:	22c0      	movs	r2, #192	@ 0xc0
 80006d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		ETH.GAR[1]=168;
 80006d6:	4bcc      	ldr	r3, [pc, #816]	@ (8000a08 <main+0x344>)
 80006d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80006dc:	22a8      	movs	r2, #168	@ 0xa8
 80006de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		ETH.GAR[2]=0;
 80006e2:	4bc9      	ldr	r3, [pc, #804]	@ (8000a08 <main+0x344>)
 80006e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		ETH.GAR[3]=1;
 80006ee:	4bc6      	ldr	r3, [pc, #792]	@ (8000a08 <main+0x344>)
 80006f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80006f4:	2201      	movs	r2, #1
 80006f6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006fa:	4bc3      	ldr	r3, [pc, #780]	@ (8000a08 <main+0x344>)
 80006fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000700:	22ff      	movs	r2, #255	@ 0xff
 8000702:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		ETH.SUBR[1]=255;
 8000706:	4bc0      	ldr	r3, [pc, #768]	@ (8000a08 <main+0x344>)
 8000708:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800070c:	22ff      	movs	r2, #255	@ 0xff
 800070e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		ETH.SUBR[2]=255;
 8000712:	4bbd      	ldr	r3, [pc, #756]	@ (8000a08 <main+0x344>)
 8000714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000718:	22ff      	movs	r2, #255	@ 0xff
 800071a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		ETH.SUBR[3]=0;
 800071e:	4bba      	ldr	r3, [pc, #744]	@ (8000a08 <main+0x344>)
 8000720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000724:	2200      	movs	r2, #0
 8000726:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 800072a:	4bb7      	ldr	r3, [pc, #732]	@ (8000a08 <main+0x344>)
 800072c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000730:	2200      	movs	r2, #0
 8000732:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		ETH.SHAR[1]=0x08;
 8000736:	4bb4      	ldr	r3, [pc, #720]	@ (8000a08 <main+0x344>)
 8000738:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800073c:	2208      	movs	r2, #8
 800073e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		ETH.SHAR[2]=0xDC;
 8000742:	4bb1      	ldr	r3, [pc, #708]	@ (8000a08 <main+0x344>)
 8000744:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000748:	22dc      	movs	r2, #220	@ 0xdc
 800074a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		ETH.SHAR[3]=0x00;
 800074e:	4bae      	ldr	r3, [pc, #696]	@ (8000a08 <main+0x344>)
 8000750:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000754:	2200      	movs	r2, #0
 8000756:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		ETH.SHAR[4]=0xC0;
 800075a:	4bab      	ldr	r3, [pc, #684]	@ (8000a08 <main+0x344>)
 800075c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000760:	22c0      	movs	r2, #192	@ 0xc0
 8000762:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		ETH.SHAR[5]=0x03;
 8000766:	4ba8      	ldr	r3, [pc, #672]	@ (8000a08 <main+0x344>)
 8000768:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800076c:	2203      	movs	r2, #3
 800076e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 8000772:	4ba5      	ldr	r3, [pc, #660]	@ (8000a08 <main+0x344>)
 8000774:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000778:	22c0      	movs	r2, #192	@ 0xc0
 800077a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
		ETH.SIPR[1]=168;
 800077e:	4ba2      	ldr	r3, [pc, #648]	@ (8000a08 <main+0x344>)
 8000780:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000784:	22a8      	movs	r2, #168	@ 0xa8
 8000786:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
		ETH.SIPR[2]=0;
 800078a:	4b9f      	ldr	r3, [pc, #636]	@ (8000a08 <main+0x344>)
 800078c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		ETH.SIPR[3]=34,//ETH.SIPR[3]=34,
 8000796:	4b9c      	ldr	r3, [pc, #624]	@ (8000a08 <main+0x344>)
 8000798:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800079c:	2222      	movs	r2, #34	@ 0x22
 800079e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	//  Socket RX memory
		ETH.RMSR=0x55;
 80007a2:	4b99      	ldr	r3, [pc, #612]	@ (8000a08 <main+0x344>)
 80007a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80007a8:	2255      	movs	r2, #85	@ 0x55
 80007aa:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	//  Socket TX memory
		ETH.TMSR=0x55;
 80007ae:	4b96      	ldr	r3, [pc, #600]	@ (8000a08 <main+0x344>)
 80007b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80007b4:	2255      	movs	r2, #85	@ 0x55
 80007b6:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
	//  S0 Port Number
		ETH.S_PORT[0]=0x01; //01
 80007ba:	4b93      	ldr	r3, [pc, #588]	@ (8000a08 <main+0x344>)
 80007bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80007c0:	2201      	movs	r2, #1
 80007c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
		ETH.S_PORT[1]=0xF6; //f6
 80007c6:	4b90      	ldr	r3, [pc, #576]	@ (8000a08 <main+0x344>)
 80007c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80007cc:	22f6      	movs	r2, #246	@ 0xf6
 80007ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
	//	S0 Client IP ADDRESS
		ETH.S_DIPR[0]=192;
 80007d2:	4b8d      	ldr	r3, [pc, #564]	@ (8000a08 <main+0x344>)
 80007d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80007d8:	22c0      	movs	r2, #192	@ 0xc0
 80007da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		ETH.S_DIPR[1]=168;
 80007de:	4b8a      	ldr	r3, [pc, #552]	@ (8000a08 <main+0x344>)
 80007e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80007e4:	22a8      	movs	r2, #168	@ 0xa8
 80007e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
		ETH.S_DIPR[2]=0;
 80007ea:	4b87      	ldr	r3, [pc, #540]	@ (8000a08 <main+0x344>)
 80007ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
		ETH.S_DIPR[3]=3;
 80007f6:	4b84      	ldr	r3, [pc, #528]	@ (8000a08 <main+0x344>)
 80007f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80007fc:	2203      	movs	r2, #3
 80007fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
	//	S0 Client IP ADDRESS
		ETH.S_DPORT[0]=0x01;
 8000802:	4b81      	ldr	r3, [pc, #516]	@ (8000a08 <main+0x344>)
 8000804:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000808:	2201      	movs	r2, #1
 800080a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		ETH.S_DPORT[1]=0xF6;
 800080e:	4b7e      	ldr	r3, [pc, #504]	@ (8000a08 <main+0x344>)
 8000810:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000814:	22f6      	movs	r2, #246	@ 0xf6
 8000816:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

		ETH.gS_RX_BASE = 0x0000;
 800081a:	4b7b      	ldr	r3, [pc, #492]	@ (8000a08 <main+0x344>)
 800081c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000820:	2200      	movs	r2, #0
 8000822:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
		ETH.gS_RX_MASK = 0x07FF;
 8000826:	4b78      	ldr	r3, [pc, #480]	@ (8000a08 <main+0x344>)
 8000828:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800082c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000830:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
		ETH.gS1_RX_BASE = 0x6800;
 8000834:	4b74      	ldr	r3, [pc, #464]	@ (8000a08 <main+0x344>)
 8000836:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800083a:	f44f 42d0 	mov.w	r2, #26624	@ 0x6800
 800083e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
		ETH.gS1_RX_MASK = 0x07FF;
 8000842:	4b71      	ldr	r3, [pc, #452]	@ (8000a08 <main+0x344>)
 8000844:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000848:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800084c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
		ETH.gS2_RX_BASE = 0x7000;
 8000850:	4b6d      	ldr	r3, [pc, #436]	@ (8000a08 <main+0x344>)
 8000852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000856:	f44f 42e0 	mov.w	r2, #28672	@ 0x7000
 800085a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
		ETH.gS2_RX_MASK = 0x07FF;
 800085e:	4b6a      	ldr	r3, [pc, #424]	@ (8000a08 <main+0x344>)
 8000860:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000864:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000868:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
		ETH.gS3_RX_BASE = 0x7800;
 800086c:	4b66      	ldr	r3, [pc, #408]	@ (8000a08 <main+0x344>)
 800086e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000872:	f44f 42f0 	mov.w	r2, #30720	@ 0x7800
 8000876:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
		ETH.gS3_RX_MASK = 0x07FF;
 800087a:	4b63      	ldr	r3, [pc, #396]	@ (8000a08 <main+0x344>)
 800087c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000880:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000884:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
		ETH.gS_TX_BASE = 0x0000;
 8000888:	4b5f      	ldr	r3, [pc, #380]	@ (8000a08 <main+0x344>)
 800088a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800088e:	2200      	movs	r2, #0
 8000890:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
		ETH.gS_TX_MASK = 0x07FF;
 8000894:	4b5c      	ldr	r3, [pc, #368]	@ (8000a08 <main+0x344>)
 8000896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800089a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800089e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
		ETH.gS1_TX_BASE = 0x4800;
 80008a2:	4b59      	ldr	r3, [pc, #356]	@ (8000a08 <main+0x344>)
 80008a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008a8:	f44f 4290 	mov.w	r2, #18432	@ 0x4800
 80008ac:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
		ETH.gS1_TX_MASK = 0x07FF;
 80008b0:	4b55      	ldr	r3, [pc, #340]	@ (8000a08 <main+0x344>)
 80008b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008b6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80008ba:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
		ETH.gS2_TX_BASE = 0x5000;
 80008be:	4b52      	ldr	r3, [pc, #328]	@ (8000a08 <main+0x344>)
 80008c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008c4:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 80008c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
		ETH.gS2_TX_MASK = 0x07FF;
 80008cc:	4b4e      	ldr	r3, [pc, #312]	@ (8000a08 <main+0x344>)
 80008ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008d2:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80008d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
		ETH.gS3_TX_BASE = 0x5800;
 80008da:	4b4b      	ldr	r3, [pc, #300]	@ (8000a08 <main+0x344>)
 80008dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008e0:	f44f 42b0 	mov.w	r2, #22528	@ 0x5800
 80008e4:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
		ETH.gS3_TX_MASK = 0x07FF;
 80008e8:	4b47      	ldr	r3, [pc, #284]	@ (8000a08 <main+0x344>)
 80008ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008ee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80008f2:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e

		ETH.S_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008f6:	4b44      	ldr	r3, [pc, #272]	@ (8000a08 <main+0x344>)
 80008f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

		spi_no_debug=1;
 8000902:	4b42      	ldr	r3, [pc, #264]	@ (8000a0c <main+0x348>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 8000908:	4b3f      	ldr	r3, [pc, #252]	@ (8000a08 <main+0x344>)
 800090a:	4a41      	ldr	r2, [pc, #260]	@ (8000a10 <main+0x34c>)
 800090c:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 800090e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a08 <main+0x344>)
 8000910:	2210      	movs	r2, #16
 8000912:	811a      	strh	r2, [r3, #8]
		ETH.RST_PORT=GPIOB;
 8000914:	4b3c      	ldr	r3, [pc, #240]	@ (8000a08 <main+0x344>)
 8000916:	4a3f      	ldr	r2, [pc, #252]	@ (8000a14 <main+0x350>)
 8000918:	60da      	str	r2, [r3, #12]
		ETH.RST_PIN=GPIO_PIN_0;
 800091a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a08 <main+0x344>)
 800091c:	2201      	movs	r2, #1
 800091e:	821a      	strh	r2, [r3, #16]
		ETH.SPI= &hspi1;
 8000920:	4b39      	ldr	r3, [pc, #228]	@ (8000a08 <main+0x344>)
 8000922:	4a3d      	ldr	r2, [pc, #244]	@ (8000a18 <main+0x354>)
 8000924:	601a      	str	r2, [r3, #0]
	  //----------------------- ETHERNET W5500 Environment-------------------------//
	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 8000926:	483d      	ldr	r0, [pc, #244]	@ (8000a1c <main+0x358>)
 8000928:	f005 ff38 	bl	800679c <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 800092c:	493c      	ldr	r1, [pc, #240]	@ (8000a20 <main+0x35c>)
 800092e:	483d      	ldr	r0, [pc, #244]	@ (8000a24 <main+0x360>)
 8000930:	f00e fe9b 	bl	800f66a <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 8000934:	493c      	ldr	r1, [pc, #240]	@ (8000a28 <main+0x364>)
 8000936:	483d      	ldr	r0, [pc, #244]	@ (8000a2c <main+0x368>)
 8000938:	f00e fe97 	bl	800f66a <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 800093c:	493c      	ldr	r1, [pc, #240]	@ (8000a30 <main+0x36c>)
 800093e:	483d      	ldr	r0, [pc, #244]	@ (8000a34 <main+0x370>)
 8000940:	f00e fe93 	bl	800f66a <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 8000944:	493c      	ldr	r1, [pc, #240]	@ (8000a38 <main+0x374>)
 8000946:	483d      	ldr	r0, [pc, #244]	@ (8000a3c <main+0x378>)
 8000948:	f00e fe8f 	bl	800f66a <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 800094c:	493c      	ldr	r1, [pc, #240]	@ (8000a40 <main+0x37c>)
 800094e:	483d      	ldr	r0, [pc, #244]	@ (8000a44 <main+0x380>)
 8000950:	f00e fe8b 	bl	800f66a <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 8000954:	493c      	ldr	r1, [pc, #240]	@ (8000a48 <main+0x384>)
 8000956:	483d      	ldr	r0, [pc, #244]	@ (8000a4c <main+0x388>)
 8000958:	f00e fe87 	bl	800f66a <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 800095c:	493c      	ldr	r1, [pc, #240]	@ (8000a50 <main+0x38c>)
 800095e:	483d      	ldr	r0, [pc, #244]	@ (8000a54 <main+0x390>)
 8000960:	f00e fe83 	bl	800f66a <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 8000964:	493c      	ldr	r1, [pc, #240]	@ (8000a58 <main+0x394>)
 8000966:	483d      	ldr	r0, [pc, #244]	@ (8000a5c <main+0x398>)
 8000968:	f00e fe7f 	bl	800f66a <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 800096c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a1c <main+0x358>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000974:	4b29      	ldr	r3, [pc, #164]	@ (8000a1c <main+0x358>)
 8000976:	2200      	movs	r2, #0
 8000978:	f883 22c0 	strb.w	r2, [r3, #704]	@ 0x2c0
		wf._data2SND[1]=0x00;
 800097c:	4b27      	ldr	r3, [pc, #156]	@ (8000a1c <main+0x358>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 22c1 	strb.w	r2, [r3, #705]	@ 0x2c1
		wf._data2SND[2]=0x00;
 8000984:	4b25      	ldr	r3, [pc, #148]	@ (8000a1c <main+0x358>)
 8000986:	2200      	movs	r2, #0
 8000988:	f883 22c2 	strb.w	r2, [r3, #706]	@ 0x2c2
		wf._data2SND[3]=0x00;
 800098c:	4b23      	ldr	r3, [pc, #140]	@ (8000a1c <main+0x358>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 22c3 	strb.w	r2, [r3, #707]	@ 0x2c3
		wf._data2SND[4]=0x00;
 8000994:	4b21      	ldr	r3, [pc, #132]	@ (8000a1c <main+0x358>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 22c4 	strb.w	r2, [r3, #708]	@ 0x2c4
		wf._data2SND[5]=0x06;
 800099c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a1c <main+0x358>)
 800099e:	2206      	movs	r2, #6
 80009a0:	f883 22c5 	strb.w	r2, [r3, #709]	@ 0x2c5
		wf._data2SND[6]=0x01;
 80009a4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a1c <main+0x358>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	f883 22c6 	strb.w	r2, [r3, #710]	@ 0x2c6
		wf._data2SND[7]=0x03;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <main+0x358>)
 80009ae:	2203      	movs	r2, #3
 80009b0:	f883 22c7 	strb.w	r2, [r3, #711]	@ 0x2c7
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 80009b4:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <main+0x358>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
		wf._data2SND[9]=0x00;
 80009bc:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <main+0x358>)
 80009be:	2200      	movs	r2, #0
 80009c0:	f883 22c9 	strb.w	r2, [r3, #713]	@ 0x2c9
		wf._data2SND[10]=0x00;
 80009c4:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <main+0x358>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 22ca 	strb.w	r2, [r3, #714]	@ 0x2ca
		wf._data2SND[11]=0x0A;
 80009cc:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <main+0x358>)
 80009ce:	220a      	movs	r2, #10
 80009d0:	f883 22cb 	strb.w	r2, [r3, #715]	@ 0x2cb
		wf._data2SND[12]=0x00;
 80009d4:	4b11      	ldr	r3, [pc, #68]	@ (8000a1c <main+0x358>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
		wf._data2SND[13]=0x33;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <main+0x358>)
 80009de:	2233      	movs	r2, #51	@ 0x33
 80009e0:	f883 22cd 	strb.w	r2, [r3, #717]	@ 0x2cd
		wf._data2SND[14]=0x34;
 80009e4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <main+0x358>)
 80009e6:	2234      	movs	r2, #52	@ 0x34
 80009e8:	f883 22ce 	strb.w	r2, [r3, #718]	@ 0x2ce
		wf._data2SND[15]=0x35;
 80009ec:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <main+0x358>)
 80009ee:	2235      	movs	r2, #53	@ 0x35
 80009f0:	f883 22cf 	strb.w	r2, [r3, #719]	@ 0x2cf
		wf._n_D2SND=12;
 80009f4:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <main+0x358>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	f8c3 2d18 	str.w	r2, [r3, #3352]	@ 0xd18
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009fc:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <main+0x358>)
 80009fe:	2264      	movs	r2, #100	@ 0x64
 8000a00:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8000a04:	e02c      	b.n	8000a60 <main+0x39c>
 8000a06:	bf00      	nop
 8000a08:	20000310 	.word	0x20000310
 8000a0c:	20004258 	.word	0x20004258
 8000a10:	40020000 	.word	0x40020000
 8000a14:	40020400 	.word	0x40020400
 8000a18:	200001e0 	.word	0x200001e0
 8000a1c:	200023e0 	.word	0x200023e0
 8000a20:	20000044 	.word	0x20000044
 8000a24:	200023e6 	.word	0x200023e6
 8000a28:	20000054 	.word	0x20000054
 8000a2c:	20002406 	.word	0x20002406
 8000a30:	20000064 	.word	0x20000064
 8000a34:	2000243e 	.word	0x2000243e
 8000a38:	20000074 	.word	0x20000074
 8000a3c:	2000244e 	.word	0x2000244e
 8000a40:	2000007c 	.word	0x2000007c
 8000a44:	20002454 	.word	0x20002454
 8000a48:	2000008c 	.word	0x2000008c
 8000a4c:	2000246a 	.word	0x2000246a
 8000a50:	2000009c 	.word	0x2000009c
 8000a54:	2000247a 	.word	0x2000247a
 8000a58:	200000ac 	.word	0x200000ac
 8000a5c:	20002464 	.word	0x20002464
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 8000a60:	4bb6      	ldr	r3, [pc, #728]	@ (8000d3c <main+0x678>)
 8000a62:	2202      	movs	r2, #2
 8000a64:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
		wf._DBG_EN=1;
 8000a68:	4bb4      	ldr	r3, [pc, #720]	@ (8000d3c <main+0x678>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f8c3 2d84 	str.w	r2, [r3, #3460]	@ 0xd84
		wf._NO_IP=1;
 8000a70:	4bb2      	ldr	r3, [pc, #712]	@ (8000d3c <main+0x678>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	f8c3 2d80 	str.w	r2, [r3, #3456]	@ 0xd80
		wf.RESET_PORT=GPIOA;
 8000a78:	4bb0      	ldr	r3, [pc, #704]	@ (8000d3c <main+0x678>)
 8000a7a:	4ab1      	ldr	r2, [pc, #708]	@ (8000d40 <main+0x67c>)
 8000a7c:	601a      	str	r2, [r3, #0]
		wf.RESET_PIN=GPIO_PIN_8;
 8000a7e:	4baf      	ldr	r3, [pc, #700]	@ (8000d3c <main+0x678>)
 8000a80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a84:	809a      	strh	r2, [r3, #4]
	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//
		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a86:	48af      	ldr	r0, [pc, #700]	@ (8000d44 <main+0x680>)
 8000a88:	f00b f842 	bl	800bb10 <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a8c:	4bad      	ldr	r3, [pc, #692]	@ (8000d44 <main+0x680>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	711a      	strb	r2, [r3, #4]
		ModBUS_Config(&mb_wf);		//WIFI como servidor TCP, recibe comadno ModBUS
 8000a92:	48ad      	ldr	r0, [pc, #692]	@ (8000d48 <main+0x684>)
 8000a94:	f00b f83c 	bl	800bb10 <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a98:	4bab      	ldr	r3, [pc, #684]	@ (8000d48 <main+0x684>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	711a      	strb	r2, [r3, #4]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a9e:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8000aa2:	2103      	movs	r1, #3
 8000aa4:	48a8      	ldr	r0, [pc, #672]	@ (8000d48 <main+0x684>)
 8000aa6:	f00b f8d6 	bl	800bc56 <ModBUS_F03_Assign>
		pos_decimal[0]=1;
 8000aaa:	4ba8      	ldr	r3, [pc, #672]	@ (8000d4c <main+0x688>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]
		pos_decimal[1]=1;
 8000ab0:	4ba6      	ldr	r3, [pc, #664]	@ (8000d4c <main+0x688>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	705a      	strb	r2, [r3, #1]
		pos_decimal[2]=1;
 8000ab6:	4ba5      	ldr	r3, [pc, #660]	@ (8000d4c <main+0x688>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	709a      	strb	r2, [r3, #2]
		pos_decimal[3]=1;
 8000abc:	4ba3      	ldr	r3, [pc, #652]	@ (8000d4c <main+0x688>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	70da      	strb	r2, [r3, #3]
		pos_decimal[4]=1;
 8000ac2:	4ba2      	ldr	r3, [pc, #648]	@ (8000d4c <main+0x688>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	711a      	strb	r2, [r3, #4]
		pos_decimal[5]=1;
 8000ac8:	4ba0      	ldr	r3, [pc, #640]	@ (8000d4c <main+0x688>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	715a      	strb	r2, [r3, #5]
		pos_decimal[6]=1;
 8000ace:	4b9f      	ldr	r3, [pc, #636]	@ (8000d4c <main+0x688>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	719a      	strb	r2, [r3, #6]
		pos_decimal[7]=1;
 8000ad4:	4b9d      	ldr	r3, [pc, #628]	@ (8000d4c <main+0x688>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	71da      	strb	r2, [r3, #7]
		pos_decimal[8]=1;
 8000ada:	4b9c      	ldr	r3, [pc, #624]	@ (8000d4c <main+0x688>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	721a      	strb	r2, [r3, #8]
		pos_decimal[9]=1;
 8000ae0:	4b9a      	ldr	r3, [pc, #616]	@ (8000d4c <main+0x688>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	725a      	strb	r2, [r3, #9]
		pos_decimal[10]=1;
 8000ae6:	4b99      	ldr	r3, [pc, #612]	@ (8000d4c <main+0x688>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	729a      	strb	r2, [r3, #10]
		pos_decimal[11]=1;
 8000aec:	4b97      	ldr	r3, [pc, #604]	@ (8000d4c <main+0x688>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	72da      	strb	r2, [r3, #11]
		pos_decimal[12]=1;
 8000af2:	4b96      	ldr	r3, [pc, #600]	@ (8000d4c <main+0x688>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	731a      	strb	r2, [r3, #12]
		pos_decimal[13]=1;
 8000af8:	4b94      	ldr	r3, [pc, #592]	@ (8000d4c <main+0x688>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	735a      	strb	r2, [r3, #13]
		pos_decimal[14]=1;
 8000afe:	4b93      	ldr	r3, [pc, #588]	@ (8000d4c <main+0x688>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	739a      	strb	r2, [r3, #14]
		pos_decimal[15]=1;
 8000b04:	4b91      	ldr	r3, [pc, #580]	@ (8000d4c <main+0x688>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	73da      	strb	r2, [r3, #15]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0a:	f001 ffb7 	bl	8002a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0e:	f000 faf9 	bl	8001104 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000b12:	4b8f      	ldr	r3, [pc, #572]	@ (8000d50 <main+0x68c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a8f      	ldr	r2, [pc, #572]	@ (8000d54 <main+0x690>)
 8000b18:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1c:	099b      	lsrs	r3, r3, #6
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fd86 	bl	8000630 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b24:	f000 fc5a 	bl	80013dc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b28:	f000 fb54 	bl	80011d4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000b2c:	f000 fb88 	bl	8001240 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b30:	f000 fc00 	bl	8001334 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b34:	f000 fc28 	bl	8001388 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

     ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000b38:	210e      	movs	r1, #14
 8000b3a:	4887      	ldr	r0, [pc, #540]	@ (8000d58 <main+0x694>)
 8000b3c:	f000 fcf4 	bl	8001528 <ITM0_Write>
     HAL_UART_Transmit_IT(&huart2,"\r\n INICIO OK \r\n",strlen("\r\n INICIO OK \r\n"));
 8000b40:	220f      	movs	r2, #15
 8000b42:	4986      	ldr	r1, [pc, #536]	@ (8000d5c <main+0x698>)
 8000b44:	4886      	ldr	r0, [pc, #536]	@ (8000d60 <main+0x69c>)
 8000b46:	f004 fd51 	bl	80055ec <HAL_UART_Transmit_IT>
	 HW_RESET(&wf);
 8000b4a:	487c      	ldr	r0, [pc, #496]	@ (8000d3c <main+0x678>)
 8000b4c:	f005 fd22 	bl	8006594 <HW_RESET>
	 if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000b50:	4b7a      	ldr	r3, [pc, #488]	@ (8000d3c <main+0x678>)
 8000b52:	f8d3 3d84 	ldr.w	r3, [r3, #3460]	@ 0xd84
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <main+0x49e>
 8000b5a:	2113      	movs	r1, #19
 8000b5c:	4881      	ldr	r0, [pc, #516]	@ (8000d64 <main+0x6a0>)
 8000b5e:	f000 fce3 	bl	8001528 <ITM0_Write>
	 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000b62:	2201      	movs	r2, #1
 8000b64:	4980      	ldr	r1, [pc, #512]	@ (8000d68 <main+0x6a4>)
 8000b66:	4881      	ldr	r0, [pc, #516]	@ (8000d6c <main+0x6a8>)
 8000b68:	f004 fd85 	bl	8005676 <HAL_UART_Receive_IT>
	 if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5500 \r\n",strlen("\r\n SET-UP W5500 \r\n"));
 8000b6c:	4b80      	ldr	r3, [pc, #512]	@ (8000d70 <main+0x6ac>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <main+0x4b8>
 8000b74:	2112      	movs	r1, #18
 8000b76:	487f      	ldr	r0, [pc, #508]	@ (8000d74 <main+0x6b0>)
 8000b78:	f000 fcd6 	bl	8001528 <ITM0_Write>


     SPI_ETH_PHY_RESET(&ETH);
 8000b7c:	487e      	ldr	r0, [pc, #504]	@ (8000d78 <main+0x6b4>)
 8000b7e:	f00c fb0d 	bl	800d19c <SPI_ETH_PHY_RESET>
     HAL_Delay(800);
 8000b82:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000b86:	f001 ffeb 	bl	8002b60 <HAL_Delay>
     eth_init(&ETH);
 8000b8a:	487b      	ldr	r0, [pc, #492]	@ (8000d78 <main+0x6b4>)
 8000b8c:	f00c fcf6 	bl	800d57c <eth_init>
     SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b90:	4979      	ldr	r1, [pc, #484]	@ (8000d78 <main+0x6b4>)
 8000b92:	487a      	ldr	r0, [pc, #488]	@ (8000d7c <main+0x6b8>)
 8000b94:	f00d f877 	bl	800dc86 <SPI_ETH_SNIFF>
     HAL_Delay(800);
 8000b98:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000b9c:	f001 ffe0 	bl	8002b60 <HAL_Delay>
   	 eth_socket_init(&ETH,S0_REG);
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4875      	ldr	r0, [pc, #468]	@ (8000d78 <main+0x6b4>)
 8000ba4:	f00c fdbc 	bl	800d720 <eth_socket_init>
   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000ba8:	4973      	ldr	r1, [pc, #460]	@ (8000d78 <main+0x6b4>)
 8000baa:	4874      	ldr	r0, [pc, #464]	@ (8000d7c <main+0x6b8>)
 8000bac:	f00d f86b 	bl	800dc86 <SPI_ETH_SNIFF>
	 uint16_t b=0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	81bb      	strh	r3, [r7, #12]
	 uint8_t spi_Data[2];
	 b = SPI_ETH_REG(&ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2124      	movs	r1, #36	@ 0x24
 8000bc4:	486c      	ldr	r0, [pc, #432]	@ (8000d78 <main+0x6b4>)
 8000bc6:	f00c fb40 	bl	800d24a <SPI_ETH_REG>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	81bb      	strh	r3, [r7, #12]
	 eth_wr_SOCKET_MODE(&ETH,S0_REG,MODE_TCP);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	4869      	ldr	r0, [pc, #420]	@ (8000d78 <main+0x6b4>)
 8000bd4:	f00c fcae 	bl	800d534 <eth_wr_SOCKET_MODE>
   	 SPI_ETH_REG(&ETH, S_DIPR, S0_REG,SPI_WRITE, ETH.S_DIPR,4);									// client
 8000bd8:	2304      	movs	r3, #4
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	4b68      	ldr	r3, [pc, #416]	@ (8000d80 <main+0x6bc>)
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2301      	movs	r3, #1
 8000be2:	2201      	movs	r2, #1
 8000be4:	210c      	movs	r1, #12
 8000be6:	4864      	ldr	r0, [pc, #400]	@ (8000d78 <main+0x6b4>)
 8000be8:	f00c fb2f 	bl	800d24a <SPI_ETH_REG>
   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 8000bec:	212e      	movs	r1, #46	@ 0x2e
 8000bee:	4865      	ldr	r0, [pc, #404]	@ (8000d84 <main+0x6c0>)
 8000bf0:	f000 fc9a 	bl	8001528 <ITM0_Write>
   	 SPI_ETH_REG(&ETH, S_DPORT, S0_REG,SPI_WRITE, ETH.S_DPORT,2);									// client
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	9301      	str	r3, [sp, #4]
 8000bf8:	4b63      	ldr	r3, [pc, #396]	@ (8000d88 <main+0x6c4>)
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2110      	movs	r1, #16
 8000c02:	485d      	ldr	r0, [pc, #372]	@ (8000d78 <main+0x6b4>)
 8000c04:	f00c fb21 	bl	800d24a <SPI_ETH_REG>
   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 8000c08:	2120      	movs	r1, #32
 8000c0a:	4860      	ldr	r0, [pc, #384]	@ (8000d8c <main+0x6c8>)
 8000c0c:	f000 fc8c 	bl	8001528 <ITM0_Write>
   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000c10:	4959      	ldr	r1, [pc, #356]	@ (8000d78 <main+0x6b4>)
 8000c12:	485a      	ldr	r0, [pc, #360]	@ (8000d7c <main+0x6b8>)
 8000c14:	f00d f837 	bl	800dc86 <SPI_ETH_SNIFF>
   	 eth_wr_SOCKET_CMD(&ETH, S0_REG,OPEN );
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	4856      	ldr	r0, [pc, #344]	@ (8000d78 <main+0x6b4>)
 8000c1e:	f00c fc66 	bl	800d4ee <eth_wr_SOCKET_CMD>

   	 HAL_Delay(1000);
 8000c22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c26:	f001 ff9b 	bl	8002b60 <HAL_Delay>
   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000c2a:	4953      	ldr	r1, [pc, #332]	@ (8000d78 <main+0x6b4>)
 8000c2c:	4853      	ldr	r0, [pc, #332]	@ (8000d7c <main+0x6b8>)
 8000c2e:	f00d f82a 	bl	800dc86 <SPI_ETH_SNIFF>

	 //SPI_READ_EN=1;
   	 //------------------------ RUN ESP -----------------------------------//
     if(ESP8266_HW_Init(&huart1)==1)
 8000c32:	484e      	ldr	r0, [pc, #312]	@ (8000d6c <main+0x6a8>)
 8000c34:	f001 fbca 	bl	80023cc <ESP8266_HW_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d111      	bne.n	8000c62 <main+0x59e>
     {
		  ESP_HW_Init=1;
 8000c3e:	4b54      	ldr	r3, [pc, #336]	@ (8000d90 <main+0x6cc>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000c44:	4b3d      	ldr	r3, [pc, #244]	@ (8000d3c <main+0x678>)
 8000c46:	f8d3 3d84 	ldr.w	r3, [r3, #3460]	@ 0xd84
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d003      	beq.n	8000c56 <main+0x592>
 8000c4e:	2113      	movs	r1, #19
 8000c50:	4850      	ldr	r0, [pc, #320]	@ (8000d94 <main+0x6d0>)
 8000c52:	f000 fc69 	bl	8001528 <ITM0_Write>
		  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000c56:	2213      	movs	r2, #19
 8000c58:	494e      	ldr	r1, [pc, #312]	@ (8000d94 <main+0x6d0>)
 8000c5a:	4841      	ldr	r0, [pc, #260]	@ (8000d60 <main+0x69c>)
 8000c5c:	f004 fcc6 	bl	80055ec <HAL_UART_Transmit_IT>
 8000c60:	e02e      	b.n	8000cc0 <main+0x5fc>
     }
     else
     {

    	 HW_RESET(&wf);
 8000c62:	4836      	ldr	r0, [pc, #216]	@ (8000d3c <main+0x678>)
 8000c64:	f005 fc96 	bl	8006594 <HW_RESET>
		 ESP_REinit=0;
 8000c68:	4b4b      	ldr	r3, [pc, #300]	@ (8000d98 <main+0x6d4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
			  if(ESP8266_HW_Init(&huart1)==1)
 8000c6e:	483f      	ldr	r0, [pc, #252]	@ (8000d6c <main+0x6a8>)
 8000c70:	f001 fbac 	bl	80023cc <ESP8266_HW_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d111      	bne.n	8000c9e <main+0x5da>
				  {
					  ESP_HW_Init=1;
 8000c7a:	4b45      	ldr	r3, [pc, #276]	@ (8000d90 <main+0x6cc>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
					  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000c80:	4b2e      	ldr	r3, [pc, #184]	@ (8000d3c <main+0x678>)
 8000c82:	f8d3 3d84 	ldr.w	r3, [r3, #3460]	@ 0xd84
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <main+0x5ce>
 8000c8a:	2113      	movs	r1, #19
 8000c8c:	4841      	ldr	r0, [pc, #260]	@ (8000d94 <main+0x6d0>)
 8000c8e:	f000 fc4b 	bl	8001528 <ITM0_Write>
					  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init2 OK\r\n",strlen("\r\n ESP HW Init2 OK\r\n"));
 8000c92:	2214      	movs	r2, #20
 8000c94:	4941      	ldr	r1, [pc, #260]	@ (8000d9c <main+0x6d8>)
 8000c96:	4832      	ldr	r0, [pc, #200]	@ (8000d60 <main+0x69c>)
 8000c98:	f004 fca8 	bl	80055ec <HAL_UART_Transmit_IT>
 8000c9c:	e010      	b.n	8000cc0 <main+0x5fc>
				  }
				  else
				  {
					  ESP_HW_Init=0;
 8000c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d90 <main+0x6cc>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
					  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000ca4:	4b25      	ldr	r3, [pc, #148]	@ (8000d3c <main+0x678>)
 8000ca6:	f8d3 3d84 	ldr.w	r3, [r3, #3460]	@ 0xd84
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <main+0x5f2>
 8000cae:	2115      	movs	r1, #21
 8000cb0:	483b      	ldr	r0, [pc, #236]	@ (8000da0 <main+0x6dc>)
 8000cb2:	f000 fc39 	bl	8001528 <ITM0_Write>
					  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Fail\r\n",strlen("\r\n ESP HW Fail\r\n"));
 8000cb6:	2210      	movs	r2, #16
 8000cb8:	493a      	ldr	r1, [pc, #232]	@ (8000da4 <main+0x6e0>)
 8000cba:	4829      	ldr	r0, [pc, #164]	@ (8000d60 <main+0x69c>)
 8000cbc:	f004 fc96 	bl	80055ec <HAL_UART_Transmit_IT>
				  }
     }
     //------------------------ RUN ESP -----------------------------------//

     HAL_Delay(1000);
 8000cc0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cc4:	f001 ff4c 	bl	8002b60 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 SPI_READ_EN=1;
 8000cc8:	4b37      	ldr	r3, [pc, #220]	@ (8000da8 <main+0x6e4>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]





		  	  if (ESP_HW_Init==1)
 8000cce:	4b30      	ldr	r3, [pc, #192]	@ (8000d90 <main+0x6cc>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	f040 80bc 	bne.w	8000e50 <main+0x78c>
		  	  {
		  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S_data_available))
 8000cd8:	4b34      	ldr	r3, [pc, #208]	@ (8000dac <main+0x6e8>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	f040 80b7 	bne.w	8000e50 <main+0x78c>
 8000ce2:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <main+0x678>)
 8000ce4:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f040 80b1 	bne.w	8000e50 <main+0x78c>
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <main+0x678>)
 8000cf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8000cf4:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8000cf8:	f340 80aa 	ble.w	8000e50 <main+0x78c>
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <main+0x6b4>)
 8000cfe:	7e9b      	ldrb	r3, [r3, #26]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f000 80a5 	beq.w	8000e50 <main+0x78c>
		  			{	ETH.S_data_available=0;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <main+0x6b4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	769a      	strb	r2, [r3, #26]
		  				wf_snd_flag_ticks=0;
 8000d0c:	4b28      	ldr	r3, [pc, #160]	@ (8000db0 <main+0x6ec>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
		  				WF_SND_FLAG=0;
 8000d12:	4b26      	ldr	r3, [pc, #152]	@ (8000dac <main+0x6e8>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
		  				HAL_UART_Transmit_IT(&huart2,"\r\n ENTER TO SEND DATA \r\n",strlen("\r\n ENTER TO SEND DATA \r\n"));
 8000d18:	2218      	movs	r2, #24
 8000d1a:	4926      	ldr	r1, [pc, #152]	@ (8000db4 <main+0x6f0>)
 8000d1c:	4810      	ldr	r0, [pc, #64]	@ (8000d60 <main+0x69c>)
 8000d1e:	f004 fc65 	bl	80055ec <HAL_UART_Transmit_IT>
		  				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000d22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d26:	4824      	ldr	r0, [pc, #144]	@ (8000db8 <main+0x6f4>)
 8000d28:	f002 fb95 	bl	8003456 <HAL_GPIO_TogglePin>
		  				ITM0_Write("\r\n#RED#WF-SE GENERA INFO Y ENVIA\r\n",strlen("\r\n#RED#WF-SE GENERA INFO Y ENVIA\r\n"));
 8000d2c:	2122      	movs	r1, #34	@ 0x22
 8000d2e:	4823      	ldr	r0, [pc, #140]	@ (8000dbc <main+0x6f8>)
 8000d30:	f000 fbfa 	bl	8001528 <ITM0_Write>

		  				for(uint8_t i=0;i<=16;i++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]
 8000d38:	e050      	b.n	8000ddc <main+0x718>
 8000d3a:	bf00      	nop
 8000d3c:	200023e0 	.word	0x200023e0
 8000d40:	40020000 	.word	0x40020000
 8000d44:	20003168 	.word	0x20003168
 8000d48:	200037b8 	.word	0x200037b8
 8000d4c:	2000425c 	.word	0x2000425c
 8000d50:	200000b0 	.word	0x200000b0
 8000d54:	10624dd3 	.word	0x10624dd3
 8000d58:	08010638 	.word	0x08010638
 8000d5c:	08010648 	.word	0x08010648
 8000d60:	200002c4 	.word	0x200002c4
 8000d64:	08010658 	.word	0x08010658
 8000d68:	20004684 	.word	0x20004684
 8000d6c:	20000280 	.word	0x20000280
 8000d70:	20004208 	.word	0x20004208
 8000d74:	0801066c 	.word	0x0801066c
 8000d78:	20000310 	.word	0x20000310
 8000d7c:	20001384 	.word	0x20001384
 8000d80:	20001354 	.word	0x20001354
 8000d84:	08010680 	.word	0x08010680
 8000d88:	20001358 	.word	0x20001358
 8000d8c:	080106b0 	.word	0x080106b0
 8000d90:	2000426e 	.word	0x2000426e
 8000d94:	080106d4 	.word	0x080106d4
 8000d98:	2000426c 	.word	0x2000426c
 8000d9c:	080106e8 	.word	0x080106e8
 8000da0:	08010700 	.word	0x08010700
 8000da4:	08010718 	.word	0x08010718
 8000da8:	2000427c 	.word	0x2000427c
 8000dac:	20004209 	.word	0x20004209
 8000db0:	2000420c 	.word	0x2000420c
 8000db4:	0801072c 	.word	0x0801072c
 8000db8:	40020800 	.word	0x40020800
 8000dbc:	08010748 	.word	0x08010748
		  				{
		  					datos[i]=ModBUS_F03_Read(&mb_eth,i);
 8000dc0:	7bfc      	ldrb	r4, [r7, #15]
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	48a8      	ldr	r0, [pc, #672]	@ (8001068 <main+0x9a4>)
 8000dc8:	f00a ff74 	bl	800bcb4 <ModBUS_F03_Read>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4ba6      	ldr	r3, [pc, #664]	@ (800106c <main+0x9a8>)
 8000dd2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		  				for(uint8_t i=0;i<=16;i++)
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	2b10      	cmp	r3, #16
 8000de0:	d9ee      	bls.n	8000dc0 <main+0x6fc>
		  				}

		  				if(httpPOST2(ENDPOINT, SERVER_IP,PORT,&datos,&pos_decimal,16,TEST_2,post, body, 512))
 8000de2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000de6:	9305      	str	r3, [sp, #20]
 8000de8:	4ba1      	ldr	r3, [pc, #644]	@ (8001070 <main+0x9ac>)
 8000dea:	9304      	str	r3, [sp, #16]
 8000dec:	4ba1      	ldr	r3, [pc, #644]	@ (8001074 <main+0x9b0>)
 8000dee:	9303      	str	r3, [sp, #12]
 8000df0:	2302      	movs	r3, #2
 8000df2:	9302      	str	r3, [sp, #8]
 8000df4:	2310      	movs	r3, #16
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	4b9f      	ldr	r3, [pc, #636]	@ (8001078 <main+0x9b4>)
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	4b9b      	ldr	r3, [pc, #620]	@ (800106c <main+0x9a8>)
 8000dfe:	4a9f      	ldr	r2, [pc, #636]	@ (800107c <main+0x9b8>)
 8000e00:	499f      	ldr	r1, [pc, #636]	@ (8001080 <main+0x9bc>)
 8000e02:	48a0      	ldr	r0, [pc, #640]	@ (8001084 <main+0x9c0>)
 8000e04:	f00a fd1e 	bl	800b844 <httpPOST2>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d020      	beq.n	8000e50 <main+0x78c>
		  				{
  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000e0e:	4899      	ldr	r0, [pc, #612]	@ (8001074 <main+0x9b0>)
 8000e10:	f7ff f9f0 	bl	80001f4 <strlen>
 8000e14:	4603      	mov	r3, r0
 8000e16:	461a      	mov	r2, r3
 8000e18:	2341      	movs	r3, #65	@ 0x41
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	4995      	ldr	r1, [pc, #596]	@ (8001074 <main+0x9b0>)
 8000e20:	4899      	ldr	r0, [pc, #612]	@ (8001088 <main+0x9c4>)
 8000e22:	f00e f93d 	bl	800f0a0 <CopiaVector>
  							wf._n_D2SND=strlen(post);
 8000e26:	4893      	ldr	r0, [pc, #588]	@ (8001074 <main+0x9b0>)
 8000e28:	f7ff f9e4 	bl	80001f4 <strlen>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b96      	ldr	r3, [pc, #600]	@ (800108c <main+0x9c8>)
 8000e32:	f8c3 2d18 	str.w	r2, [r3, #3352]	@ 0xd18
  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000e36:	4b95      	ldr	r3, [pc, #596]	@ (800108c <main+0x9c8>)
 8000e38:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d807      	bhi.n	8000e50 <main+0x78c>
  							{
  								EnviarDatos(&wf);
 8000e40:	4892      	ldr	r0, [pc, #584]	@ (800108c <main+0x9c8>)
 8000e42:	f005 fc95 	bl	8006770 <EnviarDatos>
  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000e46:	4b91      	ldr	r3, [pc, #580]	@ (800108c <main+0x9c8>)
 8000e48:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000e4c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		  				}*/
		  			}
		  	  }
		  /**************[ FIN PIDO ENVIAR DATOS ]**************/

		  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000e50:	4b8f      	ldr	r3, [pc, #572]	@ (8001090 <main+0x9cc>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d003      	beq.n	8000e60 <main+0x79c>
 8000e58:	4b8e      	ldr	r3, [pc, #568]	@ (8001094 <main+0x9d0>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d175      	bne.n	8000f4c <main+0x888>
		  		{
		  			if(FLAG_UART1==1)
 8000e60:	4b8b      	ldr	r3, [pc, #556]	@ (8001090 <main+0x9cc>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d11c      	bne.n	8000ea2 <main+0x7de>
		  				{
		  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000e68:	4b8b      	ldr	r3, [pc, #556]	@ (8001098 <main+0x9d4>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b8b      	ldr	r3, [pc, #556]	@ (800109c <main+0x9d8>)
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2301      	movs	r3, #1
 8000e72:	498b      	ldr	r1, [pc, #556]	@ (80010a0 <main+0x9dc>)
 8000e74:	488b      	ldr	r0, [pc, #556]	@ (80010a4 <main+0x9e0>)
 8000e76:	f00e f913 	bl	800f0a0 <CopiaVector>
		  					FLAG_UART1=0;
 8000e7a:	4b85      	ldr	r3, [pc, #532]	@ (8001090 <main+0x9cc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]

		  						if (error_rxdata==3)
 8000e80:	4b89      	ldr	r3, [pc, #548]	@ (80010a8 <main+0x9e4>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d102      	bne.n	8000e8e <main+0x7ca>
		  						{
		  							error_rxdata=0;
 8000e88:	4b87      	ldr	r3, [pc, #540]	@ (80010a8 <main+0x9e4>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
		  						}
		  						if (error_rxdata==1)
 8000e8e:	4b86      	ldr	r3, [pc, #536]	@ (80010a8 <main+0x9e4>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d105      	bne.n	8000ea2 <main+0x7de>
		  						{
		  							error_rxdata=5;
 8000e96:	4b84      	ldr	r3, [pc, #528]	@ (80010a8 <main+0x9e4>)
 8000e98:	2205      	movs	r2, #5
 8000e9a:	701a      	strb	r2, [r3, #0]
		  							error_rxdata=0;
 8000e9c:	4b82      	ldr	r3, [pc, #520]	@ (80010a8 <main+0x9e4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
		  						}
		  				}
		  			if(FLAG_TIMEOUT==1)
 8000ea2:	4b7c      	ldr	r3, [pc, #496]	@ (8001094 <main+0x9d0>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d102      	bne.n	8000eb0 <main+0x7ec>
		  					{
		  						FLAG_TIMEOUT=0;
 8000eaa:	4b7a      	ldr	r3, [pc, #488]	@ (8001094 <main+0x9d0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
		  					}

		  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000eb0:	4b7e      	ldr	r3, [pc, #504]	@ (80010ac <main+0x9e8>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d149      	bne.n	8000f4c <main+0x888>
		  				{
		  					/*************** Copio y proceso info recibida ***************/
		  					wf._n_orig=UART_RX_items;
 8000eb8:	4b77      	ldr	r3, [pc, #476]	@ (8001098 <main+0x9d4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a73      	ldr	r2, [pc, #460]	@ (800108c <main+0x9c8>)
 8000ebe:	f8c2 3d0c 	str.w	r3, [r2, #3340]	@ 0xd0c
		  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000ec2:	4b75      	ldr	r3, [pc, #468]	@ (8001098 <main+0x9d4>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b75      	ldr	r3, [pc, #468]	@ (800109c <main+0x9d8>)
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2301      	movs	r3, #1
 8000ecc:	4974      	ldr	r1, [pc, #464]	@ (80010a0 <main+0x9dc>)
 8000ece:	4875      	ldr	r0, [pc, #468]	@ (80010a4 <main+0x9e0>)
 8000ed0:	f00e f8e6 	bl	800f0a0 <CopiaVector>
		  					resultado=AT_ESP8266_ND(&wf);
 8000ed4:	486d      	ldr	r0, [pc, #436]	@ (800108c <main+0x9c8>)
 8000ed6:	f005 fd31 	bl	800693c <AT_ESP8266_ND>
 8000eda:	4603      	mov	r3, r0
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b74      	ldr	r3, [pc, #464]	@ (80010b0 <main+0x9ec>)
 8000ee0:	701a      	strb	r2, [r3, #0]

		  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

		  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800108c <main+0x9c8>)
 8000ee4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d12f      	bne.n	8000f4c <main+0x888>
 8000eec:	4b67      	ldr	r3, [pc, #412]	@ (800108c <main+0x9c8>)
 8000eee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8000ef2:	2b63      	cmp	r3, #99	@ 0x63
 8000ef4:	d12a      	bne.n	8000f4c <main+0x888>
		  					{

		  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000ef6:	4b65      	ldr	r3, [pc, #404]	@ (800108c <main+0x9c8>)
 8000ef8:	f8d3 2d28 	ldr.w	r2, [r3, #3368]	@ 0xd28
 8000efc:	2341      	movs	r3, #65	@ 0x41
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2300      	movs	r3, #0
 8000f02:	496c      	ldr	r1, [pc, #432]	@ (80010b4 <main+0x9f0>)
 8000f04:	486c      	ldr	r0, [pc, #432]	@ (80010b8 <main+0x9f4>)
 8000f06:	f00e f8cb 	bl	800f0a0 <CopiaVector>
		  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000f0a:	4b60      	ldr	r3, [pc, #384]	@ (800108c <main+0x9c8>)
 8000f0c:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	@ 0xd28
 8000f10:	4a6a      	ldr	r2, [pc, #424]	@ (80010bc <main+0x9f8>)
 8000f12:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

		  						ModBUS(&mb_wf);
 8000f16:	4869      	ldr	r0, [pc, #420]	@ (80010bc <main+0x9f8>)
 8000f18:	f00a ff52 	bl	800bdc0 <ModBUS>

		  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000f1c:	4b67      	ldr	r3, [pc, #412]	@ (80010bc <main+0x9f8>)
 8000f1e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 8000f22:	2341      	movs	r3, #65	@ 0x41
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2300      	movs	r3, #0
 8000f28:	4965      	ldr	r1, [pc, #404]	@ (80010c0 <main+0x9fc>)
 8000f2a:	4857      	ldr	r0, [pc, #348]	@ (8001088 <main+0x9c4>)
 8000f2c:	f00e f8b8 	bl	800f0a0 <CopiaVector>
		  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000f30:	4b62      	ldr	r3, [pc, #392]	@ (80010bc <main+0x9f8>)
 8000f32:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8000f36:	4a55      	ldr	r2, [pc, #340]	@ (800108c <main+0x9c8>)
 8000f38:	f8c2 3d18 	str.w	r3, [r2, #3352]	@ 0xd18
		  						wf._new_data_rcv=0;//
 8000f3c:	4b53      	ldr	r3, [pc, #332]	@ (800108c <main+0x9c8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
		  						wf._send_data=1;
 8000f44:	4b51      	ldr	r3, [pc, #324]	@ (800108c <main+0x9c8>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	f8c3 2ac4 	str.w	r2, [r3, #2756]	@ 0xac4
		  						}
		  					}

		  		}

		  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000f4c:	4b57      	ldr	r3, [pc, #348]	@ (80010ac <main+0x9e8>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d108      	bne.n	8000f66 <main+0x8a2>
		  			{
		  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000f54:	2201      	movs	r2, #1
 8000f56:	495b      	ldr	r1, [pc, #364]	@ (80010c4 <main+0xa00>)
 8000f58:	484c      	ldr	r0, [pc, #304]	@ (800108c <main+0x9c8>)
 8000f5a:	f008 ff99 	bl	8009e90 <WiFi_Conn_ND>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b59      	ldr	r3, [pc, #356]	@ (80010c8 <main+0xa04>)
 8000f64:	701a      	strb	r2, [r3, #0]

		  			}
		  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000f66:	4b59      	ldr	r3, [pc, #356]	@ (80010cc <main+0xa08>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d10e      	bne.n	8000f8c <main+0x8c8>
		  			{

		  				HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Resetting \r\n",strlen("\r\n ESP HW Resetting \r\n"));
 8000f6e:	2216      	movs	r2, #22
 8000f70:	4957      	ldr	r1, [pc, #348]	@ (80010d0 <main+0xa0c>)
 8000f72:	4858      	ldr	r0, [pc, #352]	@ (80010d4 <main+0xa10>)
 8000f74:	f004 fb3a 	bl	80055ec <HAL_UART_Transmit_IT>
		  				HW_RESET(&wf);
 8000f78:	4844      	ldr	r0, [pc, #272]	@ (800108c <main+0x9c8>)
 8000f7a:	f005 fb0b 	bl	8006594 <HW_RESET>
		  				HAL_Delay(5000);//210419
 8000f7e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f82:	f001 fded 	bl	8002b60 <HAL_Delay>
		  				esp_restart=0;
 8000f86:	4b51      	ldr	r3, [pc, #324]	@ (80010cc <main+0xa08>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
		  			}
		  		if(eth_reset==1)
 8000f8c:	4b52      	ldr	r3, [pc, #328]	@ (80010d8 <main+0xa14>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	f47f ae99 	bne.w	8000cc8 <main+0x604>
		  		{

		  		  SPI_ETH_PHY_RESET(&ETH);
 8000f96:	4851      	ldr	r0, [pc, #324]	@ (80010dc <main+0xa18>)
 8000f98:	f00c f900 	bl	800d19c <SPI_ETH_PHY_RESET>
		  		  HAL_UART_Transmit_IT(&huart2,"\r\n PHY RESET \r\n",strlen("\r\n PHY RESET \r\n"));
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	4950      	ldr	r1, [pc, #320]	@ (80010e0 <main+0xa1c>)
 8000fa0:	484c      	ldr	r0, [pc, #304]	@ (80010d4 <main+0xa10>)
 8000fa2:	f004 fb23 	bl	80055ec <HAL_UART_Transmit_IT>
		  	      HAL_Delay(800);
 8000fa6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000faa:	f001 fdd9 	bl	8002b60 <HAL_Delay>
		  	      eth_init(&ETH);
 8000fae:	484b      	ldr	r0, [pc, #300]	@ (80010dc <main+0xa18>)
 8000fb0:	f00c fae4 	bl	800d57c <eth_init>
		  	      HAL_UART_Transmit_IT(&huart2,"\r\n ETH INIT \r\n",strlen("\r\n ETH INIT \r\n"));
 8000fb4:	220e      	movs	r2, #14
 8000fb6:	494b      	ldr	r1, [pc, #300]	@ (80010e4 <main+0xa20>)
 8000fb8:	4846      	ldr	r0, [pc, #280]	@ (80010d4 <main+0xa10>)
 8000fba:	f004 fb17 	bl	80055ec <HAL_UART_Transmit_IT>
		  	      SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000fbe:	4947      	ldr	r1, [pc, #284]	@ (80010dc <main+0xa18>)
 8000fc0:	4849      	ldr	r0, [pc, #292]	@ (80010e8 <main+0xa24>)
 8000fc2:	f00c fe60 	bl	800dc86 <SPI_ETH_SNIFF>
		  	      HAL_Delay(800);
 8000fc6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000fca:	f001 fdc9 	bl	8002b60 <HAL_Delay>
		  	   	  eth_socket_init(&ETH,S0_REG);
 8000fce:	2101      	movs	r1, #1
 8000fd0:	4842      	ldr	r0, [pc, #264]	@ (80010dc <main+0xa18>)
 8000fd2:	f00c fba5 	bl	800d720 <eth_socket_init>
		  	   	  HAL_UART_Transmit_IT(&huart2,"\r\n ETH SOCKET INIT \r\n",strlen("\r\n ETH SOCKET INIT \r\n"));
 8000fd6:	2215      	movs	r2, #21
 8000fd8:	4944      	ldr	r1, [pc, #272]	@ (80010ec <main+0xa28>)
 8000fda:	483e      	ldr	r0, [pc, #248]	@ (80010d4 <main+0xa10>)
 8000fdc:	f004 fb06 	bl	80055ec <HAL_UART_Transmit_IT>

		  		 uint16_t b=0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	817b      	strh	r3, [r7, #10]
		  		 uint8_t spi_Data[2];
		  		 b = SPI_ETH_REG(&ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2300      	movs	r3, #0
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2124      	movs	r1, #36	@ 0x24
 8000ff2:	483a      	ldr	r0, [pc, #232]	@ (80010dc <main+0xa18>)
 8000ff4:	f00c f929 	bl	800d24a <SPI_ETH_REG>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	817b      	strh	r3, [r7, #10]

		  		 eth_wr_SOCKET_MODE(&ETH,S0_REG,MODE_TCP);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2101      	movs	r1, #1
 8001000:	4836      	ldr	r0, [pc, #216]	@ (80010dc <main+0xa18>)
 8001002:	f00c fa97 	bl	800d534 <eth_wr_SOCKET_MODE>
		  	   	 SPI_ETH_REG(&ETH, S_DIPR, S0_REG,SPI_WRITE, ETH.S_DIPR,4);									// client
 8001006:	2304      	movs	r3, #4
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	4b39      	ldr	r3, [pc, #228]	@ (80010f0 <main+0xa2c>)
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	2201      	movs	r2, #1
 8001012:	210c      	movs	r1, #12
 8001014:	4831      	ldr	r0, [pc, #196]	@ (80010dc <main+0xa18>)
 8001016:	f00c f918 	bl	800d24a <SPI_ETH_REG>
		  	   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 800101a:	212e      	movs	r1, #46	@ 0x2e
 800101c:	4835      	ldr	r0, [pc, #212]	@ (80010f4 <main+0xa30>)
 800101e:	f000 fa83 	bl	8001528 <ITM0_Write>
		  	   	 SPI_ETH_REG(&ETH, S_DPORT, S0_REG,SPI_WRITE, ETH.S_DPORT,2);									// client
 8001022:	2302      	movs	r3, #2
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	4b34      	ldr	r3, [pc, #208]	@ (80010f8 <main+0xa34>)
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	2201      	movs	r2, #1
 800102e:	2110      	movs	r1, #16
 8001030:	482a      	ldr	r0, [pc, #168]	@ (80010dc <main+0xa18>)
 8001032:	f00c f90a 	bl	800d24a <SPI_ETH_REG>
		  	   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 8001036:	2120      	movs	r1, #32
 8001038:	4830      	ldr	r0, [pc, #192]	@ (80010fc <main+0xa38>)
 800103a:	f000 fa75 	bl	8001528 <ITM0_Write>

		  	   	 HAL_Delay(800);
 800103e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001042:	f001 fd8d 	bl	8002b60 <HAL_Delay>
		  	   	  eth_wr_SOCKET_CMD(&ETH, S0_REG ,OPEN );
 8001046:	2201      	movs	r2, #1
 8001048:	2101      	movs	r1, #1
 800104a:	4824      	ldr	r0, [pc, #144]	@ (80010dc <main+0xa18>)
 800104c:	f00c fa4f 	bl	800d4ee <eth_wr_SOCKET_CMD>
		  	   	  HAL_UART_Transmit_IT(&huart2,"\r\n ETH OPEN \r\n",strlen("\r\n ETH OPEN \r\n"));
 8001050:	220e      	movs	r2, #14
 8001052:	492b      	ldr	r1, [pc, #172]	@ (8001100 <main+0xa3c>)
 8001054:	481f      	ldr	r0, [pc, #124]	@ (80010d4 <main+0xa10>)
 8001056:	f004 fac9 	bl	80055ec <HAL_UART_Transmit_IT>
		  	   	  ETH.ETH_WDG=0;
 800105a:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <main+0xa18>)
 800105c:	2200      	movs	r2, #0
 800105e:	829a      	strh	r2, [r3, #20]
		  	   	  eth_reset=0;
 8001060:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <main+0xa14>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
		 SPI_READ_EN=1;
 8001066:	e62f      	b.n	8000cc8 <main+0x604>
 8001068:	20003168 	.word	0x20003168
 800106c:	20000024 	.word	0x20000024
 8001070:	20004008 	.word	0x20004008
 8001074:	20003e08 	.word	0x20003e08
 8001078:	2000425c 	.word	0x2000425c
 800107c:	2000001c 	.word	0x2000001c
 8001080:	2000000c 	.word	0x2000000c
 8001084:	20000000 	.word	0x20000000
 8001088:	200026a0 	.word	0x200026a0
 800108c:	200023e0 	.word	0x200023e0
 8001090:	20004272 	.word	0x20004272
 8001094:	20004271 	.word	0x20004271
 8001098:	20004688 	.word	0x20004688
 800109c:	20004680 	.word	0x20004680
 80010a0:	20004480 	.word	0x20004480
 80010a4:	20002aa0 	.word	0x20002aa0
 80010a8:	20004275 	.word	0x20004275
 80010ac:	2000426e 	.word	0x2000426e
 80010b0:	20004274 	.word	0x20004274
 80010b4:	200024a0 	.word	0x200024a0
 80010b8:	200037ca 	.word	0x200037ca
 80010bc:	200037b8 	.word	0x200037b8
 80010c0:	200039d0 	.word	0x200039d0
 80010c4:	20000280 	.word	0x20000280
 80010c8:	20004277 	.word	0x20004277
 80010cc:	20004276 	.word	0x20004276
 80010d0:	0801076c 	.word	0x0801076c
 80010d4:	200002c4 	.word	0x200002c4
 80010d8:	20004273 	.word	0x20004273
 80010dc:	20000310 	.word	0x20000310
 80010e0:	08010784 	.word	0x08010784
 80010e4:	08010794 	.word	0x08010794
 80010e8:	20001384 	.word	0x20001384
 80010ec:	080107a4 	.word	0x080107a4
 80010f0:	20001354 	.word	0x20001354
 80010f4:	08010680 	.word	0x08010680
 80010f8:	20001358 	.word	0x20001358
 80010fc:	080106b0 	.word	0x080106b0
 8001100:	080107bc 	.word	0x080107bc

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b094      	sub	sp, #80	@ 0x50
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 0320 	add.w	r3, r7, #32
 800110e:	2230      	movs	r2, #48	@ 0x30
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f00e f9bf 	bl	800f496 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <SystemClock_Config+0xc8>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	4a26      	ldr	r2, [pc, #152]	@ (80011cc <SystemClock_Config+0xc8>)
 8001132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001136:	6413      	str	r3, [r2, #64]	@ 0x40
 8001138:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <SystemClock_Config+0xc8>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	4b21      	ldr	r3, [pc, #132]	@ (80011d0 <SystemClock_Config+0xcc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a20      	ldr	r2, [pc, #128]	@ (80011d0 <SystemClock_Config+0xcc>)
 800114e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b1e      	ldr	r3, [pc, #120]	@ (80011d0 <SystemClock_Config+0xcc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001160:	2301      	movs	r3, #1
 8001162:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001164:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116a:	2302      	movs	r3, #2
 800116c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001172:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001174:	230c      	movs	r3, #12
 8001176:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001178:	2360      	movs	r3, #96	@ 0x60
 800117a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800117c:	2302      	movs	r3, #2
 800117e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001180:	2304      	movs	r3, #4
 8001182:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001184:	f107 0320 	add.w	r3, r7, #32
 8001188:	4618      	mov	r0, r3
 800118a:	f002 f97f 	bl	800348c <HAL_RCC_OscConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001194:	f001 f9ca 	bl	800252c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001198:	230f      	movs	r3, #15
 800119a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119c:	2302      	movs	r3, #2
 800119e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	2103      	movs	r1, #3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f002 fbe1 	bl	800397c <HAL_RCC_ClockConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011c0:	f001 f9b4 	bl	800252c <Error_Handler>
  }
}
 80011c4:	bf00      	nop
 80011c6:	3750      	adds	r7, #80	@ 0x50
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40007000 	.word	0x40007000

080011d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011d8:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011da:	4a18      	ldr	r2, [pc, #96]	@ (800123c <MX_SPI1_Init+0x68>)
 80011dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011de:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011e6:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <MX_SPI1_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001200:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001204:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001206:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001208:	2208      	movs	r2, #8
 800120a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120c:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <MX_SPI1_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001218:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <MX_SPI1_Init+0x64>)
 800121a:	2200      	movs	r2, #0
 800121c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001220:	220a      	movs	r2, #10
 8001222:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001224:	4804      	ldr	r0, [pc, #16]	@ (8001238 <MX_SPI1_Init+0x64>)
 8001226:	f002 fd89 	bl	8003d3c <HAL_SPI_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001230:	f001 f97c 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200001e0 	.word	0x200001e0
 800123c:	40013000 	.word	0x40013000

08001240 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	@ 0x38
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001246:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	f107 0320 	add.w	r3, r7, #32
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
 800126c:	615a      	str	r2, [r3, #20]
 800126e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001270:	4b2f      	ldr	r3, [pc, #188]	@ (8001330 <MX_TIM2_Init+0xf0>)
 8001272:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001276:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001278:	4b2d      	ldr	r3, [pc, #180]	@ (8001330 <MX_TIM2_Init+0xf0>)
 800127a:	2264      	movs	r2, #100	@ 0x64
 800127c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b2c      	ldr	r3, [pc, #176]	@ (8001330 <MX_TIM2_Init+0xf0>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001284:	4b2a      	ldr	r3, [pc, #168]	@ (8001330 <MX_TIM2_Init+0xf0>)
 8001286:	2264      	movs	r2, #100	@ 0x64
 8001288:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128a:	4b29      	ldr	r3, [pc, #164]	@ (8001330 <MX_TIM2_Init+0xf0>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001290:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <MX_TIM2_Init+0xf0>)
 8001292:	2280      	movs	r2, #128	@ 0x80
 8001294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001296:	4826      	ldr	r0, [pc, #152]	@ (8001330 <MX_TIM2_Init+0xf0>)
 8001298:	f003 f846 	bl	8004328 <HAL_TIM_Base_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80012a2:	f001 f943 	bl	800252c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012b0:	4619      	mov	r1, r3
 80012b2:	481f      	ldr	r0, [pc, #124]	@ (8001330 <MX_TIM2_Init+0xf0>)
 80012b4:	f003 fc4e 	bl	8004b54 <HAL_TIM_ConfigClockSource>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80012be:	f001 f935 	bl	800252c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80012c2:	481b      	ldr	r0, [pc, #108]	@ (8001330 <MX_TIM2_Init+0xf0>)
 80012c4:	f003 f87f 	bl	80043c6 <HAL_TIM_OC_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80012ce:	f001 f92d 	bl	800252c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80012d2:	2108      	movs	r1, #8
 80012d4:	4816      	ldr	r0, [pc, #88]	@ (8001330 <MX_TIM2_Init+0xf0>)
 80012d6:	f003 fa7f 	bl	80047d8 <HAL_TIM_OnePulse_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80012e0:	f001 f924 	bl	800252c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ec:	f107 0320 	add.w	r3, r7, #32
 80012f0:	4619      	mov	r1, r3
 80012f2:	480f      	ldr	r0, [pc, #60]	@ (8001330 <MX_TIM2_Init+0xf0>)
 80012f4:	f003 ffea 	bl	80052cc <HAL_TIMEx_MasterConfigSynchronization>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80012fe:	f001 f915 	bl	800252c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8001302:	2320      	movs	r3, #32
 8001304:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2200      	movs	r2, #0
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	@ (8001330 <MX_TIM2_Init+0xf0>)
 800131a:	f003 fbbf 	bl	8004a9c <HAL_TIM_OC_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001324:	f001 f902 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	3738      	adds	r7, #56	@ 0x38
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000238 	.word	0x20000238

08001334 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001338:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 800133a:	4a12      	ldr	r2, [pc, #72]	@ (8001384 <MX_USART1_UART_Init+0x50>)
 800133c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 8001340:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001344:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800134c:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001352:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001358:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 800135a:	220c      	movs	r2, #12
 800135c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135e:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	@ (8001380 <MX_USART1_UART_Init+0x4c>)
 800136c:	f004 f830 	bl	80053d0 <HAL_UART_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001376:	f001 f8d9 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000280 	.word	0x20000280
 8001384:	40011000 	.word	0x40011000

08001388 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800138c:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <MX_USART2_UART_Init+0x4c>)
 800138e:	4a12      	ldr	r2, [pc, #72]	@ (80013d8 <MX_USART2_UART_Init+0x50>)
 8001390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001392:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <MX_USART2_UART_Init+0x4c>)
 8001394:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <MX_USART2_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <MX_USART2_UART_Init+0x4c>)
 80013c0:	f004 f806 	bl	80053d0 <HAL_UART_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ca:	f001 f8af 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200002c4 	.word	0x200002c4
 80013d8:	40004400 	.word	0x40004400

080013dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	@ 0x28
 80013e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b48      	ldr	r3, [pc, #288]	@ (8001518 <MX_GPIO_Init+0x13c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a47      	ldr	r2, [pc, #284]	@ (8001518 <MX_GPIO_Init+0x13c>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b45      	ldr	r3, [pc, #276]	@ (8001518 <MX_GPIO_Init+0x13c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b41      	ldr	r3, [pc, #260]	@ (8001518 <MX_GPIO_Init+0x13c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a40      	ldr	r2, [pc, #256]	@ (8001518 <MX_GPIO_Init+0x13c>)
 8001418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b3e      	ldr	r3, [pc, #248]	@ (8001518 <MX_GPIO_Init+0x13c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b3a      	ldr	r3, [pc, #232]	@ (8001518 <MX_GPIO_Init+0x13c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a39      	ldr	r2, [pc, #228]	@ (8001518 <MX_GPIO_Init+0x13c>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b37      	ldr	r3, [pc, #220]	@ (8001518 <MX_GPIO_Init+0x13c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b33      	ldr	r3, [pc, #204]	@ (8001518 <MX_GPIO_Init+0x13c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a32      	ldr	r2, [pc, #200]	@ (8001518 <MX_GPIO_Init+0x13c>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b30      	ldr	r3, [pc, #192]	@ (8001518 <MX_GPIO_Init+0x13c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001468:	482c      	ldr	r0, [pc, #176]	@ (800151c <MX_GPIO_Init+0x140>)
 800146a:	f001 ffdb 	bl	8003424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|WiFi_EN_Pin, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8001474:	482a      	ldr	r0, [pc, #168]	@ (8001520 <MX_GPIO_Init+0x144>)
 8001476:	f001 ffd5 	bl	8003424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_SET);
 800147a:	2201      	movs	r2, #1
 800147c:	2101      	movs	r1, #1
 800147e:	4829      	ldr	r0, [pc, #164]	@ (8001524 <MX_GPIO_Init+0x148>)
 8001480:	f001 ffd0 	bl	8003424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 8001484:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	481f      	ldr	r0, [pc, #124]	@ (800151c <MX_GPIO_Init+0x140>)
 800149e:	f001 fd59 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 80014a2:	2301      	movs	r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	481a      	ldr	r0, [pc, #104]	@ (8001520 <MX_GPIO_Init+0x144>)
 80014b6:	f001 fd4d 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80014ba:	2310      	movs	r3, #16
 80014bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 0314 	add.w	r3, r7, #20
 80014ce:	4619      	mov	r1, r3
 80014d0:	4813      	ldr	r0, [pc, #76]	@ (8001520 <MX_GPIO_Init+0x144>)
 80014d2:	f001 fd3f 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_RST_Pin */
  GPIO_InitStruct.Pin = SPI_RST_Pin;
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_RST_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	480d      	ldr	r0, [pc, #52]	@ (8001524 <MX_GPIO_Init+0x148>)
 80014ee:	f001 fd31 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : WiFi_EN_Pin */
  GPIO_InitStruct.Pin = WiFi_EN_Pin;
 80014f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WiFi_EN_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4805      	ldr	r0, [pc, #20]	@ (8001520 <MX_GPIO_Init+0x144>)
 800150c:	f001 fd22 	bl	8002f54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	@ 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800
 800151c:	40020800 	.word	0x40020800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020400 	.word	0x40020400

08001528 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	e009      	b.n	800154c <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff f897 	bl	8000674 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	3301      	adds	r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	dbf1      	blt.n	8001538 <ITM0_Write+0x10>
  }
  return len;
 8001554:	683b      	ldr	r3, [r7, #0]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8001566:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */
	unsigned char text[512];
	int ns=0;
 8001568:	2300      	movs	r3, #0
 800156a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
	ms_ticks++;	//100 ms
 800156e:	4b68      	ldr	r3, [pc, #416]	@ (8001710 <SysTick_Handler+0x1b0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	4a66      	ldr	r2, [pc, #408]	@ (8001710 <SysTick_Handler+0x1b0>)
 8001576:	6013      	str	r3, [r2, #0]

	if(wf._estado_conexion!=ESPstate)
 8001578:	4b66      	ldr	r3, [pc, #408]	@ (8001714 <SysTick_Handler+0x1b4>)
 800157a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800157e:	4b66      	ldr	r3, [pc, #408]	@ (8001718 <SysTick_Handler+0x1b8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d015      	beq.n	80015b2 <SysTick_Handler+0x52>
	{
		ESPstate=wf._estado_conexion;
 8001586:	4b63      	ldr	r3, [pc, #396]	@ (8001714 <SysTick_Handler+0x1b4>)
 8001588:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800158c:	4a62      	ldr	r2, [pc, #392]	@ (8001718 <SysTick_Handler+0x1b8>)
 800158e:	6013      	str	r3, [r2, #0]
		ns=INTOA(ESPstate,text);
 8001590:	4b61      	ldr	r3, [pc, #388]	@ (8001718 <SysTick_Handler+0x1b8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	463a      	mov	r2, r7
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f00d fcd7 	bl	800ef4c <INTOA>
 800159e:	f8c7 0204 	str.w	r0, [r7, #516]	@ 0x204
		HAL_UART_Transmit_IT(&huart2,&text,ns);
 80015a2:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	463b      	mov	r3, r7
 80015aa:	4619      	mov	r1, r3
 80015ac:	485b      	ldr	r0, [pc, #364]	@ (800171c <SysTick_Handler+0x1bc>)
 80015ae:	f004 f81d 	bl	80055ec <HAL_UART_Transmit_IT>

	}

	ESP_ticks++;
 80015b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001720 <SysTick_Handler+0x1c0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a59      	ldr	r2, [pc, #356]	@ (8001720 <SysTick_Handler+0x1c0>)
 80015ba:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 80015bc:	4b59      	ldr	r3, [pc, #356]	@ (8001724 <SysTick_Handler+0x1c4>)
 80015be:	7a1b      	ldrb	r3, [r3, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d004      	beq.n	80015ce <SysTick_Handler+0x6e>
 80015c4:	4b58      	ldr	r3, [pc, #352]	@ (8001728 <SysTick_Handler+0x1c8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	4a57      	ldr	r2, [pc, #348]	@ (8001728 <SysTick_Handler+0x1c8>)
 80015cc:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 80015ce:	4b55      	ldr	r3, [pc, #340]	@ (8001724 <SysTick_Handler+0x1c4>)
 80015d0:	7a1b      	ldrb	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00c      	beq.n	80015f0 <SysTick_Handler+0x90>
 80015d6:	4b53      	ldr	r3, [pc, #332]	@ (8001724 <SysTick_Handler+0x1c4>)
 80015d8:	88db      	ldrh	r3, [r3, #6]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b52      	ldr	r3, [pc, #328]	@ (8001728 <SysTick_Handler+0x1c8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	da05      	bge.n	80015f0 <SysTick_Handler+0x90>
		{
			mb_eth._w_answer=0;
 80015e4:	4b4f      	ldr	r3, [pc, #316]	@ (8001724 <SysTick_Handler+0x1c4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 80015ea:	4b4f      	ldr	r3, [pc, #316]	@ (8001728 <SysTick_Handler+0x1c8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
		}
	}*/
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 80015f0:	4b48      	ldr	r3, [pc, #288]	@ (8001714 <SysTick_Handler+0x1b4>)
 80015f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80015f6:	f240 2261 	movw	r2, #609	@ 0x261
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d005      	beq.n	800160a <SysTick_Handler+0xaa>
 80015fe:	4b45      	ldr	r3, [pc, #276]	@ (8001714 <SysTick_Handler+0x1b4>)
 8001600:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001604:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8001608:	d109      	bne.n	800161e <SysTick_Handler+0xbe>
 800160a:	4b42      	ldr	r3, [pc, #264]	@ (8001714 <SysTick_Handler+0x1b4>)
 800160c:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 8001610:	2b00      	cmp	r3, #0
 8001612:	d104      	bne.n	800161e <SysTick_Handler+0xbe>
 8001614:	4b45      	ldr	r3, [pc, #276]	@ (800172c <SysTick_Handler+0x1cc>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	4a44      	ldr	r2, [pc, #272]	@ (800172c <SysTick_Handler+0x1cc>)
 800161c:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 5000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;					//230517 wf_snd_flag_ticks>= 2000
 800161e:	4b43      	ldr	r3, [pc, #268]	@ (800172c <SysTick_Handler+0x1cc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001626:	4293      	cmp	r3, r2
 8001628:	dd0c      	ble.n	8001644 <SysTick_Handler+0xe4>
 800162a:	4b3a      	ldr	r3, [pc, #232]	@ (8001714 <SysTick_Handler+0x1b4>)
 800162c:	f8d3 3adc 	ldr.w	r3, [r3, #2780]	@ 0xadc
 8001630:	2b01      	cmp	r3, #1
 8001632:	d007      	beq.n	8001644 <SysTick_Handler+0xe4>
 8001634:	4b37      	ldr	r3, [pc, #220]	@ (8001714 <SysTick_Handler+0x1b4>)
 8001636:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <SysTick_Handler+0xe4>
 800163e:	4b3c      	ldr	r3, [pc, #240]	@ (8001730 <SysTick_Handler+0x1d0>)
 8001640:	2201      	movs	r2, #1
 8001642:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S_status == 0)
 8001644:	4b3b      	ldr	r3, [pc, #236]	@ (8001734 <SysTick_Handler+0x1d4>)
 8001646:	7d9b      	ldrb	r3, [r3, #22]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d111      	bne.n	8001670 <SysTick_Handler+0x110>
	{
		ETH.ETH_WDG++;
 800164c:	4b39      	ldr	r3, [pc, #228]	@ (8001734 <SysTick_Handler+0x1d4>)
 800164e:	8a9b      	ldrh	r3, [r3, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	b29a      	uxth	r2, r3
 8001654:	4b37      	ldr	r3, [pc, #220]	@ (8001734 <SysTick_Handler+0x1d4>)
 8001656:	829a      	strh	r2, [r3, #20]
		if (ETH.ETH_WDG>=64000)
 8001658:	4b36      	ldr	r3, [pc, #216]	@ (8001734 <SysTick_Handler+0x1d4>)
 800165a:	8a9b      	ldrh	r3, [r3, #20]
 800165c:	f5b3 4f7a 	cmp.w	r3, #64000	@ 0xfa00
 8001660:	d306      	bcc.n	8001670 <SysTick_Handler+0x110>
		{
			eth_reset=1;
 8001662:	4b35      	ldr	r3, [pc, #212]	@ (8001738 <SysTick_Handler+0x1d8>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]
			ETH.ETH_WDG=64000;
 8001668:	4b32      	ldr	r3, [pc, #200]	@ (8001734 <SysTick_Handler+0x1d4>)
 800166a:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 800166e:	829a      	strh	r2, [r3, #20]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 8001670:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <SysTick_Handler+0x1b0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b64      	cmp	r3, #100	@ 0x64
 8001676:	f040 84f0 	bne.w	800205a <SysTick_Handler+0xafa>
  {
	  dbgn++;
 800167a:	4b30      	ldr	r3, [pc, #192]	@ (800173c <SysTick_Handler+0x1dc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	4a2e      	ldr	r2, [pc, #184]	@ (800173c <SysTick_Handler+0x1dc>)
 8001682:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 8001684:	4b22      	ldr	r3, [pc, #136]	@ (8001710 <SysTick_Handler+0x1b0>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 800168a:	4b2d      	ldr	r3, [pc, #180]	@ (8001740 <SysTick_Handler+0x1e0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	4a2b      	ldr	r2, [pc, #172]	@ (8001740 <SysTick_Handler+0x1e0>)
 8001692:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 8001694:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <SysTick_Handler+0x1e4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800169c:	d102      	bne.n	80016a4 <SysTick_Handler+0x144>
 800169e:	4b29      	ldr	r3, [pc, #164]	@ (8001744 <SysTick_Handler+0x1e4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 80016a4:	4b28      	ldr	r3, [pc, #160]	@ (8001748 <SysTick_Handler+0x1e8>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d104      	bne.n	80016b6 <SysTick_Handler+0x156>
 80016ac:	4b25      	ldr	r3, [pc, #148]	@ (8001744 <SysTick_Handler+0x1e4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	4a24      	ldr	r2, [pc, #144]	@ (8001744 <SysTick_Handler+0x1e4>)
 80016b4:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 80016b6:	4b23      	ldr	r3, [pc, #140]	@ (8001744 <SysTick_Handler+0x1e4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b64      	cmp	r3, #100	@ 0x64
 80016bc:	d102      	bne.n	80016c4 <SysTick_Handler+0x164>
 80016be:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <SysTick_Handler+0x1e8>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 80016c4:	4b20      	ldr	r3, [pc, #128]	@ (8001748 <SysTick_Handler+0x1e8>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d104      	bne.n	80016d6 <SysTick_Handler+0x176>
 80016cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <SysTick_Handler+0x1e4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001744 <SysTick_Handler+0x1e4>)
 80016d4:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 80016d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <SysTick_Handler+0x1e4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <SysTick_Handler+0x184>
 80016de:	4b1a      	ldr	r3, [pc, #104]	@ (8001748 <SysTick_Handler+0x1e8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]


	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  if(spi_no_debug)
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <SysTick_Handler+0x1ec>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 84a6 	beq.w	800203a <SysTick_Handler+0xada>
	  	  {
	  if(SPI_READ_EN)
 80016ee:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <SysTick_Handler+0x1f0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 84a5 	beq.w	8002042 <SysTick_Handler+0xae2>
	  {
	     ETH.S_status=eth_rd_SOCKET_STAT(&ETH,S0_REG);  //este era el bardo
 80016f8:	2101      	movs	r1, #1
 80016fa:	480e      	ldr	r0, [pc, #56]	@ (8001734 <SysTick_Handler+0x1d4>)
 80016fc:	f00c f958 	bl	800d9b0 <eth_rd_SOCKET_STAT>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <SysTick_Handler+0x1d4>)
 8001706:	759a      	strb	r2, [r3, #22]

		  switch(ETH.S_status)	//Check Socket status
 8001708:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <SysTick_Handler+0x1d4>)
 800170a:	7d9b      	ldrb	r3, [r3, #22]
 800170c:	e022      	b.n	8001754 <SysTick_Handler+0x1f4>
 800170e:	bf00      	nop
 8001710:	20000308 	.word	0x20000308
 8001714:	200023e0 	.word	0x200023e0
 8001718:	200046b0 	.word	0x200046b0
 800171c:	200002c4 	.word	0x200002c4
 8001720:	2000468c 	.word	0x2000468c
 8001724:	20003168 	.word	0x20003168
 8001728:	20004694 	.word	0x20004694
 800172c:	2000420c 	.word	0x2000420c
 8001730:	20004209 	.word	0x20004209
 8001734:	20000310 	.word	0x20000310
 8001738:	20004273 	.word	0x20004273
 800173c:	200046b8 	.word	0x200046b8
 8001740:	2000030c 	.word	0x2000030c
 8001744:	20004690 	.word	0x20004690
 8001748:	20004278 	.word	0x20004278
 800174c:	20004258 	.word	0x20004258
 8001750:	2000427c 	.word	0x2000427c
 8001754:	2b5f      	cmp	r3, #95	@ 0x5f
 8001756:	f200 8479 	bhi.w	800204c <SysTick_Handler+0xaec>
 800175a:	a201      	add	r2, pc, #4	@ (adr r2, 8001760 <SysTick_Handler+0x200>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	080018e1 	.word	0x080018e1
 8001764:	0800204d 	.word	0x0800204d
 8001768:	0800204d 	.word	0x0800204d
 800176c:	0800204d 	.word	0x0800204d
 8001770:	0800204d 	.word	0x0800204d
 8001774:	0800204d 	.word	0x0800204d
 8001778:	0800204d 	.word	0x0800204d
 800177c:	0800204d 	.word	0x0800204d
 8001780:	0800204d 	.word	0x0800204d
 8001784:	0800204d 	.word	0x0800204d
 8001788:	0800204d 	.word	0x0800204d
 800178c:	0800204d 	.word	0x0800204d
 8001790:	0800204d 	.word	0x0800204d
 8001794:	0800204d 	.word	0x0800204d
 8001798:	0800204d 	.word	0x0800204d
 800179c:	0800204d 	.word	0x0800204d
 80017a0:	0800204d 	.word	0x0800204d
 80017a4:	0800204d 	.word	0x0800204d
 80017a8:	0800204d 	.word	0x0800204d
 80017ac:	08001907 	.word	0x08001907
 80017b0:	0800198d 	.word	0x0800198d
 80017b4:	080019b7 	.word	0x080019b7
 80017b8:	080019e1 	.word	0x080019e1
 80017bc:	08001a0b 	.word	0x08001a0b
 80017c0:	08001e09 	.word	0x08001e09
 80017c4:	0800204d 	.word	0x0800204d
 80017c8:	08001e33 	.word	0x08001e33
 80017cc:	08001ec9 	.word	0x08001ec9
 80017d0:	08001f19 	.word	0x08001f19
 80017d4:	08001f69 	.word	0x08001f69
 80017d8:	0800204d 	.word	0x0800204d
 80017dc:	0800204d 	.word	0x0800204d
 80017e0:	0800204d 	.word	0x0800204d
 80017e4:	0800204d 	.word	0x0800204d
 80017e8:	08001f93 	.word	0x08001f93
 80017ec:	0800204d 	.word	0x0800204d
 80017f0:	0800204d 	.word	0x0800204d
 80017f4:	0800204d 	.word	0x0800204d
 80017f8:	0800204d 	.word	0x0800204d
 80017fc:	0800204d 	.word	0x0800204d
 8001800:	0800204d 	.word	0x0800204d
 8001804:	0800204d 	.word	0x0800204d
 8001808:	0800204d 	.word	0x0800204d
 800180c:	0800204d 	.word	0x0800204d
 8001810:	0800204d 	.word	0x0800204d
 8001814:	0800204d 	.word	0x0800204d
 8001818:	0800204d 	.word	0x0800204d
 800181c:	0800204d 	.word	0x0800204d
 8001820:	0800204d 	.word	0x0800204d
 8001824:	0800204d 	.word	0x0800204d
 8001828:	08001fbd 	.word	0x08001fbd
 800182c:	0800204d 	.word	0x0800204d
 8001830:	0800204d 	.word	0x0800204d
 8001834:	0800204d 	.word	0x0800204d
 8001838:	0800204d 	.word	0x0800204d
 800183c:	0800204d 	.word	0x0800204d
 8001840:	0800204d 	.word	0x0800204d
 8001844:	0800204d 	.word	0x0800204d
 8001848:	0800204d 	.word	0x0800204d
 800184c:	0800204d 	.word	0x0800204d
 8001850:	0800204d 	.word	0x0800204d
 8001854:	0800204d 	.word	0x0800204d
 8001858:	0800204d 	.word	0x0800204d
 800185c:	0800204d 	.word	0x0800204d
 8001860:	0800204d 	.word	0x0800204d
 8001864:	0800204d 	.word	0x0800204d
 8001868:	08001fe7 	.word	0x08001fe7
 800186c:	0800204d 	.word	0x0800204d
 8001870:	0800204d 	.word	0x0800204d
 8001874:	0800204d 	.word	0x0800204d
 8001878:	0800204d 	.word	0x0800204d
 800187c:	0800204d 	.word	0x0800204d
 8001880:	0800204d 	.word	0x0800204d
 8001884:	0800204d 	.word	0x0800204d
 8001888:	0800204d 	.word	0x0800204d
 800188c:	0800204d 	.word	0x0800204d
 8001890:	0800204d 	.word	0x0800204d
 8001894:	0800204d 	.word	0x0800204d
 8001898:	0800204d 	.word	0x0800204d
 800189c:	0800204d 	.word	0x0800204d
 80018a0:	0800204d 	.word	0x0800204d
 80018a4:	0800204d 	.word	0x0800204d
 80018a8:	0800204d 	.word	0x0800204d
 80018ac:	0800204d 	.word	0x0800204d
 80018b0:	0800204d 	.word	0x0800204d
 80018b4:	0800204d 	.word	0x0800204d
 80018b8:	0800204d 	.word	0x0800204d
 80018bc:	0800204d 	.word	0x0800204d
 80018c0:	0800204d 	.word	0x0800204d
 80018c4:	0800204d 	.word	0x0800204d
 80018c8:	0800204d 	.word	0x0800204d
 80018cc:	0800204d 	.word	0x0800204d
 80018d0:	0800204d 	.word	0x0800204d
 80018d4:	0800204d 	.word	0x0800204d
 80018d8:	0800204d 	.word	0x0800204d
 80018dc:	08002011 	.word	0x08002011
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 80018e0:	4b9b      	ldr	r3, [pc, #620]	@ (8001b50 <SysTick_Handler+0x5f0>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <SysTick_Handler+0x390>
 80018e8:	2113      	movs	r1, #19
 80018ea:	489a      	ldr	r0, [pc, #616]	@ (8001b54 <SysTick_Handler+0x5f4>)
 80018ec:	f7ff fe1c 	bl	8001528 <ITM0_Write>
					 //if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_CLOSED \r\n",strlen("\r\n S0_SOCK_CLOSED \r\n"));
					 //eth_wr_SOCKET_CMD(&ETH, S0_REG ,OPEN );
					 if(ETH.ETH_WDG >= 15000)
 80018f0:	4b99      	ldr	r3, [pc, #612]	@ (8001b58 <SysTick_Handler+0x5f8>)
 80018f2:	8a9b      	ldrh	r3, [r3, #20]
 80018f4:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80018f8:	4293      	cmp	r3, r2
 80018fa:	f240 83a4 	bls.w	8002046 <SysTick_Handler+0xae6>
					 {
						  eth_reset=1;
 80018fe:	4b97      	ldr	r3, [pc, #604]	@ (8001b5c <SysTick_Handler+0x5fc>)
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
					 }



				 }
			 break;
 8001904:	e39f      	b.n	8002046 <SysTick_Handler+0xae6>
			 case  SOCK_INIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 8001906:	4b92      	ldr	r3, [pc, #584]	@ (8001b50 <SysTick_Handler+0x5f0>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <SysTick_Handler+0x3b6>
 800190e:	2111      	movs	r1, #17
 8001910:	4893      	ldr	r0, [pc, #588]	@ (8001b60 <SysTick_Handler+0x600>)
 8001912:	f7ff fe09 	bl	8001528 <ITM0_Write>
					 if(ETH.S_ENserver == 1)
 8001916:	4b90      	ldr	r3, [pc, #576]	@ (8001b58 <SysTick_Handler+0x5f8>)
 8001918:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800191c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001920:	2b01      	cmp	r3, #1
 8001922:	d119      	bne.n	8001958 <SysTick_Handler+0x3f8>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 8001924:	4b8a      	ldr	r3, [pc, #552]	@ (8001b50 <SysTick_Handler+0x5f0>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <SysTick_Handler+0x3d4>
 800192c:	2111      	movs	r1, #17
 800192e:	488c      	ldr	r0, [pc, #560]	@ (8001b60 <SysTick_Handler+0x600>)
 8001930:	f7ff fdfa 	bl	8001528 <ITM0_Write>
						 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_INIT \r\n",strlen("\r\n S0_SOCK_INIT \r\n"));
 8001934:	4b8b      	ldr	r3, [pc, #556]	@ (8001b64 <SysTick_Handler+0x604>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d004      	beq.n	8001946 <SysTick_Handler+0x3e6>
 800193c:	2212      	movs	r2, #18
 800193e:	498a      	ldr	r1, [pc, #552]	@ (8001b68 <SysTick_Handler+0x608>)
 8001940:	488a      	ldr	r0, [pc, #552]	@ (8001b6c <SysTick_Handler+0x60c>)
 8001942:	f003 fe53 	bl	80055ec <HAL_UART_Transmit_IT>
							eth_wr_SOCKET_CMD(&ETH, S0_REG, LISTEN );
 8001946:	2202      	movs	r2, #2
 8001948:	2101      	movs	r1, #1
 800194a:	4883      	ldr	r0, [pc, #524]	@ (8001b58 <SysTick_Handler+0x5f8>)
 800194c:	f00b fdcf 	bl	800d4ee <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001950:	4b81      	ldr	r3, [pc, #516]	@ (8001b58 <SysTick_Handler+0x5f8>)
 8001952:	2200      	movs	r2, #0
 8001954:	829a      	strh	r2, [r3, #20]
						 	if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n ETH-W5500-CONNECT \r\n",strlen("\r\n ETH-W5500-CONNECT \r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 8001956:	e379      	b.n	800204c <SysTick_Handler+0xaec>
						    eth_wr_SOCKET_CMD(&ETH,S0_REG, CONNECT);																				//only for server
 8001958:	2204      	movs	r2, #4
 800195a:	2101      	movs	r1, #1
 800195c:	487e      	ldr	r0, [pc, #504]	@ (8001b58 <SysTick_Handler+0x5f8>)
 800195e:	f00b fdc6 	bl	800d4ee <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5500-CONNECT\r\n",strlen("\r\nETH-W5500-CONNECT\r\n"));
 8001962:	4b7b      	ldr	r3, [pc, #492]	@ (8001b50 <SysTick_Handler+0x5f0>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <SysTick_Handler+0x412>
 800196a:	2115      	movs	r1, #21
 800196c:	4880      	ldr	r0, [pc, #512]	@ (8001b70 <SysTick_Handler+0x610>)
 800196e:	f7ff fddb 	bl	8001528 <ITM0_Write>
						 	if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n ETH-W5500-CONNECT \r\n",strlen("\r\n ETH-W5500-CONNECT \r\n"));
 8001972:	4b7c      	ldr	r3, [pc, #496]	@ (8001b64 <SysTick_Handler+0x604>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <SysTick_Handler+0x424>
 800197a:	2217      	movs	r2, #23
 800197c:	497d      	ldr	r1, [pc, #500]	@ (8001b74 <SysTick_Handler+0x614>)
 800197e:	487b      	ldr	r0, [pc, #492]	@ (8001b6c <SysTick_Handler+0x60c>)
 8001980:	f003 fe34 	bl	80055ec <HAL_UART_Transmit_IT>
						 	ETH.ETH_WDG=0;
 8001984:	4b74      	ldr	r3, [pc, #464]	@ (8001b58 <SysTick_Handler+0x5f8>)
 8001986:	2200      	movs	r2, #0
 8001988:	829a      	strh	r2, [r3, #20]
			 break;
 800198a:	e35f      	b.n	800204c <SysTick_Handler+0xaec>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 800198c:	4b70      	ldr	r3, [pc, #448]	@ (8001b50 <SysTick_Handler+0x5f0>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <SysTick_Handler+0x43c>
 8001994:	2113      	movs	r1, #19
 8001996:	4878      	ldr	r0, [pc, #480]	@ (8001b78 <SysTick_Handler+0x618>)
 8001998:	f7ff fdc6 	bl	8001528 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_LISTEN \r\n",strlen("\r\n S0_SOCK_LISTEN \r\n"));
 800199c:	4b71      	ldr	r3, [pc, #452]	@ (8001b64 <SysTick_Handler+0x604>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d004      	beq.n	80019ae <SysTick_Handler+0x44e>
 80019a4:	2214      	movs	r2, #20
 80019a6:	4975      	ldr	r1, [pc, #468]	@ (8001b7c <SysTick_Handler+0x61c>)
 80019a8:	4870      	ldr	r0, [pc, #448]	@ (8001b6c <SysTick_Handler+0x60c>)
 80019aa:	f003 fe1f 	bl	80055ec <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 80019ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001b58 <SysTick_Handler+0x5f8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 80019b4:	e34a      	b.n	800204c <SysTick_Handler+0xaec>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 80019b6:	4b66      	ldr	r3, [pc, #408]	@ (8001b50 <SysTick_Handler+0x5f0>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <SysTick_Handler+0x466>
 80019be:	2114      	movs	r1, #20
 80019c0:	486f      	ldr	r0, [pc, #444]	@ (8001b80 <SysTick_Handler+0x620>)
 80019c2:	f7ff fdb1 	bl	8001528 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_SYNSENT \r\n",strlen("\r\n S0_SOCK_SYNSENT \r\n"));
 80019c6:	4b67      	ldr	r3, [pc, #412]	@ (8001b64 <SysTick_Handler+0x604>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d004      	beq.n	80019d8 <SysTick_Handler+0x478>
 80019ce:	2215      	movs	r2, #21
 80019d0:	496c      	ldr	r1, [pc, #432]	@ (8001b84 <SysTick_Handler+0x624>)
 80019d2:	4866      	ldr	r0, [pc, #408]	@ (8001b6c <SysTick_Handler+0x60c>)
 80019d4:	f003 fe0a 	bl	80055ec <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 80019d8:	4b5f      	ldr	r3, [pc, #380]	@ (8001b58 <SysTick_Handler+0x5f8>)
 80019da:	2200      	movs	r2, #0
 80019dc:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 80019de:	e335      	b.n	800204c <SysTick_Handler+0xaec>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 80019e0:	4b5b      	ldr	r3, [pc, #364]	@ (8001b50 <SysTick_Handler+0x5f0>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <SysTick_Handler+0x490>
 80019e8:	2114      	movs	r1, #20
 80019ea:	4867      	ldr	r0, [pc, #412]	@ (8001b88 <SysTick_Handler+0x628>)
 80019ec:	f7ff fd9c 	bl	8001528 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_SYNRECV \r\n",strlen("\r\n S0_SOCK_SYNRECV \r\n"));
 80019f0:	4b5c      	ldr	r3, [pc, #368]	@ (8001b64 <SysTick_Handler+0x604>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d004      	beq.n	8001a02 <SysTick_Handler+0x4a2>
 80019f8:	2215      	movs	r2, #21
 80019fa:	4964      	ldr	r1, [pc, #400]	@ (8001b8c <SysTick_Handler+0x62c>)
 80019fc:	485b      	ldr	r0, [pc, #364]	@ (8001b6c <SysTick_Handler+0x60c>)
 80019fe:	f003 fdf5 	bl	80055ec <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001a02:	4b55      	ldr	r3, [pc, #340]	@ (8001b58 <SysTick_Handler+0x5f8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001a08:	e320      	b.n	800204c <SysTick_Handler+0xaec>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 8001a0a:	4b51      	ldr	r3, [pc, #324]	@ (8001b50 <SysTick_Handler+0x5f0>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <SysTick_Handler+0x4ba>
 8001a12:	2118      	movs	r1, #24
 8001a14:	485e      	ldr	r0, [pc, #376]	@ (8001b90 <SysTick_Handler+0x630>)
 8001a16:	f7ff fd87 	bl	8001528 <ITM0_Write>
					 //if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_ESTABLISHED \r\n",strlen("\r\n S0_SOCK_ESTABLISHED \r\n"));
					 ETH.ETH_WDG=0;
 8001a1a:	4b4f      	ldr	r3, [pc, #316]	@ (8001b58 <SysTick_Handler+0x5f8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	829a      	strh	r2, [r3, #20]

					if (ETH.S_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 8001a20:	4b4d      	ldr	r3, [pc, #308]	@ (8001b58 <SysTick_Handler+0x5f8>)
 8001a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a26:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	f040 80c6 	bne.w	8001bbc <SysTick_Handler+0x65c>
					{

						S0_get_size = SPI_ETH_REG(&ETH, S_RX_RSR ,S0_REG, SPI_READ, spi_Data,2);//S0_get_size = SPI_ETH_REG(&ETH, S_RX_SZ_ADDR_BASEHH,S_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001a30:	2302      	movs	r3, #2
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	4b57      	ldr	r3, [pc, #348]	@ (8001b94 <SysTick_Handler+0x634>)
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2126      	movs	r1, #38	@ 0x26
 8001a3e:	4846      	ldr	r0, [pc, #280]	@ (8001b58 <SysTick_Handler+0x5f8>)
 8001a40:	f00b fc03 	bl	800d24a <SPI_ETH_REG>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b53      	ldr	r3, [pc, #332]	@ (8001b98 <SysTick_Handler+0x638>)
 8001a4a:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001a4c:	4b52      	ldr	r3, [pc, #328]	@ (8001b98 <SysTick_Handler+0x638>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 82fa 	beq.w	800204a <SysTick_Handler+0xaea>
							{
								eth_rd_SOCKET_DATA(&ETH,S0_RX_BUFF,&rx_mem_pointer,S0_get_size); // read socket data
 8001a56:	4b50      	ldr	r3, [pc, #320]	@ (8001b98 <SysTick_Handler+0x638>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	4a50      	ldr	r2, [pc, #320]	@ (8001b9c <SysTick_Handler+0x63c>)
 8001a5c:	2103      	movs	r1, #3
 8001a5e:	483e      	ldr	r0, [pc, #248]	@ (8001b58 <SysTick_Handler+0x5f8>)
 8001a60:	f00b ffdc 	bl	800da1c <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S_RX_RD0,rx_mem_pointer,S0_REG );		// write rx memory pointer
 8001a64:	4b4d      	ldr	r3, [pc, #308]	@ (8001b9c <SysTick_Handler+0x63c>)
 8001a66:	881a      	ldrh	r2, [r3, #0]
 8001a68:	2301      	movs	r3, #1
 8001a6a:	2128      	movs	r1, #40	@ 0x28
 8001a6c:	483a      	ldr	r0, [pc, #232]	@ (8001b58 <SysTick_Handler+0x5f8>)
 8001a6e:	f00b fc74 	bl	800d35a <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,RECV);							// write command to execute
 8001a72:	2240      	movs	r2, #64	@ 0x40
 8001a74:	2101      	movs	r1, #1
 8001a76:	4838      	ldr	r0, [pc, #224]	@ (8001b58 <SysTick_Handler+0x5f8>)
 8001a78:	f00b fd39 	bl	800d4ee <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,S0_REG))						// wait until end of command execution
 8001a7c:	bf00      	nop
 8001a7e:	2101      	movs	r1, #1
 8001a80:	4835      	ldr	r0, [pc, #212]	@ (8001b58 <SysTick_Handler+0x5f8>)
 8001a82:	f00b ffb0 	bl	800d9e6 <eth_rd_SOCKET_CMD>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f8      	bne.n	8001a7e <SysTick_Handler+0x51e>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001a8c:	4b42      	ldr	r3, [pc, #264]	@ (8001b98 <SysTick_Handler+0x638>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	2300      	movs	r3, #0
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	2300      	movs	r3, #0
 8001a98:	4941      	ldr	r1, [pc, #260]	@ (8001ba0 <SysTick_Handler+0x640>)
 8001a9a:	4842      	ldr	r0, [pc, #264]	@ (8001ba4 <SysTick_Handler+0x644>)
 8001a9c:	f00d fb00 	bl	800f0a0 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8001b98 <SysTick_Handler+0x638>)
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b40      	ldr	r3, [pc, #256]	@ (8001ba8 <SysTick_Handler+0x648>)
 8001aa8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

								if(S0_get_size > 0)	{ ETH.S_data_available=1;}					//Flag data received
 8001aac:	4b3a      	ldr	r3, [pc, #232]	@ (8001b98 <SysTick_Handler+0x638>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <SysTick_Handler+0x55a>
 8001ab4:	4b28      	ldr	r3, [pc, #160]	@ (8001b58 <SysTick_Handler+0x5f8>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	769a      	strb	r2, [r3, #26]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001aba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba8 <SysTick_Handler+0x648>)
 8001abc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4838      	ldr	r0, [pc, #224]	@ (8001ba4 <SysTick_Handler+0x644>)
 8001ac4:	f00a f878 	bl	800bbb8 <ModBUS_Check>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00d      	beq.n	8001aea <SysTick_Handler+0x58a>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001ace:	4836      	ldr	r0, [pc, #216]	@ (8001ba8 <SysTick_Handler+0x648>)
 8001ad0:	f00a f976 	bl	800bdc0 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001ad4:	4b34      	ldr	r3, [pc, #208]	@ (8001ba8 <SysTick_Handler+0x648>)
 8001ad6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 8001ada:	2300      	movs	r3, #0
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	4932      	ldr	r1, [pc, #200]	@ (8001bac <SysTick_Handler+0x64c>)
 8001ae2:	482f      	ldr	r0, [pc, #188]	@ (8001ba0 <SysTick_Handler+0x640>)
 8001ae4:	f00d fadc 	bl	800f0a0 <CopiaVector>
 8001ae8:	e010      	b.n	8001b0c <SysTick_Handler+0x5ac>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001aea:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <SysTick_Handler+0x5f0>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <SysTick_Handler+0x59a>
 8001af2:	2111      	movs	r1, #17
 8001af4:	482e      	ldr	r0, [pc, #184]	@ (8001bb0 <SysTick_Handler+0x650>)
 8001af6:	f7ff fd17 	bl	8001528 <ITM0_Write>
									if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n NO MBUS \r\n",strlen("\r\n NO MBUS \r\n"));
 8001afa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <SysTick_Handler+0x604>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d004      	beq.n	8001b0c <SysTick_Handler+0x5ac>
 8001b02:	220d      	movs	r2, #13
 8001b04:	492a      	ldr	r1, [pc, #168]	@ (8001bb0 <SysTick_Handler+0x650>)
 8001b06:	4819      	ldr	r0, [pc, #100]	@ (8001b6c <SysTick_Handler+0x60c>)
 8001b08:	f003 fd70 	bl	80055ec <HAL_UART_Transmit_IT>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001b0c:	4b26      	ldr	r3, [pc, #152]	@ (8001ba8 <SysTick_Handler+0x648>)
 8001b0e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	4b27      	ldr	r3, [pc, #156]	@ (8001bb4 <SysTick_Handler+0x654>)
 8001b16:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,S0_RX_BUFF, &tx_mem_pointer, send_size);	// write socket data
 8001b18:	4b26      	ldr	r3, [pc, #152]	@ (8001bb4 <SysTick_Handler+0x654>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	4a26      	ldr	r2, [pc, #152]	@ (8001bb8 <SysTick_Handler+0x658>)
 8001b1e:	2103      	movs	r1, #3
 8001b20:	480d      	ldr	r0, [pc, #52]	@ (8001b58 <SysTick_Handler+0x5f8>)
 8001b22:	f00c f80c 	bl	800db3e <eth_wr_SOCKET_DATA>

								SPI_ETH_WR_REG_16(&ETH,S_TX_WR,tx_mem_pointer,S0_REG);			// write tx memory pointer//SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer,0);			// write tx memory pointer
 8001b26:	4b24      	ldr	r3, [pc, #144]	@ (8001bb8 <SysTick_Handler+0x658>)
 8001b28:	881a      	ldrh	r2, [r3, #0]
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	2124      	movs	r1, #36	@ 0x24
 8001b2e:	480a      	ldr	r0, [pc, #40]	@ (8001b58 <SysTick_Handler+0x5f8>)
 8001b30:	f00b fc13 	bl	800d35a <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,SEND);							// write command to execute
 8001b34:	2220      	movs	r2, #32
 8001b36:	2101      	movs	r1, #1
 8001b38:	4807      	ldr	r0, [pc, #28]	@ (8001b58 <SysTick_Handler+0x5f8>)
 8001b3a:	f00b fcd8 	bl	800d4ee <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,S0_REG))						// wait until end of command execution
 8001b3e:	bf00      	nop
 8001b40:	2101      	movs	r1, #1
 8001b42:	4805      	ldr	r0, [pc, #20]	@ (8001b58 <SysTick_Handler+0x5f8>)
 8001b44:	f00b ff4f 	bl	800d9e6 <eth_rd_SOCKET_CMD>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f8      	bne.n	8001b40 <SysTick_Handler+0x5e0>

							}
						}
					}
				 }
			 break;
 8001b4e:	e27c      	b.n	800204a <SysTick_Handler+0xaea>
 8001b50:	20004208 	.word	0x20004208
 8001b54:	080107cc 	.word	0x080107cc
 8001b58:	20000310 	.word	0x20000310
 8001b5c:	20004273 	.word	0x20004273
 8001b60:	080107e0 	.word	0x080107e0
 8001b64:	20000021 	.word	0x20000021
 8001b68:	080107f4 	.word	0x080107f4
 8001b6c:	200002c4 	.word	0x200002c4
 8001b70:	08010808 	.word	0x08010808
 8001b74:	08010820 	.word	0x08010820
 8001b78:	08010838 	.word	0x08010838
 8001b7c:	0801084c 	.word	0x0801084c
 8001b80:	08010864 	.word	0x08010864
 8001b84:	0801087c 	.word	0x0801087c
 8001b88:	08010894 	.word	0x08010894
 8001b8c:	080108ac 	.word	0x080108ac
 8001b90:	080108c4 	.word	0x080108c4
 8001b94:	20004218 	.word	0x20004218
 8001b98:	20004210 	.word	0x20004210
 8001b9c:	20004214 	.word	0x20004214
 8001ba0:	20000334 	.word	0x20000334
 8001ba4:	2000317a 	.word	0x2000317a
 8001ba8:	20003168 	.word	0x20003168
 8001bac:	20003380 	.word	0x20003380
 8001bb0:	080108e0 	.word	0x080108e0
 8001bb4:	20004216 	.word	0x20004216
 8001bb8:	20004212 	.word	0x20004212
						if (mb_eth._w_answer==0)
 8001bbc:	4ba7      	ldr	r3, [pc, #668]	@ (8001e5c <SysTick_Handler+0x8fc>)
 8001bbe:	7a1b      	ldrb	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f040 8088 	bne.w	8001cd6 <SysTick_Handler+0x776>
							ETH.data[0]=0x00;
 8001bc6:	4ba6      	ldr	r3, [pc, #664]	@ (8001e60 <SysTick_Handler+0x900>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
							ETH.data[1]=0x00;
 8001bce:	4ba4      	ldr	r3, [pc, #656]	@ (8001e60 <SysTick_Handler+0x900>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
							ETH.data[2]=0x00;
 8001bd6:	4ba2      	ldr	r3, [pc, #648]	@ (8001e60 <SysTick_Handler+0x900>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
							ETH.data[3]=0x00;
 8001bde:	4ba0      	ldr	r3, [pc, #640]	@ (8001e60 <SysTick_Handler+0x900>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
							ETH.data[4]=0x00;
 8001be6:	4b9e      	ldr	r3, [pc, #632]	@ (8001e60 <SysTick_Handler+0x900>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
							ETH.data[5]=0x06;
 8001bee:	4b9c      	ldr	r3, [pc, #624]	@ (8001e60 <SysTick_Handler+0x900>)
 8001bf0:	2206      	movs	r2, #6
 8001bf2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
							ETH.data[6]=0x01;
 8001bf6:	4b9a      	ldr	r3, [pc, #616]	@ (8001e60 <SysTick_Handler+0x900>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
							ETH.data[7]=0x03;
 8001bfe:	4b98      	ldr	r3, [pc, #608]	@ (8001e60 <SysTick_Handler+0x900>)
 8001c00:	2203      	movs	r2, #3
 8001c02:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
							ETH.data[8]=0x00;
 8001c06:	4b96      	ldr	r3, [pc, #600]	@ (8001e60 <SysTick_Handler+0x900>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
							ETH.data[9]=0x00;
 8001c0e:	4b94      	ldr	r3, [pc, #592]	@ (8001e60 <SysTick_Handler+0x900>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
							ETH.data[10]=0x00;
 8001c16:	4b92      	ldr	r3, [pc, #584]	@ (8001e60 <SysTick_Handler+0x900>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
							ETH.data[11]=0x0A;
 8001c1e:	4b90      	ldr	r3, [pc, #576]	@ (8001e60 <SysTick_Handler+0x900>)
 8001c20:	220a      	movs	r2, #10
 8001c22:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
							send_size=12;
 8001c26:	4b8f      	ldr	r3, [pc, #572]	@ (8001e64 <SysTick_Handler+0x904>)
 8001c28:	220c      	movs	r2, #12
 8001c2a:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,16);
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	2100      	movs	r1, #0
 8001c30:	488a      	ldr	r0, [pc, #552]	@ (8001e5c <SysTick_Handler+0x8fc>)
 8001c32:	f00a f86e 	bl	800bd12 <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001c36:	2300      	movs	r3, #0
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	220c      	movs	r2, #12
 8001c3e:	498a      	ldr	r1, [pc, #552]	@ (8001e68 <SysTick_Handler+0x908>)
 8001c40:	488a      	ldr	r0, [pc, #552]	@ (8001e6c <SysTick_Handler+0x90c>)
 8001c42:	f00d fa2d 	bl	800f0a0 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,S0_TX_BUFF, &tx_mem_pointer, send_size);	// write socket data
 8001c46:	4b87      	ldr	r3, [pc, #540]	@ (8001e64 <SysTick_Handler+0x904>)
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	4a89      	ldr	r2, [pc, #548]	@ (8001e70 <SysTick_Handler+0x910>)
 8001c4c:	2102      	movs	r1, #2
 8001c4e:	4884      	ldr	r0, [pc, #528]	@ (8001e60 <SysTick_Handler+0x900>)
 8001c50:	f00b ff75 	bl	800db3e <eth_wr_SOCKET_DATA>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001c54:	4982      	ldr	r1, [pc, #520]	@ (8001e60 <SysTick_Handler+0x900>)
 8001c56:	4887      	ldr	r0, [pc, #540]	@ (8001e74 <SysTick_Handler+0x914>)
 8001c58:	f00c f815 	bl	800dc86 <SPI_ETH_SNIFF>
							SPI_ETH_WR_REG_16(&ETH,S_TX_WR,tx_mem_pointer,S0_REG);			// write tx memory pointer
 8001c5c:	4b84      	ldr	r3, [pc, #528]	@ (8001e70 <SysTick_Handler+0x910>)
 8001c5e:	881a      	ldrh	r2, [r3, #0]
 8001c60:	2301      	movs	r3, #1
 8001c62:	2124      	movs	r1, #36	@ 0x24
 8001c64:	487e      	ldr	r0, [pc, #504]	@ (8001e60 <SysTick_Handler+0x900>)
 8001c66:	f00b fb78 	bl	800d35a <SPI_ETH_WR_REG_16>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001c6a:	497d      	ldr	r1, [pc, #500]	@ (8001e60 <SysTick_Handler+0x900>)
 8001c6c:	4881      	ldr	r0, [pc, #516]	@ (8001e74 <SysTick_Handler+0x914>)
 8001c6e:	f00c f80a 	bl	800dc86 <SPI_ETH_SNIFF>
							eth_wr_SOCKET_CMD(&ETH,S0_REG,SEND);							// write command to execute
 8001c72:	2220      	movs	r2, #32
 8001c74:	2101      	movs	r1, #1
 8001c76:	487a      	ldr	r0, [pc, #488]	@ (8001e60 <SysTick_Handler+0x900>)
 8001c78:	f00b fc39 	bl	800d4ee <eth_wr_SOCKET_CMD>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001c7c:	4978      	ldr	r1, [pc, #480]	@ (8001e60 <SysTick_Handler+0x900>)
 8001c7e:	487d      	ldr	r0, [pc, #500]	@ (8001e74 <SysTick_Handler+0x914>)
 8001c80:	f00c f801 	bl	800dc86 <SPI_ETH_SNIFF>
							uint16_t read=0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8a7 3202 	strh.w	r3, [r7, #514]	@ 0x202
								read=SPI_ETH_REG(&ETH, S_IR,S0_REG,SPI_READ, ETH.GAR,1);
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e78 <SysTick_Handler+0x918>)
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	2300      	movs	r3, #0
 8001c94:	2201      	movs	r2, #1
 8001c96:	2102      	movs	r1, #2
 8001c98:	4871      	ldr	r0, [pc, #452]	@ (8001e60 <SysTick_Handler+0x900>)
 8001c9a:	f00b fad6 	bl	800d24a <SPI_ETH_REG>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f8a7 3202 	strh.w	r3, [r7, #514]	@ 0x202
							mb_eth._w_answer=1;	// Waiting answer flag_w_answer=1;	// Waiting answer flag
 8001ca4:	4b6d      	ldr	r3, [pc, #436]	@ (8001e5c <SysTick_Handler+0x8fc>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	721a      	strb	r2, [r3, #8]
							MB_TOUT_ticks=0;	// restart counting
 8001caa:	4b74      	ldr	r3, [pc, #464]	@ (8001e7c <SysTick_Handler+0x91c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001cb0:	4b73      	ldr	r3, [pc, #460]	@ (8001e80 <SysTick_Handler+0x920>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <SysTick_Handler+0x760>
 8001cb8:	2117      	movs	r1, #23
 8001cba:	4872      	ldr	r0, [pc, #456]	@ (8001e84 <SysTick_Handler+0x924>)
 8001cbc:	f7ff fc34 	bl	8001528 <ITM0_Write>
							if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n SENT MBUS REQ \r\n",strlen("\r\n SENT MBUS REQ \r\n"));
 8001cc0:	4b71      	ldr	r3, [pc, #452]	@ (8001e88 <SysTick_Handler+0x928>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 81c0 	beq.w	800204a <SysTick_Handler+0xaea>
 8001cca:	2213      	movs	r2, #19
 8001ccc:	496d      	ldr	r1, [pc, #436]	@ (8001e84 <SysTick_Handler+0x924>)
 8001cce:	486f      	ldr	r0, [pc, #444]	@ (8001e8c <SysTick_Handler+0x92c>)
 8001cd0:	f003 fc8c 	bl	80055ec <HAL_UART_Transmit_IT>
			 break;
 8001cd4:	e1b9      	b.n	800204a <SysTick_Handler+0xaea>
						S0_get_size = SPI_ETH_REG(&ETH, S_RX_RSR ,S0_REG ,SPI_READ, spi_Data,2);
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	9301      	str	r3, [sp, #4]
 8001cda:	4b6d      	ldr	r3, [pc, #436]	@ (8001e90 <SysTick_Handler+0x930>)
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	2126      	movs	r1, #38	@ 0x26
 8001ce4:	485e      	ldr	r0, [pc, #376]	@ (8001e60 <SysTick_Handler+0x900>)
 8001ce6:	f00b fab0 	bl	800d24a <SPI_ETH_REG>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b69      	ldr	r3, [pc, #420]	@ (8001e94 <SysTick_Handler+0x934>)
 8001cf0:	801a      	strh	r2, [r3, #0]
						if(S0_get_size != 0x00)
 8001cf2:	4b68      	ldr	r3, [pc, #416]	@ (8001e94 <SysTick_Handler+0x934>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 81a7 	beq.w	800204a <SysTick_Handler+0xaea>
								eth_rd_SOCKET_DATA(&ETH,S0_RX_BUFF,&rx_mem_pointer,S0_get_size); // read socket data
 8001cfc:	4b65      	ldr	r3, [pc, #404]	@ (8001e94 <SysTick_Handler+0x934>)
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	4a65      	ldr	r2, [pc, #404]	@ (8001e98 <SysTick_Handler+0x938>)
 8001d02:	2103      	movs	r1, #3
 8001d04:	4856      	ldr	r0, [pc, #344]	@ (8001e60 <SysTick_Handler+0x900>)
 8001d06:	f00b fe89 	bl	800da1c <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S_RX_RD0,rx_mem_pointer,S0_REG);		// write rx memory pointer
 8001d0a:	4b63      	ldr	r3, [pc, #396]	@ (8001e98 <SysTick_Handler+0x938>)
 8001d0c:	881a      	ldrh	r2, [r3, #0]
 8001d0e:	2301      	movs	r3, #1
 8001d10:	2128      	movs	r1, #40	@ 0x28
 8001d12:	4853      	ldr	r0, [pc, #332]	@ (8001e60 <SysTick_Handler+0x900>)
 8001d14:	f00b fb21 	bl	800d35a <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,RECV);							// write command to execute
 8001d18:	2240      	movs	r2, #64	@ 0x40
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	4850      	ldr	r0, [pc, #320]	@ (8001e60 <SysTick_Handler+0x900>)
 8001d1e:	f00b fbe6 	bl	800d4ee <eth_wr_SOCKET_CMD>
								if (ETH_DBG_EN) ITM0_Write("\r\n RCVD DATA \r\n",strlen("\r\n RCVD DATA \r\n"));
 8001d22:	4b57      	ldr	r3, [pc, #348]	@ (8001e80 <SysTick_Handler+0x920>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <SysTick_Handler+0x7d2>
 8001d2a:	210f      	movs	r1, #15
 8001d2c:	485b      	ldr	r0, [pc, #364]	@ (8001e9c <SysTick_Handler+0x93c>)
 8001d2e:	f7ff fbfb 	bl	8001528 <ITM0_Write>
								if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n RCVD DATA \r\n",strlen("\r\n RCVD DATA \r\n"));
 8001d32:	4b55      	ldr	r3, [pc, #340]	@ (8001e88 <SysTick_Handler+0x928>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d004      	beq.n	8001d44 <SysTick_Handler+0x7e4>
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	4957      	ldr	r1, [pc, #348]	@ (8001e9c <SysTick_Handler+0x93c>)
 8001d3e:	4853      	ldr	r0, [pc, #332]	@ (8001e8c <SysTick_Handler+0x92c>)
 8001d40:	f003 fc54 	bl	80055ec <HAL_UART_Transmit_IT>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001d44:	4b53      	ldr	r3, [pc, #332]	@ (8001e94 <SysTick_Handler+0x934>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	4946      	ldr	r1, [pc, #280]	@ (8001e6c <SysTick_Handler+0x90c>)
 8001d52:	4853      	ldr	r0, [pc, #332]	@ (8001ea0 <SysTick_Handler+0x940>)
 8001d54:	f00d f9a4 	bl	800f0a0 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001d58:	4b4e      	ldr	r3, [pc, #312]	@ (8001e94 <SysTick_Handler+0x934>)
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8001e5c <SysTick_Handler+0x8fc>)
 8001d60:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
								if(S0_get_size > 0)	{ ETH.S_data_available=1;}
 8001d64:	4b4b      	ldr	r3, [pc, #300]	@ (8001e94 <SysTick_Handler+0x934>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <SysTick_Handler+0x812>
 8001d6c:	4b3c      	ldr	r3, [pc, #240]	@ (8001e60 <SysTick_Handler+0x900>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	769a      	strb	r2, [r3, #26]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001d72:	4b3a      	ldr	r3, [pc, #232]	@ (8001e5c <SysTick_Handler+0x8fc>)
 8001d74:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4849      	ldr	r0, [pc, #292]	@ (8001ea0 <SysTick_Handler+0x940>)
 8001d7c:	f009 ff1c 	bl	800bbb8 <ModBUS_Check>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d02d      	beq.n	8001de2 <SysTick_Handler+0x882>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001d86:	4b35      	ldr	r3, [pc, #212]	@ (8001e5c <SysTick_Handler+0x8fc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	721a      	strb	r2, [r3, #8]
										MB_TOUT_ticks=0;
 8001d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e7c <SysTick_Handler+0x91c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001d92:	4832      	ldr	r0, [pc, #200]	@ (8001e5c <SysTick_Handler+0x8fc>)
 8001d94:	f00a f814 	bl	800bdc0 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001d98:	4b30      	ldr	r3, [pc, #192]	@ (8001e5c <SysTick_Handler+0x8fc>)
 8001d9a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2300      	movs	r3, #0
 8001da4:	493e      	ldr	r1, [pc, #248]	@ (8001ea0 <SysTick_Handler+0x940>)
 8001da6:	483f      	ldr	r0, [pc, #252]	@ (8001ea4 <SysTick_Handler+0x944>)
 8001da8:	f00d f97a 	bl	800f0a0 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001dac:	2300      	movs	r3, #0
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	2300      	movs	r3, #0
 8001db2:	2240      	movs	r2, #64	@ 0x40
 8001db4:	493c      	ldr	r1, [pc, #240]	@ (8001ea8 <SysTick_Handler+0x948>)
 8001db6:	483d      	ldr	r0, [pc, #244]	@ (8001eac <SysTick_Handler+0x94c>)
 8001db8:	f00d f972 	bl	800f0a0 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\ RCVD MBUS REQ \r\n"));
 8001dbc:	4b30      	ldr	r3, [pc, #192]	@ (8001e80 <SysTick_Handler+0x920>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <SysTick_Handler+0x86c>
 8001dc4:	2113      	movs	r1, #19
 8001dc6:	483a      	ldr	r0, [pc, #232]	@ (8001eb0 <SysTick_Handler+0x950>)
 8001dc8:	f7ff fbae 	bl	8001528 <ITM0_Write>
										if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n RCVD MBUS REQ \r\n",strlen("\r\n RCVD MBUS REQ \r\n"));
 8001dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8001e88 <SysTick_Handler+0x928>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 813a 	beq.w	800204a <SysTick_Handler+0xaea>
 8001dd6:	2213      	movs	r2, #19
 8001dd8:	4935      	ldr	r1, [pc, #212]	@ (8001eb0 <SysTick_Handler+0x950>)
 8001dda:	482c      	ldr	r0, [pc, #176]	@ (8001e8c <SysTick_Handler+0x92c>)
 8001ddc:	f003 fc06 	bl	80055ec <HAL_UART_Transmit_IT>
			 break;
 8001de0:	e133      	b.n	800204a <SysTick_Handler+0xaea>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n NO MBUS \r\n"));
 8001de2:	4b27      	ldr	r3, [pc, #156]	@ (8001e80 <SysTick_Handler+0x920>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <SysTick_Handler+0x892>
 8001dea:	210d      	movs	r1, #13
 8001dec:	4831      	ldr	r0, [pc, #196]	@ (8001eb4 <SysTick_Handler+0x954>)
 8001dee:	f7ff fb9b 	bl	8001528 <ITM0_Write>
										if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n NO MBUS \r\n",strlen("\r\n NO MBUS \r\n"));
 8001df2:	4b25      	ldr	r3, [pc, #148]	@ (8001e88 <SysTick_Handler+0x928>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8127 	beq.w	800204a <SysTick_Handler+0xaea>
 8001dfc:	220d      	movs	r2, #13
 8001dfe:	492d      	ldr	r1, [pc, #180]	@ (8001eb4 <SysTick_Handler+0x954>)
 8001e00:	4822      	ldr	r0, [pc, #136]	@ (8001e8c <SysTick_Handler+0x92c>)
 8001e02:	f003 fbf3 	bl	80055ec <HAL_UART_Transmit_IT>
			 break;
 8001e06:	e120      	b.n	800204a <SysTick_Handler+0xaea>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001e08:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <SysTick_Handler+0x920>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <SysTick_Handler+0x8b8>
 8001e10:	2115      	movs	r1, #21
 8001e12:	4829      	ldr	r0, [pc, #164]	@ (8001eb8 <SysTick_Handler+0x958>)
 8001e14:	f7ff fb88 	bl	8001528 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_FIN_WAIT \r\n",strlen("\r\n S0_SOCK_FIN_WAIT \r\n"));
 8001e18:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <SysTick_Handler+0x928>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <SysTick_Handler+0x8ca>
 8001e20:	2216      	movs	r2, #22
 8001e22:	4926      	ldr	r1, [pc, #152]	@ (8001ebc <SysTick_Handler+0x95c>)
 8001e24:	4819      	ldr	r0, [pc, #100]	@ (8001e8c <SysTick_Handler+0x92c>)
 8001e26:	f003 fbe1 	bl	80055ec <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e60 <SysTick_Handler+0x900>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001e30:	e10c      	b.n	800204c <SysTick_Handler+0xaec>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001e32:	4b13      	ldr	r3, [pc, #76]	@ (8001e80 <SysTick_Handler+0x920>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <SysTick_Handler+0x8e2>
 8001e3a:	2114      	movs	r1, #20
 8001e3c:	4820      	ldr	r0, [pc, #128]	@ (8001ec0 <SysTick_Handler+0x960>)
 8001e3e:	f7ff fb73 	bl	8001528 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_CLOSING \r\n",strlen("\r\n S0_SOCK_CLOSING \r\n"));
 8001e42:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <SysTick_Handler+0x928>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <SysTick_Handler+0x8f4>
 8001e4a:	2215      	movs	r2, #21
 8001e4c:	491d      	ldr	r1, [pc, #116]	@ (8001ec4 <SysTick_Handler+0x964>)
 8001e4e:	480f      	ldr	r0, [pc, #60]	@ (8001e8c <SysTick_Handler+0x92c>)
 8001e50:	f003 fbcc 	bl	80055ec <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001e54:	4b02      	ldr	r3, [pc, #8]	@ (8001e60 <SysTick_Handler+0x900>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001e5a:	e0f7      	b.n	800204c <SysTick_Handler+0xaec>
 8001e5c:	20003168 	.word	0x20003168
 8001e60:	20000310 	.word	0x20000310
 8001e64:	20004216 	.word	0x20004216
 8001e68:	20003380 	.word	0x20003380
 8001e6c:	20000334 	.word	0x20000334
 8001e70:	20004212 	.word	0x20004212
 8001e74:	20001384 	.word	0x20001384
 8001e78:	20001334 	.word	0x20001334
 8001e7c:	20004694 	.word	0x20004694
 8001e80:	20004208 	.word	0x20004208
 8001e84:	080108f0 	.word	0x080108f0
 8001e88:	20000021 	.word	0x20000021
 8001e8c:	200002c4 	.word	0x200002c4
 8001e90:	20004218 	.word	0x20004218
 8001e94:	20004210 	.word	0x20004210
 8001e98:	20004214 	.word	0x20004214
 8001e9c:	08010904 	.word	0x08010904
 8001ea0:	2000317a 	.word	0x2000317a
 8001ea4:	20000b34 	.word	0x20000b34
 8001ea8:	2000358c 	.word	0x2000358c
 8001eac:	20003bdc 	.word	0x20003bdc
 8001eb0:	08010914 	.word	0x08010914
 8001eb4:	080108e0 	.word	0x080108e0
 8001eb8:	08010928 	.word	0x08010928
 8001ebc:	08010940 	.word	0x08010940
 8001ec0:	08010958 	.word	0x08010958
 8001ec4:	08010970 	.word	0x08010970
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001ec8:	4b79      	ldr	r3, [pc, #484]	@ (80020b0 <SysTick_Handler+0xb50>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <SysTick_Handler+0x978>
 8001ed0:	2116      	movs	r1, #22
 8001ed2:	4878      	ldr	r0, [pc, #480]	@ (80020b4 <SysTick_Handler+0xb54>)
 8001ed4:	f7ff fb28 	bl	8001528 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n nS0_SOCK_TIME_WAIT \r\n",strlen("\r\n nS0_SOCK_TIME_WAIT \r\n"));
 8001ed8:	4b77      	ldr	r3, [pc, #476]	@ (80020b8 <SysTick_Handler+0xb58>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d004      	beq.n	8001eea <SysTick_Handler+0x98a>
 8001ee0:	2218      	movs	r2, #24
 8001ee2:	4976      	ldr	r1, [pc, #472]	@ (80020bc <SysTick_Handler+0xb5c>)
 8001ee4:	4876      	ldr	r0, [pc, #472]	@ (80020c0 <SysTick_Handler+0xb60>)
 8001ee6:	f003 fb81 	bl	80055ec <HAL_UART_Transmit_IT>
					eth_wr_SOCKET_CMD(&ETH,S0_REG, DISCON );
 8001eea:	2208      	movs	r2, #8
 8001eec:	2101      	movs	r1, #1
 8001eee:	4875      	ldr	r0, [pc, #468]	@ (80020c4 <SysTick_Handler+0xb64>)
 8001ef0:	f00b fafd 	bl	800d4ee <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH,S_CR ,S0_REG,SPI_READ, spi_Data,1))//while( SPI_ETH_REG(&ETH, S_CR_ADDR_BASEH,S_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001ef4:	bf00      	nop
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	4b73      	ldr	r3, [pc, #460]	@ (80020c8 <SysTick_Handler+0xb68>)
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	2300      	movs	r3, #0
 8001f00:	2201      	movs	r2, #1
 8001f02:	2101      	movs	r1, #1
 8001f04:	486f      	ldr	r0, [pc, #444]	@ (80020c4 <SysTick_Handler+0xb64>)
 8001f06:	f00b f9a0 	bl	800d24a <SPI_ETH_REG>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f2      	bne.n	8001ef6 <SysTick_Handler+0x996>
					{}
					ETH.ETH_WDG=0;
 8001f10:	4b6c      	ldr	r3, [pc, #432]	@ (80020c4 <SysTick_Handler+0xb64>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f16:	e099      	b.n	800204c <SysTick_Handler+0xaec>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001f18:	4b65      	ldr	r3, [pc, #404]	@ (80020b0 <SysTick_Handler+0xb50>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <SysTick_Handler+0x9c8>
 8001f20:	2117      	movs	r1, #23
 8001f22:	486a      	ldr	r0, [pc, #424]	@ (80020cc <SysTick_Handler+0xb6c>)
 8001f24:	f7ff fb00 	bl	8001528 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_CLOSE_WAIT \r\n",strlen("\r\n S0_SOCK_CLOSE_WAIT \r\n"));
 8001f28:	4b63      	ldr	r3, [pc, #396]	@ (80020b8 <SysTick_Handler+0xb58>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d004      	beq.n	8001f3a <SysTick_Handler+0x9da>
 8001f30:	2218      	movs	r2, #24
 8001f32:	4967      	ldr	r1, [pc, #412]	@ (80020d0 <SysTick_Handler+0xb70>)
 8001f34:	4862      	ldr	r0, [pc, #392]	@ (80020c0 <SysTick_Handler+0xb60>)
 8001f36:	f003 fb59 	bl	80055ec <HAL_UART_Transmit_IT>
					eth_wr_SOCKET_CMD(&ETH,S0_REG,DISCON );
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	4861      	ldr	r0, [pc, #388]	@ (80020c4 <SysTick_Handler+0xb64>)
 8001f40:	f00b fad5 	bl	800d4ee <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH,S_CR,S0_REG,SPI_READ, spi_Data,1))
 8001f44:	bf00      	nop
 8001f46:	2301      	movs	r3, #1
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	4b5f      	ldr	r3, [pc, #380]	@ (80020c8 <SysTick_Handler+0xb68>)
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	2201      	movs	r2, #1
 8001f52:	2101      	movs	r1, #1
 8001f54:	485b      	ldr	r0, [pc, #364]	@ (80020c4 <SysTick_Handler+0xb64>)
 8001f56:	f00b f978 	bl	800d24a <SPI_ETH_REG>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f2      	bne.n	8001f46 <SysTick_Handler+0x9e6>
					{}
					ETH.ETH_WDG=0;
 8001f60:	4b58      	ldr	r3, [pc, #352]	@ (80020c4 <SysTick_Handler+0xb64>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f66:	e071      	b.n	800204c <SysTick_Handler+0xaec>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_LAST_ACK \r\n",strlen("\r\n S0_SOCK_LAST_ACK \r\n"));
 8001f68:	4b51      	ldr	r3, [pc, #324]	@ (80020b0 <SysTick_Handler+0xb50>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <SysTick_Handler+0xa18>
 8001f70:	2116      	movs	r1, #22
 8001f72:	4858      	ldr	r0, [pc, #352]	@ (80020d4 <SysTick_Handler+0xb74>)
 8001f74:	f7ff fad8 	bl	8001528 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_LAST_ACK \r\n",strlen("\r\n S0_SOCK_LAST_ACK \r\n"));
 8001f78:	4b4f      	ldr	r3, [pc, #316]	@ (80020b8 <SysTick_Handler+0xb58>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d004      	beq.n	8001f8a <SysTick_Handler+0xa2a>
 8001f80:	2216      	movs	r2, #22
 8001f82:	4954      	ldr	r1, [pc, #336]	@ (80020d4 <SysTick_Handler+0xb74>)
 8001f84:	484e      	ldr	r0, [pc, #312]	@ (80020c0 <SysTick_Handler+0xb60>)
 8001f86:	f003 fb31 	bl	80055ec <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001f8a:	4b4e      	ldr	r3, [pc, #312]	@ (80020c4 <SysTick_Handler+0xb64>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f90:	e05c      	b.n	800204c <SysTick_Handler+0xaec>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_UDP \r\n",strlen("\r\n S0_SOCK_UDP \r\n"));
 8001f92:	4b47      	ldr	r3, [pc, #284]	@ (80020b0 <SysTick_Handler+0xb50>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <SysTick_Handler+0xa42>
 8001f9a:	2111      	movs	r1, #17
 8001f9c:	484e      	ldr	r0, [pc, #312]	@ (80020d8 <SysTick_Handler+0xb78>)
 8001f9e:	f7ff fac3 	bl	8001528 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_UDP \r\n",strlen("\r\n S0_SOCK_UDP \r\n"));
 8001fa2:	4b45      	ldr	r3, [pc, #276]	@ (80020b8 <SysTick_Handler+0xb58>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d004      	beq.n	8001fb4 <SysTick_Handler+0xa54>
 8001faa:	2211      	movs	r2, #17
 8001fac:	494a      	ldr	r1, [pc, #296]	@ (80020d8 <SysTick_Handler+0xb78>)
 8001fae:	4844      	ldr	r0, [pc, #272]	@ (80020c0 <SysTick_Handler+0xb60>)
 8001fb0:	f003 fb1c 	bl	80055ec <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001fb4:	4b43      	ldr	r3, [pc, #268]	@ (80020c4 <SysTick_Handler+0xb64>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001fba:	e047      	b.n	800204c <SysTick_Handler+0xaec>
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_IPRAW \r\n",strlen("\r\n S0_SOCK_IPRAW \r\n"));
 8001fbc:	4b3c      	ldr	r3, [pc, #240]	@ (80020b0 <SysTick_Handler+0xb50>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <SysTick_Handler+0xa6c>
 8001fc4:	2113      	movs	r1, #19
 8001fc6:	4845      	ldr	r0, [pc, #276]	@ (80020dc <SysTick_Handler+0xb7c>)
 8001fc8:	f7ff faae 	bl	8001528 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_IPRAW \r\n",strlen("\r\n S0_SOCK_IPRAW \r\n"));
 8001fcc:	4b3a      	ldr	r3, [pc, #232]	@ (80020b8 <SysTick_Handler+0xb58>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d004      	beq.n	8001fde <SysTick_Handler+0xa7e>
 8001fd4:	2213      	movs	r2, #19
 8001fd6:	4941      	ldr	r1, [pc, #260]	@ (80020dc <SysTick_Handler+0xb7c>)
 8001fd8:	4839      	ldr	r0, [pc, #228]	@ (80020c0 <SysTick_Handler+0xb60>)
 8001fda:	f003 fb07 	bl	80055ec <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001fde:	4b39      	ldr	r3, [pc, #228]	@ (80020c4 <SysTick_Handler+0xb64>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001fe4:	e032      	b.n	800204c <SysTick_Handler+0xaec>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_MACRAW \r\n",strlen("\r\n S0_SOCK_MACRAW \r\n"));
 8001fe6:	4b32      	ldr	r3, [pc, #200]	@ (80020b0 <SysTick_Handler+0xb50>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <SysTick_Handler+0xa96>
 8001fee:	2114      	movs	r1, #20
 8001ff0:	483b      	ldr	r0, [pc, #236]	@ (80020e0 <SysTick_Handler+0xb80>)
 8001ff2:	f7ff fa99 	bl	8001528 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_MACRAW \r\n",strlen("\r\n S0_SOCK_MACRAW \r\n"));
 8001ff6:	4b30      	ldr	r3, [pc, #192]	@ (80020b8 <SysTick_Handler+0xb58>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d004      	beq.n	8002008 <SysTick_Handler+0xaa8>
 8001ffe:	2214      	movs	r2, #20
 8002000:	4937      	ldr	r1, [pc, #220]	@ (80020e0 <SysTick_Handler+0xb80>)
 8002002:	482f      	ldr	r0, [pc, #188]	@ (80020c0 <SysTick_Handler+0xb60>)
 8002004:	f003 faf2 	bl	80055ec <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8002008:	4b2e      	ldr	r3, [pc, #184]	@ (80020c4 <SysTick_Handler+0xb64>)
 800200a:	2200      	movs	r2, #0
 800200c:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 800200e:	e01d      	b.n	800204c <SysTick_Handler+0xaec>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_PPOE \r\n",strlen("\r\n S0_SOCK_PPOE \r\n"));
 8002010:	4b27      	ldr	r3, [pc, #156]	@ (80020b0 <SysTick_Handler+0xb50>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <SysTick_Handler+0xac0>
 8002018:	2112      	movs	r1, #18
 800201a:	4832      	ldr	r0, [pc, #200]	@ (80020e4 <SysTick_Handler+0xb84>)
 800201c:	f7ff fa84 	bl	8001528 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_PPOE \r\n",strlen("\r\n S0_SOCK_UDP \r\n"));
 8002020:	4b25      	ldr	r3, [pc, #148]	@ (80020b8 <SysTick_Handler+0xb58>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d004      	beq.n	8002032 <SysTick_Handler+0xad2>
 8002028:	2211      	movs	r2, #17
 800202a:	492e      	ldr	r1, [pc, #184]	@ (80020e4 <SysTick_Handler+0xb84>)
 800202c:	4824      	ldr	r0, [pc, #144]	@ (80020c0 <SysTick_Handler+0xb60>)
 800202e:	f003 fadd 	bl	80055ec <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8002032:	4b24      	ldr	r3, [pc, #144]	@ (80020c4 <SysTick_Handler+0xb64>)
 8002034:	2200      	movs	r2, #0
 8002036:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8002038:	e008      	b.n	800204c <SysTick_Handler+0xaec>
	  }
	  }else
	  	  {
		  //ETH.operacion=SPI_READ;
		  //ETH.TX[3]=0x00;
		  SPI_ETH(&ETH);
 800203a:	4822      	ldr	r0, [pc, #136]	@ (80020c4 <SysTick_Handler+0xb64>)
 800203c:	f00b f8dd 	bl	800d1fa <SPI_ETH>
 8002040:	e004      	b.n	800204c <SysTick_Handler+0xaec>
			 default:
 8002042:	bf00      	nop
 8002044:	e002      	b.n	800204c <SysTick_Handler+0xaec>
			 break;
 8002046:	bf00      	nop
 8002048:	e000      	b.n	800204c <SysTick_Handler+0xaec>
			 break;
 800204a:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 800204c:	4b26      	ldr	r3, [pc, #152]	@ (80020e8 <SysTick_Handler+0xb88>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d102      	bne.n	800205a <SysTick_Handler+0xafa>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8002054:	4b24      	ldr	r3, [pc, #144]	@ (80020e8 <SysTick_Handler+0xb88>)
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
		  }
  }

if(EN_USART1_TMR==1) USART1_ticks++;
 800205a:	4b24      	ldr	r3, [pc, #144]	@ (80020ec <SysTick_Handler+0xb8c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d104      	bne.n	800206c <SysTick_Handler+0xb0c>
 8002062:	4b23      	ldr	r3, [pc, #140]	@ (80020f0 <SysTick_Handler+0xb90>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3301      	adds	r3, #1
 8002068:	4a21      	ldr	r2, [pc, #132]	@ (80020f0 <SysTick_Handler+0xb90>)
 800206a:	6013      	str	r3, [r2, #0]

if(USART1_ticks>=2)//if(USART1_ticks>=10)
 800206c:	4b20      	ldr	r3, [pc, #128]	@ (80020f0 <SysTick_Handler+0xb90>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b01      	cmp	r3, #1
 8002072:	dd0f      	ble.n	8002094 <SysTick_Handler+0xb34>
{
	USART1_ticks=0;
 8002074:	4b1e      	ldr	r3, [pc, #120]	@ (80020f0 <SysTick_Handler+0xb90>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
	FLAG_USART1=1;
 800207a:	4b1e      	ldr	r3, [pc, #120]	@ (80020f4 <SysTick_Handler+0xb94>)
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]
	EN_USART1_TMR=0;
 8002080:	4b1a      	ldr	r3, [pc, #104]	@ (80020ec <SysTick_Handler+0xb8c>)
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
	items_rx=uart1pass;
 8002086:	4b1c      	ldr	r3, [pc, #112]	@ (80020f8 <SysTick_Handler+0xb98>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1c      	ldr	r2, [pc, #112]	@ (80020fc <SysTick_Handler+0xb9c>)
 800208c:	6013      	str	r3, [r2, #0]
	uart1pass=0;
 800208e:	4b1a      	ldr	r3, [pc, #104]	@ (80020f8 <SysTick_Handler+0xb98>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002094:	f000 fd44 	bl	8002b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 8002098:	4b19      	ldr	r3, [pc, #100]	@ (8002100 <SysTick_Handler+0xba0>)
 800209a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d132      	bne.n	8002108 <SysTick_Handler+0xba8>
	{
		ticks++;
 80020a2:	4b18      	ldr	r3, [pc, #96]	@ (8002104 <SysTick_Handler+0xba4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	3301      	adds	r3, #1
 80020a8:	4a16      	ldr	r2, [pc, #88]	@ (8002104 <SysTick_Handler+0xba4>)
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	e02f      	b.n	800210e <SysTick_Handler+0xbae>
 80020ae:	bf00      	nop
 80020b0:	20004208 	.word	0x20004208
 80020b4:	08010988 	.word	0x08010988
 80020b8:	20000021 	.word	0x20000021
 80020bc:	080109a0 	.word	0x080109a0
 80020c0:	200002c4 	.word	0x200002c4
 80020c4:	20000310 	.word	0x20000310
 80020c8:	20004218 	.word	0x20004218
 80020cc:	080109bc 	.word	0x080109bc
 80020d0:	080109d4 	.word	0x080109d4
 80020d4:	080109f0 	.word	0x080109f0
 80020d8:	08010a08 	.word	0x08010a08
 80020dc:	08010a1c 	.word	0x08010a1c
 80020e0:	08010a30 	.word	0x08010a30
 80020e4:	08010a48 	.word	0x08010a48
 80020e8:	2000030c 	.word	0x2000030c
 80020ec:	20004270 	.word	0x20004270
 80020f0:	200046a4 	.word	0x200046a4
 80020f4:	200046a8 	.word	0x200046a8
 80020f8:	200046a0 	.word	0x200046a0
 80020fc:	200046ac 	.word	0x200046ac
 8002100:	200023e0 	.word	0x200023e0
 8002104:	20004698 	.word	0x20004698
	}
	else
	{
		ticks=0;
 8002108:	4b34      	ldr	r3, [pc, #208]	@ (80021dc <SysTick_Handler+0xc7c>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
	}

	if(wf._ejecucion==1)
 800210e:	4b34      	ldr	r3, [pc, #208]	@ (80021e0 <SysTick_Handler+0xc80>)
 8002110:	f8d3 3adc 	ldr.w	r3, [r3, #2780]	@ 0xadc
 8002114:	2b01      	cmp	r3, #1
 8002116:	d158      	bne.n	80021ca <SysTick_Handler+0xc6a>
		{
			if (FLAG_TIMEOUT!=1)
 8002118:	4b32      	ldr	r3, [pc, #200]	@ (80021e4 <SysTick_Handler+0xc84>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d017      	beq.n	8002150 <SysTick_Handler+0xbf0>
			{
				if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8002120:	4b2f      	ldr	r3, [pc, #188]	@ (80021e0 <SysTick_Handler+0xc80>)
 8002122:	f8d3 3ad8 	ldr.w	r3, [r3, #2776]	@ 0xad8
 8002126:	2b02      	cmp	r3, #2
 8002128:	d006      	beq.n	8002138 <SysTick_Handler+0xbd8>
 800212a:	4b2d      	ldr	r3, [pc, #180]	@ (80021e0 <SysTick_Handler+0xc80>)
 800212c:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	@ 0xce0
 8002130:	3301      	adds	r3, #1
 8002132:	4a2b      	ldr	r2, [pc, #172]	@ (80021e0 <SysTick_Handler+0xc80>)
 8002134:	f8c2 3ce0 	str.w	r3, [r2, #3296]	@ 0xce0
				if(wf._instruccion==2) wf._ticks2++;
 8002138:	4b29      	ldr	r3, [pc, #164]	@ (80021e0 <SysTick_Handler+0xc80>)
 800213a:	f8d3 3ad8 	ldr.w	r3, [r3, #2776]	@ 0xad8
 800213e:	2b02      	cmp	r3, #2
 8002140:	d106      	bne.n	8002150 <SysTick_Handler+0xbf0>
 8002142:	4b27      	ldr	r3, [pc, #156]	@ (80021e0 <SysTick_Handler+0xc80>)
 8002144:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	@ 0xce4
 8002148:	3301      	adds	r3, #1
 800214a:	4a25      	ldr	r2, [pc, #148]	@ (80021e0 <SysTick_Handler+0xc80>)
 800214c:	f8c2 3ce4 	str.w	r3, [r2, #3300]	@ 0xce4
			}


			if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8002150:	4b23      	ldr	r3, [pc, #140]	@ (80021e0 <SysTick_Handler+0xc80>)
 8002152:	f8d3 3ad8 	ldr.w	r3, [r3, #2776]	@ 0xad8
 8002156:	2b02      	cmp	r3, #2
 8002158:	d018      	beq.n	800218c <SysTick_Handler+0xc2c>
 800215a:	4b21      	ldr	r3, [pc, #132]	@ (80021e0 <SysTick_Handler+0xc80>)
 800215c:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	@ 0xce0
 8002160:	f241 527c 	movw	r2, #5500	@ 0x157c
 8002164:	4293      	cmp	r3, r2
 8002166:	dd11      	ble.n	800218c <SysTick_Handler+0xc2c>
			{
				FLAG_TIMEOUT=1;
 8002168:	4b1e      	ldr	r3, [pc, #120]	@ (80021e4 <SysTick_Handler+0xc84>)
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
				if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 800216e:	4b1e      	ldr	r3, [pc, #120]	@ (80021e8 <SysTick_Handler+0xc88>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f242 020c 	movw	r2, #8204	@ 0x200c
 8002178:	4293      	cmp	r3, r2
 800217a:	d107      	bne.n	800218c <SysTick_Handler+0xc2c>
				{
					HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 800217c:	2201      	movs	r2, #1
 800217e:	491b      	ldr	r1, [pc, #108]	@ (80021ec <SysTick_Handler+0xc8c>)
 8002180:	4819      	ldr	r0, [pc, #100]	@ (80021e8 <SysTick_Handler+0xc88>)
 8002182:	f003 fa78 	bl	8005676 <HAL_UART_Receive_IT>
					EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8002186:	4b1a      	ldr	r3, [pc, #104]	@ (80021f0 <SysTick_Handler+0xc90>)
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
				}
				//wf._ticks=0;
			}
			if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 800218c:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <SysTick_Handler+0xc80>)
 800218e:	f8d3 3ad8 	ldr.w	r3, [r3, #2776]	@ 0xad8
 8002192:	2b02      	cmp	r3, #2
 8002194:	d11d      	bne.n	80021d2 <SysTick_Handler+0xc72>
 8002196:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <SysTick_Handler+0xc80>)
 8002198:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	@ 0xce4
 800219c:	f245 0214 	movw	r2, #20500	@ 0x5014
 80021a0:	4293      	cmp	r3, r2
 80021a2:	dd16      	ble.n	80021d2 <SysTick_Handler+0xc72>
			{
				FLAG_TIMEOUT=1;
 80021a4:	4b0f      	ldr	r3, [pc, #60]	@ (80021e4 <SysTick_Handler+0xc84>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
				if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 80021aa:	4b0f      	ldr	r3, [pc, #60]	@ (80021e8 <SysTick_Handler+0xc88>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f242 020c 	movw	r2, #8204	@ 0x200c
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d10c      	bne.n	80021d2 <SysTick_Handler+0xc72>
				{
					HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 80021b8:	2201      	movs	r2, #1
 80021ba:	490c      	ldr	r1, [pc, #48]	@ (80021ec <SysTick_Handler+0xc8c>)
 80021bc:	480a      	ldr	r0, [pc, #40]	@ (80021e8 <SysTick_Handler+0xc88>)
 80021be:	f003 fa5a 	bl	8005676 <HAL_UART_Receive_IT>
					EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 80021c2:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <SysTick_Handler+0xc90>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
		else
		{
			wf._ticks=0;
		}
  /* USER CODE END SysTick_IRQn 1 */
}
 80021c8:	e003      	b.n	80021d2 <SysTick_Handler+0xc72>
			wf._ticks=0;
 80021ca:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <SysTick_Handler+0xc80>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	f8c3 2ce0 	str.w	r2, [r3, #3296]	@ 0xce0
}
 80021d2:	bf00      	nop
 80021d4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20004698 	.word	0x20004698
 80021e0:	200023e0 	.word	0x200023e0
 80021e4:	20004271 	.word	0x20004271
 80021e8:	20000280 	.word	0x20000280
 80021ec:	20004684 	.word	0x20004684
 80021f0:	2000426f 	.word	0x2000426f

080021f4 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a25      	ldr	r2, [pc, #148]	@ (8002298 <HAL_UART_ErrorCallback+0xa4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d121      	bne.n	800224a <HAL_UART_ErrorCallback+0x56>
	{
		 volatile int aore=0;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 800220e:	4b23      	ldr	r3, [pc, #140]	@ (800229c <HAL_UART_ErrorCallback+0xa8>)
 8002210:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	@ 0xd50
 8002214:	3301      	adds	r3, #1
 8002216:	4a21      	ldr	r2, [pc, #132]	@ (800229c <HAL_UART_ErrorCallback+0xa8>)
 8002218:	f8c2 3d50 	str.w	r3, [r2, #3408]	@ 0xd50
			aore=ERRUART->Instance->SR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	613b      	str	r3, [r7, #16]


		 HAL_UART_Transmit_IT(&huart2,"\r\n ERROR HW UARRT1 \r\n",strlen("\r\n ERROR HW UARRT1 \r\n"));
 800222c:	2215      	movs	r2, #21
 800222e:	491c      	ldr	r1, [pc, #112]	@ (80022a0 <HAL_UART_ErrorCallback+0xac>)
 8002230:	481c      	ldr	r0, [pc, #112]	@ (80022a4 <HAL_UART_ErrorCallback+0xb0>)
 8002232:	f003 f9db 	bl	80055ec <HAL_UART_Transmit_IT>
		 HAL_UART_DeInit(ERRUART);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f003 f917 	bl	800546a <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 800223c:	f7ff f87a 	bl	8001334 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8002240:	2201      	movs	r2, #1
 8002242:	4919      	ldr	r1, [pc, #100]	@ (80022a8 <HAL_UART_ErrorCallback+0xb4>)
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f003 fa16 	bl	8005676 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a17      	ldr	r2, [pc, #92]	@ (80022ac <HAL_UART_ErrorCallback+0xb8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d11c      	bne.n	800228e <HAL_UART_ErrorCallback+0x9a>
	{
		 volatile int aore=0;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 800225c:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <HAL_UART_ErrorCallback+0xa8>)
 800225e:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	@ 0xd50
 8002262:	3301      	adds	r3, #1
 8002264:	4a0d      	ldr	r2, [pc, #52]	@ (800229c <HAL_UART_ErrorCallback+0xa8>)
 8002266:	f8c2 3d50 	str.w	r3, [r2, #3408]	@ 0xd50
			aore=ERRUART->Instance->SR;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f003 f8f5 	bl	800546a <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 8002280:	f7ff f882 	bl	8001388 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8002284:	2201      	movs	r2, #1
 8002286:	4908      	ldr	r1, [pc, #32]	@ (80022a8 <HAL_UART_ErrorCallback+0xb4>)
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f003 f9f4 	bl	8005676 <HAL_UART_Receive_IT>
	}
}
 800228e:	bf00      	nop
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40011000 	.word	0x40011000
 800229c:	200023e0 	.word	0x200023e0
 80022a0:	08010a5c 	.word	0x08010a5c
 80022a4:	200002c4 	.word	0x200002c4
 80022a8:	20004684 	.word	0x20004684
 80022ac:	40004400 	.word	0x40004400

080022b0 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a15      	ldr	r2, [pc, #84]	@ (8002314 <HAL_UART_RxCpltCallback+0x64>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d123      	bne.n	800230a <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 80022c2:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <HAL_UART_RxCpltCallback+0x68>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a15      	ldr	r2, [pc, #84]	@ (800231c <HAL_UART_RxCpltCallback+0x6c>)
 80022c8:	7811      	ldrb	r1, [r2, #0]
 80022ca:	4a15      	ldr	r2, [pc, #84]	@ (8002320 <HAL_UART_RxCpltCallback+0x70>)
 80022cc:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 80022ce:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <HAL_UART_RxCpltCallback+0x68>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3301      	adds	r3, #1
 80022d4:	4a10      	ldr	r2, [pc, #64]	@ (8002318 <HAL_UART_RxCpltCallback+0x68>)
 80022d6:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <HAL_UART_RxCpltCallback+0x68>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022e0:	db03      	blt.n	80022ea <HAL_UART_RxCpltCallback+0x3a>
 80022e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002318 <HAL_UART_RxCpltCallback+0x68>)
 80022e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022e8:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 80022ea:	2100      	movs	r1, #0
 80022ec:	480d      	ldr	r0, [pc, #52]	@ (8002324 <HAL_UART_RxCpltCallback+0x74>)
 80022ee:	f002 f8c3 	bl	8004478 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 80022f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022f6:	2201      	movs	r2, #1
 80022f8:	625a      	str	r2, [r3, #36]	@ 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 80022fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002328 <HAL_UART_RxCpltCallback+0x78>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 8002300:	2201      	movs	r2, #1
 8002302:	4906      	ldr	r1, [pc, #24]	@ (800231c <HAL_UART_RxCpltCallback+0x6c>)
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f003 f9b6 	bl	8005676 <HAL_UART_Receive_IT>
		 }
 }
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40011000 	.word	0x40011000
 8002318:	200046b4 	.word	0x200046b4
 800231c:	20004684 	.word	0x20004684
 8002320:	20004280 	.word	0x20004280
 8002324:	20000238 	.word	0x20000238
 8002328:	2000426f 	.word	0x2000426f

0800232c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af02      	add	r7, sp, #8
 8002332:	6078      	str	r0, [r7, #4]

		if(TIMER->Instance==TIM2)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800233c:	d12d      	bne.n	800239a <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 800233e:	2100      	movs	r1, #0
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f002 f997 	bl	8004674 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 8002346:	4b17      	ldr	r3, [pc, #92]	@ (80023a4 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 800234c:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 8002352:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a16      	ldr	r2, [pc, #88]	@ (80023b0 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8002358:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 800235a:	4b14      	ldr	r3, [pc, #80]	@ (80023ac <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002360:	4b14      	ldr	r3, [pc, #80]	@ (80023b4 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8002368:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2301      	movs	r3, #1
 8002372:	4910      	ldr	r1, [pc, #64]	@ (80023b4 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8002374:	4811      	ldr	r0, [pc, #68]	@ (80023bc <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002376:	f00c fe93 	bl	800f0a0 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 800237a:	2201      	movs	r2, #1
 800237c:	4910      	ldr	r1, [pc, #64]	@ (80023c0 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 800237e:	4811      	ldr	r0, [pc, #68]	@ (80023c4 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002380:	f003 f979 	bl	8005676 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 8002384:	4b10      	ldr	r3, [pc, #64]	@ (80023c8 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002386:	f8d3 3d84 	ldr.w	r3, [r3, #3460]	@ 0xd84
 800238a:	2b01      	cmp	r3, #1
 800238c:	d105      	bne.n	800239a <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 800238e:	4b08      	ldr	r3, [pc, #32]	@ (80023b0 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4619      	mov	r1, r3
 8002394:	4809      	ldr	r0, [pc, #36]	@ (80023bc <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002396:	f7ff f8c7 	bl	8001528 <ITM0_Write>
				 }
		}
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20004272 	.word	0x20004272
 80023a8:	2000426f 	.word	0x2000426f
 80023ac:	200046b4 	.word	0x200046b4
 80023b0:	20004688 	.word	0x20004688
 80023b4:	20004280 	.word	0x20004280
 80023b8:	20004680 	.word	0x20004680
 80023bc:	20004480 	.word	0x20004480
 80023c0:	20004684 	.word	0x20004684
 80023c4:	20000280 	.word	0x20000280
 80023c8:	200023e0 	.word	0x200023e0

080023cc <ESP8266_HW_Init>:

uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af06      	add	r7, sp, #24
 80023d2:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 80023d4:	2364      	movs	r3, #100	@ 0x64
 80023d6:	220c      	movs	r2, #12
 80023d8:	4946      	ldr	r1, [pc, #280]	@ (80024f4 <ESP8266_HW_Init+0x128>)
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f003 f874 	bl	80054c8 <HAL_UART_Transmit>
		  HAL_Delay(500);
 80023e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80023e4:	f000 fbbc 	bl	8002b60 <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 80023e8:	4b43      	ldr	r3, [pc, #268]	@ (80024f8 <ESP8266_HW_Init+0x12c>)
 80023ea:	2205      	movs	r2, #5
 80023ec:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
		  wf._n_orig=UART_RX_items;
 80023f0:	4b42      	ldr	r3, [pc, #264]	@ (80024fc <ESP8266_HW_Init+0x130>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a40      	ldr	r2, [pc, #256]	@ (80024f8 <ESP8266_HW_Init+0x12c>)
 80023f6:	f8c2 3d0c 	str.w	r3, [r2, #3340]	@ 0xd0c

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,510,FIND)!=1)
 80023fa:	e00e      	b.n	800241a <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 80023fc:	4b3f      	ldr	r3, [pc, #252]	@ (80024fc <ESP8266_HW_Init+0x130>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a3d      	ldr	r2, [pc, #244]	@ (80024f8 <ESP8266_HW_Init+0x12c>)
 8002402:	f8c2 3d0c 	str.w	r3, [r2, #3340]	@ 0xd0c
			  	  if (ESP_ticks>=5000)
 8002406:	4b3e      	ldr	r3, [pc, #248]	@ (8002500 <ESP8266_HW_Init+0x134>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800240e:	4293      	cmp	r3, r2
 8002410:	dd03      	ble.n	800241a <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 8002412:	4b3c      	ldr	r3, [pc, #240]	@ (8002504 <ESP8266_HW_Init+0x138>)
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
			  		 break;
 8002418:	e015      	b.n	8002446 <ESP8266_HW_Init+0x7a>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,510,FIND)!=1)
 800241a:	2300      	movs	r3, #0
 800241c:	9305      	str	r3, [sp, #20]
 800241e:	f44f 73ff 	mov.w	r3, #510	@ 0x1fe
 8002422:	9304      	str	r3, [sp, #16]
 8002424:	4b38      	ldr	r3, [pc, #224]	@ (8002508 <ESP8266_HW_Init+0x13c>)
 8002426:	9303      	str	r3, [sp, #12]
 8002428:	4b38      	ldr	r3, [pc, #224]	@ (800250c <ESP8266_HW_Init+0x140>)
 800242a:	9302      	str	r3, [sp, #8]
 800242c:	4b38      	ldr	r3, [pc, #224]	@ (8002510 <ESP8266_HW_Init+0x144>)
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	4b38      	ldr	r3, [pc, #224]	@ (8002514 <ESP8266_HW_Init+0x148>)
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	4b38      	ldr	r3, [pc, #224]	@ (8002518 <ESP8266_HW_Init+0x14c>)
 8002436:	4a39      	ldr	r2, [pc, #228]	@ (800251c <ESP8266_HW_Init+0x150>)
 8002438:	4939      	ldr	r1, [pc, #228]	@ (8002520 <ESP8266_HW_Init+0x154>)
 800243a:	483a      	ldr	r0, [pc, #232]	@ (8002524 <ESP8266_HW_Init+0x158>)
 800243c:	f00c fa3e 	bl	800e8bc <FT_String_ND>
 8002440:	4603      	mov	r3, r0
 8002442:	2b01      	cmp	r3, #1
 8002444:	d1da      	bne.n	80023fc <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 8002446:	4b2f      	ldr	r3, [pc, #188]	@ (8002504 <ESP8266_HW_Init+0x138>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d12c      	bne.n	80024a8 <ESP8266_HW_Init+0xdc>
		  {
			  wf._n_fcomp=strlen("ready");
 800244e:	4b2a      	ldr	r3, [pc, #168]	@ (80024f8 <ESP8266_HW_Init+0x12c>)
 8002450:	2205      	movs	r2, #5
 8002452:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
			  wf._n_orig=UART_RX_items;
 8002456:	4b29      	ldr	r3, [pc, #164]	@ (80024fc <ESP8266_HW_Init+0x130>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a27      	ldr	r2, [pc, #156]	@ (80024f8 <ESP8266_HW_Init+0x12c>)
 800245c:	f8c2 3d0c 	str.w	r3, [r2, #3340]	@ 0xd0c
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,510,FIND)!=1)
 8002460:	e00a      	b.n	8002478 <ESP8266_HW_Init+0xac>
			  {
				  wf._n_orig=UART_RX_items;
 8002462:	4b26      	ldr	r3, [pc, #152]	@ (80024fc <ESP8266_HW_Init+0x130>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a24      	ldr	r2, [pc, #144]	@ (80024f8 <ESP8266_HW_Init+0x12c>)
 8002468:	f8c2 3d0c 	str.w	r3, [r2, #3340]	@ 0xd0c
				  if (ESP_ticks>=5000)
 800246c:	4b24      	ldr	r3, [pc, #144]	@ (8002500 <ESP8266_HW_Init+0x134>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002474:	4293      	cmp	r3, r2
 8002476:	dc16      	bgt.n	80024a6 <ESP8266_HW_Init+0xda>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,510,FIND)!=1)
 8002478:	2300      	movs	r3, #0
 800247a:	9305      	str	r3, [sp, #20]
 800247c:	f44f 73ff 	mov.w	r3, #510	@ 0x1fe
 8002480:	9304      	str	r3, [sp, #16]
 8002482:	4b21      	ldr	r3, [pc, #132]	@ (8002508 <ESP8266_HW_Init+0x13c>)
 8002484:	9303      	str	r3, [sp, #12]
 8002486:	4b21      	ldr	r3, [pc, #132]	@ (800250c <ESP8266_HW_Init+0x140>)
 8002488:	9302      	str	r3, [sp, #8]
 800248a:	4b21      	ldr	r3, [pc, #132]	@ (8002510 <ESP8266_HW_Init+0x144>)
 800248c:	9301      	str	r3, [sp, #4]
 800248e:	4b21      	ldr	r3, [pc, #132]	@ (8002514 <ESP8266_HW_Init+0x148>)
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	4b21      	ldr	r3, [pc, #132]	@ (8002518 <ESP8266_HW_Init+0x14c>)
 8002494:	4a21      	ldr	r2, [pc, #132]	@ (800251c <ESP8266_HW_Init+0x150>)
 8002496:	4922      	ldr	r1, [pc, #136]	@ (8002520 <ESP8266_HW_Init+0x154>)
 8002498:	4822      	ldr	r0, [pc, #136]	@ (8002524 <ESP8266_HW_Init+0x158>)
 800249a:	f00c fa0f 	bl	800e8bc <FT_String_ND>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d1de      	bne.n	8002462 <ESP8266_HW_Init+0x96>
 80024a4:	e000      	b.n	80024a8 <ESP8266_HW_Init+0xdc>
					 {
					 break;
 80024a6:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 80024a8:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <ESP8266_HW_Init+0x134>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f241 3287 	movw	r2, #4999	@ 0x1387
 80024b0:	4293      	cmp	r3, r2
 80024b2:	dc06      	bgt.n	80024c2 <ESP8266_HW_Init+0xf6>
		  {
			  ESP_REinit=10;
 80024b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002528 <ESP8266_HW_Init+0x15c>)
 80024b6:	220a      	movs	r2, #10
 80024b8:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 80024ba:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <ESP8266_HW_Init+0x134>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e008      	b.n	80024d4 <ESP8266_HW_Init+0x108>
		  }
		  else
		  {
			  ESP_REinit++;
 80024c2:	4b19      	ldr	r3, [pc, #100]	@ (8002528 <ESP8266_HW_Init+0x15c>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	3301      	adds	r3, #1
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4b17      	ldr	r3, [pc, #92]	@ (8002528 <ESP8266_HW_Init+0x15c>)
 80024cc:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 80024ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <ESP8266_HW_Init+0x134>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 80024d4:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <ESP8266_HW_Init+0x15c>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b05      	cmp	r3, #5
 80024da:	f67f af7b 	bls.w	80023d4 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 80024de:	4b12      	ldr	r3, [pc, #72]	@ (8002528 <ESP8266_HW_Init+0x15c>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b0a      	cmp	r3, #10
 80024e4:	d101      	bne.n	80024ea <ESP8266_HW_Init+0x11e>
	  {
		  return(1);
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <ESP8266_HW_Init+0x120>
	  }
	  else
	  {
		  return(0);
 80024ea:	2300      	movs	r3, #0
	  }
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	08010a74 	.word	0x08010a74
 80024f8:	200023e0 	.word	0x200023e0
 80024fc:	20004688 	.word	0x20004688
 8002500:	2000468c 	.word	0x2000468c
 8002504:	2000426d 	.word	0x2000426d
 8002508:	20002ea0 	.word	0x20002ea0
 800250c:	2000469c 	.word	0x2000469c
 8002510:	200030f4 	.word	0x200030f4
 8002514:	20002ca0 	.word	0x20002ca0
 8002518:	20003100 	.word	0x20003100
 800251c:	08010a84 	.word	0x08010a84
 8002520:	200030ec 	.word	0x200030ec
 8002524:	20004480 	.word	0x20004480
 8002528:	2000426c 	.word	0x2000426c

0800252c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002530:	b672      	cpsid	i
}
 8002532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <Error_Handler+0x8>

08002538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
 8002542:	4b10      	ldr	r3, [pc, #64]	@ (8002584 <HAL_MspInit+0x4c>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	4a0f      	ldr	r2, [pc, #60]	@ (8002584 <HAL_MspInit+0x4c>)
 8002548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800254c:	6453      	str	r3, [r2, #68]	@ 0x44
 800254e:	4b0d      	ldr	r3, [pc, #52]	@ (8002584 <HAL_MspInit+0x4c>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <HAL_MspInit+0x4c>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	4a08      	ldr	r2, [pc, #32]	@ (8002584 <HAL_MspInit+0x4c>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002568:	6413      	str	r3, [r2, #64]	@ 0x40
 800256a:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <HAL_MspInit+0x4c>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800

08002588 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	@ 0x28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a19      	ldr	r2, [pc, #100]	@ (800260c <HAL_SPI_MspInit+0x84>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d12b      	bne.n	8002602 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	4b18      	ldr	r3, [pc, #96]	@ (8002610 <HAL_SPI_MspInit+0x88>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b2:	4a17      	ldr	r2, [pc, #92]	@ (8002610 <HAL_SPI_MspInit+0x88>)
 80025b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ba:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <HAL_SPI_MspInit+0x88>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <HAL_SPI_MspInit+0x88>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	4a10      	ldr	r2, [pc, #64]	@ (8002610 <HAL_SPI_MspInit+0x88>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002610 <HAL_SPI_MspInit+0x88>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025e2:	23e0      	movs	r3, #224	@ 0xe0
 80025e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e6:	2302      	movs	r3, #2
 80025e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ee:	2303      	movs	r3, #3
 80025f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025f2:	2305      	movs	r3, #5
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f6:	f107 0314 	add.w	r3, r7, #20
 80025fa:	4619      	mov	r1, r3
 80025fc:	4805      	ldr	r0, [pc, #20]	@ (8002614 <HAL_SPI_MspInit+0x8c>)
 80025fe:	f000 fca9 	bl	8002f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002602:	bf00      	nop
 8002604:	3728      	adds	r7, #40	@ 0x28
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40013000 	.word	0x40013000
 8002610:	40023800 	.word	0x40023800
 8002614:	40020000 	.word	0x40020000

08002618 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002628:	d115      	bne.n	8002656 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	4b0c      	ldr	r3, [pc, #48]	@ (8002660 <HAL_TIM_Base_MspInit+0x48>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	4a0b      	ldr	r2, [pc, #44]	@ (8002660 <HAL_TIM_Base_MspInit+0x48>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	6413      	str	r3, [r2, #64]	@ 0x40
 800263a:	4b09      	ldr	r3, [pc, #36]	@ (8002660 <HAL_TIM_Base_MspInit+0x48>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	201c      	movs	r0, #28
 800264c:	f000 fbab 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002650:	201c      	movs	r0, #28
 8002652:	f000 fbc4 	bl	8002dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800

08002664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08c      	sub	sp, #48	@ 0x30
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 031c 	add.w	r3, r7, #28
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a3a      	ldr	r2, [pc, #232]	@ (800276c <HAL_UART_MspInit+0x108>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d135      	bne.n	80026f2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	4b39      	ldr	r3, [pc, #228]	@ (8002770 <HAL_UART_MspInit+0x10c>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268e:	4a38      	ldr	r2, [pc, #224]	@ (8002770 <HAL_UART_MspInit+0x10c>)
 8002690:	f043 0310 	orr.w	r3, r3, #16
 8002694:	6453      	str	r3, [r2, #68]	@ 0x44
 8002696:	4b36      	ldr	r3, [pc, #216]	@ (8002770 <HAL_UART_MspInit+0x10c>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
 80026a6:	4b32      	ldr	r3, [pc, #200]	@ (8002770 <HAL_UART_MspInit+0x10c>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	4a31      	ldr	r2, [pc, #196]	@ (8002770 <HAL_UART_MspInit+0x10c>)
 80026ac:	f043 0301 	orr.w	r3, r3, #1
 80026b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002770 <HAL_UART_MspInit+0x10c>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = WF_TX_Pin|WF_RX_Pin;
 80026be:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c4:	2302      	movs	r3, #2
 80026c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026cc:	2303      	movs	r3, #3
 80026ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026d0:	2307      	movs	r3, #7
 80026d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d4:	f107 031c 	add.w	r3, r7, #28
 80026d8:	4619      	mov	r1, r3
 80026da:	4826      	ldr	r0, [pc, #152]	@ (8002774 <HAL_UART_MspInit+0x110>)
 80026dc:	f000 fc3a 	bl	8002f54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026e0:	2200      	movs	r2, #0
 80026e2:	2100      	movs	r1, #0
 80026e4:	2025      	movs	r0, #37	@ 0x25
 80026e6:	f000 fb5e 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026ea:	2025      	movs	r0, #37	@ 0x25
 80026ec:	f000 fb77 	bl	8002dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026f0:	e038      	b.n	8002764 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a20      	ldr	r2, [pc, #128]	@ (8002778 <HAL_UART_MspInit+0x114>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d133      	bne.n	8002764 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	4b1b      	ldr	r3, [pc, #108]	@ (8002770 <HAL_UART_MspInit+0x10c>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	4a1a      	ldr	r2, [pc, #104]	@ (8002770 <HAL_UART_MspInit+0x10c>)
 8002706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800270a:	6413      	str	r3, [r2, #64]	@ 0x40
 800270c:	4b18      	ldr	r3, [pc, #96]	@ (8002770 <HAL_UART_MspInit+0x10c>)
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	4b14      	ldr	r3, [pc, #80]	@ (8002770 <HAL_UART_MspInit+0x10c>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002720:	4a13      	ldr	r2, [pc, #76]	@ (8002770 <HAL_UART_MspInit+0x10c>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6313      	str	r3, [r2, #48]	@ 0x30
 8002728:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <HAL_UART_MspInit+0x10c>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PORT2TX_Pin|PORT2_RX_Pin;
 8002734:	230c      	movs	r3, #12
 8002736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002740:	2303      	movs	r3, #3
 8002742:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002744:	2307      	movs	r3, #7
 8002746:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002748:	f107 031c 	add.w	r3, r7, #28
 800274c:	4619      	mov	r1, r3
 800274e:	4809      	ldr	r0, [pc, #36]	@ (8002774 <HAL_UART_MspInit+0x110>)
 8002750:	f000 fc00 	bl	8002f54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002754:	2200      	movs	r2, #0
 8002756:	2100      	movs	r1, #0
 8002758:	2026      	movs	r0, #38	@ 0x26
 800275a:	f000 fb24 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800275e:	2026      	movs	r0, #38	@ 0x26
 8002760:	f000 fb3d 	bl	8002dde <HAL_NVIC_EnableIRQ>
}
 8002764:	bf00      	nop
 8002766:	3730      	adds	r7, #48	@ 0x30
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40011000 	.word	0x40011000
 8002770:	40023800 	.word	0x40023800
 8002774:	40020000 	.word	0x40020000
 8002778:	40004400 	.word	0x40004400

0800277c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a13      	ldr	r2, [pc, #76]	@ (80027d8 <HAL_UART_MspDeInit+0x5c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10e      	bne.n	80027ac <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800278e:	4b13      	ldr	r3, [pc, #76]	@ (80027dc <HAL_UART_MspDeInit+0x60>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	4a12      	ldr	r2, [pc, #72]	@ (80027dc <HAL_UART_MspDeInit+0x60>)
 8002794:	f023 0310 	bic.w	r3, r3, #16
 8002798:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, WF_TX_Pin|WF_RX_Pin);
 800279a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800279e:	4810      	ldr	r0, [pc, #64]	@ (80027e0 <HAL_UART_MspDeInit+0x64>)
 80027a0:	f000 fd5c 	bl	800325c <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80027a4:	2025      	movs	r0, #37	@ 0x25
 80027a6:	f000 fb28 	bl	8002dfa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80027aa:	e011      	b.n	80027d0 <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART2)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0c      	ldr	r2, [pc, #48]	@ (80027e4 <HAL_UART_MspDeInit+0x68>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10c      	bne.n	80027d0 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80027b6:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <HAL_UART_MspDeInit+0x60>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	4a08      	ldr	r2, [pc, #32]	@ (80027dc <HAL_UART_MspDeInit+0x60>)
 80027bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80027c0:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, PORT2TX_Pin|PORT2_RX_Pin);
 80027c2:	210c      	movs	r1, #12
 80027c4:	4806      	ldr	r0, [pc, #24]	@ (80027e0 <HAL_UART_MspDeInit+0x64>)
 80027c6:	f000 fd49 	bl	800325c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80027ca:	2026      	movs	r0, #38	@ 0x26
 80027cc:	f000 fb15 	bl	8002dfa <HAL_NVIC_DisableIRQ>
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40011000 	.word	0x40011000
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40020000 	.word	0x40020000
 80027e4:	40004400 	.word	0x40004400

080027e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <NMI_Handler+0x4>

080027f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f4:	bf00      	nop
 80027f6:	e7fd      	b.n	80027f4 <HardFault_Handler+0x4>

080027f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <MemManage_Handler+0x4>

08002800 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002804:	bf00      	nop
 8002806:	e7fd      	b.n	8002804 <BusFault_Handler+0x4>

08002808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800280c:	bf00      	nop
 800280e:	e7fd      	b.n	800280c <UsageFault_Handler+0x4>

08002810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002840:	4802      	ldr	r0, [pc, #8]	@ (800284c <TIM2_IRQHandler+0x10>)
 8002842:	f002 f823 	bl	800488c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000238 	.word	0x20000238

08002850 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002854:	4802      	ldr	r0, [pc, #8]	@ (8002860 <USART1_IRQHandler+0x10>)
 8002856:	f002 ff3f 	bl	80056d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000280 	.word	0x20000280

08002864 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002868:	4802      	ldr	r0, [pc, #8]	@ (8002874 <USART2_IRQHandler+0x10>)
 800286a:	f002 ff35 	bl	80056d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200002c4 	.word	0x200002c4

08002878 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
	return 1;
 800287c:	2301      	movs	r3, #1
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <_kill>:

int _kill(int pid, int sig)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002892:	f00c febd 	bl	800f610 <__errno>
 8002896:	4603      	mov	r3, r0
 8002898:	2216      	movs	r2, #22
 800289a:	601a      	str	r2, [r3, #0]
	return -1;
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <_exit>:

void _exit (int status)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028b0:	f04f 31ff 	mov.w	r1, #4294967295
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ffe7 	bl	8002888 <_kill>
	while (1) {}		/* Make sure we hang here */
 80028ba:	bf00      	nop
 80028bc:	e7fd      	b.n	80028ba <_exit+0x12>

080028be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	e00a      	b.n	80028e6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028d0:	f3af 8000 	nop.w
 80028d4:	4601      	mov	r1, r0
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	60ba      	str	r2, [r7, #8]
 80028dc:	b2ca      	uxtb	r2, r1
 80028de:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	3301      	adds	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	dbf0      	blt.n	80028d0 <_read+0x12>
	}

return len;
 80028ee:	687b      	ldr	r3, [r7, #4]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	e009      	b.n	800291e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	60ba      	str	r2, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	3301      	adds	r3, #1
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	429a      	cmp	r2, r3
 8002924:	dbf1      	blt.n	800290a <_write+0x12>
	}
	return len;
 8002926:	687b      	ldr	r3, [r7, #4]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <_close>:

int _close(int file)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
	return -1;
 8002938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002958:	605a      	str	r2, [r3, #4]
	return 0;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <_isatty>:

int _isatty(int file)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	return 1;
 8002970:	2301      	movs	r3, #1
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800297e:	b480      	push	{r7}
 8002980:	b085      	sub	sp, #20
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
	return 0;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a0:	4a14      	ldr	r2, [pc, #80]	@ (80029f4 <_sbrk+0x5c>)
 80029a2:	4b15      	ldr	r3, [pc, #84]	@ (80029f8 <_sbrk+0x60>)
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029ac:	4b13      	ldr	r3, [pc, #76]	@ (80029fc <_sbrk+0x64>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b4:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <_sbrk+0x64>)
 80029b6:	4a12      	ldr	r2, [pc, #72]	@ (8002a00 <_sbrk+0x68>)
 80029b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ba:	4b10      	ldr	r3, [pc, #64]	@ (80029fc <_sbrk+0x64>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d207      	bcs.n	80029d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c8:	f00c fe22 	bl	800f610 <__errno>
 80029cc:	4603      	mov	r3, r0
 80029ce:	220c      	movs	r2, #12
 80029d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029d2:	f04f 33ff 	mov.w	r3, #4294967295
 80029d6:	e009      	b.n	80029ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d8:	4b08      	ldr	r3, [pc, #32]	@ (80029fc <_sbrk+0x64>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029de:	4b07      	ldr	r3, [pc, #28]	@ (80029fc <_sbrk+0x64>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	4a05      	ldr	r2, [pc, #20]	@ (80029fc <_sbrk+0x64>)
 80029e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ea:	68fb      	ldr	r3, [r7, #12]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20020000 	.word	0x20020000
 80029f8:	00000400 	.word	0x00000400
 80029fc:	200046bc 	.word	0x200046bc
 8002a00:	20004810 	.word	0x20004810

08002a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a08:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <SystemInit+0x20>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0e:	4a05      	ldr	r2, [pc, #20]	@ (8002a24 <SystemInit+0x20>)
 8002a10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a2c:	480d      	ldr	r0, [pc, #52]	@ (8002a64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a2e:	490e      	ldr	r1, [pc, #56]	@ (8002a68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a30:	4a0e      	ldr	r2, [pc, #56]	@ (8002a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a34:	e002      	b.n	8002a3c <LoopCopyDataInit>

08002a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a3a:	3304      	adds	r3, #4

08002a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a40:	d3f9      	bcc.n	8002a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a42:	4a0b      	ldr	r2, [pc, #44]	@ (8002a70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a44:	4c0b      	ldr	r4, [pc, #44]	@ (8002a74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a48:	e001      	b.n	8002a4e <LoopFillZerobss>

08002a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a4c:	3204      	adds	r2, #4

08002a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a50:	d3fb      	bcc.n	8002a4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a52:	f7ff ffd7 	bl	8002a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a56:	f00c fde1 	bl	800f61c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a5a:	f7fd fe33 	bl	80006c4 <main>
  bx  lr    
 8002a5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a68:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8002a6c:	0801103c 	.word	0x0801103c
  ldr r2, =_sbss
 8002a70:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8002a74:	20004810 	.word	0x20004810

08002a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a78:	e7fe      	b.n	8002a78 <ADC_IRQHandler>
	...

08002a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a80:	4b0e      	ldr	r3, [pc, #56]	@ (8002abc <HAL_Init+0x40>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0d      	ldr	r2, [pc, #52]	@ (8002abc <HAL_Init+0x40>)
 8002a86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <HAL_Init+0x40>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0a      	ldr	r2, [pc, #40]	@ (8002abc <HAL_Init+0x40>)
 8002a92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a98:	4b08      	ldr	r3, [pc, #32]	@ (8002abc <HAL_Init+0x40>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a07      	ldr	r2, [pc, #28]	@ (8002abc <HAL_Init+0x40>)
 8002a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aa4:	2003      	movs	r0, #3
 8002aa6:	f000 f973 	bl	8002d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aaa:	200f      	movs	r0, #15
 8002aac:	f000 f808 	bl	8002ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ab0:	f7ff fd42 	bl	8002538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023c00 	.word	0x40023c00

08002ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ac8:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <HAL_InitTick+0x54>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b12      	ldr	r3, [pc, #72]	@ (8002b18 <HAL_InitTick+0x58>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f999 	bl	8002e16 <HAL_SYSTICK_Config>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e00e      	b.n	8002b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b0f      	cmp	r3, #15
 8002af2:	d80a      	bhi.n	8002b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002af4:	2200      	movs	r2, #0
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	f04f 30ff 	mov.w	r0, #4294967295
 8002afc:	f000 f953 	bl	8002da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b00:	4a06      	ldr	r2, [pc, #24]	@ (8002b1c <HAL_InitTick+0x5c>)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	e000      	b.n	8002b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	200000b0 	.word	0x200000b0
 8002b18:	200000b8 	.word	0x200000b8
 8002b1c:	200000b4 	.word	0x200000b4

08002b20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b24:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <HAL_IncTick+0x20>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_IncTick+0x24>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4413      	add	r3, r2
 8002b30:	4a04      	ldr	r2, [pc, #16]	@ (8002b44 <HAL_IncTick+0x24>)
 8002b32:	6013      	str	r3, [r2, #0]
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	200000b8 	.word	0x200000b8
 8002b44:	200046c0 	.word	0x200046c0

08002b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b4c:	4b03      	ldr	r3, [pc, #12]	@ (8002b5c <HAL_GetTick+0x14>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	200046c0 	.word	0x200046c0

08002b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b68:	f7ff ffee 	bl	8002b48 <HAL_GetTick>
 8002b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d005      	beq.n	8002b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba4 <HAL_Delay+0x44>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4413      	add	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b86:	bf00      	nop
 8002b88:	f7ff ffde 	bl	8002b48 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d8f7      	bhi.n	8002b88 <HAL_Delay+0x28>
  {
  }
}
 8002b98:	bf00      	nop
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200000b8 	.word	0x200000b8

08002ba8 <__NVIC_SetPriorityGrouping>:
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002bec <__NVIC_SetPriorityGrouping+0x44>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bda:	4a04      	ldr	r2, [pc, #16]	@ (8002bec <__NVIC_SetPriorityGrouping+0x44>)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	60d3      	str	r3, [r2, #12]
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <__NVIC_GetPriorityGrouping>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf4:	4b04      	ldr	r3, [pc, #16]	@ (8002c08 <__NVIC_GetPriorityGrouping+0x18>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	0a1b      	lsrs	r3, r3, #8
 8002bfa:	f003 0307 	and.w	r3, r3, #7
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <__NVIC_EnableIRQ>:
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	db0b      	blt.n	8002c36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	f003 021f 	and.w	r2, r3, #31
 8002c24:	4907      	ldr	r1, [pc, #28]	@ (8002c44 <__NVIC_EnableIRQ+0x38>)
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000e100 	.word	0xe000e100

08002c48 <__NVIC_DisableIRQ>:
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	db12      	blt.n	8002c80 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	f003 021f 	and.w	r2, r3, #31
 8002c60:	490a      	ldr	r1, [pc, #40]	@ (8002c8c <__NVIC_DisableIRQ+0x44>)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	2001      	movs	r0, #1
 8002c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c6e:	3320      	adds	r3, #32
 8002c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c74:	f3bf 8f4f 	dsb	sy
}
 8002c78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c7a:	f3bf 8f6f 	isb	sy
}
 8002c7e:	bf00      	nop
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000e100 	.word	0xe000e100

08002c90 <__NVIC_SetPriority>:
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	6039      	str	r1, [r7, #0]
 8002c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	db0a      	blt.n	8002cba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	490c      	ldr	r1, [pc, #48]	@ (8002cdc <__NVIC_SetPriority+0x4c>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	0112      	lsls	r2, r2, #4
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002cb8:	e00a      	b.n	8002cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4908      	ldr	r1, [pc, #32]	@ (8002ce0 <__NVIC_SetPriority+0x50>)
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	3b04      	subs	r3, #4
 8002cc8:	0112      	lsls	r2, r2, #4
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	440b      	add	r3, r1
 8002cce:	761a      	strb	r2, [r3, #24]
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000e100 	.word	0xe000e100
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <NVIC_EncodePriority>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	@ 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f1c3 0307 	rsb	r3, r3, #7
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	bf28      	it	cs
 8002d02:	2304      	movcs	r3, #4
 8002d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d902      	bls.n	8002d14 <NVIC_EncodePriority+0x30>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3b03      	subs	r3, #3
 8002d12:	e000      	b.n	8002d16 <NVIC_EncodePriority+0x32>
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43da      	mvns	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	401a      	ands	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	43d9      	mvns	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	4313      	orrs	r3, r2
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3724      	adds	r7, #36	@ 0x24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <SysTick_Config>:
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d5c:	d301      	bcc.n	8002d62 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e00f      	b.n	8002d82 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d62:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <SysTick_Config+0x40>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d6a:	210f      	movs	r1, #15
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	f7ff ff8e 	bl	8002c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d74:	4b05      	ldr	r3, [pc, #20]	@ (8002d8c <SysTick_Config+0x40>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d7a:	4b04      	ldr	r3, [pc, #16]	@ (8002d8c <SysTick_Config+0x40>)
 8002d7c:	2207      	movs	r2, #7
 8002d7e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	e000e010 	.word	0xe000e010

08002d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ff05 	bl	8002ba8 <__NVIC_SetPriorityGrouping>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b086      	sub	sp, #24
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002db8:	f7ff ff1a 	bl	8002bf0 <__NVIC_GetPriorityGrouping>
 8002dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	6978      	ldr	r0, [r7, #20]
 8002dc4:	f7ff ff8e 	bl	8002ce4 <NVIC_EncodePriority>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff5d 	bl	8002c90 <__NVIC_SetPriority>
}
 8002dd6:	bf00      	nop
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff0d 	bl	8002c0c <__NVIC_EnableIRQ>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	4603      	mov	r3, r0
 8002e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff1d 	bl	8002c48 <__NVIC_DisableIRQ>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff94 	bl	8002d4c <SysTick_Config>
 8002e24:	4603      	mov	r3, r0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7ff fe84 	bl	8002b48 <HAL_GetTick>
 8002e40:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d008      	beq.n	8002e60 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2280      	movs	r2, #128	@ 0x80
 8002e52:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e052      	b.n	8002f06 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0216 	bic.w	r2, r2, #22
 8002e6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e7e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d103      	bne.n	8002e90 <HAL_DMA_Abort+0x62>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d007      	beq.n	8002ea0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0208 	bic.w	r2, r2, #8
 8002e9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eb0:	e013      	b.n	8002eda <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eb2:	f7ff fe49 	bl	8002b48 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	d90c      	bls.n	8002eda <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2203      	movs	r2, #3
 8002eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e015      	b.n	8002f06 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e4      	bne.n	8002eb2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eec:	223f      	movs	r2, #63	@ 0x3f
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d004      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2280      	movs	r2, #128	@ 0x80
 8002f26:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e00c      	b.n	8002f46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2205      	movs	r2, #5
 8002f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0201 	bic.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
	...

08002f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	@ 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
 8002f6e:	e159      	b.n	8003224 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f70:	2201      	movs	r2, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	4013      	ands	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	f040 8148 	bne.w	800321e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d005      	beq.n	8002fa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d130      	bne.n	8003008 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fdc:	2201      	movs	r2, #1
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 0201 	and.w	r2, r3, #1
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b03      	cmp	r3, #3
 8003012:	d017      	beq.n	8003044 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	2203      	movs	r2, #3
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	4013      	ands	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d123      	bne.n	8003098 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	08da      	lsrs	r2, r3, #3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3208      	adds	r2, #8
 8003058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	220f      	movs	r2, #15
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	08da      	lsrs	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3208      	adds	r2, #8
 8003092:	69b9      	ldr	r1, [r7, #24]
 8003094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	2203      	movs	r2, #3
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0203 	and.w	r2, r3, #3
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80a2 	beq.w	800321e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	4b57      	ldr	r3, [pc, #348]	@ (800323c <HAL_GPIO_Init+0x2e8>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e2:	4a56      	ldr	r2, [pc, #344]	@ (800323c <HAL_GPIO_Init+0x2e8>)
 80030e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ea:	4b54      	ldr	r3, [pc, #336]	@ (800323c <HAL_GPIO_Init+0x2e8>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f6:	4a52      	ldr	r2, [pc, #328]	@ (8003240 <HAL_GPIO_Init+0x2ec>)
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	089b      	lsrs	r3, r3, #2
 80030fc:	3302      	adds	r3, #2
 80030fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	220f      	movs	r2, #15
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a49      	ldr	r2, [pc, #292]	@ (8003244 <HAL_GPIO_Init+0x2f0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d019      	beq.n	8003156 <HAL_GPIO_Init+0x202>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a48      	ldr	r2, [pc, #288]	@ (8003248 <HAL_GPIO_Init+0x2f4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <HAL_GPIO_Init+0x1fe>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a47      	ldr	r2, [pc, #284]	@ (800324c <HAL_GPIO_Init+0x2f8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00d      	beq.n	800314e <HAL_GPIO_Init+0x1fa>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a46      	ldr	r2, [pc, #280]	@ (8003250 <HAL_GPIO_Init+0x2fc>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d007      	beq.n	800314a <HAL_GPIO_Init+0x1f6>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a45      	ldr	r2, [pc, #276]	@ (8003254 <HAL_GPIO_Init+0x300>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d101      	bne.n	8003146 <HAL_GPIO_Init+0x1f2>
 8003142:	2304      	movs	r3, #4
 8003144:	e008      	b.n	8003158 <HAL_GPIO_Init+0x204>
 8003146:	2307      	movs	r3, #7
 8003148:	e006      	b.n	8003158 <HAL_GPIO_Init+0x204>
 800314a:	2303      	movs	r3, #3
 800314c:	e004      	b.n	8003158 <HAL_GPIO_Init+0x204>
 800314e:	2302      	movs	r3, #2
 8003150:	e002      	b.n	8003158 <HAL_GPIO_Init+0x204>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_GPIO_Init+0x204>
 8003156:	2300      	movs	r3, #0
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	f002 0203 	and.w	r2, r2, #3
 800315e:	0092      	lsls	r2, r2, #2
 8003160:	4093      	lsls	r3, r2
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003168:	4935      	ldr	r1, [pc, #212]	@ (8003240 <HAL_GPIO_Init+0x2ec>)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	089b      	lsrs	r3, r3, #2
 800316e:	3302      	adds	r3, #2
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003176:	4b38      	ldr	r3, [pc, #224]	@ (8003258 <HAL_GPIO_Init+0x304>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800319a:	4a2f      	ldr	r2, [pc, #188]	@ (8003258 <HAL_GPIO_Init+0x304>)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031a0:	4b2d      	ldr	r3, [pc, #180]	@ (8003258 <HAL_GPIO_Init+0x304>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031c4:	4a24      	ldr	r2, [pc, #144]	@ (8003258 <HAL_GPIO_Init+0x304>)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ca:	4b23      	ldr	r3, [pc, #140]	@ (8003258 <HAL_GPIO_Init+0x304>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003258 <HAL_GPIO_Init+0x304>)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031f4:	4b18      	ldr	r3, [pc, #96]	@ (8003258 <HAL_GPIO_Init+0x304>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003218:	4a0f      	ldr	r2, [pc, #60]	@ (8003258 <HAL_GPIO_Init+0x304>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3301      	adds	r3, #1
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b0f      	cmp	r3, #15
 8003228:	f67f aea2 	bls.w	8002f70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	3724      	adds	r7, #36	@ 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800
 8003240:	40013800 	.word	0x40013800
 8003244:	40020000 	.word	0x40020000
 8003248:	40020400 	.word	0x40020400
 800324c:	40020800 	.word	0x40020800
 8003250:	40020c00 	.word	0x40020c00
 8003254:	40021000 	.word	0x40021000
 8003258:	40013c00 	.word	0x40013c00

0800325c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800326e:	2300      	movs	r3, #0
 8003270:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	e0bb      	b.n	80033f0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003278:	2201      	movs	r2, #1
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4013      	ands	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	429a      	cmp	r2, r3
 8003290:	f040 80ab 	bne.w	80033ea <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003294:	4a5c      	ldr	r2, [pc, #368]	@ (8003408 <HAL_GPIO_DeInit+0x1ac>)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	089b      	lsrs	r3, r3, #2
 800329a:	3302      	adds	r3, #2
 800329c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	220f      	movs	r2, #15
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	4013      	ands	r3, r2
 80032b4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a54      	ldr	r2, [pc, #336]	@ (800340c <HAL_GPIO_DeInit+0x1b0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d019      	beq.n	80032f2 <HAL_GPIO_DeInit+0x96>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a53      	ldr	r2, [pc, #332]	@ (8003410 <HAL_GPIO_DeInit+0x1b4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <HAL_GPIO_DeInit+0x92>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a52      	ldr	r2, [pc, #328]	@ (8003414 <HAL_GPIO_DeInit+0x1b8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00d      	beq.n	80032ea <HAL_GPIO_DeInit+0x8e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a51      	ldr	r2, [pc, #324]	@ (8003418 <HAL_GPIO_DeInit+0x1bc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <HAL_GPIO_DeInit+0x8a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a50      	ldr	r2, [pc, #320]	@ (800341c <HAL_GPIO_DeInit+0x1c0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d101      	bne.n	80032e2 <HAL_GPIO_DeInit+0x86>
 80032de:	2304      	movs	r3, #4
 80032e0:	e008      	b.n	80032f4 <HAL_GPIO_DeInit+0x98>
 80032e2:	2307      	movs	r3, #7
 80032e4:	e006      	b.n	80032f4 <HAL_GPIO_DeInit+0x98>
 80032e6:	2303      	movs	r3, #3
 80032e8:	e004      	b.n	80032f4 <HAL_GPIO_DeInit+0x98>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e002      	b.n	80032f4 <HAL_GPIO_DeInit+0x98>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_GPIO_DeInit+0x98>
 80032f2:	2300      	movs	r3, #0
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	f002 0203 	and.w	r2, r2, #3
 80032fa:	0092      	lsls	r2, r2, #2
 80032fc:	4093      	lsls	r3, r2
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	429a      	cmp	r2, r3
 8003302:	d132      	bne.n	800336a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003304:	4b46      	ldr	r3, [pc, #280]	@ (8003420 <HAL_GPIO_DeInit+0x1c4>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	43db      	mvns	r3, r3
 800330c:	4944      	ldr	r1, [pc, #272]	@ (8003420 <HAL_GPIO_DeInit+0x1c4>)
 800330e:	4013      	ands	r3, r2
 8003310:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003312:	4b43      	ldr	r3, [pc, #268]	@ (8003420 <HAL_GPIO_DeInit+0x1c4>)
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	43db      	mvns	r3, r3
 800331a:	4941      	ldr	r1, [pc, #260]	@ (8003420 <HAL_GPIO_DeInit+0x1c4>)
 800331c:	4013      	ands	r3, r2
 800331e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003320:	4b3f      	ldr	r3, [pc, #252]	@ (8003420 <HAL_GPIO_DeInit+0x1c4>)
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	43db      	mvns	r3, r3
 8003328:	493d      	ldr	r1, [pc, #244]	@ (8003420 <HAL_GPIO_DeInit+0x1c4>)
 800332a:	4013      	ands	r3, r2
 800332c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800332e:	4b3c      	ldr	r3, [pc, #240]	@ (8003420 <HAL_GPIO_DeInit+0x1c4>)
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	43db      	mvns	r3, r3
 8003336:	493a      	ldr	r1, [pc, #232]	@ (8003420 <HAL_GPIO_DeInit+0x1c4>)
 8003338:	4013      	ands	r3, r2
 800333a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	220f      	movs	r2, #15
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800334c:	4a2e      	ldr	r2, [pc, #184]	@ (8003408 <HAL_GPIO_DeInit+0x1ac>)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	089b      	lsrs	r3, r3, #2
 8003352:	3302      	adds	r3, #2
 8003354:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	43da      	mvns	r2, r3
 800335c:	482a      	ldr	r0, [pc, #168]	@ (8003408 <HAL_GPIO_DeInit+0x1ac>)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	089b      	lsrs	r3, r3, #2
 8003362:	400a      	ands	r2, r1
 8003364:	3302      	adds	r3, #2
 8003366:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	2103      	movs	r1, #3
 8003374:	fa01 f303 	lsl.w	r3, r1, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	401a      	ands	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	08da      	lsrs	r2, r3, #3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3208      	adds	r2, #8
 8003388:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	220f      	movs	r2, #15
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	08d2      	lsrs	r2, r2, #3
 80033a0:	4019      	ands	r1, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3208      	adds	r2, #8
 80033a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	2103      	movs	r1, #3
 80033b4:	fa01 f303 	lsl.w	r3, r1, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	401a      	ands	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	2101      	movs	r1, #1
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	fa01 f303 	lsl.w	r3, r1, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	401a      	ands	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	2103      	movs	r1, #3
 80033de:	fa01 f303 	lsl.w	r3, r1, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	401a      	ands	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	3301      	adds	r3, #1
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2b0f      	cmp	r3, #15
 80033f4:	f67f af40 	bls.w	8003278 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	371c      	adds	r7, #28
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40013800 	.word	0x40013800
 800340c:	40020000 	.word	0x40020000
 8003410:	40020400 	.word	0x40020400
 8003414:	40020800 	.word	0x40020800
 8003418:	40020c00 	.word	0x40020c00
 800341c:	40021000 	.word	0x40021000
 8003420:	40013c00 	.word	0x40013c00

08003424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	807b      	strh	r3, [r7, #2]
 8003430:	4613      	mov	r3, r2
 8003432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003434:	787b      	ldrb	r3, [r7, #1]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800343a:	887a      	ldrh	r2, [r7, #2]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003440:	e003      	b.n	800344a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003442:	887b      	ldrh	r3, [r7, #2]
 8003444:	041a      	lsls	r2, r3, #16
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	619a      	str	r2, [r3, #24]
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003456:	b480      	push	{r7}
 8003458:	b085      	sub	sp, #20
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	460b      	mov	r3, r1
 8003460:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003468:	887a      	ldrh	r2, [r7, #2]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4013      	ands	r3, r2
 800346e:	041a      	lsls	r2, r3, #16
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	43d9      	mvns	r1, r3
 8003474:	887b      	ldrh	r3, [r7, #2]
 8003476:	400b      	ands	r3, r1
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	619a      	str	r2, [r3, #24]
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
	...

0800348c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e267      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d075      	beq.n	8003596 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034aa:	4b88      	ldr	r3, [pc, #544]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d00c      	beq.n	80034d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034b6:	4b85      	ldr	r3, [pc, #532]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d112      	bne.n	80034e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034c2:	4b82      	ldr	r3, [pc, #520]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034ce:	d10b      	bne.n	80034e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d0:	4b7e      	ldr	r3, [pc, #504]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d05b      	beq.n	8003594 <HAL_RCC_OscConfig+0x108>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d157      	bne.n	8003594 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e242      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034f0:	d106      	bne.n	8003500 <HAL_RCC_OscConfig+0x74>
 80034f2:	4b76      	ldr	r3, [pc, #472]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a75      	ldr	r2, [pc, #468]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e01d      	b.n	800353c <HAL_RCC_OscConfig+0xb0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003508:	d10c      	bne.n	8003524 <HAL_RCC_OscConfig+0x98>
 800350a:	4b70      	ldr	r3, [pc, #448]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a6f      	ldr	r2, [pc, #444]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 8003510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	4b6d      	ldr	r3, [pc, #436]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a6c      	ldr	r2, [pc, #432]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e00b      	b.n	800353c <HAL_RCC_OscConfig+0xb0>
 8003524:	4b69      	ldr	r3, [pc, #420]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a68      	ldr	r2, [pc, #416]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 800352a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	4b66      	ldr	r3, [pc, #408]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a65      	ldr	r2, [pc, #404]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 8003536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800353a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d013      	beq.n	800356c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7ff fb00 	bl	8002b48 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800354c:	f7ff fafc 	bl	8002b48 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	@ 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e207      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	4b5b      	ldr	r3, [pc, #364]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0xc0>
 800356a:	e014      	b.n	8003596 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7ff faec 	bl	8002b48 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003574:	f7ff fae8 	bl	8002b48 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	@ 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e1f3      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003586:	4b51      	ldr	r3, [pc, #324]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0xe8>
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d063      	beq.n	800366a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035a2:	4b4a      	ldr	r3, [pc, #296]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ae:	4b47      	ldr	r3, [pc, #284]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d11c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ba:	4b44      	ldr	r3, [pc, #272]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d116      	bne.n	80035f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c6:	4b41      	ldr	r3, [pc, #260]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <HAL_RCC_OscConfig+0x152>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d001      	beq.n	80035de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e1c7      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035de:	4b3b      	ldr	r3, [pc, #236]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4937      	ldr	r1, [pc, #220]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f2:	e03a      	b.n	800366a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d020      	beq.n	800363e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035fc:	4b34      	ldr	r3, [pc, #208]	@ (80036d0 <HAL_RCC_OscConfig+0x244>)
 80035fe:	2201      	movs	r2, #1
 8003600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003602:	f7ff faa1 	bl	8002b48 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800360a:	f7ff fa9d 	bl	8002b48 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e1a8      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361c:	4b2b      	ldr	r3, [pc, #172]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f0      	beq.n	800360a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003628:	4b28      	ldr	r3, [pc, #160]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4925      	ldr	r1, [pc, #148]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 8003638:	4313      	orrs	r3, r2
 800363a:	600b      	str	r3, [r1, #0]
 800363c:	e015      	b.n	800366a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800363e:	4b24      	ldr	r3, [pc, #144]	@ (80036d0 <HAL_RCC_OscConfig+0x244>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7ff fa80 	bl	8002b48 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800364c:	f7ff fa7c 	bl	8002b48 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e187      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365e:	4b1b      	ldr	r3, [pc, #108]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d036      	beq.n	80036e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d016      	beq.n	80036ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367e:	4b15      	ldr	r3, [pc, #84]	@ (80036d4 <HAL_RCC_OscConfig+0x248>)
 8003680:	2201      	movs	r2, #1
 8003682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003684:	f7ff fa60 	bl	8002b48 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800368c:	f7ff fa5c 	bl	8002b48 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e167      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369e:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <HAL_RCC_OscConfig+0x240>)
 80036a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0x200>
 80036aa:	e01b      	b.n	80036e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ac:	4b09      	ldr	r3, [pc, #36]	@ (80036d4 <HAL_RCC_OscConfig+0x248>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b2:	f7ff fa49 	bl	8002b48 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b8:	e00e      	b.n	80036d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ba:	f7ff fa45 	bl	8002b48 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d907      	bls.n	80036d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e150      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
 80036cc:	40023800 	.word	0x40023800
 80036d0:	42470000 	.word	0x42470000
 80036d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d8:	4b88      	ldr	r3, [pc, #544]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 80036da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ea      	bne.n	80036ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 8097 	beq.w	8003820 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036f2:	2300      	movs	r3, #0
 80036f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f6:	4b81      	ldr	r3, [pc, #516]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10f      	bne.n	8003722 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	4b7d      	ldr	r3, [pc, #500]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370a:	4a7c      	ldr	r2, [pc, #496]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 800370c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003710:	6413      	str	r3, [r2, #64]	@ 0x40
 8003712:	4b7a      	ldr	r3, [pc, #488]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800371e:	2301      	movs	r3, #1
 8003720:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003722:	4b77      	ldr	r3, [pc, #476]	@ (8003900 <HAL_RCC_OscConfig+0x474>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d118      	bne.n	8003760 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800372e:	4b74      	ldr	r3, [pc, #464]	@ (8003900 <HAL_RCC_OscConfig+0x474>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a73      	ldr	r2, [pc, #460]	@ (8003900 <HAL_RCC_OscConfig+0x474>)
 8003734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800373a:	f7ff fa05 	bl	8002b48 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003742:	f7ff fa01 	bl	8002b48 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e10c      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003754:	4b6a      	ldr	r3, [pc, #424]	@ (8003900 <HAL_RCC_OscConfig+0x474>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d106      	bne.n	8003776 <HAL_RCC_OscConfig+0x2ea>
 8003768:	4b64      	ldr	r3, [pc, #400]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 800376a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376c:	4a63      	ldr	r2, [pc, #396]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	6713      	str	r3, [r2, #112]	@ 0x70
 8003774:	e01c      	b.n	80037b0 <HAL_RCC_OscConfig+0x324>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2b05      	cmp	r3, #5
 800377c:	d10c      	bne.n	8003798 <HAL_RCC_OscConfig+0x30c>
 800377e:	4b5f      	ldr	r3, [pc, #380]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 8003780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003782:	4a5e      	ldr	r2, [pc, #376]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 8003784:	f043 0304 	orr.w	r3, r3, #4
 8003788:	6713      	str	r3, [r2, #112]	@ 0x70
 800378a:	4b5c      	ldr	r3, [pc, #368]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378e:	4a5b      	ldr	r2, [pc, #364]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	6713      	str	r3, [r2, #112]	@ 0x70
 8003796:	e00b      	b.n	80037b0 <HAL_RCC_OscConfig+0x324>
 8003798:	4b58      	ldr	r3, [pc, #352]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 800379a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379c:	4a57      	ldr	r2, [pc, #348]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 800379e:	f023 0301 	bic.w	r3, r3, #1
 80037a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a4:	4b55      	ldr	r3, [pc, #340]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a8:	4a54      	ldr	r2, [pc, #336]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 80037aa:	f023 0304 	bic.w	r3, r3, #4
 80037ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d015      	beq.n	80037e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b8:	f7ff f9c6 	bl	8002b48 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037be:	e00a      	b.n	80037d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c0:	f7ff f9c2 	bl	8002b48 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e0cb      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d6:	4b49      	ldr	r3, [pc, #292]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0ee      	beq.n	80037c0 <HAL_RCC_OscConfig+0x334>
 80037e2:	e014      	b.n	800380e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e4:	f7ff f9b0 	bl	8002b48 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ec:	f7ff f9ac 	bl	8002b48 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e0b5      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003802:	4b3e      	ldr	r3, [pc, #248]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1ee      	bne.n	80037ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800380e:	7dfb      	ldrb	r3, [r7, #23]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d105      	bne.n	8003820 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003814:	4b39      	ldr	r3, [pc, #228]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	4a38      	ldr	r2, [pc, #224]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 800381a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800381e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 80a1 	beq.w	800396c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800382a:	4b34      	ldr	r3, [pc, #208]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	2b08      	cmp	r3, #8
 8003834:	d05c      	beq.n	80038f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d141      	bne.n	80038c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383e:	4b31      	ldr	r3, [pc, #196]	@ (8003904 <HAL_RCC_OscConfig+0x478>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7ff f980 	bl	8002b48 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800384c:	f7ff f97c 	bl	8002b48 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e087      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385e:	4b27      	ldr	r3, [pc, #156]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69da      	ldr	r2, [r3, #28]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003878:	019b      	lsls	r3, r3, #6
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003880:	085b      	lsrs	r3, r3, #1
 8003882:	3b01      	subs	r3, #1
 8003884:	041b      	lsls	r3, r3, #16
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	061b      	lsls	r3, r3, #24
 800388e:	491b      	ldr	r1, [pc, #108]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003894:	4b1b      	ldr	r3, [pc, #108]	@ (8003904 <HAL_RCC_OscConfig+0x478>)
 8003896:	2201      	movs	r2, #1
 8003898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389a:	f7ff f955 	bl	8002b48 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a2:	f7ff f951 	bl	8002b48 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e05c      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b4:	4b11      	ldr	r3, [pc, #68]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0f0      	beq.n	80038a2 <HAL_RCC_OscConfig+0x416>
 80038c0:	e054      	b.n	800396c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c2:	4b10      	ldr	r3, [pc, #64]	@ (8003904 <HAL_RCC_OscConfig+0x478>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7ff f93e 	bl	8002b48 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d0:	f7ff f93a 	bl	8002b48 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e045      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e2:	4b06      	ldr	r3, [pc, #24]	@ (80038fc <HAL_RCC_OscConfig+0x470>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x444>
 80038ee:	e03d      	b.n	800396c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d107      	bne.n	8003908 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e038      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
 80038fc:	40023800 	.word	0x40023800
 8003900:	40007000 	.word	0x40007000
 8003904:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003908:	4b1b      	ldr	r3, [pc, #108]	@ (8003978 <HAL_RCC_OscConfig+0x4ec>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d028      	beq.n	8003968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003920:	429a      	cmp	r2, r3
 8003922:	d121      	bne.n	8003968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d11a      	bne.n	8003968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003938:	4013      	ands	r3, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800393e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003940:	4293      	cmp	r3, r2
 8003942:	d111      	bne.n	8003968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394e:	085b      	lsrs	r3, r3, #1
 8003950:	3b01      	subs	r3, #1
 8003952:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003954:	429a      	cmp	r2, r3
 8003956:	d107      	bne.n	8003968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003962:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800

0800397c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0cc      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003990:	4b68      	ldr	r3, [pc, #416]	@ (8003b34 <HAL_RCC_ClockConfig+0x1b8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d90c      	bls.n	80039b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399e:	4b65      	ldr	r3, [pc, #404]	@ (8003b34 <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b63      	ldr	r3, [pc, #396]	@ (8003b34 <HAL_RCC_ClockConfig+0x1b8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0b8      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d020      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039d0:	4b59      	ldr	r3, [pc, #356]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	4a58      	ldr	r2, [pc, #352]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039e8:	4b53      	ldr	r3, [pc, #332]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4a52      	ldr	r2, [pc, #328]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f4:	4b50      	ldr	r3, [pc, #320]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	494d      	ldr	r1, [pc, #308]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d044      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d107      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1a:	4b47      	ldr	r3, [pc, #284]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d119      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e07f      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d003      	beq.n	8003a3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d107      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e06f      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e067      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a5a:	4b37      	ldr	r3, [pc, #220]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f023 0203 	bic.w	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4934      	ldr	r1, [pc, #208]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a6c:	f7ff f86c 	bl	8002b48 <HAL_GetTick>
 8003a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a74:	f7ff f868 	bl	8002b48 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e04f      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 020c 	and.w	r2, r3, #12
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d1eb      	bne.n	8003a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b25      	ldr	r3, [pc, #148]	@ (8003b34 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d20c      	bcs.n	8003ac4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b22      	ldr	r3, [pc, #136]	@ (8003b34 <HAL_RCC_ClockConfig+0x1b8>)
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab2:	4b20      	ldr	r3, [pc, #128]	@ (8003b34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e032      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad0:	4b19      	ldr	r3, [pc, #100]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	4916      	ldr	r1, [pc, #88]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aee:	4b12      	ldr	r3, [pc, #72]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	490e      	ldr	r1, [pc, #56]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b02:	f000 f821 	bl	8003b48 <HAL_RCC_GetSysClockFreq>
 8003b06:	4602      	mov	r2, r0
 8003b08:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	091b      	lsrs	r3, r3, #4
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	490a      	ldr	r1, [pc, #40]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 8003b14:	5ccb      	ldrb	r3, [r1, r3]
 8003b16:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1a:	4a09      	ldr	r2, [pc, #36]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b1e:	4b09      	ldr	r3, [pc, #36]	@ (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe ffcc 	bl	8002ac0 <HAL_InitTick>

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40023c00 	.word	0x40023c00
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	08010e30 	.word	0x08010e30
 8003b40:	200000b0 	.word	0x200000b0
 8003b44:	200000b4 	.word	0x200000b4

08003b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b4c:	b090      	sub	sp, #64	@ 0x40
 8003b4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b54:	2300      	movs	r3, #0
 8003b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b58:	2300      	movs	r3, #0
 8003b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b60:	4b59      	ldr	r3, [pc, #356]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 030c 	and.w	r3, r3, #12
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d00d      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0x40>
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	f200 80a1 	bhi.w	8003cb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <HAL_RCC_GetSysClockFreq+0x34>
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d003      	beq.n	8003b82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b7a:	e09b      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b7c:	4b53      	ldr	r3, [pc, #332]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x184>)
 8003b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003b80:	e09b      	b.n	8003cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b82:	4b53      	ldr	r3, [pc, #332]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b86:	e098      	b.n	8003cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b88:	4b4f      	ldr	r3, [pc, #316]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b90:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b92:	4b4d      	ldr	r3, [pc, #308]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d028      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	099b      	lsrs	r3, r3, #6
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	623b      	str	r3, [r7, #32]
 8003ba8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	4b47      	ldr	r3, [pc, #284]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bb4:	fb03 f201 	mul.w	r2, r3, r1
 8003bb8:	2300      	movs	r3, #0
 8003bba:	fb00 f303 	mul.w	r3, r0, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	4a43      	ldr	r2, [pc, #268]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bc2:	fba0 1202 	umull	r1, r2, r0, r2
 8003bc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bc8:	460a      	mov	r2, r1
 8003bca:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003bcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bce:	4413      	add	r3, r2
 8003bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	61bb      	str	r3, [r7, #24]
 8003bd8:	61fa      	str	r2, [r7, #28]
 8003bda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003be2:	f7fc fb65 	bl	80002b0 <__aeabi_uldivmod>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4613      	mov	r3, r2
 8003bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bee:	e053      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf0:	4b35      	ldr	r3, [pc, #212]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	099b      	lsrs	r3, r3, #6
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	617a      	str	r2, [r7, #20]
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c02:	f04f 0b00 	mov.w	fp, #0
 8003c06:	4652      	mov	r2, sl
 8003c08:	465b      	mov	r3, fp
 8003c0a:	f04f 0000 	mov.w	r0, #0
 8003c0e:	f04f 0100 	mov.w	r1, #0
 8003c12:	0159      	lsls	r1, r3, #5
 8003c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c18:	0150      	lsls	r0, r2, #5
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	ebb2 080a 	subs.w	r8, r2, sl
 8003c22:	eb63 090b 	sbc.w	r9, r3, fp
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c3a:	ebb2 0408 	subs.w	r4, r2, r8
 8003c3e:	eb63 0509 	sbc.w	r5, r3, r9
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	00eb      	lsls	r3, r5, #3
 8003c4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c50:	00e2      	lsls	r2, r4, #3
 8003c52:	4614      	mov	r4, r2
 8003c54:	461d      	mov	r5, r3
 8003c56:	eb14 030a 	adds.w	r3, r4, sl
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	eb45 030b 	adc.w	r3, r5, fp
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c6e:	4629      	mov	r1, r5
 8003c70:	028b      	lsls	r3, r1, #10
 8003c72:	4621      	mov	r1, r4
 8003c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c78:	4621      	mov	r1, r4
 8003c7a:	028a      	lsls	r2, r1, #10
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4619      	mov	r1, r3
 8003c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c82:	2200      	movs	r2, #0
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	60fa      	str	r2, [r7, #12]
 8003c88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c8c:	f7fc fb10 	bl	80002b0 <__aeabi_uldivmod>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4613      	mov	r3, r2
 8003c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c98:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	0c1b      	lsrs	r3, r3, #16
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003ca8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cb2:	e002      	b.n	8003cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cb4:	4b05      	ldr	r3, [pc, #20]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x184>)
 8003cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3740      	adds	r7, #64	@ 0x40
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	00f42400 	.word	0x00f42400
 8003cd0:	017d7840 	.word	0x017d7840

08003cd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cd8:	4b03      	ldr	r3, [pc, #12]	@ (8003ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cda:	681b      	ldr	r3, [r3, #0]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	200000b0 	.word	0x200000b0

08003cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cf0:	f7ff fff0 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	0a9b      	lsrs	r3, r3, #10
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4903      	ldr	r1, [pc, #12]	@ (8003d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	08010e40 	.word	0x08010e40

08003d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d18:	f7ff ffdc 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	0b5b      	lsrs	r3, r3, #13
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	4903      	ldr	r1, [pc, #12]	@ (8003d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d2a:	5ccb      	ldrb	r3, [r1, r3]
 8003d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40023800 	.word	0x40023800
 8003d38:	08010e40 	.word	0x08010e40

08003d3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e07b      	b.n	8003e46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d108      	bne.n	8003d68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d5e:	d009      	beq.n	8003d74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	61da      	str	r2, [r3, #28]
 8003d66:	e005      	b.n	8003d74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fe fbfa 	bl	8002588 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003daa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df8:	ea42 0103 	orr.w	r1, r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e00:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	f003 0104 	and.w	r1, r3, #4
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	f003 0210 	and.w	r2, r3, #16
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69da      	ldr	r2, [r3, #28]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b08c      	sub	sp, #48	@ 0x30
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_SPI_TransmitReceive+0x26>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e18a      	b.n	800418a <HAL_SPI_TransmitReceive+0x33c>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e7c:	f7fe fe64 	bl	8002b48 <HAL_GetTick>
 8003e80:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e92:	887b      	ldrh	r3, [r7, #2]
 8003e94:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d00f      	beq.n	8003ebe <HAL_SPI_TransmitReceive+0x70>
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ea4:	d107      	bne.n	8003eb6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d103      	bne.n	8003eb6 <HAL_SPI_TransmitReceive+0x68>
 8003eae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d003      	beq.n	8003ebe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003ebc:	e15b      	b.n	8004176 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_SPI_TransmitReceive+0x82>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_SPI_TransmitReceive+0x82>
 8003eca:	887b      	ldrh	r3, [r7, #2]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d103      	bne.n	8003ed8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003ed6:	e14e      	b.n	8004176 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d003      	beq.n	8003eec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2205      	movs	r2, #5
 8003ee8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	887a      	ldrh	r2, [r7, #2]
 8003efc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	887a      	ldrh	r2, [r7, #2]
 8003f02:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	887a      	ldrh	r2, [r7, #2]
 8003f0e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	887a      	ldrh	r2, [r7, #2]
 8003f14:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2c:	2b40      	cmp	r3, #64	@ 0x40
 8003f2e:	d007      	beq.n	8003f40 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f48:	d178      	bne.n	800403c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_SPI_TransmitReceive+0x10a>
 8003f52:	8b7b      	ldrh	r3, [r7, #26]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d166      	bne.n	8004026 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5c:	881a      	ldrh	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f68:	1c9a      	adds	r2, r3, #2
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f7c:	e053      	b.n	8004026 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d11b      	bne.n	8003fc4 <HAL_SPI_TransmitReceive+0x176>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d016      	beq.n	8003fc4 <HAL_SPI_TransmitReceive+0x176>
 8003f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d113      	bne.n	8003fc4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	881a      	ldrh	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fac:	1c9a      	adds	r2, r3, #2
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d119      	bne.n	8004006 <HAL_SPI_TransmitReceive+0x1b8>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d014      	beq.n	8004006 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe6:	b292      	uxth	r2, r2
 8003fe8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fee:	1c9a      	adds	r2, r3, #2
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004002:	2301      	movs	r3, #1
 8004004:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004006:	f7fe fd9f 	bl	8002b48 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004012:	429a      	cmp	r2, r3
 8004014:	d807      	bhi.n	8004026 <HAL_SPI_TransmitReceive+0x1d8>
 8004016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401c:	d003      	beq.n	8004026 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004024:	e0a7      	b.n	8004176 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1a6      	bne.n	8003f7e <HAL_SPI_TransmitReceive+0x130>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1a1      	bne.n	8003f7e <HAL_SPI_TransmitReceive+0x130>
 800403a:	e07c      	b.n	8004136 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_SPI_TransmitReceive+0x1fc>
 8004044:	8b7b      	ldrh	r3, [r7, #26]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d16b      	bne.n	8004122 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	7812      	ldrb	r2, [r2, #0]
 8004056:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004070:	e057      	b.n	8004122 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b02      	cmp	r3, #2
 800407e:	d11c      	bne.n	80040ba <HAL_SPI_TransmitReceive+0x26c>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d017      	beq.n	80040ba <HAL_SPI_TransmitReceive+0x26c>
 800408a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800408c:	2b01      	cmp	r3, #1
 800408e:	d114      	bne.n	80040ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	330c      	adds	r3, #12
 800409a:	7812      	ldrb	r2, [r2, #0]
 800409c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d119      	bne.n	80040fc <HAL_SPI_TransmitReceive+0x2ae>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d014      	beq.n	80040fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040f8:	2301      	movs	r3, #1
 80040fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040fc:	f7fe fd24 	bl	8002b48 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004108:	429a      	cmp	r2, r3
 800410a:	d803      	bhi.n	8004114 <HAL_SPI_TransmitReceive+0x2c6>
 800410c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d102      	bne.n	800411a <HAL_SPI_TransmitReceive+0x2cc>
 8004114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004116:	2b00      	cmp	r3, #0
 8004118:	d103      	bne.n	8004122 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004120:	e029      	b.n	8004176 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1a2      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x224>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d19d      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004138:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f8b2 	bl	80042a4 <SPI_EndRxTxTransaction>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d006      	beq.n	8004154 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004152:	e010      	b.n	8004176 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10b      	bne.n	8004174 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	e000      	b.n	8004176 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004174:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004186:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800418a:	4618      	mov	r0, r3
 800418c:	3730      	adds	r7, #48	@ 0x30
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	4613      	mov	r3, r2
 80041a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041a4:	f7fe fcd0 	bl	8002b48 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	4413      	add	r3, r2
 80041b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041b4:	f7fe fcc8 	bl	8002b48 <HAL_GetTick>
 80041b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041ba:	4b39      	ldr	r3, [pc, #228]	@ (80042a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	015b      	lsls	r3, r3, #5
 80041c0:	0d1b      	lsrs	r3, r3, #20
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	fb02 f303 	mul.w	r3, r2, r3
 80041c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ca:	e054      	b.n	8004276 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	d050      	beq.n	8004276 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041d4:	f7fe fcb8 	bl	8002b48 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d902      	bls.n	80041ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d13d      	bne.n	8004266 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80041f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004202:	d111      	bne.n	8004228 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800420c:	d004      	beq.n	8004218 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004216:	d107      	bne.n	8004228 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004230:	d10f      	bne.n	8004252 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e017      	b.n	8004296 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	3b01      	subs	r3, #1
 8004274:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4013      	ands	r3, r2
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	429a      	cmp	r2, r3
 8004284:	bf0c      	ite	eq
 8004286:	2301      	moveq	r3, #1
 8004288:	2300      	movne	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	461a      	mov	r2, r3
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	429a      	cmp	r2, r3
 8004292:	d19b      	bne.n	80041cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	200000b0 	.word	0x200000b0

080042a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004320 <SPI_EndRxTxTransaction+0x7c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004324 <SPI_EndRxTxTransaction+0x80>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	0d5b      	lsrs	r3, r3, #21
 80042bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042c0:	fb02 f303 	mul.w	r3, r2, r3
 80042c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042ce:	d112      	bne.n	80042f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2200      	movs	r2, #0
 80042d8:	2180      	movs	r1, #128	@ 0x80
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f7ff ff5a 	bl	8004194 <SPI_WaitFlagStateUntilTimeout>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d016      	beq.n	8004314 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ea:	f043 0220 	orr.w	r2, r3, #32
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e00f      	b.n	8004316 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00a      	beq.n	8004312 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	3b01      	subs	r3, #1
 8004300:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430c:	2b80      	cmp	r3, #128	@ 0x80
 800430e:	d0f2      	beq.n	80042f6 <SPI_EndRxTxTransaction+0x52>
 8004310:	e000      	b.n	8004314 <SPI_EndRxTxTransaction+0x70>
        break;
 8004312:	bf00      	nop
  }

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	200000b0 	.word	0x200000b0
 8004324:	165e9f81 	.word	0x165e9f81

08004328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e041      	b.n	80043be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fe f962 	bl	8002618 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3304      	adds	r3, #4
 8004364:	4619      	mov	r1, r3
 8004366:	4610      	mov	r0, r2
 8004368:	f000 fce4 	bl	8004d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e041      	b.n	800445c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d106      	bne.n	80043f2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f839 	bl	8004464 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2202      	movs	r2, #2
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3304      	adds	r3, #4
 8004402:	4619      	mov	r1, r3
 8004404:	4610      	mov	r0, r2
 8004406:	f000 fc95 	bl	8004d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d109      	bne.n	80044a0 <HAL_TIM_OC_Start_IT+0x28>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b01      	cmp	r3, #1
 8004496:	bf14      	ite	ne
 8004498:	2301      	movne	r3, #1
 800449a:	2300      	moveq	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	e022      	b.n	80044e6 <HAL_TIM_OC_Start_IT+0x6e>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d109      	bne.n	80044ba <HAL_TIM_OC_Start_IT+0x42>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	bf14      	ite	ne
 80044b2:	2301      	movne	r3, #1
 80044b4:	2300      	moveq	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	e015      	b.n	80044e6 <HAL_TIM_OC_Start_IT+0x6e>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d109      	bne.n	80044d4 <HAL_TIM_OC_Start_IT+0x5c>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	bf14      	ite	ne
 80044cc:	2301      	movne	r3, #1
 80044ce:	2300      	moveq	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	e008      	b.n	80044e6 <HAL_TIM_OC_Start_IT+0x6e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	bf14      	ite	ne
 80044e0:	2301      	movne	r3, #1
 80044e2:	2300      	moveq	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e0b3      	b.n	8004656 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <HAL_TIM_OC_Start_IT+0x86>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044fc:	e013      	b.n	8004526 <HAL_TIM_OC_Start_IT+0xae>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b04      	cmp	r3, #4
 8004502:	d104      	bne.n	800450e <HAL_TIM_OC_Start_IT+0x96>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800450c:	e00b      	b.n	8004526 <HAL_TIM_OC_Start_IT+0xae>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b08      	cmp	r3, #8
 8004512:	d104      	bne.n	800451e <HAL_TIM_OC_Start_IT+0xa6>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800451c:	e003      	b.n	8004526 <HAL_TIM_OC_Start_IT+0xae>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2202      	movs	r2, #2
 8004522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b0c      	cmp	r3, #12
 800452a:	d841      	bhi.n	80045b0 <HAL_TIM_OC_Start_IT+0x138>
 800452c:	a201      	add	r2, pc, #4	@ (adr r2, 8004534 <HAL_TIM_OC_Start_IT+0xbc>)
 800452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004532:	bf00      	nop
 8004534:	08004569 	.word	0x08004569
 8004538:	080045b1 	.word	0x080045b1
 800453c:	080045b1 	.word	0x080045b1
 8004540:	080045b1 	.word	0x080045b1
 8004544:	0800457b 	.word	0x0800457b
 8004548:	080045b1 	.word	0x080045b1
 800454c:	080045b1 	.word	0x080045b1
 8004550:	080045b1 	.word	0x080045b1
 8004554:	0800458d 	.word	0x0800458d
 8004558:	080045b1 	.word	0x080045b1
 800455c:	080045b1 	.word	0x080045b1
 8004560:	080045b1 	.word	0x080045b1
 8004564:	0800459f 	.word	0x0800459f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0202 	orr.w	r2, r2, #2
 8004576:	60da      	str	r2, [r3, #12]
      break;
 8004578:	e01d      	b.n	80045b6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0204 	orr.w	r2, r2, #4
 8004588:	60da      	str	r2, [r3, #12]
      break;
 800458a:	e014      	b.n	80045b6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0208 	orr.w	r2, r2, #8
 800459a:	60da      	str	r2, [r3, #12]
      break;
 800459c:	e00b      	b.n	80045b6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f042 0210 	orr.w	r2, r2, #16
 80045ac:	60da      	str	r2, [r3, #12]
      break;
 80045ae:	e002      	b.n	80045b6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
      break;
 80045b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d14b      	bne.n	8004654 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2201      	movs	r2, #1
 80045c2:	6839      	ldr	r1, [r7, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fe5b 	bl	8005280 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a24      	ldr	r2, [pc, #144]	@ (8004660 <HAL_TIM_OC_Start_IT+0x1e8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d107      	bne.n	80045e4 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045e2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004660 <HAL_TIM_OC_Start_IT+0x1e8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d018      	beq.n	8004620 <HAL_TIM_OC_Start_IT+0x1a8>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045f6:	d013      	beq.n	8004620 <HAL_TIM_OC_Start_IT+0x1a8>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a19      	ldr	r2, [pc, #100]	@ (8004664 <HAL_TIM_OC_Start_IT+0x1ec>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00e      	beq.n	8004620 <HAL_TIM_OC_Start_IT+0x1a8>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a18      	ldr	r2, [pc, #96]	@ (8004668 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d009      	beq.n	8004620 <HAL_TIM_OC_Start_IT+0x1a8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a16      	ldr	r2, [pc, #88]	@ (800466c <HAL_TIM_OC_Start_IT+0x1f4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d004      	beq.n	8004620 <HAL_TIM_OC_Start_IT+0x1a8>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a15      	ldr	r2, [pc, #84]	@ (8004670 <HAL_TIM_OC_Start_IT+0x1f8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d111      	bne.n	8004644 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b06      	cmp	r3, #6
 8004630:	d010      	beq.n	8004654 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0201 	orr.w	r2, r2, #1
 8004640:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004642:	e007      	b.n	8004654 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004654:	7bfb      	ldrb	r3, [r7, #15]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40010000 	.word	0x40010000
 8004664:	40000400 	.word	0x40000400
 8004668:	40000800 	.word	0x40000800
 800466c:	40000c00 	.word	0x40000c00
 8004670:	40014000 	.word	0x40014000

08004674 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b0c      	cmp	r3, #12
 8004686:	d841      	bhi.n	800470c <HAL_TIM_OC_Stop_IT+0x98>
 8004688:	a201      	add	r2, pc, #4	@ (adr r2, 8004690 <HAL_TIM_OC_Stop_IT+0x1c>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046c5 	.word	0x080046c5
 8004694:	0800470d 	.word	0x0800470d
 8004698:	0800470d 	.word	0x0800470d
 800469c:	0800470d 	.word	0x0800470d
 80046a0:	080046d7 	.word	0x080046d7
 80046a4:	0800470d 	.word	0x0800470d
 80046a8:	0800470d 	.word	0x0800470d
 80046ac:	0800470d 	.word	0x0800470d
 80046b0:	080046e9 	.word	0x080046e9
 80046b4:	0800470d 	.word	0x0800470d
 80046b8:	0800470d 	.word	0x0800470d
 80046bc:	0800470d 	.word	0x0800470d
 80046c0:	080046fb 	.word	0x080046fb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0202 	bic.w	r2, r2, #2
 80046d2:	60da      	str	r2, [r3, #12]
      break;
 80046d4:	e01d      	b.n	8004712 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0204 	bic.w	r2, r2, #4
 80046e4:	60da      	str	r2, [r3, #12]
      break;
 80046e6:	e014      	b.n	8004712 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0208 	bic.w	r2, r2, #8
 80046f6:	60da      	str	r2, [r3, #12]
      break;
 80046f8:	e00b      	b.n	8004712 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0210 	bic.w	r2, r2, #16
 8004708:	60da      	str	r2, [r3, #12]
      break;
 800470a:	e002      	b.n	8004712 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
      break;
 8004710:	bf00      	nop
  }

  if (status == HAL_OK)
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d157      	bne.n	80047c8 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2200      	movs	r2, #0
 800471e:	6839      	ldr	r1, [r7, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fdad 	bl	8005280 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a2a      	ldr	r2, [pc, #168]	@ (80047d4 <HAL_TIM_OC_Stop_IT+0x160>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d117      	bne.n	8004760 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6a1a      	ldr	r2, [r3, #32]
 8004736:	f241 1311 	movw	r3, #4369	@ 0x1111
 800473a:	4013      	ands	r3, r2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10f      	bne.n	8004760 <HAL_TIM_OC_Stop_IT+0xec>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6a1a      	ldr	r2, [r3, #32]
 8004746:	f240 4344 	movw	r3, #1092	@ 0x444
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d107      	bne.n	8004760 <HAL_TIM_OC_Stop_IT+0xec>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800475e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6a1a      	ldr	r2, [r3, #32]
 8004766:	f241 1311 	movw	r3, #4369	@ 0x1111
 800476a:	4013      	ands	r3, r2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10f      	bne.n	8004790 <HAL_TIM_OC_Stop_IT+0x11c>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6a1a      	ldr	r2, [r3, #32]
 8004776:	f240 4344 	movw	r3, #1092	@ 0x444
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d107      	bne.n	8004790 <HAL_TIM_OC_Stop_IT+0x11c>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <HAL_TIM_OC_Stop_IT+0x12c>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800479e:	e013      	b.n	80047c8 <HAL_TIM_OC_Stop_IT+0x154>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d104      	bne.n	80047b0 <HAL_TIM_OC_Stop_IT+0x13c>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047ae:	e00b      	b.n	80047c8 <HAL_TIM_OC_Stop_IT+0x154>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d104      	bne.n	80047c0 <HAL_TIM_OC_Stop_IT+0x14c>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047be:	e003      	b.n	80047c8 <HAL_TIM_OC_Stop_IT+0x154>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000

080047d8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e041      	b.n	8004870 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d106      	bne.n	8004806 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f839 	bl	8004878 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3304      	adds	r3, #4
 8004816:	4619      	mov	r1, r3
 8004818:	4610      	mov	r0, r2
 800481a:	f000 fa8b 	bl	8004d34 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0208 	bic.w	r2, r2, #8
 800482c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6819      	ldr	r1, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d122      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d11b      	bne.n	80048e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0202 	mvn.w	r2, #2
 80048b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 fa11 	bl	8004cf6 <HAL_TIM_IC_CaptureCallback>
 80048d4:	e005      	b.n	80048e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fd fd28 	bl	800232c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fa14 	bl	8004d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d122      	bne.n	800493c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b04      	cmp	r3, #4
 8004902:	d11b      	bne.n	800493c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0204 	mvn.w	r2, #4
 800490c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2202      	movs	r2, #2
 8004912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f9e7 	bl	8004cf6 <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fd fcfe 	bl	800232c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f9ea 	bl	8004d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b08      	cmp	r3, #8
 8004948:	d122      	bne.n	8004990 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0308 	and.w	r3, r3, #8
 8004954:	2b08      	cmp	r3, #8
 8004956:	d11b      	bne.n	8004990 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0208 	mvn.w	r2, #8
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2204      	movs	r2, #4
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f9bd 	bl	8004cf6 <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fd fcd4 	bl	800232c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f9c0 	bl	8004d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0310 	and.w	r3, r3, #16
 800499a:	2b10      	cmp	r3, #16
 800499c:	d122      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0310 	and.w	r3, r3, #16
 80049a8:	2b10      	cmp	r3, #16
 80049aa:	d11b      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0210 	mvn.w	r2, #16
 80049b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2208      	movs	r2, #8
 80049ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f993 	bl	8004cf6 <HAL_TIM_IC_CaptureCallback>
 80049d0:	e005      	b.n	80049de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fd fcaa 	bl	800232c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f996 	bl	8004d0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d10e      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d107      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0201 	mvn.w	r2, #1
 8004a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f969 	bl	8004ce2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1a:	2b80      	cmp	r3, #128	@ 0x80
 8004a1c:	d10e      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a28:	2b80      	cmp	r3, #128	@ 0x80
 8004a2a:	d107      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fcc0 	bl	80053bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a46:	2b40      	cmp	r3, #64	@ 0x40
 8004a48:	d10e      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a54:	2b40      	cmp	r3, #64	@ 0x40
 8004a56:	d107      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f95b 	bl	8004d1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	d10e      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b20      	cmp	r3, #32
 8004a82:	d107      	bne.n	8004a94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0220 	mvn.w	r2, #32
 8004a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fc8a 	bl	80053a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_TIM_OC_ConfigChannel+0x1e>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e048      	b.n	8004b4c <HAL_TIM_OC_ConfigChannel+0xb0>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b0c      	cmp	r3, #12
 8004ac6:	d839      	bhi.n	8004b3c <HAL_TIM_OC_ConfigChannel+0xa0>
 8004ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004b05 	.word	0x08004b05
 8004ad4:	08004b3d 	.word	0x08004b3d
 8004ad8:	08004b3d 	.word	0x08004b3d
 8004adc:	08004b3d 	.word	0x08004b3d
 8004ae0:	08004b13 	.word	0x08004b13
 8004ae4:	08004b3d 	.word	0x08004b3d
 8004ae8:	08004b3d 	.word	0x08004b3d
 8004aec:	08004b3d 	.word	0x08004b3d
 8004af0:	08004b21 	.word	0x08004b21
 8004af4:	08004b3d 	.word	0x08004b3d
 8004af8:	08004b3d 	.word	0x08004b3d
 8004afc:	08004b3d 	.word	0x08004b3d
 8004b00:	08004b2f 	.word	0x08004b2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 f992 	bl	8004e34 <TIM_OC1_SetConfig>
      break;
 8004b10:	e017      	b.n	8004b42 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 f9f1 	bl	8004f00 <TIM_OC2_SetConfig>
      break;
 8004b1e:	e010      	b.n	8004b42 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fa56 	bl	8004fd8 <TIM_OC3_SetConfig>
      break;
 8004b2c:	e009      	b.n	8004b42 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68b9      	ldr	r1, [r7, #8]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 fab9 	bl	80050ac <TIM_OC4_SetConfig>
      break;
 8004b3a:	e002      	b.n	8004b42 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3718      	adds	r7, #24
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_TIM_ConfigClockSource+0x1c>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e0b4      	b.n	8004cda <HAL_TIM_ConfigClockSource+0x186>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ba8:	d03e      	beq.n	8004c28 <HAL_TIM_ConfigClockSource+0xd4>
 8004baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bae:	f200 8087 	bhi.w	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bb6:	f000 8086 	beq.w	8004cc6 <HAL_TIM_ConfigClockSource+0x172>
 8004bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bbe:	d87f      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc0:	2b70      	cmp	r3, #112	@ 0x70
 8004bc2:	d01a      	beq.n	8004bfa <HAL_TIM_ConfigClockSource+0xa6>
 8004bc4:	2b70      	cmp	r3, #112	@ 0x70
 8004bc6:	d87b      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b60      	cmp	r3, #96	@ 0x60
 8004bca:	d050      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0x11a>
 8004bcc:	2b60      	cmp	r3, #96	@ 0x60
 8004bce:	d877      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd0:	2b50      	cmp	r3, #80	@ 0x50
 8004bd2:	d03c      	beq.n	8004c4e <HAL_TIM_ConfigClockSource+0xfa>
 8004bd4:	2b50      	cmp	r3, #80	@ 0x50
 8004bd6:	d873      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd8:	2b40      	cmp	r3, #64	@ 0x40
 8004bda:	d058      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0x13a>
 8004bdc:	2b40      	cmp	r3, #64	@ 0x40
 8004bde:	d86f      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be0:	2b30      	cmp	r3, #48	@ 0x30
 8004be2:	d064      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x15a>
 8004be4:	2b30      	cmp	r3, #48	@ 0x30
 8004be6:	d86b      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d060      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x15a>
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d867      	bhi.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d05c      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x15a>
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d05a      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x15a>
 8004bf8:	e062      	b.n	8004cc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6818      	ldr	r0, [r3, #0]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6899      	ldr	r1, [r3, #8]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f000 fb19 	bl	8005240 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	609a      	str	r2, [r3, #8]
      break;
 8004c26:	e04f      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6818      	ldr	r0, [r3, #0]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	6899      	ldr	r1, [r3, #8]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f000 fb02 	bl	8005240 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c4a:	609a      	str	r2, [r3, #8]
      break;
 8004c4c:	e03c      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	6859      	ldr	r1, [r3, #4]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f000 fa76 	bl	800514c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2150      	movs	r1, #80	@ 0x50
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 facf 	bl	800520a <TIM_ITRx_SetConfig>
      break;
 8004c6c:	e02c      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6859      	ldr	r1, [r3, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f000 fa95 	bl	80051aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2160      	movs	r1, #96	@ 0x60
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fabf 	bl	800520a <TIM_ITRx_SetConfig>
      break;
 8004c8c:	e01c      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6859      	ldr	r1, [r3, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f000 fa56 	bl	800514c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2140      	movs	r1, #64	@ 0x40
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 faaf 	bl	800520a <TIM_ITRx_SetConfig>
      break;
 8004cac:	e00c      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4610      	mov	r0, r2
 8004cba:	f000 faa6 	bl	800520a <TIM_ITRx_SetConfig>
      break;
 8004cbe:	e003      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc4:	e000      	b.n	8004cc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
	...

08004d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a34      	ldr	r2, [pc, #208]	@ (8004e18 <TIM_Base_SetConfig+0xe4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00f      	beq.n	8004d6c <TIM_Base_SetConfig+0x38>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d52:	d00b      	beq.n	8004d6c <TIM_Base_SetConfig+0x38>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a31      	ldr	r2, [pc, #196]	@ (8004e1c <TIM_Base_SetConfig+0xe8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d007      	beq.n	8004d6c <TIM_Base_SetConfig+0x38>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a30      	ldr	r2, [pc, #192]	@ (8004e20 <TIM_Base_SetConfig+0xec>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_Base_SetConfig+0x38>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a2f      	ldr	r2, [pc, #188]	@ (8004e24 <TIM_Base_SetConfig+0xf0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d108      	bne.n	8004d7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a25      	ldr	r2, [pc, #148]	@ (8004e18 <TIM_Base_SetConfig+0xe4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d01b      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d8c:	d017      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a22      	ldr	r2, [pc, #136]	@ (8004e1c <TIM_Base_SetConfig+0xe8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d013      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a21      	ldr	r2, [pc, #132]	@ (8004e20 <TIM_Base_SetConfig+0xec>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00f      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a20      	ldr	r2, [pc, #128]	@ (8004e24 <TIM_Base_SetConfig+0xf0>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00b      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1f      	ldr	r2, [pc, #124]	@ (8004e28 <TIM_Base_SetConfig+0xf4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d007      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a1e      	ldr	r2, [pc, #120]	@ (8004e2c <TIM_Base_SetConfig+0xf8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d003      	beq.n	8004dbe <TIM_Base_SetConfig+0x8a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e30 <TIM_Base_SetConfig+0xfc>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d108      	bne.n	8004dd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a08      	ldr	r2, [pc, #32]	@ (8004e18 <TIM_Base_SetConfig+0xe4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d103      	bne.n	8004e04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	615a      	str	r2, [r3, #20]
}
 8004e0a:	bf00      	nop
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40010000 	.word	0x40010000
 8004e1c:	40000400 	.word	0x40000400
 8004e20:	40000800 	.word	0x40000800
 8004e24:	40000c00 	.word	0x40000c00
 8004e28:	40014000 	.word	0x40014000
 8004e2c:	40014400 	.word	0x40014400
 8004e30:	40014800 	.word	0x40014800

08004e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f023 0201 	bic.w	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f023 0303 	bic.w	r3, r3, #3
 8004e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f023 0302 	bic.w	r3, r3, #2
 8004e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004efc <TIM_OC1_SetConfig+0xc8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d10c      	bne.n	8004eaa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f023 0308 	bic.w	r3, r3, #8
 8004e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f023 0304 	bic.w	r3, r3, #4
 8004ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a13      	ldr	r2, [pc, #76]	@ (8004efc <TIM_OC1_SetConfig+0xc8>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d111      	bne.n	8004ed6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	621a      	str	r2, [r3, #32]
}
 8004ef0:	bf00      	nop
 8004ef2:	371c      	adds	r7, #28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	40010000 	.word	0x40010000

08004f00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	f023 0210 	bic.w	r2, r3, #16
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f023 0320 	bic.w	r3, r3, #32
 8004f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004fd4 <TIM_OC2_SetConfig+0xd4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d10d      	bne.n	8004f7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	697a      	ldr	r2, [r7, #20]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a15      	ldr	r2, [pc, #84]	@ (8004fd4 <TIM_OC2_SetConfig+0xd4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d113      	bne.n	8004fac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	621a      	str	r2, [r3, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	371c      	adds	r7, #28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	40010000 	.word	0x40010000

08004fd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0303 	bic.w	r3, r3, #3
 800500e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a1d      	ldr	r2, [pc, #116]	@ (80050a8 <TIM_OC3_SetConfig+0xd0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d10d      	bne.n	8005052 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800503c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	021b      	lsls	r3, r3, #8
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	4313      	orrs	r3, r2
 8005048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a14      	ldr	r2, [pc, #80]	@ (80050a8 <TIM_OC3_SetConfig+0xd0>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d113      	bne.n	8005082 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	621a      	str	r2, [r3, #32]
}
 800509c:	bf00      	nop
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	40010000 	.word	0x40010000

080050ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	021b      	lsls	r3, r3, #8
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	031b      	lsls	r3, r3, #12
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a10      	ldr	r2, [pc, #64]	@ (8005148 <TIM_OC4_SetConfig+0x9c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d109      	bne.n	8005120 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005112:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	019b      	lsls	r3, r3, #6
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	621a      	str	r2, [r3, #32]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40010000 	.word	0x40010000

0800514c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	f023 0201 	bic.w	r2, r3, #1
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f023 030a 	bic.w	r3, r3, #10
 8005188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	621a      	str	r2, [r3, #32]
}
 800519e:	bf00      	nop
 80051a0:	371c      	adds	r7, #28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b087      	sub	sp, #28
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	60b9      	str	r1, [r7, #8]
 80051b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f023 0210 	bic.w	r2, r3, #16
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	031b      	lsls	r3, r3, #12
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4313      	orrs	r3, r2
 80051de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	621a      	str	r2, [r3, #32]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800520a:	b480      	push	{r7}
 800520c:	b085      	sub	sp, #20
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005220:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	f043 0307 	orr.w	r3, r3, #7
 800522c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	609a      	str	r2, [r3, #8]
}
 8005234:	bf00      	nop
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800525a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	021a      	lsls	r2, r3, #8
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	431a      	orrs	r2, r3
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4313      	orrs	r3, r2
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	609a      	str	r2, [r3, #8]
}
 8005274:	bf00      	nop
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 031f 	and.w	r3, r3, #31
 8005292:	2201      	movs	r2, #1
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a1a      	ldr	r2, [r3, #32]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	43db      	mvns	r3, r3
 80052a2:	401a      	ands	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a1a      	ldr	r2, [r3, #32]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 031f 	and.w	r3, r3, #31
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	fa01 f303 	lsl.w	r3, r1, r3
 80052b8:	431a      	orrs	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	621a      	str	r2, [r3, #32]
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
	...

080052cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052e0:	2302      	movs	r3, #2
 80052e2:	e050      	b.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800530a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1c      	ldr	r2, [pc, #112]	@ (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d018      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005330:	d013      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a18      	ldr	r2, [pc, #96]	@ (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00e      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a16      	ldr	r2, [pc, #88]	@ (800539c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d009      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a15      	ldr	r2, [pc, #84]	@ (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d004      	beq.n	800535a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a13      	ldr	r2, [pc, #76]	@ (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d10c      	bne.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005360:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	4313      	orrs	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40010000 	.word	0x40010000
 8005398:	40000400 	.word	0x40000400
 800539c:	40000800 	.word	0x40000800
 80053a0:	40000c00 	.word	0x40000c00
 80053a4:	40014000 	.word	0x40014000

080053a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e03f      	b.n	8005462 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fd f934 	bl	8002664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2224      	movs	r2, #36	@ 0x24
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fe49 	bl	80060ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695a      	ldr	r2, [r3, #20]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68da      	ldr	r2, [r3, #12]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3708      	adds	r7, #8
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b082      	sub	sp, #8
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e021      	b.n	80054c0 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2224      	movs	r2, #36	@ 0x24
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005492:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7fd f971 	bl	800277c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	@ 0x28
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d17c      	bne.n	80055e2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_UART_Transmit+0x2c>
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e075      	b.n	80055e4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_UART_Transmit+0x3e>
 8005502:	2302      	movs	r3, #2
 8005504:	e06e      	b.n	80055e4 <HAL_UART_Transmit+0x11c>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2221      	movs	r2, #33	@ 0x21
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800551c:	f7fd fb14 	bl	8002b48 <HAL_GetTick>
 8005520:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	88fa      	ldrh	r2, [r7, #6]
 8005526:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	88fa      	ldrh	r2, [r7, #6]
 800552c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005536:	d108      	bne.n	800554a <HAL_UART_Transmit+0x82>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d104      	bne.n	800554a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005540:	2300      	movs	r3, #0
 8005542:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	61bb      	str	r3, [r7, #24]
 8005548:	e003      	b.n	8005552 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800555a:	e02a      	b.n	80055b2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2200      	movs	r2, #0
 8005564:	2180      	movs	r1, #128	@ 0x80
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 fb5a 	bl	8005c20 <UART_WaitOnFlagUntilTimeout>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e036      	b.n	80055e4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10b      	bne.n	8005594 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800558a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	3302      	adds	r3, #2
 8005590:	61bb      	str	r3, [r7, #24]
 8005592:	e007      	b.n	80055a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	781a      	ldrb	r2, [r3, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	3301      	adds	r3, #1
 80055a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1cf      	bne.n	800555c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2200      	movs	r2, #0
 80055c4:	2140      	movs	r1, #64	@ 0x40
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 fb2a 	bl	8005c20 <UART_WaitOnFlagUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e006      	b.n	80055e4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2220      	movs	r2, #32
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	e000      	b.n	80055e4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80055e2:	2302      	movs	r3, #2
  }
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	4613      	mov	r3, r2
 80055f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b20      	cmp	r3, #32
 8005604:	d130      	bne.n	8005668 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <HAL_UART_Transmit_IT+0x26>
 800560c:	88fb      	ldrh	r3, [r7, #6]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e029      	b.n	800566a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_UART_Transmit_IT+0x38>
 8005620:	2302      	movs	r3, #2
 8005622:	e022      	b.n	800566a <HAL_UART_Transmit_IT+0x7e>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	88fa      	ldrh	r2, [r7, #6]
 8005636:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	88fa      	ldrh	r2, [r7, #6]
 800563c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2221      	movs	r2, #33	@ 0x21
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005662:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	e000      	b.n	800566a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005668:	2302      	movs	r3, #2
  }
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	4613      	mov	r3, r2
 8005682:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b20      	cmp	r3, #32
 800568e:	d11d      	bne.n	80056cc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_UART_Receive_IT+0x26>
 8005696:	88fb      	ldrh	r3, [r7, #6]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e016      	b.n	80056ce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_UART_Receive_IT+0x38>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e00f      	b.n	80056ce <HAL_UART_Receive_IT+0x58>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056bc:	88fb      	ldrh	r3, [r7, #6]
 80056be:	461a      	mov	r2, r3
 80056c0:	68b9      	ldr	r1, [r7, #8]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 fb1a 	bl	8005cfc <UART_Start_Receive_IT>
 80056c8:	4603      	mov	r3, r0
 80056ca:	e000      	b.n	80056ce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80056cc:	2302      	movs	r3, #2
  }
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b0ba      	sub	sp, #232	@ 0xe8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80056fe:	2300      	movs	r3, #0
 8005700:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005704:	2300      	movs	r3, #0
 8005706:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800570a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005716:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10f      	bne.n	800573e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800571e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	2b00      	cmp	r3, #0
 8005728:	d009      	beq.n	800573e <HAL_UART_IRQHandler+0x66>
 800572a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fbfd 	bl	8005f36 <UART_Receive_IT>
      return;
 800573c:	e256      	b.n	8005bec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800573e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 80de 	beq.w	8005904 <HAL_UART_IRQHandler+0x22c>
 8005748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d106      	bne.n	8005762 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005758:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 80d1 	beq.w	8005904 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00b      	beq.n	8005786 <HAL_UART_IRQHandler+0xae>
 800576e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005776:	2b00      	cmp	r3, #0
 8005778:	d005      	beq.n	8005786 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577e:	f043 0201 	orr.w	r2, r3, #1
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800578a:	f003 0304 	and.w	r3, r3, #4
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00b      	beq.n	80057aa <HAL_UART_IRQHandler+0xd2>
 8005792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a2:	f043 0202 	orr.w	r2, r3, #2
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00b      	beq.n	80057ce <HAL_UART_IRQHandler+0xf6>
 80057b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c6:	f043 0204 	orr.w	r2, r3, #4
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d011      	beq.n	80057fe <HAL_UART_IRQHandler+0x126>
 80057da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d105      	bne.n	80057f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d005      	beq.n	80057fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f6:	f043 0208 	orr.w	r2, r3, #8
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 81ed 	beq.w	8005be2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	2b00      	cmp	r3, #0
 8005812:	d008      	beq.n	8005826 <HAL_UART_IRQHandler+0x14e>
 8005814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fb88 	bl	8005f36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005830:	2b40      	cmp	r3, #64	@ 0x40
 8005832:	bf0c      	ite	eq
 8005834:	2301      	moveq	r3, #1
 8005836:	2300      	movne	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d103      	bne.n	8005852 <HAL_UART_IRQHandler+0x17a>
 800584a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800584e:	2b00      	cmp	r3, #0
 8005850:	d04f      	beq.n	80058f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fa90 	bl	8005d78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005862:	2b40      	cmp	r3, #64	@ 0x40
 8005864:	d141      	bne.n	80058ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3314      	adds	r3, #20
 800586c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800587c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005880:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005884:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3314      	adds	r3, #20
 800588e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005892:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005896:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800589e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80058aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1d9      	bne.n	8005866 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d013      	beq.n	80058e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058be:	4a7d      	ldr	r2, [pc, #500]	@ (8005ab4 <HAL_UART_IRQHandler+0x3dc>)
 80058c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fd fb21 	bl	8002f0e <HAL_DMA_Abort_IT>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d016      	beq.n	8005900 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80058dc:	4610      	mov	r0, r2
 80058de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e0:	e00e      	b.n	8005900 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7fc fc86 	bl	80021f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e8:	e00a      	b.n	8005900 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fc fc82 	bl	80021f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f0:	e006      	b.n	8005900 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7fc fc7e 	bl	80021f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80058fe:	e170      	b.n	8005be2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005900:	bf00      	nop
    return;
 8005902:	e16e      	b.n	8005be2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005908:	2b01      	cmp	r3, #1
 800590a:	f040 814a 	bne.w	8005ba2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800590e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005912:	f003 0310 	and.w	r3, r3, #16
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 8143 	beq.w	8005ba2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800591c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005920:	f003 0310 	and.w	r3, r3, #16
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 813c 	beq.w	8005ba2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800592a:	2300      	movs	r3, #0
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	60bb      	str	r3, [r7, #8]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	60bb      	str	r3, [r7, #8]
 800593e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800594a:	2b40      	cmp	r3, #64	@ 0x40
 800594c:	f040 80b4 	bne.w	8005ab8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800595c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005960:	2b00      	cmp	r3, #0
 8005962:	f000 8140 	beq.w	8005be6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800596a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800596e:	429a      	cmp	r2, r3
 8005970:	f080 8139 	bcs.w	8005be6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800597a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005986:	f000 8088 	beq.w	8005a9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	330c      	adds	r3, #12
 8005990:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	330c      	adds	r3, #12
 80059b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80059b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80059c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1d9      	bne.n	800598a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3314      	adds	r3, #20
 80059dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059e0:	e853 3f00 	ldrex	r3, [r3]
 80059e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80059e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059e8:	f023 0301 	bic.w	r3, r3, #1
 80059ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3314      	adds	r3, #20
 80059f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80059fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e1      	bne.n	80059d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3314      	adds	r3, #20
 8005a18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3314      	adds	r3, #20
 8005a32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a3e:	e841 2300 	strex	r3, r2, [r1]
 8005a42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1e3      	bne.n	8005a12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	330c      	adds	r3, #12
 8005a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a62:	e853 3f00 	ldrex	r3, [r3]
 8005a66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a6a:	f023 0310 	bic.w	r3, r3, #16
 8005a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	330c      	adds	r3, #12
 8005a78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a7c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a7e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e3      	bne.n	8005a58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fd f9ca 	bl	8002e2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f8ac 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ab0:	e099      	b.n	8005be6 <HAL_UART_IRQHandler+0x50e>
 8005ab2:	bf00      	nop
 8005ab4:	08005e3f 	.word	0x08005e3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 808b 	beq.w	8005bea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005ad4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 8086 	beq.w	8005bea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	330c      	adds	r3, #12
 8005ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005af4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	330c      	adds	r3, #12
 8005afe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b02:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b0a:	e841 2300 	strex	r3, r2, [r1]
 8005b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e3      	bne.n	8005ade <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3314      	adds	r3, #20
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	e853 3f00 	ldrex	r3, [r3]
 8005b24:	623b      	str	r3, [r7, #32]
   return(result);
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	f023 0301 	bic.w	r3, r3, #1
 8005b2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3314      	adds	r3, #20
 8005b36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e3      	bne.n	8005b16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	330c      	adds	r3, #12
 8005b62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	e853 3f00 	ldrex	r3, [r3]
 8005b6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0310 	bic.w	r3, r3, #16
 8005b72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	330c      	adds	r3, #12
 8005b7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b80:	61fa      	str	r2, [r7, #28]
 8005b82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b84:	69b9      	ldr	r1, [r7, #24]
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	e841 2300 	strex	r3, r2, [r1]
 8005b8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1e3      	bne.n	8005b5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f834 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ba0:	e023      	b.n	8005bea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d009      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x4ea>
 8005bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f953 	bl	8005e66 <UART_Transmit_IT>
    return;
 8005bc0:	e014      	b.n	8005bec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00e      	beq.n	8005bec <HAL_UART_IRQHandler+0x514>
 8005bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d008      	beq.n	8005bec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f993 	bl	8005f06 <UART_EndTransmit_IT>
    return;
 8005be0:	e004      	b.n	8005bec <HAL_UART_IRQHandler+0x514>
    return;
 8005be2:	bf00      	nop
 8005be4:	e002      	b.n	8005bec <HAL_UART_IRQHandler+0x514>
      return;
 8005be6:	bf00      	nop
 8005be8:	e000      	b.n	8005bec <HAL_UART_IRQHandler+0x514>
      return;
 8005bea:	bf00      	nop
  }
}
 8005bec:	37e8      	adds	r7, #232	@ 0xe8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop

08005bf4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b090      	sub	sp, #64	@ 0x40
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	603b      	str	r3, [r7, #0]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c30:	e050      	b.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c38:	d04c      	beq.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d007      	beq.n	8005c50 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c40:	f7fc ff82 	bl	8002b48 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d241      	bcs.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	330c      	adds	r3, #12
 8005c56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5a:	e853 3f00 	ldrex	r3, [r3]
 8005c5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	330c      	adds	r3, #12
 8005c6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005c70:	637a      	str	r2, [r7, #52]	@ 0x34
 8005c72:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c78:	e841 2300 	strex	r3, r2, [r1]
 8005c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e5      	bne.n	8005c50 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3314      	adds	r3, #20
 8005c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	613b      	str	r3, [r7, #16]
   return(result);
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f023 0301 	bic.w	r3, r3, #1
 8005c9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3314      	adds	r3, #20
 8005ca2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ca4:	623a      	str	r2, [r7, #32]
 8005ca6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	69f9      	ldr	r1, [r7, #28]
 8005caa:	6a3a      	ldr	r2, [r7, #32]
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e5      	bne.n	8005c84 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e00f      	b.n	8005cf4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	bf0c      	ite	eq
 8005ce4:	2301      	moveq	r3, #1
 8005ce6:	2300      	movne	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	461a      	mov	r2, r3
 8005cec:	79fb      	ldrb	r3, [r7, #7]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d09f      	beq.n	8005c32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3740      	adds	r7, #64	@ 0x40
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	4613      	mov	r3, r2
 8005d08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	88fa      	ldrh	r2, [r7, #6]
 8005d14:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	88fa      	ldrh	r2, [r7, #6]
 8005d1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2222      	movs	r2, #34	@ 0x22
 8005d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68da      	ldr	r2, [r3, #12]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d48:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	695a      	ldr	r2, [r3, #20]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0201 	orr.w	r2, r2, #1
 8005d58:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 0220 	orr.w	r2, r2, #32
 8005d68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b095      	sub	sp, #84	@ 0x54
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	330c      	adds	r3, #12
 8005d86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d8a:	e853 3f00 	ldrex	r3, [r3]
 8005d8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	330c      	adds	r3, #12
 8005d9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005da0:	643a      	str	r2, [r7, #64]	@ 0x40
 8005da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005da6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e5      	bne.n	8005d80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3314      	adds	r3, #20
 8005dba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	e853 3f00 	ldrex	r3, [r3]
 8005dc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	f023 0301 	bic.w	r3, r3, #1
 8005dca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3314      	adds	r3, #20
 8005dd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e5      	bne.n	8005db4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d119      	bne.n	8005e24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f023 0310 	bic.w	r3, r3, #16
 8005e06:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	330c      	adds	r3, #12
 8005e0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e10:	61ba      	str	r2, [r7, #24]
 8005e12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e14:	6979      	ldr	r1, [r7, #20]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	e841 2300 	strex	r3, r2, [r1]
 8005e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e5      	bne.n	8005df0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e32:	bf00      	nop
 8005e34:	3754      	adds	r7, #84	@ 0x54
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7fc f9cb 	bl	80021f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e5e:	bf00      	nop
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b21      	cmp	r3, #33	@ 0x21
 8005e78:	d13e      	bne.n	8005ef8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e82:	d114      	bne.n	8005eae <UART_Transmit_IT+0x48>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d110      	bne.n	8005eae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ea0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	1c9a      	adds	r2, r3, #2
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	621a      	str	r2, [r3, #32]
 8005eac:	e008      	b.n	8005ec0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	1c59      	adds	r1, r3, #1
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6211      	str	r1, [r2, #32]
 8005eb8:	781a      	ldrb	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	4619      	mov	r1, r3
 8005ece:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10f      	bne.n	8005ef4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ee2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ef2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	e000      	b.n	8005efa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ef8:	2302      	movs	r3, #2
  }
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b082      	sub	sp, #8
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff fe64 	bl	8005bf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b08c      	sub	sp, #48	@ 0x30
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b22      	cmp	r3, #34	@ 0x22
 8005f48:	f040 80ab 	bne.w	80060a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f54:	d117      	bne.n	8005f86 <UART_Receive_IT+0x50>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d113      	bne.n	8005f86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f66:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7e:	1c9a      	adds	r2, r3, #2
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f84:	e026      	b.n	8005fd4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f98:	d007      	beq.n	8005faa <UART_Receive_IT+0x74>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10a      	bne.n	8005fb8 <UART_Receive_IT+0x82>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb4:	701a      	strb	r2, [r3, #0]
 8005fb6:	e008      	b.n	8005fca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d15a      	bne.n	800609e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0220 	bic.w	r2, r2, #32
 8005ff6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006006:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695a      	ldr	r2, [r3, #20]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0201 	bic.w	r2, r2, #1
 8006016:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2220      	movs	r2, #32
 800601c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006024:	2b01      	cmp	r3, #1
 8006026:	d135      	bne.n	8006094 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	330c      	adds	r3, #12
 8006034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	613b      	str	r3, [r7, #16]
   return(result);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f023 0310 	bic.w	r3, r3, #16
 8006044:	627b      	str	r3, [r7, #36]	@ 0x24
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	330c      	adds	r3, #12
 800604c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800604e:	623a      	str	r2, [r7, #32]
 8006050:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	69f9      	ldr	r1, [r7, #28]
 8006054:	6a3a      	ldr	r2, [r7, #32]
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	61bb      	str	r3, [r7, #24]
   return(result);
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e5      	bne.n	800602e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b10      	cmp	r3, #16
 800606e:	d10a      	bne.n	8006086 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006070:	2300      	movs	r3, #0
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff fdbb 	bl	8005c08 <HAL_UARTEx_RxEventCallback>
 8006092:	e002      	b.n	800609a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7fc f90b 	bl	80022b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	e002      	b.n	80060a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	e000      	b.n	80060a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80060a2:	2302      	movs	r3, #2
  }
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3730      	adds	r7, #48	@ 0x30
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060b0:	b0c0      	sub	sp, #256	@ 0x100
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c8:	68d9      	ldr	r1, [r3, #12]
 80060ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	ea40 0301 	orr.w	r3, r0, r1
 80060d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	431a      	orrs	r2, r3
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006104:	f021 010c 	bic.w	r1, r1, #12
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006112:	430b      	orrs	r3, r1
 8006114:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006126:	6999      	ldr	r1, [r3, #24]
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	ea40 0301 	orr.w	r3, r0, r1
 8006132:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	4b8f      	ldr	r3, [pc, #572]	@ (8006378 <UART_SetConfig+0x2cc>)
 800613c:	429a      	cmp	r2, r3
 800613e:	d005      	beq.n	800614c <UART_SetConfig+0xa0>
 8006140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	4b8d      	ldr	r3, [pc, #564]	@ (800637c <UART_SetConfig+0x2d0>)
 8006148:	429a      	cmp	r2, r3
 800614a:	d104      	bne.n	8006156 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800614c:	f7fd fde2 	bl	8003d14 <HAL_RCC_GetPCLK2Freq>
 8006150:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006154:	e003      	b.n	800615e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006156:	f7fd fdc9 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 800615a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800615e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006168:	f040 810c 	bne.w	8006384 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800616c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006170:	2200      	movs	r2, #0
 8006172:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006176:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800617a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800617e:	4622      	mov	r2, r4
 8006180:	462b      	mov	r3, r5
 8006182:	1891      	adds	r1, r2, r2
 8006184:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006186:	415b      	adcs	r3, r3
 8006188:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800618a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800618e:	4621      	mov	r1, r4
 8006190:	eb12 0801 	adds.w	r8, r2, r1
 8006194:	4629      	mov	r1, r5
 8006196:	eb43 0901 	adc.w	r9, r3, r1
 800619a:	f04f 0200 	mov.w	r2, #0
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061ae:	4690      	mov	r8, r2
 80061b0:	4699      	mov	r9, r3
 80061b2:	4623      	mov	r3, r4
 80061b4:	eb18 0303 	adds.w	r3, r8, r3
 80061b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061bc:	462b      	mov	r3, r5
 80061be:	eb49 0303 	adc.w	r3, r9, r3
 80061c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061da:	460b      	mov	r3, r1
 80061dc:	18db      	adds	r3, r3, r3
 80061de:	653b      	str	r3, [r7, #80]	@ 0x50
 80061e0:	4613      	mov	r3, r2
 80061e2:	eb42 0303 	adc.w	r3, r2, r3
 80061e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80061e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061f0:	f7fa f85e 	bl	80002b0 <__aeabi_uldivmod>
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4b61      	ldr	r3, [pc, #388]	@ (8006380 <UART_SetConfig+0x2d4>)
 80061fa:	fba3 2302 	umull	r2, r3, r3, r2
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	011c      	lsls	r4, r3, #4
 8006202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006206:	2200      	movs	r2, #0
 8006208:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800620c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006210:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006214:	4642      	mov	r2, r8
 8006216:	464b      	mov	r3, r9
 8006218:	1891      	adds	r1, r2, r2
 800621a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800621c:	415b      	adcs	r3, r3
 800621e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006220:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006224:	4641      	mov	r1, r8
 8006226:	eb12 0a01 	adds.w	sl, r2, r1
 800622a:	4649      	mov	r1, r9
 800622c:	eb43 0b01 	adc.w	fp, r3, r1
 8006230:	f04f 0200 	mov.w	r2, #0
 8006234:	f04f 0300 	mov.w	r3, #0
 8006238:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800623c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006240:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006244:	4692      	mov	sl, r2
 8006246:	469b      	mov	fp, r3
 8006248:	4643      	mov	r3, r8
 800624a:	eb1a 0303 	adds.w	r3, sl, r3
 800624e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006252:	464b      	mov	r3, r9
 8006254:	eb4b 0303 	adc.w	r3, fp, r3
 8006258:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006268:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800626c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006270:	460b      	mov	r3, r1
 8006272:	18db      	adds	r3, r3, r3
 8006274:	643b      	str	r3, [r7, #64]	@ 0x40
 8006276:	4613      	mov	r3, r2
 8006278:	eb42 0303 	adc.w	r3, r2, r3
 800627c:	647b      	str	r3, [r7, #68]	@ 0x44
 800627e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006282:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006286:	f7fa f813 	bl	80002b0 <__aeabi_uldivmod>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4611      	mov	r1, r2
 8006290:	4b3b      	ldr	r3, [pc, #236]	@ (8006380 <UART_SetConfig+0x2d4>)
 8006292:	fba3 2301 	umull	r2, r3, r3, r1
 8006296:	095b      	lsrs	r3, r3, #5
 8006298:	2264      	movs	r2, #100	@ 0x64
 800629a:	fb02 f303 	mul.w	r3, r2, r3
 800629e:	1acb      	subs	r3, r1, r3
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80062a6:	4b36      	ldr	r3, [pc, #216]	@ (8006380 <UART_SetConfig+0x2d4>)
 80062a8:	fba3 2302 	umull	r2, r3, r3, r2
 80062ac:	095b      	lsrs	r3, r3, #5
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80062b4:	441c      	add	r4, r3
 80062b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80062c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80062c8:	4642      	mov	r2, r8
 80062ca:	464b      	mov	r3, r9
 80062cc:	1891      	adds	r1, r2, r2
 80062ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062d0:	415b      	adcs	r3, r3
 80062d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062d8:	4641      	mov	r1, r8
 80062da:	1851      	adds	r1, r2, r1
 80062dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80062de:	4649      	mov	r1, r9
 80062e0:	414b      	adcs	r3, r1
 80062e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062f0:	4659      	mov	r1, fp
 80062f2:	00cb      	lsls	r3, r1, #3
 80062f4:	4651      	mov	r1, sl
 80062f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062fa:	4651      	mov	r1, sl
 80062fc:	00ca      	lsls	r2, r1, #3
 80062fe:	4610      	mov	r0, r2
 8006300:	4619      	mov	r1, r3
 8006302:	4603      	mov	r3, r0
 8006304:	4642      	mov	r2, r8
 8006306:	189b      	adds	r3, r3, r2
 8006308:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800630c:	464b      	mov	r3, r9
 800630e:	460a      	mov	r2, r1
 8006310:	eb42 0303 	adc.w	r3, r2, r3
 8006314:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006324:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006328:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800632c:	460b      	mov	r3, r1
 800632e:	18db      	adds	r3, r3, r3
 8006330:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006332:	4613      	mov	r3, r2
 8006334:	eb42 0303 	adc.w	r3, r2, r3
 8006338:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800633a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800633e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006342:	f7f9 ffb5 	bl	80002b0 <__aeabi_uldivmod>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4b0d      	ldr	r3, [pc, #52]	@ (8006380 <UART_SetConfig+0x2d4>)
 800634c:	fba3 1302 	umull	r1, r3, r3, r2
 8006350:	095b      	lsrs	r3, r3, #5
 8006352:	2164      	movs	r1, #100	@ 0x64
 8006354:	fb01 f303 	mul.w	r3, r1, r3
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	3332      	adds	r3, #50	@ 0x32
 800635e:	4a08      	ldr	r2, [pc, #32]	@ (8006380 <UART_SetConfig+0x2d4>)
 8006360:	fba2 2303 	umull	r2, r3, r2, r3
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	f003 0207 	and.w	r2, r3, #7
 800636a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4422      	add	r2, r4
 8006372:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006374:	e106      	b.n	8006584 <UART_SetConfig+0x4d8>
 8006376:	bf00      	nop
 8006378:	40011000 	.word	0x40011000
 800637c:	40011400 	.word	0x40011400
 8006380:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006388:	2200      	movs	r2, #0
 800638a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800638e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006392:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006396:	4642      	mov	r2, r8
 8006398:	464b      	mov	r3, r9
 800639a:	1891      	adds	r1, r2, r2
 800639c:	6239      	str	r1, [r7, #32]
 800639e:	415b      	adcs	r3, r3
 80063a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063a6:	4641      	mov	r1, r8
 80063a8:	1854      	adds	r4, r2, r1
 80063aa:	4649      	mov	r1, r9
 80063ac:	eb43 0501 	adc.w	r5, r3, r1
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	00eb      	lsls	r3, r5, #3
 80063ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063be:	00e2      	lsls	r2, r4, #3
 80063c0:	4614      	mov	r4, r2
 80063c2:	461d      	mov	r5, r3
 80063c4:	4643      	mov	r3, r8
 80063c6:	18e3      	adds	r3, r4, r3
 80063c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063cc:	464b      	mov	r3, r9
 80063ce:	eb45 0303 	adc.w	r3, r5, r3
 80063d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063f2:	4629      	mov	r1, r5
 80063f4:	008b      	lsls	r3, r1, #2
 80063f6:	4621      	mov	r1, r4
 80063f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063fc:	4621      	mov	r1, r4
 80063fe:	008a      	lsls	r2, r1, #2
 8006400:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006404:	f7f9 ff54 	bl	80002b0 <__aeabi_uldivmod>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	4b60      	ldr	r3, [pc, #384]	@ (8006590 <UART_SetConfig+0x4e4>)
 800640e:	fba3 2302 	umull	r2, r3, r3, r2
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	011c      	lsls	r4, r3, #4
 8006416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800641a:	2200      	movs	r2, #0
 800641c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006420:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006424:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006428:	4642      	mov	r2, r8
 800642a:	464b      	mov	r3, r9
 800642c:	1891      	adds	r1, r2, r2
 800642e:	61b9      	str	r1, [r7, #24]
 8006430:	415b      	adcs	r3, r3
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006438:	4641      	mov	r1, r8
 800643a:	1851      	adds	r1, r2, r1
 800643c:	6139      	str	r1, [r7, #16]
 800643e:	4649      	mov	r1, r9
 8006440:	414b      	adcs	r3, r1
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006450:	4659      	mov	r1, fp
 8006452:	00cb      	lsls	r3, r1, #3
 8006454:	4651      	mov	r1, sl
 8006456:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800645a:	4651      	mov	r1, sl
 800645c:	00ca      	lsls	r2, r1, #3
 800645e:	4610      	mov	r0, r2
 8006460:	4619      	mov	r1, r3
 8006462:	4603      	mov	r3, r0
 8006464:	4642      	mov	r2, r8
 8006466:	189b      	adds	r3, r3, r2
 8006468:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800646c:	464b      	mov	r3, r9
 800646e:	460a      	mov	r2, r1
 8006470:	eb42 0303 	adc.w	r3, r2, r3
 8006474:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006482:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006490:	4649      	mov	r1, r9
 8006492:	008b      	lsls	r3, r1, #2
 8006494:	4641      	mov	r1, r8
 8006496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800649a:	4641      	mov	r1, r8
 800649c:	008a      	lsls	r2, r1, #2
 800649e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80064a2:	f7f9 ff05 	bl	80002b0 <__aeabi_uldivmod>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4611      	mov	r1, r2
 80064ac:	4b38      	ldr	r3, [pc, #224]	@ (8006590 <UART_SetConfig+0x4e4>)
 80064ae:	fba3 2301 	umull	r2, r3, r3, r1
 80064b2:	095b      	lsrs	r3, r3, #5
 80064b4:	2264      	movs	r2, #100	@ 0x64
 80064b6:	fb02 f303 	mul.w	r3, r2, r3
 80064ba:	1acb      	subs	r3, r1, r3
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	3332      	adds	r3, #50	@ 0x32
 80064c0:	4a33      	ldr	r2, [pc, #204]	@ (8006590 <UART_SetConfig+0x4e4>)
 80064c2:	fba2 2303 	umull	r2, r3, r2, r3
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064cc:	441c      	add	r4, r3
 80064ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064d2:	2200      	movs	r2, #0
 80064d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80064d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80064d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064dc:	4642      	mov	r2, r8
 80064de:	464b      	mov	r3, r9
 80064e0:	1891      	adds	r1, r2, r2
 80064e2:	60b9      	str	r1, [r7, #8]
 80064e4:	415b      	adcs	r3, r3
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064ec:	4641      	mov	r1, r8
 80064ee:	1851      	adds	r1, r2, r1
 80064f0:	6039      	str	r1, [r7, #0]
 80064f2:	4649      	mov	r1, r9
 80064f4:	414b      	adcs	r3, r1
 80064f6:	607b      	str	r3, [r7, #4]
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006504:	4659      	mov	r1, fp
 8006506:	00cb      	lsls	r3, r1, #3
 8006508:	4651      	mov	r1, sl
 800650a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800650e:	4651      	mov	r1, sl
 8006510:	00ca      	lsls	r2, r1, #3
 8006512:	4610      	mov	r0, r2
 8006514:	4619      	mov	r1, r3
 8006516:	4603      	mov	r3, r0
 8006518:	4642      	mov	r2, r8
 800651a:	189b      	adds	r3, r3, r2
 800651c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800651e:	464b      	mov	r3, r9
 8006520:	460a      	mov	r2, r1
 8006522:	eb42 0303 	adc.w	r3, r2, r3
 8006526:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	663b      	str	r3, [r7, #96]	@ 0x60
 8006532:	667a      	str	r2, [r7, #100]	@ 0x64
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006540:	4649      	mov	r1, r9
 8006542:	008b      	lsls	r3, r1, #2
 8006544:	4641      	mov	r1, r8
 8006546:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800654a:	4641      	mov	r1, r8
 800654c:	008a      	lsls	r2, r1, #2
 800654e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006552:	f7f9 fead 	bl	80002b0 <__aeabi_uldivmod>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4b0d      	ldr	r3, [pc, #52]	@ (8006590 <UART_SetConfig+0x4e4>)
 800655c:	fba3 1302 	umull	r1, r3, r3, r2
 8006560:	095b      	lsrs	r3, r3, #5
 8006562:	2164      	movs	r1, #100	@ 0x64
 8006564:	fb01 f303 	mul.w	r3, r1, r3
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	011b      	lsls	r3, r3, #4
 800656c:	3332      	adds	r3, #50	@ 0x32
 800656e:	4a08      	ldr	r2, [pc, #32]	@ (8006590 <UART_SetConfig+0x4e4>)
 8006570:	fba2 2303 	umull	r2, r3, r2, r3
 8006574:	095b      	lsrs	r3, r3, #5
 8006576:	f003 020f 	and.w	r2, r3, #15
 800657a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4422      	add	r2, r4
 8006582:	609a      	str	r2, [r3, #8]
}
 8006584:	bf00      	nop
 8006586:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800658a:	46bd      	mov	sp, r7
 800658c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006590:	51eb851f 	.word	0x51eb851f

08006594 <HW_RESET>:


//No se puede quedar esperano en las funciones, hay que detectar a situaci�n y salir del bucle.
//pensar que solo entra cuando recibe datos, si no vuelve a entrar queda ah� eternamentes.
void HW_RESET(struct WIFI *a)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_RESET);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6818      	ldr	r0, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	889b      	ldrh	r3, [r3, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	4619      	mov	r1, r3
 80065a8:	f7fc ff3c 	bl	8003424 <HAL_GPIO_WritePin>
    ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 80065ac:	2115      	movs	r1, #21
 80065ae:	480b      	ldr	r0, [pc, #44]	@ (80065dc <HW_RESET+0x48>)
 80065b0:	f7fa ffba 	bl	8001528 <ITM0_Write>
    HAL_Delay(2000);											//Tiempo de reset del módulo
 80065b4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80065b8:	f7fc fad2 	bl	8002b60 <HAL_Delay>
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
 80065bc:	210e      	movs	r1, #14
 80065be:	4808      	ldr	r0, [pc, #32]	@ (80065e0 <HW_RESET+0x4c>)
 80065c0:	f7fa ffb2 	bl	8001528 <ITM0_Write>
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6818      	ldr	r0, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	889b      	ldrh	r3, [r3, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	4619      	mov	r1, r3
 80065d0:	f7fc ff28 	bl	8003424 <HAL_GPIO_WritePin>
}
 80065d4:	bf00      	nop
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	08010a8c 	.word	0x08010a8c
 80065e0:	08010aa4 	.word	0x08010aa4

080065e4 <NOP>:
void NOP(struct WIFI *a)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
	a->_enviaruart=0;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
	a->_pasos=0;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
	a->_enviaruart=1;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
	a->_pasos=0; //210416
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
	a->_enviaruart=1;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
	a->_pasos=0; //210416
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <MUX>:
void MUX(struct WIFI *a)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2204      	movs	r2, #4
 8006674:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
	a->_enviaruart=1;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
	a->_pasos=0; //210416
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <IPDef>:
void IPDef(struct WIFI *a)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2205      	movs	r2, #5
 80066a0:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
	a->_enviaruart=1;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
	a->_pasos=0; //210416
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
	a->_enviaruart=1;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
	a->_pasos=0; //210416
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
	}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2206      	movs	r2, #6
 80066f8:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
	a->_enviaruart=1;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
	a->_pasos=0; //210416
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
	}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2208      	movs	r2, #8
 8006724:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
	a->_enviaruart=1;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
	a->_pasos=0; //210416
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
	}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2209      	movs	r2, #9
 8006750:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
	a->_enviaruart=1;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
	a->_pasos=0; //210416
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
	}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2207      	movs	r2, #7
 800677c:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
	a->_enviaruart=1;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
	a->_pasos=0; //210416
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
	}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <Inicializar>:
void Inicializar(struct WIFI *a)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
a->_estado=0;					//Estado de m�dulo WIFI
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 22c0 	strb.w	r2, [r3, #704]	@ 0x2c0
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 26c0 	strb.w	r2, [r3, #1728]	@ 0x6c0
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 28c0 	strb.w	r2, [r3, #2240]	@ 0x8c0
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2ac0 	strb.w	r2, [r3, #2752]	@ 0xac0
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f8c3 2ac8 	str.w	r2, [r3, #2760]	@ 0xac8
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 2acc 	str.w	r2, [r3, #2764]	@ 0xacc
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
a->_instruccion=0;				//Funcion que se desea realizar
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
a->_ejecucion=0;				//Funcion en ejecucion	
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2b20 	strb.w	r2, [r3, #2848]	@ 0xb20
a->_ticks=0;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f8c3 2ce0 	str.w	r2, [r3, #3296]	@ 0xce0
a->_ticks2=0;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f8c3 2ce4 	str.w	r2, [r3, #3300]	@ 0xce4
a->_debug=0;					//utilizada par fines de debugging
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c3 2cf0 	str.w	r2, [r3, #3312]	@ 0xcf0
a->_debug_str=0;				//utilizada par fines de debugging
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
a->_debug_pos=0;				//utilizada par fines de debugging
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8
a->_debug_chrs=0;				//utilizada par fines de debugging
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 2cfc 	str.w	r2, [r3, #3324]	@ 0xcfc
a->_debug_rx_ok=0;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
a->_debug_rx_no_ok=0;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08
a->_debug_SEND_OK=0;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f8c3 2d58 	str.w	r2, [r3, #3416]	@ 0xd58
a->_debug_CLOSED=0;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c3 2d60 	str.w	r2, [r3, #3424]	@ 0xd60
a->_debug_WF_DISCONNECT=0;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c3 2d64 	str.w	r2, [r3, #3428]	@ 0xd64
a->_debug_FAIL=0;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8c3 2d68 	str.w	r2, [r3, #3432]	@ 0xd68
a->_debug_CONNECT=0;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c3 2d5c 	str.w	r2, [r3, #3420]	@ 0xd5c
a->_debug_count=0;				//Cuento la catidad de ipds	
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8c3 2d2c 	str.w	r2, [r3, #3372]	@ 0xd2c
a->_debug_count_old=0;			//Cuento la catidad de ipds
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
a->_debug_count2=0;				//SEND OK para enviar datos
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c3 2d34 	str.w	r2, [r3, #3380]	@ 0xd34
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38
a->_debug_count4=0;				//SEDN OK recibido directo
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c3 2d3c 	str.w	r2, [r3, #3388]	@ 0xd3c
a->_debug_count5=0;				//Cuento la catidad de ipds	
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8c3 2d40 	str.w	r2, [r3, #3392]	@ 0xd40
a->_debug_count6=0;				//Cuento la catidad de ipds	
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c3 2d44 	str.w	r2, [r3, #3396]	@ 0xd44
a->_debug_count7=0;				//Cuento la catidad de ipds
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f8c3 2d48 	str.w	r2, [r3, #3400]	@ 0xd48
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f8c3 2d4c 	str.w	r2, [r3, #3404]	@ 0xd4c
a->_debug_count9=0;				//Cuento la catidad de ipds
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f8c3 2d50 	str.w	r2, [r3, #3408]	@ 0xd50
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c3 2d54 	str.w	r2, [r3, #3412]	@ 0xd54
a->_subpaso=0;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f8c3 2d78 	str.w	r2, [r3, #3448]	@ 0xd78
a->_overflowVector=512;			//Maximo tamaño del vector al procesar un +IPD
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800692a:	f8c3 2d7c 	str.w	r2, [r3, #3452]	@ 0xd7c
}
 800692e:	bf00      	nop
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
	...

0800693c <AT_ESP8266_ND>:
	  ITM0_Write("\r\n ESP ResetT\r\n",strlen("\r\n ESP ResetT\r\n"));
	  HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
}
/*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 800693c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800693e:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 8006942:	af06      	add	r7, sp, #24
 8006944:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006948:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800694c:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 800694e:	2300      	movs	r3, #0
 8006950:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8006954:	2300      	movs	r3, #0
 8006956:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 800695a:	2300      	movs	r3, #0
 800695c:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8006960:	2300      	movs	r3, #0
 8006962:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8006966:	2300      	movs	r3, #0
 8006968:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
	 char *token;
	 char memstr=' ';
 800696c:	2320      	movs	r3, #32
 800696e:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
		char comillas='"';
 8006972:	2322      	movs	r3, #34	@ 0x22
 8006974:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
		char separador[]={'"',',','"','\0'};
 8006978:	4b7c      	ldr	r3, [pc, #496]	@ (8006b6c <AT_ESP8266_ND+0x230>)
 800697a:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
		char finalizar[]={'"','\r','\n'};
 800697e:	4a7c      	ldr	r2, [pc, #496]	@ (8006b70 <AT_ESP8266_ND+0x234>)
 8006980:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8006984:	6812      	ldr	r2, [r2, #0]
 8006986:	4611      	mov	r1, r2
 8006988:	8019      	strh	r1, [r3, #0]
 800698a:	3302      	adds	r3, #2
 800698c:	0c12      	lsrs	r2, r2, #16
 800698e:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 8006990:	f642 4322 	movw	r3, #11298	@ 0x2c22
 8006994:	f8a7 3220 	strh.w	r3, [r7, #544]	@ 0x220
		char finalizar2[]={'\r','\n'};
 8006998:	f640 230d 	movw	r3, #2573	@ 0xa0d
 800699c:	f8a7 321c 	strh.w	r3, [r7, #540]	@ 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 80069a0:	2300      	movs	r3, #0
 80069a2:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 80069a6:	2300      	movs	r3, #0
 80069a8:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
a->_debug_pos=0;
 80069ac:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80069b0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	@ 0xcf8
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 80069bc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80069c0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f503 63d8 	add.w	r3, r3, #1728	@ 0x6c0
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7f9 fc12 	bl	80001f4 <strlen>
 80069d0:	4603      	mov	r3, r0
 80069d2:	461a      	mov	r2, r3
 80069d4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80069d8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f8c3 2cf4 	str.w	r2, [r3, #3316]	@ 0xcf4
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 80069e2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80069e6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f8c3 2d24 	str.w	r2, [r3, #3364]	@ 0xd24

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 80069f2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80069f6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f503 63d8 	add.w	r3, r3, #1728	@ 0x6c0
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7f9 fbf7 	bl	80001f4 <strlen>
 8006a06:	4603      	mov	r3, r0
 8006a08:	461a      	mov	r2, r3
 8006a0a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006a0e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f8c3 2ac8 	str.w	r2, [r3, #2760]	@ 0xac8
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los +IPD proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8006a18:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006a1c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2206      	movs	r2, #6
 8006a24:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006a28:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006a2c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8006a36:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006a3a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8006a44:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006a48:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8006a52:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006a56:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8006a60:	603b      	str	r3, [r7, #0]
 8006a62:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8006a66:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8006a6a:	6812      	ldr	r2, [r2, #0]
 8006a6c:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8006a70:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8006a74:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8006a78:	6809      	ldr	r1, [r1, #0]
 8006a7a:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8006a7e:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8006a82:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8006a86:	6800      	ldr	r0, [r0, #0]
 8006a88:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	9305      	str	r3, [sp, #20]
 8006a90:	9004      	str	r0, [sp, #16]
 8006a92:	9103      	str	r1, [sp, #12]
 8006a94:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8006a98:	9102      	str	r1, [sp, #8]
 8006a9a:	9201      	str	r2, [sp, #4]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	4633      	mov	r3, r6
 8006aa2:	4a34      	ldr	r2, [pc, #208]	@ (8006b74 <AT_ESP8266_ND+0x238>)
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f007 ff08 	bl	800e8bc <FT_String_ND>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	f040 8140 	bne.w	8006d34 <AT_ESP8266_ND+0x3f8>
		 {
			a->_n_fcomp=strlen("\r\n+IPD");
 8006ab4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006ab8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2206      	movs	r2, #6
 8006ac0:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
			if(a->_TCP_Local_Server_EN==0)
 8006ac4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006ac8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d150      	bne.n	8006b78 <AT_ESP8266_ND+0x23c>
				{
					a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATA);
 8006ad6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006ada:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8006ae4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006ae8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8006af2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006af6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8006b00:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006b04:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8006b14:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8006b18:	6812      	ldr	r2, [r2, #0]
 8006b1a:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8006b1e:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8006b22:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8006b26:	6809      	ldr	r1, [r1, #0]
 8006b28:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8006b2c:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8006b30:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8006b34:	6800      	ldr	r0, [r0, #0]
 8006b36:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8006b3a:	2304      	movs	r3, #4
 8006b3c:	9305      	str	r3, [sp, #20]
 8006b3e:	9004      	str	r0, [sp, #16]
 8006b40:	9103      	str	r1, [sp, #12]
 8006b42:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8006b46:	9102      	str	r1, [sp, #8]
 8006b48:	9201      	str	r2, [sp, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	4633      	mov	r3, r6
 8006b50:	4a08      	ldr	r2, [pc, #32]	@ (8006b74 <AT_ESP8266_ND+0x238>)
 8006b52:	4629      	mov	r1, r5
 8006b54:	4620      	mov	r0, r4
 8006b56:	f007 feb1 	bl	800e8bc <FT_String_ND>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006b60:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f8c3 2d24 	str.w	r2, [r3, #3364]	@ 0xd24
 8006b6a:	e04f      	b.n	8006c0c <AT_ESP8266_ND+0x2d0>
 8006b6c:	00222c22 	.word	0x00222c22
 8006b70:	08010cb0 	.word	0x08010cb0
 8006b74:	08010ac4 	.word	0x08010ac4
				}
				else
				{
					a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATASRVR);
 8006b78:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006b7c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8006b86:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006b8a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8006b94:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006b98:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8006ba2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006ba6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8006bb0:	603b      	str	r3, [r7, #0]
 8006bb2:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8006bb6:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8006bba:	6812      	ldr	r2, [r2, #0]
 8006bbc:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8006bc0:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8006bc4:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8006bc8:	6809      	ldr	r1, [r1, #0]
 8006bca:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8006bce:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8006bd2:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8006bd6:	6800      	ldr	r0, [r0, #0]
 8006bd8:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8006bdc:	2305      	movs	r3, #5
 8006bde:	9305      	str	r3, [sp, #20]
 8006be0:	9004      	str	r0, [sp, #16]
 8006be2:	9103      	str	r1, [sp, #12]
 8006be4:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8006be8:	9102      	str	r1, [sp, #8]
 8006bea:	9201      	str	r2, [sp, #4]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	4633      	mov	r3, r6
 8006bf2:	4ad2      	ldr	r2, [pc, #840]	@ (8006f3c <AT_ESP8266_ND+0x600>)
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f007 fe60 	bl	800e8bc <FT_String_ND>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006c02:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f8c3 2d24 	str.w	r2, [r3, #3364]	@ 0xd24
				}

			if(a->_estado_data==4)
 8006c0c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006c10:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	@ 0xd24
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d15a      	bne.n	8006cd4 <AT_ESP8266_ND+0x398>
				{
					a->_estado_rcv_data=99;
 8006c1e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006c22:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2263      	movs	r2, #99	@ 0x63
 8006c2a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
					a->_n_dataRCV=a->_n_tok;
 8006c2e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006c32:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	@ 0xd14
 8006c3c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006c40:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f8c3 2d28 	str.w	r2, [r3, #3368]	@ 0xd28
					CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006c4a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006c4e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f103 00c0 	add.w	r0, r3, #192	@ 0xc0
 8006c58:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006c5c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f503 610c 	add.w	r1, r3, #2240	@ 0x8c0
 8006c66:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006c6a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	@ 0xd14
 8006c74:	2341      	movs	r3, #65	@ 0x41
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	f008 fa11 	bl	800f0a0 <CopiaVector>
					CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006c7e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006c82:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f503 7030 	add.w	r0, r3, #704	@ 0x2c0
 8006c8c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006c90:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f503 610c 	add.w	r1, r3, #2240	@ 0x8c0
 8006c9a:	2341      	movs	r3, #65	@ 0x41
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	2205      	movs	r2, #5
 8006ca2:	f008 f9fd 	bl	800f0a0 <CopiaVector>

					a->_debug_rx_ok++;
 8006ca6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006caa:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006cba:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00
					a->_new_data_rcv=1;
 8006cc4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006cc8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
				}
			if(a->_estado_data==5)
 8006cd4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006cd8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	@ 0xd24
 8006ce2:	2b05      	cmp	r3, #5
 8006ce4:	d126      	bne.n	8006d34 <AT_ESP8266_ND+0x3f8>
				{
					a->_estado_rcv_data=55;
 8006ce6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006cea:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2237      	movs	r2, #55	@ 0x37
 8006cf2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
					a->_n_dataRCV=0;
 8006cf6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006cfa:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f8c3 2d28 	str.w	r2, [r3, #3368]	@ 0xd28
					a->_debug_rx_no_ok++;
 8006d06:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006d0a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	@ 0xd08
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006d1a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f8c3 2d08 	str.w	r2, [r3, #3336]	@ 0xd08
					a->_new_data_rcv=1;
 8006d24:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006d28:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
		 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006d34:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006d38:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2204      	movs	r2, #4
 8006d40:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006d44:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006d48:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8006d52:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006d56:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8006d60:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006d64:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8006d6e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006d72:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8006d7c:	603b      	str	r3, [r7, #0]
 8006d7e:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8006d82:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8006d86:	6812      	ldr	r2, [r2, #0]
 8006d88:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8006d8c:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8006d90:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8006d94:	6809      	ldr	r1, [r1, #0]
 8006d96:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8006d9a:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8006d9e:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8006da2:	6800      	ldr	r0, [r0, #0]
 8006da4:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8006da8:	2300      	movs	r3, #0
 8006daa:	9305      	str	r3, [sp, #20]
 8006dac:	9004      	str	r0, [sp, #16]
 8006dae:	9103      	str	r1, [sp, #12]
 8006db0:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8006db4:	9102      	str	r1, [sp, #8]
 8006db6:	9201      	str	r2, [sp, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	4633      	mov	r3, r6
 8006dbe:	4a60      	ldr	r2, [pc, #384]	@ (8006f40 <AT_ESP8266_ND+0x604>)
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f007 fd7a 	bl	800e8bc <FT_String_ND>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	f040 83ab 	bne.w	8007526 <AT_ESP8266_ND+0xbea>
	{
		AT_decode=at_ok;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND OK\r\n");
 8006dd6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006dda:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	220b      	movs	r2, #11
 8006de2:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Transmision ok
 8006de6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006dea:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8006df4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006df8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8006e02:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006e06:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8006e10:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006e14:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8006e1e:	603b      	str	r3, [r7, #0]
 8006e20:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8006e24:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8006e28:	6812      	ldr	r2, [r2, #0]
 8006e2a:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8006e2e:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8006e32:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8006e36:	6809      	ldr	r1, [r1, #0]
 8006e38:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8006e3c:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8006e40:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8006e44:	6800      	ldr	r0, [r0, #0]
 8006e46:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	9305      	str	r3, [sp, #20]
 8006e4e:	9004      	str	r0, [sp, #16]
 8006e50:	9103      	str	r1, [sp, #12]
 8006e52:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8006e56:	9102      	str	r1, [sp, #8]
 8006e58:	9201      	str	r2, [sp, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	4633      	mov	r3, r6
 8006e60:	4a38      	ldr	r2, [pc, #224]	@ (8006f44 <AT_ESP8266_ND+0x608>)
 8006e62:	4629      	mov	r1, r5
 8006e64:	4620      	mov	r0, r4
 8006e66:	f007 fd29 	bl	800e8bc <FT_String_ND>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d113      	bne.n	8006e98 <AT_ESP8266_ND+0x55c>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8006e70:	2313      	movs	r3, #19
 8006e72:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
			 a->_debug_SEND_OK++;
 8006e76:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006e7a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f8d3 3d58 	ldr.w	r3, [r3, #3416]	@ 0xd58
 8006e84:	1c5a      	adds	r2, r3, #1
 8006e86:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006e8a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f8c3 2d58 	str.w	r2, [r3, #3416]	@ 0xd58
 8006e94:	f001 badf 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
			 }
		 else
		 {
			//------------------CONFIRMO CIERRE DE  CONEXION------------------//
			a->_n_fcomp=strlen("AT+CWQAP");
 8006e98:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006e9c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2208      	movs	r2, #8
 8006ea4:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006ea8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006eac:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8006eb6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006eba:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8006ec4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006ec8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8006ed2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006ed6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8006ee0:	603b      	str	r3, [r7, #0]
 8006ee2:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8006ee6:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8006eea:	6812      	ldr	r2, [r2, #0]
 8006eec:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8006ef0:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8006ef4:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8006ef8:	6809      	ldr	r1, [r1, #0]
 8006efa:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8006efe:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8006f02:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8006f06:	6800      	ldr	r0, [r0, #0]
 8006f08:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	9305      	str	r3, [sp, #20]
 8006f10:	9004      	str	r0, [sp, #16]
 8006f12:	9103      	str	r1, [sp, #12]
 8006f14:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8006f18:	9102      	str	r1, [sp, #8]
 8006f1a:	9201      	str	r2, [sp, #4]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	4633      	mov	r3, r6
 8006f22:	4a09      	ldr	r2, [pc, #36]	@ (8006f48 <AT_ESP8266_ND+0x60c>)
 8006f24:	4629      	mov	r1, r5
 8006f26:	4620      	mov	r0, r4
 8006f28:	f007 fcc8 	bl	800e8bc <FT_String_ND>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d10c      	bne.n	8006f4c <AT_ESP8266_ND+0x610>
				{
				AT_decode=at_deconectar_ok;
 8006f32:	230d      	movs	r3, #13
 8006f34:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8006f38:	f001 ba8d 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
 8006f3c:	08010ac4 	.word	0x08010ac4
 8006f40:	08010acc 	.word	0x08010acc
 8006f44:	08010ad4 	.word	0x08010ad4
 8006f48:	08010ae0 	.word	0x08010ae0
				}
			else
			{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 8006f4c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006f50:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	220a      	movs	r2, #10
 8006f58:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8006f5c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006f60:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8006f6a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006f6e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8006f78:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006f7c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8006f86:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006f8a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8006f94:	603b      	str	r3, [r7, #0]
 8006f96:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8006f9a:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8006f9e:	6812      	ldr	r2, [r2, #0]
 8006fa0:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8006fa4:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8006fa8:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8006fac:	6809      	ldr	r1, [r1, #0]
 8006fae:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8006fb2:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8006fb6:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8006fba:	6800      	ldr	r0, [r0, #0]
 8006fbc:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	9305      	str	r3, [sp, #20]
 8006fc4:	9004      	str	r0, [sp, #16]
 8006fc6:	9103      	str	r1, [sp, #12]
 8006fc8:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8006fcc:	9102      	str	r1, [sp, #8]
 8006fce:	9201      	str	r2, [sp, #4]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	4633      	mov	r3, r6
 8006fd6:	4aaa      	ldr	r2, [pc, #680]	@ (8007280 <AT_ESP8266_ND+0x944>)
 8006fd8:	4629      	mov	r1, r5
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f007 fc6e 	bl	800e8bc <FT_String_ND>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d104      	bne.n	8006ff0 <AT_ESP8266_ND+0x6b4>
					{
						AT_decode=at_cambiar_modo_ok;
 8006fe6:	231c      	movs	r3, #28
 8006fe8:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8006fec:	f001 ba33 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
					}
				else
				{
					//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
					a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8006ff0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8006ff4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	220f      	movs	r2, #15
 8006ffc:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007000:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007004:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 800700e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007012:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 800701c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007020:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 800702a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800702e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007038:	603b      	str	r3, [r7, #0]
 800703a:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800703e:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8007042:	6812      	ldr	r2, [r2, #0]
 8007044:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8007048:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 800704c:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8007050:	6809      	ldr	r1, [r1, #0]
 8007052:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8007056:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 800705a:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 800705e:	6800      	ldr	r0, [r0, #0]
 8007060:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8007064:	2300      	movs	r3, #0
 8007066:	9305      	str	r3, [sp, #20]
 8007068:	9004      	str	r0, [sp, #16]
 800706a:	9103      	str	r1, [sp, #12]
 800706c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8007070:	9102      	str	r1, [sp, #8]
 8007072:	9201      	str	r2, [sp, #4]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	4633      	mov	r3, r6
 800707a:	4a82      	ldr	r2, [pc, #520]	@ (8007284 <AT_ESP8266_ND+0x948>)
 800707c:	4629      	mov	r1, r5
 800707e:	4620      	mov	r0, r4
 8007080:	f007 fc1c 	bl	800e8bc <FT_String_ND>
 8007084:	4603      	mov	r3, r0
 8007086:	2b01      	cmp	r3, #1
 8007088:	d104      	bne.n	8007094 <AT_ESP8266_ND+0x758>
						{
							AT_decode=at_tcp_srvr_ok_noch;
 800708a:	2317      	movs	r3, #23
 800708c:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8007090:	f001 b9e1 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
						}
					else
					{
						//------------------OK PARA ENVIAR------------------//
						a->_n_fcomp=strlen("\r\n>");
 8007094:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007098:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2203      	movs	r2, #3
 80070a0:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80070a4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80070a8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 80070b2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80070b6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 80070c0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80070c4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 80070ce:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80070d2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 80070dc:	603b      	str	r3, [r7, #0]
 80070de:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80070e2:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 80070e6:	6812      	ldr	r2, [r2, #0]
 80070e8:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 80070ec:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 80070f0:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 80070f4:	6809      	ldr	r1, [r1, #0]
 80070f6:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 80070fa:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 80070fe:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8007102:	6800      	ldr	r0, [r0, #0]
 8007104:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8007108:	2300      	movs	r3, #0
 800710a:	9305      	str	r3, [sp, #20]
 800710c:	9004      	str	r0, [sp, #16]
 800710e:	9103      	str	r1, [sp, #12]
 8007110:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8007114:	9102      	str	r1, [sp, #8]
 8007116:	9201      	str	r2, [sp, #4]
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	9300      	str	r3, [sp, #0]
 800711c:	4633      	mov	r3, r6
 800711e:	4a5a      	ldr	r2, [pc, #360]	@ (8007288 <AT_ESP8266_ND+0x94c>)
 8007120:	4629      	mov	r1, r5
 8007122:	4620      	mov	r0, r4
 8007124:	f007 fbca 	bl	800e8bc <FT_String_ND>
 8007128:	4603      	mov	r3, r0
 800712a:	2b01      	cmp	r3, #1
 800712c:	d104      	bne.n	8007138 <AT_ESP8266_ND+0x7fc>
							{
								AT_decode=at_tcp_ok_to_send;
 800712e:	2314      	movs	r3, #20
 8007130:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8007134:	f001 b98f 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
							}
						else
						{
							//------------------OK SERVIDOR------------------//
							a->_n_fcomp=strlen("AT+CIPSERVER");
 8007138:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800713c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	220c      	movs	r2, #12
 8007144:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007148:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800714c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8007156:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800715a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8007164:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007168:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8007172:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007176:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007180:	603b      	str	r3, [r7, #0]
 8007182:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007186:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 800718a:	6812      	ldr	r2, [r2, #0]
 800718c:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8007190:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007194:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8007198:	6809      	ldr	r1, [r1, #0]
 800719a:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 800719e:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 80071a2:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 80071a6:	6800      	ldr	r0, [r0, #0]
 80071a8:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 80071ac:	2300      	movs	r3, #0
 80071ae:	9305      	str	r3, [sp, #20]
 80071b0:	9004      	str	r0, [sp, #16]
 80071b2:	9103      	str	r1, [sp, #12]
 80071b4:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80071b8:	9102      	str	r1, [sp, #8]
 80071ba:	9201      	str	r2, [sp, #4]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	4633      	mov	r3, r6
 80071c2:	4a32      	ldr	r2, [pc, #200]	@ (800728c <AT_ESP8266_ND+0x950>)
 80071c4:	4629      	mov	r1, r5
 80071c6:	4620      	mov	r0, r4
 80071c8:	f007 fb78 	bl	800e8bc <FT_String_ND>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d104      	bne.n	80071dc <AT_ESP8266_ND+0x8a0>
							{
								AT_decode=at_tcp_srvr_ok;
 80071d2:	2315      	movs	r3, #21
 80071d4:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 80071d8:	f001 b93d 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
							}
							else
							{
								//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
								a->_n_fcomp=strlen("AT+CIPCLOSE");
 80071dc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80071e0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	220b      	movs	r2, #11
 80071e8:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
								if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80071ec:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80071f0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 80071fa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80071fe:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8007208:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800720c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8007216:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800721a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007224:	603b      	str	r3, [r7, #0]
 8007226:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800722a:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 800722e:	6812      	ldr	r2, [r2, #0]
 8007230:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8007234:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007238:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 800723c:	6809      	ldr	r1, [r1, #0]
 800723e:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8007242:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8007246:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 800724a:	6800      	ldr	r0, [r0, #0]
 800724c:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8007250:	2300      	movs	r3, #0
 8007252:	9305      	str	r3, [sp, #20]
 8007254:	9004      	str	r0, [sp, #16]
 8007256:	9103      	str	r1, [sp, #12]
 8007258:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800725c:	9102      	str	r1, [sp, #8]
 800725e:	9201      	str	r2, [sp, #4]
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	4633      	mov	r3, r6
 8007266:	4a0a      	ldr	r2, [pc, #40]	@ (8007290 <AT_ESP8266_ND+0x954>)
 8007268:	4629      	mov	r1, r5
 800726a:	4620      	mov	r0, r4
 800726c:	f007 fb26 	bl	800e8bc <FT_String_ND>
 8007270:	4603      	mov	r3, r0
 8007272:	2b01      	cmp	r3, #1
 8007274:	d10e      	bne.n	8007294 <AT_ESP8266_ND+0x958>
									{
										AT_decode=at_tcp_closed_ok;
 8007276:	2309      	movs	r3, #9
 8007278:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 800727c:	f001 b8eb 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
 8007280:	08010aec 	.word	0x08010aec
 8007284:	08010af8 	.word	0x08010af8
 8007288:	08010b08 	.word	0x08010b08
 800728c:	08010b0c 	.word	0x08010b0c
 8007290:	08010b1c 	.word	0x08010b1c
									}
								else
								{
									//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
									a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007294:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007298:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	220b      	movs	r2, #11
 80072a0:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
									if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80072a4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80072a8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 80072b2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80072b6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 80072c0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80072c4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 80072ce:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80072d2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 80072dc:	603b      	str	r3, [r7, #0]
 80072de:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80072e2:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 80072e6:	6812      	ldr	r2, [r2, #0]
 80072e8:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 80072ec:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 80072f0:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 80072f4:	6809      	ldr	r1, [r1, #0]
 80072f6:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 80072fa:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 80072fe:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8007302:	6800      	ldr	r0, [r0, #0]
 8007304:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8007308:	2300      	movs	r3, #0
 800730a:	9305      	str	r3, [sp, #20]
 800730c:	9004      	str	r0, [sp, #16]
 800730e:	9103      	str	r1, [sp, #12]
 8007310:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8007314:	9102      	str	r1, [sp, #8]
 8007316:	9201      	str	r2, [sp, #4]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	4633      	mov	r3, r6
 800731e:	4aaf      	ldr	r2, [pc, #700]	@ (80075dc <AT_ESP8266_ND+0xca0>)
 8007320:	4629      	mov	r1, r5
 8007322:	4620      	mov	r0, r4
 8007324:	f007 faca 	bl	800e8bc <FT_String_ND>
 8007328:	4603      	mov	r3, r0
 800732a:	2b01      	cmp	r3, #1
 800732c:	d104      	bne.n	8007338 <AT_ESP8266_ND+0x9fc>
										{
											AT_decode=at_multiple_conn_ok;
 800732e:	2307      	movs	r3, #7
 8007330:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8007334:	f001 b88f 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
										}
									else
									{
										//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
										a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007338:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800733c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	220b      	movs	r2, #11
 8007344:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
										if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007348:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800734c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8007356:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800735a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8007364:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007368:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8007372:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007376:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007380:	603b      	str	r3, [r7, #0]
 8007382:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007386:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 800738a:	6812      	ldr	r2, [r2, #0]
 800738c:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8007390:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007394:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8007398:	6809      	ldr	r1, [r1, #0]
 800739a:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 800739e:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 80073a2:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 80073a6:	6800      	ldr	r0, [r0, #0]
 80073a8:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 80073ac:	2300      	movs	r3, #0
 80073ae:	9305      	str	r3, [sp, #20]
 80073b0:	9004      	str	r0, [sp, #16]
 80073b2:	9103      	str	r1, [sp, #12]
 80073b4:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80073b8:	9102      	str	r1, [sp, #8]
 80073ba:	9201      	str	r2, [sp, #4]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	4633      	mov	r3, r6
 80073c2:	4a87      	ldr	r2, [pc, #540]	@ (80075e0 <AT_ESP8266_ND+0xca4>)
 80073c4:	4629      	mov	r1, r5
 80073c6:	4620      	mov	r0, r4
 80073c8:	f007 fa78 	bl	800e8bc <FT_String_ND>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d104      	bne.n	80073dc <AT_ESP8266_ND+0xaa0>
											{
												AT_decode=at_no_multiple_conn_ok;
 80073d2:	2308      	movs	r3, #8
 80073d4:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 80073d8:	f001 b83d 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
											}
										else
										{
											//------------------DEFIIR IP OK------------------//
											a->_n_fcomp=strlen("AT+CIPSTA=");
 80073dc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80073e0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	220a      	movs	r2, #10
 80073e8:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
											if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80073ec:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80073f0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 80073fa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80073fe:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8007408:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800740c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8007416:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800741a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007424:	603b      	str	r3, [r7, #0]
 8007426:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800742a:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 800742e:	6812      	ldr	r2, [r2, #0]
 8007430:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8007434:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007438:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 800743c:	6809      	ldr	r1, [r1, #0]
 800743e:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8007442:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8007446:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 800744a:	6800      	ldr	r0, [r0, #0]
 800744c:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8007450:	2300      	movs	r3, #0
 8007452:	9305      	str	r3, [sp, #20]
 8007454:	9004      	str	r0, [sp, #16]
 8007456:	9103      	str	r1, [sp, #12]
 8007458:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800745c:	9102      	str	r1, [sp, #8]
 800745e:	9201      	str	r2, [sp, #4]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	4633      	mov	r3, r6
 8007466:	4a5f      	ldr	r2, [pc, #380]	@ (80075e4 <AT_ESP8266_ND+0xca8>)
 8007468:	4629      	mov	r1, r5
 800746a:	4620      	mov	r0, r4
 800746c:	f007 fa26 	bl	800e8bc <FT_String_ND>
 8007470:	4603      	mov	r3, r0
 8007472:	2b01      	cmp	r3, #1
 8007474:	d104      	bne.n	8007480 <AT_ESP8266_ND+0xb44>
												{
													AT_decode=at_def_ip_ok;
 8007476:	231b      	movs	r3, #27
 8007478:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 800747c:	f000 bfeb 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
												}
											else
											{
										//------------------TCP CONECTADO------------------//
										a->_n_fcomp=strlen("CONNECT");
 8007480:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007484:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2207      	movs	r2, #7
 800748c:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
										if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007490:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007494:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 800749e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80074a2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 80074ac:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80074b0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 80074ba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80074be:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 80074c8:	603b      	str	r3, [r7, #0]
 80074ca:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80074ce:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 80074d2:	6812      	ldr	r2, [r2, #0]
 80074d4:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 80074d8:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 80074dc:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 80074e0:	6809      	ldr	r1, [r1, #0]
 80074e2:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 80074e6:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 80074ea:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 80074ee:	6800      	ldr	r0, [r0, #0]
 80074f0:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 80074f4:	2300      	movs	r3, #0
 80074f6:	9305      	str	r3, [sp, #20]
 80074f8:	9004      	str	r0, [sp, #16]
 80074fa:	9103      	str	r1, [sp, #12]
 80074fc:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8007500:	9102      	str	r1, [sp, #8]
 8007502:	9201      	str	r2, [sp, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	4633      	mov	r3, r6
 800750a:	4a37      	ldr	r2, [pc, #220]	@ (80075e8 <AT_ESP8266_ND+0xcac>)
 800750c:	4629      	mov	r1, r5
 800750e:	4620      	mov	r0, r4
 8007510:	f007 f9d4 	bl	800e8bc <FT_String_ND>
 8007514:	4603      	mov	r3, r0
 8007516:	2b01      	cmp	r3, #1
 8007518:	f040 879d 	bne.w	8008456 <AT_ESP8266_ND+0x1b1a>
											{
											AT_decode=at_tcp_conectado;
 800751c:	230f      	movs	r3, #15
 800751e:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8007522:	f000 bf98 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\nCLOSED\r\n");
 8007526:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800752a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	220f      	movs	r2, #15
 8007532:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\nCLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007536:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800753a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8007544:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007548:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8007552:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007556:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8007560:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007564:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 800756e:	603b      	str	r3, [r7, #0]
 8007570:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007574:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8007578:	6812      	ldr	r2, [r2, #0]
 800757a:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 800757e:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007582:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8007586:	6809      	ldr	r1, [r1, #0]
 8007588:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 800758c:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8007590:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8007594:	6800      	ldr	r0, [r0, #0]
 8007596:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 800759a:	2300      	movs	r3, #0
 800759c:	9305      	str	r3, [sp, #20]
 800759e:	9004      	str	r0, [sp, #16]
 80075a0:	9103      	str	r1, [sp, #12]
 80075a2:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80075a6:	9102      	str	r1, [sp, #8]
 80075a8:	9201      	str	r2, [sp, #4]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	4633      	mov	r3, r6
 80075b0:	4a0e      	ldr	r2, [pc, #56]	@ (80075ec <AT_ESP8266_ND+0xcb0>)
 80075b2:	4629      	mov	r1, r5
 80075b4:	4620      	mov	r0, r4
 80075b6:	f007 f981 	bl	800e8bc <FT_String_ND>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d117      	bne.n	80075f0 <AT_ESP8266_ND+0xcb4>
		{
				AT_decode=at_tcp_conn_err;
 80075c0:	2306      	movs	r3, #6
 80075c2:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("ERROR\r\nCLOSED\r\n");
 80075c6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80075ca:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	220f      	movs	r2, #15
 80075d2:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
 80075d6:	f000 bf3e 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
 80075da:	bf00      	nop
 80075dc:	08010b28 	.word	0x08010b28
 80075e0:	08010b34 	.word	0x08010b34
 80075e4:	08010b40 	.word	0x08010b40
 80075e8:	08010b4c 	.word	0x08010b4c
 80075ec:	08010b54 	.word	0x08010b54
		}
		else
		{
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Intentando conectar con servidor TCP caido
 80075f0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80075f4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 80075fe:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007602:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 800760c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007610:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 800761a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800761e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007628:	603b      	str	r3, [r7, #0]
 800762a:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800762e:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8007632:	6812      	ldr	r2, [r2, #0]
 8007634:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8007638:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 800763c:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8007640:	6809      	ldr	r1, [r1, #0]
 8007642:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8007646:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 800764a:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 800764e:	6800      	ldr	r0, [r0, #0]
 8007650:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8007654:	2300      	movs	r3, #0
 8007656:	9305      	str	r3, [sp, #20]
 8007658:	9004      	str	r0, [sp, #16]
 800765a:	9103      	str	r1, [sp, #12]
 800765c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8007660:	9102      	str	r1, [sp, #8]
 8007662:	9201      	str	r2, [sp, #4]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	4633      	mov	r3, r6
 800766a:	4aaa      	ldr	r2, [pc, #680]	@ (8007914 <AT_ESP8266_ND+0xfd8>)
 800766c:	4629      	mov	r1, r5
 800766e:	4620      	mov	r0, r4
 8007670:	f007 f924 	bl	800e8bc <FT_String_ND>
 8007674:	4603      	mov	r3, r0
 8007676:	2b01      	cmp	r3, #1
 8007678:	d104      	bne.n	8007684 <AT_ESP8266_ND+0xd48>
			{
					AT_decode=at_error;
 800767a:	2302      	movs	r3, #2
 800767c:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8007680:	f000 bee9 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
			}
			 else
			 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 8007684:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007688:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2215      	movs	r2, #21
 8007690:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007694:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007698:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 80076a2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80076a6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 80076b0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80076b4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 80076be:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80076c2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 80076cc:	603b      	str	r3, [r7, #0]
 80076ce:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80076d2:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 80076d6:	6812      	ldr	r2, [r2, #0]
 80076d8:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 80076dc:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 80076e0:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 80076e4:	6809      	ldr	r1, [r1, #0]
 80076e6:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 80076ea:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 80076ee:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 80076f2:	6800      	ldr	r0, [r0, #0]
 80076f4:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 80076f8:	2300      	movs	r3, #0
 80076fa:	9305      	str	r3, [sp, #20]
 80076fc:	9004      	str	r0, [sp, #16]
 80076fe:	9103      	str	r1, [sp, #12]
 8007700:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8007704:	9102      	str	r1, [sp, #8]
 8007706:	9201      	str	r2, [sp, #4]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	4633      	mov	r3, r6
 800770e:	4a82      	ldr	r2, [pc, #520]	@ (8007918 <AT_ESP8266_ND+0xfdc>)
 8007710:	4629      	mov	r1, r5
 8007712:	4620      	mov	r0, r4
 8007714:	f007 f8d2 	bl	800e8bc <FT_String_ND>
 8007718:	4603      	mov	r3, r0
 800771a:	2b01      	cmp	r3, #1
 800771c:	d104      	bne.n	8007728 <AT_ESP8266_ND+0xdec>
				{
						AT_decode=at_tcp_alrdy_cnntd_err;
 800771e:	230e      	movs	r3, #14
 8007720:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8007724:	f000 be97 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
				}
				else
				{
					//------------------OK PARA ENVIAR------------------//
					a->_n_fcomp=strlen("AT+CIPSERVER");
 8007728:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800772c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	220c      	movs	r2, #12
 8007734:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
					if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007738:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800773c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8007746:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800774a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8007754:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007758:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8007762:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007766:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007770:	603b      	str	r3, [r7, #0]
 8007772:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007776:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 800777a:	6812      	ldr	r2, [r2, #0]
 800777c:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8007780:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007784:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8007788:	6809      	ldr	r1, [r1, #0]
 800778a:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 800778e:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8007792:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8007796:	6800      	ldr	r0, [r0, #0]
 8007798:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 800779c:	2300      	movs	r3, #0
 800779e:	9305      	str	r3, [sp, #20]
 80077a0:	9004      	str	r0, [sp, #16]
 80077a2:	9103      	str	r1, [sp, #12]
 80077a4:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80077a8:	9102      	str	r1, [sp, #8]
 80077aa:	9201      	str	r2, [sp, #4]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	4633      	mov	r3, r6
 80077b2:	4a5a      	ldr	r2, [pc, #360]	@ (800791c <AT_ESP8266_ND+0xfe0>)
 80077b4:	4629      	mov	r1, r5
 80077b6:	4620      	mov	r0, r4
 80077b8:	f007 f880 	bl	800e8bc <FT_String_ND>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d104      	bne.n	80077cc <AT_ESP8266_ND+0xe90>
					{
						AT_decode=at_tcp_srvr_err;
 80077c2:	2316      	movs	r3, #22
 80077c4:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 80077c8:	f000 be45 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
					}
					else
					{
						//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
						a->_n_fcomp=strlen("AT+CIPCLOSE");
 80077cc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80077d0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	220b      	movs	r2, #11
 80077d8:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
						if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 80077dc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80077e0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 80077ea:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80077ee:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 80077f8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80077fc:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8007806:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800780a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007814:	603b      	str	r3, [r7, #0]
 8007816:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800781a:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 800781e:	6812      	ldr	r2, [r2, #0]
 8007820:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8007824:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007828:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 800782c:	6809      	ldr	r1, [r1, #0]
 800782e:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8007832:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8007836:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 800783a:	6800      	ldr	r0, [r0, #0]
 800783c:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8007840:	2300      	movs	r3, #0
 8007842:	9305      	str	r3, [sp, #20]
 8007844:	9004      	str	r0, [sp, #16]
 8007846:	9103      	str	r1, [sp, #12]
 8007848:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800784c:	9102      	str	r1, [sp, #8]
 800784e:	9201      	str	r2, [sp, #4]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	4633      	mov	r3, r6
 8007856:	4a32      	ldr	r2, [pc, #200]	@ (8007920 <AT_ESP8266_ND+0xfe4>)
 8007858:	4629      	mov	r1, r5
 800785a:	4620      	mov	r0, r4
 800785c:	f007 f82e 	bl	800e8bc <FT_String_ND>
 8007860:	4603      	mov	r3, r0
 8007862:	2b01      	cmp	r3, #1
 8007864:	d104      	bne.n	8007870 <AT_ESP8266_ND+0xf34>
							{
								AT_decode=at_tcp_close_err;
 8007866:	231a      	movs	r3, #26
 8007868:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 800786c:	f000 bdf3 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
							}
						else
							{
							//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
							a->_n_fcomp=strlen("link is not valid");
 8007870:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007874:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2211      	movs	r2, #17
 800787c:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007880:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007884:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 800788e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007892:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 800789c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80078a0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 80078aa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80078ae:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 80078b8:	603b      	str	r3, [r7, #0]
 80078ba:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80078be:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 80078c2:	6812      	ldr	r2, [r2, #0]
 80078c4:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 80078c8:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 80078cc:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 80078d0:	6809      	ldr	r1, [r1, #0]
 80078d2:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 80078d6:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 80078da:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 80078de:	6800      	ldr	r0, [r0, #0]
 80078e0:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 80078e4:	2300      	movs	r3, #0
 80078e6:	9305      	str	r3, [sp, #20]
 80078e8:	9004      	str	r0, [sp, #16]
 80078ea:	9103      	str	r1, [sp, #12]
 80078ec:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80078f0:	9102      	str	r1, [sp, #8]
 80078f2:	9201      	str	r2, [sp, #4]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	4633      	mov	r3, r6
 80078fa:	4a0a      	ldr	r2, [pc, #40]	@ (8007924 <AT_ESP8266_ND+0xfe8>)
 80078fc:	4629      	mov	r1, r5
 80078fe:	4620      	mov	r0, r4
 8007900:	f006 ffdc 	bl	800e8bc <FT_String_ND>
 8007904:	4603      	mov	r3, r0
 8007906:	2b01      	cmp	r3, #1
 8007908:	d10e      	bne.n	8007928 <AT_ESP8266_ND+0xfec>
								{
									AT_decode=at_tcp_snd_err;
 800790a:	2311      	movs	r3, #17
 800790c:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8007910:	f000 bda1 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
 8007914:	08010b64 	.word	0x08010b64
 8007918:	08010b6c 	.word	0x08010b6c
 800791c:	08010b0c 	.word	0x08010b0c
 8007920:	08010b1c 	.word	0x08010b1c
 8007924:	08010b84 	.word	0x08010b84
								}
							else
								{
								//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
								a->_n_fcomp=strlen("AT+CWMODE=");
 8007928:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800792c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	220a      	movs	r2, #10
 8007934:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
								if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007938:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800793c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8007946:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800794a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8007954:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007958:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8007962:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007966:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007970:	603b      	str	r3, [r7, #0]
 8007972:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007976:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 800797a:	6812      	ldr	r2, [r2, #0]
 800797c:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8007980:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007984:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8007988:	6809      	ldr	r1, [r1, #0]
 800798a:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 800798e:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8007992:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8007996:	6800      	ldr	r0, [r0, #0]
 8007998:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 800799c:	2300      	movs	r3, #0
 800799e:	9305      	str	r3, [sp, #20]
 80079a0:	9004      	str	r0, [sp, #16]
 80079a2:	9103      	str	r1, [sp, #12]
 80079a4:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80079a8:	9102      	str	r1, [sp, #8]
 80079aa:	9201      	str	r2, [sp, #4]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	4633      	mov	r3, r6
 80079b2:	4aa8      	ldr	r2, [pc, #672]	@ (8007c54 <AT_ESP8266_ND+0x1318>)
 80079b4:	4629      	mov	r1, r5
 80079b6:	4620      	mov	r0, r4
 80079b8:	f006 ff80 	bl	800e8bc <FT_String_ND>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d104      	bne.n	80079cc <AT_ESP8266_ND+0x1090>
									{
										AT_decode=at_cambiar_modo_err;
 80079c2:	231d      	movs	r3, #29
 80079c4:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 80079c8:	f000 bd45 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
									}
								else
								{
									//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
									a->_n_fcomp=strlen("AT+CIPMUX=1");
 80079cc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80079d0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	220b      	movs	r2, #11
 80079d8:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
									if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80079dc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80079e0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 80079ea:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80079ee:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 80079f8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80079fc:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8007a06:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007a0a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007a14:	603b      	str	r3, [r7, #0]
 8007a16:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007a1a:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8007a1e:	6812      	ldr	r2, [r2, #0]
 8007a20:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8007a24:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007a28:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8007a2c:	6809      	ldr	r1, [r1, #0]
 8007a2e:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8007a32:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8007a36:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8007a3a:	6800      	ldr	r0, [r0, #0]
 8007a3c:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8007a40:	2300      	movs	r3, #0
 8007a42:	9305      	str	r3, [sp, #20]
 8007a44:	9004      	str	r0, [sp, #16]
 8007a46:	9103      	str	r1, [sp, #12]
 8007a48:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8007a4c:	9102      	str	r1, [sp, #8]
 8007a4e:	9201      	str	r2, [sp, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	4633      	mov	r3, r6
 8007a56:	4a80      	ldr	r2, [pc, #512]	@ (8007c58 <AT_ESP8266_ND+0x131c>)
 8007a58:	4629      	mov	r1, r5
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f006 ff2e 	bl	800e8bc <FT_String_ND>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d104      	bne.n	8007a70 <AT_ESP8266_ND+0x1134>
										{
											AT_decode=at_multiple_conn_err;
 8007a66:	231e      	movs	r3, #30
 8007a68:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8007a6c:	f000 bcf3 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
										}
									else
									{
										//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
										a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007a70:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007a74:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	220b      	movs	r2, #11
 8007a7c:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
										if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007a80:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007a84:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8007a8e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007a92:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8007a9c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007aa0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8007aaa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007aae:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007ab8:	603b      	str	r3, [r7, #0]
 8007aba:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007abe:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8007ac2:	6812      	ldr	r2, [r2, #0]
 8007ac4:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8007ac8:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007acc:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8007ad0:	6809      	ldr	r1, [r1, #0]
 8007ad2:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8007ad6:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8007ada:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8007ade:	6800      	ldr	r0, [r0, #0]
 8007ae0:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	9305      	str	r3, [sp, #20]
 8007ae8:	9004      	str	r0, [sp, #16]
 8007aea:	9103      	str	r1, [sp, #12]
 8007aec:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8007af0:	9102      	str	r1, [sp, #8]
 8007af2:	9201      	str	r2, [sp, #4]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	4633      	mov	r3, r6
 8007afa:	4a58      	ldr	r2, [pc, #352]	@ (8007c5c <AT_ESP8266_ND+0x1320>)
 8007afc:	4629      	mov	r1, r5
 8007afe:	4620      	mov	r0, r4
 8007b00:	f006 fedc 	bl	800e8bc <FT_String_ND>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	f000 84a5 	beq.w	8008456 <AT_ESP8266_ND+0x1b1a>
												//AT_decode=at_no_multiple_conn_err;
											}
										else
										{
											//------------------ERROR AL CONECTAR WIFI------------------//
											a->_n_fcomp=strlen("AT+CWJAP");
 8007b0c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007b10:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2208      	movs	r2, #8
 8007b18:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
											if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007b1c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007b20:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8007b2a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007b2e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8007b38:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007b3c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8007b46:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007b4a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007b54:	603b      	str	r3, [r7, #0]
 8007b56:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007b5a:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8007b5e:	6812      	ldr	r2, [r2, #0]
 8007b60:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8007b64:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007b68:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8007b6c:	6809      	ldr	r1, [r1, #0]
 8007b6e:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8007b72:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8007b76:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8007b7a:	6800      	ldr	r0, [r0, #0]
 8007b7c:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8007b80:	2300      	movs	r3, #0
 8007b82:	9305      	str	r3, [sp, #20]
 8007b84:	9004      	str	r0, [sp, #16]
 8007b86:	9103      	str	r1, [sp, #12]
 8007b88:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8007b8c:	9102      	str	r1, [sp, #8]
 8007b8e:	9201      	str	r2, [sp, #4]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	4633      	mov	r3, r6
 8007b96:	4a32      	ldr	r2, [pc, #200]	@ (8007c60 <AT_ESP8266_ND+0x1324>)
 8007b98:	4629      	mov	r1, r5
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f006 fe8e 	bl	800e8bc <FT_String_ND>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d104      	bne.n	8007bb0 <AT_ESP8266_ND+0x1274>
												{
													AT_decode=at_conn_wifi_err;
 8007ba6:	2320      	movs	r3, #32
 8007ba8:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8007bac:	f000 bc53 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
												}
											else
											{
												//------------------ERROR AL CONECTAR WIFI------------------//
												a->_n_fcomp=strlen("AT+CIPSTA=");
 8007bb0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007bb4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	220a      	movs	r2, #10
 8007bbc:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
												if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007bc0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007bc4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8007bce:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007bd2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8007bdc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007be0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8007bea:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007bee:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007bf8:	603b      	str	r3, [r7, #0]
 8007bfa:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007bfe:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8007c02:	6812      	ldr	r2, [r2, #0]
 8007c04:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8007c08:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007c0c:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8007c10:	6809      	ldr	r1, [r1, #0]
 8007c12:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8007c16:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8007c1a:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8007c1e:	6800      	ldr	r0, [r0, #0]
 8007c20:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8007c24:	2300      	movs	r3, #0
 8007c26:	9305      	str	r3, [sp, #20]
 8007c28:	9004      	str	r0, [sp, #16]
 8007c2a:	9103      	str	r1, [sp, #12]
 8007c2c:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8007c30:	9102      	str	r1, [sp, #8]
 8007c32:	9201      	str	r2, [sp, #4]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	4633      	mov	r3, r6
 8007c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8007c64 <AT_ESP8266_ND+0x1328>)
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f006 fe3c 	bl	800e8bc <FT_String_ND>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d10e      	bne.n	8007c68 <AT_ESP8266_ND+0x132c>
													{
														AT_decode=at_def_ip_err;
 8007c4a:	2321      	movs	r3, #33	@ 0x21
 8007c4c:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8007c50:	f000 bc01 	b.w	8008456 <AT_ESP8266_ND+0x1b1a>
 8007c54:	08010aec 	.word	0x08010aec
 8007c58:	08010b28 	.word	0x08010b28
 8007c5c:	08010b34 	.word	0x08010b34
 8007c60:	08010b98 	.word	0x08010b98
 8007c64:	08010b40 	.word	0x08010b40
													}
												else
												{
													//------------------ERROR AL CONECTAR WIFI------------------//
													a->_n_fcomp=strlen("no ip");
 8007c68:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007c6c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2205      	movs	r2, #5
 8007c74:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
													if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007c78:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007c7c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8007c86:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007c8a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8007c94:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007c98:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8007ca2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007ca6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007cb0:	603b      	str	r3, [r7, #0]
 8007cb2:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007cb6:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8007cba:	6812      	ldr	r2, [r2, #0]
 8007cbc:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8007cc0:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007cc4:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8007cc8:	6809      	ldr	r1, [r1, #0]
 8007cca:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8007cce:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8007cd2:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8007cd6:	6800      	ldr	r0, [r0, #0]
 8007cd8:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8007cdc:	2300      	movs	r3, #0
 8007cde:	9305      	str	r3, [sp, #20]
 8007ce0:	9004      	str	r0, [sp, #16]
 8007ce2:	9103      	str	r1, [sp, #12]
 8007ce4:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8007ce8:	9102      	str	r1, [sp, #8]
 8007cea:	9201      	str	r2, [sp, #4]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	4633      	mov	r3, r6
 8007cf2:	4abe      	ldr	r2, [pc, #760]	@ (8007fec <AT_ESP8266_ND+0x16b0>)
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f006 fde0 	bl	800e8bc <FT_String_ND>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d103      	bne.n	8007d0a <AT_ESP8266_ND+0x13ce>
														{
															AT_decode=at_tcp_noip_err;  //PROCESAR
 8007d02:	2322      	movs	r3, #34	@ 0x22
 8007d04:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8007d08:	e3a5      	b.n	8008456 <AT_ESP8266_ND+0x1b1a>
													{

														 //--------------------------------------------------------------------------------------------------------------//
														 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
														 //--------------------------------------------------------------------------------------------------------------//
														a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007d0a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007d0e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	220f      	movs	r2, #15
 8007d16:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
														if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007d1a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007d1e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8007d28:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007d2c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8007d36:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007d3a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8007d44:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007d48:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007d58:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8007d5c:	6812      	ldr	r2, [r2, #0]
 8007d5e:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8007d62:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007d66:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8007d6a:	6809      	ldr	r1, [r1, #0]
 8007d6c:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8007d70:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8007d74:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8007d78:	6800      	ldr	r0, [r0, #0]
 8007d7a:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8007d7e:	2300      	movs	r3, #0
 8007d80:	9305      	str	r3, [sp, #20]
 8007d82:	9004      	str	r0, [sp, #16]
 8007d84:	9103      	str	r1, [sp, #12]
 8007d86:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8007d8a:	9102      	str	r1, [sp, #8]
 8007d8c:	9201      	str	r2, [sp, #4]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	4633      	mov	r3, r6
 8007d94:	4a96      	ldr	r2, [pc, #600]	@ (8007ff0 <AT_ESP8266_ND+0x16b4>)
 8007d96:	4629      	mov	r1, r5
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f006 fd8f 	bl	800e8bc <FT_String_ND>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d112      	bne.n	8007dca <AT_ESP8266_ND+0x148e>
															{
																 AT_decode=at_wifi_disconnect;
 8007da4:	230a      	movs	r3, #10
 8007da6:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
																 a->_debug_WF_DISCONNECT++;
 8007daa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007dae:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f8d3 3d64 	ldr.w	r3, [r3, #3428]	@ 0xd64
 8007db8:	1c5a      	adds	r2, r3, #1
 8007dba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007dbe:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f8c3 2d64 	str.w	r2, [r3, #3428]	@ 0xd64
 8007dc8:	e345      	b.n	8008456 <AT_ESP8266_ND+0x1b1a>
															}
														else
														{
															//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
															a->_n_fcomp=strlen(",CLOSED\r\n");
 8007dca:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007dce:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2209      	movs	r2, #9
 8007dd6:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
															if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007dda:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007dde:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8007de8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007dec:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8007df6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007dfa:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8007e04:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007e08:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007e12:	603b      	str	r3, [r7, #0]
 8007e14:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007e18:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8007e1c:	6812      	ldr	r2, [r2, #0]
 8007e1e:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8007e22:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007e26:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8007e2a:	6809      	ldr	r1, [r1, #0]
 8007e2c:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8007e30:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8007e34:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8007e38:	6800      	ldr	r0, [r0, #0]
 8007e3a:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8007e3e:	2300      	movs	r3, #0
 8007e40:	9305      	str	r3, [sp, #20]
 8007e42:	9004      	str	r0, [sp, #16]
 8007e44:	9103      	str	r1, [sp, #12]
 8007e46:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8007e4a:	9102      	str	r1, [sp, #8]
 8007e4c:	9201      	str	r2, [sp, #4]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	4633      	mov	r3, r6
 8007e54:	4a67      	ldr	r2, [pc, #412]	@ (8007ff4 <AT_ESP8266_ND+0x16b8>)
 8007e56:	4629      	mov	r1, r5
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f006 fd2f 	bl	800e8bc <FT_String_ND>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d112      	bne.n	8007e8a <AT_ESP8266_ND+0x154e>
																{
																	AT_decode=at_tcp_client_desc;
 8007e64:	2319      	movs	r3, #25
 8007e66:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
																	a->_debug_CLOSED++;
 8007e6a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007e6e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f8d3 3d60 	ldr.w	r3, [r3, #3424]	@ 0xd60
 8007e78:	1c5a      	adds	r2, r3, #1
 8007e7a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007e7e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f8c3 2d60 	str.w	r2, [r3, #3424]	@ 0xd60
 8007e88:	e2e5      	b.n	8008456 <AT_ESP8266_ND+0x1b1a>
																//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
																// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
																// primero ve el SEND OKse queda en el estado 705 por error al     //
																//  enviar														  //
																//-----------------------------------------------------------------//
																a->_n_fcomp=strlen("CLOSED\r\n");
 8007e8a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007e8e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2208      	movs	r2, #8
 8007e96:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
																if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007e9a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007e9e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8007ea8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007eac:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8007eb6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007eba:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8007ec4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007ec8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007ed2:	603b      	str	r3, [r7, #0]
 8007ed4:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007ed8:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8007ee2:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007ee6:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8007eea:	6809      	ldr	r1, [r1, #0]
 8007eec:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8007ef0:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8007ef4:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8007ef8:	6800      	ldr	r0, [r0, #0]
 8007efa:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8007efe:	2300      	movs	r3, #0
 8007f00:	9305      	str	r3, [sp, #20]
 8007f02:	9004      	str	r0, [sp, #16]
 8007f04:	9103      	str	r1, [sp, #12]
 8007f06:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8007f0a:	9102      	str	r1, [sp, #8]
 8007f0c:	9201      	str	r2, [sp, #4]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	4633      	mov	r3, r6
 8007f14:	4a38      	ldr	r2, [pc, #224]	@ (8007ff8 <AT_ESP8266_ND+0x16bc>)
 8007f16:	4629      	mov	r1, r5
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f006 fccf 	bl	800e8bc <FT_String_ND>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d103      	bne.n	8007f2c <AT_ESP8266_ND+0x15f0>
																	{
																		AT_decode=at_tcp_desconectado;
 8007f24:	2310      	movs	r3, #16
 8007f26:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8007f2a:	e294      	b.n	8008456 <AT_ESP8266_ND+0x1b1a>
																	}
																else
																{

																	//------------------ENVIADO = RECIBIDO ------------------//
																	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007f2c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007f30:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 8007f3a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007f3e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8007f48:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007f4c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f503 6698 	add.w	r6, r3, #1216	@ 0x4c0
 8007f56:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007f5a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f503 6c51 	add.w	ip, r3, #3344	@ 0xd10
 8007f64:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007f68:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8007f72:	603b      	str	r3, [r7, #0]
 8007f74:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007f78:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8007f7c:	6812      	ldr	r2, [r2, #0]
 8007f7e:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8007f82:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8007f86:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8007f8a:	6809      	ldr	r1, [r1, #0]
 8007f8c:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8007f90:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8007f94:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8007f98:	6800      	ldr	r0, [r0, #0]
 8007f9a:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	9305      	str	r3, [sp, #20]
 8007fa2:	9004      	str	r0, [sp, #16]
 8007fa4:	9103      	str	r1, [sp, #12]
 8007fa6:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8007faa:	9102      	str	r1, [sp, #8]
 8007fac:	9201      	str	r2, [sp, #4]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	4663      	mov	r3, ip
 8007fb4:	4632      	mov	r2, r6
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f006 fc7f 	bl	800e8bc <FT_String_ND>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d11b      	bne.n	8007ffc <AT_ESP8266_ND+0x16c0>
																		 {
																			if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8007fc4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007fc8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f893 36c0 	ldrb.w	r3, [r3, #1728]	@ 0x6c0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f000 823f 	beq.w	8008456 <AT_ESP8266_ND+0x1b1a>
																				{
																				//AT_decode=10;
																				a->_n_orig=0;
 8007fd8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007fdc:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
 8007fe8:	e235      	b.n	8008456 <AT_ESP8266_ND+0x1b1a>
 8007fea:	bf00      	nop
 8007fec:	08010ba4 	.word	0x08010ba4
 8007ff0:	08010bac 	.word	0x08010bac
 8007ff4:	08010bbc 	.word	0x08010bbc
 8007ff8:	08010bc8 	.word	0x08010bc8
																				}
																			}
																	else
																	{
																		//------------------PAQUETE ENVIADO EN FALLA--------------//
																		a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007ffc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008000:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	220d      	movs	r2, #13
 8008008:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
																		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 800800c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008010:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 800801a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800801e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8008028:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800802c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8008036:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800803a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8008044:	603b      	str	r3, [r7, #0]
 8008046:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800804a:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 800804e:	6812      	ldr	r2, [r2, #0]
 8008050:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8008054:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8008058:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 800805c:	6809      	ldr	r1, [r1, #0]
 800805e:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8008062:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8008066:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 800806a:	6800      	ldr	r0, [r0, #0]
 800806c:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8008070:	2300      	movs	r3, #0
 8008072:	9305      	str	r3, [sp, #20]
 8008074:	9004      	str	r0, [sp, #16]
 8008076:	9103      	str	r1, [sp, #12]
 8008078:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800807c:	9102      	str	r1, [sp, #8]
 800807e:	9201      	str	r2, [sp, #4]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	4633      	mov	r3, r6
 8008086:	4ac6      	ldr	r2, [pc, #792]	@ (80083a0 <AT_ESP8266_ND+0x1a64>)
 8008088:	4629      	mov	r1, r5
 800808a:	4620      	mov	r0, r4
 800808c:	f006 fc16 	bl	800e8bc <FT_String_ND>
 8008090:	4603      	mov	r3, r0
 8008092:	2b01      	cmp	r3, #1
 8008094:	d112      	bne.n	80080bc <AT_ESP8266_ND+0x1780>
																			{
																			 AT_decode=at_tcp_enviado_error;
 8008096:	2312      	movs	r3, #18
 8008098:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
																			 a->_debug_FAIL++;
 800809c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80080a0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f8d3 3d68 	ldr.w	r3, [r3, #3432]	@ 0xd68
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80080b0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f8c3 2d68 	str.w	r2, [r3, #3432]	@ 0xd68
 80080ba:	e1cc      	b.n	8008456 <AT_ESP8266_ND+0x1b1a>



																			//------------------OBTENCI�N DE IP------------------//
																			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
																			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 80080bc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80080c0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	220d      	movs	r2, #13
 80080c8:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
																			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Obtiene IP
 80080cc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80080d0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 80080da:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80080de:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 80080e8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80080ec:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 80080f6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80080fa:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8008104:	603b      	str	r3, [r7, #0]
 8008106:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800810a:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 800810e:	6812      	ldr	r2, [r2, #0]
 8008110:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8008114:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8008118:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 800811c:	6809      	ldr	r1, [r1, #0]
 800811e:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8008122:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8008126:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 800812a:	6800      	ldr	r0, [r0, #0]
 800812c:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8008130:	2300      	movs	r3, #0
 8008132:	9305      	str	r3, [sp, #20]
 8008134:	9004      	str	r0, [sp, #16]
 8008136:	9103      	str	r1, [sp, #12]
 8008138:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800813c:	9102      	str	r1, [sp, #8]
 800813e:	9201      	str	r2, [sp, #4]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	4633      	mov	r3, r6
 8008146:	4a97      	ldr	r2, [pc, #604]	@ (80083a4 <AT_ESP8266_ND+0x1a68>)
 8008148:	4629      	mov	r1, r5
 800814a:	4620      	mov	r0, r4
 800814c:	f006 fbb6 	bl	800e8bc <FT_String_ND>
 8008150:	4603      	mov	r3, r0
 8008152:	2b01      	cmp	r3, #1
 8008154:	d112      	bne.n	800817c <AT_ESP8266_ND+0x1840>
																				{
																					a->_debug_WF_GOTIP++;
 8008156:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800815a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f8d3 3d74 	ldr.w	r3, [r3, #3444]	@ 0xd74
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800816a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f8c3 2d74 	str.w	r2, [r3, #3444]	@ 0xd74
																					AT_decode=at_wifi_gotip;
 8008174:	230c      	movs	r3, #12
 8008176:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 800817a:	e16c      	b.n	8008456 <AT_ESP8266_ND+0x1b1a>
																				}
																			else
																			{
																					//------------------WIFI CONECTADA------------------//
																				a->_n_fcomp=strlen("WIFI CONNECTED");
 800817c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008180:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	220e      	movs	r2, #14
 8008188:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
																				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//WIFI CONECTADA
 800818c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008190:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 800819a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800819e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 80081a8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80081ac:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 80081b6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80081ba:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 80081c4:	603b      	str	r3, [r7, #0]
 80081c6:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80081ca:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 80081ce:	6812      	ldr	r2, [r2, #0]
 80081d0:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 80081d4:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 80081d8:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 80081dc:	6809      	ldr	r1, [r1, #0]
 80081de:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 80081e2:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 80081e6:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 80081ea:	6800      	ldr	r0, [r0, #0]
 80081ec:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 80081f0:	2300      	movs	r3, #0
 80081f2:	9305      	str	r3, [sp, #20]
 80081f4:	9004      	str	r0, [sp, #16]
 80081f6:	9103      	str	r1, [sp, #12]
 80081f8:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80081fc:	9102      	str	r1, [sp, #8]
 80081fe:	9201      	str	r2, [sp, #4]
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	4633      	mov	r3, r6
 8008206:	4a68      	ldr	r2, [pc, #416]	@ (80083a8 <AT_ESP8266_ND+0x1a6c>)
 8008208:	4629      	mov	r1, r5
 800820a:	4620      	mov	r0, r4
 800820c:	f006 fb56 	bl	800e8bc <FT_String_ND>
 8008210:	4603      	mov	r3, r0
 8008212:	2b01      	cmp	r3, #1
 8008214:	d112      	bne.n	800823c <AT_ESP8266_ND+0x1900>
																					{
																						a->_debug_WF_CNNCTD++;
 8008216:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800821a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f8d3 3d70 	ldr.w	r3, [r3, #3440]	@ 0xd70
 8008224:	1c5a      	adds	r2, r3, #1
 8008226:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800822a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f8c3 2d70 	str.w	r2, [r3, #3440]	@ 0xd70
																							 AT_decode=at_wifi_connected;
 8008234:	230b      	movs	r3, #11
 8008236:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 800823a:	e10c      	b.n	8008456 <AT_ESP8266_ND+0x1b1a>
																					}
																				else
																				{

																					//------------------CLIENTE TCP CONECTADO------------------//
																					a->_n_fcomp=strlen(",CONNECT\r\n");
 800823c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008240:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	220a      	movs	r2, #10
 8008248:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
																					if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 800824c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008250:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 800825a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800825e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8008268:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800826c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8008276:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800827a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8008284:	603b      	str	r3, [r7, #0]
 8008286:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800828a:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 800828e:	6812      	ldr	r2, [r2, #0]
 8008290:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8008294:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8008298:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 800829c:	6809      	ldr	r1, [r1, #0]
 800829e:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 80082a2:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 80082a6:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 80082aa:	6800      	ldr	r0, [r0, #0]
 80082ac:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 80082b0:	2300      	movs	r3, #0
 80082b2:	9305      	str	r3, [sp, #20]
 80082b4:	9004      	str	r0, [sp, #16]
 80082b6:	9103      	str	r1, [sp, #12]
 80082b8:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 80082bc:	9102      	str	r1, [sp, #8]
 80082be:	9201      	str	r2, [sp, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	4633      	mov	r3, r6
 80082c6:	4a39      	ldr	r2, [pc, #228]	@ (80083ac <AT_ESP8266_ND+0x1a70>)
 80082c8:	4629      	mov	r1, r5
 80082ca:	4620      	mov	r0, r4
 80082cc:	f006 faf6 	bl	800e8bc <FT_String_ND>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d112      	bne.n	80082fc <AT_ESP8266_ND+0x19c0>
																						  {
																							  AT_decode=at_tcp_client_conectado;
 80082d6:	2318      	movs	r3, #24
 80082d8:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
																							  a->_debug_CONNECT++;
 80082dc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80082e0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f8d3 3d5c 	ldr.w	r3, [r3, #3420]	@ 0xd5c
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80082f0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f8c3 2d5c 	str.w	r2, [r3, #3420]	@ 0xd5c
 80082fa:	e0ac      	b.n	8008456 <AT_ESP8266_ND+0x1b1a>
																						  }
																					else
																					{

																						//------------------FALLA------------------//
																						a->_n_fcomp=strlen("\r\nFAIL\r\n");
 80082fc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008300:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2208      	movs	r2, #8
 8008308:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
																							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 800830c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008310:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 800831a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800831e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 8008328:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800832c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 8008336:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800833a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 8008344:	603b      	str	r3, [r7, #0]
 8008346:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800834a:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 800834e:	6812      	ldr	r2, [r2, #0]
 8008350:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 8008354:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8008358:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 800835c:	6809      	ldr	r1, [r1, #0]
 800835e:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 8008362:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 8008366:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 800836a:	6800      	ldr	r0, [r0, #0]
 800836c:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8008370:	2300      	movs	r3, #0
 8008372:	9305      	str	r3, [sp, #20]
 8008374:	9004      	str	r0, [sp, #16]
 8008376:	9103      	str	r1, [sp, #12]
 8008378:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 800837c:	9102      	str	r1, [sp, #8]
 800837e:	9201      	str	r2, [sp, #4]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	4633      	mov	r3, r6
 8008386:	4a0a      	ldr	r2, [pc, #40]	@ (80083b0 <AT_ESP8266_ND+0x1a74>)
 8008388:	4629      	mov	r1, r5
 800838a:	4620      	mov	r0, r4
 800838c:	f006 fa96 	bl	800e8bc <FT_String_ND>
 8008390:	4603      	mov	r3, r0
 8008392:	2b01      	cmp	r3, #1
 8008394:	d10e      	bne.n	80083b4 <AT_ESP8266_ND+0x1a78>
																							{
																								AT_decode=at_fail;
 8008396:	2303      	movs	r3, #3
 8008398:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 800839c:	e05b      	b.n	8008456 <AT_ESP8266_ND+0x1b1a>
 800839e:	bf00      	nop
 80083a0:	08010bd4 	.word	0x08010bd4
 80083a4:	08010be4 	.word	0x08010be4
 80083a8:	08010bf4 	.word	0x08010bf4
 80083ac:	08010c04 	.word	0x08010c04
 80083b0:	08010c10 	.word	0x08010c10
																							}
																						else
																						{
																						//------------------busy processing------------------//
																							a->_n_fcomp=strlen("busy p...");
 80083b4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80083b8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2209      	movs	r2, #9
 80083c0:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
																							if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80083c4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80083c8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f503 64d8 	add.w	r4, r3, #1728	@ 0x6c0
 80083d2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80083d6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f603 550c 	addw	r5, r3, #3340	@ 0xd0c
 80083e0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80083e4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f503 6652 	add.w	r6, r3, #3360	@ 0xd20
 80083ee:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80083f2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f503 630c 	add.w	r3, r3, #2240	@ 0x8c0
 80083fc:	603b      	str	r3, [r7, #0]
 80083fe:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8008402:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8008406:	6812      	ldr	r2, [r2, #0]
 8008408:	f602 5214 	addw	r2, r2, #3348	@ 0xd14
 800840c:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8008410:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8008414:	6809      	ldr	r1, [r1, #0]
 8008416:	f501 612c 	add.w	r1, r1, #2752	@ 0xac0
 800841a:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 800841e:	f5a0 7013 	sub.w	r0, r0, #588	@ 0x24c
 8008422:	6800      	ldr	r0, [r0, #0]
 8008424:	f8d0 0d7c 	ldr.w	r0, [r0, #3452]	@ 0xd7c
 8008428:	2300      	movs	r3, #0
 800842a:	9305      	str	r3, [sp, #20]
 800842c:	9004      	str	r0, [sp, #16]
 800842e:	9103      	str	r1, [sp, #12]
 8008430:	f507 710c 	add.w	r1, r7, #560	@ 0x230
 8008434:	9102      	str	r1, [sp, #8]
 8008436:	9201      	str	r2, [sp, #4]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	4633      	mov	r3, r6
 800843e:	4a78      	ldr	r2, [pc, #480]	@ (8008620 <AT_ESP8266_ND+0x1ce4>)
 8008440:	4629      	mov	r1, r5
 8008442:	4620      	mov	r0, r4
 8008444:	f006 fa3a 	bl	800e8bc <FT_String_ND>
 8008448:	4603      	mov	r3, r0
 800844a:	2b01      	cmp	r3, #1
 800844c:	d103      	bne.n	8008456 <AT_ESP8266_ND+0x1b1a>
																								{
																								AT_decode=at_busy_p;
 800844e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008452:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
		}
}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 8008456:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800845a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f8d3 3ad8 	ldr.w	r3, [r3, #2776]	@ 0xad8
 8008464:	3b01      	subs	r3, #1
 8008466:	2b08      	cmp	r3, #8
 8008468:	f201 84db 	bhi.w	8009e22 <AT_ESP8266_ND+0x34e6>
 800846c:	a201      	add	r2, pc, #4	@ (adr r2, 8008474 <AT_ESP8266_ND+0x1b38>)
 800846e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008472:	bf00      	nop
 8008474:	08008499 	.word	0x08008499
 8008478:	08008629 	.word	0x08008629
 800847c:	080088ab 	.word	0x080088ab
 8008480:	08008a29 	.word	0x08008a29
 8008484:	08008c01 	.word	0x08008c01
 8008488:	08008ed5 	.word	0x08008ed5
 800848c:	08009195 	.word	0x08009195
 8008490:	080096c5 	.word	0x080096c5
 8008494:	0800989b 	.word	0x0800989b
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008498:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800849c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80084a8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80084ac:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d14f      	bne.n	800855a <AT_ESP8266_ND+0x1c1e>
 80084ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d04b      	beq.n	800855a <AT_ESP8266_ND+0x1c1e>
									   &&(AT_decode!=at_error)
 80084c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d047      	beq.n	800855a <AT_ESP8266_ND+0x1c1e>
									   &&(AT_decode!=at_restart)
 80084ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80084ce:	2b04      	cmp	r3, #4
 80084d0:	d043      	beq.n	800855a <AT_ESP8266_ND+0x1c1e>
									   &&(AT_decode!=at_tcp_enviado_ok))
 80084d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80084d6:	2b13      	cmp	r3, #19
 80084d8:	d03f      	beq.n	800855a <AT_ESP8266_ND+0x1c1e>
						{
						a->_pasos=0;
 80084da:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80084de:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
						a->_ejecucion=1;
 80084ea:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80084ee:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 80084fa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80084fe:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 8008508:	4620      	mov	r0, r4
 800850a:	f7f7 fe73 	bl	80001f4 <strlen>
 800850e:	4603      	mov	r3, r0
 8008510:	4423      	add	r3, r4
 8008512:	4a44      	ldr	r2, [pc, #272]	@ (8008624 <AT_ESP8266_ND+0x1ce8>)
 8008514:	461c      	mov	r4, r3
 8008516:	4613      	mov	r3, r2
 8008518:	cb07      	ldmia	r3!, {r0, r1, r2}
 800851a:	6020      	str	r0, [r4, #0]
 800851c:	6061      	str	r1, [r4, #4]
 800851e:	60a2      	str	r2, [r4, #8]
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008524:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008528:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8008532:	4618      	mov	r0, r3
 8008534:	f7f7 fe5e 	bl	80001f4 <strlen>
 8008538:	4603      	mov	r3, r0
 800853a:	461a      	mov	r2, r3
 800853c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008540:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c
						a->_estado=100;
 800854a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800854e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2264      	movs	r2, #100	@ 0x64
 8008556:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						}
				a->_pasos++;
 800855a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800855e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	@ 0xad4
 8008568:	1c5a      	adds	r2, r3, #1
 800856a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800856e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 8008578:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800857c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d11b      	bne.n	80085c2 <AT_ESP8266_ND+0x1c86>
 800858a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800858e:	2b01      	cmp	r3, #1
 8008590:	d023      	beq.n	80085da <AT_ESP8266_ND+0x1c9e>
 8008592:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008596:	2b1c      	cmp	r3, #28
 8008598:	d01f      	beq.n	80085da <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_error)
 800859a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d01b      	beq.n	80085da <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_restart)
 80085a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80085a6:	2b04      	cmp	r3, #4
 80085a8:	d017      	beq.n	80085da <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_wifi_connected)
 80085aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80085ae:	2b0b      	cmp	r3, #11
 80085b0:	d013      	beq.n	80085da <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_wifi_gotip)
 80085b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80085b6:	2b0c      	cmp	r3, #12
 80085b8:	d00f      	beq.n	80085da <AT_ESP8266_ND+0x1c9e>
															 ||(AT_decode==at_tcp_enviado_ok)))
 80085ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80085be:	2b13      	cmp	r3, #19
 80085c0:	d00b      	beq.n	80085da <AT_ESP8266_ND+0x1c9e>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 80085c2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80085c6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	@ 0xce0
 80085d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085d4:	4293      	cmp	r3, r2
 80085d6:	f341 842e 	ble.w	8009e36 <AT_ESP8266_ND+0x34fa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80085da:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80085de:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 80085e8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						a->_instruccion=0;	//Finalizo la instrucci�n
 80085ec:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80085f0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
						a->_ejecucion=0;
 80085fc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008600:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2200      	movs	r2, #0
 8008608:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
						a->_ticks=0;
 800860c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008610:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2200      	movs	r2, #0
 8008618:	f8c3 2ce0 	str.w	r2, [r3, #3296]	@ 0xce0
					}

			}
			break;
 800861c:	f001 bc0b 	b.w	8009e36 <AT_ESP8266_ND+0x34fa>
 8008620:	08010c1c 	.word	0x08010c1c
 8008624:	08010c28 	.word	0x08010c28
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008628:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800862c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008638:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800863c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 8008646:	2b01      	cmp	r3, #1
 8008648:	f040 80c8 	bne.w	80087dc <AT_ESP8266_ND+0x1ea0>
 800864c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008650:	2b01      	cmp	r3, #1
 8008652:	f000 80c3 	beq.w	80087dc <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_error)
 8008656:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800865a:	2b02      	cmp	r3, #2
 800865c:	f000 80be 	beq.w	80087dc <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_fail)
 8008660:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008664:	2b03      	cmp	r3, #3
 8008666:	f000 80b9 	beq.w	80087dc <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_restart)
 800866a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800866e:	2b04      	cmp	r3, #4
 8008670:	f000 80b4 	beq.w	80087dc <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_wifi_disconnect)
 8008674:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008678:	2b0a      	cmp	r3, #10
 800867a:	f000 80af 	beq.w	80087dc <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_wifi_connected)
 800867e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008682:	2b0b      	cmp	r3, #11
 8008684:	f000 80aa 	beq.w	80087dc <AT_ESP8266_ND+0x1ea0>
									   &&(AT_decode!=at_wifi_gotip))
 8008688:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800868c:	2b0c      	cmp	r3, #12
 800868e:	f000 80a5 	beq.w	80087dc <AT_ESP8266_ND+0x1ea0>
						{
						a->_pasos=0;
 8008692:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008696:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2200      	movs	r2, #0
 800869e:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
						a->_ejecucion=1;
 80086a2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80086a6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 80086b2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80086b6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 80086c0:	4620      	mov	r0, r4
 80086c2:	f7f7 fd97 	bl	80001f4 <strlen>
 80086c6:	4603      	mov	r3, r0
 80086c8:	4423      	add	r3, r4
 80086ca:	49d5      	ldr	r1, [pc, #852]	@ (8008a20 <AT_ESP8266_ND+0x20e4>)
 80086cc:	461a      	mov	r2, r3
 80086ce:	460b      	mov	r3, r1
 80086d0:	cb03      	ldmia	r3!, {r0, r1}
 80086d2:	6010      	str	r0, [r2, #0]
 80086d4:	6051      	str	r1, [r2, #4]
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 80086da:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80086de:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80086e8:	f207 212f 	addw	r1, r7, #559	@ 0x22f
 80086ec:	2201      	movs	r2, #1
 80086ee:	4618      	mov	r0, r3
 80086f0:	f006 fed9 	bl	800f4a6 <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 80086f4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80086f8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 8008702:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008706:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	1d9d      	adds	r5, r3, #6
 800870e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008712:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3306      	adds	r3, #6
 800871a:	4618      	mov	r0, r3
 800871c:	f7f7 fd6a 	bl	80001f4 <strlen>
 8008720:	4603      	mov	r3, r0
 8008722:	461a      	mov	r2, r3
 8008724:	4629      	mov	r1, r5
 8008726:	4620      	mov	r0, r4
 8008728:	f006 febd 	bl	800f4a6 <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 800872c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008730:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 800873a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800873e:	4618      	mov	r0, r3
 8008740:	f7f7 fd58 	bl	80001f4 <strlen>
 8008744:	4602      	mov	r2, r0
 8008746:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800874a:	4619      	mov	r1, r3
 800874c:	4620      	mov	r0, r4
 800874e:	f006 feaa 	bl	800f4a6 <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 8008752:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008756:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 8008760:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008764:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800876e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008772:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3326      	adds	r3, #38	@ 0x26
 800877a:	4618      	mov	r0, r3
 800877c:	f7f7 fd3a 	bl	80001f4 <strlen>
 8008780:	4603      	mov	r3, r0
 8008782:	461a      	mov	r2, r3
 8008784:	4629      	mov	r1, r5
 8008786:	4620      	mov	r0, r4
 8008788:	f006 fe8d 	bl	800f4a6 <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 800878c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008790:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800879a:	f507 7109 	add.w	r1, r7, #548	@ 0x224
 800879e:	2203      	movs	r2, #3
 80087a0:	4618      	mov	r0, r3
 80087a2:	f006 fe80 	bl	800f4a6 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 80087a6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80087aa:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7f7 fd1d 	bl	80001f4 <strlen>
 80087ba:	4603      	mov	r3, r0
 80087bc:	461a      	mov	r2, r3
 80087be:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80087c2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c
						a->_estado=200;
 80087cc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80087d0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	22c8      	movs	r2, #200	@ 0xc8
 80087d8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 80087dc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80087e0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	@ 0xad4
 80087ea:	1c5a      	adds	r2, r3, #1
 80087ec:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80087f0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 80087fa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80087fe:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d11b      	bne.n	8008844 <AT_ESP8266_ND+0x1f08>
 800880c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008810:	2b01      	cmp	r3, #1
 8008812:	d023      	beq.n	800885c <AT_ESP8266_ND+0x1f20>
 8008814:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008818:	2b02      	cmp	r3, #2
 800881a:	d01f      	beq.n	800885c <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_fail)
 800881c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008820:	2b03      	cmp	r3, #3
 8008822:	d01b      	beq.n	800885c <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_restart)
 8008824:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008828:	2b04      	cmp	r3, #4
 800882a:	d017      	beq.n	800885c <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_wifi_disconnect)
 800882c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008830:	2b0a      	cmp	r3, #10
 8008832:	d013      	beq.n	800885c <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_wifi_connected)
 8008834:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008838:	2b0b      	cmp	r3, #11
 800883a:	d00f      	beq.n	800885c <AT_ESP8266_ND+0x1f20>
															||(AT_decode==at_wifi_gotip)))
 800883c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008840:	2b0c      	cmp	r3, #12
 8008842:	d00b      	beq.n	800885c <AT_ESP8266_ND+0x1f20>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 8008844:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008848:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	@ 0xce4
 8008852:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8008856:	4293      	cmp	r3, r2
 8008858:	f341 82ef 	ble.w	8009e3a <AT_ESP8266_ND+0x34fe>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800885c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008860:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 800886a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						if(AT_decode!=at_wifi_disconnect)
 800886e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008872:	2b0a      	cmp	r3, #10
 8008874:	d00f      	beq.n	8008896 <AT_ESP8266_ND+0x1f5a>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 8008876:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800887a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2200      	movs	r2, #0
 8008882:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
							a->_ejecucion=0;
 8008886:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800888a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2200      	movs	r2, #0
 8008892:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 8008896:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800889a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f8c3 2ce4 	str.w	r2, [r3, #3300]	@ 0xce4
					}

			}
			break;
 80088a6:	f001 bac8 	b.w	8009e3a <AT_ESP8266_ND+0x34fe>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80088aa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80088ae:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 80088ba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80088be:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d14d      	bne.n	8008968 <AT_ESP8266_ND+0x202c>
 80088cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80088d0:	2b04      	cmp	r3, #4
 80088d2:	d049      	beq.n	8008968 <AT_ESP8266_ND+0x202c>
 80088d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80088d8:	2b0a      	cmp	r3, #10
 80088da:	d045      	beq.n	8008968 <AT_ESP8266_ND+0x202c>
 80088dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80088e0:	2b0d      	cmp	r3, #13
 80088e2:	d041      	beq.n	8008968 <AT_ESP8266_ND+0x202c>
						{
						a->_pasos=0;
 80088e4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80088e8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
						a->_ejecucion=1;
 80088f4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80088f8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2201      	movs	r2, #1
 8008900:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",10);
 8008904:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008908:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 8008912:	4620      	mov	r0, r4
 8008914:	f7f7 fc6e 	bl	80001f4 <strlen>
 8008918:	4603      	mov	r3, r0
 800891a:	4423      	add	r3, r4
 800891c:	4941      	ldr	r1, [pc, #260]	@ (8008a24 <AT_ESP8266_ND+0x20e8>)
 800891e:	461a      	mov	r2, r3
 8008920:	460b      	mov	r3, r1
 8008922:	cb03      	ldmia	r3!, {r0, r1}
 8008924:	6010      	str	r0, [r2, #0]
 8008926:	6051      	str	r1, [r2, #4]
 8008928:	8819      	ldrh	r1, [r3, #0]
 800892a:	789b      	ldrb	r3, [r3, #2]
 800892c:	8111      	strh	r1, [r2, #8]
 800892e:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008930:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008934:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800893e:	4618      	mov	r0, r3
 8008940:	f7f7 fc58 	bl	80001f4 <strlen>
 8008944:	4603      	mov	r3, r0
 8008946:	461a      	mov	r2, r3
 8008948:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800894c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 8008956:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800895a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008964:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						}

				a->_pasos++;
 8008968:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800896c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	@ 0xad4
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800897c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008986:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800898a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d113      	bne.n	80089c0 <AT_ESP8266_ND+0x2084>
 8008998:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800899c:	2b0a      	cmp	r3, #10
 800899e:	d01b      	beq.n	80089d8 <AT_ESP8266_ND+0x209c>
 80089a0:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80089a4:	2b0b      	cmp	r3, #11
 80089a6:	d017      	beq.n	80089d8 <AT_ESP8266_ND+0x209c>
																		  ||(AT_decode==at_wifi_gotip)
 80089a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80089ac:	2b0c      	cmp	r3, #12
 80089ae:	d013      	beq.n	80089d8 <AT_ESP8266_ND+0x209c>
																		  ||(AT_decode==at_restart	)
 80089b0:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80089b4:	2b04      	cmp	r3, #4
 80089b6:	d00f      	beq.n	80089d8 <AT_ESP8266_ND+0x209c>
																		  ||(AT_decode==at_deconectar_ok )))
 80089b8:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80089bc:	2b0d      	cmp	r3, #13
 80089be:	d00b      	beq.n	80089d8 <AT_ESP8266_ND+0x209c>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80089c0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80089c4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	@ 0xce0
 80089ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089d2:	4293      	cmp	r3, r2
 80089d4:	f341 8233 	ble.w	8009e3e <AT_ESP8266_ND+0x3502>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80089d8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80089dc:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 80089e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						a->_instruccion=0;	//Finalizo la instrucci�n
 80089ea:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80089ee:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
						a->_ejecucion=0;
 80089fa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80089fe:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
						a->_ticks=0;
 8008a0a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008a0e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f8c3 2ce0 	str.w	r2, [r3, #3296]	@ 0xce0
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008a1a:	f001 ba10 	b.w	8009e3e <AT_ESP8266_ND+0x3502>
 8008a1e:	bf00      	nop
 8008a20:	08010c38 	.word	0x08010c38
 8008a24:	08010c44 	.word	0x08010c44
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008a28:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008a2c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 8008a38:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008a3c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d16b      	bne.n	8008b22 <AT_ESP8266_ND+0x21e6>
 8008a4a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	d067      	beq.n	8008b22 <AT_ESP8266_ND+0x21e6>
									   &&(AT_decode!=at_ok)
 8008a52:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d063      	beq.n	8008b22 <AT_ESP8266_ND+0x21e6>
									   &&(AT_decode!=at_error))
 8008a5a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d05f      	beq.n	8008b22 <AT_ESP8266_ND+0x21e6>
						{
						a->_pasos=0;
 8008a62:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008a66:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
						a->_ejecucion=1;
 8008a72:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008a76:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 8008a82:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008a86:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d115      	bne.n	8008ac0 <AT_ESP8266_ND+0x2184>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 8008a94:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008a98:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f7f7 fba6 	bl	80001f4 <strlen>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	4423      	add	r3, r4
 8008aac:	4a52      	ldr	r2, [pc, #328]	@ (8008bf8 <AT_ESP8266_ND+0x22bc>)
 8008aae:	461c      	mov	r4, r3
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ab4:	6020      	str	r0, [r4, #0]
 8008ab6:	6061      	str	r1, [r4, #4]
 8008ab8:	60a2      	str	r2, [r4, #8]
 8008aba:	881b      	ldrh	r3, [r3, #0]
 8008abc:	81a3      	strh	r3, [r4, #12]
 8008abe:	e014      	b.n	8008aea <AT_ESP8266_ND+0x21ae>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8008ac0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008ac4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f7f7 fb90 	bl	80001f4 <strlen>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	4423      	add	r3, r4
 8008ad8:	4a48      	ldr	r2, [pc, #288]	@ (8008bfc <AT_ESP8266_ND+0x22c0>)
 8008ada:	461c      	mov	r4, r3
 8008adc:	4613      	mov	r3, r2
 8008ade:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ae0:	6020      	str	r0, [r4, #0]
 8008ae2:	6061      	str	r1, [r4, #4]
 8008ae4:	60a2      	str	r2, [r4, #8]
 8008ae6:	881b      	ldrh	r3, [r3, #0]
 8008ae8:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008aea:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008aee:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7f7 fb7b 	bl	80001f4 <strlen>
 8008afe:	4603      	mov	r3, r0
 8008b00:	461a      	mov	r2, r3
 8008b02:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008b06:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 8008b10:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008b14:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008b1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						}

				a->_pasos++;
 8008b22:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008b26:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	@ 0xad4
 8008b30:	1c5a      	adds	r2, r3, #1
 8008b32:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008b36:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008b40:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008b44:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d123      	bne.n	8008b9a <AT_ESP8266_ND+0x225e>
 8008b52:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d02b      	beq.n	8008bb2 <AT_ESP8266_ND+0x2276>
 8008b5a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008b5e:	2b0b      	cmp	r3, #11
 8008b60:	d027      	beq.n	8008bb2 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_wifi_gotip)
 8008b62:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008b66:	2b0c      	cmp	r3, #12
 8008b68:	d023      	beq.n	8008bb2 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_restart)
 8008b6a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008b6e:	2b04      	cmp	r3, #4
 8008b70:	d01f      	beq.n	8008bb2 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_error)
 8008b72:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d01b      	beq.n	8008bb2 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_multiple_conn_ok)
 8008b7a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008b7e:	2b07      	cmp	r3, #7
 8008b80:	d017      	beq.n	8008bb2 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_no_multiple_conn_ok)
 8008b82:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008b86:	2b08      	cmp	r3, #8
 8008b88:	d013      	beq.n	8008bb2 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_multiple_conn_err)
 8008b8a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008b8e:	2b1e      	cmp	r3, #30
 8008b90:	d00f      	beq.n	8008bb2 <AT_ESP8266_ND+0x2276>
															||(AT_decode==at_no_multiple_conn_err)))
 8008b92:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008b96:	2b1f      	cmp	r3, #31
 8008b98:	d00b      	beq.n	8008bb2 <AT_ESP8266_ND+0x2276>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008b9a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008b9e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	@ 0xce0
 8008ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bac:	4293      	cmp	r3, r2
 8008bae:	f341 8148 	ble.w	8009e42 <AT_ESP8266_ND+0x3506>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008bb2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008bb6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8008bc0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008bc4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008bc8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
						a->_ejecucion=0;
 8008bd4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008bd8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
						a->_ticks=0;
 8008be4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008be8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f8c3 2ce0 	str.w	r2, [r3, #3296]	@ 0xce0
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008bf4:	f001 b925 	b.w	8009e42 <AT_ESP8266_ND+0x3506>
 8008bf8:	08010c50 	.word	0x08010c50
 8008bfc:	08010c60 	.word	0x08010c60
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008c00:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008c04:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8008c10:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008c14:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	f040 80f3 	bne.w	8008e0a <AT_ESP8266_ND+0x24ce>
 8008c24:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008c28:	2b04      	cmp	r3, #4
 8008c2a:	f000 80ee 	beq.w	8008e0a <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_ok)
 8008c2e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	f000 80e9 	beq.w	8008e0a <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_error)
 8008c38:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	f000 80e4 	beq.w	8008e0a <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_def_ip_err)
 8008c42:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008c46:	2b21      	cmp	r3, #33	@ 0x21
 8008c48:	f000 80df 	beq.w	8008e0a <AT_ESP8266_ND+0x24ce>
									   &&(AT_decode!=at_def_ip_ok))
 8008c4c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008c50:	2b1b      	cmp	r3, #27
 8008c52:	f000 80da 	beq.w	8008e0a <AT_ESP8266_ND+0x24ce>
						{
						a->_pasos=0;
 8008c56:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008c5a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
						a->_ejecucion=1;
 8008c66:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008c6a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8008c76:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008c7a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 8008c84:	4620      	mov	r0, r4
 8008c86:	f7f7 fab5 	bl	80001f4 <strlen>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	4423      	add	r3, r4
 8008c8e:	4990      	ldr	r1, [pc, #576]	@ (8008ed0 <AT_ESP8266_ND+0x2594>)
 8008c90:	461a      	mov	r2, r3
 8008c92:	460b      	mov	r3, r1
 8008c94:	cb03      	ldmia	r3!, {r0, r1}
 8008c96:	6010      	str	r0, [r2, #0]
 8008c98:	6051      	str	r1, [r2, #4]
 8008c9a:	8819      	ldrh	r1, [r3, #0]
 8008c9c:	789b      	ldrb	r3, [r3, #2]
 8008c9e:	8111      	strh	r1, [r2, #8]
 8008ca0:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 8008ca2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008ca6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8008cb0:	f207 212f 	addw	r1, r7, #559	@ 0x22f
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f006 fbf5 	bl	800f4a6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008cbc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008cc0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 8008cca:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008cce:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f103 0574 	add.w	r5, r3, #116	@ 0x74
 8008cd8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008cdc:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3374      	adds	r3, #116	@ 0x74
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7f7 fa85 	bl	80001f4 <strlen>
 8008cea:	4603      	mov	r3, r0
 8008cec:	461a      	mov	r2, r3
 8008cee:	4629      	mov	r1, r5
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f006 fbd8 	bl	800f4a6 <strncat>
						strncat(a->_uart2snd,separador,3);
 8008cf6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008cfa:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8008d04:	f507 710a 	add.w	r1, r7, #552	@ 0x228
 8008d08:	2203      	movs	r2, #3
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f006 fbcb 	bl	800f4a6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008d10:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008d14:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 8008d1e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008d22:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f103 058a 	add.w	r5, r3, #138	@ 0x8a
 8008d2c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008d30:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	338a      	adds	r3, #138	@ 0x8a
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7f7 fa5b 	bl	80001f4 <strlen>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	461a      	mov	r2, r3
 8008d42:	4629      	mov	r1, r5
 8008d44:	4620      	mov	r0, r4
 8008d46:	f006 fbae 	bl	800f4a6 <strncat>
						strncat(a->_uart2snd,separador,3);
 8008d4a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008d4e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8008d58:	f507 710a 	add.w	r1, r7, #552	@ 0x228
 8008d5c:	2203      	movs	r2, #3
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f006 fba1 	bl	800f4a6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008d64:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008d68:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 8008d72:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008d76:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f103 059a 	add.w	r5, r3, #154	@ 0x9a
 8008d80:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008d84:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	339a      	adds	r3, #154	@ 0x9a
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7f7 fa31 	bl	80001f4 <strlen>
 8008d92:	4603      	mov	r3, r0
 8008d94:	461a      	mov	r2, r3
 8008d96:	4629      	mov	r1, r5
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f006 fb84 	bl	800f4a6 <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008d9e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008da2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8008dac:	f207 212f 	addw	r1, r7, #559	@ 0x22f
 8008db0:	2201      	movs	r2, #1
 8008db2:	4618      	mov	r0, r3
 8008db4:	f006 fb77 	bl	800f4a6 <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008db8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008dbc:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8008dc6:	f507 7107 	add.w	r1, r7, #540	@ 0x21c
 8008dca:	2202      	movs	r2, #2
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f006 fb6a 	bl	800f4a6 <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008dd2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008dd6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7f7 fa07 	bl	80001f4 <strlen>
 8008de6:	4603      	mov	r3, r0
 8008de8:	461a      	mov	r2, r3
 8008dea:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008dee:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008df8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008dfc:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008e06:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						}

				a->_pasos++;
 8008e0a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008e0e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	@ 0xad4
 8008e18:	1c5a      	adds	r2, r3, #1
 8008e1a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008e1e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008e28:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008e2c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d11b      	bne.n	8008e72 <AT_ESP8266_ND+0x2536>
 8008e3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d023      	beq.n	8008e8a <AT_ESP8266_ND+0x254e>
 8008e42:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008e46:	2b0b      	cmp	r3, #11
 8008e48:	d01f      	beq.n	8008e8a <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_wifi_gotip)
 8008e4a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008e4e:	2b0c      	cmp	r3, #12
 8008e50:	d01b      	beq.n	8008e8a <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_restart)
 8008e52:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008e56:	2b04      	cmp	r3, #4
 8008e58:	d017      	beq.n	8008e8a <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_error)
 8008e5a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d013      	beq.n	8008e8a <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_def_ip_err)
 8008e62:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008e66:	2b21      	cmp	r3, #33	@ 0x21
 8008e68:	d00f      	beq.n	8008e8a <AT_ESP8266_ND+0x254e>
															 ||(AT_decode==at_def_ip_ok)))
 8008e6a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008e6e:	2b1b      	cmp	r3, #27
 8008e70:	d00b      	beq.n	8008e8a <AT_ESP8266_ND+0x254e>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008e72:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008e76:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	@ 0xce0
 8008e80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e84:	4293      	cmp	r3, r2
 8008e86:	f340 87de 	ble.w	8009e46 <AT_ESP8266_ND+0x350a>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008e8a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008e8e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8008e98:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008e9c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008ea0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
						a->_ejecucion=0;
 8008eac:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008eb0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
						a->_ticks=0;
 8008ebc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008ec0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f8c3 2ce0 	str.w	r2, [r3, #3296]	@ 0xce0
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008ecc:	f000 bfbb 	b.w	8009e46 <AT_ESP8266_ND+0x350a>
 8008ed0:	08010b40 	.word	0x08010b40
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008ed4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008ed8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008ee4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008ee8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	f040 80e2 	bne.w	80090bc <AT_ESP8266_ND+0x2780>
 8008ef8:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008efc:	2b0b      	cmp	r3, #11
 8008efe:	f000 80dd 	beq.w	80090bc <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_wifi_gotip)
 8008f02:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008f06:	2b0c      	cmp	r3, #12
 8008f08:	f000 80d8 	beq.w	80090bc <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008f0c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008f10:	2b0e      	cmp	r3, #14
 8008f12:	f000 80d3 	beq.w	80090bc <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_tcp_conectado)
 8008f16:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008f1a:	2b0f      	cmp	r3, #15
 8008f1c:	f000 80ce 	beq.w	80090bc <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_tcp_desconectado)
 8008f20:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008f24:	2b10      	cmp	r3, #16
 8008f26:	f000 80c9 	beq.w	80090bc <AT_ESP8266_ND+0x2780>
									   &&(AT_decode!=at_error))
 8008f2a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	f000 80c4 	beq.w	80090bc <AT_ESP8266_ND+0x2780>
						{
						a->_pasos=0;
 8008f34:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008f38:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
						a->_ejecucion=1;
 8008f44:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008f48:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008f54:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008f58:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 8008f62:	4620      	mov	r0, r4
 8008f64:	f7f7 f946 	bl	80001f4 <strlen>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	4423      	add	r3, r4
 8008f6c:	4aa7      	ldr	r2, [pc, #668]	@ (800920c <AT_ESP8266_ND+0x28d0>)
 8008f6e:	461c      	mov	r4, r3
 8008f70:	4613      	mov	r3, r2
 8008f72:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f74:	6020      	str	r0, [r4, #0]
 8008f76:	6061      	str	r1, [r4, #4]
 8008f78:	60a2      	str	r2, [r4, #8]
 8008f7a:	781b      	ldrb	r3, [r3, #0]
 8008f7c:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008f7e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008f82:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8008f8c:	f207 212f 	addw	r1, r7, #559	@ 0x22f
 8008f90:	2201      	movs	r2, #1
 8008f92:	4618      	mov	r0, r3
 8008f94:	f006 fa87 	bl	800f4a6 <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008f98:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008f9c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f7f7 f924 	bl	80001f4 <strlen>
 8008fac:	4603      	mov	r3, r0
 8008fae:	4423      	add	r3, r4
 8008fb0:	4a97      	ldr	r2, [pc, #604]	@ (8009210 <AT_ESP8266_ND+0x28d4>)
 8008fb2:	6810      	ldr	r0, [r2, #0]
 8008fb4:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008fb6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008fba:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8008fc4:	f507 710a 	add.w	r1, r7, #552	@ 0x228
 8008fc8:	2203      	movs	r2, #3
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f006 fa6b 	bl	800f4a6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008fd0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008fd4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 8008fde:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008fe2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f103 055e 	add.w	r5, r3, #94	@ 0x5e
 8008fec:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8008ff0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	335e      	adds	r3, #94	@ 0x5e
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7f7 f8fb 	bl	80001f4 <strlen>
 8008ffe:	4603      	mov	r3, r0
 8009000:	461a      	mov	r2, r3
 8009002:	4629      	mov	r1, r5
 8009004:	4620      	mov	r0, r4
 8009006:	f006 fa4e 	bl	800f4a6 <strncat>
						strncat(a->_uart2snd,separador2,2);
 800900a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800900e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009018:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 800901c:	2202      	movs	r2, #2
 800901e:	4618      	mov	r0, r3
 8009020:	f006 fa41 	bl	800f4a6 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8009024:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009028:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 8009032:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009036:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f103 056e 	add.w	r5, r3, #110	@ 0x6e
 8009040:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009044:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	336e      	adds	r3, #110	@ 0x6e
 800904c:	4618      	mov	r0, r3
 800904e:	f7f7 f8d1 	bl	80001f4 <strlen>
 8009052:	4603      	mov	r3, r0
 8009054:	461a      	mov	r2, r3
 8009056:	4629      	mov	r1, r5
 8009058:	4620      	mov	r0, r4
 800905a:	f006 fa24 	bl	800f4a6 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 800905e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009062:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 800906c:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8009070:	4618      	mov	r0, r3
 8009072:	f7f7 f8bf 	bl	80001f4 <strlen>
 8009076:	4602      	mov	r2, r0
 8009078:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 800907c:	4619      	mov	r1, r3
 800907e:	4620      	mov	r0, r4
 8009080:	f006 fa11 	bl	800f4a6 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8009084:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009088:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009092:	4618      	mov	r0, r3
 8009094:	f7f7 f8ae 	bl	80001f4 <strlen>
 8009098:	4603      	mov	r3, r0
 800909a:	461a      	mov	r2, r3
 800909c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80090a0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c
						a->_estado=600;
 80090aa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80090ae:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80090b8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 80090bc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80090c0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	@ 0xad4
 80090ca:	1c5a      	adds	r2, r3, #1
 80090cc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80090d0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 80090da:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80090de:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d124      	bne.n	8009136 <AT_ESP8266_ND+0x27fa>
 80090ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80090f0:	2b0a      	cmp	r3, #10
 80090f2:	d02c      	beq.n	800914e <AT_ESP8266_ND+0x2812>
 80090f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80090f8:	2b0b      	cmp	r3, #11
 80090fa:	d028      	beq.n	800914e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_fail)
 80090fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009100:	2b03      	cmp	r3, #3
 8009102:	d024      	beq.n	800914e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_wifi_gotip)
 8009104:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009108:	2b0c      	cmp	r3, #12
 800910a:	d020      	beq.n	800914e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 800910c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009110:	2b0e      	cmp	r3, #14
 8009112:	d01c      	beq.n	800914e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_tcp_conectado)
 8009114:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009118:	2b0f      	cmp	r3, #15
 800911a:	d018      	beq.n	800914e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_tcp_desconectado)
 800911c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009120:	2b10      	cmp	r3, #16
 8009122:	d014      	beq.n	800914e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_error)
 8009124:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009128:	2b02      	cmp	r3, #2
 800912a:	d010      	beq.n	800914e <AT_ESP8266_ND+0x2812>
																		  ||(AT_decode==at_busy_p)))
 800912c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009130:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009134:	d00b      	beq.n	800914e <AT_ESP8266_ND+0x2812>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8009136:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800913a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	@ 0xce0
 8009144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009148:	4293      	cmp	r3, r2
 800914a:	f340 867e 	ble.w	8009e4a <AT_ESP8266_ND+0x350e>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800914e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009152:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 800915c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009160:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009164:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2200      	movs	r2, #0
 800916c:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
						a->_ejecucion=0;
 8009170:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009174:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2200      	movs	r2, #0
 800917c:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
						a->_ticks=0;
 8009180:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009184:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2200      	movs	r2, #0
 800918c:	f8c3 2ce0 	str.w	r2, [r3, #3296]	@ 0xce0
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009190:	f000 be5b 	b.w	8009e4a <AT_ESP8266_ND+0x350e>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8009194:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009198:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800919c:	461a      	mov	r2, r3
 800919e:	2300      	movs	r3, #0
 80091a0:	6013      	str	r3, [r2, #0]
 80091a2:	6053      	str	r3, [r2, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail)
 80091a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80091a8:	2b10      	cmp	r3, #16
 80091aa:	d00b      	beq.n	80091c4 <AT_ESP8266_ND+0x2888>
 80091ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80091b0:	2b0a      	cmp	r3, #10
 80091b2:	d007      	beq.n	80091c4 <AT_ESP8266_ND+0x2888>
 80091b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80091b8:	2b03      	cmp	r3, #3
 80091ba:	d003      	beq.n	80091c4 <AT_ESP8266_ND+0x2888>
						||(AT_decode==at_error))//240420
 80091bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d127      	bne.n	8009214 <AT_ESP8266_ND+0x28d8>
				{
					a->_estado=AT_decode;
 80091c4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80091c8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 80091d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
					a->_instruccion=0;		//Finalizo la instrucci�n
 80091d6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80091da:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
					a->_ejecucion=0;
 80091e6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80091ea:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
					a->_subpaso=0;
 80091f6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80091fa:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2200      	movs	r2, #0
 8009202:	f8c3 2d78 	str.w	r2, [r3, #3448]	@ 0xd78
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009206:	f000 be22 	b.w	8009e4e <AT_ESP8266_ND+0x3512>
 800920a:	bf00      	nop
 800920c:	08010c70 	.word	0x08010c70
 8009210:	08010c80 	.word	0x08010c80
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8009214:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009218:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 8009222:	2b01      	cmp	r3, #1
 8009224:	f040 80d1 	bne.w	80093ca <AT_ESP8266_ND+0x2a8e>
 8009228:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800922c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f8d3 3d78 	ldr.w	r3, [r3, #3448]	@ 0xd78
 8009236:	2b00      	cmp	r3, #0
 8009238:	f040 80c7 	bne.w	80093ca <AT_ESP8266_ND+0x2a8e>
										a->_ejecucion=1;
 800923c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009240:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2201      	movs	r2, #1
 8009248:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
										a->_estado=24;
 800924c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009250:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2218      	movs	r2, #24
 8009258:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800925c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009260:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2200      	movs	r2, #0
 8009268:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 800926c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009270:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f8d3 3d78 	ldr.w	r3, [r3, #3448]	@ 0xd78
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009280:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f8c3 2d78 	str.w	r2, [r3, #3448]	@ 0xd78
										a->_pasos=0;
 800928a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800928e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2200      	movs	r2, #0
 8009296:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 800929a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800929e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 2ae0 	strb.w	r2, [r3, #2784]	@ 0xae0
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 80092aa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80092ae:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 80092b8:	4620      	mov	r0, r4
 80092ba:	f7f6 ff9b 	bl	80001f4 <strlen>
 80092be:	4603      	mov	r3, r0
 80092c0:	4423      	add	r3, r4
 80092c2:	4ac0      	ldr	r2, [pc, #768]	@ (80095c4 <AT_ESP8266_ND+0x2c88>)
 80092c4:	461c      	mov	r4, r3
 80092c6:	4613      	mov	r3, r2
 80092c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80092ca:	6020      	str	r0, [r4, #0]
 80092cc:	6061      	str	r1, [r4, #4]
 80092ce:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 80092d0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80092d4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	@ 0xd18
 80092de:	f107 0214 	add.w	r2, r7, #20
 80092e2:	4611      	mov	r1, r2
 80092e4:	4618      	mov	r0, r3
 80092e6:	f005 fe31 	bl	800ef4c <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 80092ea:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80092ee:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 80092f8:	f107 0314 	add.w	r3, r7, #20
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7f6 ff79 	bl	80001f4 <strlen>
 8009302:	4602      	mov	r2, r0
 8009304:	f107 0314 	add.w	r3, r7, #20
 8009308:	4619      	mov	r1, r3
 800930a:	4620      	mov	r0, r4
 800930c:	f006 f8cb 	bl	800f4a6 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8009310:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009314:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f503 622e 	add.w	r2, r3, #2784	@ 0xae0
 800931e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009322:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800932c:	4619      	mov	r1, r3
 800932e:	4610      	mov	r0, r2
 8009330:	f006 f99b 	bl	800f66a <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009334:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009338:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009342:	f507 7107 	add.w	r1, r7, #540	@ 0x21c
 8009346:	2202      	movs	r2, #2
 8009348:	4618      	mov	r0, r3
 800934a:	f006 f8ac 	bl	800f4a6 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 800934e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009352:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800935c:	4618      	mov	r0, r3
 800935e:	f7f6 ff49 	bl	80001f4 <strlen>
 8009362:	4603      	mov	r3, r0
 8009364:	461a      	mov	r2, r3
 8009366:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800936a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009374:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009378:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f503 642e 	add.w	r4, r3, #2784	@ 0xae0
 8009382:	4620      	mov	r0, r4
 8009384:	f7f6 ff36 	bl	80001f4 <strlen>
 8009388:	4603      	mov	r3, r0
 800938a:	4423      	add	r3, r4
 800938c:	4a8e      	ldr	r2, [pc, #568]	@ (80095c8 <AT_ESP8266_ND+0x2c8c>)
 800938e:	461c      	mov	r4, r3
 8009390:	4613      	mov	r3, r2
 8009392:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009394:	6020      	str	r0, [r4, #0]
 8009396:	6061      	str	r1, [r4, #4]
 8009398:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 800939a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800939e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 80093a8:	1c5a      	adds	r2, r3, #1
 80093aa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80093ae:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38
										a->_estado=700;
 80093b8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80093bc:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80093c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								a->_pasos++;
 80093ca:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80093ce:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	@ 0xad4
 80093d8:	1c5a      	adds	r2, r3, #1
 80093da:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80093de:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 80093e8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80093ec:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f040 80a6 	bne.w	8009548 <AT_ESP8266_ND+0x2c0c>
 80093fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009400:	2b13      	cmp	r3, #19
 8009402:	f000 80a1 	beq.w	8009548 <AT_ESP8266_ND+0x2c0c>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 8009406:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800940a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f503 62d8 	add.w	r2, r3, #1728	@ 0x6c0
 8009414:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009418:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f503 632e 	add.w	r3, r3, #2784	@ 0xae0
 8009422:	4619      	mov	r1, r3
 8009424:	4610      	mov	r0, r2
 8009426:	f7f6 fedb 	bl	80001e0 <strcmp>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d01b      	beq.n	8009468 <AT_ESP8266_ND+0x2b2c>
 8009430:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009434:	2b01      	cmp	r3, #1
 8009436:	d017      	beq.n	8009468 <AT_ESP8266_ND+0x2b2c>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 8009438:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800943c:	2b14      	cmp	r3, #20
 800943e:	d013      	beq.n	8009468 <AT_ESP8266_ND+0x2b2c>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009440:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009444:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	@ 0xce0
 800944e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009452:	4293      	cmp	r3, r2
 8009454:	dd78      	ble.n	8009548 <AT_ESP8266_ND+0x2c0c>
 8009456:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800945a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f8d3 3d78 	ldr.w	r3, [r3, #3448]	@ 0xd78
 8009464:	2b01      	cmp	r3, #1
 8009466:	d16f      	bne.n	8009548 <AT_ESP8266_ND+0x2c0c>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8009468:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800946c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	@ 0xce0
 8009476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800947a:	4293      	cmp	r3, r2
 800947c:	dd0e      	ble.n	800949c <AT_ESP8266_ND+0x2b60>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 800947e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009482:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	@ 0xd48
 800948c:	1c5a      	adds	r2, r3, #1
 800948e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009492:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f8c3 2d48 	str.w	r2, [r3, #3400]	@ 0xd48
								a->_debug_count4++;
 800949c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80094a0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	@ 0xd3c
 80094aa:	1c5a      	adds	r2, r3, #1
 80094ac:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80094b0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f8c3 2d3c 	str.w	r2, [r3, #3388]	@ 0xd3c
								a->_subpaso++;
 80094ba:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80094be:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f8d3 3d78 	ldr.w	r3, [r3, #3448]	@ 0xd78
 80094c8:	1c5a      	adds	r2, r3, #1
 80094ca:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80094ce:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f8c3 2d78 	str.w	r2, [r3, #3448]	@ 0xd78
								a->_enviaruart=1;
 80094d8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80094dc:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 80094e8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80094ec:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f503 6098 	add.w	r0, r3, #1216	@ 0x4c0
 80094f6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80094fa:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f503 7130 	add.w	r1, r3, #704	@ 0x2c0
 8009504:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009508:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f8d3 2d18 	ldr.w	r2, [r3, #3352]	@ 0xd18
 8009512:	2361      	movs	r3, #97	@ 0x61
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	2301      	movs	r3, #1
 8009518:	f005 fdc2 	bl	800f0a0 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 800951c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009520:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f8d3 2d18 	ldr.w	r2, [r3, #3352]	@ 0xd18
 800952a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800952e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009538:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800953c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2200      	movs	r2, #0
 8009544:	f8c3 2ce0 	str.w	r2, [r3, #3296]	@ 0xce0
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 8009548:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800954c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009556:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800955a:	f040 8478 	bne.w	8009e4e <AT_ESP8266_ND+0x3512>
 800955e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009562:	2b13      	cmp	r3, #19
 8009564:	d032      	beq.n	80095cc <AT_ESP8266_ND+0x2c90>
 8009566:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800956a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	@ 0xce0
 8009574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009578:	4293      	cmp	r3, r2
 800957a:	dc27      	bgt.n	80095cc <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_wifi_disconnect)
 800957c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009580:	2b0a      	cmp	r3, #10
 8009582:	d023      	beq.n	80095cc <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_fail)
 8009584:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009588:	2b03      	cmp	r3, #3
 800958a:	d01f      	beq.n	80095cc <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_wifi_connected)
 800958c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009590:	2b0b      	cmp	r3, #11
 8009592:	d01b      	beq.n	80095cc <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_wifi_gotip)
 8009594:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009598:	2b0c      	cmp	r3, #12
 800959a:	d017      	beq.n	80095cc <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_tcp_desconectado)
 800959c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80095a0:	2b10      	cmp	r3, #16
 80095a2:	d013      	beq.n	80095cc <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_tcp_snd_err)
 80095a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80095a8:	2b11      	cmp	r3, #17
 80095aa:	d00f      	beq.n	80095cc <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_tcp_enviado_error)
 80095ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80095b0:	2b12      	cmp	r3, #18
 80095b2:	d00b      	beq.n	80095cc <AT_ESP8266_ND+0x2c90>
																				 ||(AT_decode==at_busy_p)))
 80095b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80095b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80095bc:	f040 8447 	bne.w	8009e4e <AT_ESP8266_ND+0x3512>
 80095c0:	e004      	b.n	80095cc <AT_ESP8266_ND+0x2c90>
 80095c2:	bf00      	nop
 80095c4:	08010c84 	.word	0x08010c84
 80095c8:	08010c90 	.word	0x08010c90
									a->_debug_count5++;
 80095cc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80095d0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	@ 0xd40
 80095da:	1c5a      	adds	r2, r3, #1
 80095dc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80095e0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f8c3 2d40 	str.w	r2, [r3, #3392]	@ 0xd40
									if(a->_ticks > 5000)
 80095ea:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80095ee:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	@ 0xce0
 80095f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095fc:	4293      	cmp	r3, r2
 80095fe:	dd25      	ble.n	800964c <AT_ESP8266_ND+0x2d10>
										a->_debug_count8++;
 8009600:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009604:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	@ 0xd4c
 800960e:	1c5a      	adds	r2, r3, #1
 8009610:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009614:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f8c3 2d4c 	str.w	r2, [r3, #3404]	@ 0xd4c
										a->_subpaso++;
 800961e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009622:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f8d3 3d78 	ldr.w	r3, [r3, #3448]	@ 0xd78
 800962c:	1c5a      	adds	r2, r3, #1
 800962e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009632:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f8c3 2d78 	str.w	r2, [r3, #3448]	@ 0xd78
										a->_ticks=0;
 800963c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009640:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2200      	movs	r2, #0
 8009648:	f8c3 2ce0 	str.w	r2, [r3, #3296]	@ 0xce0
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 800964c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009650:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f8d3 3d78 	ldr.w	r3, [r3, #3448]	@ 0xd78
 800965a:	2b02      	cmp	r3, #2
 800965c:	dd10      	ble.n	8009680 <AT_ESP8266_ND+0x2d44>
 800965e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009662:	2b10      	cmp	r3, #16
 8009664:	d00c      	beq.n	8009680 <AT_ESP8266_ND+0x2d44>
 8009666:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800966a:	2b0a      	cmp	r3, #10
 800966c:	d008      	beq.n	8009680 <AT_ESP8266_ND+0x2d44>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 800966e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009672:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	220f      	movs	r2, #15
 800967a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800967e:	e008      	b.n	8009692 <AT_ESP8266_ND+0x2d56>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009680:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009684:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 800968e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009692:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009696:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2200      	movs	r2, #0
 800969e:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
									a->_ejecucion=0;
 80096a2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80096a6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
									a->_subpaso=0;
 80096b2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80096b6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2200      	movs	r2, #0
 80096be:	f8c3 2d78 	str.w	r2, [r3, #3448]	@ 0xd78
			break;
 80096c2:	e3c4      	b.n	8009e4e <AT_ESP8266_ND+0x3512>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80096c4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80096c8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0

				if( a->_enviaruart==1)
 80096d4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80096d8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d16f      	bne.n	80097c6 <AT_ESP8266_ND+0x2e8a>
						{
						a->_pasos=0;
 80096e6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80096ea:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
						a->_ejecucion=1;
 80096f6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80096fa:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2201      	movs	r2, #1
 8009702:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 8009706:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800970a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 8009714:	4620      	mov	r0, r4
 8009716:	f7f6 fd6d 	bl	80001f4 <strlen>
 800971a:	4603      	mov	r3, r0
 800971c:	4423      	add	r3, r4
 800971e:	4a7a      	ldr	r2, [pc, #488]	@ (8009908 <AT_ESP8266_ND+0x2fcc>)
 8009720:	461c      	mov	r4, r3
 8009722:	4615      	mov	r5, r2
 8009724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009726:	6020      	str	r0, [r4, #0]
 8009728:	6061      	str	r1, [r4, #4]
 800972a:	60a2      	str	r2, [r4, #8]
 800972c:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 800972e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009732:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 800973c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009740:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f103 0584 	add.w	r5, r3, #132	@ 0x84
 800974a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800974e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3384      	adds	r3, #132	@ 0x84
 8009756:	4618      	mov	r0, r3
 8009758:	f7f6 fd4c 	bl	80001f4 <strlen>
 800975c:	4603      	mov	r3, r0
 800975e:	461a      	mov	r2, r3
 8009760:	4629      	mov	r1, r5
 8009762:	4620      	mov	r0, r4
 8009764:	f005 fe9f 	bl	800f4a6 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009768:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800976c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 8009776:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 800977a:	4618      	mov	r0, r3
 800977c:	f7f6 fd3a 	bl	80001f4 <strlen>
 8009780:	4602      	mov	r2, r0
 8009782:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 8009786:	4619      	mov	r1, r3
 8009788:	4620      	mov	r0, r4
 800978a:	f005 fe8c 	bl	800f4a6 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 800978e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009792:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 800979c:	4618      	mov	r0, r3
 800979e:	f7f6 fd29 	bl	80001f4 <strlen>
 80097a2:	4603      	mov	r3, r0
 80097a4:	461a      	mov	r2, r3
 80097a6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80097aa:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c
						a->_estado=800;
 80097b4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80097b8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80097c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 80097c6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80097ca:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	@ 0xad4
 80097d4:	1c5a      	adds	r2, r3, #1
 80097d6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80097da:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80097e4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80097e8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d123      	bne.n	800983e <AT_ESP8266_ND+0x2f02>
 80097f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80097fa:	2b0a      	cmp	r3, #10
 80097fc:	d02b      	beq.n	8009856 <AT_ESP8266_ND+0x2f1a>
 80097fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009802:	2b0b      	cmp	r3, #11
 8009804:	d027      	beq.n	8009856 <AT_ESP8266_ND+0x2f1a>
 8009806:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800980a:	2b0c      	cmp	r3, #12
 800980c:	d023      	beq.n	8009856 <AT_ESP8266_ND+0x2f1a>
 800980e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009812:	2b0e      	cmp	r3, #14
 8009814:	d01f      	beq.n	8009856 <AT_ESP8266_ND+0x2f1a>
 8009816:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800981a:	2b0f      	cmp	r3, #15
 800981c:	d01b      	beq.n	8009856 <AT_ESP8266_ND+0x2f1a>
 800981e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009822:	2b10      	cmp	r3, #16
 8009824:	d017      	beq.n	8009856 <AT_ESP8266_ND+0x2f1a>
 8009826:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800982a:	2b15      	cmp	r3, #21
 800982c:	d013      	beq.n	8009856 <AT_ESP8266_ND+0x2f1a>
 800982e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009832:	2b16      	cmp	r3, #22
 8009834:	d00f      	beq.n	8009856 <AT_ESP8266_ND+0x2f1a>
 8009836:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800983a:	2b17      	cmp	r3, #23
 800983c:	d00b      	beq.n	8009856 <AT_ESP8266_ND+0x2f1a>
 800983e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009842:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	@ 0xce0
 800984c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009850:	4293      	cmp	r3, r2
 8009852:	f340 82fe 	ble.w	8009e52 <AT_ESP8266_ND+0x3516>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8009856:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800985a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8009864:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009868:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800986c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2200      	movs	r2, #0
 8009874:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
						a->_ejecucion=0;
 8009878:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800987c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2200      	movs	r2, #0
 8009884:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
						a->_ticks=0;
 8009888:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800988c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2200      	movs	r2, #0
 8009894:	f8c3 2ce0 	str.w	r2, [r3, #3296]	@ 0xce0
					}
			}
			break;
 8009898:	e2db      	b.n	8009e52 <AT_ESP8266_ND+0x3516>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 800989a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800989e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80098a2:	461a      	mov	r2, r3
 80098a4:	2300      	movs	r3, #0
 80098a6:	6013      	str	r3, [r2, #0]
 80098a8:	6053      	str	r3, [r2, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 80098aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80098ae:	2b10      	cmp	r3, #16
 80098b0:	d007      	beq.n	80098c2 <AT_ESP8266_ND+0x2f86>
 80098b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80098b6:	2b0a      	cmp	r3, #10
 80098b8:	d003      	beq.n	80098c2 <AT_ESP8266_ND+0x2f86>
 80098ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d124      	bne.n	800990c <AT_ESP8266_ND+0x2fd0>
				{
					a->_estado=AT_decode;
 80098c2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80098c6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 80098d0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
					a->_instruccion=0;		//Finalizo la instrucci�n
 80098d4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80098d8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2200      	movs	r2, #0
 80098e0:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
					a->_ejecucion=0;
 80098e4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80098e8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
					a->_subpaso=0;
 80098f4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80098f8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2200      	movs	r2, #0
 8009900:	f8c3 2d78 	str.w	r2, [r3, #3448]	@ 0xd78
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009904:	e2a7      	b.n	8009e56 <AT_ESP8266_ND+0x351a>
 8009906:	bf00      	nop
 8009908:	08010c9c 	.word	0x08010c9c
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 800990c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009910:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 800991a:	2b01      	cmp	r3, #1
 800991c:	f040 8102 	bne.w	8009b24 <AT_ESP8266_ND+0x31e8>
 8009920:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009924:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f8d3 3d78 	ldr.w	r3, [r3, #3448]	@ 0xd78
 800992e:	2b00      	cmp	r3, #0
 8009930:	f040 80f8 	bne.w	8009b24 <AT_ESP8266_ND+0x31e8>
										a->_ejecucion=1;
 8009934:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009938:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2201      	movs	r2, #1
 8009940:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
										a->_estado=24;
 8009944:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009948:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2218      	movs	r2, #24
 8009950:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009954:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009958:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 24c0 	strb.w	r2, [r3, #1216]	@ 0x4c0
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009964:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009968:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f8d3 3d78 	ldr.w	r3, [r3, #3448]	@ 0xd78
 8009972:	1c5a      	adds	r2, r3, #1
 8009974:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009978:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f8c3 2d78 	str.w	r2, [r3, #3448]	@ 0xd78
										a->_pasos=0;
 8009982:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009986:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2200      	movs	r2, #0
 800998e:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8009992:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009996:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2ae0 	strb.w	r2, [r3, #2784]	@ 0xae0
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 80099a2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80099a6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 80099b0:	4620      	mov	r0, r4
 80099b2:	f7f6 fc1f 	bl	80001f4 <strlen>
 80099b6:	4603      	mov	r3, r0
 80099b8:	4423      	add	r3, r4
 80099ba:	4a83      	ldr	r2, [pc, #524]	@ (8009bc8 <AT_ESP8266_ND+0x328c>)
 80099bc:	461c      	mov	r4, r3
 80099be:	4613      	mov	r3, r2
 80099c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80099c2:	6020      	str	r0, [r4, #0]
 80099c4:	6061      	str	r1, [r4, #4]
 80099c6:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 80099c8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80099cc:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f8d3 3ac0 	ldr.w	r3, [r3, #2752]	@ 0xac0
 80099d6:	f107 020c 	add.w	r2, r7, #12
 80099da:	4611      	mov	r1, r2
 80099dc:	4618      	mov	r0, r3
 80099de:	f005 fab5 	bl	800ef4c <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 80099e2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80099e6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 80099f0:	f107 030c 	add.w	r3, r7, #12
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7f6 fbfd 	bl	80001f4 <strlen>
 80099fa:	4602      	mov	r2, r0
 80099fc:	f107 030c 	add.w	r3, r7, #12
 8009a00:	4619      	mov	r1, r3
 8009a02:	4620      	mov	r0, r4
 8009a04:	f005 fd4f 	bl	800f4a6 <strncat>
										strncat(a->_uart2snd,",",1);
 8009a08:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009a0c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 8009a16:	4620      	mov	r0, r4
 8009a18:	f7f6 fbec 	bl	80001f4 <strlen>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	4423      	add	r3, r4
 8009a20:	496a      	ldr	r1, [pc, #424]	@ (8009bcc <AT_ESP8266_ND+0x3290>)
 8009a22:	461a      	mov	r2, r3
 8009a24:	460b      	mov	r3, r1
 8009a26:	881b      	ldrh	r3, [r3, #0]
 8009a28:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8009a2a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009a2e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	@ 0xd18
 8009a38:	f107 020c 	add.w	r2, r7, #12
 8009a3c:	4611      	mov	r1, r2
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f005 fa84 	bl	800ef4c <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009a44:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009a48:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f503 6498 	add.w	r4, r3, #1216	@ 0x4c0
 8009a52:	f107 030c 	add.w	r3, r7, #12
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7f6 fbcc 	bl	80001f4 <strlen>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	f107 030c 	add.w	r3, r7, #12
 8009a62:	4619      	mov	r1, r3
 8009a64:	4620      	mov	r0, r4
 8009a66:	f005 fd1e 	bl	800f4a6 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8009a6a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009a6e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f503 622e 	add.w	r2, r3, #2784	@ 0xae0
 8009a78:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009a7c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009a86:	4619      	mov	r1, r3
 8009a88:	4610      	mov	r0, r2
 8009a8a:	f005 fdee 	bl	800f66a <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009a8e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009a92:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009a9c:	f507 7107 	add.w	r1, r7, #540	@ 0x21c
 8009aa0:	2202      	movs	r2, #2
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f005 fcff 	bl	800f4a6 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8009aa8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009aac:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f503 6398 	add.w	r3, r3, #1216	@ 0x4c0
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7f6 fb9c 	bl	80001f4 <strlen>
 8009abc:	4603      	mov	r3, r0
 8009abe:	461a      	mov	r2, r3
 8009ac0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009ac4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009ace:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009ad2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f503 642e 	add.w	r4, r3, #2784	@ 0xae0
 8009adc:	4620      	mov	r0, r4
 8009ade:	f7f6 fb89 	bl	80001f4 <strlen>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	4423      	add	r3, r4
 8009ae6:	4a3a      	ldr	r2, [pc, #232]	@ (8009bd0 <AT_ESP8266_ND+0x3294>)
 8009ae8:	461c      	mov	r4, r3
 8009aea:	4613      	mov	r3, r2
 8009aec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009aee:	6020      	str	r0, [r4, #0]
 8009af0:	6061      	str	r1, [r4, #4]
 8009af2:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009af4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009af8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	@ 0xd38
 8009b02:	1c5a      	adds	r2, r3, #1
 8009b04:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009b08:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f8c3 2d38 	str.w	r2, [r3, #3384]	@ 0xd38
										a->_estado=900;
 8009b12:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009b16:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8009b20:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								a->_pasos++;
 8009b24:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009b28:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f8d3 3ad4 	ldr.w	r3, [r3, #2772]	@ 0xad4
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009b38:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f8c3 2ad4 	str.w	r2, [r3, #2772]	@ 0xad4
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009b42:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009b46:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f040 80b8 	bne.w	8009cc6 <AT_ESP8266_ND+0x338a>
 8009b56:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009b5a:	2b13      	cmp	r3, #19
 8009b5c:	f000 80b3 	beq.w	8009cc6 <AT_ESP8266_ND+0x338a>
 8009b60:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009b64:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f503 62d8 	add.w	r2, r3, #1728	@ 0x6c0
 8009b6e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009b72:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f503 632e 	add.w	r3, r3, #2784	@ 0xae0
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4610      	mov	r0, r2
 8009b80:	f7f6 fb2e 	bl	80001e0 <strcmp>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d024      	beq.n	8009bd4 <AT_ESP8266_ND+0x3298>
 8009b8a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d020      	beq.n	8009bd4 <AT_ESP8266_ND+0x3298>
 8009b92:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009b96:	2b14      	cmp	r3, #20
 8009b98:	d01c      	beq.n	8009bd4 <AT_ESP8266_ND+0x3298>
 8009b9a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009b9e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	@ 0xce0
 8009ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009bac:	4293      	cmp	r3, r2
 8009bae:	f340 808a 	ble.w	8009cc6 <AT_ESP8266_ND+0x338a>
 8009bb2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009bb6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f8d3 3d78 	ldr.w	r3, [r3, #3448]	@ 0xd78
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	f040 8080 	bne.w	8009cc6 <AT_ESP8266_ND+0x338a>
 8009bc6:	e005      	b.n	8009bd4 <AT_ESP8266_ND+0x3298>
 8009bc8:	08010c84 	.word	0x08010c84
 8009bcc:	08010cac 	.word	0x08010cac
 8009bd0:	08010c90 	.word	0x08010c90
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8009bd4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009bd8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	@ 0xce0
 8009be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009be6:	4293      	cmp	r3, r2
 8009be8:	dd17      	ble.n	8009c1a <AT_ESP8266_ND+0x32de>
 8009bea:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009bee:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f8d3 3d78 	ldr.w	r3, [r3, #3448]	@ 0xd78
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d10e      	bne.n	8009c1a <AT_ESP8266_ND+0x32de>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009bfc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009c00:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	@ 0xd48
 8009c0a:	1c5a      	adds	r2, r3, #1
 8009c0c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009c10:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f8c3 2d48 	str.w	r2, [r3, #3400]	@ 0xd48
								a->_debug_count4++;
 8009c1a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009c1e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	@ 0xd3c
 8009c28:	1c5a      	adds	r2, r3, #1
 8009c2a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009c2e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f8c3 2d3c 	str.w	r2, [r3, #3388]	@ 0xd3c
								a->_subpaso++;
 8009c38:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009c3c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f8d3 3d78 	ldr.w	r3, [r3, #3448]	@ 0xd78
 8009c46:	1c5a      	adds	r2, r3, #1
 8009c48:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009c4c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f8c3 2d78 	str.w	r2, [r3, #3448]	@ 0xd78
								a->_enviaruart=1;
 8009c56:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009c5a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2201      	movs	r2, #1
 8009c62:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009c66:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009c6a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f503 6098 	add.w	r0, r3, #1216	@ 0x4c0
 8009c74:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009c78:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f503 7130 	add.w	r1, r3, #704	@ 0x2c0
 8009c82:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009c86:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f8d3 2d18 	ldr.w	r2, [r3, #3352]	@ 0xd18
 8009c90:	2361      	movs	r3, #97	@ 0x61
 8009c92:	9300      	str	r3, [sp, #0]
 8009c94:	2301      	movs	r3, #1
 8009c96:	f005 fa03 	bl	800f0a0 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009c9a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009c9e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f8d3 2d18 	ldr.w	r2, [r3, #3352]	@ 0xd18
 8009ca8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009cac:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f8c3 2d1c 	str.w	r2, [r3, #3356]	@ 0xd1c
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009cb6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009cba:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f8c3 2ce0 	str.w	r2, [r3, #3296]	@ 0xce0
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8009cc6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009cca:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009cd4:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8009cd8:	f040 80bd 	bne.w	8009e56 <AT_ESP8266_ND+0x351a>
 8009cdc:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009ce0:	2b13      	cmp	r3, #19
 8009ce2:	d02b      	beq.n	8009d3c <AT_ESP8266_ND+0x3400>
 8009ce4:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009ce8:	2b0b      	cmp	r3, #11
 8009cea:	d027      	beq.n	8009d3c <AT_ESP8266_ND+0x3400>
 8009cec:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009cf0:	2b0c      	cmp	r3, #12
 8009cf2:	d023      	beq.n	8009d3c <AT_ESP8266_ND+0x3400>
 8009cf4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009cf8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	@ 0xce0
 8009d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d06:	4293      	cmp	r3, r2
 8009d08:	dc18      	bgt.n	8009d3c <AT_ESP8266_ND+0x3400>
 8009d0a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009d0e:	2b0a      	cmp	r3, #10
 8009d10:	d014      	beq.n	8009d3c <AT_ESP8266_ND+0x3400>
 8009d12:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009d16:	2b10      	cmp	r3, #16
 8009d18:	d010      	beq.n	8009d3c <AT_ESP8266_ND+0x3400>
 8009d1a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009d1e:	2b11      	cmp	r3, #17
 8009d20:	d00c      	beq.n	8009d3c <AT_ESP8266_ND+0x3400>
 8009d22:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009d26:	2b12      	cmp	r3, #18
 8009d28:	d008      	beq.n	8009d3c <AT_ESP8266_ND+0x3400>
 8009d2a:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009d2e:	2b16      	cmp	r3, #22
 8009d30:	d004      	beq.n	8009d3c <AT_ESP8266_ND+0x3400>
 8009d32:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009d36:	2b19      	cmp	r3, #25
 8009d38:	f040 808d 	bne.w	8009e56 <AT_ESP8266_ND+0x351a>
									a->_debug_count5++;
 8009d3c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009d40:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	@ 0xd40
 8009d4a:	1c5a      	adds	r2, r3, #1
 8009d4c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009d50:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f8c3 2d40 	str.w	r2, [r3, #3392]	@ 0xd40
									if(a->_ticks > 5000)
 8009d5a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009d5e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f8d3 3ce0 	ldr.w	r3, [r3, #3296]	@ 0xce0
 8009d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	dd25      	ble.n	8009dbc <AT_ESP8266_ND+0x3480>
										a->_debug_count8++;
 8009d70:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009d74:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	@ 0xd4c
 8009d7e:	1c5a      	adds	r2, r3, #1
 8009d80:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009d84:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f8c3 2d4c 	str.w	r2, [r3, #3404]	@ 0xd4c
										a->_subpaso++;
 8009d8e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009d92:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f8d3 3d78 	ldr.w	r3, [r3, #3448]	@ 0xd78
 8009d9c:	1c5a      	adds	r2, r3, #1
 8009d9e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009da2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f8c3 2d78 	str.w	r2, [r3, #3448]	@ 0xd78
										a->_ticks=0;
 8009dac:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009db0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f8c3 2ce0 	str.w	r2, [r3, #3296]	@ 0xce0
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009dbc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009dc0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f8d3 3d78 	ldr.w	r3, [r3, #3448]	@ 0xd78
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	dd07      	ble.n	8009dde <AT_ESP8266_ND+0x34a2>
 8009dce:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009dd2:	2b10      	cmp	r3, #16
 8009dd4:	d003      	beq.n	8009dde <AT_ESP8266_ND+0x34a2>
 8009dd6:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8009dda:	2b0a      	cmp	r3, #10
 8009ddc:	d108      	bne.n	8009df0 <AT_ESP8266_ND+0x34b4>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009dde:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009de2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8009dec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009df0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009df4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f8c3 2ad8 	str.w	r2, [r3, #2776]	@ 0xad8
									a->_ejecucion=0;
 8009e00:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009e04:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f8c3 2adc 	str.w	r2, [r3, #2780]	@ 0xadc
									a->_subpaso=0;
 8009e10:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009e14:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f8c3 2d78 	str.w	r2, [r3, #3448]	@ 0xd78
			break;
 8009e20:	e019      	b.n	8009e56 <AT_ESP8266_ND+0x351a>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009e22:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009e26:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8009e30:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
			}
			break;
 8009e34:	e010      	b.n	8009e58 <AT_ESP8266_ND+0x351c>
			break;
 8009e36:	bf00      	nop
 8009e38:	e00e      	b.n	8009e58 <AT_ESP8266_ND+0x351c>
			break;
 8009e3a:	bf00      	nop
 8009e3c:	e00c      	b.n	8009e58 <AT_ESP8266_ND+0x351c>
			break;
 8009e3e:	bf00      	nop
 8009e40:	e00a      	b.n	8009e58 <AT_ESP8266_ND+0x351c>
			break;
 8009e42:	bf00      	nop
 8009e44:	e008      	b.n	8009e58 <AT_ESP8266_ND+0x351c>
			break;
 8009e46:	bf00      	nop
 8009e48:	e006      	b.n	8009e58 <AT_ESP8266_ND+0x351c>
			break;
 8009e4a:	bf00      	nop
 8009e4c:	e004      	b.n	8009e58 <AT_ESP8266_ND+0x351c>
			break;
 8009e4e:	bf00      	nop
 8009e50:	e002      	b.n	8009e58 <AT_ESP8266_ND+0x351c>
			break;
 8009e52:	bf00      	nop
 8009e54:	e000      	b.n	8009e58 <AT_ESP8266_ND+0x351c>
			break;
 8009e56:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009e58:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009e5c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 26c0 	strb.w	r2, [r3, #1728]	@ 0x6c0
		a->_n_orig=0;
 8009e68:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009e6c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

		return (a->_estado);
 8009e78:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8009e7c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0

 }
 8009e86:	4618      	mov	r0, r3
 8009e88:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e90 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009ea2:	f240 328d 	movw	r2, #909	@ 0x38d
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	f001 842c 	beq.w	800b704 <WiFi_Conn_ND+0x1874>
 8009eac:	f240 328d 	movw	r2, #909	@ 0x38d
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	f301 84bf 	bgt.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009eb6:	f240 3289 	movw	r2, #905	@ 0x389
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	f001 8399 	beq.w	800b5f2 <WiFi_Conn_ND+0x1762>
 8009ec0:	f240 3289 	movw	r2, #905	@ 0x389
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	f301 84b5 	bgt.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009eca:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8009ece:	f001 8288 	beq.w	800b3e2 <WiFi_Conn_ND+0x1552>
 8009ed2:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8009ed6:	f301 84ad 	bgt.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009eda:	f240 3229 	movw	r2, #809	@ 0x329
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	f301 84a8 	bgt.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009ee4:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8009ee8:	f280 80a5 	bge.w	800a036 <WiFi_Conn_ND+0x1a6>
 8009eec:	f240 22c5 	movw	r2, #709	@ 0x2c5
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	f000 87bc 	beq.w	800ae6e <WiFi_Conn_ND+0xfde>
 8009ef6:	f240 22c5 	movw	r2, #709	@ 0x2c5
 8009efa:	4293      	cmp	r3, r2
 8009efc:	f301 849a 	bgt.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009f00:	f240 22c1 	movw	r2, #705	@ 0x2c1
 8009f04:	4293      	cmp	r3, r2
 8009f06:	f000 8733 	beq.w	800ad70 <WiFi_Conn_ND+0xee0>
 8009f0a:	f240 22c1 	movw	r2, #705	@ 0x2c1
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	f301 8490 	bgt.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009f14:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8009f18:	f000 864e 	beq.w	800abb8 <WiFi_Conn_ND+0xd28>
 8009f1c:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8009f20:	f301 8488 	bgt.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009f24:	f240 2261 	movw	r2, #609	@ 0x261
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	f000 85ec 	beq.w	800ab06 <WiFi_Conn_ND+0xc76>
 8009f2e:	f240 2261 	movw	r2, #609	@ 0x261
 8009f32:	4293      	cmp	r3, r2
 8009f34:	f301 847e 	bgt.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009f38:	f240 225d 	movw	r2, #605	@ 0x25d
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	f000 8582 	beq.w	800aa46 <WiFi_Conn_ND+0xbb6>
 8009f42:	f240 225d 	movw	r2, #605	@ 0x25d
 8009f46:	4293      	cmp	r3, r2
 8009f48:	f301 8474 	bgt.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009f4c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8009f50:	f000 8500 	beq.w	800a954 <WiFi_Conn_ND+0xac4>
 8009f54:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8009f58:	f301 846c 	bgt.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009f5c:	f240 12fd 	movw	r2, #509	@ 0x1fd
 8009f60:	4293      	cmp	r3, r2
 8009f62:	f000 8496 	beq.w	800a892 <WiFi_Conn_ND+0xa02>
 8009f66:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8009f6a:	f281 8463 	bge.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009f6e:	f240 12f9 	movw	r2, #505	@ 0x1f9
 8009f72:	4293      	cmp	r3, r2
 8009f74:	f000 844c 	beq.w	800a810 <WiFi_Conn_ND+0x980>
 8009f78:	f5b3 7ffd 	cmp.w	r3, #506	@ 0x1fa
 8009f7c:	f281 845a 	bge.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009f80:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009f84:	f000 83d7 	beq.w	800a736 <WiFi_Conn_ND+0x8a6>
 8009f88:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009f8c:	f301 8452 	bgt.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009f90:	f240 1299 	movw	r2, #409	@ 0x199
 8009f94:	4293      	cmp	r3, r2
 8009f96:	f000 8378 	beq.w	800a68a <WiFi_Conn_ND+0x7fa>
 8009f9a:	f5b3 7fcd 	cmp.w	r3, #410	@ 0x19a
 8009f9e:	f281 8449 	bge.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009fa2:	f240 1295 	movw	r2, #405	@ 0x195
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	f000 8333 	beq.w	800a612 <WiFi_Conn_ND+0x782>
 8009fac:	f5b3 7fcb 	cmp.w	r3, #406	@ 0x196
 8009fb0:	f281 8440 	bge.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009fb4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8009fb8:	f000 82aa 	beq.w	800a510 <WiFi_Conn_ND+0x680>
 8009fbc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8009fc0:	f301 8438 	bgt.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009fc4:	f240 1235 	movw	r2, #309	@ 0x135
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	f000 827b 	beq.w	800a4c4 <WiFi_Conn_ND+0x634>
 8009fce:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 8009fd2:	f281 842f 	bge.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009fd6:	f240 1231 	movw	r2, #305	@ 0x131
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	f000 826d 	beq.w	800a4ba <WiFi_Conn_ND+0x62a>
 8009fe0:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 8009fe4:	f281 8426 	bge.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009fe8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8009fec:	f000 8211 	beq.w	800a412 <WiFi_Conn_ND+0x582>
 8009ff0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8009ff4:	f301 841e 	bgt.w	800b834 <WiFi_Conn_ND+0x19a4>
 8009ff8:	2bd1      	cmp	r3, #209	@ 0xd1
 8009ffa:	f000 81a5 	beq.w	800a348 <WiFi_Conn_ND+0x4b8>
 8009ffe:	2bd1      	cmp	r3, #209	@ 0xd1
 800a000:	f301 8418 	bgt.w	800b834 <WiFi_Conn_ND+0x19a4>
 800a004:	2bcd      	cmp	r3, #205	@ 0xcd
 800a006:	f000 8175 	beq.w	800a2f4 <WiFi_Conn_ND+0x464>
 800a00a:	2bcd      	cmp	r3, #205	@ 0xcd
 800a00c:	f301 8412 	bgt.w	800b834 <WiFi_Conn_ND+0x19a4>
 800a010:	2bc8      	cmp	r3, #200	@ 0xc8
 800a012:	f000 80f1 	beq.w	800a1f8 <WiFi_Conn_ND+0x368>
 800a016:	2bc8      	cmp	r3, #200	@ 0xc8
 800a018:	f301 840c 	bgt.w	800b834 <WiFi_Conn_ND+0x19a4>
 800a01c:	2b6d      	cmp	r3, #109	@ 0x6d
 800a01e:	f000 80b3 	beq.w	800a188 <WiFi_Conn_ND+0x2f8>
 800a022:	2b6d      	cmp	r3, #109	@ 0x6d
 800a024:	f301 8406 	bgt.w	800b834 <WiFi_Conn_ND+0x19a4>
 800a028:	2b64      	cmp	r3, #100	@ 0x64
 800a02a:	d021      	beq.n	800a070 <WiFi_Conn_ND+0x1e0>
 800a02c:	2b69      	cmp	r3, #105	@ 0x69
 800a02e:	f000 8096 	beq.w	800a15e <WiFi_Conn_ND+0x2ce>
 800a032:	f001 bbff 	b.w	800b834 <WiFi_Conn_ND+0x19a4>
 800a036:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 800a03a:	2b09      	cmp	r3, #9
 800a03c:	f201 83fa 	bhi.w	800b834 <WiFi_Conn_ND+0x19a4>
 800a040:	a201      	add	r2, pc, #4	@ (adr r2, 800a048 <WiFi_Conn_ND+0x1b8>)
 800a042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a046:	bf00      	nop
 800a048:	0800af85 	.word	0x0800af85
 800a04c:	0800b835 	.word	0x0800b835
 800a050:	0800b835 	.word	0x0800b835
 800a054:	0800b835 	.word	0x0800b835
 800a058:	0800b835 	.word	0x0800b835
 800a05c:	0800b053 	.word	0x0800b053
 800a060:	0800b0fd 	.word	0x0800b0fd
 800a064:	0800b1a7 	.word	0x0800b1a7
 800a068:	0800b251 	.word	0x0800b251
 800a06c:	0800b2fb 	.word	0x0800b2fb
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a076:	2b64      	cmp	r3, #100	@ 0x64
 800a078:	d046      	beq.n	800a108 <WiFi_Conn_ND+0x278>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a080:	2b01      	cmp	r3, #1
 800a082:	d041      	beq.n	800a108 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a08a:	2b1c      	cmp	r3, #28
 800a08c:	d03c      	beq.n	800a108 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a094:	2b02      	cmp	r3, #2
 800a096:	d037      	beq.n	800a108 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a09e:	2b04      	cmp	r3, #4
 800a0a0:	d032      	beq.n	800a108 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a0a8:	2b13      	cmp	r3, #19
 800a0aa:	d02d      	beq.n	800a108 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f7fc faaf 	bl	8006610 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d14e      	bne.n	800a15a <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f7fc fc3d 	bl	800693c <AT_ESP8266_ND>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_enviaruart=0;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
								if (b->_DBG_EN==1)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f8d3 3d84 	ldr.w	r3, [r3, #3460]	@ 0xd84
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d109      	bne.n	800a0f0 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	4610      	mov	r0, r2
 800a0ec:	f7f7 fa1c 	bl	8001528 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f503 6198 	add.w	r1, r3, #1216	@ 0x4c0
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800a0fc:	b29a      	uxth	r2, r3
 800a0fe:	2364      	movs	r3, #100	@ 0x64
 800a100:	68b8      	ldr	r0, [r7, #8]
 800a102:	f7fb f9e1 	bl	80054c8 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 800a106:	e028      	b.n	800a15a <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d004      	beq.n	800a11c <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
					if((b->_estado==at_ok)||
 800a118:	2b1c      	cmp	r3, #28
 800a11a:	d103      	bne.n	800a124 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	226d      	movs	r2, #109	@ 0x6d
 800a120:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d00f      	beq.n	800a14e <WiFi_Conn_ND+0x2be>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a134:	2b04      	cmp	r3, #4
 800a136:	d00a      	beq.n	800a14e <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a13e:	2b0b      	cmp	r3, #11
 800a140:	d005      	beq.n	800a14e <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a148:	2b0c      	cmp	r3, #12
 800a14a:	f041 8346 	bne.w	800b7da <WiFi_Conn_ND+0x194a>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2269      	movs	r2, #105	@ 0x69
 800a152:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 800a156:	f001 bb40 	b.w	800b7da <WiFi_Conn_ND+0x194a>
 800a15a:	f001 bb3e 	b.w	800b7da <WiFi_Conn_ND+0x194a>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f7fc fa56 	bl	8006610 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2264      	movs	r2, #100	@ 0x64
 800a168:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				b->_estado=0;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
				b->_n_orig=0; //Borro el vector RX
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
			}
			break;
 800a184:	f001 bb56 	b.w	800b834 <WiFi_Conn_ND+0x19a4>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00c      	beq.n	800a1ac <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f7fc fa68 	bl	8006668 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a19e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					b->_estado=0;//
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800a1aa:	e00e      	b.n	800a1ca <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f7fc fa45 	bl	800663c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	22c8      	movs	r2, #200	@ 0xc8
 800a1b6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					b->_estado=0;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
					b->_n_orig=0; //Borro el vector RX
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a1d0:	2b04      	cmp	r3, #4
 800a1d2:	f041 8304 	bne.w	800b7de <WiFi_Conn_ND+0x194e>
					{
						Cambiar_CWMODE(b);
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f7fc fa1a 	bl	8006610 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2264      	movs	r2, #100	@ 0x64
 800a1e0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						b->_estado=0;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
					}
			}
			break;
 800a1f4:	f001 baf3 	b.w	800b7de <WiFi_Conn_ND+0x194e>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a1fe:	2bc8      	cmp	r3, #200	@ 0xc8
 800a200:	d04f      	beq.n	800a2a2 <WiFi_Conn_ND+0x412>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d04a      	beq.n	800a2a2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a212:	2b02      	cmp	r3, #2
 800a214:	d045      	beq.n	800a2a2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a21c:	2b03      	cmp	r3, #3
 800a21e:	d040      	beq.n	800a2a2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a226:	2b04      	cmp	r3, #4
 800a228:	d03b      	beq.n	800a2a2 <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a230:	2b0a      	cmp	r3, #10
 800a232:	d036      	beq.n	800a2a2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a23a:	2b0b      	cmp	r3, #11
 800a23c:	d031      	beq.n	800a2a2 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a244:	2b0c      	cmp	r3, #12
 800a246:	d02c      	beq.n	800a2a2 <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f7fc f9f7 	bl	800663c <ConectarWIFI>
						if(b->_enviaruart==1)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 800a254:	2b01      	cmp	r3, #1
 800a256:	d124      	bne.n	800a2a2 <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f7fc fb6f 	bl	800693c <AT_ESP8266_ND>
 800a25e:	4602      	mov	r2, r0
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_enviaruart=0;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2200      	movs	r2, #0
 800a26a:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f8d3 3d84 	ldr.w	r3, [r3, #3460]	@ 0xd84
 800a274:	2b01      	cmp	r3, #1
 800a276:	d109      	bne.n	800a28c <WiFi_Conn_ND+0x3fc>
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800a284:	4619      	mov	r1, r3
 800a286:	4610      	mov	r0, r2
 800a288:	f7f7 f94e 	bl	8001528 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f503 6198 	add.w	r1, r3, #1216	@ 0x4c0
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800a298:	b29a      	uxth	r2, r3
 800a29a:	2364      	movs	r3, #100	@ 0x64
 800a29c:	68b8      	ldr	r0, [r7, #8]
 800a29e:	f7fb f913 	bl	80054c8 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d004      	beq.n	800a2b6 <WiFi_Conn_ND+0x426>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a2b2:	2b0c      	cmp	r3, #12
 800a2b4:	d103      	bne.n	800a2be <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	22d1      	movs	r2, #209	@ 0xd1
 800a2ba:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)||(b->_estado==at_wifi_disconnect)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d00f      	beq.n	800a2e8 <WiFi_Conn_ND+0x458>
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	d00a      	beq.n	800a2e8 <WiFi_Conn_ND+0x458>
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a2d8:	2b20      	cmp	r3, #32
 800a2da:	d005      	beq.n	800a2e8 <WiFi_Conn_ND+0x458>
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a2e2:	2b0a      	cmp	r3, #10
 800a2e4:	f041 827d 	bne.w	800b7e2 <WiFi_Conn_ND+0x1952>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	22cd      	movs	r2, #205	@ 0xcd
 800a2ec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				//----Condiciones de cambio de estado
			}
			break;
 800a2f0:	f001 ba77 	b.w	800b7e2 <WiFi_Conn_ND+0x1952>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 800a2f4:	f241 3088 	movw	r0, #5000	@ 0x1388
 800a2f8:	f7f8 fc32 	bl	8002b60 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f7fc f99d 	bl	800663c <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	22c8      	movs	r2, #200	@ 0xc8
 800a306:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				b->_estado=0;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
				b->_n_orig=0; //Borro el vector RX
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2200      	movs	r2, #0
 800a316:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a320:	2b04      	cmp	r3, #4
 800a322:	f041 8260 	bne.w	800b7e6 <WiFi_Conn_ND+0x1956>
					{
						Cambiar_CWMODE(b);
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f7fc f972 	bl	8006610 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2264      	movs	r2, #100	@ 0x64
 800a330:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						b->_estado=0;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
					}
			}
			break;
 800a344:	f001 ba4f 	b.w	800b7e6 <WiFi_Conn_ND+0x1956>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f893 30ab 	ldrb.w	r3, [r3, #171]	@ 0xab
 800a356:	2b01      	cmp	r3, #1
 800a358:	d108      	bne.n	800a36c <WiFi_Conn_ND+0x4dc>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f240 3229 	movw	r2, #809	@ 0x329
 800a360:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					b->_estado=0;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a372:	2b0a      	cmp	r3, #10
 800a374:	d009      	beq.n	800a38a <WiFi_Conn_ND+0x4fa>
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a37c:	2b0d      	cmp	r3, #13
 800a37e:	d004      	beq.n	800a38a <WiFi_Conn_ND+0x4fa>
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a386:	2b03      	cmp	r3, #3
 800a388:	d10a      	bne.n	800a3a0 <WiFi_Conn_ND+0x510>
				{
					ConectarWIFI(b);
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f7fc f956 	bl	800663c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	22c8      	movs	r2, #200	@ 0xc8
 800a394:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					b->_estado=0;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a3a6:	2b04      	cmp	r3, #4
 800a3a8:	d10e      	bne.n	800a3c8 <WiFi_Conn_ND+0x538>
					{
						Cambiar_CWMODE(b);
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f7fc f930 	bl	8006610 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2264      	movs	r2, #100	@ 0x64
 800a3b4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						b->_estado=0;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d011      	beq.n	800a3f6 <WiFi_Conn_ND+0x566>
				{//
					CrearServidorTCP(b);
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f7fc f9a0 	bl	8006718 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800a3de:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					b->_estado=0;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
					b->_n_orig=0; //Borro el vector RX
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800a3f2:	f001 ba1f 	b.w	800b834 <WiFi_Conn_ND+0x19a4>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f7fc f936 	bl	8006668 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800a402:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					b->_estado=0;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
			break;
 800a40e:	f001 ba11 	b.w	800b834 <WiFi_Conn_ND+0x19a4>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a418:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800a41c:	d03b      	beq.n	800a496 <WiFi_Conn_ND+0x606>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a424:	2b04      	cmp	r3, #4
 800a426:	d036      	beq.n	800a496 <WiFi_Conn_ND+0x606>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a42e:	2b0a      	cmp	r3, #10
 800a430:	d031      	beq.n	800a496 <WiFi_Conn_ND+0x606>
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a438:	2b0d      	cmp	r3, #13
 800a43a:	d02c      	beq.n	800a496 <WiFi_Conn_ND+0x606>
				{
						DesconectarWIFI(b);
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f7fc f93f 	bl	80066c0 <DesconectarWIFI>
						if(b->_enviaruart==1)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d124      	bne.n	800a496 <WiFi_Conn_ND+0x606>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f7fc fa75 	bl	800693c <AT_ESP8266_ND>
 800a452:	4602      	mov	r2, r0
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_enviaruart=0;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f8d3 3d84 	ldr.w	r3, [r3, #3460]	@ 0xd84
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d109      	bne.n	800a480 <WiFi_Conn_ND+0x5f0>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800a478:	4619      	mov	r1, r3
 800a47a:	4610      	mov	r0, r2
 800a47c:	f7f7 f854 	bl	8001528 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f503 6198 	add.w	r1, r3, #1216	@ 0x4c0
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	2364      	movs	r3, #100	@ 0x64
 800a490:	68b8      	ldr	r0, [r7, #8]
 800a492:	f7fb f819 	bl	80054c8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a49c:	2b0a      	cmp	r3, #10
 800a49e:	d005      	beq.n	800a4ac <WiFi_Conn_ND+0x61c>
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a4a6:	2b0d      	cmp	r3, #13
 800a4a8:	f041 819f 	bne.w	800b7ea <WiFi_Conn_ND+0x195a>
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f240 1235 	movw	r2, #309	@ 0x135
 800a4b2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				//----Condiciones de cambio de estado
			}
			break;
 800a4b6:	f001 b998 	b.w	800b7ea <WiFi_Conn_ND+0x195a>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f7fc f892 	bl	80065e4 <NOP>
			}
			break;
 800a4c0:	f001 b9b8 	b.w	800b834 <WiFi_Conn_ND+0x19a4>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

				ConectarWIFI(b);
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f7fc f8b5 	bl	800663c <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	22c8      	movs	r2, #200	@ 0xc8
 800a4d6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				b->_estado=0;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a4e8:	2b04      	cmp	r3, #4
 800a4ea:	f041 8180 	bne.w	800b7ee <WiFi_Conn_ND+0x195e>
					{
						Cambiar_CWMODE(b);
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f7fc f88e 	bl	8006610 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2264      	movs	r2, #100	@ 0x64
 800a4f8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						b->_estado=0;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
					}
			}
			break;
 800a50c:	f001 b96f 	b.w	800b7ee <WiFi_Conn_ND+0x195e>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a516:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800a51a:	d04f      	beq.n	800a5bc <WiFi_Conn_ND+0x72c>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a522:	2b04      	cmp	r3, #4
 800a524:	d04a      	beq.n	800a5bc <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_ok)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d045      	beq.n	800a5bc <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_error)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a536:	2b02      	cmp	r3, #2
 800a538:	d040      	beq.n	800a5bc <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_ok)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a540:	2b07      	cmp	r3, #7
 800a542:	d03b      	beq.n	800a5bc <WiFi_Conn_ND+0x72c>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a54a:	2b08      	cmp	r3, #8
 800a54c:	d036      	beq.n	800a5bc <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_err)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a554:	2b1e      	cmp	r3, #30
 800a556:	d031      	beq.n	800a5bc <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a55e:	2b1f      	cmp	r3, #31
 800a560:	d02c      	beq.n	800a5bc <WiFi_Conn_ND+0x72c>
				{
						MUX(b);
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f7fc f880 	bl	8006668 <MUX>
						if(b->_enviaruart==1)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d124      	bne.n	800a5bc <WiFi_Conn_ND+0x72c>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f7fc f9e2 	bl	800693c <AT_ESP8266_ND>
 800a578:	4602      	mov	r2, r0
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_enviaruart=0;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8d3 3d84 	ldr.w	r3, [r3, #3460]	@ 0xd84
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d109      	bne.n	800a5a6 <WiFi_Conn_ND+0x716>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800a59e:	4619      	mov	r1, r3
 800a5a0:	4610      	mov	r0, r2
 800a5a2:	f7f6 ffc1 	bl	8001528 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f503 6198 	add.w	r1, r3, #1216	@ 0x4c0
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	2364      	movs	r3, #100	@ 0x64
 800a5b6:	68b8      	ldr	r0, [r7, #8]
 800a5b8:	f7fa ff86 	bl	80054c8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d009      	beq.n	800a5da <WiFi_Conn_ND+0x74a>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a5cc:	2b07      	cmp	r3, #7
 800a5ce:	d004      	beq.n	800a5da <WiFi_Conn_ND+0x74a>
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a5d6:	2b08      	cmp	r3, #8
 800a5d8:	d104      	bne.n	800a5e4 <WiFi_Conn_ND+0x754>
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f240 1299 	movw	r2, #409	@ 0x199
 800a5e0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err))
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d00a      	beq.n	800a604 <WiFi_Conn_ND+0x774>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a5f4:	2b1e      	cmp	r3, #30
 800a5f6:	d005      	beq.n	800a604 <WiFi_Conn_ND+0x774>
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a5fe:	2b1f      	cmp	r3, #31
 800a600:	f041 80f7 	bne.w	800b7f2 <WiFi_Conn_ND+0x1962>
					{
					b->_estado_conexion=MUX_CONN_ERROR;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f240 1295 	movw	r2, #405	@ 0x195
 800a60a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					}
				//----Condiciones de cambio de estado
			}
			break;
 800a60e:	f001 b8f0 	b.w	800b7f2 <WiFi_Conn_ND+0x1962>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f7fb ffe6 	bl	80065e4 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a61e:	2b04      	cmp	r3, #4
 800a620:	d112      	bne.n	800a648 <WiFi_Conn_ND+0x7b8>
				{
					Cambiar_CWMODE(b);
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f7fb fff4 	bl	8006610 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2264      	movs	r2, #100	@ 0x64
 800a62c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					b->_estado=0;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
					b->_n_orig=0; //Borro el vector RX
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a64e:	2b0a      	cmp	r3, #10
 800a650:	d00a      	beq.n	800a668 <WiFi_Conn_ND+0x7d8>
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a658:	2b0d      	cmp	r3, #13
 800a65a:	d005      	beq.n	800a668 <WiFi_Conn_ND+0x7d8>
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a662:	2b03      	cmp	r3, #3
 800a664:	f041 80c7 	bne.w	800b7f6 <WiFi_Conn_ND+0x1966>
				{
					ConectarWIFI(b);
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f7fb ffe7 	bl	800663c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	22c8      	movs	r2, #200	@ 0xc8
 800a672:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					b->_estado=0;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2200      	movs	r2, #0
 800a67a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
					b->_n_orig=0; //Borro el vector RX
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
				}
			}
			break;
 800a686:	f001 b8b6 	b.w	800b7f6 <WiFi_Conn_ND+0x1966>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f7fb ffaa 	bl	80065e4 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a69e:	2b04      	cmp	r3, #4
 800a6a0:	d10e      	bne.n	800a6c0 <WiFi_Conn_ND+0x830>
					{
						Cambiar_CWMODE(b);
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f7fb ffb4 	bl	8006610 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2264      	movs	r2, #100	@ 0x64
 800a6ac:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						b->_estado=0;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a6c6:	2b0a      	cmp	r3, #10
 800a6c8:	d009      	beq.n	800a6de <WiFi_Conn_ND+0x84e>
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a6d0:	2b0d      	cmp	r3, #13
 800a6d2:	d004      	beq.n	800a6de <WiFi_Conn_ND+0x84e>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a6da:	2b03      	cmp	r3, #3
 800a6dc:	d10a      	bne.n	800a6f4 <WiFi_Conn_ND+0x864>
					{
						ConectarWIFI(b);
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f7fb ffac 	bl	800663c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	22c8      	movs	r2, #200	@ 0xc8
 800a6e8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						b->_estado=0;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
					}
					if(b->_NO_IP==0)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f8d3 3d80 	ldr.w	r3, [r3, #3456]	@ 0xd80
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d10d      	bne.n	800a71a <WiFi_Conn_ND+0x88a>
					{
						IPDef(b);
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f7fb ffc8 	bl	8006694 <IPDef>
						b->_estado_conexion=DEF_IP_EN_CURSO;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800a70a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						b->_estado=0;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2200      	movs	r2, #0
 800a712:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						b->_estado=0;
					}


			}
			break;
 800a716:	f001 b88d 	b.w	800b834 <WiFi_Conn_ND+0x19a4>
						IPDef(b);
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f7fb ffba 	bl	8006694 <IPDef>
						b->_estado_conexion=DEF_IP_OK;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f240 12fd 	movw	r2, #509	@ 0x1fd
 800a726:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						b->_estado=0;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
			break;
 800a732:	f001 b87f 	b.w	800b834 <WiFi_Conn_ND+0x19a4>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a73c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a740:	d045      	beq.n	800a7ce <WiFi_Conn_ND+0x93e>
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a748:	2b04      	cmp	r3, #4
 800a74a:	d040      	beq.n	800a7ce <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_ok)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a752:	2b01      	cmp	r3, #1
 800a754:	d03b      	beq.n	800a7ce <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_error)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d036      	beq.n	800a7ce <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_ok)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a766:	2b1b      	cmp	r3, #27
 800a768:	d031      	beq.n	800a7ce <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a770:	2b21      	cmp	r3, #33	@ 0x21
 800a772:	d02c      	beq.n	800a7ce <WiFi_Conn_ND+0x93e>
				{
						IPDef(b);
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f7fb ff8d 	bl	8006694 <IPDef>
						if(b->_enviaruart==1)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 800a780:	2b01      	cmp	r3, #1
 800a782:	d124      	bne.n	800a7ce <WiFi_Conn_ND+0x93e>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f7fc f8d9 	bl	800693c <AT_ESP8266_ND>
 800a78a:	4602      	mov	r2, r0
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_enviaruart=0;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8d3 3d84 	ldr.w	r3, [r3, #3460]	@ 0xd84
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d109      	bne.n	800a7b8 <WiFi_Conn_ND+0x928>
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	4610      	mov	r0, r2
 800a7b4:	f7f6 feb8 	bl	8001528 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f503 6198 	add.w	r1, r3, #1216	@ 0x4c0
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800a7c4:	b29a      	uxth	r2, r3
 800a7c6:	2364      	movs	r3, #100	@ 0x64
 800a7c8:	68b8      	ldr	r0, [r7, #8]
 800a7ca:	f7fa fe7d 	bl	80054c8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d004      	beq.n	800a7e2 <WiFi_Conn_ND+0x952>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a7de:	2b1b      	cmp	r3, #27
 800a7e0:	d104      	bne.n	800a7ec <WiFi_Conn_ND+0x95c>
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f240 12fd 	movw	r2, #509	@ 0x1fd
 800a7e8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d005      	beq.n	800a802 <WiFi_Conn_ND+0x972>
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a7fc:	2b21      	cmp	r3, #33	@ 0x21
 800a7fe:	f040 87fc 	bne.w	800b7fa <WiFi_Conn_ND+0x196a>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f240 12f9 	movw	r2, #505	@ 0x1f9
 800a808:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				//----Condiciones de cambio de estado
			}
			break;
 800a80c:	f000 bff5 	b.w	800b7fa <WiFi_Conn_ND+0x196a>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f7fb fee7 	bl	80065e4 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a81c:	2b04      	cmp	r3, #4
 800a81e:	d004      	beq.n	800a82a <WiFi_Conn_ND+0x99a>
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a826:	2b02      	cmp	r3, #2
 800a828:	d112      	bne.n	800a850 <WiFi_Conn_ND+0x9c0>
				{
					Cambiar_CWMODE(b);
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f7fb fef0 	bl	8006610 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2264      	movs	r2, #100	@ 0x64
 800a834:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					b->_estado=0;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
					b->_n_orig=0; //Borro el vector RX
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2200      	movs	r2, #0
 800a844:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a856:	2b0a      	cmp	r3, #10
 800a858:	d00a      	beq.n	800a870 <WiFi_Conn_ND+0x9e0>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a860:	2b0d      	cmp	r3, #13
 800a862:	d005      	beq.n	800a870 <WiFi_Conn_ND+0x9e0>
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a86a:	2b03      	cmp	r3, #3
 800a86c:	f040 87c7 	bne.w	800b7fe <WiFi_Conn_ND+0x196e>
				{
					ConectarWIFI(b);
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f7fb fee3 	bl	800663c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	22c8      	movs	r2, #200	@ 0xc8
 800a87a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					b->_estado=0;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2200      	movs	r2, #0
 800a882:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
					b->_n_orig=0; //Borro el vector RX
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2200      	movs	r2, #0
 800a88a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
				}
			}
			break;
 800a88e:	f000 bfb6 	b.w	800b7fe <WiFi_Conn_ND+0x196e>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f7fb fea6 	bl	80065e4 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a89e:	2b04      	cmp	r3, #4
 800a8a0:	d112      	bne.n	800a8c8 <WiFi_Conn_ND+0xa38>
					{
						Cambiar_CWMODE(b);
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f7fb feb4 	bl	8006610 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2264      	movs	r2, #100	@ 0x64
 800a8ac:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						b->_estado=0;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						b->_n_orig=0; //Borro el vector RX
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a8ce:	2b0a      	cmp	r3, #10
 800a8d0:	d009      	beq.n	800a8e6 <WiFi_Conn_ND+0xa56>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a8d8:	2b0d      	cmp	r3, #13
 800a8da:	d004      	beq.n	800a8e6 <WiFi_Conn_ND+0xa56>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a8e2:	2b03      	cmp	r3, #3
 800a8e4:	d10e      	bne.n	800a904 <WiFi_Conn_ND+0xa74>
					{
						ConectarWIFI(b);
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f7fb fea8 	bl	800663c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	22c8      	movs	r2, #200	@ 0xc8
 800a8f0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						b->_estado=0;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						b->_n_orig=0; //Borro el vector RX
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f893 30aa 	ldrb.w	r3, [r3, #170]	@ 0xaa
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d111      	bne.n	800a932 <WiFi_Conn_ND+0xaa2>
					{
						ConectarTCP(b);
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f7fb feec 	bl	80066ec <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800a91a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						b->_estado=0;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2200      	movs	r2, #0
 800a922:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						b->_n_orig=0; //Borro el vector RX
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
						b->_estado=0;//
						b->_n_orig=0;// //Borro el vector RX

					}
			}
			break;
 800a92e:	f000 bf81 	b.w	800b834 <WiFi_Conn_ND+0x19a4>
						ConectarWIFI(b);//
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f7fb fe82 	bl	800663c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	22c8      	movs	r2, #200	@ 0xc8
 800a93c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						b->_estado=0;//
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2200      	movs	r2, #0
 800a944:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						b->_n_orig=0;// //Borro el vector RX
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
			break;
 800a950:	f000 bf70 	b.w	800b834 <WiFi_Conn_ND+0x19a4>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a95a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800a95e:	d04a      	beq.n	800a9f6 <WiFi_Conn_ND+0xb66>
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a966:	2b02      	cmp	r3, #2
 800a968:	d045      	beq.n	800a9f6 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_ok)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a970:	2b01      	cmp	r3, #1
 800a972:	d040      	beq.n	800a9f6 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_wifi_disconnect)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a97a:	2b0a      	cmp	r3, #10
 800a97c:	d03b      	beq.n	800a9f6 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a984:	2b0e      	cmp	r3, #14
 800a986:	d036      	beq.n	800a9f6 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_conectado)
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a98e:	2b0f      	cmp	r3, #15
 800a990:	d031      	beq.n	800a9f6 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a998:	2b10      	cmp	r3, #16
 800a99a:	d02c      	beq.n	800a9f6 <WiFi_Conn_ND+0xb66>
				{
					ConectarTCP(b);
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f7fb fea5 	bl	80066ec <ConectarTCP>
						if(b->_enviaruart==1)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d124      	bne.n	800a9f6 <WiFi_Conn_ND+0xb66>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f7fb ffc5 	bl	800693c <AT_ESP8266_ND>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_enviaruart=0;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f8d3 3d84 	ldr.w	r3, [r3, #3460]	@ 0xd84
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d109      	bne.n	800a9e0 <WiFi_Conn_ND+0xb50>
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800a9d8:	4619      	mov	r1, r3
 800a9da:	4610      	mov	r0, r2
 800a9dc:	f7f6 fda4 	bl	8001528 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f503 6198 	add.w	r1, r3, #1216	@ 0x4c0
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	2364      	movs	r3, #100	@ 0x64
 800a9f0:	68b8      	ldr	r0, [r7, #8]
 800a9f2:	f7fa fd69 	bl	80054c8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a9fc:	2b01      	cmp	r3, #1
 800a9fe:	d009      	beq.n	800aa14 <WiFi_Conn_ND+0xb84>
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aa06:	2b0e      	cmp	r3, #14
 800aa08:	d004      	beq.n	800aa14 <WiFi_Conn_ND+0xb84>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aa10:	2b0f      	cmp	r3, #15
 800aa12:	d106      	bne.n	800aa22 <WiFi_Conn_ND+0xb92>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f240 2261 	movw	r2, #609	@ 0x261
 800aa1a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800aa1e:	f000 bef0 	b.w	800b802 <WiFi_Conn_ND+0x1972>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	d005      	beq.n	800aa38 <WiFi_Conn_ND+0xba8>
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aa32:	2b10      	cmp	r3, #16
 800aa34:	f040 86e5 	bne.w	800b802 <WiFi_Conn_ND+0x1972>
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f240 225d 	movw	r2, #605	@ 0x25d
 800aa3e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
			break;
 800aa42:	f000 bede 	b.w	800b802 <WiFi_Conn_ND+0x1972>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f7fb fdcc 	bl	80065e4 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aa52:	2b04      	cmp	r3, #4
 800aa54:	d112      	bne.n	800aa7c <WiFi_Conn_ND+0xbec>
				{
					Cambiar_CWMODE(b);
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f7fb fdda 	bl	8006610 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2264      	movs	r2, #100	@ 0x64
 800aa60:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					b->_estado=0;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
					b->_n_orig=0; //Borro el vector RX
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_tcp_noip_err)||(b->_estado==at_error)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aa82:	2b0a      	cmp	r3, #10
 800aa84:	d013      	beq.n	800aaae <WiFi_Conn_ND+0xc1e>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aa8c:	2b0d      	cmp	r3, #13
 800aa8e:	d00e      	beq.n	800aaae <WiFi_Conn_ND+0xc1e>
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aa96:	2b22      	cmp	r3, #34	@ 0x22
 800aa98:	d009      	beq.n	800aaae <WiFi_Conn_ND+0xc1e>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aaa0:	2b02      	cmp	r3, #2
 800aaa2:	d004      	beq.n	800aaae <WiFi_Conn_ND+0xc1e>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aaaa:	2b03      	cmp	r3, #3
 800aaac:	d10e      	bne.n	800aacc <WiFi_Conn_ND+0xc3c>
				{
					ConectarWIFI(b);
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f7fb fdc4 	bl	800663c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	22c8      	movs	r2, #200	@ 0xc8
 800aab8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					b->_estado=0;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
					b->_n_orig=0; //Borro el vector RX
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2200      	movs	r2, #0
 800aac8:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
				}

				if((b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aad2:	2b10      	cmp	r3, #16
 800aad4:	d005      	beq.n	800aae2 <WiFi_Conn_ND+0xc52>
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aadc:	2b0e      	cmp	r3, #14
 800aade:	f040 8692 	bne.w	800b806 <WiFi_Conn_ND+0x1976>
				{
					ConectarTCP(b);
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f7fb fe02 	bl	80066ec <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800aaee:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					b->_estado=0;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
					b->_n_orig=0; //Borro el vector RX
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
				}
			}
			break;
 800ab02:	f000 be80 	b.w	800b806 <WiFi_Conn_ND+0x1976>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f7fb fd6c 	bl	80065e4 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab12:	2b04      	cmp	r3, #4
 800ab14:	d112      	bne.n	800ab3c <WiFi_Conn_ND+0xcac>
					{
						Cambiar_CWMODE(b);
 800ab16:	68f8      	ldr	r0, [r7, #12]
 800ab18:	f7fb fd7a 	bl	8006610 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2264      	movs	r2, #100	@ 0x64
 800ab20:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						b->_estado=0;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						b->_n_orig=0; //Borro el vector RX
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab42:	2b0a      	cmp	r3, #10
 800ab44:	d009      	beq.n	800ab5a <WiFi_Conn_ND+0xcca>
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab4c:	2b0d      	cmp	r3, #13
 800ab4e:	d004      	beq.n	800ab5a <WiFi_Conn_ND+0xcca>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab56:	2b03      	cmp	r3, #3
 800ab58:	d10e      	bne.n	800ab78 <WiFi_Conn_ND+0xce8>
					{
						ConectarWIFI(b);
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f7fb fd6e 	bl	800663c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	22c8      	movs	r2, #200	@ 0xc8
 800ab64:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						b->_estado=0;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						b->_n_orig=0; //Borro el vector RX
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2200      	movs	r2, #0
 800ab74:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d004      	beq.n	800ab8c <WiFi_Conn_ND+0xcfc>
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ab88:	2b10      	cmp	r3, #16
 800ab8a:	d10f      	bne.n	800abac <WiFi_Conn_ND+0xd1c>
					{
						ConectarTCP(b);
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f7fb fdad 	bl	80066ec <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800ab98:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						b->_estado=0;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						b->_n_orig=0; //Borro el vector RX2
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800abb2:	2b0e      	cmp	r3, #14
							b->_estado=0;
							b->_n_orig=0; //Borro el vector Rx
						}*/
					}
			}
			break;
 800abb4:	f000 be3e 	b.w	800b834 <WiFi_Conn_ND+0x19a4>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800abbe:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800abc2:	d054      	beq.n	800ac6e <WiFi_Conn_ND+0xdde>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d04f      	beq.n	800ac6e <WiFi_Conn_ND+0xdde>
									&&(b->_estado!=at_wifi_disconnect)
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800abd4:	2b0a      	cmp	r3, #10
 800abd6:	d04a      	beq.n	800ac6e <WiFi_Conn_ND+0xdde>
									&&(b->_estado!=at_tcp_desconectado)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800abde:	2b10      	cmp	r3, #16
 800abe0:	d045      	beq.n	800ac6e <WiFi_Conn_ND+0xdde>
									&&(b->_estado!=at_tcp_snd_err)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800abe8:	2b11      	cmp	r3, #17
 800abea:	d040      	beq.n	800ac6e <WiFi_Conn_ND+0xdde>
									&&(b->_estado!=at_tcp_ok_to_send)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800abf2:	2b14      	cmp	r3, #20
 800abf4:	d03b      	beq.n	800ac6e <WiFi_Conn_ND+0xdde>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800abfc:	2b12      	cmp	r3, #18
 800abfe:	d036      	beq.n	800ac6e <WiFi_Conn_ND+0xdde>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d907      	bls.n	800ac1a <WiFi_Conn_ND+0xd8a>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	@ 0xd18
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d002      	beq.n	800ac1a <WiFi_Conn_ND+0xd8a>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f7fb fdab 	bl	8006770 <EnviarDatos>
					}
						if(b->_enviaruart==1)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d124      	bne.n	800ac6e <WiFi_Conn_ND+0xdde>
							{
								b->_estado=AT_ESP8266_ND(b);
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f7fb fe89 	bl	800693c <AT_ESP8266_ND>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_enviaruart=0;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f8d3 3d84 	ldr.w	r3, [r3, #3460]	@ 0xd84
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d109      	bne.n	800ac58 <WiFi_Conn_ND+0xdc8>
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800ac50:	4619      	mov	r1, r3
 800ac52:	4610      	mov	r0, r2
 800ac54:	f7f6 fc68 	bl	8001528 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f503 6198 	add.w	r1, r3, #1216	@ 0x4c0
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800ac64:	b29a      	uxth	r2, r3
 800ac66:	2364      	movs	r3, #100	@ 0x64
 800ac68:	68b8      	ldr	r0, [r7, #8]
 800ac6a:	f7fa fc2d 	bl	80054c8 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ac74:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 800ac78:	d145      	bne.n	800ad06 <WiFi_Conn_ND+0xe76>
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d140      	bne.n	800ad06 <WiFi_Conn_ND+0xe76>
											&&(b->_estado!=at_error)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	d03b      	beq.n	800ad06 <WiFi_Conn_ND+0xe76>
											&&(b->_estado!=at_tcp_noip_err)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ac94:	2b22      	cmp	r3, #34	@ 0x22
 800ac96:	d036      	beq.n	800ad06 <WiFi_Conn_ND+0xe76>
											&&(b->_estado!=at_wifi_disconnect)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ac9e:	2b0a      	cmp	r3, #10
 800aca0:	d031      	beq.n	800ad06 <WiFi_Conn_ND+0xe76>
											&&(b->_estado!=at_tcp_desconectado)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aca8:	2b10      	cmp	r3, #16
 800acaa:	d02c      	beq.n	800ad06 <WiFi_Conn_ND+0xe76>
											&&(b->_estado!=at_fail)		//240419
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800acb2:	2b03      	cmp	r3, #3
 800acb4:	d027      	beq.n	800ad06 <WiFi_Conn_ND+0xe76>
											&&(b->_estado!=at_tcp_snd_err)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800acbc:	2b11      	cmp	r3, #17
 800acbe:	d022      	beq.n	800ad06 <WiFi_Conn_ND+0xe76>
											&&(b->_estado!=at_tcp_enviado_error))
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800acc6:	2b12      	cmp	r3, #18
 800acc8:	d01d      	beq.n	800ad06 <WiFi_Conn_ND+0xe76>
							{
								b->_enviaruart=0;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f8d3 3d84 	ldr.w	r3, [r3, #3460]	@ 0xd84
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d109      	bne.n	800acf0 <WiFi_Conn_ND+0xe60>
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800ace8:	4619      	mov	r1, r3
 800acea:	4610      	mov	r0, r2
 800acec:	f7f6 fc1c 	bl	8001528 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f503 6198 	add.w	r1, r3, #1216	@ 0x4c0
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	2364      	movs	r3, #100	@ 0x64
 800ad00:	68b8      	ldr	r0, [r7, #8]
 800ad02:	f7fa fbe1 	bl	80054c8 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ad0c:	2b13      	cmp	r3, #19
 800ad0e:	d104      	bne.n	800ad1a <WiFi_Conn_ND+0xe8a>
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f240 22c5 	movw	r2, #709	@ 0x2c5
 800ad16:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d01e      	beq.n	800ad62 <WiFi_Conn_ND+0xed2>
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ad2a:	2b0a      	cmp	r3, #10
 800ad2c:	d019      	beq.n	800ad62 <WiFi_Conn_ND+0xed2>
										 ||(b->_estado==at_fail)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ad34:	2b03      	cmp	r3, #3
 800ad36:	d014      	beq.n	800ad62 <WiFi_Conn_ND+0xed2>
										 ||(b->_estado==at_tcp_noip_err)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ad3e:	2b22      	cmp	r3, #34	@ 0x22
 800ad40:	d00f      	beq.n	800ad62 <WiFi_Conn_ND+0xed2>
										 ||(b->_estado==at_tcp_desconectado)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ad48:	2b10      	cmp	r3, #16
 800ad4a:	d00a      	beq.n	800ad62 <WiFi_Conn_ND+0xed2>
										 ||(b->_estado==at_tcp_snd_err)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ad52:	2b11      	cmp	r3, #17
 800ad54:	d005      	beq.n	800ad62 <WiFi_Conn_ND+0xed2>
										 ||(b->_estado==at_tcp_enviado_error))
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ad5c:	2b12      	cmp	r3, #18
 800ad5e:	f040 8554 	bne.w	800b80a <WiFi_Conn_ND+0x197a>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f240 22c1 	movw	r2, #705	@ 0x2c1
 800ad68:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800ad6c:	f000 bd4d 	b.w	800b80a <WiFi_Conn_ND+0x197a>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800ad70:	68f8      	ldr	r0, [r7, #12]
 800ad72:	f7fb fc37 	bl	80065e4 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ad7c:	2b04      	cmp	r3, #4
 800ad7e:	d112      	bne.n	800ada6 <WiFi_Conn_ND+0xf16>
				{
					Cambiar_CWMODE(b);
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f7fb fc45 	bl	8006610 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2264      	movs	r2, #100	@ 0x64
 800ad8a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					b->_estado=0;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
					b->_n_orig=0; //Borro el vector RX
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
				}
				if((b->_estado==at_wifi_disconnect)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800adac:	2b0a      	cmp	r3, #10
 800adae:	d013      	beq.n	800add8 <WiFi_Conn_ND+0xf48>
						||(b->_estado==at_deconectar_ok )
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800adb6:	2b0d      	cmp	r3, #13
 800adb8:	d00e      	beq.n	800add8 <WiFi_Conn_ND+0xf48>
						||(b->_estado==at_fail)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800adc0:	2b03      	cmp	r3, #3
 800adc2:	d009      	beq.n	800add8 <WiFi_Conn_ND+0xf48>
						||(b->_estado!=at_error)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d104      	bne.n	800add8 <WiFi_Conn_ND+0xf48>
						||(b->_estado!=at_tcp_noip_err)) //Si me desconecto, me vuelvo a conectar 240419
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800add4:	2b22      	cmp	r3, #34	@ 0x22
 800add6:	d00e      	beq.n	800adf6 <WiFi_Conn_ND+0xf66>
				{
					ConectarWIFI(b);
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f7fb fc2f 	bl	800663c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	22c8      	movs	r2, #200	@ 0xc8
 800ade2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					b->_estado=0;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2200      	movs	r2, #0
 800adea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
					b->_n_orig=0; //Borro el vector RX
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800adfc:	2b0c      	cmp	r3, #12
 800adfe:	d10f      	bne.n	800ae20 <WiFi_Conn_ND+0xf90>
				{
					ConectarTCP(b);
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f7fb fc73 	bl	80066ec <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800ae0c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					b->_estado=0;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
					b->_n_orig=0; //Borro el vector RX
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ae26:	2b02      	cmp	r3, #2
 800ae28:	d00f      	beq.n	800ae4a <WiFi_Conn_ND+0xfba>
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ae30:	2b10      	cmp	r3, #16
 800ae32:	d00a      	beq.n	800ae4a <WiFi_Conn_ND+0xfba>
										 ||(b->_estado==at_tcp_snd_err)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ae3a:	2b11      	cmp	r3, #17
 800ae3c:	d005      	beq.n	800ae4a <WiFi_Conn_ND+0xfba>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ae44:	2b12      	cmp	r3, #18
 800ae46:	f040 84e2 	bne.w	800b80e <WiFi_Conn_ND+0x197e>
				{
					ConectarTCP(b);
 800ae4a:	68f8      	ldr	r0, [r7, #12]
 800ae4c:	f7fb fc4e 	bl	80066ec <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800ae56:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					b->_estado=0;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
					b->_n_orig=0; //Borro el vector RX
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
				}
			}
			break;
 800ae6a:	f000 bcd0 	b.w	800b80e <WiFi_Conn_ND+0x197e>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f7fb fbb8 	bl	80065e4 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ae7a:	2b04      	cmp	r3, #4
 800ae7c:	d112      	bne.n	800aea4 <WiFi_Conn_ND+0x1014>
					{
						Cambiar_CWMODE(b);
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f7fb fbc6 	bl	8006610 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2264      	movs	r2, #100	@ 0x64
 800ae88:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						b->_estado=0;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						b->_n_orig=0; //Borro el vector RX
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aeaa:	2b0a      	cmp	r3, #10
 800aeac:	d009      	beq.n	800aec2 <WiFi_Conn_ND+0x1032>
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aeb4:	2b0d      	cmp	r3, #13
 800aeb6:	d004      	beq.n	800aec2 <WiFi_Conn_ND+0x1032>
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aebe:	2b03      	cmp	r3, #3
 800aec0:	d10e      	bne.n	800aee0 <WiFi_Conn_ND+0x1050>
					{
						ConectarWIFI(b);
 800aec2:	68f8      	ldr	r0, [r7, #12]
 800aec4:	f7fb fbba 	bl	800663c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	22c8      	movs	r2, #200	@ 0xc8
 800aecc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						b->_estado=0;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						b->_n_orig=0; //Borro el vector RX
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d00e      	beq.n	800af08 <WiFi_Conn_ND+0x1078>
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aef0:	2b0b      	cmp	r3, #11
 800aef2:	d009      	beq.n	800af08 <WiFi_Conn_ND+0x1078>
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800aefa:	2b0c      	cmp	r3, #12
 800aefc:	d004      	beq.n	800af08 <WiFi_Conn_ND+0x1078>
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800af04:	2b10      	cmp	r3, #16
 800af06:	d10f      	bne.n	800af28 <WiFi_Conn_ND+0x1098>
					{
						ConectarTCP(b);
 800af08:	68f8      	ldr	r0, [r7, #12]
 800af0a:	f7fb fbef 	bl	80066ec <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800af14:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
						b->_estado=0;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
						b->_n_orig=0; //Borro el vector RX
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2200      	movs	r2, #0
 800af24:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800af28:	20c8      	movs	r0, #200	@ 0xc8
 800af2a:	f7f7 fe19 	bl	8002b60 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800af34:	2b02      	cmp	r3, #2
 800af36:	d916      	bls.n	800af66 <WiFi_Conn_ND+0x10d6>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	@ 0xd18
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d011      	beq.n	800af66 <WiFi_Conn_ND+0x10d6>
					{
							EnviarDatos(b);
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f7fb fc14 	bl	8006770 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800af4e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
							b->_estado=0;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2200      	movs	r2, #0
 800af56:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
							b->_n_orig=0; //Borro el vector RX
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800af62:	f000 bc67 	b.w	800b834 <WiFi_Conn_ND+0x19a4>
							b->_estado_conexion=TCP_CONN_OK;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f240 2261 	movw	r2, #609	@ 0x261
 800af6c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
							b->_estado=0;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2200      	movs	r2, #0
 800af74:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
							b->_n_orig=0;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
			break;
 800af80:	f000 bc58 	b.w	800b834 <WiFi_Conn_ND+0x19a4>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800af8a:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800af8e:	d045      	beq.n	800b01c <WiFi_Conn_ND+0x118c>
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800af96:	2b02      	cmp	r3, #2
 800af98:	d040      	beq.n	800b01c <WiFi_Conn_ND+0x118c>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800afa0:	2b0a      	cmp	r3, #10
 800afa2:	d03b      	beq.n	800b01c <WiFi_Conn_ND+0x118c>
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800afaa:	2b15      	cmp	r3, #21
 800afac:	d036      	beq.n	800b01c <WiFi_Conn_ND+0x118c>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800afb4:	2b16      	cmp	r3, #22
 800afb6:	d031      	beq.n	800b01c <WiFi_Conn_ND+0x118c>
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800afbe:	2b17      	cmp	r3, #23
 800afc0:	d02c      	beq.n	800b01c <WiFi_Conn_ND+0x118c>
							{
								CrearServidorTCP(b);
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f7fb fba8 	bl	8006718 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d124      	bne.n	800b01c <WiFi_Conn_ND+0x118c>
										{
											b->_estado=AT_ESP8266_ND(b);
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f7fb fcb2 	bl	800693c <AT_ESP8266_ND>
 800afd8:	4602      	mov	r2, r0
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
											b->_enviaruart=0;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f8d3 3d84 	ldr.w	r3, [r3, #3460]	@ 0xd84
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d109      	bne.n	800b006 <WiFi_Conn_ND+0x1176>
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800affe:	4619      	mov	r1, r3
 800b000:	4610      	mov	r0, r2
 800b002:	f7f6 fa91 	bl	8001528 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f503 6198 	add.w	r1, r3, #1216	@ 0x4c0
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800b012:	b29a      	uxth	r2, r3
 800b014:	2364      	movs	r3, #100	@ 0x64
 800b016:	68b8      	ldr	r0, [r7, #8]
 800b018:	f7fa fa56 	bl	80054c8 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b022:	2b15      	cmp	r3, #21
 800b024:	d004      	beq.n	800b030 <WiFi_Conn_ND+0x11a0>
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b02c:	2b17      	cmp	r3, #23
 800b02e:	d104      	bne.n	800b03a <WiFi_Conn_ND+0x11aa>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f240 3229 	movw	r2, #809	@ 0x329
 800b036:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b040:	2b16      	cmp	r3, #22
 800b042:	f040 83e6 	bne.w	800b812 <WiFi_Conn_ND+0x1982>
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f240 3225 	movw	r2, #805	@ 0x325
 800b04c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
							//----Condiciones de cambio de estado
						}
						break;
 800b050:	e3df      	b.n	800b812 <WiFi_Conn_ND+0x1982>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f7fb fac6 	bl	80065e4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b05e:	2b04      	cmp	r3, #4
 800b060:	d112      	bne.n	800b088 <WiFi_Conn_ND+0x11f8>
							{
								Cambiar_CWMODE(b);
 800b062:	68f8      	ldr	r0, [r7, #12]
 800b064:	f7fb fad4 	bl	8006610 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2264      	movs	r2, #100	@ 0x64
 800b06c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
								b->_estado=0;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_n_orig=0; //Borro el vector RX
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b08e:	2b0a      	cmp	r3, #10
 800b090:	d009      	beq.n	800b0a6 <WiFi_Conn_ND+0x1216>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b098:	2b0d      	cmp	r3, #13
 800b09a:	d004      	beq.n	800b0a6 <WiFi_Conn_ND+0x1216>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	d10e      	bne.n	800b0c4 <WiFi_Conn_ND+0x1234>
							{
								ConectarWIFI(b);
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f7fb fac8 	bl	800663c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	22c8      	movs	r2, #200	@ 0xc8
 800b0b0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
								b->_estado=0;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_n_orig=0; //Borro el vector RX
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b0ca:	2b02      	cmp	r3, #2
 800b0cc:	d005      	beq.n	800b0da <WiFi_Conn_ND+0x124a>
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b0d4:	2b10      	cmp	r3, #16
 800b0d6:	f040 839e 	bne.w	800b816 <WiFi_Conn_ND+0x1986>
							{
								ConectarTCP(b);
 800b0da:	68f8      	ldr	r0, [r7, #12]
 800b0dc:	f7fb fb06 	bl	80066ec <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800b0e6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
								b->_estado=0;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_n_orig=0; //Borro el vector RX
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800b0fa:	e38c      	b.n	800b816 <WiFi_Conn_ND+0x1986>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f7fb fa71 	bl	80065e4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b108:	2b04      	cmp	r3, #4
 800b10a:	d112      	bne.n	800b132 <WiFi_Conn_ND+0x12a2>
							{
								Cambiar_CWMODE(b);
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f7fb fa7f 	bl	8006610 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2264      	movs	r2, #100	@ 0x64
 800b116:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
								b->_estado=0;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	2200      	movs	r2, #0
 800b11e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_n_orig=0; //Borro el vector RX
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b138:	2b0a      	cmp	r3, #10
 800b13a:	d009      	beq.n	800b150 <WiFi_Conn_ND+0x12c0>
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b142:	2b0d      	cmp	r3, #13
 800b144:	d004      	beq.n	800b150 <WiFi_Conn_ND+0x12c0>
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b14c:	2b03      	cmp	r3, #3
 800b14e:	d10e      	bne.n	800b16e <WiFi_Conn_ND+0x12de>
							{
								ConectarWIFI(b);
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f7fb fa73 	bl	800663c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	22c8      	movs	r2, #200	@ 0xc8
 800b15a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
								b->_estado=0;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2200      	movs	r2, #0
 800b162:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_n_orig=0; //Borro el vector RX
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2200      	movs	r2, #0
 800b16a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b174:	2b02      	cmp	r3, #2
 800b176:	d005      	beq.n	800b184 <WiFi_Conn_ND+0x12f4>
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b17e:	2b10      	cmp	r3, #16
 800b180:	f040 834b 	bne.w	800b81a <WiFi_Conn_ND+0x198a>
							{
								ConectarTCP(b);
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f7fb fab1 	bl	80066ec <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800b190:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
								b->_estado=0;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_n_orig=0; //Borro el vector RX
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
							}
						}
						break;
 800b1a4:	e339      	b.n	800b81a <WiFi_Conn_ND+0x198a>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	f7fb fa1c 	bl	80065e4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b1b2:	2b04      	cmp	r3, #4
 800b1b4:	d112      	bne.n	800b1dc <WiFi_Conn_ND+0x134c>
							{
								Cambiar_CWMODE(b);
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f7fb fa2a 	bl	8006610 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2264      	movs	r2, #100	@ 0x64
 800b1c0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
								b->_estado=0;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_n_orig=0; //Borro el vector RX
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b1e2:	2b0a      	cmp	r3, #10
 800b1e4:	d009      	beq.n	800b1fa <WiFi_Conn_ND+0x136a>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b1ec:	2b0d      	cmp	r3, #13
 800b1ee:	d004      	beq.n	800b1fa <WiFi_Conn_ND+0x136a>
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b1f6:	2b03      	cmp	r3, #3
 800b1f8:	d10e      	bne.n	800b218 <WiFi_Conn_ND+0x1388>
							{
								ConectarWIFI(b);
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f7fb fa1e 	bl	800663c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	22c8      	movs	r2, #200	@ 0xc8
 800b204:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
								b->_estado=0;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_n_orig=0; //Borro el vector RX
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2200      	movs	r2, #0
 800b214:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b21e:	2b02      	cmp	r3, #2
 800b220:	d005      	beq.n	800b22e <WiFi_Conn_ND+0x139e>
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b228:	2b10      	cmp	r3, #16
 800b22a:	f040 82f8 	bne.w	800b81e <WiFi_Conn_ND+0x198e>
							{
								ConectarTCP(b);
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f7fb fa5c 	bl	80066ec <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800b23a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
								b->_estado=0;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_n_orig=0; //Borro el vector RX
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2200      	movs	r2, #0
 800b24a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
							}
						}
						break;
 800b24e:	e2e6      	b.n	800b81e <WiFi_Conn_ND+0x198e>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f7fb f9c7 	bl	80065e4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b25c:	2b04      	cmp	r3, #4
 800b25e:	d112      	bne.n	800b286 <WiFi_Conn_ND+0x13f6>
							{
								Cambiar_CWMODE(b);
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f7fb f9d5 	bl	8006610 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2264      	movs	r2, #100	@ 0x64
 800b26a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
								b->_estado=0;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2200      	movs	r2, #0
 800b272:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_n_orig=0; //Borro el vector RX
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2200      	movs	r2, #0
 800b27a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2200      	movs	r2, #0
 800b282:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b28c:	2b0a      	cmp	r3, #10
 800b28e:	d009      	beq.n	800b2a4 <WiFi_Conn_ND+0x1414>
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b296:	2b0d      	cmp	r3, #13
 800b298:	d004      	beq.n	800b2a4 <WiFi_Conn_ND+0x1414>
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b2a0:	2b03      	cmp	r3, #3
 800b2a2:	d10e      	bne.n	800b2c2 <WiFi_Conn_ND+0x1432>
							{
								ConectarWIFI(b);
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f7fb f9c9 	bl	800663c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	22c8      	movs	r2, #200	@ 0xc8
 800b2ae:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
								b->_estado=0;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_n_orig=0; //Borro el vector RX
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b2c8:	2b02      	cmp	r3, #2
 800b2ca:	d005      	beq.n	800b2d8 <WiFi_Conn_ND+0x1448>
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b2d2:	2b10      	cmp	r3, #16
 800b2d4:	f040 82a5 	bne.w	800b822 <WiFi_Conn_ND+0x1992>
							{
								ConectarTCP(b);
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f7fb fa07 	bl	80066ec <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800b2e4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
								b->_estado=0;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_n_orig=0; //Borro el vector RX
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
							}
						}
						break;
 800b2f8:	e293      	b.n	800b822 <WiFi_Conn_ND+0x1992>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	f7fb f972 	bl	80065e4 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b30e:	2b04      	cmp	r3, #4
 800b310:	d112      	bne.n	800b338 <WiFi_Conn_ND+0x14a8>
								{
									Cambiar_CWMODE(b);
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f7fb f97c 	bl	8006610 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2264      	movs	r2, #100	@ 0x64
 800b31c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
									b->_estado=0;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2200      	movs	r2, #0
 800b324:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
									b->_n_orig=0; //Borro el vector RX
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2200      	movs	r2, #0
 800b334:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b33e:	2b0a      	cmp	r3, #10
 800b340:	d009      	beq.n	800b356 <WiFi_Conn_ND+0x14c6>
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b348:	2b0d      	cmp	r3, #13
 800b34a:	d004      	beq.n	800b356 <WiFi_Conn_ND+0x14c6>
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b352:	2b03      	cmp	r3, #3
 800b354:	d10e      	bne.n	800b374 <WiFi_Conn_ND+0x14e4>
								{
									ConectarWIFI(b);
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f7fb f970 	bl	800663c <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	22c8      	movs	r2, #200	@ 0xc8
 800b360:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
									b->_estado=0;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2200      	movs	r2, #0
 800b368:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
									b->_n_orig=0; //Borro el vector RX
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d004      	beq.n	800b388 <WiFi_Conn_ND+0x14f8>
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b384:	2b10      	cmp	r3, #16
 800b386:	d10f      	bne.n	800b3a8 <WiFi_Conn_ND+0x1518>
								{
									ConectarTCP(b);
 800b388:	68f8      	ldr	r0, [r7, #12]
 800b38a:	f7fb f9af 	bl	80066ec <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800b394:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
									b->_estado=0;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
									b->_n_orig=0; //Borro el vector RX
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f8d3 3ac4 	ldr.w	r3, [r3, #2756]	@ 0xac4
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	f040 8239 	bne.w	800b826 <WiFi_Conn_ND+0x1996>
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	@ 0xd18
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f000 8233 	beq.w	800b826 <WiFi_Conn_ND+0x1996>
								{
									EnviarDatosSRVR(b);
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f7fb f9bf 	bl	8006744 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800b3cc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
									b->_estado=0;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
									b->_n_orig=0; //Borro el vector RX
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800b3e0:	e221      	b.n	800b826 <WiFi_Conn_ND+0x1996>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b3e8:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 800b3ec:	d063      	beq.n	800b4b6 <WiFi_Conn_ND+0x1626>
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d05e      	beq.n	800b4b6 <WiFi_Conn_ND+0x1626>
							   (b->_estado!=at_wifi_disconnect)&&
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b3fe:	2b0a      	cmp	r3, #10
 800b400:	d059      	beq.n	800b4b6 <WiFi_Conn_ND+0x1626>
							   (b->_estado!=at_wifi_connected)&&
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
							   (b->_estado!=at_wifi_disconnect)&&
 800b408:	2b0b      	cmp	r3, #11
 800b40a:	d054      	beq.n	800b4b6 <WiFi_Conn_ND+0x1626>
							   (b->_estado!=at_wifi_gotip)&&
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
							   (b->_estado!=at_wifi_connected)&&
 800b412:	2b0c      	cmp	r3, #12
 800b414:	d04f      	beq.n	800b4b6 <WiFi_Conn_ND+0x1626>
							   (b->_estado!=at_tcp_desconectado)&&
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
							   (b->_estado!=at_wifi_gotip)&&
 800b41c:	2b10      	cmp	r3, #16
 800b41e:	d04a      	beq.n	800b4b6 <WiFi_Conn_ND+0x1626>
							   (b->_estado!=at_tcp_snd_err)&&
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
							   (b->_estado!=at_tcp_desconectado)&&
 800b426:	2b11      	cmp	r3, #17
 800b428:	d045      	beq.n	800b4b6 <WiFi_Conn_ND+0x1626>
							   (b->_estado!=at_tcp_enviado_error)&&
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
							   (b->_estado!=at_tcp_snd_err)&&
 800b430:	2b12      	cmp	r3, #18
 800b432:	d040      	beq.n	800b4b6 <WiFi_Conn_ND+0x1626>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
							   (b->_estado!=at_tcp_enviado_error)&&
 800b43a:	2b13      	cmp	r3, #19
 800b43c:	d03b      	beq.n	800b4b6 <WiFi_Conn_ND+0x1626>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b444:	2b16      	cmp	r3, #22
 800b446:	d036      	beq.n	800b4b6 <WiFi_Conn_ND+0x1626>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b44e:	2b19      	cmp	r3, #25
 800b450:	d031      	beq.n	800b4b6 <WiFi_Conn_ND+0x1626>
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	@ 0xd18
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d02c      	beq.n	800b4b6 <WiFi_Conn_ND+0x1626>
								{
								EnviarDatosSRVR(b);
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	f7fb f971 	bl	8006744 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d124      	bne.n	800b4b6 <WiFi_Conn_ND+0x1626>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f7fb fa65 	bl	800693c <AT_ESP8266_ND>
 800b472:	4602      	mov	r2, r0
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
											b->_enviaruart=0;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2200      	movs	r2, #0
 800b47e:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f8d3 3d84 	ldr.w	r3, [r3, #3460]	@ 0xd84
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d109      	bne.n	800b4a0 <WiFi_Conn_ND+0x1610>
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800b498:	4619      	mov	r1, r3
 800b49a:	4610      	mov	r0, r2
 800b49c:	f7f6 f844 	bl	8001528 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f503 6198 	add.w	r1, r3, #1216	@ 0x4c0
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800b4ac:	b29a      	uxth	r2, r3
 800b4ae:	2364      	movs	r3, #100	@ 0x64
 800b4b0:	68b8      	ldr	r0, [r7, #8]
 800b4b2:	f7fa f809 	bl	80054c8 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b4bc:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 800b4c0:	d154      	bne.n	800b56c <WiFi_Conn_ND+0x16dc>
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f8d3 3ad0 	ldr.w	r3, [r3, #2768]	@ 0xad0
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d14f      	bne.n	800b56c <WiFi_Conn_ND+0x16dc>
									   (b->_estado!=at_error)&&
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b4d2:	2b02      	cmp	r3, #2
 800b4d4:	d04a      	beq.n	800b56c <WiFi_Conn_ND+0x16dc>
									   (b->_estado!=at_wifi_disconnect)&&
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
									   (b->_estado!=at_error)&&
 800b4dc:	2b0a      	cmp	r3, #10
 800b4de:	d045      	beq.n	800b56c <WiFi_Conn_ND+0x16dc>
									   (b->_estado!=at_wifi_connected)&&
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
									   (b->_estado!=at_wifi_disconnect)&&
 800b4e6:	2b0b      	cmp	r3, #11
 800b4e8:	d040      	beq.n	800b56c <WiFi_Conn_ND+0x16dc>
									   (b->_estado!=at_wifi_gotip)&&
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
									   (b->_estado!=at_wifi_connected)&&
 800b4f0:	2b0c      	cmp	r3, #12
 800b4f2:	d03b      	beq.n	800b56c <WiFi_Conn_ND+0x16dc>
									   (b->_estado!=at_tcp_desconectado)&&
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
									   (b->_estado!=at_wifi_gotip)&&
 800b4fa:	2b10      	cmp	r3, #16
 800b4fc:	d036      	beq.n	800b56c <WiFi_Conn_ND+0x16dc>
									   (b->_estado!=at_tcp_snd_err)&&
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
									   (b->_estado!=at_tcp_desconectado)&&
 800b504:	2b11      	cmp	r3, #17
 800b506:	d031      	beq.n	800b56c <WiFi_Conn_ND+0x16dc>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
									   (b->_estado!=at_tcp_snd_err)&&
 800b50e:	2b12      	cmp	r3, #18
 800b510:	d02c      	beq.n	800b56c <WiFi_Conn_ND+0x16dc>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
									   (b->_estado!=at_tcp_enviado_error)&&
 800b518:	2b13      	cmp	r3, #19
 800b51a:	d027      	beq.n	800b56c <WiFi_Conn_ND+0x16dc>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b522:	2b16      	cmp	r3, #22
 800b524:	d022      	beq.n	800b56c <WiFi_Conn_ND+0x16dc>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b52c:	2b19      	cmp	r3, #25
 800b52e:	d01d      	beq.n	800b56c <WiFi_Conn_ND+0x16dc>
										{
											b->_enviaruart=0;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2200      	movs	r2, #0
 800b534:	f8c3 2ad0 	str.w	r2, [r3, #2768]	@ 0xad0
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f8d3 3d84 	ldr.w	r3, [r3, #3460]	@ 0xd84
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d109      	bne.n	800b556 <WiFi_Conn_ND+0x16c6>
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f503 6298 	add.w	r2, r3, #1216	@ 0x4c0
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800b54e:	4619      	mov	r1, r3
 800b550:	4610      	mov	r0, r2
 800b552:	f7f5 ffe9 	bl	8001528 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f503 6198 	add.w	r1, r3, #1216	@ 0x4c0
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	@ 0xd1c
 800b562:	b29a      	uxth	r2, r3
 800b564:	2364      	movs	r3, #100	@ 0x64
 800b566:	68b8      	ldr	r0, [r7, #8]
 800b568:	f7f9 ffae 	bl	80054c8 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b572:	2b13      	cmp	r3, #19
 800b574:	d104      	bne.n	800b580 <WiFi_Conn_ND+0x16f0>
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f240 328d 	movw	r2, #909	@ 0x38d
 800b57c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b586:	2b02      	cmp	r3, #2
 800b588:	d02d      	beq.n	800b5e6 <WiFi_Conn_ND+0x1756>
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b590:	2b04      	cmp	r3, #4
 800b592:	d028      	beq.n	800b5e6 <WiFi_Conn_ND+0x1756>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b59a:	2b0a      	cmp	r3, #10
 800b59c:	d023      	beq.n	800b5e6 <WiFi_Conn_ND+0x1756>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b5a4:	2b0b      	cmp	r3, #11
 800b5a6:	d01e      	beq.n	800b5e6 <WiFi_Conn_ND+0x1756>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b5ae:	2b0c      	cmp	r3, #12
 800b5b0:	d019      	beq.n	800b5e6 <WiFi_Conn_ND+0x1756>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b5b8:	2b10      	cmp	r3, #16
 800b5ba:	d014      	beq.n	800b5e6 <WiFi_Conn_ND+0x1756>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b5c2:	2b11      	cmp	r3, #17
 800b5c4:	d00f      	beq.n	800b5e6 <WiFi_Conn_ND+0x1756>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b5cc:	2b12      	cmp	r3, #18
 800b5ce:	d00a      	beq.n	800b5e6 <WiFi_Conn_ND+0x1756>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b5d6:	2b16      	cmp	r3, #22
 800b5d8:	d005      	beq.n	800b5e6 <WiFi_Conn_ND+0x1756>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b5e0:	2b19      	cmp	r3, #25
 800b5e2:	f040 8122 	bne.w	800b82a <WiFi_Conn_ND+0x199a>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f240 3289 	movw	r2, #905	@ 0x389
 800b5ec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b5f0:	e11b      	b.n	800b82a <WiFi_Conn_ND+0x199a>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b5f2:	68f8      	ldr	r0, [r7, #12]
 800b5f4:	f7fa fff6 	bl	80065e4 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b5fe:	2b04      	cmp	r3, #4
 800b600:	d009      	beq.n	800b616 <WiFi_Conn_ND+0x1786>
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b608:	2b0b      	cmp	r3, #11
 800b60a:	d004      	beq.n	800b616 <WiFi_Conn_ND+0x1786>
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b612:	2b0c      	cmp	r3, #12
 800b614:	d112      	bne.n	800b63c <WiFi_Conn_ND+0x17ac>
							{
								Cambiar_CWMODE(b);
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f7fa fffa 	bl	8006610 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2264      	movs	r2, #100	@ 0x64
 800b620:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
								b->_estado=0;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2200      	movs	r2, #0
 800b628:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_n_orig=0; //Borro el vector RX
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2200      	movs	r2, #0
 800b630:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2200      	movs	r2, #0
 800b638:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b642:	2b0a      	cmp	r3, #10
 800b644:	d009      	beq.n	800b65a <WiFi_Conn_ND+0x17ca>
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b64c:	2b0d      	cmp	r3, #13
 800b64e:	d004      	beq.n	800b65a <WiFi_Conn_ND+0x17ca>
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b656:	2b03      	cmp	r3, #3
 800b658:	d10e      	bne.n	800b678 <WiFi_Conn_ND+0x17e8>
							{
								ConectarWIFI(b);
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7fa ffee 	bl	800663c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	22c8      	movs	r2, #200	@ 0xc8
 800b664:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
								b->_estado=0;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2200      	movs	r2, #0
 800b66c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_n_orig=0; //Borro el vector RX
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2200      	movs	r2, #0
 800b674:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b67e:	2b16      	cmp	r3, #22
 800b680:	d10c      	bne.n	800b69c <WiFi_Conn_ND+0x180c>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f240 3225 	movw	r2, #805	@ 0x325
 800b688:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
								b->_estado=0;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2200      	movs	r2, #0
 800b690:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_n_orig=0; //Borro el vector RX
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2200      	movs	r2, #0
 800b698:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b6a2:	2b18      	cmp	r3, #24
 800b6a4:	d10c      	bne.n	800b6c0 <WiFi_Conn_ND+0x1830>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f240 3229 	movw	r2, #809	@ 0x329
 800b6ac:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
								b->_estado=0;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
								b->_n_orig=0; //Borro el vector RX
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b6c6:	2b19      	cmp	r3, #25
 800b6c8:	d008      	beq.n	800b6dc <WiFi_Conn_ND+0x184c>
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b6d0:	2b11      	cmp	r3, #17
 800b6d2:	d003      	beq.n	800b6dc <WiFi_Conn_ND+0x184c>
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2212      	movs	r2, #18
 800b6d8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	f040 80a3 	bne.w	800b82e <WiFi_Conn_ND+0x199e>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800b6ee:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
									b->_estado=0;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
									b->_n_orig=0; //Borro el vector RX
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

							}


						}
						break;
 800b702:	e094      	b.n	800b82e <WiFi_Conn_ND+0x199e>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b704:	68f8      	ldr	r0, [r7, #12]
 800b706:	f7fa ff6d 	bl	80065e4 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b710:	2b04      	cmp	r3, #4
 800b712:	d009      	beq.n	800b728 <WiFi_Conn_ND+0x1898>
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b71a:	2b0b      	cmp	r3, #11
 800b71c:	d004      	beq.n	800b728 <WiFi_Conn_ND+0x1898>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b724:	2b0c      	cmp	r3, #12
 800b726:	d112      	bne.n	800b74e <WiFi_Conn_ND+0x18be>
								{
									Cambiar_CWMODE(b);
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f7fa ff71 	bl	8006610 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2264      	movs	r2, #100	@ 0x64
 800b732:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
									b->_estado=0;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2200      	movs	r2, #0
 800b73a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
									b->_n_orig=0; //Borro el vector RX
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2200      	movs	r2, #0
 800b742:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2200      	movs	r2, #0
 800b74a:	f883 20ab 	strb.w	r2, [r3, #171]	@ 0xab

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b754:	2b0a      	cmp	r3, #10
 800b756:	d009      	beq.n	800b76c <WiFi_Conn_ND+0x18dc>
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b75e:	2b0d      	cmp	r3, #13
 800b760:	d004      	beq.n	800b76c <WiFi_Conn_ND+0x18dc>
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800b768:	2b03      	cmp	r3, #3
 800b76a:	d10e      	bne.n	800b78a <WiFi_Conn_ND+0x18fa>
								{
									ConectarWIFI(b);
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f7fa ff65 	bl	800663c <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	22c8      	movs	r2, #200	@ 0xc8
 800b776:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
									b->_estado=0;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
									b->_n_orig=0; //Borro el vector RX
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2200      	movs	r2, #0
 800b786:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800b790:	2b01      	cmp	r3, #1
 800b792:	d004      	beq.n	800b79e <WiFi_Conn_ND+0x190e>
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f8d3 3ac4 	ldr.w	r3, [r3, #2756]	@ 0xac4
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d149      	bne.n	800b832 <WiFi_Conn_ND+0x19a2>
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	@ 0xd18
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d044      	beq.n	800b832 <WiFi_Conn_ND+0x19a2>
								{
									EnviarDatosSRVR(b);
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f7fa ffcb 	bl	8006744 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800b7b4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
									b->_estado=0;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
									b->_n_orig=0; //Borro el vector RX
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f8c3 2d0c 	str.w	r2, [r3, #3340]	@ 0xd0c
									b->_new_data_rcv=0;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
									b->_send_data=0;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f8c3 2ac4 	str.w	r2, [r3, #2756]	@ 0xac4
								}

						}
						break;
 800b7d8:	e02b      	b.n	800b832 <WiFi_Conn_ND+0x19a2>
			break;
 800b7da:	bf00      	nop
 800b7dc:	e02a      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
			break;
 800b7de:	bf00      	nop
 800b7e0:	e028      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
			break;
 800b7e2:	bf00      	nop
 800b7e4:	e026      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
			break;
 800b7e6:	bf00      	nop
 800b7e8:	e024      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
			break;
 800b7ea:	bf00      	nop
 800b7ec:	e022      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
			break;
 800b7ee:	bf00      	nop
 800b7f0:	e020      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
			break;
 800b7f2:	bf00      	nop
 800b7f4:	e01e      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
			break;
 800b7f6:	bf00      	nop
 800b7f8:	e01c      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
			break;
 800b7fa:	bf00      	nop
 800b7fc:	e01a      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
			break;
 800b7fe:	bf00      	nop
 800b800:	e018      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
			break;
 800b802:	bf00      	nop
 800b804:	e016      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
			break;
 800b806:	bf00      	nop
 800b808:	e014      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
			break;
 800b80a:	bf00      	nop
 800b80c:	e012      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
			break;
 800b80e:	bf00      	nop
 800b810:	e010      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
						break;
 800b812:	bf00      	nop
 800b814:	e00e      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
						break;
 800b816:	bf00      	nop
 800b818:	e00c      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
						break;
 800b81a:	bf00      	nop
 800b81c:	e00a      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
						break;
 800b81e:	bf00      	nop
 800b820:	e008      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
						break;
 800b822:	bf00      	nop
 800b824:	e006      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
						break;
 800b826:	bf00      	nop
 800b828:	e004      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
						break;
 800b82a:	bf00      	nop
 800b82c:	e002      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
						break;
 800b82e:	bf00      	nop
 800b830:	e000      	b.n	800b834 <WiFi_Conn_ND+0x19a4>
						break;
 800b832:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
	}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop

0800b844 <httpPOST2>:
			return 0;
		}
}

httpPOST2(char * endpoint, char* server_ip, char * port,  uint16_t * vect_data, uint8_t * decimal,int cdad, uint16_t devId, char  * post, char * body, int max_char)
{
 800b844:	b5b0      	push	{r4, r5, r7, lr}
 800b846:	b08c      	sub	sp, #48	@ 0x30
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	607a      	str	r2, [r7, #4]
 800b850:	603b      	str	r3, [r7, #0]
	post[0]='\0';
 800b852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b854:	2200      	movs	r2, #0
 800b856:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b858:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b85a:	2200      	movs	r2, #0
 800b85c:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b85e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800b860:	f7f4 fcc8 	bl	80001f4 <strlen>
 800b864:	4603      	mov	r3, r0
 800b866:	461a      	mov	r2, r3
 800b868:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b86a:	4413      	add	r3, r2
 800b86c:	4a9d      	ldr	r2, [pc, #628]	@ (800bae4 <httpPOST2+0x2a0>)
 800b86e:	6810      	ldr	r0, [r2, #0]
 800b870:	6018      	str	r0, [r3, #0]
 800b872:	8892      	ldrh	r2, [r2, #4]
 800b874:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f7f4 fcbc 	bl	80001f4 <strlen>
 800b87c:	4603      	mov	r3, r0
 800b87e:	461a      	mov	r2, r3
 800b880:	68f9      	ldr	r1, [r7, #12]
 800b882:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800b884:	f003 fe0f 	bl	800f4a6 <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b888:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800b88a:	f7f4 fcb3 	bl	80001f4 <strlen>
 800b88e:	4603      	mov	r3, r0
 800b890:	461a      	mov	r2, r3
 800b892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b894:	4413      	add	r3, r2
 800b896:	4994      	ldr	r1, [pc, #592]	@ (800bae8 <httpPOST2+0x2a4>)
 800b898:	461a      	mov	r2, r3
 800b89a:	460b      	mov	r3, r1
 800b89c:	cb03      	ldmia	r3!, {r0, r1}
 800b89e:	6010      	str	r0, [r2, #0]
 800b8a0:	6051      	str	r1, [r2, #4]
 800b8a2:	8819      	ldrh	r1, [r3, #0]
 800b8a4:	789b      	ldrb	r3, [r3, #2]
 800b8a6:	8111      	strh	r1, [r2, #8]
 800b8a8:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b8aa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800b8ac:	f7f4 fca2 	bl	80001f4 <strlen>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8b6:	4413      	add	r3, r2
 800b8b8:	4a8c      	ldr	r2, [pc, #560]	@ (800baec <httpPOST2+0x2a8>)
 800b8ba:	8811      	ldrh	r1, [r2, #0]
 800b8bc:	7892      	ldrb	r2, [r2, #2]
 800b8be:	8019      	strh	r1, [r3, #0]
 800b8c0:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b8c2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800b8c4:	f7f4 fc96 	bl	80001f4 <strlen>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8ce:	4413      	add	r3, r2
 800b8d0:	4a87      	ldr	r2, [pc, #540]	@ (800baf0 <httpPOST2+0x2ac>)
 800b8d2:	6810      	ldr	r0, [r2, #0]
 800b8d4:	6018      	str	r0, [r3, #0]
 800b8d6:	8891      	ldrh	r1, [r2, #4]
 800b8d8:	7992      	ldrb	r2, [r2, #6]
 800b8da:	8099      	strh	r1, [r3, #4]
 800b8dc:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b8de:	68b8      	ldr	r0, [r7, #8]
 800b8e0:	f7f4 fc88 	bl	80001f4 <strlen>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	68b9      	ldr	r1, [r7, #8]
 800b8ea:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800b8ec:	f003 fddb 	bl	800f4a6 <strncat>
	strncat(post,":",1);
 800b8f0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800b8f2:	f7f4 fc7f 	bl	80001f4 <strlen>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8fc:	4413      	add	r3, r2
 800b8fe:	497d      	ldr	r1, [pc, #500]	@ (800baf4 <httpPOST2+0x2b0>)
 800b900:	461a      	mov	r2, r3
 800b902:	460b      	mov	r3, r1
 800b904:	881b      	ldrh	r3, [r3, #0]
 800b906:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f7f4 fc73 	bl	80001f4 <strlen>
 800b90e:	4603      	mov	r3, r0
 800b910:	461a      	mov	r2, r3
 800b912:	6879      	ldr	r1, [r7, #4]
 800b914:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800b916:	f003 fdc6 	bl	800f4a6 <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b91a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800b91c:	f7f4 fc6a 	bl	80001f4 <strlen>
 800b920:	4603      	mov	r3, r0
 800b922:	461a      	mov	r2, r3
 800b924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b926:	4413      	add	r3, r2
 800b928:	4a70      	ldr	r2, [pc, #448]	@ (800baec <httpPOST2+0x2a8>)
 800b92a:	8811      	ldrh	r1, [r2, #0]
 800b92c:	7892      	ldrb	r2, [r2, #2]
 800b92e:	8019      	strh	r1, [r3, #0]
 800b930:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b932:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800b934:	f7f4 fc5e 	bl	80001f4 <strlen>
 800b938:	4603      	mov	r3, r0
 800b93a:	461a      	mov	r2, r3
 800b93c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b93e:	4413      	add	r3, r2
 800b940:	4a6d      	ldr	r2, [pc, #436]	@ (800baf8 <httpPOST2+0x2b4>)
 800b942:	461d      	mov	r5, r3
 800b944:	4614      	mov	r4, r2
 800b946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b948:	6028      	str	r0, [r5, #0]
 800b94a:	6069      	str	r1, [r5, #4]
 800b94c:	60aa      	str	r2, [r5, #8]
 800b94e:	60eb      	str	r3, [r5, #12]
 800b950:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b952:	6128      	str	r0, [r5, #16]
 800b954:	6169      	str	r1, [r5, #20]
 800b956:	61aa      	str	r2, [r5, #24]
 800b958:	8823      	ldrh	r3, [r4, #0]
 800b95a:	78a2      	ldrb	r2, [r4, #2]
 800b95c:	83ab      	strh	r3, [r5, #28]
 800b95e:	4613      	mov	r3, r2
 800b960:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b962:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800b964:	f7f4 fc46 	bl	80001f4 <strlen>
 800b968:	4603      	mov	r3, r0
 800b96a:	461a      	mov	r2, r3
 800b96c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b96e:	4413      	add	r3, r2
 800b970:	4a5e      	ldr	r2, [pc, #376]	@ (800baec <httpPOST2+0x2a8>)
 800b972:	8811      	ldrh	r1, [r2, #0]
 800b974:	7892      	ldrb	r2, [r2, #2]
 800b976:	8019      	strh	r1, [r3, #0]
 800b978:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b97a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800b97c:	f7f4 fc3a 	bl	80001f4 <strlen>
 800b980:	4603      	mov	r3, r0
 800b982:	461a      	mov	r2, r3
 800b984:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b986:	4413      	add	r3, r2
 800b988:	4a5c      	ldr	r2, [pc, #368]	@ (800bafc <httpPOST2+0x2b8>)
 800b98a:	461c      	mov	r4, r3
 800b98c:	4615      	mov	r5, r2
 800b98e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b990:	6020      	str	r0, [r4, #0]
 800b992:	6061      	str	r1, [r4, #4]
 800b994:	60a2      	str	r2, [r4, #8]
 800b996:	60e3      	str	r3, [r4, #12]

	char _devId[8];
	_devId[0]='\0';
 800b998:	2300      	movs	r3, #0
 800b99a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	INTOA(devId, _devId);
 800b99e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800b9a2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f003 facf 	bl	800ef4c <INTOA>
	char d[8];
	d[0]='\0';
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	773b      	strb	r3, [r7, #28]
	for (int i=0; i < cdad;i++)
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b9b6:	e037      	b.n	800ba28 <httpPOST2+0x1e4>
	{
		FTOA(vect_data[i],d,decimal[i]);
 800b9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ba:	005b      	lsls	r3, r3, #1
 800b9bc:	683a      	ldr	r2, [r7, #0]
 800b9be:	4413      	add	r3, r2
 800b9c0:	881b      	ldrh	r3, [r3, #0]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9c8:	4413      	add	r3, r2
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	f107 031c 	add.w	r3, r7, #28
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	f003 faee 	bl	800efb4 <FTOA>
		strncat(body,data[i],strlen(data[i]));
 800b9d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9da:	4613      	mov	r3, r2
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	4413      	add	r3, r2
 800b9e0:	005b      	lsls	r3, r3, #1
 800b9e2:	4a47      	ldr	r2, [pc, #284]	@ (800bb00 <httpPOST2+0x2bc>)
 800b9e4:	189c      	adds	r4, r3, r2
 800b9e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	4413      	add	r3, r2
 800b9ee:	005b      	lsls	r3, r3, #1
 800b9f0:	4a43      	ldr	r2, [pc, #268]	@ (800bb00 <httpPOST2+0x2bc>)
 800b9f2:	4413      	add	r3, r2
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7f4 fbfd 	bl	80001f4 <strlen>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	4621      	mov	r1, r4
 800ba00:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ba02:	f003 fd50 	bl	800f4a6 <strncat>
		strncat(body,d,strlen(d));
 800ba06:	f107 031c 	add.w	r3, r7, #28
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7f4 fbf2 	bl	80001f4 <strlen>
 800ba10:	4602      	mov	r2, r0
 800ba12:	f107 031c 	add.w	r3, r7, #28
 800ba16:	4619      	mov	r1, r3
 800ba18:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ba1a:	f003 fd44 	bl	800f4a6 <strncat>
		d[0]='\0';
 800ba1e:	2300      	movs	r3, #0
 800ba20:	773b      	strb	r3, [r7, #28]
	for (int i=0; i < cdad;i++)
 800ba22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba24:	3301      	adds	r3, #1
 800ba26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	dbc3      	blt.n	800b9b8 <httpPOST2+0x174>
	}
	// Conversión de datos recibido por ModBUS

	strncat(body,deviceId,strlen(deviceId));
 800ba30:	4834      	ldr	r0, [pc, #208]	@ (800bb04 <httpPOST2+0x2c0>)
 800ba32:	f7f4 fbdf 	bl	80001f4 <strlen>
 800ba36:	4603      	mov	r3, r0
 800ba38:	461a      	mov	r2, r3
 800ba3a:	4932      	ldr	r1, [pc, #200]	@ (800bb04 <httpPOST2+0x2c0>)
 800ba3c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ba3e:	f003 fd32 	bl	800f4a6 <strncat>
	strncat(body,_devId,strlen(_devId));
 800ba42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7f4 fbd4 	bl	80001f4 <strlen>
 800ba4c:	4602      	mov	r2, r0
 800ba4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba52:	4619      	mov	r1, r3
 800ba54:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ba56:	f003 fd26 	bl	800f4a6 <strncat>

	strncat(body,"}",strlen("}"));
 800ba5a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ba5c:	f7f4 fbca 	bl	80001f4 <strlen>
 800ba60:	4603      	mov	r3, r0
 800ba62:	461a      	mov	r2, r3
 800ba64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba66:	4413      	add	r3, r2
 800ba68:	4927      	ldr	r1, [pc, #156]	@ (800bb08 <httpPOST2+0x2c4>)
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	881b      	ldrh	r3, [r3, #0]
 800ba70:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800ba72:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ba74:	f7f4 fbbe 	bl	80001f4 <strlen>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	f107 0314 	add.w	r3, r7, #20
 800ba7e:	4619      	mov	r1, r3
 800ba80:	4610      	mov	r0, r2
 800ba82:	f003 fa63 	bl	800ef4c <INTOA>
	strncat(post,length,strlen(length));
 800ba86:	f107 0314 	add.w	r3, r7, #20
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7f4 fbb2 	bl	80001f4 <strlen>
 800ba90:	4602      	mov	r2, r0
 800ba92:	f107 0314 	add.w	r3, r7, #20
 800ba96:	4619      	mov	r1, r3
 800ba98:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800ba9a:	f003 fd04 	bl	800f4a6 <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800ba9e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800baa0:	f7f4 fba8 	bl	80001f4 <strlen>
 800baa4:	4603      	mov	r3, r0
 800baa6:	461a      	mov	r2, r3
 800baa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baaa:	4413      	add	r3, r2
 800baac:	4a17      	ldr	r2, [pc, #92]	@ (800bb0c <httpPOST2+0x2c8>)
 800baae:	6810      	ldr	r0, [r2, #0]
 800bab0:	6018      	str	r0, [r3, #0]
 800bab2:	7912      	ldrb	r2, [r2, #4]
 800bab4:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800bab6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bab8:	f7f4 fb9c 	bl	80001f4 <strlen>
 800babc:	4602      	mov	r2, r0
 800babe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d20a      	bcs.n	800bada <httpPOST2+0x296>
	{
		strncat(post,body,strlen(body));
 800bac4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800bac6:	f7f4 fb95 	bl	80001f4 <strlen>
 800baca:	4603      	mov	r3, r0
 800bacc:	461a      	mov	r2, r3
 800bace:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bad0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800bad2:	f003 fce8 	bl	800f4a6 <strncat>
		return 1 ;
 800bad6:	2301      	movs	r3, #1
 800bad8:	e000      	b.n	800badc <httpPOST2+0x298>
	}
		else
		{
			return 0;
 800bada:	2300      	movs	r3, #0
		}
}
 800badc:	4618      	mov	r0, r3
 800bade:	3730      	adds	r7, #48	@ 0x30
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bdb0      	pop	{r4, r5, r7, pc}
 800bae4:	08010d2c 	.word	0x08010d2c
 800bae8:	08010d34 	.word	0x08010d34
 800baec:	08010d40 	.word	0x08010d40
 800baf0:	08010d44 	.word	0x08010d44
 800baf4:	08010d4c 	.word	0x08010d4c
 800baf8:	08010d50 	.word	0x08010d50
 800bafc:	08010d70 	.word	0x08010d70
 800bb00:	200000bc 	.word	0x200000bc
 800bb04:	2000015c 	.word	0x2000015c
 800bb08:	08010d80 	.word	0x08010d80
 800bb0c:	08010d84 	.word	0x08010d84

0800bb10 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800bb2a:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2220      	movs	r2, #32
 800bb36:	f883 2620 	strb.w	r2, [r3, #1568]	@ 0x620
	m->_Coils=0xF0F0AF5A;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a1c      	ldr	r2, [pc, #112]	@ (800bbb0 <ModBUS_Config+0xa0>)
 800bb3e:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2201      	movs	r2, #1
 800bb46:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2220      	movs	r2, #32
 800bb4c:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
	m->_Inputs=0xA5FA0F0F;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a18      	ldr	r2, [pc, #96]	@ (800bbb4 <ModBUS_Config+0xa4>)
 800bb54:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2210      	movs	r2, #16
 800bb62:	f883 262c 	strb.w	r2, [r3, #1580]	@ 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2210      	movs	r2, #16
 800bb70:	f883 2632 	strb.w	r2, [r3, #1586]	@ 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2201      	movs	r2, #1
 800bb78:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2220      	movs	r2, #32
 800bb7e:	f883 2638 	strb.w	r2, [r3, #1592]	@ 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2201      	movs	r2, #1
 800bb86:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2220      	movs	r2, #32
 800bb92:	f883 263e 	strb.w	r2, [r3, #1598]	@ 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2201      	movs	r2, #1
 800bb9a:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2220      	movs	r2, #32
 800bba0:	f883 264a 	strb.w	r2, [r3, #1610]	@ 0x64a
}
 800bba4:	bf00      	nop
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr
 800bbb0:	f0f0af5a 	.word	0xf0f0af5a
 800bbb4:	a5fa0f0f 	.word	0xa5fa0f0f

0800bbb8 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	3305      	adds	r3, #5
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	3306      	adds	r3, #6
 800bbca:	683a      	ldr	r2, [r7, #0]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d10b      	bne.n	800bbe8 <ModBUS_Check+0x30>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	3302      	adds	r3, #2
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	3303      	adds	r3, #3
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	4413      	add	r3, r2
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d101      	bne.n	800bbe8 <ModBUS_Check+0x30>
	{
		return(1);
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	e000      	b.n	800bbea <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800bbe8:	2300      	movs	r3, #0
	}
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	370c      	adds	r7, #12
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b083      	sub	sp, #12
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 2218 	ldrb.w	r2, [r3, #536]	@ 0x218
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	7c9b      	ldrb	r3, [r3, #18]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d11d      	bne.n	800bc48 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f893 2219 	ldrb.w	r2, [r3, #537]	@ 0x219
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	7cdb      	ldrb	r3, [r3, #19]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d116      	bne.n	800bc48 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f893 221a 	ldrb.w	r2, [r3, #538]	@ 0x21a
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d10f      	bne.n	800bc48 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f893 221b 	ldrb.w	r2, [r3, #539]	@ 0x21b
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	7d5b      	ldrb	r3, [r3, #21]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d108      	bne.n	800bc48 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f893 221f 	ldrb.w	r2, [r3, #543]	@ 0x21f
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	7e5b      	ldrb	r3, [r3, #25]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d101      	bne.n	800bc48 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800bc44:	2301      	movs	r3, #1
 800bc46:	e000      	b.n	800bc4a <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800bc48:	2300      	movs	r3, #0
	}
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	370c      	adds	r7, #12
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr

0800bc56 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t address, uint16_t data)
{
 800bc56:	b480      	push	{r7}
 800bc58:	b085      	sub	sp, #20
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
 800bc5e:	460b      	mov	r3, r1
 800bc60:	70fb      	strb	r3, [r7, #3]
 800bc62:	4613      	mov	r3, r2
 800bc64:	803b      	strh	r3, [r7, #0]

	uint8_t c=0;
 800bc66:	2300      	movs	r3, #0
 800bc68:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 362c 	ldrb.w	r3, [r3, #1580]	@ 0x62c
 800bc70:	78fa      	ldrb	r2, [r7, #3]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d901      	bls.n	800bc7a <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800bc76:	2301      	movs	r3, #1
 800bc78:	e016      	b.n	800bca8 <ModBUS_F03_Assign+0x52>
	}
	else
	{
		address=address*2;
 800bc7a:	78fb      	ldrb	r3, [r7, #3]
 800bc7c:	005b      	lsls	r3, r3, #1
 800bc7e:	70fb      	strb	r3, [r7, #3]
		m2->_Holding_Registers[(address)+1]=data;
 800bc80:	78fb      	ldrb	r3, [r7, #3]
 800bc82:	3301      	adds	r3, #1
 800bc84:	883a      	ldrh	r2, [r7, #0]
 800bc86:	b2d1      	uxtb	r1, r2
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	4413      	add	r3, r2
 800bc8c:	460a      	mov	r2, r1
 800bc8e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
		c=data>>8;
 800bc92:	883b      	ldrh	r3, [r7, #0]
 800bc94:	0a1b      	lsrs	r3, r3, #8
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(address)]=c;
 800bc9a:	78fb      	ldrb	r3, [r7, #3]
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	4413      	add	r3, r2
 800bca0:	7bfa      	ldrb	r2, [r7, #15]
 800bca2:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

		return(0);
 800bca6:	2300      	movs	r3, #0
	}
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3714      	adds	r7, #20
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t address)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (address) > m2->_03_ReadHoldingRegisters_QTY)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f893 362c 	ldrb.w	r3, [r3, #1580]	@ 0x62c
 800bcce:	78fa      	ldrb	r2, [r7, #3]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d901      	bls.n	800bcd8 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	e016      	b.n	800bd06 <ModBUS_F03_Read+0x52>
	}
	else
	{
		address=address*2;
 800bcd8:	78fb      	ldrb	r3, [r7, #3]
 800bcda:	005b      	lsls	r3, r3, #1
 800bcdc:	70fb      	strb	r3, [r7, #3]
		n=m2->_Holding_Registers[(address)];
 800bcde:	78fb      	ldrb	r3, [r7, #3]
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	4413      	add	r3, r2
 800bce4:	f893 3424 	ldrb.w	r3, [r3, #1060]	@ 0x424
 800bce8:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800bcea:	89fb      	ldrh	r3, [r7, #14]
 800bcec:	021b      	lsls	r3, r3, #8
 800bcee:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(address)+1];
 800bcf0:	78fb      	ldrb	r3, [r7, #3]
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	f893 3424 	ldrb.w	r3, [r3, #1060]	@ 0x424
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	89fb      	ldrh	r3, [r7, #14]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	81fb      	strh	r3, [r7, #14]
		return(n);
 800bd04:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3714      	adds	r7, #20
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr

0800bd12 <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800bd12:	b480      	push	{r7}
 800bd14:	b083      	sub	sp, #12
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	807b      	strh	r3, [r7, #2]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800bd22:	887b      	ldrh	r3, [r7, #2]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	bf14      	ite	ne
 800bd28:	2301      	movne	r3, #1
 800bd2a:	2300      	moveq	r3, #0
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	461a      	mov	r2, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f883 2221 	strb.w	r2, [r3, #545]	@ 0x221
	addr&=0xF0;
 800bd36:	887b      	ldrh	r3, [r7, #2]
 800bd38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bd3c:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800bd3e:	887b      	ldrh	r3, [r7, #2]
 800bd40:	0a1b      	lsrs	r3, r3, #8
 800bd42:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800bd44:	887b      	ldrh	r3, [r7, #2]
 800bd46:	f003 030f 	and.w	r3, r3, #15
 800bd4a:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
	m2->_MBUS_2SND[1]=0x00;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
	m2->_MBUS_2SND[2]=0x00;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
	m2->_MBUS_2SND[3]=0x00;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
	m2->_MBUS_2SND[4]=0x00;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
	m2->_MBUS_2SND[5]=0x06;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2206      	movs	r2, #6
 800bd78:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
	m2->_MBUS_2SND[6]=m2->_address;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	781a      	ldrb	r2, [r3, #0]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
	m2->_MBUS_2SND[7]=0x03;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2203      	movs	r2, #3
 800bd8a:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
	m2->_MBUS_2SND[8]=addr;
 800bd8e:	887b      	ldrh	r3, [r7, #2]
 800bd90:	b2da      	uxtb	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220

	m2->_MBUS_2SND[10]=0x00;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
	m2->_MBUS_2SND[11]=qty;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	787a      	ldrb	r2, [r7, #1]
 800bda4:	f883 2223 	strb.w	r2, [r3, #547]	@ 0x223
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	220c      	movs	r2, #12
 800bdac:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

}
 800bdb0:	bf00      	nop
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	370c      	adds	r7, #12
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
	...

0800bdc0 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b09c      	sub	sp, #112	@ 0x70
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	791b      	ldrb	r3, [r3, #4]
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	f041 8128 	bne.w	800d022 <ModBUS+0x1262>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f103 0212 	add.w	r2, r3, #18
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bdde:	4619      	mov	r1, r3
 800bde0:	4610      	mov	r0, r2
 800bde2:	f7ff fee9 	bl	800bbb8 <ModBUS_Check>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	f001 8118 	beq.w	800d01e <ModBUS+0x125e>
		{
			switch(m3->_MBUS_RCVD[7])
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	7e5b      	ldrb	r3, [r3, #25]
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	2b0f      	cmp	r3, #15
 800bdf6:	f201 80dc 	bhi.w	800cfb2 <ModBUS+0x11f2>
 800bdfa:	a201      	add	r2, pc, #4	@ (adr r2, 800be00 <ModBUS+0x40>)
 800bdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be00:	0800be41 	.word	0x0800be41
 800be04:	0800c07b 	.word	0x0800c07b
 800be08:	0800c2b5 	.word	0x0800c2b5
 800be0c:	0800c4e7 	.word	0x0800c4e7
 800be10:	0800c719 	.word	0x0800c719
 800be14:	0800c92b 	.word	0x0800c92b
 800be18:	0800cfb3 	.word	0x0800cfb3
 800be1c:	0800cfb3 	.word	0x0800cfb3
 800be20:	0800cfb3 	.word	0x0800cfb3
 800be24:	0800cfb3 	.word	0x0800cfb3
 800be28:	0800cfb3 	.word	0x0800cfb3
 800be2c:	0800cfb3 	.word	0x0800cfb3
 800be30:	0800cfb3 	.word	0x0800cfb3
 800be34:	0800cfb3 	.word	0x0800cfb3
 800be38:	0800cae1 	.word	0x0800cae1
 800be3c:	0800cd6b 	.word	0x0800cd6b

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	7d9a      	ldrb	r2, [r3, #22]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	7d5a      	ldrb	r2, [r3, #21]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	7d1a      	ldrb	r2, [r3, #20]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	7cda      	ldrb	r2, [r3, #19]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	7c9a      	ldrb	r2, [r3, #18]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

					int qty_reg=0;
 800be72:	2300      	movs	r3, #0
 800be74:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	7a9b      	ldrb	r3, [r3, #10]
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	f040 80e3 	bne.w	800c046 <ModBUS+0x286>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	7e9b      	ldrb	r3, [r3, #26]
 800be84:	461a      	mov	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8a3 2622 	strh.w	r2, [r3, #1570]	@ 0x622
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	@ 0x622
 800be92:	021b      	lsls	r3, r3, #8
 800be94:	b29a      	uxth	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8a3 2622 	strh.w	r2, [r3, #1570]	@ 0x622
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	@ 0x622
 800bea2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8a3 2622 	strh.w	r2, [r3, #1570]	@ 0x622
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	@ 0x622
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	7ed2      	ldrb	r2, [r2, #27]
 800beb8:	4313      	orrs	r3, r2
 800beba:	b29a      	uxth	r2, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8a3 2622 	strh.w	r2, [r3, #1570]	@ 0x622

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	7f1b      	ldrb	r3, [r3, #28]
 800bec6:	461a      	mov	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8a3 2624 	strh.w	r2, [r3, #1572]	@ 0x624
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	@ 0x624
 800bed4:	021b      	lsls	r3, r3, #8
 800bed6:	b29a      	uxth	r2, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8a3 2624 	strh.w	r2, [r3, #1572]	@ 0x624
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	@ 0x624
 800bee4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bee8:	b29a      	uxth	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8a3 2624 	strh.w	r2, [r3, #1572]	@ 0x624
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	@ 0x624
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	7f52      	ldrb	r2, [r2, #29]
 800befa:	4313      	orrs	r3, r2
 800befc:	b29a      	uxth	r2, r3
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8a3 2624 	strh.w	r2, [r3, #1572]	@ 0x624



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	@ 0x624
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	f892 2620 	ldrb.w	r2, [r2, #1568]	@ 0x620
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d87e      	bhi.n	800c012 <ModBUS+0x252>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	@ 0x622
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	@ 0x624
 800bf22:	4413      	add	r3, r2
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	f892 2620 	ldrb.w	r2, [r2, #1568]	@ 0x620
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	dc57      	bgt.n	800bfde <ModBUS+0x21e>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	613b      	str	r3, [r7, #16]
 800bf32:	2300      	movs	r3, #0
 800bf34:	60fb      	str	r3, [r7, #12]
 800bf36:	2300      	movs	r3, #0
 800bf38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	66bb      	str	r3, [r7, #104]	@ 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	f8b2 2622 	ldrh.w	r2, [r2, #1570]	@ 0x622
 800bf4e:	40d3      	lsrs	r3, r2
 800bf50:	66bb      	str	r3, [r7, #104]	@ 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	@ 0x624
 800bf58:	08db      	lsrs	r3, r3, #3
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	@ 0x624
 800bf64:	f003 0307 	and.w	r3, r3, #7
 800bf68:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d102      	bne.n	800bf76 <ModBUS+0x1b6>
									{
										bytes=div;
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bf74:	e002      	b.n	800bf7c <ModBUS+0x1bc>
									}
									else
									{
										bytes=div+1;
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800bf7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220


									while(bytes > 0)
 800bf86:	e00e      	b.n	800bfa6 <ModBUS+0x1e6>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800bf88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf8a:	3308      	adds	r3, #8
 800bf8c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bf8e:	b2d1      	uxtb	r1, r2
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	4413      	add	r3, r2
 800bf94:	460a      	mov	r2, r1
 800bf96:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
										coils=coils>>8;
 800bf9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf9c:	0a1b      	lsrs	r3, r3, #8
 800bf9e:	66bb      	str	r3, [r7, #104]	@ 0x68
										bytes--;
 800bfa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	66fb      	str	r3, [r7, #108]	@ 0x6c
									while(bytes > 0)
 800bfa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	dced      	bgt.n	800bf88 <ModBUS+0x1c8>
									}


									m3->_MBUS_2SND[7]=0x01;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 800bfc2:	3303      	adds	r3, #3
 800bfc4:	b2da      	uxtb	r2, r3
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800bfd2:	1d9a      	adds	r2, r3, #6
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bfda:	f001 b8bf 	b.w	800d15c <ModBUS+0x139c>
									m3->_MBUS_2SND[8]=0x02;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2202      	movs	r2, #2
 800bfe2:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
									m3->_MBUS_2SND[7]=0x81;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2281      	movs	r2, #129	@ 0x81
 800bfea:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2201      	movs	r2, #1
 800bff2:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2203      	movs	r2, #3
 800bffa:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c004:	1d9a      	adds	r2, r3, #6
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
									return(2);//Error excepcion 02
 800c00c:	2302      	movs	r3, #2
 800c00e:	f001 b8a5 	b.w	800d15c <ModBUS+0x139c>
								m3->_MBUS_2SND[8]=0x03;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2203      	movs	r2, #3
 800c016:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
								m3->_MBUS_2SND[7]=0x81;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2281      	movs	r2, #129	@ 0x81
 800c01e:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2201      	movs	r2, #1
 800c026:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2203      	movs	r2, #3
 800c02e:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c038:	1d9a      	adds	r2, r3, #6
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
								return(3);//Erroe excepcion 03
 800c040:	2303      	movs	r3, #3
 800c042:	f001 b88b 	b.w	800d15c <ModBUS+0x139c>
						m3->_MBUS_2SND[8]=0x01;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2201      	movs	r2, #1
 800c04a:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
						m3->_MBUS_2SND[7]=0x81;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2281      	movs	r2, #129	@ 0x81
 800c052:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2201      	movs	r2, #1
 800c05a:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2203      	movs	r2, #3
 800c062:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c06c:	1d9a      	adds	r2, r3, #6
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
						return(1);//Error excepcion 01
 800c074:	2301      	movs	r3, #1
 800c076:	f001 b871 	b.w	800d15c <ModBUS+0x139c>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	7d9a      	ldrb	r2, [r3, #22]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	7d5a      	ldrb	r2, [r3, #21]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	7d1a      	ldrb	r2, [r3, #20]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	7cda      	ldrb	r2, [r3, #19]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	7c9a      	ldrb	r2, [r3, #18]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

					int qty_reg=0;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	627b      	str	r3, [r7, #36]	@ 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	7adb      	ldrb	r3, [r3, #11]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	f040 80e3 	bne.w	800c280 <ModBUS+0x4c0>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	7e9b      	ldrb	r3, [r3, #26]
 800c0be:	461a      	mov	r2, r3
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8a3 2628 	strh.w	r2, [r3, #1576]	@ 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	@ 0x628
 800c0cc:	021b      	lsls	r3, r3, #8
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8a3 2628 	strh.w	r2, [r3, #1576]	@ 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	@ 0x628
 800c0dc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8a3 2628 	strh.w	r2, [r3, #1576]	@ 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	@ 0x628
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	7ed2      	ldrb	r2, [r2, #27]
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8a3 2628 	strh.w	r2, [r3, #1576]	@ 0x628

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	7f1b      	ldrb	r3, [r3, #28]
 800c100:	461a      	mov	r2, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8a3 262a 	strh.w	r2, [r3, #1578]	@ 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	@ 0x62a
 800c10e:	021b      	lsls	r3, r3, #8
 800c110:	b29a      	uxth	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8a3 262a 	strh.w	r2, [r3, #1578]	@ 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	@ 0x62a
 800c11e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c122:	b29a      	uxth	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8a3 262a 	strh.w	r2, [r3, #1578]	@ 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	@ 0x62a
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	7f52      	ldrb	r2, [r2, #29]
 800c134:	4313      	orrs	r3, r2
 800c136:	b29a      	uxth	r2, r3
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8a3 262a 	strh.w	r2, [r3, #1578]	@ 0x62a



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	@ 0x62a
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	f892 2626 	ldrb.w	r2, [r2, #1574]	@ 0x626
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d87e      	bhi.n	800c24c <ModBUS+0x48c>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	@ 0x628
 800c154:	461a      	mov	r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	@ 0x62a
 800c15c:	4413      	add	r3, r2
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	f892 2626 	ldrb.w	r2, [r2, #1574]	@ 0x626
 800c164:	4293      	cmp	r3, r2
 800c166:	dc57      	bgt.n	800c218 <ModBUS+0x458>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800c168:	2300      	movs	r3, #0
 800c16a:	623b      	str	r3, [r7, #32]
 800c16c:	2300      	movs	r3, #0
 800c16e:	61fb      	str	r3, [r7, #28]
 800c170:	2300      	movs	r3, #0
 800c172:	667b      	str	r3, [r7, #100]	@ 0x64
 800c174:	2300      	movs	r3, #0
 800c176:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800c178:	2300      	movs	r3, #0
 800c17a:	663b      	str	r3, [r7, #96]	@ 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	f8b2 2628 	ldrh.w	r2, [r2, #1576]	@ 0x628
 800c188:	40d3      	lsrs	r3, r2
 800c18a:	663b      	str	r3, [r7, #96]	@ 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	@ 0x62a
 800c192:	08db      	lsrs	r3, r3, #3
 800c194:	b29b      	uxth	r3, r3
 800c196:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	@ 0x62a
 800c19e:	f003 0307 	and.w	r3, r3, #7
 800c1a2:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d102      	bne.n	800c1b0 <ModBUS+0x3f0>
									{
										bytes=div;
 800c1aa:	6a3b      	ldr	r3, [r7, #32]
 800c1ac:	667b      	str	r3, [r7, #100]	@ 0x64
 800c1ae:	e002      	b.n	800c1b6 <ModBUS+0x3f6>
									}
									else
									{
										bytes=div+1;
 800c1b0:	6a3b      	ldr	r3, [r7, #32]
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	667b      	str	r3, [r7, #100]	@ 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800c1b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c1b8:	b2da      	uxtb	r2, r3
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220


									while(bytes > 0)
 800c1c0:	e00e      	b.n	800c1e0 <ModBUS+0x420>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800c1c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c1c4:	3308      	adds	r3, #8
 800c1c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c1c8:	b2d1      	uxtb	r1, r2
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	460a      	mov	r2, r1
 800c1d0:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
										coils=coils>>8;
 800c1d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c1d6:	0a1b      	lsrs	r3, r3, #8
 800c1d8:	663b      	str	r3, [r7, #96]	@ 0x60
										bytes--;
 800c1da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	667b      	str	r3, [r7, #100]	@ 0x64
									while(bytes > 0)
 800c1e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	dced      	bgt.n	800c1c2 <ModBUS+0x402>
									}


									m3->_MBUS_2SND[7]=0x02;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2202      	movs	r2, #2
 800c1ea:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 800c1fc:	3303      	adds	r3, #3
 800c1fe:	b2da      	uxtb	r2, r3
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c20c:	1d9a      	adds	r2, r3, #6
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c214:	f000 bfa2 	b.w	800d15c <ModBUS+0x139c>
									m3->_MBUS_2SND[8]=0x02;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2202      	movs	r2, #2
 800c21c:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
									m3->_MBUS_2SND[7]=0x82;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2282      	movs	r2, #130	@ 0x82
 800c224:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2201      	movs	r2, #1
 800c22c:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2203      	movs	r2, #3
 800c234:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c23e:	1d9a      	adds	r2, r3, #6
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
									return(2);//Error excepcion 02
 800c246:	2302      	movs	r3, #2
 800c248:	f000 bf88 	b.w	800d15c <ModBUS+0x139c>
								m3->_MBUS_2SND[8]=0x03;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2203      	movs	r2, #3
 800c250:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
								m3->_MBUS_2SND[7]=0x82;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2282      	movs	r2, #130	@ 0x82
 800c258:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2201      	movs	r2, #1
 800c260:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2203      	movs	r2, #3
 800c268:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c272:	1d9a      	adds	r2, r3, #6
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
								return(3);//Erroe excepcion 03
 800c27a:	2303      	movs	r3, #3
 800c27c:	f000 bf6e 	b.w	800d15c <ModBUS+0x139c>
						m3->_MBUS_2SND[8]=0x01;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2201      	movs	r2, #1
 800c284:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
						m3->_MBUS_2SND[7]=0x82;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2282      	movs	r2, #130	@ 0x82
 800c28c:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2201      	movs	r2, #1
 800c294:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2203      	movs	r2, #3
 800c29c:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c2a6:	1d9a      	adds	r2, r3, #6
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
						return(1);//Error excepcion 01
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	f000 bf54 	b.w	800d15c <ModBUS+0x139c>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	7d9a      	ldrb	r2, [r3, #22]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	7d5a      	ldrb	r2, [r3, #21]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	7d1a      	ldrb	r2, [r3, #20]
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	7cda      	ldrb	r2, [r3, #19]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	7c9a      	ldrb	r2, [r3, #18]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

					int qty_reg=0;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	7b1b      	ldrb	r3, [r3, #12]
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	f040 80df 	bne.w	800c4b2 <ModBUS+0x6f2>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	7e9b      	ldrb	r3, [r3, #26]
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8a3 262e 	strh.w	r2, [r3, #1582]	@ 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	@ 0x62e
 800c306:	021b      	lsls	r3, r3, #8
 800c308:	b29a      	uxth	r2, r3
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8a3 262e 	strh.w	r2, [r3, #1582]	@ 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	@ 0x62e
 800c316:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8a3 262e 	strh.w	r2, [r3, #1582]	@ 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	@ 0x62e
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	7ed2      	ldrb	r2, [r2, #27]
 800c32c:	4313      	orrs	r3, r2
 800c32e:	b29a      	uxth	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8a3 262e 	strh.w	r2, [r3, #1582]	@ 0x62e

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	7f1b      	ldrb	r3, [r3, #28]
 800c33a:	461a      	mov	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8a3 2630 	strh.w	r2, [r3, #1584]	@ 0x630
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	@ 0x630
 800c348:	021b      	lsls	r3, r3, #8
 800c34a:	b29a      	uxth	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8a3 2630 	strh.w	r2, [r3, #1584]	@ 0x630
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	@ 0x630
 800c358:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c35c:	b29a      	uxth	r2, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8a3 2630 	strh.w	r2, [r3, #1584]	@ 0x630
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	@ 0x630
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	7f52      	ldrb	r2, [r2, #29]
 800c36e:	4313      	orrs	r3, r2
 800c370:	b29a      	uxth	r2, r3
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8a3 2630 	strh.w	r2, [r3, #1584]	@ 0x630



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	@ 0x630
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	f892 262c 	ldrb.w	r2, [r2, #1580]	@ 0x62c
 800c384:	4293      	cmp	r3, r2
 800c386:	d87a      	bhi.n	800c47e <ModBUS+0x6be>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	@ 0x62e
 800c38e:	461a      	mov	r2, r3
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	@ 0x630
 800c396:	4413      	add	r3, r2
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	f892 262c 	ldrb.w	r2, [r2, #1580]	@ 0x62c
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	dc53      	bgt.n	800c44a <ModBUS+0x68a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c3a2:	e029      	b.n	800c3f8 <ModBUS+0x638>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	@ 0x62e
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3ae:	4413      	add	r3, r2
 800c3b0:	005a      	lsls	r2, r3, #1
 800c3b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3b4:	005b      	lsls	r3, r3, #1
 800c3b6:	3309      	adds	r3, #9
 800c3b8:	6879      	ldr	r1, [r7, #4]
 800c3ba:	440a      	add	r2, r1
 800c3bc:	f892 1424 	ldrb.w	r1, [r2, #1060]	@ 0x424
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	460a      	mov	r2, r1
 800c3c6:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	@ 0x62e
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3d4:	4413      	add	r3, r2
 800c3d6:	005b      	lsls	r3, r3, #1
 800c3d8:	1c5a      	adds	r2, r3, #1
 800c3da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3dc:	3305      	adds	r3, #5
 800c3de:	005b      	lsls	r3, r3, #1
 800c3e0:	6879      	ldr	r1, [r7, #4]
 800c3e2:	440a      	add	r2, r1
 800c3e4:	f892 1424 	ldrb.w	r1, [r2, #1060]	@ 0x424
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	460a      	mov	r2, r1
 800c3ee:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

										qty_reg++; //Incremento la cantidad de registros
 800c3f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	@ 0x630
 800c3fe:	461a      	mov	r2, r3
 800c400:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c402:	4293      	cmp	r3, r2
 800c404:	dbce      	blt.n	800c3a4 <ModBUS+0x5e4>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	@ 0x630
 800c40c:	b2db      	uxtb	r3, r3
 800c40e:	005b      	lsls	r3, r3, #1
 800c410:	b2da      	uxtb	r2, r3
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
									m3->_MBUS_2SND[7]=0x03;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2203      	movs	r2, #3
 800c41c:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2201      	movs	r2, #1
 800c424:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 800c42e:	3303      	adds	r3, #3
 800c430:	b2da      	uxtb	r2, r3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c43e:	1d9a      	adds	r2, r3, #6
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c446:	f000 be89 	b.w	800d15c <ModBUS+0x139c>
									m3->_MBUS_2SND[8]=0x02;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2202      	movs	r2, #2
 800c44e:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
									m3->_MBUS_2SND[7]=0x83;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2283      	movs	r2, #131	@ 0x83
 800c456:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2201      	movs	r2, #1
 800c45e:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2203      	movs	r2, #3
 800c466:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c470:	1d9a      	adds	r2, r3, #6
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
									return(2);//Error excepcion 02
 800c478:	2302      	movs	r3, #2
 800c47a:	f000 be6f 	b.w	800d15c <ModBUS+0x139c>
								m3->_MBUS_2SND[8]=0x03;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2203      	movs	r2, #3
 800c482:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
								m3->_MBUS_2SND[7]=0x83;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2283      	movs	r2, #131	@ 0x83
 800c48a:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2201      	movs	r2, #1
 800c492:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2203      	movs	r2, #3
 800c49a:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c4a4:	1d9a      	adds	r2, r3, #6
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
								return(3);//Erroe excepcion 03
 800c4ac:	2303      	movs	r3, #3
 800c4ae:	f000 be55 	b.w	800d15c <ModBUS+0x139c>
						m3->_MBUS_2SND[8]=0x01;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
						m3->_MBUS_2SND[7]=0x83;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2283      	movs	r2, #131	@ 0x83
 800c4be:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2203      	movs	r2, #3
 800c4ce:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c4d8:	1d9a      	adds	r2, r3, #6
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
						return(1);//Error excepcion 01
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	f000 be3b 	b.w	800d15c <ModBUS+0x139c>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	7d9a      	ldrb	r2, [r3, #22]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	7d5a      	ldrb	r2, [r3, #21]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	7d1a      	ldrb	r2, [r3, #20]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	7cda      	ldrb	r2, [r3, #19]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	7c9a      	ldrb	r2, [r3, #18]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

					int qty_reg=0;
 800c518:	2300      	movs	r3, #0
 800c51a:	65bb      	str	r3, [r7, #88]	@ 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	7b5b      	ldrb	r3, [r3, #13]
 800c520:	2b01      	cmp	r3, #1
 800c522:	f040 80df 	bne.w	800c6e4 <ModBUS+0x924>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	7e9b      	ldrb	r3, [r3, #26]
 800c52a:	461a      	mov	r2, r3
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8a3 2634 	strh.w	r2, [r3, #1588]	@ 0x634
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	@ 0x634
 800c538:	021b      	lsls	r3, r3, #8
 800c53a:	b29a      	uxth	r2, r3
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8a3 2634 	strh.w	r2, [r3, #1588]	@ 0x634
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	@ 0x634
 800c548:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f8a3 2634 	strh.w	r2, [r3, #1588]	@ 0x634
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	@ 0x634
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	7ed2      	ldrb	r2, [r2, #27]
 800c55e:	4313      	orrs	r3, r2
 800c560:	b29a      	uxth	r2, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8a3 2634 	strh.w	r2, [r3, #1588]	@ 0x634

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	7f1b      	ldrb	r3, [r3, #28]
 800c56c:	461a      	mov	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f8a3 2636 	strh.w	r2, [r3, #1590]	@ 0x636
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	@ 0x636
 800c57a:	021b      	lsls	r3, r3, #8
 800c57c:	b29a      	uxth	r2, r3
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8a3 2636 	strh.w	r2, [r3, #1590]	@ 0x636
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	@ 0x636
 800c58a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c58e:	b29a      	uxth	r2, r3
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8a3 2636 	strh.w	r2, [r3, #1590]	@ 0x636
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	@ 0x636
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	7f52      	ldrb	r2, [r2, #29]
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	b29a      	uxth	r2, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8a3 2636 	strh.w	r2, [r3, #1590]	@ 0x636



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	@ 0x636
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	f892 2632 	ldrb.w	r2, [r2, #1586]	@ 0x632
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d87a      	bhi.n	800c6b0 <ModBUS+0x8f0>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	@ 0x634
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	@ 0x636
 800c5c8:	4413      	add	r3, r2
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	f892 2632 	ldrb.w	r2, [r2, #1586]	@ 0x632
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	dc53      	bgt.n	800c67c <ModBUS+0x8bc>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c5d4:	e029      	b.n	800c62a <ModBUS+0x86a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	@ 0x634
 800c5dc:	461a      	mov	r2, r3
 800c5de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c5e0:	4413      	add	r3, r2
 800c5e2:	005a      	lsls	r2, r3, #1
 800c5e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c5e6:	005b      	lsls	r3, r3, #1
 800c5e8:	3309      	adds	r3, #9
 800c5ea:	6879      	ldr	r1, [r7, #4]
 800c5ec:	440a      	add	r2, r1
 800c5ee:	f892 1522 	ldrb.w	r1, [r2, #1314]	@ 0x522
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	4413      	add	r3, r2
 800c5f6:	460a      	mov	r2, r1
 800c5f8:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	@ 0x634
 800c602:	461a      	mov	r2, r3
 800c604:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c606:	4413      	add	r3, r2
 800c608:	005b      	lsls	r3, r3, #1
 800c60a:	1c5a      	adds	r2, r3, #1
 800c60c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c60e:	3305      	adds	r3, #5
 800c610:	005b      	lsls	r3, r3, #1
 800c612:	6879      	ldr	r1, [r7, #4]
 800c614:	440a      	add	r2, r1
 800c616:	f892 1522 	ldrb.w	r1, [r2, #1314]	@ 0x522
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	4413      	add	r3, r2
 800c61e:	460a      	mov	r2, r1
 800c620:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

										qty_reg++; //Incremento la cantidad de registros
 800c624:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c626:	3301      	adds	r3, #1
 800c628:	65bb      	str	r3, [r7, #88]	@ 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	@ 0x636
 800c630:	461a      	mov	r2, r3
 800c632:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c634:	4293      	cmp	r3, r2
 800c636:	dbce      	blt.n	800c5d6 <ModBUS+0x816>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	@ 0x636
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	005b      	lsls	r3, r3, #1
 800c642:	b2da      	uxtb	r2, r3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
									m3->_MBUS_2SND[7]=0x04;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2204      	movs	r2, #4
 800c64e:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2201      	movs	r2, #1
 800c656:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 800c660:	3303      	adds	r3, #3
 800c662:	b2da      	uxtb	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c670:	1d9a      	adds	r2, r3, #6
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c678:	f000 bd70 	b.w	800d15c <ModBUS+0x139c>
									m3->_MBUS_2SND[8]=0x02;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2202      	movs	r2, #2
 800c680:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
									m3->_MBUS_2SND[7]=0x84;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2284      	movs	r2, #132	@ 0x84
 800c688:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2201      	movs	r2, #1
 800c690:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2203      	movs	r2, #3
 800c698:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c6a2:	1d9a      	adds	r2, r3, #6
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
									return(2);//Error excepcion 02
 800c6aa:	2302      	movs	r3, #2
 800c6ac:	f000 bd56 	b.w	800d15c <ModBUS+0x139c>
								m3->_MBUS_2SND[8]=0x03;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2203      	movs	r2, #3
 800c6b4:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
								m3->_MBUS_2SND[7]=0x84;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2284      	movs	r2, #132	@ 0x84
 800c6bc:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2203      	movs	r2, #3
 800c6cc:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c6d6:	1d9a      	adds	r2, r3, #6
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
								return(3);//Erroe excepcion 03
 800c6de:	2303      	movs	r3, #3
 800c6e0:	f000 bd3c 	b.w	800d15c <ModBUS+0x139c>
						m3->_MBUS_2SND[8]=0x01;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
						m3->_MBUS_2SND[7]=0x84;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2284      	movs	r2, #132	@ 0x84
 800c6f0:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2203      	movs	r2, #3
 800c700:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c70a:	1d9a      	adds	r2, r3, #6
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
						return(1);//Error excepcion 01
 800c712:	2301      	movs	r3, #1
 800c714:	f000 bd22 	b.w	800d15c <ModBUS+0x139c>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	7d9a      	ldrb	r2, [r3, #22]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	7d5a      	ldrb	r2, [r3, #21]
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	7d1a      	ldrb	r2, [r3, #20]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	7cda      	ldrb	r2, [r3, #19]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	7c9a      	ldrb	r2, [r3, #18]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

								int qty_reg=0;
 800c74a:	2300      	movs	r3, #0
 800c74c:	62bb      	str	r3, [r7, #40]	@ 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	7b9b      	ldrb	r3, [r3, #14]
 800c752:	2b01      	cmp	r3, #1
 800c754:	f040 80cf 	bne.w	800c8f6 <ModBUS+0xb36>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	7e9b      	ldrb	r3, [r3, #26]
 800c75c:	461a      	mov	r2, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f8a3 263a 	strh.w	r2, [r3, #1594]	@ 0x63a
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 800c76a:	021b      	lsls	r3, r3, #8
 800c76c:	b29a      	uxth	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8a3 263a 	strh.w	r2, [r3, #1594]	@ 0x63a
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 800c77a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c77e:	b29a      	uxth	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8a3 263a 	strh.w	r2, [r3, #1594]	@ 0x63a
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	7ed2      	ldrb	r2, [r2, #27]
 800c790:	4313      	orrs	r3, r2
 800c792:	b29a      	uxth	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f8a3 263a 	strh.w	r2, [r3, #1594]	@ 0x63a

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	7f1b      	ldrb	r3, [r3, #28]
 800c79e:	461a      	mov	r2, r3
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8a3 263c 	strh.w	r2, [r3, #1596]	@ 0x63c
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	@ 0x63c
 800c7ac:	021b      	lsls	r3, r3, #8
 800c7ae:	b29a      	uxth	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8a3 263c 	strh.w	r2, [r3, #1596]	@ 0x63c
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	@ 0x63c
 800c7bc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8a3 263c 	strh.w	r2, [r3, #1596]	@ 0x63c
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	@ 0x63c
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	7f52      	ldrb	r2, [r2, #29]
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8a3 263c 	strh.w	r2, [r3, #1596]	@ 0x63c



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f893 3638 	ldrb.w	r3, [r3, #1592]	@ 0x638
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	dd69      	ble.n	800c8c2 <ModBUS+0xb02>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	@ 0x63c
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d005      	beq.n	800c804 <ModBUS+0xa44>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	@ 0x63c
 800c7fe:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 800c802:	d144      	bne.n	800c88e <ModBUS+0xace>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	@ 0x63c
 800c80a:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 800c80e:	d10d      	bne.n	800c82c <ModBUS+0xa6c>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	f8b2 263a 	ldrh.w	r2, [r2, #1594]	@ 0x63a
 800c81c:	4611      	mov	r1, r2
 800c81e:	2201      	movs	r2, #1
 800c820:	408a      	lsls	r2, r1
 800c822:	431a      	orrs	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 800c82a:	e003      	b.n	800c834 <ModBUS+0xa74>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2200      	movs	r2, #0
 800c830:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	7f5a      	ldrb	r2, [r3, #29]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f883 2223 	strb.w	r2, [r3, #547]	@ 0x223
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	7f1a      	ldrb	r2, [r3, #28]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	7eda      	ldrb	r2, [r3, #27]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f883 2221 	strb.w	r2, [r3, #545]	@ 0x221
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	7e9a      	ldrb	r2, [r3, #26]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
												m3->_MBUS_2SND[7]=0x05;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2205      	movs	r2, #5
 800c860:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2201      	movs	r2, #1
 800c868:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 800c872:	3306      	adds	r3, #6
 800c874:	b2da      	uxtb	r2, r3
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c882:	1d9a      	adds	r2, r3, #6
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800c88a:	f000 bc67 	b.w	800d15c <ModBUS+0x139c>
												m3->_MBUS_2SND[8]=0x02;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2202      	movs	r2, #2
 800c892:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
												m3->_MBUS_2SND[7]=0x85;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2285      	movs	r2, #133	@ 0x85
 800c89a:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2203      	movs	r2, #3
 800c8aa:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c8b4:	1d9a      	adds	r2, r3, #6
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
												return(2);//Error excepcion 02
 800c8bc:	2302      	movs	r3, #2
 800c8be:	f000 bc4d 	b.w	800d15c <ModBUS+0x139c>
											m3->_MBUS_2SND[8]=0x03;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2203      	movs	r2, #3
 800c8c6:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
											m3->_MBUS_2SND[7]=0x85;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2285      	movs	r2, #133	@ 0x85
 800c8ce:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2203      	movs	r2, #3
 800c8de:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c8e8:	1d9a      	adds	r2, r3, #6
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
											return(3);//Erroe excepcion 03
 800c8f0:	2303      	movs	r3, #3
 800c8f2:	f000 bc33 	b.w	800d15c <ModBUS+0x139c>
									m3->_MBUS_2SND[8]=0x01;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
									m3->_MBUS_2SND[7]=0x85;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2285      	movs	r2, #133	@ 0x85
 800c902:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2201      	movs	r2, #1
 800c90a:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2203      	movs	r2, #3
 800c912:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800c91c:	1d9a      	adds	r2, r3, #6
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
									return(1);//Error excepcion 01
 800c924:	2301      	movs	r3, #1
 800c926:	f000 bc19 	b.w	800d15c <ModBUS+0x139c>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	7d9a      	ldrb	r2, [r3, #22]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	7d5a      	ldrb	r2, [r3, #21]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	7d1a      	ldrb	r2, [r3, #20]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	7cda      	ldrb	r2, [r3, #19]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	7c9a      	ldrb	r2, [r3, #18]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

					uint16_t qty_reg=0, start_address=0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c960:	2300      	movs	r3, #0
 800c962:	85bb      	strh	r3, [r7, #44]	@ 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	7bdb      	ldrb	r3, [r3, #15]
 800c968:	2b01      	cmp	r3, #1
 800c96a:	f040 80a0 	bne.w	800caae <ModBUS+0xcee>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	7e9b      	ldrb	r3, [r3, #26]
 800c972:	461a      	mov	r2, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8a3 2646 	strh.w	r2, [r3, #1606]	@ 0x646
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	@ 0x646
 800c980:	021b      	lsls	r3, r3, #8
 800c982:	b29a      	uxth	r2, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8a3 2646 	strh.w	r2, [r3, #1606]	@ 0x646
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	@ 0x646
 800c990:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c994:	b29a      	uxth	r2, r3
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8a3 2646 	strh.w	r2, [r3, #1606]	@ 0x646
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	@ 0x646
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	7ed2      	ldrb	r2, [r2, #27]
 800c9a6:	4313      	orrs	r3, r2
 800c9a8:	b29a      	uxth	r2, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8a3 2646 	strh.w	r2, [r3, #1606]	@ 0x646

							start_address=m3->_06_WriteSingleRegister_Addr;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	@ 0x646
 800c9b6:	85bb      	strh	r3, [r7, #44]	@ 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	7f1b      	ldrb	r3, [r3, #28]
 800c9bc:	461a      	mov	r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8a3 2648 	strh.w	r2, [r3, #1608]	@ 0x648
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	@ 0x648
 800c9ca:	021b      	lsls	r3, r3, #8
 800c9cc:	b29a      	uxth	r2, r3
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8a3 2648 	strh.w	r2, [r3, #1608]	@ 0x648
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	@ 0x648
 800c9da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8a3 2648 	strh.w	r2, [r3, #1608]	@ 0x648
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	@ 0x648
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	7f52      	ldrb	r2, [r2, #29]
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	b29a      	uxth	r2, r3
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8a3 2648 	strh.w	r2, [r3, #1608]	@ 0x648



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	@ 0x646
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	f892 2644 	ldrb.w	r2, [r2, #1604]	@ 0x644
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d838      	bhi.n	800ca7c <ModBUS+0xcbc>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800ca0a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	7f11      	ldrb	r1, [r2, #28]
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	4413      	add	r3, r2
 800ca14:	460a      	mov	r2, r1
 800ca16:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800ca1a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	7f51      	ldrb	r1, [r2, #29]
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	4413      	add	r3, r2
 800ca26:	460a      	mov	r2, r1
 800ca28:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	7f5a      	ldrb	r2, [r3, #29]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f883 2223 	strb.w	r2, [r3, #547]	@ 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	7f1a      	ldrb	r2, [r3, #28]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	7eda      	ldrb	r2, [r3, #27]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f883 2221 	strb.w	r2, [r3, #545]	@ 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	7e9a      	ldrb	r2, [r3, #26]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
									m3->_MBUS_2SND[7]=0x06;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2206      	movs	r2, #6
 800ca58:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2206      	movs	r2, #6
 800ca68:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800ca72:	1d9a      	adds	r2, r3, #6
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800ca7a:	e36f      	b.n	800d15c <ModBUS+0x139c>
									m3->_MBUS_2SND[8]=0x02;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2202      	movs	r2, #2
 800ca80:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
									m3->_MBUS_2SND[7]=0x86;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2286      	movs	r2, #134	@ 0x86
 800ca88:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2203      	movs	r2, #3
 800ca98:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800caa2:	1d9a      	adds	r2, r3, #6
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
									return(2);//Error excepcion 02
 800caaa:	2302      	movs	r3, #2
 800caac:	e356      	b.n	800d15c <ModBUS+0x139c>
						m3->_MBUS_2SND[8]=0x01;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2201      	movs	r2, #1
 800cab2:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
						m3->_MBUS_2SND[7]=0x86;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2286      	movs	r2, #134	@ 0x86
 800caba:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2201      	movs	r2, #1
 800cac2:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2203      	movs	r2, #3
 800caca:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800cad4:	1d9a      	adds	r2, r3, #6
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
						return(1);//Error excepcion 01
 800cadc:	2301      	movs	r3, #1
 800cade:	e33d      	b.n	800d15c <ModBUS+0x139c>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	7d9a      	ldrb	r2, [r3, #22]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	7d5a      	ldrb	r2, [r3, #21]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	7d1a      	ldrb	r2, [r3, #20]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	7cda      	ldrb	r2, [r3, #19]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	7c9a      	ldrb	r2, [r3, #18]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

					int qty_reg=0;
 800cb12:	2300      	movs	r3, #0
 800cb14:	633b      	str	r3, [r7, #48]	@ 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	7c1b      	ldrb	r3, [r3, #16]
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	f040 810c 	bne.w	800cd38 <ModBUS+0xf78>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	7e9b      	ldrb	r3, [r3, #26]
 800cb24:	461a      	mov	r2, r3
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8a3 2640 	strh.w	r2, [r3, #1600]	@ 0x640
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	@ 0x640
 800cb32:	021b      	lsls	r3, r3, #8
 800cb34:	b29a      	uxth	r2, r3
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8a3 2640 	strh.w	r2, [r3, #1600]	@ 0x640
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	@ 0x640
 800cb42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cb46:	b29a      	uxth	r2, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8a3 2640 	strh.w	r2, [r3, #1600]	@ 0x640
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	@ 0x640
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	7ed2      	ldrb	r2, [r2, #27]
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	b29a      	uxth	r2, r3
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8a3 2640 	strh.w	r2, [r3, #1600]	@ 0x640

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	7f1b      	ldrb	r3, [r3, #28]
 800cb66:	461a      	mov	r2, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8a3 2642 	strh.w	r2, [r3, #1602]	@ 0x642
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	@ 0x642
 800cb74:	021b      	lsls	r3, r3, #8
 800cb76:	b29a      	uxth	r2, r3
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8a3 2642 	strh.w	r2, [r3, #1602]	@ 0x642
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	@ 0x642
 800cb84:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cb88:	b29a      	uxth	r2, r3
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8a3 2642 	strh.w	r2, [r3, #1602]	@ 0x642
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	@ 0x642
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	7f52      	ldrb	r2, [r2, #29]
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	b29a      	uxth	r2, r3
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8a3 2642 	strh.w	r2, [r3, #1602]	@ 0x642



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	@ 0x642
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	f892 263e 	ldrb.w	r2, [r2, #1598]	@ 0x63e
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	f200 80a8 	bhi.w	800cd06 <ModBUS+0xf46>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	@ 0x640
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	@ 0x642
 800cbc4:	4413      	add	r3, r2
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	f892 263e 	ldrb.w	r2, [r2, #1598]	@ 0x63e
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	f300 8081 	bgt.w	800ccd4 <ModBUS+0xf14>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	657b      	str	r3, [r7, #84]	@ 0x54
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	653b      	str	r3, [r7, #80]	@ 0x50
 800cbda:	2300      	movs	r3, #0
 800cbdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbde:	2300      	movs	r3, #0
 800cbe0:	64bb      	str	r3, [r7, #72]	@ 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	7f9b      	ldrb	r3, [r3, #30]
 800cbe6:	653b      	str	r3, [r7, #80]	@ 0x50


									while(cdad_bytes > 0)
 800cbe8:	e00e      	b.n	800cc08 <ModBUS+0xe48>
									{
										data=data<<8;
 800cbea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbec:	021b      	lsls	r3, r3, #8
 800cbee:	657b      	str	r3, [r7, #84]	@ 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800cbf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbf2:	330c      	adds	r3, #12
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	4413      	add	r3, r2
 800cbf8:	7c9b      	ldrb	r3, [r3, #18]
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	657b      	str	r3, [r7, #84]	@ 0x54
										cdad_bytes--;
 800cc02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc04:	3b01      	subs	r3, #1
 800cc06:	653b      	str	r3, [r7, #80]	@ 0x50
									while(cdad_bytes > 0)
 800cc08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1ed      	bne.n	800cbea <ModBUS+0xe2a>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	@ 0x640
 800cc14:	461a      	mov	r2, r3
 800cc16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc18:	4093      	lsls	r3, r2
 800cc1a:	657b      	str	r3, [r7, #84]	@ 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800cc1c:	e00f      	b.n	800cc3e <ModBUS+0xe7e>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	@ 0x640
 800cc24:	461a      	mov	r2, r3
 800cc26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc28:	4413      	add	r3, r2
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc30:	461a      	mov	r2, r3
 800cc32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc34:	4313      	orrs	r3, r2
 800cc36:	64bb      	str	r3, [r7, #72]	@ 0x48
										cdad_datos++;
 800cc38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	@ 0x642
 800cc44:	461a      	mov	r2, r3
 800cc46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d3e8      	bcc.n	800cc1e <ModBUS+0xe5e>
									}

									mascara = ~ mascara;
 800cc4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc4e:	43db      	mvns	r3, r3
 800cc50:	64bb      	str	r3, [r7, #72]	@ 0x48

									m3->_Coils &= mascara;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 800cc58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc5a:	401a      	ands	r2, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c


									data &= ~mascara;
 800cc62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc64:	43db      	mvns	r3, r3
 800cc66:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cc68:	4013      	ands	r3, r2
 800cc6a:	657b      	str	r3, [r7, #84]	@ 0x54

									m3->_Coils |= data;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 800cc72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc74:	431a      	orrs	r2, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	7f5a      	ldrb	r2, [r3, #29]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f883 2223 	strb.w	r2, [r3, #547]	@ 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	7f1a      	ldrb	r2, [r3, #28]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	7eda      	ldrb	r2, [r3, #27]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f883 2221 	strb.w	r2, [r3, #545]	@ 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	7e9a      	ldrb	r2, [r3, #26]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
									m3->_MBUS_2SND[7]=0x0F;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	220f      	movs	r2, #15
 800cca8:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2201      	movs	r2, #1
 800ccb0:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 800ccba:	3306      	adds	r3, #6
 800ccbc:	b2da      	uxtb	r2, r3
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800ccca:	1d9a      	adds	r2, r3, #6
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800ccd2:	e243      	b.n	800d15c <ModBUS+0x139c>
									m3->_MBUS_2SND[8]=0x02;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2202      	movs	r2, #2
 800ccd8:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
									m3->_MBUS_2SND[7]=0x8F;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	228f      	movs	r2, #143	@ 0x8f
 800cce0:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2201      	movs	r2, #1
 800cce8:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2203      	movs	r2, #3
 800ccf0:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800ccfa:	1d9a      	adds	r2, r3, #6
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
									return(2);//Error excepcion 02
 800cd02:	2302      	movs	r3, #2
 800cd04:	e22a      	b.n	800d15c <ModBUS+0x139c>
								m3->_MBUS_2SND[8]=0x03;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2203      	movs	r2, #3
 800cd0a:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
								m3->_MBUS_2SND[7]=0x8F;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	228f      	movs	r2, #143	@ 0x8f
 800cd12:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2201      	movs	r2, #1
 800cd1a:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2203      	movs	r2, #3
 800cd22:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800cd2c:	1d9a      	adds	r2, r3, #6
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
								return(3);//Erroe excepcion 03
 800cd34:	2303      	movs	r3, #3
 800cd36:	e211      	b.n	800d15c <ModBUS+0x139c>
						m3->_MBUS_2SND[8]=0x01;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
						m3->_MBUS_2SND[7]=0x8F;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	228f      	movs	r2, #143	@ 0x8f
 800cd44:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2203      	movs	r2, #3
 800cd54:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800cd5e:	1d9a      	adds	r2, r3, #6
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
						return(1);//Error excepcion 01
 800cd66:	2301      	movs	r3, #1
 800cd68:	e1f8      	b.n	800d15c <ModBUS+0x139c>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	7d9a      	ldrb	r2, [r3, #22]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	7d5a      	ldrb	r2, [r3, #21]
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	7d1a      	ldrb	r2, [r3, #20]
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	7cda      	ldrb	r2, [r3, #19]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	7c9a      	ldrb	r2, [r3, #18]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

					uint16_t qty_reg=0, start_address=0;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800cda2:	2300      	movs	r3, #0
 800cda4:	86fb      	strh	r3, [r7, #54]	@ 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	7c5b      	ldrb	r3, [r3, #17]
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	f040 80e8 	bne.w	800cf80 <ModBUS+0x11c0>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	7e9b      	ldrb	r3, [r3, #26]
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f8a3 264c 	strh.w	r2, [r3, #1612]	@ 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	@ 0x64c
 800cdc2:	021b      	lsls	r3, r3, #8
 800cdc4:	b29a      	uxth	r2, r3
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8a3 264c 	strh.w	r2, [r3, #1612]	@ 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	@ 0x64c
 800cdd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8a3 264c 	strh.w	r2, [r3, #1612]	@ 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	@ 0x64c
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	7ed2      	ldrb	r2, [r2, #27]
 800cde8:	4313      	orrs	r3, r2
 800cdea:	b29a      	uxth	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8a3 264c 	strh.w	r2, [r3, #1612]	@ 0x64c

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	@ 0x64c
 800cdf8:	005b      	lsls	r3, r3, #1
 800cdfa:	86fb      	strh	r3, [r7, #54]	@ 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	7f1b      	ldrb	r3, [r3, #28]
 800ce00:	461a      	mov	r2, r3
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f8a3 264e 	strh.w	r2, [r3, #1614]	@ 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	@ 0x64e
 800ce0e:	021b      	lsls	r3, r3, #8
 800ce10:	b29a      	uxth	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8a3 264e 	strh.w	r2, [r3, #1614]	@ 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	@ 0x64e
 800ce1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ce22:	b29a      	uxth	r2, r3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8a3 264e 	strh.w	r2, [r3, #1614]	@ 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	@ 0x64e
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	7f52      	ldrb	r2, [r2, #29]
 800ce34:	4313      	orrs	r3, r2
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8a3 264e 	strh.w	r2, [r3, #1614]	@ 0x64e



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	@ 0x64e
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	f892 264a 	ldrb.w	r2, [r2, #1610]	@ 0x64a
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d87f      	bhi.n	800cf4e <ModBUS+0x118e>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	@ 0x64c
 800ce54:	461a      	mov	r2, r3
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	@ 0x64e
 800ce5c:	4413      	add	r3, r2
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	f892 264a 	ldrb.w	r2, [r2, #1610]	@ 0x64a
 800ce64:	4293      	cmp	r3, r2
 800ce66:	dc59      	bgt.n	800cf1c <ModBUS+0x115c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800ce68:	e029      	b.n	800cebe <ModBUS+0x10fe>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800ce6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ce6e:	f103 020d 	add.w	r2, r3, #13
 800ce72:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 800ce74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ce78:	440b      	add	r3, r1
 800ce7a:	6879      	ldr	r1, [r7, #4]
 800ce7c:	440a      	add	r2, r1
 800ce7e:	7c91      	ldrb	r1, [r2, #18]
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	4413      	add	r3, r2
 800ce84:	460a      	mov	r2, r1
 800ce86:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800ce8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ce8e:	3301      	adds	r3, #1
 800ce90:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800ce94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ce98:	f103 020d 	add.w	r2, r3, #13
 800ce9c:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 800ce9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cea2:	440b      	add	r3, r1
 800cea4:	6879      	ldr	r1, [r7, #4]
 800cea6:	440a      	add	r2, r1
 800cea8:	7c91      	ldrb	r1, [r2, #18]
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	4413      	add	r3, r2
 800ceae:	460a      	mov	r2, r1
 800ceb0:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
										qty_reg++;
 800ceb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ceb8:	3301      	adds	r3, #1
 800ceba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	7f9b      	ldrb	r3, [r3, #30]
 800cec2:	461a      	mov	r2, r3
 800cec4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d3ce      	bcc.n	800ce6a <ModBUS+0x10aa>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	7f5a      	ldrb	r2, [r3, #29]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f883 2223 	strb.w	r2, [r3, #547]	@ 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	7f1a      	ldrb	r2, [r3, #28]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	7eda      	ldrb	r2, [r3, #27]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f883 2221 	strb.w	r2, [r3, #545]	@ 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	7e9a      	ldrb	r2, [r3, #26]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
									m3->_MBUS_2SND[7]=0x10;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2210      	movs	r2, #16
 800cef8:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2201      	movs	r2, #1
 800cf00:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2206      	movs	r2, #6
 800cf08:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800cf12:	1d9a      	adds	r2, r3, #6
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cf1a:	e11f      	b.n	800d15c <ModBUS+0x139c>
									m3->_MBUS_2SND[8]=0x02;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2202      	movs	r2, #2
 800cf20:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
									m3->_MBUS_2SND[7]=0x90;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2290      	movs	r2, #144	@ 0x90
 800cf28:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2201      	movs	r2, #1
 800cf30:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2203      	movs	r2, #3
 800cf38:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800cf42:	1d9a      	adds	r2, r3, #6
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
									return(2);//Error excepcion 02
 800cf4a:	2302      	movs	r3, #2
 800cf4c:	e106      	b.n	800d15c <ModBUS+0x139c>
								m3->_MBUS_2SND[8]=0x03;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2203      	movs	r2, #3
 800cf52:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
								m3->_MBUS_2SND[7]=0x90;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2290      	movs	r2, #144	@ 0x90
 800cf5a:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2201      	movs	r2, #1
 800cf62:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2203      	movs	r2, #3
 800cf6a:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800cf74:	1d9a      	adds	r2, r3, #6
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
								return(3);//Erroe excepcion 03
 800cf7c:	2303      	movs	r3, #3
 800cf7e:	e0ed      	b.n	800d15c <ModBUS+0x139c>
						m3->_MBUS_2SND[8]=0x01;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2201      	movs	r2, #1
 800cf84:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
						m3->_MBUS_2SND[7]=0x90;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2290      	movs	r2, #144	@ 0x90
 800cf8c:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2201      	movs	r2, #1
 800cf94:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2203      	movs	r2, #3
 800cf9c:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800cfa6:	1d9a      	adds	r2, r3, #6
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
						return(1);//Error excepcion 01
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e0d4      	b.n	800d15c <ModBUS+0x139c>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	7e5b      	ldrb	r3, [r3, #25]
 800cfbe:	3b80      	subs	r3, #128	@ 0x80
 800cfc0:	b2da      	uxtb	r2, r3
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f883 221f 	strb.w	r2, [r3, #543]	@ 0x21f
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	7e1a      	ldrb	r2, [r3, #24]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f883 221e 	strb.w	r2, [r3, #542]	@ 0x21e
					m3->_MBUS_2SND[5]=0x03;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2203      	movs	r2, #3
 800cfd6:	f883 221d 	strb.w	r2, [r3, #541]	@ 0x21d
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	7d9a      	ldrb	r2, [r3, #22]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	7d5a      	ldrb	r2, [r3, #21]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f883 221b 	strb.w	r2, [r3, #539]	@ 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	7d1a      	ldrb	r2, [r3, #20]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f883 221a 	strb.w	r2, [r3, #538]	@ 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	7cda      	ldrb	r2, [r3, #19]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f883 2219 	strb.w	r2, [r3, #537]	@ 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	7c9a      	ldrb	r2, [r3, #18]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800d012:	1d9a      	adds	r2, r3, #6
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
					return(1);
 800d01a:	2301      	movs	r3, #1
 800d01c:	e09e      	b.n	800d15c <ModBUS+0x139c>


		}
		else
		{
			return(1);
 800d01e:	2301      	movs	r3, #1
 800d020:	e09c      	b.n	800d15c <ModBUS+0x139c>
		}
	}
	else if (m3->_mode == CLIENTE)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	791b      	ldrb	r3, [r3, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	f040 8098 	bne.w	800d15c <ModBUS+0x139c>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f103 0212 	add.w	r2, r3, #18
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d038:	4619      	mov	r1, r3
 800d03a:	4610      	mov	r0, r2
 800d03c:	f7fe fdbc 	bl	800bbb8 <ModBUS_Check>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	f000 808a 	beq.w	800d15c <ModBUS+0x139c>
		{
			if(ModBUS_Check_tid(m3))
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f7fe fdd4 	bl	800bbf6 <ModBUS_Check_tid>
 800d04e:	4603      	mov	r3, r0
 800d050:	2b00      	cmp	r3, #0
 800d052:	d04f      	beq.n	800d0f4 <ModBUS+0x1334>
			{

				switch (m3->_MBUS_RCVD[7])
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	7e5b      	ldrb	r3, [r3, #25]
 800d058:	2b03      	cmp	r3, #3
 800d05a:	d143      	bne.n	800d0e4 <ModBUS+0x1324>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800d05c:	2300      	movs	r3, #0
 800d05e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
						uint8_t qty=0;
 800d060:	2300      	movs	r3, #0
 800d062:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

						start_address = m3->_MBUS_2SND[8];
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 800d06c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
						start_address = start_address << 8 ;
 800d06e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d070:	021b      	lsls	r3, r3, #8
 800d072:	87fb      	strh	r3, [r7, #62]	@ 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f893 3221 	ldrb.w	r3, [r3, #545]	@ 0x221
 800d07a:	461a      	mov	r2, r3
 800d07c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d07e:	4313      	orrs	r3, r2
 800d080:	87fb      	strh	r3, [r7, #62]	@ 0x3e

						qty = m3->_MBUS_2SND[11];
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f893 3223 	ldrb.w	r3, [r3, #547]	@ 0x223
 800d088:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

						for (int i=0;i< qty; i++)
 800d08c:	2300      	movs	r3, #0
 800d08e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d090:	e022      	b.n	800d0d8 <ModBUS+0x1318>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800d092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d094:	005b      	lsls	r3, r3, #1
 800d096:	f103 0209 	add.w	r2, r3, #9
 800d09a:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 800d09c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d09e:	440b      	add	r3, r1
 800d0a0:	005b      	lsls	r3, r3, #1
 800d0a2:	6879      	ldr	r1, [r7, #4]
 800d0a4:	440a      	add	r2, r1
 800d0a6:	7c91      	ldrb	r1, [r2, #18]
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	4413      	add	r3, r2
 800d0ac:	460a      	mov	r2, r1
 800d0ae:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800d0b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0b4:	3305      	adds	r3, #5
 800d0b6:	005a      	lsls	r2, r3, #1
 800d0b8:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 800d0ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0bc:	440b      	add	r3, r1
 800d0be:	005b      	lsls	r3, r3, #1
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	6879      	ldr	r1, [r7, #4]
 800d0c4:	440a      	add	r2, r1
 800d0c6:	7c91      	ldrb	r1, [r2, #18]
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	4413      	add	r3, r2
 800d0cc:	460a      	mov	r2, r1
 800d0ce:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
						for (int i=0;i< qty; i++)
 800d0d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0d8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800d0dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	dbd7      	blt.n	800d092 <ModBUS+0x12d2>

						}


					}
					break;
 800d0e2:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	7ddb      	ldrb	r3, [r3, #23]
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	7e9b      	ldrb	r3, [r3, #26]
 800d0ee:	1ad3      	subs	r3, r2, r3
 800d0f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d0f2:	e033      	b.n	800d15c <ModBUS+0x139c>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	7e5b      	ldrb	r3, [r3, #25]
 800d0f8:	3b81      	subs	r3, #129	@ 0x81
 800d0fa:	2b15      	cmp	r3, #21
 800d0fc:	d82e      	bhi.n	800d15c <ModBUS+0x139c>
 800d0fe:	a201      	add	r2, pc, #4	@ (adr r2, 800d104 <ModBUS+0x1344>)
 800d100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d104:	0800d15d 	.word	0x0800d15d
 800d108:	0800d15d 	.word	0x0800d15d
 800d10c:	0800d15d 	.word	0x0800d15d
 800d110:	0800d15d 	.word	0x0800d15d
 800d114:	0800d15d 	.word	0x0800d15d
 800d118:	0800d15d 	.word	0x0800d15d
 800d11c:	0800d15d 	.word	0x0800d15d
 800d120:	0800d15d 	.word	0x0800d15d
 800d124:	0800d15d 	.word	0x0800d15d
 800d128:	0800d15d 	.word	0x0800d15d
 800d12c:	0800d15d 	.word	0x0800d15d
 800d130:	0800d15d 	.word	0x0800d15d
 800d134:	0800d15d 	.word	0x0800d15d
 800d138:	0800d15d 	.word	0x0800d15d
 800d13c:	0800d15d 	.word	0x0800d15d
 800d140:	0800d15d 	.word	0x0800d15d
 800d144:	0800d15d 	.word	0x0800d15d
 800d148:	0800d15d 	.word	0x0800d15d
 800d14c:	0800d15d 	.word	0x0800d15d
 800d150:	0800d15d 	.word	0x0800d15d
 800d154:	0800d15d 	.word	0x0800d15d
 800d158:	0800d15d 	.word	0x0800d15d
			}
		}
	}


}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3770      	adds	r7, #112	@ 0x70
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <SPI_ETH_RESET>:
 */

#include "ETH_W5500.h"

SPI_ETH_RESET(struct W5500_SPI * x)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b082      	sub	sp, #8
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->RST_PORT, x->RST_PIN , GPIO_PIN_RESET);		//RST LOW
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	68d8      	ldr	r0, [r3, #12]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	8a1b      	ldrh	r3, [r3, #16]
 800d174:	2200      	movs	r2, #0
 800d176:	4619      	mov	r1, r3
 800d178:	f7f6 f954 	bl	8003424 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800d17c:	2064      	movs	r0, #100	@ 0x64
 800d17e:	f7f5 fcef 	bl	8002b60 <HAL_Delay>
	HAL_GPIO_WritePin(x->RST_PORT, x->RST_PIN , GPIO_PIN_SET);			//RST HIGH
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	68d8      	ldr	r0, [r3, #12]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	8a1b      	ldrh	r3, [r3, #16]
 800d18a:	2201      	movs	r2, #1
 800d18c:	4619      	mov	r1, r3
 800d18e:	f7f6 f949 	bl	8003424 <HAL_GPIO_WritePin>
}
 800d192:	bf00      	nop
 800d194:	4618      	mov	r0, r3
 800d196:	3708      	adds	r7, #8
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <SPI_ETH_PHY_RESET>:

SPI_ETH_PHY_RESET(struct W5500_SPI * x)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
uint8_t a;

	x->TX[0]=0x00;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	771a      	strb	r2, [r3, #28]
	x->TX[1]=0x2E;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	222e      	movs	r2, #46	@ 0x2e
 800d1ae:	775a      	strb	r2, [r3, #29]
	x->TX[2]=0x00;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	779a      	strb	r2, [r3, #30]
	x->TX[3]=0x00;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	77da      	strb	r2, [r3, #31]
	SPI_ETH(x);			//Realizo la letura de PHYCFGR
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 f81c 	bl	800d1fa <SPI_ETH>
	a=x->RX[3];
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800d1c8:	73fb      	strb	r3, [r7, #15]
	a=a&0xFE;
 800d1ca:	7bfb      	ldrb	r3, [r7, #15]
 800d1cc:	f023 0301 	bic.w	r3, r3, #1
 800d1d0:	73fb      	strb	r3, [r7, #15]
	x->TX[0]=0x00;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	771a      	strb	r2, [r3, #28]
	x->TX[1]=0x2E;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	222e      	movs	r2, #46	@ 0x2e
 800d1dc:	775a      	strb	r2, [r3, #29]
	x->TX[2]=0x04;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2204      	movs	r2, #4
 800d1e2:	779a      	strb	r2, [r3, #30]
	x->TX[3]=a;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	7bfa      	ldrb	r2, [r7, #15]
 800d1e8:	77da      	strb	r2, [r3, #31]
	SPI_ETH(x);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 f805 	bl	800d1fa <SPI_ETH>
}
 800d1f0:	bf00      	nop
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}

0800d1fa <SPI_ETH>:

uint8_t  SPI_ETH(struct  W5500_SPI * x )
{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b084      	sub	sp, #16
 800d1fe:	af02      	add	r7, sp, #8
 800d200:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6858      	ldr	r0, [r3, #4]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	891b      	ldrh	r3, [r3, #8]
 800d20a:	2200      	movs	r2, #0
 800d20c:	4619      	mov	r1, r3
 800d20e:	f7f6 f909 	bl	8003424 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6818      	ldr	r0, [r3, #0]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f103 011c 	add.w	r1, r3, #28
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f103 0220 	add.w	r2, r3, #32
 800d222:	2364      	movs	r3, #100	@ 0x64
 800d224:	9300      	str	r3, [sp, #0]
 800d226:	2304      	movs	r3, #4
 800d228:	f7f6 fe11 	bl	8003e4e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6858      	ldr	r0, [r3, #4]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	891b      	ldrh	r3, [r3, #8]
 800d234:	2201      	movs	r2, #1
 800d236:	4619      	mov	r1, r3
 800d238:	f7f6 f8f4 	bl	8003424 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
}
 800d242:	4618      	mov	r0, r3
 800d244:	3708      	adds	r7, #8
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5500_SPI * x,  uint16_t ph_addr, uint8_t addr,uint8_t op, uint8_t * data, uint8_t lnght)
{
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b086      	sub	sp, #24
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
 800d252:	4608      	mov	r0, r1
 800d254:	4611      	mov	r1, r2
 800d256:	461a      	mov	r2, r3
 800d258:	4603      	mov	r3, r0
 800d25a:	807b      	strh	r3, [r7, #2]
 800d25c:	460b      	mov	r3, r1
 800d25e:	707b      	strb	r3, [r7, #1]
 800d260:	4613      	mov	r3, r2
 800d262:	703b      	strb	r3, [r7, #0]
 uint16_t res=0;
 800d264:	2300      	movs	r3, #0
 800d266:	82fb      	strh	r3, [r7, #22]
 uint8_t  a=op;
 800d268:	783b      	ldrb	r3, [r7, #0]
 800d26a:	72fb      	strb	r3, [r7, #11]

 x->TX[0]= (ph_addr & 0xFF00)>>8; 				//High Address Phase
 800d26c:	887b      	ldrh	r3, [r7, #2]
 800d26e:	0a1b      	lsrs	r3, r3, #8
 800d270:	b29b      	uxth	r3, r3
 800d272:	b2da      	uxtb	r2, r3
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	771a      	strb	r2, [r3, #28]
 x->TX[1]= ph_addr & 0x00FF;					//Low Address Phase
 800d278:	887b      	ldrh	r3, [r7, #2]
 800d27a:	b2da      	uxtb	r2, r3
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	775a      	strb	r2, [r3, #29]
 x->TX[2]= ((addr)<<3)|((op)<<2);
 800d280:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800d284:	00db      	lsls	r3, r3, #3
 800d286:	b25a      	sxtb	r2, r3
 800d288:	f997 3000 	ldrsb.w	r3, [r7]
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	b25b      	sxtb	r3, r3
 800d290:	4313      	orrs	r3, r2
 800d292:	b25b      	sxtb	r3, r3
 800d294:	b2da      	uxtb	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	779a      	strb	r2, [r3, #30]
 x->TX[3]=0x00;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2200      	movs	r2, #0
 800d29e:	77da      	strb	r2, [r3, #31]
 if(op == 1)								//Write operation
 800d2a0:	783b      	ldrb	r3, [r7, #0]
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d11d      	bne.n	800d2e2 <SPI_ETH_REG+0x98>
 {
	 for(int i=0; i<(lnght); i++)			//Esto solo incrementa 256 ubicaciones
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	613b      	str	r3, [r7, #16]
 800d2aa:	e013      	b.n	800d2d4 <SPI_ETH_REG+0x8a>
	 {
		x->TX[3]=data[i];					//Put data to be sent
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	6a3a      	ldr	r2, [r7, #32]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	781a      	ldrb	r2, [r3, #0]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	77da      	strb	r2, [r3, #31]
		res=SPI_ETH(x);						//Send data to device
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f7ff ff9e 	bl	800d1fa <SPI_ETH>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	82fb      	strh	r3, [r7, #22]
		x->TX[1]++;							//Address increased once
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	7f5b      	ldrb	r3, [r3, #29]
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	b2da      	uxtb	r2, r3
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	775a      	strb	r2, [r3, #29]
	 for(int i=0; i<(lnght); i++)			//Esto solo incrementa 256 ubicaciones
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	613b      	str	r3, [r7, #16]
 800d2d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d2d8:	693a      	ldr	r2, [r7, #16]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	dbe6      	blt.n	800d2ac <SPI_ETH_REG+0x62>
	 }
	 return(res);
 800d2de:	8afb      	ldrh	r3, [r7, #22]
 800d2e0:	e037      	b.n	800d352 <SPI_ETH_REG+0x108>
 }
	 if(op == 0)							//Read operation
 800d2e2:	783b      	ldrb	r3, [r7, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d134      	bne.n	800d352 <SPI_ETH_REG+0x108>
	 {
		 x->TX[3]=0x00;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	77da      	strb	r2, [r3, #31]
		 if (lnght==2)
 800d2ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	d120      	bne.n	800d338 <SPI_ETH_REG+0xee>
		{
		for(int i=0; i<(lnght); i++)
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	60fb      	str	r3, [r7, #12]
 800d2fa:	e016      	b.n	800d32a <SPI_ETH_REG+0xe0>
			{
			res|=SPI_ETH(x);
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f7ff ff7c 	bl	800d1fa <SPI_ETH>
 800d302:	4603      	mov	r3, r0
 800d304:	461a      	mov	r2, r3
 800d306:	8afb      	ldrh	r3, [r7, #22]
 800d308:	4313      	orrs	r3, r2
 800d30a:	82fb      	strh	r3, [r7, #22]
			x->TX[1]++;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	7f5b      	ldrb	r3, [r3, #29]
 800d310:	3301      	adds	r3, #1
 800d312:	b2da      	uxtb	r2, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	775a      	strb	r2, [r3, #29]
			if (i==0)res=res<<8;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d102      	bne.n	800d324 <SPI_ETH_REG+0xda>
 800d31e:	8afb      	ldrh	r3, [r7, #22]
 800d320:	021b      	lsls	r3, r3, #8
 800d322:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	3301      	adds	r3, #1
 800d328:	60fb      	str	r3, [r7, #12]
 800d32a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d32e:	68fa      	ldr	r2, [r7, #12]
 800d330:	429a      	cmp	r2, r3
 800d332:	dbe3      	blt.n	800d2fc <SPI_ETH_REG+0xb2>
			}
		 return(res);
 800d334:	8afb      	ldrh	r3, [r7, #22]
 800d336:	e00c      	b.n	800d352 <SPI_ETH_REG+0x108>
		}else
		{
			res=SPI_ETH(x);
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f7ff ff5e 	bl	800d1fa <SPI_ETH>
 800d33e:	4603      	mov	r3, r0
 800d340:	82fb      	strh	r3, [r7, #22]
			x->TX[1]++;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	7f5b      	ldrb	r3, [r3, #29]
 800d346:	3301      	adds	r3, #1
 800d348:	b2da      	uxtb	r2, r3
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	775a      	strb	r2, [r3, #29]
			return(res);
 800d34e:	8afb      	ldrh	r3, [r7, #22]
 800d350:	e7ff      	b.n	800d352 <SPI_ETH_REG+0x108>
		}
 	 }
}
 800d352:	4618      	mov	r0, r3
 800d354:	3718      	adds	r7, #24
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}

0800d35a <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5500_SPI * x, uint16_t addr, uint16_t  data, uint8_t socket)
{
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b088      	sub	sp, #32
 800d35e:	af00      	add	r7, sp, #0
 800d360:	60f8      	str	r0, [r7, #12]
 800d362:	4608      	mov	r0, r1
 800d364:	4611      	mov	r1, r2
 800d366:	461a      	mov	r2, r3
 800d368:	4603      	mov	r3, r0
 800d36a:	817b      	strh	r3, [r7, #10]
 800d36c:	460b      	mov	r3, r1
 800d36e:	813b      	strh	r3, [r7, #8]
 800d370:	4613      	mov	r3, r2
 800d372:	71fb      	strb	r3, [r7, #7]
	uint16_t res=0;
 800d374:	2300      	movs	r3, #0
 800d376:	83fb      	strh	r3, [r7, #30]
	uint8_t num[2];
			x->TX[2]= ((socket)<<3)|0x04;
 800d378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d37c:	00db      	lsls	r3, r3, #3
 800d37e:	b25b      	sxtb	r3, r3
 800d380:	f043 0304 	orr.w	r3, r3, #4
 800d384:	b25b      	sxtb	r3, r3
 800d386:	b2da      	uxtb	r2, r3
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	779a      	strb	r2, [r3, #30]
			num[1] = data & 0x00FF ;
 800d38c:	893b      	ldrh	r3, [r7, #8]
 800d38e:	b2db      	uxtb	r3, r3
 800d390:	757b      	strb	r3, [r7, #21]
			num[0] = (data & 0xFF00)>>8 ;
 800d392:	893b      	ldrh	r3, [r7, #8]
 800d394:	0a1b      	lsrs	r3, r3, #8
 800d396:	b29b      	uxth	r3, r3
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	753b      	strb	r3, [r7, #20]

			 for(int i=0; i<(2); i++)
 800d39c:	2300      	movs	r3, #0
 800d39e:	61bb      	str	r3, [r7, #24]
 800d3a0:	e01b      	b.n	800d3da <SPI_ETH_WR_REG_16+0x80>
				 {
				 	x->TX[1]= addr & 0x00FF;//x->TX[2]= addr & 0x00FF;
 800d3a2:	897b      	ldrh	r3, [r7, #10]
 800d3a4:	b2da      	uxtb	r2, r3
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	775a      	strb	r2, [r3, #29]
				 	x->TX[0]=(addr & 0xFF00)>>8;//x->TX[1]=(addr & 0xFF00)>>8;
 800d3aa:	897b      	ldrh	r3, [r7, #10]
 800d3ac:	0a1b      	lsrs	r3, r3, #8
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	b2da      	uxtb	r2, r3
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	771a      	strb	r2, [r3, #28]
					addr++;
 800d3b6:	897b      	ldrh	r3, [r7, #10]
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	817b      	strh	r3, [r7, #10]
					x->TX[3]=num[i];
 800d3bc:	f107 0214 	add.w	r2, r7, #20
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	4413      	add	r3, r2
 800d3c4:	781a      	ldrb	r2, [r3, #0]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	77da      	strb	r2, [r3, #31]
					res=SPI_ETH(x);
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f7ff ff15 	bl	800d1fa <SPI_ETH>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	83fb      	strh	r3, [r7, #30]
			 for(int i=0; i<(2); i++)
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	61bb      	str	r3, [r7, #24]
 800d3da:	69bb      	ldr	r3, [r7, #24]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	dde0      	ble.n	800d3a2 <SPI_ETH_WR_REG_16+0x48>
				 }
			 return(res);
 800d3e0:	8bfb      	ldrh	r3, [r7, #30]
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3720      	adds	r7, #32
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}

0800d3ea <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5500_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght, uint8_t socket )
{
 800d3ea:	b590      	push	{r4, r7, lr}
 800d3ec:	b087      	sub	sp, #28
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	60f8      	str	r0, [r7, #12]
 800d3f2:	607a      	str	r2, [r7, #4]
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	817b      	strh	r3, [r7, #10]
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	813b      	strh	r3, [r7, #8]
		x->TX[2]= ((socket)<<3)|0x00;
 800d3fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d402:	00db      	lsls	r3, r3, #3
 800d404:	b2da      	uxtb	r2, r3
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	779a      	strb	r2, [r3, #30]
	if(lnght < 2048)
 800d40a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d40c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d410:	d226      	bcs.n	800d460 <SPI_ETH_RD_RCV_REG_16+0x76>
	{
			x->TX[3]=0x00;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2200      	movs	r2, #0
 800d416:	77da      	strb	r2, [r3, #31]
			for(int i=0; i<(lnght); i++)
 800d418:	2300      	movs	r3, #0
 800d41a:	617b      	str	r3, [r7, #20]
 800d41c:	e01a      	b.n	800d454 <SPI_ETH_RD_RCV_REG_16+0x6a>
				{
				x->TX[1] = addr & 0x00FF;
 800d41e:	897b      	ldrh	r3, [r7, #10]
 800d420:	b2da      	uxtb	r2, r3
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	775a      	strb	r2, [r3, #29]
				x->TX[0] = (addr & 0xFF00)>>8;
 800d426:	897b      	ldrh	r3, [r7, #10]
 800d428:	0a1b      	lsrs	r3, r3, #8
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	b2da      	uxtb	r2, r3
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	771a      	strb	r2, [r3, #28]
				data[i+offset]=SPI_ETH(x);
 800d432:	893a      	ldrh	r2, [r7, #8]
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	4413      	add	r3, r2
 800d438:	461a      	mov	r2, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	189c      	adds	r4, r3, r2
 800d43e:	68f8      	ldr	r0, [r7, #12]
 800d440:	f7ff fedb 	bl	800d1fa <SPI_ETH>
 800d444:	4603      	mov	r3, r0
 800d446:	7023      	strb	r3, [r4, #0]
				addr++;
 800d448:	897b      	ldrh	r3, [r7, #10]
 800d44a:	3301      	adds	r3, #1
 800d44c:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	3301      	adds	r3, #1
 800d452:	617b      	str	r3, [r7, #20]
 800d454:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d456:	697a      	ldr	r2, [r7, #20]
 800d458:	429a      	cmp	r2, r3
 800d45a:	dbe0      	blt.n	800d41e <SPI_ETH_RD_RCV_REG_16+0x34>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d45c:	2300      	movs	r3, #0
 800d45e:	e000      	b.n	800d462 <SPI_ETH_RD_RCV_REG_16+0x78>
	}
	else
	{
	return(1);
 800d460:	2301      	movs	r3, #1
	}
}
 800d462:	4618      	mov	r0, r3
 800d464:	371c      	adds	r7, #28
 800d466:	46bd      	mov	sp, r7
 800d468:	bd90      	pop	{r4, r7, pc}

0800d46a <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5500_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght, uint8_t socket )
{
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b086      	sub	sp, #24
 800d46e:	af00      	add	r7, sp, #0
 800d470:	60f8      	str	r0, [r7, #12]
 800d472:	607a      	str	r2, [r7, #4]
 800d474:	461a      	mov	r2, r3
 800d476:	460b      	mov	r3, r1
 800d478:	817b      	strh	r3, [r7, #10]
 800d47a:	4613      	mov	r3, r2
 800d47c:	813b      	strh	r3, [r7, #8]
		x->TX[2]= ((socket)<<3)|0x04;
 800d47e:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 800d482:	00db      	lsls	r3, r3, #3
 800d484:	b25b      	sxtb	r3, r3
 800d486:	f043 0304 	orr.w	r3, r3, #4
 800d48a:	b25b      	sxtb	r3, r3
 800d48c:	b2da      	uxtb	r2, r3
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	779a      	strb	r2, [r3, #30]
	if(lnght < 2048)
 800d492:	8c3b      	ldrh	r3, [r7, #32]
 800d494:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d498:	d224      	bcs.n	800d4e4 <SPI_ETH_WR_TX_REG_16+0x7a>
	{

			for(int i=0; i<(lnght); i++)
 800d49a:	2300      	movs	r3, #0
 800d49c:	617b      	str	r3, [r7, #20]
 800d49e:	e01b      	b.n	800d4d8 <SPI_ETH_WR_TX_REG_16+0x6e>
				{
				x->TX[1] = addr & 0x00FF;
 800d4a0:	897b      	ldrh	r3, [r7, #10]
 800d4a2:	b2da      	uxtb	r2, r3
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	775a      	strb	r2, [r3, #29]
				x->TX[0] = (addr & 0xFF00)>>8;
 800d4a8:	897b      	ldrh	r3, [r7, #10]
 800d4aa:	0a1b      	lsrs	r3, r3, #8
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	b2da      	uxtb	r2, r3
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	771a      	strb	r2, [r3, #28]
				x->TX[3]= x->data[i+offset];
 800d4b4:	893a      	ldrh	r2, [r7, #8]
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	4413      	add	r3, r2
 800d4ba:	68fa      	ldr	r2, [r7, #12]
 800d4bc:	4413      	add	r3, r2
 800d4be:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	77da      	strb	r2, [r3, #31]
				SPI_ETH(x);
 800d4c6:	68f8      	ldr	r0, [r7, #12]
 800d4c8:	f7ff fe97 	bl	800d1fa <SPI_ETH>
				addr++;
 800d4cc:	897b      	ldrh	r3, [r7, #10]
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	617b      	str	r3, [r7, #20]
 800d4d8:	8c3b      	ldrh	r3, [r7, #32]
 800d4da:	697a      	ldr	r2, [r7, #20]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	dbdf      	blt.n	800d4a0 <SPI_ETH_WR_TX_REG_16+0x36>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	e000      	b.n	800d4e6 <SPI_ETH_WR_TX_REG_16+0x7c>
	}
	else
	{
	return(1);
 800d4e4:	2301      	movs	r3, #1
	}
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	3718      	adds	r7, #24
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}

0800d4ee <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5500_SPI * y, uint8_t socket, uint8_t z)
{
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b082      	sub	sp, #8
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
 800d4f6:	460b      	mov	r3, r1
 800d4f8:	70fb      	strb	r3, [r7, #3]
 800d4fa:	4613      	mov	r3, r2
 800d4fc:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= 0x00; 				//High Address Phase Hardcoded MR Register
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2200      	movs	r2, #0
 800d502:	771a      	strb	r2, [r3, #28]
	y->TX[1]= 0x01;					//Low Address Phase Command
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2201      	movs	r2, #1
 800d508:	775a      	strb	r2, [r3, #29]
	y->TX[2]= ((socket<<3)|0x04);	//Control Phase address + R/W + OP Mode
 800d50a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d50e:	00db      	lsls	r3, r3, #3
 800d510:	b25b      	sxtb	r3, r3
 800d512:	f043 0304 	orr.w	r3, r3, #4
 800d516:	b25b      	sxtb	r3, r3
 800d518:	b2da      	uxtb	r2, r3
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	779a      	strb	r2, [r3, #30]
	y->TX[3]= z ;		//Load data to save
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	78ba      	ldrb	r2, [r7, #2]
 800d522:	77da      	strb	r2, [r3, #31]
	SPI_ETH(y);
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f7ff fe68 	bl	800d1fa <SPI_ETH>
}
 800d52a:	bf00      	nop
 800d52c:	4618      	mov	r0, r3
 800d52e:	3708      	adds	r7, #8
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5500_SPI * y, uint8_t socket, uint8_t z)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	460b      	mov	r3, r1
 800d53e:	70fb      	strb	r3, [r7, #3]
 800d540:	4613      	mov	r3, r2
 800d542:	70bb      	strb	r3, [r7, #2]
		y->TX[0]= 0x00; 				//High Address Phase Hardcoded MR Register
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	771a      	strb	r2, [r3, #28]
		y->TX[1]= 0x00;					//Low Address Phase Mode
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2200      	movs	r2, #0
 800d54e:	775a      	strb	r2, [r3, #29]
		y->TX[2]= ((socket)<<3)|0x04;	//Control Phase address + R/W + OP Mode
 800d550:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d554:	00db      	lsls	r3, r3, #3
 800d556:	b25b      	sxtb	r3, r3
 800d558:	f043 0304 	orr.w	r3, r3, #4
 800d55c:	b25b      	sxtb	r3, r3
 800d55e:	b2da      	uxtb	r2, r3
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	779a      	strb	r2, [r3, #30]
		y->TX[3]= z ;		//Load data to save
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	78ba      	ldrb	r2, [r7, #2]
 800d568:	77da      	strb	r2, [r3, #31]

	SPI_ETH(y);
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f7ff fe45 	bl	800d1fa <SPI_ETH>
}
 800d570:	bf00      	nop
 800d572:	4618      	mov	r0, r3
 800d574:	3708      	adds	r7, #8
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
	...

0800d57c <eth_init>:


uint8_t eth_init(struct W5500_SPI * ETH)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b084      	sub	sp, #16
 800d580:	af02      	add	r7, sp, #8
 800d582:	6078      	str	r0, [r7, #4]
  	 SPI_ETH_RESET(ETH);	//Reset W5500 por hardware
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f7ff fded 	bl	800d164 <SPI_ETH_RESET>
  	 HAL_Delay(800);
 800d58a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800d58e:	f7f5 fae7 	bl	8002b60 <HAL_Delay>

  	 SPI_ETH_REG(ETH, GAR,COMM_REG,SPI_WRITE, ETH->GAR,4);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800d598:	3304      	adds	r3, #4
 800d59a:	2204      	movs	r2, #4
 800d59c:	9201      	str	r2, [sp, #4]
 800d59e:	9300      	str	r3, [sp, #0]
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	2101      	movs	r1, #1
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f7ff fe4f 	bl	800d24a <SPI_ETH_REG>

	 ETH->T8=0x00;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
	 SPI_ETH_REG(ETH, IMR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d5be:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	9301      	str	r3, [sp, #4]
 800d5c8:	9200      	str	r2, [sp, #0]
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	2116      	movs	r1, #22
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f7ff fe3a 	bl	800d24a <SPI_ETH_REG>

	 ETH->T8=0x0F;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d5dc:	220f      	movs	r2, #15
 800d5de:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
	 SPI_ETH_REG(ETH, RTR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d5e8:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	9301      	str	r3, [sp, #4]
 800d5f2:	9200      	str	r2, [sp, #0]
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	2119      	movs	r1, #25
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f7ff fe25 	bl	800d24a <SPI_ETH_REG>

	 ETH->T8=0xA0;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d606:	22a0      	movs	r2, #160	@ 0xa0
 800d608:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
	 SPI_ETH_REG(ETH, RTR+1,COMM_REG,SPI_WRITE, ETH->T8,1);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d612:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d616:	461a      	mov	r2, r3
 800d618:	2301      	movs	r3, #1
 800d61a:	9301      	str	r3, [sp, #4]
 800d61c:	9200      	str	r2, [sp, #0]
 800d61e:	2301      	movs	r3, #1
 800d620:	2200      	movs	r2, #0
 800d622:	211a      	movs	r1, #26
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f7ff fe10 	bl	800d24a <SPI_ETH_REG>

	 ETH->T8=0x07;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d630:	2207      	movs	r2, #7
 800d632:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
	 SPI_ETH_REG(ETH, RCR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d63c:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d640:	461a      	mov	r2, r3
 800d642:	2301      	movs	r3, #1
 800d644:	9301      	str	r3, [sp, #4]
 800d646:	9200      	str	r2, [sp, #0]
 800d648:	2301      	movs	r3, #1
 800d64a:	2200      	movs	r2, #0
 800d64c:	211b      	movs	r1, #27
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f7ff fdfb 	bl	800d24a <SPI_ETH_REG>

	 ETH->T8=0x00;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d65a:	2200      	movs	r2, #0
 800d65c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
	 SPI_ETH_REG(ETH, SIMR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d666:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d66a:	461a      	mov	r2, r3
 800d66c:	2301      	movs	r3, #1
 800d66e:	9301      	str	r3, [sp, #4]
 800d670:	9200      	str	r2, [sp, #0]
 800d672:	2301      	movs	r3, #1
 800d674:	2200      	movs	r2, #0
 800d676:	2118      	movs	r1, #24
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f7ff fde6 	bl	800d24a <SPI_ETH_REG>

	 SPI_ETH_REG(ETH, SHAR,COMM_REG,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800d684:	330c      	adds	r3, #12
 800d686:	2206      	movs	r2, #6
 800d688:	9201      	str	r2, [sp, #4]
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	2301      	movs	r3, #1
 800d68e:	2200      	movs	r2, #0
 800d690:	2109      	movs	r1, #9
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f7ff fdd9 	bl	800d24a <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-MAC SET\r\n",strlen("\r\nETH-W5500-MAC SET"));
 800d698:	2113      	movs	r1, #19
 800d69a:	481d      	ldr	r0, [pc, #116]	@ (800d710 <eth_init+0x194>)
 800d69c:	f7f3 ff44 	bl	8001528 <ITM0_Write>
	 SPI_ETH_REG(ETH, GAR,COMM_REG,SPI_WRITE, ETH->GAR,4);	//SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800d6a6:	3304      	adds	r3, #4
 800d6a8:	2204      	movs	r2, #4
 800d6aa:	9201      	str	r2, [sp, #4]
 800d6ac:	9300      	str	r3, [sp, #0]
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	2101      	movs	r1, #1
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f7ff fdc8 	bl	800d24a <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-GATEWAY SET\r\n",strlen("\r\nETH-W5500-GATEWAY SET\r\n"));									//same for server and client
 800d6ba:	2119      	movs	r1, #25
 800d6bc:	4815      	ldr	r0, [pc, #84]	@ (800d714 <eth_init+0x198>)
 800d6be:	f7f3 ff33 	bl	8001528 <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR,COMM_REG,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800d6c8:	3308      	adds	r3, #8
 800d6ca:	2204      	movs	r2, #4
 800d6cc:	9201      	str	r2, [sp, #4]
 800d6ce:	9300      	str	r3, [sp, #0]
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	2105      	movs	r1, #5
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f7ff fdb7 	bl	800d24a <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-SUBNET SET\r\n",strlen("\r\nETH-W5500-SUBNET SET"));											//same for server and client
 800d6dc:	2116      	movs	r1, #22
 800d6de:	480e      	ldr	r0, [pc, #56]	@ (800d718 <eth_init+0x19c>)
 800d6e0:	f7f3 ff22 	bl	8001528 <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR,COMM_REG,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f503 5381 	add.w	r3, r3, #4128	@ 0x1020
 800d6ea:	3312      	adds	r3, #18
 800d6ec:	2204      	movs	r2, #4
 800d6ee:	9201      	str	r2, [sp, #4]
 800d6f0:	9300      	str	r3, [sp, #0]
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	210f      	movs	r1, #15
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f7ff fda6 	bl	800d24a <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-IP SET\r\n",strlen("\r\nETH-W5500-IP SET"));
 800d6fe:	2112      	movs	r1, #18
 800d700:	4806      	ldr	r0, [pc, #24]	@ (800d71c <eth_init+0x1a0>)
 800d702:	f7f3 ff11 	bl	8001528 <ITM0_Write>

}
 800d706:	bf00      	nop
 800d708:	4618      	mov	r0, r3
 800d70a:	3708      	adds	r7, #8
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	08010d8c 	.word	0x08010d8c
 800d714:	08010da4 	.word	0x08010da4
 800d718:	08010dc0 	.word	0x08010dc0
 800d71c:	08010ddc 	.word	0x08010ddc

0800d720 <eth_socket_init>:

uint8_t eth_socket_init(struct W5500_SPI * ETH, uint8_t socket)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b086      	sub	sp, #24
 800d724:	af02      	add	r7, sp, #8
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	460b      	mov	r3, r1
 800d72a:	70fb      	strb	r3, [r7, #3]

	 ETH->T8=0x02;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d732:	2202      	movs	r2, #2
 800d734:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S0_REG,SPI_WRITE, ETH->T8,1);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d73e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d742:	461a      	mov	r2, r3
 800d744:	2301      	movs	r3, #1
 800d746:	9301      	str	r3, [sp, #4]
 800d748:	9200      	str	r2, [sp, #0]
 800d74a:	2301      	movs	r3, #1
 800d74c:	2201      	movs	r2, #1
 800d74e:	211e      	movs	r1, #30
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f7ff fd7a 	bl	800d24a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S0_REG,SPI_WRITE, ETH->T8,1);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d75c:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d760:	461a      	mov	r2, r3
 800d762:	2301      	movs	r3, #1
 800d764:	9301      	str	r3, [sp, #4]
 800d766:	9200      	str	r2, [sp, #0]
 800d768:	2301      	movs	r3, #1
 800d76a:	2201      	movs	r2, #1
 800d76c:	211f      	movs	r1, #31
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f7ff fd6b 	bl	800d24a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S1_REG,SPI_WRITE, ETH->T8,1);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d77a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d77e:	461a      	mov	r2, r3
 800d780:	2301      	movs	r3, #1
 800d782:	9301      	str	r3, [sp, #4]
 800d784:	9200      	str	r2, [sp, #0]
 800d786:	2301      	movs	r3, #1
 800d788:	2205      	movs	r2, #5
 800d78a:	211e      	movs	r1, #30
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f7ff fd5c 	bl	800d24a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S1_REG,SPI_WRITE, ETH->T8,1);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d798:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d79c:	461a      	mov	r2, r3
 800d79e:	2301      	movs	r3, #1
 800d7a0:	9301      	str	r3, [sp, #4]
 800d7a2:	9200      	str	r2, [sp, #0]
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	2205      	movs	r2, #5
 800d7a8:	211f      	movs	r1, #31
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f7ff fd4d 	bl	800d24a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S2_REG,SPI_WRITE, ETH->T8,1);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d7b6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	2301      	movs	r3, #1
 800d7be:	9301      	str	r3, [sp, #4]
 800d7c0:	9200      	str	r2, [sp, #0]
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	2209      	movs	r2, #9
 800d7c6:	211e      	movs	r1, #30
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f7ff fd3e 	bl	800d24a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S2_REG,SPI_WRITE, ETH->T8,1);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d7d4:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d7d8:	461a      	mov	r2, r3
 800d7da:	2301      	movs	r3, #1
 800d7dc:	9301      	str	r3, [sp, #4]
 800d7de:	9200      	str	r2, [sp, #0]
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	2209      	movs	r2, #9
 800d7e4:	211f      	movs	r1, #31
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7ff fd2f 	bl	800d24a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S3_REG,SPI_WRITE, ETH->T8,1);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d7f2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	9301      	str	r3, [sp, #4]
 800d7fc:	9200      	str	r2, [sp, #0]
 800d7fe:	2301      	movs	r3, #1
 800d800:	220d      	movs	r2, #13
 800d802:	211e      	movs	r1, #30
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f7ff fd20 	bl	800d24a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S3_REG,SPI_WRITE, ETH->T8,1);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d810:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d814:	461a      	mov	r2, r3
 800d816:	2301      	movs	r3, #1
 800d818:	9301      	str	r3, [sp, #4]
 800d81a:	9200      	str	r2, [sp, #0]
 800d81c:	2301      	movs	r3, #1
 800d81e:	220d      	movs	r2, #13
 800d820:	211f      	movs	r1, #31
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7ff fd11 	bl	800d24a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S4_REG,SPI_WRITE, ETH->T8,1);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d82e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d832:	461a      	mov	r2, r3
 800d834:	2301      	movs	r3, #1
 800d836:	9301      	str	r3, [sp, #4]
 800d838:	9200      	str	r2, [sp, #0]
 800d83a:	2301      	movs	r3, #1
 800d83c:	2211      	movs	r2, #17
 800d83e:	211e      	movs	r1, #30
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f7ff fd02 	bl	800d24a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S4_REG,SPI_WRITE, ETH->T8,1);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d84c:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d850:	461a      	mov	r2, r3
 800d852:	2301      	movs	r3, #1
 800d854:	9301      	str	r3, [sp, #4]
 800d856:	9200      	str	r2, [sp, #0]
 800d858:	2301      	movs	r3, #1
 800d85a:	2211      	movs	r2, #17
 800d85c:	211f      	movs	r1, #31
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f7ff fcf3 	bl	800d24a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S5_REG,SPI_WRITE, ETH->T8,1);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d86a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d86e:	461a      	mov	r2, r3
 800d870:	2301      	movs	r3, #1
 800d872:	9301      	str	r3, [sp, #4]
 800d874:	9200      	str	r2, [sp, #0]
 800d876:	2301      	movs	r3, #1
 800d878:	2215      	movs	r2, #21
 800d87a:	211e      	movs	r1, #30
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f7ff fce4 	bl	800d24a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S5_REG,SPI_WRITE, ETH->T8,1);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d888:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d88c:	461a      	mov	r2, r3
 800d88e:	2301      	movs	r3, #1
 800d890:	9301      	str	r3, [sp, #4]
 800d892:	9200      	str	r2, [sp, #0]
 800d894:	2301      	movs	r3, #1
 800d896:	2215      	movs	r2, #21
 800d898:	211f      	movs	r1, #31
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f7ff fcd5 	bl	800d24a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S6_REG,SPI_WRITE, ETH->T8,1);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d8a6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	9301      	str	r3, [sp, #4]
 800d8b0:	9200      	str	r2, [sp, #0]
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	2219      	movs	r2, #25
 800d8b6:	211e      	movs	r1, #30
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f7ff fcc6 	bl	800d24a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S6_REG,SPI_WRITE, ETH->T8,1);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d8c4:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	9301      	str	r3, [sp, #4]
 800d8ce:	9200      	str	r2, [sp, #0]
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	2219      	movs	r2, #25
 800d8d4:	211f      	movs	r1, #31
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f7ff fcb7 	bl	800d24a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S7_REG,SPI_WRITE, ETH->T8,1);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d8e2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	9301      	str	r3, [sp, #4]
 800d8ec:	9200      	str	r2, [sp, #0]
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	221d      	movs	r2, #29
 800d8f2:	211e      	movs	r1, #30
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f7ff fca8 	bl	800d24a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S7_REG,SPI_WRITE, ETH->T8,1);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d900:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d904:	461a      	mov	r2, r3
 800d906:	2301      	movs	r3, #1
 800d908:	9301      	str	r3, [sp, #4]
 800d90a:	9200      	str	r2, [sp, #0]
 800d90c:	2301      	movs	r3, #1
 800d90e:	221d      	movs	r2, #29
 800d910:	211f      	movs	r1, #31
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f7ff fc99 	bl	800d24a <SPI_ETH_REG>
	 ETH->T8=0x00;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d91e:	2200      	movs	r2, #0
 800d920:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
	 SPI_ETH_REG(ETH, S_TX_WR,S0_REG,SPI_WRITE, ETH->T8,1);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d92a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d92e:	461a      	mov	r2, r3
 800d930:	2301      	movs	r3, #1
 800d932:	9301      	str	r3, [sp, #4]
 800d934:	9200      	str	r2, [sp, #0]
 800d936:	2301      	movs	r3, #1
 800d938:	2201      	movs	r2, #1
 800d93a:	2124      	movs	r1, #36	@ 0x24
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f7ff fc84 	bl	800d24a <SPI_ETH_REG>
	 SPI_ETH_REG(ETH, S_TX_WR+1,S0_REG,SPI_WRITE, ETH->T8,1);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d948:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d94c:	461a      	mov	r2, r3
 800d94e:	2301      	movs	r3, #1
 800d950:	9301      	str	r3, [sp, #4]
 800d952:	9200      	str	r2, [sp, #0]
 800d954:	2301      	movs	r3, #1
 800d956:	2201      	movs	r2, #1
 800d958:	2125      	movs	r1, #37	@ 0x25
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f7ff fc75 	bl	800d24a <SPI_ETH_REG>
	 uint16_t b=0;
 800d960:	2300      	movs	r3, #0
 800d962:	81fb      	strh	r3, [r7, #14]
	 uint8_t spi_Data[2];
	 b = SPI_ETH_REG(ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 800d964:	2302      	movs	r3, #2
 800d966:	9301      	str	r3, [sp, #4]
 800d968:	f107 030c 	add.w	r3, r7, #12
 800d96c:	9300      	str	r3, [sp, #0]
 800d96e:	2300      	movs	r3, #0
 800d970:	2201      	movs	r2, #1
 800d972:	2124      	movs	r1, #36	@ 0x24
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f7ff fc68 	bl	800d24a <SPI_ETH_REG>
 800d97a:	4603      	mov	r3, r0
 800d97c:	81fb      	strh	r3, [r7, #14]
	 //ITM0_Write("\r\nETH-W5500-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP SET"));									//same for server and client
	 SPI_ETH_REG(ETH, S_PORT, S0_REG,SPI_WRITE, ETH->S_PORT,2);									//same for server and client
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800d984:	3302      	adds	r3, #2
 800d986:	2202      	movs	r2, #2
 800d988:	9201      	str	r2, [sp, #4]
 800d98a:	9300      	str	r3, [sp, #0]
 800d98c:	2301      	movs	r3, #1
 800d98e:	2201      	movs	r2, #1
 800d990:	2104      	movs	r1, #4
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f7ff fc59 	bl	800d24a <SPI_ETH_REG>
	 //HAL_Delay(100);
	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800d998:	212c      	movs	r1, #44	@ 0x2c
 800d99a:	4804      	ldr	r0, [pc, #16]	@ (800d9ac <eth_socket_init+0x28c>)
 800d99c:	f7f3 fdc4 	bl	8001528 <ITM0_Write>


}
 800d9a0:	bf00      	nop
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3710      	adds	r7, #16
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	bf00      	nop
 800d9ac:	08010df4 	.word	0x08010df4

0800d9b0 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5500_SPI * y, uint8_t socket)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	70fb      	strb	r3, [r7, #3]
			y->TX[0]= 0x00; 				//High Address Phase Hardcoded Stat Register
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	771a      	strb	r2, [r3, #28]
			y->TX[1]= 0x03;					//Low Address Phase Mode
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2203      	movs	r2, #3
 800d9c6:	775a      	strb	r2, [r3, #29]
			y->TX[2]= ((socket)<<3)|0x00;	   //Control Phase address + R/W + OP Mode
 800d9c8:	78fb      	ldrb	r3, [r7, #3]
 800d9ca:	00db      	lsls	r3, r3, #3
 800d9cc:	b2da      	uxtb	r2, r3
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	779a      	strb	r2, [r3, #30]
			SPI_ETH(y);
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7ff fc11 	bl	800d1fa <SPI_ETH>
			return(y->RX[3]);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23

}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3708      	adds	r7, #8
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5500_SPI * y, uint8_t socket)
{
 800d9e6:	b580      	push	{r7, lr}
 800d9e8:	b082      	sub	sp, #8
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	70fb      	strb	r3, [r7, #3]
			y->TX[0]= 0x00; 				//High Address Phase Hardcoded Command Register
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	771a      	strb	r2, [r3, #28]
			y->TX[1]= 0x01;					//Low Address Phase Mode
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	775a      	strb	r2, [r3, #29]
			y->TX[2]= ((socket)<<3)|0x00;	   //Control Phase address + R/W + OP Mode
 800d9fe:	78fb      	ldrb	r3, [r7, #3]
 800da00:	00db      	lsls	r3, r3, #3
 800da02:	b2da      	uxtb	r2, r3
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	779a      	strb	r2, [r3, #30]
			SPI_ETH(y);
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f7ff fbf6 	bl	800d1fa <SPI_ETH>
			return(y->RX[3]);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23

}
 800da14:	4618      	mov	r0, r3
 800da16:	3708      	adds	r7, #8
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5500_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b08c      	sub	sp, #48	@ 0x30
 800da20:	af02      	add	r7, sp, #8
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	607a      	str	r2, [r7, #4]
 800da26:	461a      	mov	r2, r3
 800da28:	460b      	mov	r3, r1
 800da2a:	72fb      	strb	r3, [r7, #11]
 800da2c:	4613      	mov	r3, r2
 800da2e:	813b      	strh	r3, [r7, #8]
	uint16_t S_bf_rcv_offset=0,
 800da30:	2300      	movs	r3, #0
 800da32:	84fb      	strh	r3, [r7, #38]	@ 0x26
			 left_size=0,
 800da34:	2300      	movs	r3, #0
 800da36:	84bb      	strh	r3, [r7, #36]	@ 0x24
			 upper_size=0,
 800da38:	2300      	movs	r3, #0
 800da3a:	847b      	strh	r3, [r7, #34]	@ 0x22
			 destination_addr=0,
 800da3c:	2300      	movs	r3, #0
 800da3e:	843b      	strh	r3, [r7, #32]
			 S_RX_RD=0,
 800da40:	2300      	movs	r3, #0
 800da42:	83fb      	strh	r3, [r7, #30]
			 S_get_offset=0,
 800da44:	2300      	movs	r3, #0
 800da46:	83bb      	strh	r3, [r7, #28]
			 S_get_start_address=0,
 800da48:	2300      	movs	r3, #0
 800da4a:	837b      	strh	r3, [r7, #26]
			 S_mem_pointer=0,
 800da4c:	2300      	movs	r3, #0
 800da4e:	833b      	strh	r3, [r7, #24]
			 RX_MASK=0,
 800da50:	2300      	movs	r3, #0
 800da52:	82fb      	strh	r3, [r7, #22]
			 RX_BASE=0;
 800da54:	2300      	movs	r3, #0
 800da56:	82bb      	strh	r3, [r7, #20]
			RX_BASE=ETH->gS3_RX_BASE;
		}
		break;*/
		default :
		{
			RX_MASK=ETH->gS_RX_MASK;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800da5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800da62:	82fb      	strh	r3, [r7, #22]
			RX_BASE=ETH->gS_RX_BASE;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800da6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da6e:	82bb      	strh	r3, [r7, #20]
		}
		break;
 800da70:	bf00      	nop
	}

	S_RX_RD = SPI_ETH_REG(ETH, S_RX_RD0 ,S0_REG ,SPI_READ, spi_Data,2);//S_RX_RD = SPI_ETH_REG(ETH, S_RX_RD_ADDR_BASEHH + socket ,S_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800da72:	2302      	movs	r3, #2
 800da74:	9301      	str	r3, [sp, #4]
 800da76:	f107 0310 	add.w	r3, r7, #16
 800da7a:	9300      	str	r3, [sp, #0]
 800da7c:	2300      	movs	r3, #0
 800da7e:	2201      	movs	r2, #1
 800da80:	2128      	movs	r1, #40	@ 0x28
 800da82:	68f8      	ldr	r0, [r7, #12]
 800da84:	f7ff fbe1 	bl	800d24a <SPI_ETH_REG>
 800da88:	4603      	mov	r3, r0
 800da8a:	83fb      	strh	r3, [r7, #30]
	S_get_offset = S_RX_RD & RX_MASK;
 800da8c:	8bfa      	ldrh	r2, [r7, #30]
 800da8e:	8afb      	ldrh	r3, [r7, #22]
 800da90:	4013      	ands	r3, r2
 800da92:	83bb      	strh	r3, [r7, #28]
	S_get_start_address  = RX_BASE + S_get_offset;
 800da94:	8aba      	ldrh	r2, [r7, #20]
 800da96:	8bbb      	ldrh	r3, [r7, #28]
 800da98:	4413      	add	r3, r2
 800da9a:	837b      	strh	r3, [r7, #26]
	if((S_get_offset  + sizedata )>(RX_MASK + 1))
 800da9c:	8bba      	ldrh	r2, [r7, #28]
 800da9e:	893b      	ldrh	r3, [r7, #8]
 800daa0:	441a      	add	r2, r3
 800daa2:	8afb      	ldrh	r3, [r7, #22]
 800daa4:	3301      	adds	r3, #1
 800daa6:	429a      	cmp	r2, r3
 800daa8:	dd30      	ble.n	800db0c <eth_rd_SOCKET_DATA+0xf0>
		{
			upper_size = (RX_MASK + 1) - S_get_offset ;
 800daaa:	8afa      	ldrh	r2, [r7, #22]
 800daac:	8bbb      	ldrh	r3, [r7, #28]
 800daae:	1ad3      	subs	r3, r2, r3
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	3301      	adds	r3, #1
 800dab4:	847b      	strh	r3, [r7, #34]	@ 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , S_get_start_address , ETH->data , S_bf_rcv_offset, upper_size, socket);
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800dabc:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800dabe:	8b79      	ldrh	r1, [r7, #26]
 800dac0:	7afb      	ldrb	r3, [r7, #11]
 800dac2:	9301      	str	r3, [sp, #4]
 800dac4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dac6:	9300      	str	r3, [sp, #0]
 800dac8:	4603      	mov	r3, r0
 800daca:	68f8      	ldr	r0, [r7, #12]
 800dacc:	f7ff fc8d 	bl	800d3ea <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800dad0:	8c3a      	ldrh	r2, [r7, #32]
 800dad2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dad4:	4413      	add	r3, r2
 800dad6:	843b      	strh	r3, [r7, #32]
			left_size=sizedata-upper_size;
 800dad8:	893a      	ldrh	r2, [r7, #8]
 800dada:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dadc:	1ad3      	subs	r3, r2, r3
 800dade:	84bb      	strh	r3, [r7, #36]	@ 0x24
			S_bf_rcv_offset=upper_size;
 800dae0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dae2:	84fb      	strh	r3, [r7, #38]	@ 0x26
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S_bf_rcv_offset, left_size, socket);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800daea:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800daec:	8ab9      	ldrh	r1, [r7, #20]
 800daee:	7afb      	ldrb	r3, [r7, #11]
 800daf0:	9301      	str	r3, [sp, #4]
 800daf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800daf4:	9300      	str	r3, [sp, #0]
 800daf6:	4603      	mov	r3, r0
 800daf8:	68f8      	ldr	r0, [r7, #12]
 800dafa:	f7ff fc76 	bl	800d3ea <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S_RX_RD + sizedata;
 800dafe:	8bfa      	ldrh	r2, [r7, #30]
 800db00:	893b      	ldrh	r3, [r7, #8]
 800db02:	4413      	add	r3, r2
 800db04:	b29a      	uxth	r2, r3
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	801a      	strh	r2, [r3, #0]
 800db0a:	e012      	b.n	800db32 <eth_rd_SOCKET_DATA+0x116>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S_get_start_address , ETH->data , S_bf_rcv_offset, sizedata, socket);
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800db12:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800db14:	8b79      	ldrh	r1, [r7, #26]
 800db16:	7afb      	ldrb	r3, [r7, #11]
 800db18:	9301      	str	r3, [sp, #4]
 800db1a:	893b      	ldrh	r3, [r7, #8]
 800db1c:	9300      	str	r3, [sp, #0]
 800db1e:	4603      	mov	r3, r0
 800db20:	68f8      	ldr	r0, [r7, #12]
 800db22:	f7ff fc62 	bl	800d3ea <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S_RX_RD + sizedata;
 800db26:	8bfa      	ldrh	r2, [r7, #30]
 800db28:	893b      	ldrh	r3, [r7, #8]
 800db2a:	4413      	add	r3, r2
 800db2c:	b29a      	uxth	r2, r3
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	b29b      	uxth	r3, r3
}
 800db36:	4618      	mov	r0, r3
 800db38:	3728      	adds	r7, #40	@ 0x28
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5500_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800db3e:	b580      	push	{r7, lr}
 800db40:	b08c      	sub	sp, #48	@ 0x30
 800db42:	af02      	add	r7, sp, #8
 800db44:	60f8      	str	r0, [r7, #12]
 800db46:	607a      	str	r2, [r7, #4]
 800db48:	461a      	mov	r2, r3
 800db4a:	460b      	mov	r3, r1
 800db4c:	72fb      	strb	r3, [r7, #11]
 800db4e:	4613      	mov	r3, r2
 800db50:	813b      	strh	r3, [r7, #8]
	uint16_t S_bf_rcv_offset=0,
 800db52:	2300      	movs	r3, #0
 800db54:	84bb      	strh	r3, [r7, #36]	@ 0x24
			 left_size=0,
 800db56:	2300      	movs	r3, #0
 800db58:	847b      	strh	r3, [r7, #34]	@ 0x22
			 upper_size=0,
 800db5a:	2300      	movs	r3, #0
 800db5c:	843b      	strh	r3, [r7, #32]
			 source_addr=0,
 800db5e:	2300      	movs	r3, #0
 800db60:	83fb      	strh	r3, [r7, #30]
			 Sn_TX_WR=0,
 800db62:	2300      	movs	r3, #0
 800db64:	83bb      	strh	r3, [r7, #28]
			 get_offset=0,
 800db66:	2300      	movs	r3, #0
 800db68:	837b      	strh	r3, [r7, #26]
			 get_free_size=0,
 800db6a:	2300      	movs	r3, #0
 800db6c:	84fb      	strh	r3, [r7, #38]	@ 0x26
			 get_start_address=0,
 800db6e:	2300      	movs	r3, #0
 800db70:	833b      	strh	r3, [r7, #24]
			 S_mem_pointer=0,
 800db72:	2300      	movs	r3, #0
 800db74:	82fb      	strh	r3, [r7, #22]
			 TX_MASK=0,
 800db76:	2300      	movs	r3, #0
 800db78:	82bb      	strh	r3, [r7, #20]
			 TX_BASE=0;
 800db7a:	2300      	movs	r3, #0
 800db7c:	827b      	strh	r3, [r7, #18]
			TX_BASE=ETH->gS3_TX_BASE;
		}
		break;*/
		default :
		{
			TX_MASK=ETH->gS_TX_MASK;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800db84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800db88:	82bb      	strh	r3, [r7, #20]
			TX_BASE=ETH->gS_TX_BASE;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800db90:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800db94:	827b      	strh	r3, [r7, #18]
		}
		break;
 800db96:	bf00      	nop
	}

	while(get_free_size<send_size)
 800db98:	e00c      	b.n	800dbb4 <eth_wr_SOCKET_DATA+0x76>
			{
				get_free_size=SPI_ETH_REG(ETH, S_TX_FSR, S0_REG ,SPI_READ, spi_Data,2);//get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S_TX_FSR	=   0x420,
 800db9a:	2302      	movs	r3, #2
 800db9c:	9301      	str	r3, [sp, #4]
 800db9e:	f107 0310 	add.w	r3, r7, #16
 800dba2:	9300      	str	r3, [sp, #0]
 800dba4:	2300      	movs	r3, #0
 800dba6:	2201      	movs	r2, #1
 800dba8:	2120      	movs	r1, #32
 800dbaa:	68f8      	ldr	r0, [r7, #12]
 800dbac:	f7ff fb4d 	bl	800d24a <SPI_ETH_REG>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	while(get_free_size<send_size)
 800dbb4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800dbb6:	893b      	ldrh	r3, [r7, #8]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d3ee      	bcc.n	800db9a <eth_wr_SOCKET_DATA+0x5c>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2); // S_TX_RD =   0x424,Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S_TX_RD =   0x424,
 800dbbc:	2302      	movs	r3, #2
 800dbbe:	9301      	str	r3, [sp, #4]
 800dbc0:	f107 0310 	add.w	r3, r7, #16
 800dbc4:	9300      	str	r3, [sp, #0]
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	2201      	movs	r2, #1
 800dbca:	2124      	movs	r1, #36	@ 0x24
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f7ff fb3c 	bl	800d24a <SPI_ETH_REG>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	83bb      	strh	r3, [r7, #28]
				get_offset= Sn_TX_WR & TX_MASK;
 800dbd6:	8bba      	ldrh	r2, [r7, #28]
 800dbd8:	8abb      	ldrh	r3, [r7, #20]
 800dbda:	4013      	ands	r3, r2
 800dbdc:	837b      	strh	r3, [r7, #26]
				get_start_address=TX_BASE + get_offset;
 800dbde:	8a7a      	ldrh	r2, [r7, #18]
 800dbe0:	8b7b      	ldrh	r3, [r7, #26]
 800dbe2:	4413      	add	r3, r2
 800dbe4:	833b      	strh	r3, [r7, #24]

				if((get_offset + send_size)>(TX_MASK + 1))
 800dbe6:	8b7a      	ldrh	r2, [r7, #26]
 800dbe8:	893b      	ldrh	r3, [r7, #8]
 800dbea:	441a      	add	r2, r3
 800dbec:	8abb      	ldrh	r3, [r7, #20]
 800dbee:	3301      	adds	r3, #1
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	dd30      	ble.n	800dc56 <eth_wr_SOCKET_DATA+0x118>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800dbf4:	8aba      	ldrh	r2, [r7, #20]
 800dbf6:	8b7b      	ldrh	r3, [r7, #26]
 800dbf8:	1ad3      	subs	r3, r2, r3
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S_bf_rcv_offset, upper_size,socket);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800dc06:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 800dc08:	8b39      	ldrh	r1, [r7, #24]
 800dc0a:	7afb      	ldrb	r3, [r7, #11]
 800dc0c:	9301      	str	r3, [sp, #4]
 800dc0e:	8c3b      	ldrh	r3, [r7, #32]
 800dc10:	9300      	str	r3, [sp, #0]
 800dc12:	4603      	mov	r3, r0
 800dc14:	68f8      	ldr	r0, [r7, #12]
 800dc16:	f7ff fc28 	bl	800d46a <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800dc1a:	8bfa      	ldrh	r2, [r7, #30]
 800dc1c:	8c3b      	ldrh	r3, [r7, #32]
 800dc1e:	4413      	add	r3, r2
 800dc20:	83fb      	strh	r3, [r7, #30]
						left_size=send_size-upper_size;
 800dc22:	893a      	ldrh	r2, [r7, #8]
 800dc24:	8c3b      	ldrh	r3, [r7, #32]
 800dc26:	1ad3      	subs	r3, r2, r3
 800dc28:	847b      	strh	r3, [r7, #34]	@ 0x22
						S_bf_rcv_offset=upper_size;
 800dc2a:	8c3b      	ldrh	r3, [r7, #32]
 800dc2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S_bf_rcv_offset, left_size, socket);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800dc34:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 800dc36:	8a79      	ldrh	r1, [r7, #18]
 800dc38:	7afb      	ldrb	r3, [r7, #11]
 800dc3a:	9301      	str	r3, [sp, #4]
 800dc3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	4603      	mov	r3, r0
 800dc42:	68f8      	ldr	r0, [r7, #12]
 800dc44:	f7ff fc11 	bl	800d46a <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800dc48:	8bba      	ldrh	r2, [r7, #28]
 800dc4a:	893b      	ldrh	r3, [r7, #8]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	b29a      	uxth	r2, r3
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	801a      	strh	r2, [r3, #0]
 800dc54:	e012      	b.n	800dc7c <eth_wr_SOCKET_DATA+0x13e>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S_bf_rcv_offset, send_size, socket);
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 800dc5c:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 800dc5e:	8b39      	ldrh	r1, [r7, #24]
 800dc60:	7afb      	ldrb	r3, [r7, #11]
 800dc62:	9301      	str	r3, [sp, #4]
 800dc64:	893b      	ldrh	r3, [r7, #8]
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	4603      	mov	r3, r0
 800dc6a:	68f8      	ldr	r0, [r7, #12]
 800dc6c:	f7ff fbfd 	bl	800d46a <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800dc70:	8bba      	ldrh	r2, [r7, #28]
 800dc72:	893b      	ldrh	r3, [r7, #8]
 800dc74:	4413      	add	r3, r2
 800dc76:	b29a      	uxth	r2, r3
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	801a      	strh	r2, [r3, #0]
					}

}
 800dc7c:	bf00      	nop
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3728      	adds	r7, #40	@ 0x28
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}

0800dc86 <SPI_ETH_SNIFF>:

uint8_t SPI_ETH_SNIFF(struct W5500_SPY * Y,struct W5500_SPI * X)
{
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b084      	sub	sp, #16
 800dc8a:	af02      	add	r7, sp, #8
 800dc8c:	6078      	str	r0, [r7, #4]
 800dc8e:	6039      	str	r1, [r7, #0]
	Y->MR=SPI_ETH_REG(X, 0 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800dc96:	3318      	adds	r3, #24
 800dc98:	2201      	movs	r2, #1
 800dc9a:	9201      	str	r2, [sp, #4]
 800dc9c:	9300      	str	r3, [sp, #0]
 800dc9e:	2300      	movs	r3, #0
 800dca0:	2200      	movs	r2, #0
 800dca2:	2100      	movs	r1, #0
 800dca4:	6838      	ldr	r0, [r7, #0]
 800dca6:	f7ff fad0 	bl	800d24a <SPI_ETH_REG>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	b2da      	uxtb	r2, r3
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	701a      	strb	r2, [r3, #0]

	Y->GAR[0]=SPI_ETH_REG(X, 1 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800dcb8:	3318      	adds	r3, #24
 800dcba:	2201      	movs	r2, #1
 800dcbc:	9201      	str	r2, [sp, #4]
 800dcbe:	9300      	str	r3, [sp, #0]
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	2101      	movs	r1, #1
 800dcc6:	6838      	ldr	r0, [r7, #0]
 800dcc8:	f7ff fabf 	bl	800d24a <SPI_ETH_REG>
 800dccc:	4603      	mov	r3, r0
 800dcce:	b2da      	uxtb	r2, r3
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	705a      	strb	r2, [r3, #1]
	Y->GAR[1]=SPI_ETH_REG(X, 2 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800dcda:	3318      	adds	r3, #24
 800dcdc:	2201      	movs	r2, #1
 800dcde:	9201      	str	r2, [sp, #4]
 800dce0:	9300      	str	r3, [sp, #0]
 800dce2:	2300      	movs	r3, #0
 800dce4:	2200      	movs	r2, #0
 800dce6:	2102      	movs	r1, #2
 800dce8:	6838      	ldr	r0, [r7, #0]
 800dcea:	f7ff faae 	bl	800d24a <SPI_ETH_REG>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	b2da      	uxtb	r2, r3
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	709a      	strb	r2, [r3, #2]
	Y->GAR[2]=SPI_ETH_REG(X, 3 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800dcfc:	3318      	adds	r3, #24
 800dcfe:	2201      	movs	r2, #1
 800dd00:	9201      	str	r2, [sp, #4]
 800dd02:	9300      	str	r3, [sp, #0]
 800dd04:	2300      	movs	r3, #0
 800dd06:	2200      	movs	r2, #0
 800dd08:	2103      	movs	r1, #3
 800dd0a:	6838      	ldr	r0, [r7, #0]
 800dd0c:	f7ff fa9d 	bl	800d24a <SPI_ETH_REG>
 800dd10:	4603      	mov	r3, r0
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	70da      	strb	r2, [r3, #3]
	Y->GAR[3]=SPI_ETH_REG(X, 4 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800dd1e:	3318      	adds	r3, #24
 800dd20:	2201      	movs	r2, #1
 800dd22:	9201      	str	r2, [sp, #4]
 800dd24:	9300      	str	r3, [sp, #0]
 800dd26:	2300      	movs	r3, #0
 800dd28:	2200      	movs	r2, #0
 800dd2a:	2104      	movs	r1, #4
 800dd2c:	6838      	ldr	r0, [r7, #0]
 800dd2e:	f7ff fa8c 	bl	800d24a <SPI_ETH_REG>
 800dd32:	4603      	mov	r3, r0
 800dd34:	b2da      	uxtb	r2, r3
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	711a      	strb	r2, [r3, #4]

	Y->SUBR[0]=SPI_ETH_REG(X, 5 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800dd40:	3318      	adds	r3, #24
 800dd42:	2201      	movs	r2, #1
 800dd44:	9201      	str	r2, [sp, #4]
 800dd46:	9300      	str	r3, [sp, #0]
 800dd48:	2300      	movs	r3, #0
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	2105      	movs	r1, #5
 800dd4e:	6838      	ldr	r0, [r7, #0]
 800dd50:	f7ff fa7b 	bl	800d24a <SPI_ETH_REG>
 800dd54:	4603      	mov	r3, r0
 800dd56:	b2da      	uxtb	r2, r3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	715a      	strb	r2, [r3, #5]
	Y->SUBR[1]=SPI_ETH_REG(X, 6 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800dd62:	3318      	adds	r3, #24
 800dd64:	2201      	movs	r2, #1
 800dd66:	9201      	str	r2, [sp, #4]
 800dd68:	9300      	str	r3, [sp, #0]
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	2106      	movs	r1, #6
 800dd70:	6838      	ldr	r0, [r7, #0]
 800dd72:	f7ff fa6a 	bl	800d24a <SPI_ETH_REG>
 800dd76:	4603      	mov	r3, r0
 800dd78:	b2da      	uxtb	r2, r3
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	719a      	strb	r2, [r3, #6]
	Y->SUBR[2]=SPI_ETH_REG(X, 7 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800dd84:	3318      	adds	r3, #24
 800dd86:	2201      	movs	r2, #1
 800dd88:	9201      	str	r2, [sp, #4]
 800dd8a:	9300      	str	r3, [sp, #0]
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	2200      	movs	r2, #0
 800dd90:	2107      	movs	r1, #7
 800dd92:	6838      	ldr	r0, [r7, #0]
 800dd94:	f7ff fa59 	bl	800d24a <SPI_ETH_REG>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	b2da      	uxtb	r2, r3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	71da      	strb	r2, [r3, #7]
	Y->SUBR[3]=SPI_ETH_REG(X, 8 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800dda6:	3318      	adds	r3, #24
 800dda8:	2201      	movs	r2, #1
 800ddaa:	9201      	str	r2, [sp, #4]
 800ddac:	9300      	str	r3, [sp, #0]
 800ddae:	2300      	movs	r3, #0
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	2108      	movs	r1, #8
 800ddb4:	6838      	ldr	r0, [r7, #0]
 800ddb6:	f7ff fa48 	bl	800d24a <SPI_ETH_REG>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	b2da      	uxtb	r2, r3
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	721a      	strb	r2, [r3, #8]

	Y->SHAR[0]=SPI_ETH_REG(X, 9 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800ddc8:	3318      	adds	r3, #24
 800ddca:	2201      	movs	r2, #1
 800ddcc:	9201      	str	r2, [sp, #4]
 800ddce:	9300      	str	r3, [sp, #0]
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	2109      	movs	r1, #9
 800ddd6:	6838      	ldr	r0, [r7, #0]
 800ddd8:	f7ff fa37 	bl	800d24a <SPI_ETH_REG>
 800dddc:	4603      	mov	r3, r0
 800ddde:	b2da      	uxtb	r2, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	725a      	strb	r2, [r3, #9]
	Y->SHAR[1]=SPI_ETH_REG(X, 10 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800ddea:	3318      	adds	r3, #24
 800ddec:	2201      	movs	r2, #1
 800ddee:	9201      	str	r2, [sp, #4]
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	210a      	movs	r1, #10
 800ddf8:	6838      	ldr	r0, [r7, #0]
 800ddfa:	f7ff fa26 	bl	800d24a <SPI_ETH_REG>
 800ddfe:	4603      	mov	r3, r0
 800de00:	b2da      	uxtb	r2, r3
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	729a      	strb	r2, [r3, #10]
	Y->SHAR[2]=SPI_ETH_REG(X, 11 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800de0c:	3318      	adds	r3, #24
 800de0e:	2201      	movs	r2, #1
 800de10:	9201      	str	r2, [sp, #4]
 800de12:	9300      	str	r3, [sp, #0]
 800de14:	2300      	movs	r3, #0
 800de16:	2200      	movs	r2, #0
 800de18:	210b      	movs	r1, #11
 800de1a:	6838      	ldr	r0, [r7, #0]
 800de1c:	f7ff fa15 	bl	800d24a <SPI_ETH_REG>
 800de20:	4603      	mov	r3, r0
 800de22:	b2da      	uxtb	r2, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	72da      	strb	r2, [r3, #11]
	Y->SHAR[3]=SPI_ETH_REG(X, 12 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800de2e:	3318      	adds	r3, #24
 800de30:	2201      	movs	r2, #1
 800de32:	9201      	str	r2, [sp, #4]
 800de34:	9300      	str	r3, [sp, #0]
 800de36:	2300      	movs	r3, #0
 800de38:	2200      	movs	r2, #0
 800de3a:	210c      	movs	r1, #12
 800de3c:	6838      	ldr	r0, [r7, #0]
 800de3e:	f7ff fa04 	bl	800d24a <SPI_ETH_REG>
 800de42:	4603      	mov	r3, r0
 800de44:	b2da      	uxtb	r2, r3
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	731a      	strb	r2, [r3, #12]
	Y->SHAR[4]=SPI_ETH_REG(X, 13 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800de50:	3318      	adds	r3, #24
 800de52:	2201      	movs	r2, #1
 800de54:	9201      	str	r2, [sp, #4]
 800de56:	9300      	str	r3, [sp, #0]
 800de58:	2300      	movs	r3, #0
 800de5a:	2200      	movs	r2, #0
 800de5c:	210d      	movs	r1, #13
 800de5e:	6838      	ldr	r0, [r7, #0]
 800de60:	f7ff f9f3 	bl	800d24a <SPI_ETH_REG>
 800de64:	4603      	mov	r3, r0
 800de66:	b2da      	uxtb	r2, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	735a      	strb	r2, [r3, #13]
	Y->SHAR[5]=SPI_ETH_REG(X, 14 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800de72:	3318      	adds	r3, #24
 800de74:	2201      	movs	r2, #1
 800de76:	9201      	str	r2, [sp, #4]
 800de78:	9300      	str	r3, [sp, #0]
 800de7a:	2300      	movs	r3, #0
 800de7c:	2200      	movs	r2, #0
 800de7e:	210e      	movs	r1, #14
 800de80:	6838      	ldr	r0, [r7, #0]
 800de82:	f7ff f9e2 	bl	800d24a <SPI_ETH_REG>
 800de86:	4603      	mov	r3, r0
 800de88:	b2da      	uxtb	r2, r3
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	739a      	strb	r2, [r3, #14]

	Y->SIPR[0]=SPI_ETH_REG(X, 15 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800de94:	3318      	adds	r3, #24
 800de96:	2201      	movs	r2, #1
 800de98:	9201      	str	r2, [sp, #4]
 800de9a:	9300      	str	r3, [sp, #0]
 800de9c:	2300      	movs	r3, #0
 800de9e:	2200      	movs	r2, #0
 800dea0:	210f      	movs	r1, #15
 800dea2:	6838      	ldr	r0, [r7, #0]
 800dea4:	f7ff f9d1 	bl	800d24a <SPI_ETH_REG>
 800dea8:	4603      	mov	r3, r0
 800deaa:	b2da      	uxtb	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	73da      	strb	r2, [r3, #15]
	Y->SIPR[1]=SPI_ETH_REG(X, 16 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800deb6:	3318      	adds	r3, #24
 800deb8:	2201      	movs	r2, #1
 800deba:	9201      	str	r2, [sp, #4]
 800debc:	9300      	str	r3, [sp, #0]
 800debe:	2300      	movs	r3, #0
 800dec0:	2200      	movs	r2, #0
 800dec2:	2110      	movs	r1, #16
 800dec4:	6838      	ldr	r0, [r7, #0]
 800dec6:	f7ff f9c0 	bl	800d24a <SPI_ETH_REG>
 800deca:	4603      	mov	r3, r0
 800decc:	b2da      	uxtb	r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	741a      	strb	r2, [r3, #16]
	Y->SIPR[2]=SPI_ETH_REG(X, 17 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800ded8:	3318      	adds	r3, #24
 800deda:	2201      	movs	r2, #1
 800dedc:	9201      	str	r2, [sp, #4]
 800dede:	9300      	str	r3, [sp, #0]
 800dee0:	2300      	movs	r3, #0
 800dee2:	2200      	movs	r2, #0
 800dee4:	2111      	movs	r1, #17
 800dee6:	6838      	ldr	r0, [r7, #0]
 800dee8:	f7ff f9af 	bl	800d24a <SPI_ETH_REG>
 800deec:	4603      	mov	r3, r0
 800deee:	b2da      	uxtb	r2, r3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	745a      	strb	r2, [r3, #17]
	Y->SIPR[3]=SPI_ETH_REG(X, 18 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800defa:	3318      	adds	r3, #24
 800defc:	2201      	movs	r2, #1
 800defe:	9201      	str	r2, [sp, #4]
 800df00:	9300      	str	r3, [sp, #0]
 800df02:	2300      	movs	r3, #0
 800df04:	2200      	movs	r2, #0
 800df06:	2112      	movs	r1, #18
 800df08:	6838      	ldr	r0, [r7, #0]
 800df0a:	f7ff f99e 	bl	800d24a <SPI_ETH_REG>
 800df0e:	4603      	mov	r3, r0
 800df10:	b2da      	uxtb	r2, r3
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	749a      	strb	r2, [r3, #18]

	Y->INTLEVEL[0]=SPI_ETH_REG(X, 19 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800df1c:	3318      	adds	r3, #24
 800df1e:	2201      	movs	r2, #1
 800df20:	9201      	str	r2, [sp, #4]
 800df22:	9300      	str	r3, [sp, #0]
 800df24:	2300      	movs	r3, #0
 800df26:	2200      	movs	r2, #0
 800df28:	2113      	movs	r1, #19
 800df2a:	6838      	ldr	r0, [r7, #0]
 800df2c:	f7ff f98d 	bl	800d24a <SPI_ETH_REG>
 800df30:	4603      	mov	r3, r0
 800df32:	b2da      	uxtb	r2, r3
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	74da      	strb	r2, [r3, #19]
	Y->INTLEVEL[1]=SPI_ETH_REG(X, 20 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800df3e:	3318      	adds	r3, #24
 800df40:	2201      	movs	r2, #1
 800df42:	9201      	str	r2, [sp, #4]
 800df44:	9300      	str	r3, [sp, #0]
 800df46:	2300      	movs	r3, #0
 800df48:	2200      	movs	r2, #0
 800df4a:	2114      	movs	r1, #20
 800df4c:	6838      	ldr	r0, [r7, #0]
 800df4e:	f7ff f97c 	bl	800d24a <SPI_ETH_REG>
 800df52:	4603      	mov	r3, r0
 800df54:	b2da      	uxtb	r2, r3
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	751a      	strb	r2, [r3, #20]

	Y->IR=SPI_ETH_REG(X, 21 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800df60:	3318      	adds	r3, #24
 800df62:	2201      	movs	r2, #1
 800df64:	9201      	str	r2, [sp, #4]
 800df66:	9300      	str	r3, [sp, #0]
 800df68:	2300      	movs	r3, #0
 800df6a:	2200      	movs	r2, #0
 800df6c:	2115      	movs	r1, #21
 800df6e:	6838      	ldr	r0, [r7, #0]
 800df70:	f7ff f96b 	bl	800d24a <SPI_ETH_REG>
 800df74:	4603      	mov	r3, r0
 800df76:	b2da      	uxtb	r2, r3
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	755a      	strb	r2, [r3, #21]

	Y->IMR=SPI_ETH_REG(X, 22 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800df82:	3318      	adds	r3, #24
 800df84:	2201      	movs	r2, #1
 800df86:	9201      	str	r2, [sp, #4]
 800df88:	9300      	str	r3, [sp, #0]
 800df8a:	2300      	movs	r3, #0
 800df8c:	2200      	movs	r2, #0
 800df8e:	2116      	movs	r1, #22
 800df90:	6838      	ldr	r0, [r7, #0]
 800df92:	f7ff f95a 	bl	800d24a <SPI_ETH_REG>
 800df96:	4603      	mov	r3, r0
 800df98:	b2da      	uxtb	r2, r3
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	759a      	strb	r2, [r3, #22]

	Y->SIR=SPI_ETH_REG(X, 23 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800dfa4:	3318      	adds	r3, #24
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	9201      	str	r2, [sp, #4]
 800dfaa:	9300      	str	r3, [sp, #0]
 800dfac:	2300      	movs	r3, #0
 800dfae:	2200      	movs	r2, #0
 800dfb0:	2117      	movs	r1, #23
 800dfb2:	6838      	ldr	r0, [r7, #0]
 800dfb4:	f7ff f949 	bl	800d24a <SPI_ETH_REG>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	b2da      	uxtb	r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	75da      	strb	r2, [r3, #23]

	Y->SIMR=SPI_ETH_REG(X, 24 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800dfc6:	3318      	adds	r3, #24
 800dfc8:	2201      	movs	r2, #1
 800dfca:	9201      	str	r2, [sp, #4]
 800dfcc:	9300      	str	r3, [sp, #0]
 800dfce:	2300      	movs	r3, #0
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	2118      	movs	r1, #24
 800dfd4:	6838      	ldr	r0, [r7, #0]
 800dfd6:	f7ff f938 	bl	800d24a <SPI_ETH_REG>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	b2da      	uxtb	r2, r3
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	761a      	strb	r2, [r3, #24]

	Y->RTR[0]=SPI_ETH_REG(X, 25 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800dfe8:	3318      	adds	r3, #24
 800dfea:	2201      	movs	r2, #1
 800dfec:	9201      	str	r2, [sp, #4]
 800dfee:	9300      	str	r3, [sp, #0]
 800dff0:	2300      	movs	r3, #0
 800dff2:	2200      	movs	r2, #0
 800dff4:	2119      	movs	r1, #25
 800dff6:	6838      	ldr	r0, [r7, #0]
 800dff8:	f7ff f927 	bl	800d24a <SPI_ETH_REG>
 800dffc:	4603      	mov	r3, r0
 800dffe:	b2da      	uxtb	r2, r3
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	765a      	strb	r2, [r3, #25]
	Y->RTR[1]=SPI_ETH_REG(X, 26 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e00a:	3318      	adds	r3, #24
 800e00c:	2201      	movs	r2, #1
 800e00e:	9201      	str	r2, [sp, #4]
 800e010:	9300      	str	r3, [sp, #0]
 800e012:	2300      	movs	r3, #0
 800e014:	2200      	movs	r2, #0
 800e016:	211a      	movs	r1, #26
 800e018:	6838      	ldr	r0, [r7, #0]
 800e01a:	f7ff f916 	bl	800d24a <SPI_ETH_REG>
 800e01e:	4603      	mov	r3, r0
 800e020:	b2da      	uxtb	r2, r3
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	769a      	strb	r2, [r3, #26]

	Y->RCR=SPI_ETH_REG(X, 27 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e02c:	3318      	adds	r3, #24
 800e02e:	2201      	movs	r2, #1
 800e030:	9201      	str	r2, [sp, #4]
 800e032:	9300      	str	r3, [sp, #0]
 800e034:	2300      	movs	r3, #0
 800e036:	2200      	movs	r2, #0
 800e038:	211b      	movs	r1, #27
 800e03a:	6838      	ldr	r0, [r7, #0]
 800e03c:	f7ff f905 	bl	800d24a <SPI_ETH_REG>
 800e040:	4603      	mov	r3, r0
 800e042:	b2da      	uxtb	r2, r3
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	76da      	strb	r2, [r3, #27]

	Y->PTIMER=SPI_ETH_REG(X, 28 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e04e:	3318      	adds	r3, #24
 800e050:	2201      	movs	r2, #1
 800e052:	9201      	str	r2, [sp, #4]
 800e054:	9300      	str	r3, [sp, #0]
 800e056:	2300      	movs	r3, #0
 800e058:	2200      	movs	r2, #0
 800e05a:	211c      	movs	r1, #28
 800e05c:	6838      	ldr	r0, [r7, #0]
 800e05e:	f7ff f8f4 	bl	800d24a <SPI_ETH_REG>
 800e062:	4603      	mov	r3, r0
 800e064:	b2da      	uxtb	r2, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	771a      	strb	r2, [r3, #28]

	Y->PMAGIC=SPI_ETH_REG(X, 29 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e070:	3318      	adds	r3, #24
 800e072:	2201      	movs	r2, #1
 800e074:	9201      	str	r2, [sp, #4]
 800e076:	9300      	str	r3, [sp, #0]
 800e078:	2300      	movs	r3, #0
 800e07a:	2200      	movs	r2, #0
 800e07c:	211d      	movs	r1, #29
 800e07e:	6838      	ldr	r0, [r7, #0]
 800e080:	f7ff f8e3 	bl	800d24a <SPI_ETH_REG>
 800e084:	4603      	mov	r3, r0
 800e086:	b2da      	uxtb	r2, r3
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	775a      	strb	r2, [r3, #29]

	Y->PHAR[0]=SPI_ETH_REG(X, 30 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e092:	3318      	adds	r3, #24
 800e094:	2201      	movs	r2, #1
 800e096:	9201      	str	r2, [sp, #4]
 800e098:	9300      	str	r3, [sp, #0]
 800e09a:	2300      	movs	r3, #0
 800e09c:	2200      	movs	r2, #0
 800e09e:	211e      	movs	r1, #30
 800e0a0:	6838      	ldr	r0, [r7, #0]
 800e0a2:	f7ff f8d2 	bl	800d24a <SPI_ETH_REG>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	b2da      	uxtb	r2, r3
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	779a      	strb	r2, [r3, #30]
	Y->PHAR[1]=SPI_ETH_REG(X, 31 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e0b4:	3318      	adds	r3, #24
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	9201      	str	r2, [sp, #4]
 800e0ba:	9300      	str	r3, [sp, #0]
 800e0bc:	2300      	movs	r3, #0
 800e0be:	2200      	movs	r2, #0
 800e0c0:	211f      	movs	r1, #31
 800e0c2:	6838      	ldr	r0, [r7, #0]
 800e0c4:	f7ff f8c1 	bl	800d24a <SPI_ETH_REG>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	b2da      	uxtb	r2, r3
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	77da      	strb	r2, [r3, #31]
	Y->PHAR[2]=SPI_ETH_REG(X, 32 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e0d6:	3318      	adds	r3, #24
 800e0d8:	2201      	movs	r2, #1
 800e0da:	9201      	str	r2, [sp, #4]
 800e0dc:	9300      	str	r3, [sp, #0]
 800e0de:	2300      	movs	r3, #0
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	2120      	movs	r1, #32
 800e0e4:	6838      	ldr	r0, [r7, #0]
 800e0e6:	f7ff f8b0 	bl	800d24a <SPI_ETH_REG>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	b2da      	uxtb	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f883 2020 	strb.w	r2, [r3, #32]
	Y->PHAR[3]=SPI_ETH_REG(X, 33 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e0fa:	3318      	adds	r3, #24
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	9201      	str	r2, [sp, #4]
 800e100:	9300      	str	r3, [sp, #0]
 800e102:	2300      	movs	r3, #0
 800e104:	2200      	movs	r2, #0
 800e106:	2121      	movs	r1, #33	@ 0x21
 800e108:	6838      	ldr	r0, [r7, #0]
 800e10a:	f7ff f89e 	bl	800d24a <SPI_ETH_REG>
 800e10e:	4603      	mov	r3, r0
 800e110:	b2da      	uxtb	r2, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	Y->PHAR[4]=SPI_ETH_REG(X, 34 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e11e:	3318      	adds	r3, #24
 800e120:	2201      	movs	r2, #1
 800e122:	9201      	str	r2, [sp, #4]
 800e124:	9300      	str	r3, [sp, #0]
 800e126:	2300      	movs	r3, #0
 800e128:	2200      	movs	r2, #0
 800e12a:	2122      	movs	r1, #34	@ 0x22
 800e12c:	6838      	ldr	r0, [r7, #0]
 800e12e:	f7ff f88c 	bl	800d24a <SPI_ETH_REG>
 800e132:	4603      	mov	r3, r0
 800e134:	b2da      	uxtb	r2, r3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	Y->PHAR[5]=SPI_ETH_REG(X, 35 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e142:	3318      	adds	r3, #24
 800e144:	2201      	movs	r2, #1
 800e146:	9201      	str	r2, [sp, #4]
 800e148:	9300      	str	r3, [sp, #0]
 800e14a:	2300      	movs	r3, #0
 800e14c:	2200      	movs	r2, #0
 800e14e:	2123      	movs	r1, #35	@ 0x23
 800e150:	6838      	ldr	r0, [r7, #0]
 800e152:	f7ff f87a 	bl	800d24a <SPI_ETH_REG>
 800e156:	4603      	mov	r3, r0
 800e158:	b2da      	uxtb	r2, r3
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	Y->PSID[0]=SPI_ETH_REG(X, 36 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e166:	3318      	adds	r3, #24
 800e168:	2201      	movs	r2, #1
 800e16a:	9201      	str	r2, [sp, #4]
 800e16c:	9300      	str	r3, [sp, #0]
 800e16e:	2300      	movs	r3, #0
 800e170:	2200      	movs	r2, #0
 800e172:	2124      	movs	r1, #36	@ 0x24
 800e174:	6838      	ldr	r0, [r7, #0]
 800e176:	f7ff f868 	bl	800d24a <SPI_ETH_REG>
 800e17a:	4603      	mov	r3, r0
 800e17c:	b2da      	uxtb	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	Y->PSID[1]=SPI_ETH_REG(X, 37 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e18a:	3318      	adds	r3, #24
 800e18c:	2201      	movs	r2, #1
 800e18e:	9201      	str	r2, [sp, #4]
 800e190:	9300      	str	r3, [sp, #0]
 800e192:	2300      	movs	r3, #0
 800e194:	2200      	movs	r2, #0
 800e196:	2125      	movs	r1, #37	@ 0x25
 800e198:	6838      	ldr	r0, [r7, #0]
 800e19a:	f7ff f856 	bl	800d24a <SPI_ETH_REG>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	b2da      	uxtb	r2, r3
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

	Y->PMRU[0]=SPI_ETH_REG(X, 38 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e1ae:	3318      	adds	r3, #24
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	9201      	str	r2, [sp, #4]
 800e1b4:	9300      	str	r3, [sp, #0]
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	2126      	movs	r1, #38	@ 0x26
 800e1bc:	6838      	ldr	r0, [r7, #0]
 800e1be:	f7ff f844 	bl	800d24a <SPI_ETH_REG>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	b2da      	uxtb	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	Y->PMRU[1]=SPI_ETH_REG(X, 39 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e1d2:	3318      	adds	r3, #24
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	9201      	str	r2, [sp, #4]
 800e1d8:	9300      	str	r3, [sp, #0]
 800e1da:	2300      	movs	r3, #0
 800e1dc:	2200      	movs	r2, #0
 800e1de:	2127      	movs	r1, #39	@ 0x27
 800e1e0:	6838      	ldr	r0, [r7, #0]
 800e1e2:	f7ff f832 	bl	800d24a <SPI_ETH_REG>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	b2da      	uxtb	r2, r3
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

	Y->UIPR[0]=SPI_ETH_REG(X, 40 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e1f6:	3318      	adds	r3, #24
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	9201      	str	r2, [sp, #4]
 800e1fc:	9300      	str	r3, [sp, #0]
 800e1fe:	2300      	movs	r3, #0
 800e200:	2200      	movs	r2, #0
 800e202:	2128      	movs	r1, #40	@ 0x28
 800e204:	6838      	ldr	r0, [r7, #0]
 800e206:	f7ff f820 	bl	800d24a <SPI_ETH_REG>
 800e20a:	4603      	mov	r3, r0
 800e20c:	b2da      	uxtb	r2, r3
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	Y->UIPR[1]=SPI_ETH_REG(X, 41 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e21a:	3318      	adds	r3, #24
 800e21c:	2201      	movs	r2, #1
 800e21e:	9201      	str	r2, [sp, #4]
 800e220:	9300      	str	r3, [sp, #0]
 800e222:	2300      	movs	r3, #0
 800e224:	2200      	movs	r2, #0
 800e226:	2129      	movs	r1, #41	@ 0x29
 800e228:	6838      	ldr	r0, [r7, #0]
 800e22a:	f7ff f80e 	bl	800d24a <SPI_ETH_REG>
 800e22e:	4603      	mov	r3, r0
 800e230:	b2da      	uxtb	r2, r3
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	Y->UIPR[2]=SPI_ETH_REG(X, 42 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e23e:	3318      	adds	r3, #24
 800e240:	2201      	movs	r2, #1
 800e242:	9201      	str	r2, [sp, #4]
 800e244:	9300      	str	r3, [sp, #0]
 800e246:	2300      	movs	r3, #0
 800e248:	2200      	movs	r2, #0
 800e24a:	212a      	movs	r1, #42	@ 0x2a
 800e24c:	6838      	ldr	r0, [r7, #0]
 800e24e:	f7fe fffc 	bl	800d24a <SPI_ETH_REG>
 800e252:	4603      	mov	r3, r0
 800e254:	b2da      	uxtb	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	Y->UIPR[3]=SPI_ETH_REG(X, 43 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e262:	3318      	adds	r3, #24
 800e264:	2201      	movs	r2, #1
 800e266:	9201      	str	r2, [sp, #4]
 800e268:	9300      	str	r3, [sp, #0]
 800e26a:	2300      	movs	r3, #0
 800e26c:	2200      	movs	r2, #0
 800e26e:	212b      	movs	r1, #43	@ 0x2b
 800e270:	6838      	ldr	r0, [r7, #0]
 800e272:	f7fe ffea 	bl	800d24a <SPI_ETH_REG>
 800e276:	4603      	mov	r3, r0
 800e278:	b2da      	uxtb	r2, r3
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	Y->UPORT[0]=SPI_ETH_REG(X, 44 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e286:	3318      	adds	r3, #24
 800e288:	2201      	movs	r2, #1
 800e28a:	9201      	str	r2, [sp, #4]
 800e28c:	9300      	str	r3, [sp, #0]
 800e28e:	2300      	movs	r3, #0
 800e290:	2200      	movs	r2, #0
 800e292:	212c      	movs	r1, #44	@ 0x2c
 800e294:	6838      	ldr	r0, [r7, #0]
 800e296:	f7fe ffd8 	bl	800d24a <SPI_ETH_REG>
 800e29a:	4603      	mov	r3, r0
 800e29c:	b2da      	uxtb	r2, r3
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	Y->UPORT[1]=SPI_ETH_REG(X, 45 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e2aa:	3318      	adds	r3, #24
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	9201      	str	r2, [sp, #4]
 800e2b0:	9300      	str	r3, [sp, #0]
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	212d      	movs	r1, #45	@ 0x2d
 800e2b8:	6838      	ldr	r0, [r7, #0]
 800e2ba:	f7fe ffc6 	bl	800d24a <SPI_ETH_REG>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	b2da      	uxtb	r2, r3
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

	Y->PHYCFGR=SPI_ETH_REG(X, 46 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e2ce:	3318      	adds	r3, #24
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	9201      	str	r2, [sp, #4]
 800e2d4:	9300      	str	r3, [sp, #0]
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	2200      	movs	r2, #0
 800e2da:	212e      	movs	r1, #46	@ 0x2e
 800e2dc:	6838      	ldr	r0, [r7, #0]
 800e2de:	f7fe ffb4 	bl	800d24a <SPI_ETH_REG>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	b2da      	uxtb	r2, r3
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

	Y->VERSIONR=SPI_ETH_REG(X, 57 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e2f2:	3318      	adds	r3, #24
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	9201      	str	r2, [sp, #4]
 800e2f8:	9300      	str	r3, [sp, #0]
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	2139      	movs	r1, #57	@ 0x39
 800e300:	6838      	ldr	r0, [r7, #0]
 800e302:	f7fe ffa2 	bl	800d24a <SPI_ETH_REG>
 800e306:	4603      	mov	r3, r0
 800e308:	b2da      	uxtb	r2, r3
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	//---------------------------port -------------------------//
	Y->Sn_MR=SPI_ETH_REG(X, 0x00 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e316:	3318      	adds	r3, #24
 800e318:	2201      	movs	r2, #1
 800e31a:	9201      	str	r2, [sp, #4]
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	2300      	movs	r3, #0
 800e320:	2201      	movs	r2, #1
 800e322:	2100      	movs	r1, #0
 800e324:	6838      	ldr	r0, [r7, #0]
 800e326:	f7fe ff90 	bl	800d24a <SPI_ETH_REG>
 800e32a:	4603      	mov	r3, r0
 800e32c:	b2da      	uxtb	r2, r3
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	Y->Sn_CR=SPI_ETH_REG(X, 0x01 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e33a:	3318      	adds	r3, #24
 800e33c:	2201      	movs	r2, #1
 800e33e:	9201      	str	r2, [sp, #4]
 800e340:	9300      	str	r3, [sp, #0]
 800e342:	2300      	movs	r3, #0
 800e344:	2201      	movs	r2, #1
 800e346:	2101      	movs	r1, #1
 800e348:	6838      	ldr	r0, [r7, #0]
 800e34a:	f7fe ff7e 	bl	800d24a <SPI_ETH_REG>
 800e34e:	4603      	mov	r3, r0
 800e350:	b2da      	uxtb	r2, r3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

	Y->Sn_IR=SPI_ETH_REG(X, 0x02 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e35e:	3318      	adds	r3, #24
 800e360:	2201      	movs	r2, #1
 800e362:	9201      	str	r2, [sp, #4]
 800e364:	9300      	str	r3, [sp, #0]
 800e366:	2300      	movs	r3, #0
 800e368:	2201      	movs	r2, #1
 800e36a:	2102      	movs	r1, #2
 800e36c:	6838      	ldr	r0, [r7, #0]
 800e36e:	f7fe ff6c 	bl	800d24a <SPI_ETH_REG>
 800e372:	4603      	mov	r3, r0
 800e374:	b2da      	uxtb	r2, r3
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

	Y->Sn_SR=SPI_ETH_REG(X, 0x03 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e382:	3318      	adds	r3, #24
 800e384:	2201      	movs	r2, #1
 800e386:	9201      	str	r2, [sp, #4]
 800e388:	9300      	str	r3, [sp, #0]
 800e38a:	2300      	movs	r3, #0
 800e38c:	2201      	movs	r2, #1
 800e38e:	2103      	movs	r1, #3
 800e390:	6838      	ldr	r0, [r7, #0]
 800e392:	f7fe ff5a 	bl	800d24a <SPI_ETH_REG>
 800e396:	4603      	mov	r3, r0
 800e398:	b2da      	uxtb	r2, r3
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

	Y->Sn_PORT[0]=SPI_ETH_REG(X, 0x04 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e3a6:	3318      	adds	r3, #24
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	9201      	str	r2, [sp, #4]
 800e3ac:	9300      	str	r3, [sp, #0]
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	2104      	movs	r1, #4
 800e3b4:	6838      	ldr	r0, [r7, #0]
 800e3b6:	f7fe ff48 	bl	800d24a <SPI_ETH_REG>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	b2da      	uxtb	r2, r3
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	Y->Sn_PORT[1]=SPI_ETH_REG(X, 0x05 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e3ca:	3318      	adds	r3, #24
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	9201      	str	r2, [sp, #4]
 800e3d0:	9300      	str	r3, [sp, #0]
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	2105      	movs	r1, #5
 800e3d8:	6838      	ldr	r0, [r7, #0]
 800e3da:	f7fe ff36 	bl	800d24a <SPI_ETH_REG>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	b2da      	uxtb	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	Y->Sn_DHAR[0]=SPI_ETH_REG(X, 0x06 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e3ee:	3318      	adds	r3, #24
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	9201      	str	r2, [sp, #4]
 800e3f4:	9300      	str	r3, [sp, #0]
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	2106      	movs	r1, #6
 800e3fc:	6838      	ldr	r0, [r7, #0]
 800e3fe:	f7fe ff24 	bl	800d24a <SPI_ETH_REG>
 800e402:	4603      	mov	r3, r0
 800e404:	b2da      	uxtb	r2, r3
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	Y->Sn_DHAR[1]=SPI_ETH_REG(X, 0x07 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e412:	3318      	adds	r3, #24
 800e414:	2201      	movs	r2, #1
 800e416:	9201      	str	r2, [sp, #4]
 800e418:	9300      	str	r3, [sp, #0]
 800e41a:	2300      	movs	r3, #0
 800e41c:	2201      	movs	r2, #1
 800e41e:	2107      	movs	r1, #7
 800e420:	6838      	ldr	r0, [r7, #0]
 800e422:	f7fe ff12 	bl	800d24a <SPI_ETH_REG>
 800e426:	4603      	mov	r3, r0
 800e428:	b2da      	uxtb	r2, r3
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
	Y->Sn_DHAR[2]=SPI_ETH_REG(X, 0x08 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e436:	3318      	adds	r3, #24
 800e438:	2201      	movs	r2, #1
 800e43a:	9201      	str	r2, [sp, #4]
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	2300      	movs	r3, #0
 800e440:	2201      	movs	r2, #1
 800e442:	2108      	movs	r1, #8
 800e444:	6838      	ldr	r0, [r7, #0]
 800e446:	f7fe ff00 	bl	800d24a <SPI_ETH_REG>
 800e44a:	4603      	mov	r3, r0
 800e44c:	b2da      	uxtb	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	Y->Sn_DHAR[3]=SPI_ETH_REG(X, 0x09 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e45a:	3318      	adds	r3, #24
 800e45c:	2201      	movs	r2, #1
 800e45e:	9201      	str	r2, [sp, #4]
 800e460:	9300      	str	r3, [sp, #0]
 800e462:	2300      	movs	r3, #0
 800e464:	2201      	movs	r2, #1
 800e466:	2109      	movs	r1, #9
 800e468:	6838      	ldr	r0, [r7, #0]
 800e46a:	f7fe feee 	bl	800d24a <SPI_ETH_REG>
 800e46e:	4603      	mov	r3, r0
 800e470:	b2da      	uxtb	r2, r3
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	Y->Sn_DHAR[4]=SPI_ETH_REG(X, 0x0A ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e47e:	3318      	adds	r3, #24
 800e480:	2201      	movs	r2, #1
 800e482:	9201      	str	r2, [sp, #4]
 800e484:	9300      	str	r3, [sp, #0]
 800e486:	2300      	movs	r3, #0
 800e488:	2201      	movs	r2, #1
 800e48a:	210a      	movs	r1, #10
 800e48c:	6838      	ldr	r0, [r7, #0]
 800e48e:	f7fe fedc 	bl	800d24a <SPI_ETH_REG>
 800e492:	4603      	mov	r3, r0
 800e494:	b2da      	uxtb	r2, r3
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	Y->Sn_DHAR[5]=SPI_ETH_REG(X, 0x0B ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e4a2:	3318      	adds	r3, #24
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	9201      	str	r2, [sp, #4]
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	2201      	movs	r2, #1
 800e4ae:	210b      	movs	r1, #11
 800e4b0:	6838      	ldr	r0, [r7, #0]
 800e4b2:	f7fe feca 	bl	800d24a <SPI_ETH_REG>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	b2da      	uxtb	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

	Y->Sn_DIPR[0]=SPI_ETH_REG(X, 0x0C ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e4c6:	3318      	adds	r3, #24
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	9201      	str	r2, [sp, #4]
 800e4cc:	9300      	str	r3, [sp, #0]
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	210c      	movs	r1, #12
 800e4d4:	6838      	ldr	r0, [r7, #0]
 800e4d6:	f7fe feb8 	bl	800d24a <SPI_ETH_REG>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	b2da      	uxtb	r2, r3
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	Y->Sn_DIPR[1]=SPI_ETH_REG(X, 0x0D ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e4ea:	3318      	adds	r3, #24
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	9201      	str	r2, [sp, #4]
 800e4f0:	9300      	str	r3, [sp, #0]
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	210d      	movs	r1, #13
 800e4f8:	6838      	ldr	r0, [r7, #0]
 800e4fa:	f7fe fea6 	bl	800d24a <SPI_ETH_REG>
 800e4fe:	4603      	mov	r3, r0
 800e500:	b2da      	uxtb	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	Y->Sn_DIPR[2]=SPI_ETH_REG(X, 0x0E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e50e:	3318      	adds	r3, #24
 800e510:	2201      	movs	r2, #1
 800e512:	9201      	str	r2, [sp, #4]
 800e514:	9300      	str	r3, [sp, #0]
 800e516:	2300      	movs	r3, #0
 800e518:	2201      	movs	r2, #1
 800e51a:	210e      	movs	r1, #14
 800e51c:	6838      	ldr	r0, [r7, #0]
 800e51e:	f7fe fe94 	bl	800d24a <SPI_ETH_REG>
 800e522:	4603      	mov	r3, r0
 800e524:	b2da      	uxtb	r2, r3
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	Y->Sn_DIPR[3]=SPI_ETH_REG(X, 0x0F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e532:	3318      	adds	r3, #24
 800e534:	2201      	movs	r2, #1
 800e536:	9201      	str	r2, [sp, #4]
 800e538:	9300      	str	r3, [sp, #0]
 800e53a:	2300      	movs	r3, #0
 800e53c:	2201      	movs	r2, #1
 800e53e:	210f      	movs	r1, #15
 800e540:	6838      	ldr	r0, [r7, #0]
 800e542:	f7fe fe82 	bl	800d24a <SPI_ETH_REG>
 800e546:	4603      	mov	r3, r0
 800e548:	b2da      	uxtb	r2, r3
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

	Y->Sn_DPORT[0]=SPI_ETH_REG(X, 0x10 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e556:	3318      	adds	r3, #24
 800e558:	2201      	movs	r2, #1
 800e55a:	9201      	str	r2, [sp, #4]
 800e55c:	9300      	str	r3, [sp, #0]
 800e55e:	2300      	movs	r3, #0
 800e560:	2201      	movs	r2, #1
 800e562:	2110      	movs	r1, #16
 800e564:	6838      	ldr	r0, [r7, #0]
 800e566:	f7fe fe70 	bl	800d24a <SPI_ETH_REG>
 800e56a:	4603      	mov	r3, r0
 800e56c:	b2da      	uxtb	r2, r3
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	Y->Sn_DPORT[1]=SPI_ETH_REG(X, 0x11 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e57a:	3318      	adds	r3, #24
 800e57c:	2201      	movs	r2, #1
 800e57e:	9201      	str	r2, [sp, #4]
 800e580:	9300      	str	r3, [sp, #0]
 800e582:	2300      	movs	r3, #0
 800e584:	2201      	movs	r2, #1
 800e586:	2111      	movs	r1, #17
 800e588:	6838      	ldr	r0, [r7, #0]
 800e58a:	f7fe fe5e 	bl	800d24a <SPI_ETH_REG>
 800e58e:	4603      	mov	r3, r0
 800e590:	b2da      	uxtb	r2, r3
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	Y->Sn_MSSR[0]=SPI_ETH_REG(X, 0x12 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e59e:	3318      	adds	r3, #24
 800e5a0:	2201      	movs	r2, #1
 800e5a2:	9201      	str	r2, [sp, #4]
 800e5a4:	9300      	str	r3, [sp, #0]
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	2201      	movs	r2, #1
 800e5aa:	2112      	movs	r1, #18
 800e5ac:	6838      	ldr	r0, [r7, #0]
 800e5ae:	f7fe fe4c 	bl	800d24a <SPI_ETH_REG>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	b2da      	uxtb	r2, r3
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	Y->Sn_MSSR[1]=SPI_ETH_REG(X, 0x13 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e5c2:	3318      	adds	r3, #24
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	9201      	str	r2, [sp, #4]
 800e5c8:	9300      	str	r3, [sp, #0]
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	2113      	movs	r1, #19
 800e5d0:	6838      	ldr	r0, [r7, #0]
 800e5d2:	f7fe fe3a 	bl	800d24a <SPI_ETH_REG>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	b2da      	uxtb	r2, r3
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	Y->Sn_TOS=SPI_ETH_REG(X, 0x15 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e5e6:	3318      	adds	r3, #24
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	9201      	str	r2, [sp, #4]
 800e5ec:	9300      	str	r3, [sp, #0]
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	2115      	movs	r1, #21
 800e5f4:	6838      	ldr	r0, [r7, #0]
 800e5f6:	f7fe fe28 	bl	800d24a <SPI_ETH_REG>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	b2da      	uxtb	r2, r3
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

	Y->Sn_TTL=SPI_ETH_REG(X, 0x16 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e60a:	3318      	adds	r3, #24
 800e60c:	2201      	movs	r2, #1
 800e60e:	9201      	str	r2, [sp, #4]
 800e610:	9300      	str	r3, [sp, #0]
 800e612:	2300      	movs	r3, #0
 800e614:	2201      	movs	r2, #1
 800e616:	2116      	movs	r1, #22
 800e618:	6838      	ldr	r0, [r7, #0]
 800e61a:	f7fe fe16 	bl	800d24a <SPI_ETH_REG>
 800e61e:	4603      	mov	r3, r0
 800e620:	b2da      	uxtb	r2, r3
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

	Y->Sn_RXBUF_SIZE=SPI_ETH_REG(X, 0x1E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e62e:	3318      	adds	r3, #24
 800e630:	2201      	movs	r2, #1
 800e632:	9201      	str	r2, [sp, #4]
 800e634:	9300      	str	r3, [sp, #0]
 800e636:	2300      	movs	r3, #0
 800e638:	2201      	movs	r2, #1
 800e63a:	211e      	movs	r1, #30
 800e63c:	6838      	ldr	r0, [r7, #0]
 800e63e:	f7fe fe04 	bl	800d24a <SPI_ETH_REG>
 800e642:	4603      	mov	r3, r0
 800e644:	b2da      	uxtb	r2, r3
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

	Y->Sn_TXBUF_SIZE=SPI_ETH_REG(X, 0x1F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e652:	3318      	adds	r3, #24
 800e654:	2201      	movs	r2, #1
 800e656:	9201      	str	r2, [sp, #4]
 800e658:	9300      	str	r3, [sp, #0]
 800e65a:	2300      	movs	r3, #0
 800e65c:	2201      	movs	r2, #1
 800e65e:	211f      	movs	r1, #31
 800e660:	6838      	ldr	r0, [r7, #0]
 800e662:	f7fe fdf2 	bl	800d24a <SPI_ETH_REG>
 800e666:	4603      	mov	r3, r0
 800e668:	b2da      	uxtb	r2, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

	Y->Sn_TX_FSR[0]=SPI_ETH_REG(X, 0x20 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e676:	3318      	adds	r3, #24
 800e678:	2201      	movs	r2, #1
 800e67a:	9201      	str	r2, [sp, #4]
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	2300      	movs	r3, #0
 800e680:	2201      	movs	r2, #1
 800e682:	2120      	movs	r1, #32
 800e684:	6838      	ldr	r0, [r7, #0]
 800e686:	f7fe fde0 	bl	800d24a <SPI_ETH_REG>
 800e68a:	4603      	mov	r3, r0
 800e68c:	b2da      	uxtb	r2, r3
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	Y->Sn_TX_FSR[1]=SPI_ETH_REG(X, 0x21 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e69a:	3318      	adds	r3, #24
 800e69c:	2201      	movs	r2, #1
 800e69e:	9201      	str	r2, [sp, #4]
 800e6a0:	9300      	str	r3, [sp, #0]
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	2121      	movs	r1, #33	@ 0x21
 800e6a8:	6838      	ldr	r0, [r7, #0]
 800e6aa:	f7fe fdce 	bl	800d24a <SPI_ETH_REG>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	b2da      	uxtb	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

	Y->Sn_TX_RD[0]=SPI_ETH_REG(X, 0x22 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e6be:	3318      	adds	r3, #24
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	9201      	str	r2, [sp, #4]
 800e6c4:	9300      	str	r3, [sp, #0]
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	2122      	movs	r1, #34	@ 0x22
 800e6cc:	6838      	ldr	r0, [r7, #0]
 800e6ce:	f7fe fdbc 	bl	800d24a <SPI_ETH_REG>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	b2da      	uxtb	r2, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
	Y->Sn_TX_RD[1]=SPI_ETH_REG(X, 0x23 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e6e2:	3318      	adds	r3, #24
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	9201      	str	r2, [sp, #4]
 800e6e8:	9300      	str	r3, [sp, #0]
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	2123      	movs	r1, #35	@ 0x23
 800e6f0:	6838      	ldr	r0, [r7, #0]
 800e6f2:	f7fe fdaa 	bl	800d24a <SPI_ETH_REG>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	b2da      	uxtb	r2, r3
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	Y->Sn_TX_WR[0]=SPI_ETH_REG(X, 0x24 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e706:	3318      	adds	r3, #24
 800e708:	2201      	movs	r2, #1
 800e70a:	9201      	str	r2, [sp, #4]
 800e70c:	9300      	str	r3, [sp, #0]
 800e70e:	2300      	movs	r3, #0
 800e710:	2201      	movs	r2, #1
 800e712:	2124      	movs	r1, #36	@ 0x24
 800e714:	6838      	ldr	r0, [r7, #0]
 800e716:	f7fe fd98 	bl	800d24a <SPI_ETH_REG>
 800e71a:	4603      	mov	r3, r0
 800e71c:	b2da      	uxtb	r2, r3
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	Y->Sn_TX_WR[1]=SPI_ETH_REG(X, 0x25 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e72a:	3318      	adds	r3, #24
 800e72c:	2201      	movs	r2, #1
 800e72e:	9201      	str	r2, [sp, #4]
 800e730:	9300      	str	r3, [sp, #0]
 800e732:	2300      	movs	r3, #0
 800e734:	2201      	movs	r2, #1
 800e736:	2125      	movs	r1, #37	@ 0x25
 800e738:	6838      	ldr	r0, [r7, #0]
 800e73a:	f7fe fd86 	bl	800d24a <SPI_ETH_REG>
 800e73e:	4603      	mov	r3, r0
 800e740:	b2da      	uxtb	r2, r3
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

	Y->Sn_RX_RSR[0]=SPI_ETH_REG(X, 0x26 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e74e:	3318      	adds	r3, #24
 800e750:	2201      	movs	r2, #1
 800e752:	9201      	str	r2, [sp, #4]
 800e754:	9300      	str	r3, [sp, #0]
 800e756:	2300      	movs	r3, #0
 800e758:	2201      	movs	r2, #1
 800e75a:	2126      	movs	r1, #38	@ 0x26
 800e75c:	6838      	ldr	r0, [r7, #0]
 800e75e:	f7fe fd74 	bl	800d24a <SPI_ETH_REG>
 800e762:	4603      	mov	r3, r0
 800e764:	b2da      	uxtb	r2, r3
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
	Y->Sn_RX_RSR[1]=SPI_ETH_REG(X, 0x27 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e772:	3318      	adds	r3, #24
 800e774:	2201      	movs	r2, #1
 800e776:	9201      	str	r2, [sp, #4]
 800e778:	9300      	str	r3, [sp, #0]
 800e77a:	2300      	movs	r3, #0
 800e77c:	2201      	movs	r2, #1
 800e77e:	2127      	movs	r1, #39	@ 0x27
 800e780:	6838      	ldr	r0, [r7, #0]
 800e782:	f7fe fd62 	bl	800d24a <SPI_ETH_REG>
 800e786:	4603      	mov	r3, r0
 800e788:	b2da      	uxtb	r2, r3
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f

	Y->Sn_RX_RD[0]=SPI_ETH_REG(X, 0x28 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e796:	3318      	adds	r3, #24
 800e798:	2201      	movs	r2, #1
 800e79a:	9201      	str	r2, [sp, #4]
 800e79c:	9300      	str	r3, [sp, #0]
 800e79e:	2300      	movs	r3, #0
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	2128      	movs	r1, #40	@ 0x28
 800e7a4:	6838      	ldr	r0, [r7, #0]
 800e7a6:	f7fe fd50 	bl	800d24a <SPI_ETH_REG>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	b2da      	uxtb	r2, r3
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	Y->Sn_RX_RD[1]=SPI_ETH_REG(X, 0x29 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e7ba:	3318      	adds	r3, #24
 800e7bc:	2201      	movs	r2, #1
 800e7be:	9201      	str	r2, [sp, #4]
 800e7c0:	9300      	str	r3, [sp, #0]
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	2201      	movs	r2, #1
 800e7c6:	2129      	movs	r1, #41	@ 0x29
 800e7c8:	6838      	ldr	r0, [r7, #0]
 800e7ca:	f7fe fd3e 	bl	800d24a <SPI_ETH_REG>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	b2da      	uxtb	r2, r3
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	Y->Sn_RX_WR[0]=SPI_ETH_REG(X, 0x2A ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e7de:	3318      	adds	r3, #24
 800e7e0:	2201      	movs	r2, #1
 800e7e2:	9201      	str	r2, [sp, #4]
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	212a      	movs	r1, #42	@ 0x2a
 800e7ec:	6838      	ldr	r0, [r7, #0]
 800e7ee:	f7fe fd2c 	bl	800d24a <SPI_ETH_REG>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	b2da      	uxtb	r2, r3
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	Y->Sn_RX_WR[1]=SPI_ETH_REG(X, 0x2B ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e802:	3318      	adds	r3, #24
 800e804:	2201      	movs	r2, #1
 800e806:	9201      	str	r2, [sp, #4]
 800e808:	9300      	str	r3, [sp, #0]
 800e80a:	2300      	movs	r3, #0
 800e80c:	2201      	movs	r2, #1
 800e80e:	212b      	movs	r1, #43	@ 0x2b
 800e810:	6838      	ldr	r0, [r7, #0]
 800e812:	f7fe fd1a 	bl	800d24a <SPI_ETH_REG>
 800e816:	4603      	mov	r3, r0
 800e818:	b2da      	uxtb	r2, r3
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

	Y->Sn_IMR=SPI_ETH_REG(X, 0x2C ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e826:	3318      	adds	r3, #24
 800e828:	2201      	movs	r2, #1
 800e82a:	9201      	str	r2, [sp, #4]
 800e82c:	9300      	str	r3, [sp, #0]
 800e82e:	2300      	movs	r3, #0
 800e830:	2201      	movs	r2, #1
 800e832:	212c      	movs	r1, #44	@ 0x2c
 800e834:	6838      	ldr	r0, [r7, #0]
 800e836:	f7fe fd08 	bl	800d24a <SPI_ETH_REG>
 800e83a:	4603      	mov	r3, r0
 800e83c:	b2da      	uxtb	r2, r3
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

	Y->Sn_FRAG[0]=SPI_ETH_REG(X, 0x2D ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e84a:	3318      	adds	r3, #24
 800e84c:	2201      	movs	r2, #1
 800e84e:	9201      	str	r2, [sp, #4]
 800e850:	9300      	str	r3, [sp, #0]
 800e852:	2300      	movs	r3, #0
 800e854:	2201      	movs	r2, #1
 800e856:	212d      	movs	r1, #45	@ 0x2d
 800e858:	6838      	ldr	r0, [r7, #0]
 800e85a:	f7fe fcf6 	bl	800d24a <SPI_ETH_REG>
 800e85e:	4603      	mov	r3, r0
 800e860:	b2da      	uxtb	r2, r3
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
	Y->Sn_FRAG[1]=SPI_ETH_REG(X, 0x2E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e86e:	3318      	adds	r3, #24
 800e870:	2201      	movs	r2, #1
 800e872:	9201      	str	r2, [sp, #4]
 800e874:	9300      	str	r3, [sp, #0]
 800e876:	2300      	movs	r3, #0
 800e878:	2201      	movs	r2, #1
 800e87a:	212e      	movs	r1, #46	@ 0x2e
 800e87c:	6838      	ldr	r0, [r7, #0]
 800e87e:	f7fe fce4 	bl	800d24a <SPI_ETH_REG>
 800e882:	4603      	mov	r3, r0
 800e884:	b2da      	uxtb	r2, r3
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56


	Y->Sn_KPALVTR=SPI_ETH_REG(X, 0x2F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f503 5382 	add.w	r3, r3, #4160	@ 0x1040
 800e892:	3318      	adds	r3, #24
 800e894:	2201      	movs	r2, #1
 800e896:	9201      	str	r2, [sp, #4]
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	2300      	movs	r3, #0
 800e89c:	2201      	movs	r2, #1
 800e89e:	212f      	movs	r1, #47	@ 0x2f
 800e8a0:	6838      	ldr	r0, [r7, #0]
 800e8a2:	f7fe fcd2 	bl	800d24a <SPI_ETH_REG>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	b2da      	uxtb	r2, r3
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
};
 800e8b0:	bf00      	nop
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
	...

0800e8bc <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b090      	sub	sp, #64	@ 0x40
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	60b9      	str	r1, [r7, #8]
 800e8c6:	607a      	str	r2, [r7, #4]
 800e8c8:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e8da:	2300      	movs	r3, #0
 800e8dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e8de:	2300      	movs	r3, #0
 800e8e0:	61fb      	str	r3, [r7, #28]
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	61bb      	str	r3, [r7, #24]
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	617b      	str	r3, [r7, #20]
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	623b      	str	r3, [r7, #32]
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800e906:	69fa      	ldr	r2, [r7, #28]
 800e908:	69bb      	ldr	r3, [r7, #24]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	f2c0 8315 	blt.w	800ef3a <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800e910:	2300      	movs	r3, #0
 800e912:	63bb      	str	r3, [r7, #56]	@ 0x38
							while(a[n]!= b[n2])
 800e914:	e00c      	b.n	800e930 <FT_String_ND+0x74>
							{
								n++;
 800e916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e918:	3301      	adds	r3, #1
 800e91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
								if(n+lngb>(lnga+1))
 800e91c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e91e:	69bb      	ldr	r3, [r7, #24]
 800e920:	441a      	add	r2, r3
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	3301      	adds	r3, #1
 800e926:	429a      	cmp	r2, r3
 800e928:	dd02      	ble.n	800e930 <FT_String_ND+0x74>
								{
									estado=0;
 800e92a:	2300      	movs	r3, #0
 800e92c:	623b      	str	r3, [r7, #32]
									break;
 800e92e:	e009      	b.n	800e944 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800e930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e932:	68fa      	ldr	r2, [r7, #12]
 800e934:	4413      	add	r3, r2
 800e936:	781a      	ldrb	r2, [r3, #0]
 800e938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e93a:	6879      	ldr	r1, [r7, #4]
 800e93c:	440b      	add	r3, r1
 800e93e:	781b      	ldrb	r3, [r3, #0]
 800e940:	429a      	cmp	r2, r3
 800e942:	d1e8      	bne.n	800e916 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800e944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e946:	3301      	adds	r3, #1
 800e948:	63fb      	str	r3, [r7, #60]	@ 0x3c

							 n2++;
 800e94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e94c:	3301      	adds	r3, #1
 800e94e:	63bb      	str	r3, [r7, #56]	@ 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800e950:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e952:	69bb      	ldr	r3, [r7, #24]
 800e954:	429a      	cmp	r2, r3
 800e956:	d108      	bne.n	800e96a <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800e958:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	1ad3      	subs	r3, r2, r3
 800e95e:	1c5a      	adds	r2, r3, #1
 800e960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e962:	601a      	str	r2, [r3, #0]
									estado=1;
 800e964:	2301      	movs	r3, #1
 800e966:	623b      	str	r3, [r7, #32]
									break;
 800e968:	e010      	b.n	800e98c <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800e96a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e96c:	69bb      	ldr	r3, [r7, #24]
 800e96e:	429a      	cmp	r2, r3
 800e970:	dd02      	ble.n	800e978 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800e972:	2300      	movs	r3, #0
 800e974:	623b      	str	r3, [r7, #32]
									 break;
 800e976:	e009      	b.n	800e98c <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800e978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e97a:	68fa      	ldr	r2, [r7, #12]
 800e97c:	4413      	add	r3, r2
 800e97e:	781a      	ldrb	r2, [r3, #0]
 800e980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e982:	6879      	ldr	r1, [r7, #4]
 800e984:	440b      	add	r3, r1
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d0db      	beq.n	800e944 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800e98c:	69bb      	ldr	r3, [r7, #24]
 800e98e:	1e5a      	subs	r2, r3, #1
 800e990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e992:	4413      	add	r3, r2
 800e994:	69fa      	ldr	r2, [r7, #28]
 800e996:	429a      	cmp	r2, r3
 800e998:	dd02      	ble.n	800e9a0 <FT_String_ND+0xe4>
 800e99a:	6a3b      	ldr	r3, [r7, #32]
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d1b7      	bne.n	800e910 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800e9a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d101      	bne.n	800e9aa <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800e9a6:	6a3b      	ldr	r3, [r7, #32]
 800e9a8:	e2c8      	b.n	800ef3c <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800e9aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e9ac:	2b01      	cmp	r3, #1
 800e9ae:	d12c      	bne.n	800ea0a <FT_String_ND+0x14e>
 800e9b0:	6a3b      	ldr	r3, [r7, #32]
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d129      	bne.n	800ea0a <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800e9b6:	e014      	b.n	800e9e2 <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800e9b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9ba:	681a      	ldr	r2, [r3, #0]
 800e9bc:	69bb      	ldr	r3, [r7, #24]
 800e9be:	441a      	add	r2, r3
 800e9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9c2:	4413      	add	r3, r2
 800e9c4:	3b01      	subs	r3, #1
 800e9c6:	68fa      	ldr	r2, [r7, #12]
 800e9c8:	441a      	add	r2, r3
 800e9ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9cc:	6819      	ldr	r1, [r3, #0]
 800e9ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9d0:	440b      	add	r3, r1
 800e9d2:	3b01      	subs	r3, #1
 800e9d4:	68f9      	ldr	r1, [r7, #12]
 800e9d6:	440b      	add	r3, r1
 800e9d8:	7812      	ldrb	r2, [r2, #0]
 800e9da:	701a      	strb	r2, [r3, #0]
										n3++;
 800e9dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9de:	3301      	adds	r3, #1
 800e9e0:	637b      	str	r3, [r7, #52]	@ 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800e9e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9e4:	681a      	ldr	r2, [r3, #0]
 800e9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9e8:	441a      	add	r2, r3
 800e9ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9ec:	4413      	add	r3, r2
 800e9ee:	69fa      	ldr	r2, [r7, #28]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	dae1      	bge.n	800e9b8 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800e9f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9fa:	4413      	add	r3, r2
 800e9fc:	1e5a      	subs	r2, r3, #1
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	601a      	str	r2, [r3, #0]
							estado=3;
 800ea02:	2303      	movs	r3, #3
 800ea04:	623b      	str	r3, [r7, #32]
							return(estado);
 800ea06:	6a3b      	ldr	r3, [r7, #32]
 800ea08:	e298      	b.n	800ef3c <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800ea0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea0c:	2b02      	cmp	r3, #2
 800ea0e:	f040 80be 	bne.w	800eb8e <FT_String_ND+0x2d2>
 800ea12:	6a3b      	ldr	r3, [r7, #32]
 800ea14:	2b01      	cmp	r3, #1
 800ea16:	f040 80ba 	bne.w	800eb8e <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ea1a:	e012      	b.n	800ea42 <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800ea1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ea1e:	69bb      	ldr	r3, [r7, #24]
 800ea20:	1ad2      	subs	r2, r2, r3
 800ea22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea24:	4413      	add	r3, r2
 800ea26:	461a      	mov	r2, r3
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	441a      	add	r2, r3
 800ea2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea2e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ea30:	440b      	add	r3, r1
 800ea32:	7812      	ldrb	r2, [r2, #0]
 800ea34:	701a      	strb	r2, [r3, #0]
								n4++;
 800ea36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea38:	3301      	adds	r3, #1
 800ea3a:	633b      	str	r3, [r7, #48]	@ 0x30
								*cn=n4;
 800ea3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea40:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ea42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	1ad2      	subs	r2, r2, r3
 800ea48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea4a:	4413      	add	r3, r2
 800ea4c:	69fa      	ldr	r2, [r7, #28]
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	dae4      	bge.n	800ea1c <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800ea52:	499d      	ldr	r1, [pc, #628]	@ (800ecc8 <FT_String_ND+0x40c>)
 800ea54:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800ea56:	f000 fd39 	bl	800f4cc <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800ea5a:	499c      	ldr	r1, [pc, #624]	@ (800eccc <FT_String_ND+0x410>)
 800ea5c:	2000      	movs	r0, #0
 800ea5e:	f000 fd35 	bl	800f4cc <strtok>
 800ea62:	4603      	mov	r3, r0
 800ea64:	4618      	mov	r0, r3
 800ea66:	f000 fb66 	bl	800f136 <atoi>
 800ea6a:	62b8      	str	r0, [r7, #40]	@ 0x28
							if(lngd>=of-1)
 800ea6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea6e:	3b01      	subs	r3, #1
 800ea70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea72:	429a      	cmp	r2, r3
 800ea74:	db02      	blt.n	800ea7c <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 800ea76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ea78:	3b01      	subs	r3, #1
 800ea7a:	62bb      	str	r3, [r7, #40]	@ 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ea7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea7e:	3306      	adds	r3, #6
 800ea80:	222c      	movs	r2, #44	@ 0x2c
 800ea82:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ea84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea86:	2b09      	cmp	r3, #9
 800ea88:	dc0d      	bgt.n	800eaa6 <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800ea8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ea8c:	3308      	adds	r3, #8
 800ea8e:	223a      	movs	r2, #58	@ 0x3a
 800ea90:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800ea92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea94:	3309      	adds	r3, #9
 800ea96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ea98:	4413      	add	r3, r2
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800ea9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaa0:	3309      	adds	r3, #9
 800eaa2:	627b      	str	r3, [r7, #36]	@ 0x24
 800eaa4:	e021      	b.n	800eaea <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 800eaa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaa8:	2b63      	cmp	r3, #99	@ 0x63
 800eaaa:	dc0d      	bgt.n	800eac8 <FT_String_ND+0x20c>
														{
															c[9]=':';
 800eaac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eaae:	3309      	adds	r3, #9
 800eab0:	223a      	movs	r2, #58	@ 0x3a
 800eab2:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800eab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eab6:	330a      	adds	r3, #10
 800eab8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eaba:	4413      	add	r3, r2
 800eabc:	2200      	movs	r2, #0
 800eabe:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800eac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eac2:	330a      	adds	r3, #10
 800eac4:	627b      	str	r3, [r7, #36]	@ 0x24
 800eac6:	e010      	b.n	800eaea <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 800eac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eace:	da0c      	bge.n	800eaea <FT_String_ND+0x22e>
														{
															c[10]=':';
 800ead0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ead2:	330a      	adds	r3, #10
 800ead4:	223a      	movs	r2, #58	@ 0x3a
 800ead6:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800ead8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eada:	330b      	adds	r3, #11
 800eadc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800eade:	4413      	add	r3, r2
 800eae0:	2200      	movs	r2, #0
 800eae2:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800eae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eae6:	330b      	adds	r3, #11
 800eae8:	627b      	str	r3, [r7, #36]	@ 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800eaea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eaec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eaee:	601a      	str	r2, [r3, #0]
							n4=0;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	633b      	str	r3, [r7, #48]	@ 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800eaf4:	e016      	b.n	800eb24 <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800eaf6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	1ad2      	subs	r2, r2, r3
 800eafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eafe:	441a      	add	r2, r3
 800eb00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb02:	4413      	add	r3, r2
 800eb04:	461a      	mov	r2, r3
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	441a      	add	r2, r3
 800eb0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eb0c:	69bb      	ldr	r3, [r7, #24]
 800eb0e:	1ac9      	subs	r1, r1, r3
 800eb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb12:	440b      	add	r3, r1
 800eb14:	4619      	mov	r1, r3
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	440b      	add	r3, r1
 800eb1a:	7812      	ldrb	r2, [r2, #0]
 800eb1c:	701a      	strb	r2, [r3, #0]
								n4++;
 800eb1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb20:	3301      	adds	r3, #1
 800eb22:	633b      	str	r3, [r7, #48]	@ 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800eb24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eb26:	69bb      	ldr	r3, [r7, #24]
 800eb28:	1ad2      	subs	r2, r2, r3
 800eb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb2c:	441a      	add	r2, r3
 800eb2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb30:	4413      	add	r3, r2
 800eb32:	69fa      	ldr	r2, [r7, #28]
 800eb34:	429a      	cmp	r2, r3
 800eb36:	dade      	bge.n	800eaf6 <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 800eb38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb3c:	441a      	add	r2, r3
 800eb3e:	69bb      	ldr	r3, [r7, #24]
 800eb40:	1ad3      	subs	r3, r2, r3
 800eb42:	1e5a      	subs	r2, r3, #1
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800eb48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eb4a:	69bb      	ldr	r3, [r7, #24]
 800eb4c:	1ad2      	subs	r2, r2, r3
 800eb4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb50:	441a      	add	r2, r3
 800eb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb54:	4413      	add	r3, r2
 800eb56:	461a      	mov	r2, r3
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	4413      	add	r3, r2
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800eb60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eb62:	69bb      	ldr	r3, [r7, #24]
 800eb64:	1ad2      	subs	r2, r2, r3
 800eb66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb68:	4413      	add	r3, r2
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	4413      	add	r3, r2
 800eb70:	2200      	movs	r2, #0
 800eb72:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800eb74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eb76:	69bb      	ldr	r3, [r7, #24]
 800eb78:	1ad2      	subs	r2, r2, r3
 800eb7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eb7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb7e:	440b      	add	r3, r1
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d102      	bne.n	800eb8a <FT_String_ND+0x2ce>
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2200      	movs	r2, #0
 800eb88:	701a      	strb	r2, [r3, #0]
							estado=3;
 800eb8a:	2303      	movs	r3, #3
 800eb8c:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800eb8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb90:	2b03      	cmp	r3, #3
 800eb92:	d146      	bne.n	800ec22 <FT_String_ND+0x366>
 800eb94:	6a3b      	ldr	r3, [r7, #32]
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	d143      	bne.n	800ec22 <FT_String_ND+0x366>
						{
						n3=0;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	637b      	str	r3, [r7, #52]	@ 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800eb9e:	e00e      	b.n	800ebbe <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 800eba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eba2:	681a      	ldr	r2, [r3, #0]
 800eba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eba6:	4413      	add	r3, r2
 800eba8:	3b01      	subs	r3, #1
 800ebaa:	68fa      	ldr	r2, [r7, #12]
 800ebac:	441a      	add	r2, r3
 800ebae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebb0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ebb2:	440b      	add	r3, r1
 800ebb4:	7812      	ldrb	r2, [r2, #0]
 800ebb6:	701a      	strb	r2, [r3, #0]
										n3++;
 800ebb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebba:	3301      	adds	r3, #1
 800ebbc:	637b      	str	r3, [r7, #52]	@ 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800ebbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ebc0:	69bb      	ldr	r3, [r7, #24]
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	dbec      	blt.n	800eba0 <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800ebca:	e014      	b.n	800ebf6 <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800ebcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ebce:	681a      	ldr	r2, [r3, #0]
 800ebd0:	69bb      	ldr	r3, [r7, #24]
 800ebd2:	441a      	add	r2, r3
 800ebd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebd6:	4413      	add	r3, r2
 800ebd8:	3b01      	subs	r3, #1
 800ebda:	68fa      	ldr	r2, [r7, #12]
 800ebdc:	441a      	add	r2, r3
 800ebde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ebe0:	6819      	ldr	r1, [r3, #0]
 800ebe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebe4:	440b      	add	r3, r1
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	68f9      	ldr	r1, [r7, #12]
 800ebea:	440b      	add	r3, r1
 800ebec:	7812      	ldrb	r2, [r2, #0]
 800ebee:	701a      	strb	r2, [r3, #0]
										n5++;
 800ebf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800ebf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	441a      	add	r2, r3
 800ebfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec00:	441a      	add	r2, r3
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	429a      	cmp	r2, r3
 800ec08:	dde0      	ble.n	800ebcc <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800ec0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ec0c:	681a      	ldr	r2, [r3, #0]
 800ec0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec10:	4413      	add	r3, r2
 800ec12:	1e5a      	subs	r2, r3, #1
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800ec18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ec1c:	601a      	str	r2, [r3, #0]
							estado=3;
 800ec1e:	2303      	movs	r3, #3
 800ec20:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800ec22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ec24:	2b04      	cmp	r3, #4
 800ec26:	f040 80bd 	bne.w	800eda4 <FT_String_ND+0x4e8>
 800ec2a:	6a3b      	ldr	r3, [r7, #32]
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	f040 80b9 	bne.w	800eda4 <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ec32:	e012      	b.n	800ec5a <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800ec34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ec36:	69bb      	ldr	r3, [r7, #24]
 800ec38:	1ad2      	subs	r2, r2, r3
 800ec3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec3c:	4413      	add	r3, r2
 800ec3e:	461a      	mov	r2, r3
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	441a      	add	r2, r3
 800ec44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec46:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ec48:	440b      	add	r3, r1
 800ec4a:	7812      	ldrb	r2, [r2, #0]
 800ec4c:	701a      	strb	r2, [r3, #0]
								n4++;
 800ec4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec50:	3301      	adds	r3, #1
 800ec52:	633b      	str	r3, [r7, #48]	@ 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 800ec54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec58:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ec5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ec5c:	69bb      	ldr	r3, [r7, #24]
 800ec5e:	1ad2      	subs	r2, r2, r3
 800ec60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec62:	4413      	add	r3, r2
 800ec64:	69fa      	ldr	r2, [r7, #28]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	dae4      	bge.n	800ec34 <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800ec6a:	4917      	ldr	r1, [pc, #92]	@ (800ecc8 <FT_String_ND+0x40c>)
 800ec6c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800ec6e:	f000 fc2d 	bl	800f4cc <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800ec72:	4916      	ldr	r1, [pc, #88]	@ (800eccc <FT_String_ND+0x410>)
 800ec74:	2000      	movs	r0, #0
 800ec76:	f000 fc29 	bl	800f4cc <strtok>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f000 fa5a 	bl	800f136 <atoi>
 800ec82:	62b8      	str	r0, [r7, #40]	@ 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 800ec84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec86:	3b01      	subs	r3, #1
 800ec88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	db02      	blt.n	800ec94 <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800ec8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec90:	3b01      	subs	r3, #1
 800ec92:	62bb      	str	r3, [r7, #40]	@ 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ec94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec96:	3306      	adds	r3, #6
 800ec98:	222c      	movs	r2, #44	@ 0x2c
 800ec9a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ec9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec9e:	2b09      	cmp	r3, #9
 800eca0:	dc07      	bgt.n	800ecb2 <FT_String_ND+0x3f6>
											{
												c[8]=':';
 800eca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eca4:	3308      	adds	r3, #8
 800eca6:	223a      	movs	r2, #58	@ 0x3a
 800eca8:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800ecaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecac:	3309      	adds	r3, #9
 800ecae:	627b      	str	r3, [r7, #36]	@ 0x24
 800ecb0:	e019      	b.n	800ece6 <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 800ecb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecb4:	2b63      	cmp	r3, #99	@ 0x63
 800ecb6:	dc0b      	bgt.n	800ecd0 <FT_String_ND+0x414>
														{
															c[9]=':';
 800ecb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ecba:	3309      	adds	r3, #9
 800ecbc:	223a      	movs	r2, #58	@ 0x3a
 800ecbe:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800ecc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecc2:	330a      	adds	r3, #10
 800ecc4:	627b      	str	r3, [r7, #36]	@ 0x24
 800ecc6:	e00e      	b.n	800ece6 <FT_String_ND+0x42a>
 800ecc8:	08010e24 	.word	0x08010e24
 800eccc:	08010e28 	.word	0x08010e28
														}
														else
														{
														if (lngd < 1000)
 800ecd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ecd6:	da06      	bge.n	800ece6 <FT_String_ND+0x42a>
														{
															c[10]=':';
 800ecd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ecda:	330a      	adds	r3, #10
 800ecdc:	223a      	movs	r2, #58	@ 0x3a
 800ecde:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800ece0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ece2:	330b      	adds	r3, #11
 800ece4:	627b      	str	r3, [r7, #36]	@ 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ece6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ece8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ecea:	601a      	str	r2, [r3, #0]
							n4=0;
 800ecec:	2300      	movs	r3, #0
 800ecee:	633b      	str	r3, [r7, #48]	@ 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ecf0:	e016      	b.n	800ed20 <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ecf2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	1ad2      	subs	r2, r2, r3
 800ecf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecfa:	441a      	add	r2, r3
 800ecfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecfe:	4413      	add	r3, r2
 800ed00:	461a      	mov	r2, r3
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	441a      	add	r2, r3
 800ed06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	1ac9      	subs	r1, r1, r3
 800ed0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed0e:	440b      	add	r3, r1
 800ed10:	4619      	mov	r1, r3
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	440b      	add	r3, r1
 800ed16:	7812      	ldrb	r2, [r2, #0]
 800ed18:	701a      	strb	r2, [r3, #0]
								n4++;
 800ed1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed1c:	3301      	adds	r3, #1
 800ed1e:	633b      	str	r3, [r7, #48]	@ 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ed20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	1ad2      	subs	r2, r2, r3
 800ed26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed28:	441a      	add	r2, r3
 800ed2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed2c:	4413      	add	r3, r2
 800ed2e:	69fa      	ldr	r2, [r7, #28]
 800ed30:	429a      	cmp	r2, r3
 800ed32:	dade      	bge.n	800ecf2 <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800ed34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ed36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed38:	441a      	add	r2, r3
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	1ad3      	subs	r3, r2, r3
 800ed3e:	1e5a      	subs	r2, r3, #1
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	601a      	str	r2, [r3, #0]
							n5=0;
 800ed44:	2300      	movs	r3, #0
 800ed46:	62fb      	str	r3, [r7, #44]	@ 0x2c
							while((lnge-lngd+n5)<*cn)
 800ed48:	e00f      	b.n	800ed6a <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ed4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed4e:	1ad2      	subs	r2, r2, r3
 800ed50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed52:	4413      	add	r3, r2
 800ed54:	461a      	mov	r2, r3
 800ed56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ed58:	441a      	add	r2, r3
 800ed5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed5c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ed5e:	440b      	add	r3, r1
 800ed60:	7812      	ldrb	r2, [r2, #0]
 800ed62:	701a      	strb	r2, [r3, #0]
								n5++;
 800ed64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed66:	3301      	adds	r3, #1
 800ed68:	62fb      	str	r3, [r7, #44]	@ 0x2c
							while((lnge-lngd+n5)<*cn)
 800ed6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed6e:	1ad2      	subs	r2, r2, r3
 800ed70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed72:	441a      	add	r2, r3
 800ed74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	dbe6      	blt.n	800ed4a <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ed7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed80:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ed82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed88:	441a      	add	r2, r3
 800ed8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed8c:	1ad2      	subs	r2, r2, r3
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	4413      	add	r3, r2
 800ed94:	69fa      	ldr	r2, [r7, #28]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d102      	bne.n	800eda0 <FT_String_ND+0x4e4>
							{
								estado=4;
 800ed9a:	2304      	movs	r3, #4
 800ed9c:	623b      	str	r3, [r7, #32]
 800ed9e:	e001      	b.n	800eda4 <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 800eda0:	2305      	movs	r3, #5
 800eda2:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800eda4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eda6:	2b05      	cmp	r3, #5
 800eda8:	f040 80c5 	bne.w	800ef36 <FT_String_ND+0x67a>
 800edac:	6a3b      	ldr	r3, [r7, #32]
 800edae:	2b01      	cmp	r3, #1
 800edb0:	f040 80c1 	bne.w	800ef36 <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800edb4:	e012      	b.n	800eddc <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800edb6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	1ad2      	subs	r2, r2, r3
 800edbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edbe:	4413      	add	r3, r2
 800edc0:	461a      	mov	r2, r3
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	441a      	add	r2, r3
 800edc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edc8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800edca:	440b      	add	r3, r1
 800edcc:	7812      	ldrb	r2, [r2, #0]
 800edce:	701a      	strb	r2, [r3, #0]
								n4++;
 800edd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edd2:	3301      	adds	r3, #1
 800edd4:	633b      	str	r3, [r7, #48]	@ 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800edd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800edd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800edda:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eddc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800edde:	69bb      	ldr	r3, [r7, #24]
 800ede0:	1ad2      	subs	r2, r2, r3
 800ede2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ede4:	4413      	add	r3, r2
 800ede6:	69fa      	ldr	r2, [r7, #28]
 800ede8:	429a      	cmp	r2, r3
 800edea:	dae4      	bge.n	800edb6 <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800edec:	4955      	ldr	r1, [pc, #340]	@ (800ef44 <FT_String_ND+0x688>)
 800edee:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800edf0:	f000 fb6c 	bl	800f4cc <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800edf4:	4954      	ldr	r1, [pc, #336]	@ (800ef48 <FT_String_ND+0x68c>)
 800edf6:	2000      	movs	r0, #0
 800edf8:	f000 fb68 	bl	800f4cc <strtok>
 800edfc:	4603      	mov	r3, r0
 800edfe:	4618      	mov	r0, r3
 800ee00:	f000 f999 	bl	800f136 <atoi>
 800ee04:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800ee06:	4950      	ldr	r1, [pc, #320]	@ (800ef48 <FT_String_ND+0x68c>)
 800ee08:	2000      	movs	r0, #0
 800ee0a:	f000 fb5f 	bl	800f4cc <strtok>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	4618      	mov	r0, r3
 800ee12:	f000 f990 	bl	800f136 <atoi>
 800ee16:	62b8      	str	r0, [r7, #40]	@ 0x28
							if(lngd>=of-1)
 800ee18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ee1a:	3b01      	subs	r3, #1
 800ee1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	db02      	blt.n	800ee28 <FT_String_ND+0x56c>
							{
								lngd=of-1;
 800ee22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ee24:	3b01      	subs	r3, #1
 800ee26:	62bb      	str	r3, [r7, #40]	@ 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ee28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee2a:	3306      	adds	r3, #6
 800ee2c:	222c      	movs	r2, #44	@ 0x2c
 800ee2e:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ee30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee32:	2b09      	cmp	r3, #9
 800ee34:	dc07      	bgt.n	800ee46 <FT_String_ND+0x58a>
											{
												c[10]=':';
 800ee36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee38:	330a      	adds	r3, #10
 800ee3a:	223a      	movs	r2, #58	@ 0x3a
 800ee3c:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800ee3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee40:	330b      	adds	r3, #11
 800ee42:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee44:	e015      	b.n	800ee72 <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 800ee46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee48:	2b63      	cmp	r3, #99	@ 0x63
 800ee4a:	dc07      	bgt.n	800ee5c <FT_String_ND+0x5a0>
														{
															c[11]=':';
 800ee4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee4e:	330b      	adds	r3, #11
 800ee50:	223a      	movs	r2, #58	@ 0x3a
 800ee52:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800ee54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee56:	330c      	adds	r3, #12
 800ee58:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee5a:	e00a      	b.n	800ee72 <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 800ee5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ee62:	da06      	bge.n	800ee72 <FT_String_ND+0x5b6>
														{
															c[12]=':';
 800ee64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ee66:	330c      	adds	r3, #12
 800ee68:	223a      	movs	r2, #58	@ 0x3a
 800ee6a:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800ee6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee6e:	330d      	adds	r3, #13
 800ee70:	627b      	str	r3, [r7, #36]	@ 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ee72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ee74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee76:	601a      	str	r2, [r3, #0]
							n4=0;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	633b      	str	r3, [r7, #48]	@ 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ee7c:	e016      	b.n	800eeac <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ee7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ee80:	69bb      	ldr	r3, [r7, #24]
 800ee82:	1ad2      	subs	r2, r2, r3
 800ee84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee86:	441a      	add	r2, r3
 800ee88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee8a:	4413      	add	r3, r2
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	441a      	add	r2, r3
 800ee92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	1ac9      	subs	r1, r1, r3
 800ee98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee9a:	440b      	add	r3, r1
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	440b      	add	r3, r1
 800eea2:	7812      	ldrb	r2, [r2, #0]
 800eea4:	701a      	strb	r2, [r3, #0]
								n4++;
 800eea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eea8:	3301      	adds	r3, #1
 800eeaa:	633b      	str	r3, [r7, #48]	@ 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800eeac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eeae:	69bb      	ldr	r3, [r7, #24]
 800eeb0:	1ad2      	subs	r2, r2, r3
 800eeb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeb4:	441a      	add	r2, r3
 800eeb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeb8:	4413      	add	r3, r2
 800eeba:	69fa      	ldr	r2, [r7, #28]
 800eebc:	429a      	cmp	r2, r3
 800eebe:	dade      	bge.n	800ee7e <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800eec0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eec4:	441a      	add	r2, r3
 800eec6:	69bb      	ldr	r3, [r7, #24]
 800eec8:	1ad3      	subs	r3, r2, r3
 800eeca:	1e5a      	subs	r2, r3, #1
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	601a      	str	r2, [r3, #0]
							n5=0;
 800eed0:	2300      	movs	r3, #0
 800eed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
							while((lnge-lngd+n5)<*cn)
 800eed4:	e00f      	b.n	800eef6 <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800eed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeda:	1ad2      	subs	r2, r2, r3
 800eedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eede:	4413      	add	r3, r2
 800eee0:	461a      	mov	r2, r3
 800eee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eee4:	441a      	add	r2, r3
 800eee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eee8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800eeea:	440b      	add	r3, r1
 800eeec:	7812      	ldrb	r2, [r2, #0]
 800eeee:	701a      	strb	r2, [r3, #0]
								n5++;
 800eef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eef2:	3301      	adds	r3, #1
 800eef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
							while((lnge-lngd+n5)<*cn)
 800eef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eefa:	1ad2      	subs	r2, r2, r3
 800eefc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eefe:	441a      	add	r2, r3
 800ef00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	429a      	cmp	r2, r3
 800ef06:	dbe6      	blt.n	800eed6 <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ef08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef0c:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ef0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef10:	681a      	ldr	r2, [r3, #0]
 800ef12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef14:	441a      	add	r2, r3
 800ef16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef18:	1ad2      	subs	r2, r2, r3
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	4413      	add	r3, r2
 800ef20:	69fa      	ldr	r2, [r7, #28]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d105      	bne.n	800ef32 <FT_String_ND+0x676>
							{
								estado=4;
 800ef26:	2304      	movs	r3, #4
 800ef28:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 800ef2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef2c:	693a      	ldr	r2, [r7, #16]
 800ef2e:	601a      	str	r2, [r3, #0]
 800ef30:	e001      	b.n	800ef36 <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 800ef32:	2305      	movs	r3, #5
 800ef34:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800ef36:	6a3b      	ldr	r3, [r7, #32]
 800ef38:	e000      	b.n	800ef3c <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 800ef3a:	2302      	movs	r3, #2
			}
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3740      	adds	r7, #64	@ 0x40
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}
 800ef44:	08010e24 	.word	0x08010e24
 800ef48:	08010e28 	.word	0x08010e28

0800ef4c <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b088      	sub	sp, #32
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800ef56:	2330      	movs	r3, #48	@ 0x30
 800ef58:	60bb      	str	r3, [r7, #8]
 800ef5a:	f107 030c 	add.w	r3, r7, #12
 800ef5e:	2200      	movs	r2, #0
 800ef60:	601a      	str	r2, [r3, #0]
 800ef62:	605a      	str	r2, [r3, #4]
 800ef64:	609a      	str	r2, [r3, #8]
 800ef66:	60da      	str	r2, [r3, #12]
int i=0;	
 800ef68:	2300      	movs	r3, #0
 800ef6a:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800ef6c:	f107 0308 	add.w	r3, r7, #8
 800ef70:	687a      	ldr	r2, [r7, #4]
 800ef72:	490f      	ldr	r1, [pc, #60]	@ (800efb0 <INTOA+0x64>)
 800ef74:	4618      	mov	r0, r3
 800ef76:	f000 fa29 	bl	800f3cc <siprintf>
		while(i<=strlen(origbuff))
 800ef7a:	e00b      	b.n	800ef94 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	1c5a      	adds	r2, r3, #1
 800ef80:	603a      	str	r2, [r7, #0]
 800ef82:	f107 0108 	add.w	r1, r7, #8
 800ef86:	69fa      	ldr	r2, [r7, #28]
 800ef88:	440a      	add	r2, r1
 800ef8a:	7812      	ldrb	r2, [r2, #0]
 800ef8c:	701a      	strb	r2, [r3, #0]
		i++;
 800ef8e:	69fb      	ldr	r3, [r7, #28]
 800ef90:	3301      	adds	r3, #1
 800ef92:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800ef94:	f107 0308 	add.w	r3, r7, #8
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7f1 f92b 	bl	80001f4 <strlen>
 800ef9e:	4602      	mov	r2, r0
 800efa0:	69fb      	ldr	r3, [r7, #28]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d2ea      	bcs.n	800ef7c <INTOA+0x30>
		}
		return(i);
 800efa6:	69fb      	ldr	r3, [r7, #28]
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3720      	adds	r7, #32
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}
 800efb0:	08010e2c 	.word	0x08010e2c

0800efb4 <FTOA>:

int FTOA( int a,  unsigned char *v1, int comma)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b08c      	sub	sp, #48	@ 0x30
 800efb8:	af00      	add	r7, sp, #0
 800efba:	60f8      	str	r0, [r7, #12]
 800efbc:	60b9      	str	r1, [r7, #8]
 800efbe:	607a      	str	r2, [r7, #4]
//char origbuff[20]="0";
char origbuff[20];
origbuff[0]='\0';
 800efc0:	2300      	movs	r3, #0
 800efc2:	753b      	strb	r3, [r7, #20]

int i=0;
 800efc4:	2300      	movs	r3, #0
 800efc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
int b=0;
 800efc8:	2300      	movs	r3, #0
 800efca:	62bb      	str	r3, [r7, #40]	@ 0x28

		sprintf(origbuff,"%i",a); 	//Paso el entreo a cadena de caracteres
 800efcc:	f107 0314 	add.w	r3, r7, #20
 800efd0:	68fa      	ldr	r2, [r7, #12]
 800efd2:	4932      	ldr	r1, [pc, #200]	@ (800f09c <FTOA+0xe8>)
 800efd4:	4618      	mov	r0, r3
 800efd6:	f000 f9f9 	bl	800f3cc <siprintf>
		b=strlen(origbuff);
 800efda:	f107 0314 	add.w	r3, r7, #20
 800efde:	4618      	mov	r0, r3
 800efe0:	f7f1 f908 	bl	80001f4 <strlen>
 800efe4:	4603      	mov	r3, r0
 800efe6:	62bb      	str	r3, [r7, #40]	@ 0x28
		if(comma<b)					//Si la posición de la coma es menor a la posición de los caracteres ejemplo int= 2 comma=0 resultado = 0,02
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efec:	429a      	cmp	r2, r3
 800efee:	da25      	bge.n	800f03c <FTOA+0x88>
		{
			while(i<=((b)+1))
 800eff0:	e01d      	b.n	800f02e <FTOA+0x7a>
			{
				if((i==(b-comma))&&(comma<(b))&&(comma!=0))
 800eff2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	1ad3      	subs	r3, r2, r3
 800eff8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800effa:	429a      	cmp	r2, r3
 800effc:	d10b      	bne.n	800f016 <FTOA+0x62>
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f002:	429a      	cmp	r2, r3
 800f004:	da07      	bge.n	800f016 <FTOA+0x62>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d004      	beq.n	800f016 <FTOA+0x62>
				{
					*v1++='.';
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	1c5a      	adds	r2, r3, #1
 800f010:	60ba      	str	r2, [r7, #8]
 800f012:	222e      	movs	r2, #46	@ 0x2e
 800f014:	701a      	strb	r2, [r3, #0]
				}
				*v1++=(unsigned char)origbuff[i];
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	1c5a      	adds	r2, r3, #1
 800f01a:	60ba      	str	r2, [r7, #8]
 800f01c:	f107 0114 	add.w	r1, r7, #20
 800f020:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f022:	440a      	add	r2, r1
 800f024:	7812      	ldrb	r2, [r2, #0]
 800f026:	701a      	strb	r2, [r3, #0]
				i++;
 800f028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f02a:	3301      	adds	r3, #1
 800f02c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while(i<=((b)+1))
 800f02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f030:	3301      	adds	r3, #1
 800f032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f034:	429a      	cmp	r2, r3
 800f036:	dddc      	ble.n	800eff2 <FTOA+0x3e>
			}
			//*v1++='\0';
			return(i);
 800f038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f03a:	e02a      	b.n	800f092 <FTOA+0xde>
		  }
		else
		{
			if(b==1)
 800f03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f03e:	2b01      	cmp	r3, #1
 800f040:	d10f      	bne.n	800f062 <FTOA+0xae>
			{
				v1[0]='0';
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	2230      	movs	r2, #48	@ 0x30
 800f046:	701a      	strb	r2, [r3, #0]
				v1[1]='.';
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	3301      	adds	r3, #1
 800f04c:	222e      	movs	r2, #46	@ 0x2e
 800f04e:	701a      	strb	r2, [r3, #0]
				v1[2]=origbuff[0];
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	3302      	adds	r3, #2
 800f054:	7d3a      	ldrb	r2, [r7, #20]
 800f056:	701a      	strb	r2, [r3, #0]
				v1[3]='\0';
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	3303      	adds	r3, #3
 800f05c:	2200      	movs	r2, #0
 800f05e:	701a      	strb	r2, [r3, #0]
 800f060:	e016      	b.n	800f090 <FTOA+0xdc>
			}
			else
			{
				if(b==0)
 800f062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f064:	2b00      	cmp	r3, #0
 800f066:	d113      	bne.n	800f090 <FTOA+0xdc>
				{
					*v1++='0';
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	1c5a      	adds	r2, r3, #1
 800f06c:	60ba      	str	r2, [r7, #8]
 800f06e:	2230      	movs	r2, #48	@ 0x30
 800f070:	701a      	strb	r2, [r3, #0]
					*v1++='.';
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	1c5a      	adds	r2, r3, #1
 800f076:	60ba      	str	r2, [r7, #8]
 800f078:	222e      	movs	r2, #46	@ 0x2e
 800f07a:	701a      	strb	r2, [r3, #0]
					*v1++='0';
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	1c5a      	adds	r2, r3, #1
 800f080:	60ba      	str	r2, [r7, #8]
 800f082:	2230      	movs	r2, #48	@ 0x30
 800f084:	701a      	strb	r2, [r3, #0]
					*v1++='\0';
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	1c5a      	adds	r2, r3, #1
 800f08a:	60ba      	str	r2, [r7, #8]
 800f08c:	2200      	movs	r2, #0
 800f08e:	701a      	strb	r2, [r3, #0]
				}
			}

		}

		return(0);
 800f090:	2300      	movs	r3, #0
}
 800f092:	4618      	mov	r0, r3
 800f094:	3730      	adds	r7, #48	@ 0x30
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}
 800f09a:	bf00      	nop
 800f09c:	08010e2c 	.word	0x08010e2c

0800f0a0 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b088      	sub	sp, #32
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	60f8      	str	r0, [r7, #12]
 800f0a8:	60b9      	str	r1, [r7, #8]
 800f0aa:	607a      	str	r2, [r7, #4]
 800f0ac:	603b      	str	r3, [r7, #0]
int x =0;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800f0b6:	f107 0310 	add.w	r3, r7, #16
 800f0ba:	617b      	str	r3, [r7, #20]
if (c==0) x=strlen(b);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d105      	bne.n	800f0ce <CopiaVector+0x2e>
 800f0c2:	68b8      	ldr	r0, [r7, #8]
 800f0c4:	f7f1 f896 	bl	80001f4 <strlen>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	61bb      	str	r3, [r7, #24]
 800f0cc:	e02e      	b.n	800f12c <CopiaVector+0x8c>
else
	{
		x=c;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	61bb      	str	r3, [r7, #24]
		if (x>1024)// OJO SOLO HTTP if (x>128) (x>512)
 800f0d2:	69bb      	ldr	r3, [r7, #24]
 800f0d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f0d8:	dd01      	ble.n	800f0de <CopiaVector+0x3e>
			{
				return(1);
 800f0da:	2301      	movs	r3, #1
 800f0dc:	e027      	b.n	800f12e <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800f0e2:	e00a      	b.n	800f0fa <CopiaVector+0x5a>
				{
					*a++=*b++;
 800f0e4:	68ba      	ldr	r2, [r7, #8]
 800f0e6:	1c53      	adds	r3, r2, #1
 800f0e8:	60bb      	str	r3, [r7, #8]
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	1c59      	adds	r1, r3, #1
 800f0ee:	60f9      	str	r1, [r7, #12]
 800f0f0:	7812      	ldrb	r2, [r2, #0]
 800f0f2:	701a      	strb	r2, [r3, #0]
					p++;
 800f0f4:	69fb      	ldr	r3, [r7, #28]
 800f0f6:	3301      	adds	r3, #1
 800f0f8:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800f0fa:	69fa      	ldr	r2, [r7, #28]
 800f0fc:	69bb      	ldr	r3, [r7, #24]
 800f0fe:	429a      	cmp	r2, r3
 800f100:	dbf0      	blt.n	800f0e4 <CopiaVector+0x44>
				}
				if (d==1)
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	2b01      	cmp	r3, #1
 800f106:	d111      	bne.n	800f12c <CopiaVector+0x8c>
				{
				  p=c;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800f10c:	e008      	b.n	800f120 <CopiaVector+0x80>
				  {
					  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	1c5a      	adds	r2, r3, #1
 800f112:	60fa      	str	r2, [r7, #12]
 800f114:	697a      	ldr	r2, [r7, #20]
 800f116:	7812      	ldrb	r2, [r2, #0]
 800f118:	701a      	strb	r2, [r3, #0]
					  p++;
 800f11a:	69fb      	ldr	r3, [r7, #28]
 800f11c:	3301      	adds	r3, #1
 800f11e:	61fb      	str	r3, [r7, #28]
				  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	429a      	cmp	r2, r3
 800f126:	daf2      	bge.n	800f10e <CopiaVector+0x6e>
				  }
				return (0);
 800f128:	2300      	movs	r3, #0
 800f12a:	e000      	b.n	800f12e <CopiaVector+0x8e>
				}
			}
	}
return (1);
 800f12c:	2301      	movs	r3, #1
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3720      	adds	r7, #32
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}

0800f136 <atoi>:
 800f136:	220a      	movs	r2, #10
 800f138:	2100      	movs	r1, #0
 800f13a:	f000 b87b 	b.w	800f234 <strtol>
	...

0800f140 <_strtol_l.isra.0>:
 800f140:	2b24      	cmp	r3, #36	@ 0x24
 800f142:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f146:	4686      	mov	lr, r0
 800f148:	4690      	mov	r8, r2
 800f14a:	d801      	bhi.n	800f150 <_strtol_l.isra.0+0x10>
 800f14c:	2b01      	cmp	r3, #1
 800f14e:	d106      	bne.n	800f15e <_strtol_l.isra.0+0x1e>
 800f150:	f000 fa5e 	bl	800f610 <__errno>
 800f154:	2316      	movs	r3, #22
 800f156:	6003      	str	r3, [r0, #0]
 800f158:	2000      	movs	r0, #0
 800f15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f15e:	4834      	ldr	r0, [pc, #208]	@ (800f230 <_strtol_l.isra.0+0xf0>)
 800f160:	460d      	mov	r5, r1
 800f162:	462a      	mov	r2, r5
 800f164:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f168:	5d06      	ldrb	r6, [r0, r4]
 800f16a:	f016 0608 	ands.w	r6, r6, #8
 800f16e:	d1f8      	bne.n	800f162 <_strtol_l.isra.0+0x22>
 800f170:	2c2d      	cmp	r4, #45	@ 0x2d
 800f172:	d110      	bne.n	800f196 <_strtol_l.isra.0+0x56>
 800f174:	782c      	ldrb	r4, [r5, #0]
 800f176:	2601      	movs	r6, #1
 800f178:	1c95      	adds	r5, r2, #2
 800f17a:	f033 0210 	bics.w	r2, r3, #16
 800f17e:	d115      	bne.n	800f1ac <_strtol_l.isra.0+0x6c>
 800f180:	2c30      	cmp	r4, #48	@ 0x30
 800f182:	d10d      	bne.n	800f1a0 <_strtol_l.isra.0+0x60>
 800f184:	782a      	ldrb	r2, [r5, #0]
 800f186:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f18a:	2a58      	cmp	r2, #88	@ 0x58
 800f18c:	d108      	bne.n	800f1a0 <_strtol_l.isra.0+0x60>
 800f18e:	786c      	ldrb	r4, [r5, #1]
 800f190:	3502      	adds	r5, #2
 800f192:	2310      	movs	r3, #16
 800f194:	e00a      	b.n	800f1ac <_strtol_l.isra.0+0x6c>
 800f196:	2c2b      	cmp	r4, #43	@ 0x2b
 800f198:	bf04      	itt	eq
 800f19a:	782c      	ldrbeq	r4, [r5, #0]
 800f19c:	1c95      	addeq	r5, r2, #2
 800f19e:	e7ec      	b.n	800f17a <_strtol_l.isra.0+0x3a>
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d1f6      	bne.n	800f192 <_strtol_l.isra.0+0x52>
 800f1a4:	2c30      	cmp	r4, #48	@ 0x30
 800f1a6:	bf14      	ite	ne
 800f1a8:	230a      	movne	r3, #10
 800f1aa:	2308      	moveq	r3, #8
 800f1ac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f1b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	fbbc f9f3 	udiv	r9, ip, r3
 800f1ba:	4610      	mov	r0, r2
 800f1bc:	fb03 ca19 	mls	sl, r3, r9, ip
 800f1c0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f1c4:	2f09      	cmp	r7, #9
 800f1c6:	d80f      	bhi.n	800f1e8 <_strtol_l.isra.0+0xa8>
 800f1c8:	463c      	mov	r4, r7
 800f1ca:	42a3      	cmp	r3, r4
 800f1cc:	dd1b      	ble.n	800f206 <_strtol_l.isra.0+0xc6>
 800f1ce:	1c57      	adds	r7, r2, #1
 800f1d0:	d007      	beq.n	800f1e2 <_strtol_l.isra.0+0xa2>
 800f1d2:	4581      	cmp	r9, r0
 800f1d4:	d314      	bcc.n	800f200 <_strtol_l.isra.0+0xc0>
 800f1d6:	d101      	bne.n	800f1dc <_strtol_l.isra.0+0x9c>
 800f1d8:	45a2      	cmp	sl, r4
 800f1da:	db11      	blt.n	800f200 <_strtol_l.isra.0+0xc0>
 800f1dc:	fb00 4003 	mla	r0, r0, r3, r4
 800f1e0:	2201      	movs	r2, #1
 800f1e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f1e6:	e7eb      	b.n	800f1c0 <_strtol_l.isra.0+0x80>
 800f1e8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f1ec:	2f19      	cmp	r7, #25
 800f1ee:	d801      	bhi.n	800f1f4 <_strtol_l.isra.0+0xb4>
 800f1f0:	3c37      	subs	r4, #55	@ 0x37
 800f1f2:	e7ea      	b.n	800f1ca <_strtol_l.isra.0+0x8a>
 800f1f4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f1f8:	2f19      	cmp	r7, #25
 800f1fa:	d804      	bhi.n	800f206 <_strtol_l.isra.0+0xc6>
 800f1fc:	3c57      	subs	r4, #87	@ 0x57
 800f1fe:	e7e4      	b.n	800f1ca <_strtol_l.isra.0+0x8a>
 800f200:	f04f 32ff 	mov.w	r2, #4294967295
 800f204:	e7ed      	b.n	800f1e2 <_strtol_l.isra.0+0xa2>
 800f206:	1c53      	adds	r3, r2, #1
 800f208:	d108      	bne.n	800f21c <_strtol_l.isra.0+0xdc>
 800f20a:	2322      	movs	r3, #34	@ 0x22
 800f20c:	f8ce 3000 	str.w	r3, [lr]
 800f210:	4660      	mov	r0, ip
 800f212:	f1b8 0f00 	cmp.w	r8, #0
 800f216:	d0a0      	beq.n	800f15a <_strtol_l.isra.0+0x1a>
 800f218:	1e69      	subs	r1, r5, #1
 800f21a:	e006      	b.n	800f22a <_strtol_l.isra.0+0xea>
 800f21c:	b106      	cbz	r6, 800f220 <_strtol_l.isra.0+0xe0>
 800f21e:	4240      	negs	r0, r0
 800f220:	f1b8 0f00 	cmp.w	r8, #0
 800f224:	d099      	beq.n	800f15a <_strtol_l.isra.0+0x1a>
 800f226:	2a00      	cmp	r2, #0
 800f228:	d1f6      	bne.n	800f218 <_strtol_l.isra.0+0xd8>
 800f22a:	f8c8 1000 	str.w	r1, [r8]
 800f22e:	e794      	b.n	800f15a <_strtol_l.isra.0+0x1a>
 800f230:	08010e49 	.word	0x08010e49

0800f234 <strtol>:
 800f234:	4613      	mov	r3, r2
 800f236:	460a      	mov	r2, r1
 800f238:	4601      	mov	r1, r0
 800f23a:	4802      	ldr	r0, [pc, #8]	@ (800f244 <strtol+0x10>)
 800f23c:	6800      	ldr	r0, [r0, #0]
 800f23e:	f7ff bf7f 	b.w	800f140 <_strtol_l.isra.0>
 800f242:	bf00      	nop
 800f244:	20000174 	.word	0x20000174

0800f248 <std>:
 800f248:	2300      	movs	r3, #0
 800f24a:	b510      	push	{r4, lr}
 800f24c:	4604      	mov	r4, r0
 800f24e:	e9c0 3300 	strd	r3, r3, [r0]
 800f252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f256:	6083      	str	r3, [r0, #8]
 800f258:	8181      	strh	r1, [r0, #12]
 800f25a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f25c:	81c2      	strh	r2, [r0, #14]
 800f25e:	6183      	str	r3, [r0, #24]
 800f260:	4619      	mov	r1, r3
 800f262:	2208      	movs	r2, #8
 800f264:	305c      	adds	r0, #92	@ 0x5c
 800f266:	f000 f916 	bl	800f496 <memset>
 800f26a:	4b0d      	ldr	r3, [pc, #52]	@ (800f2a0 <std+0x58>)
 800f26c:	6263      	str	r3, [r4, #36]	@ 0x24
 800f26e:	4b0d      	ldr	r3, [pc, #52]	@ (800f2a4 <std+0x5c>)
 800f270:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f272:	4b0d      	ldr	r3, [pc, #52]	@ (800f2a8 <std+0x60>)
 800f274:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f276:	4b0d      	ldr	r3, [pc, #52]	@ (800f2ac <std+0x64>)
 800f278:	6323      	str	r3, [r4, #48]	@ 0x30
 800f27a:	4b0d      	ldr	r3, [pc, #52]	@ (800f2b0 <std+0x68>)
 800f27c:	6224      	str	r4, [r4, #32]
 800f27e:	429c      	cmp	r4, r3
 800f280:	d006      	beq.n	800f290 <std+0x48>
 800f282:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f286:	4294      	cmp	r4, r2
 800f288:	d002      	beq.n	800f290 <std+0x48>
 800f28a:	33d0      	adds	r3, #208	@ 0xd0
 800f28c:	429c      	cmp	r4, r3
 800f28e:	d105      	bne.n	800f29c <std+0x54>
 800f290:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f298:	f000 b9e4 	b.w	800f664 <__retarget_lock_init_recursive>
 800f29c:	bd10      	pop	{r4, pc}
 800f29e:	bf00      	nop
 800f2a0:	0800f411 	.word	0x0800f411
 800f2a4:	0800f433 	.word	0x0800f433
 800f2a8:	0800f46b 	.word	0x0800f46b
 800f2ac:	0800f48f 	.word	0x0800f48f
 800f2b0:	200046c4 	.word	0x200046c4

0800f2b4 <stdio_exit_handler>:
 800f2b4:	4a02      	ldr	r2, [pc, #8]	@ (800f2c0 <stdio_exit_handler+0xc>)
 800f2b6:	4903      	ldr	r1, [pc, #12]	@ (800f2c4 <stdio_exit_handler+0x10>)
 800f2b8:	4803      	ldr	r0, [pc, #12]	@ (800f2c8 <stdio_exit_handler+0x14>)
 800f2ba:	f000 b869 	b.w	800f390 <_fwalk_sglue>
 800f2be:	bf00      	nop
 800f2c0:	20000168 	.word	0x20000168
 800f2c4:	0800ff89 	.word	0x0800ff89
 800f2c8:	20000178 	.word	0x20000178

0800f2cc <cleanup_stdio>:
 800f2cc:	6841      	ldr	r1, [r0, #4]
 800f2ce:	4b0c      	ldr	r3, [pc, #48]	@ (800f300 <cleanup_stdio+0x34>)
 800f2d0:	4299      	cmp	r1, r3
 800f2d2:	b510      	push	{r4, lr}
 800f2d4:	4604      	mov	r4, r0
 800f2d6:	d001      	beq.n	800f2dc <cleanup_stdio+0x10>
 800f2d8:	f000 fe56 	bl	800ff88 <_fflush_r>
 800f2dc:	68a1      	ldr	r1, [r4, #8]
 800f2de:	4b09      	ldr	r3, [pc, #36]	@ (800f304 <cleanup_stdio+0x38>)
 800f2e0:	4299      	cmp	r1, r3
 800f2e2:	d002      	beq.n	800f2ea <cleanup_stdio+0x1e>
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	f000 fe4f 	bl	800ff88 <_fflush_r>
 800f2ea:	68e1      	ldr	r1, [r4, #12]
 800f2ec:	4b06      	ldr	r3, [pc, #24]	@ (800f308 <cleanup_stdio+0x3c>)
 800f2ee:	4299      	cmp	r1, r3
 800f2f0:	d004      	beq.n	800f2fc <cleanup_stdio+0x30>
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2f8:	f000 be46 	b.w	800ff88 <_fflush_r>
 800f2fc:	bd10      	pop	{r4, pc}
 800f2fe:	bf00      	nop
 800f300:	200046c4 	.word	0x200046c4
 800f304:	2000472c 	.word	0x2000472c
 800f308:	20004794 	.word	0x20004794

0800f30c <global_stdio_init.part.0>:
 800f30c:	b510      	push	{r4, lr}
 800f30e:	4b0b      	ldr	r3, [pc, #44]	@ (800f33c <global_stdio_init.part.0+0x30>)
 800f310:	4c0b      	ldr	r4, [pc, #44]	@ (800f340 <global_stdio_init.part.0+0x34>)
 800f312:	4a0c      	ldr	r2, [pc, #48]	@ (800f344 <global_stdio_init.part.0+0x38>)
 800f314:	601a      	str	r2, [r3, #0]
 800f316:	4620      	mov	r0, r4
 800f318:	2200      	movs	r2, #0
 800f31a:	2104      	movs	r1, #4
 800f31c:	f7ff ff94 	bl	800f248 <std>
 800f320:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f324:	2201      	movs	r2, #1
 800f326:	2109      	movs	r1, #9
 800f328:	f7ff ff8e 	bl	800f248 <std>
 800f32c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f330:	2202      	movs	r2, #2
 800f332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f336:	2112      	movs	r1, #18
 800f338:	f7ff bf86 	b.w	800f248 <std>
 800f33c:	200047fc 	.word	0x200047fc
 800f340:	200046c4 	.word	0x200046c4
 800f344:	0800f2b5 	.word	0x0800f2b5

0800f348 <__sfp_lock_acquire>:
 800f348:	4801      	ldr	r0, [pc, #4]	@ (800f350 <__sfp_lock_acquire+0x8>)
 800f34a:	f000 b98c 	b.w	800f666 <__retarget_lock_acquire_recursive>
 800f34e:	bf00      	nop
 800f350:	20004805 	.word	0x20004805

0800f354 <__sfp_lock_release>:
 800f354:	4801      	ldr	r0, [pc, #4]	@ (800f35c <__sfp_lock_release+0x8>)
 800f356:	f000 b987 	b.w	800f668 <__retarget_lock_release_recursive>
 800f35a:	bf00      	nop
 800f35c:	20004805 	.word	0x20004805

0800f360 <__sinit>:
 800f360:	b510      	push	{r4, lr}
 800f362:	4604      	mov	r4, r0
 800f364:	f7ff fff0 	bl	800f348 <__sfp_lock_acquire>
 800f368:	6a23      	ldr	r3, [r4, #32]
 800f36a:	b11b      	cbz	r3, 800f374 <__sinit+0x14>
 800f36c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f370:	f7ff bff0 	b.w	800f354 <__sfp_lock_release>
 800f374:	4b04      	ldr	r3, [pc, #16]	@ (800f388 <__sinit+0x28>)
 800f376:	6223      	str	r3, [r4, #32]
 800f378:	4b04      	ldr	r3, [pc, #16]	@ (800f38c <__sinit+0x2c>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d1f5      	bne.n	800f36c <__sinit+0xc>
 800f380:	f7ff ffc4 	bl	800f30c <global_stdio_init.part.0>
 800f384:	e7f2      	b.n	800f36c <__sinit+0xc>
 800f386:	bf00      	nop
 800f388:	0800f2cd 	.word	0x0800f2cd
 800f38c:	200047fc 	.word	0x200047fc

0800f390 <_fwalk_sglue>:
 800f390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f394:	4607      	mov	r7, r0
 800f396:	4688      	mov	r8, r1
 800f398:	4614      	mov	r4, r2
 800f39a:	2600      	movs	r6, #0
 800f39c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f3a0:	f1b9 0901 	subs.w	r9, r9, #1
 800f3a4:	d505      	bpl.n	800f3b2 <_fwalk_sglue+0x22>
 800f3a6:	6824      	ldr	r4, [r4, #0]
 800f3a8:	2c00      	cmp	r4, #0
 800f3aa:	d1f7      	bne.n	800f39c <_fwalk_sglue+0xc>
 800f3ac:	4630      	mov	r0, r6
 800f3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3b2:	89ab      	ldrh	r3, [r5, #12]
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d907      	bls.n	800f3c8 <_fwalk_sglue+0x38>
 800f3b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f3bc:	3301      	adds	r3, #1
 800f3be:	d003      	beq.n	800f3c8 <_fwalk_sglue+0x38>
 800f3c0:	4629      	mov	r1, r5
 800f3c2:	4638      	mov	r0, r7
 800f3c4:	47c0      	blx	r8
 800f3c6:	4306      	orrs	r6, r0
 800f3c8:	3568      	adds	r5, #104	@ 0x68
 800f3ca:	e7e9      	b.n	800f3a0 <_fwalk_sglue+0x10>

0800f3cc <siprintf>:
 800f3cc:	b40e      	push	{r1, r2, r3}
 800f3ce:	b510      	push	{r4, lr}
 800f3d0:	b09d      	sub	sp, #116	@ 0x74
 800f3d2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800f3d4:	9002      	str	r0, [sp, #8]
 800f3d6:	9006      	str	r0, [sp, #24]
 800f3d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f3dc:	480a      	ldr	r0, [pc, #40]	@ (800f408 <siprintf+0x3c>)
 800f3de:	9107      	str	r1, [sp, #28]
 800f3e0:	9104      	str	r1, [sp, #16]
 800f3e2:	490a      	ldr	r1, [pc, #40]	@ (800f40c <siprintf+0x40>)
 800f3e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3e8:	9105      	str	r1, [sp, #20]
 800f3ea:	2400      	movs	r4, #0
 800f3ec:	a902      	add	r1, sp, #8
 800f3ee:	6800      	ldr	r0, [r0, #0]
 800f3f0:	9301      	str	r3, [sp, #4]
 800f3f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 800f3f4:	f000 fabc 	bl	800f970 <_svfiprintf_r>
 800f3f8:	9b02      	ldr	r3, [sp, #8]
 800f3fa:	701c      	strb	r4, [r3, #0]
 800f3fc:	b01d      	add	sp, #116	@ 0x74
 800f3fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f402:	b003      	add	sp, #12
 800f404:	4770      	bx	lr
 800f406:	bf00      	nop
 800f408:	20000174 	.word	0x20000174
 800f40c:	ffff0208 	.word	0xffff0208

0800f410 <__sread>:
 800f410:	b510      	push	{r4, lr}
 800f412:	460c      	mov	r4, r1
 800f414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f418:	f000 f8d6 	bl	800f5c8 <_read_r>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	bfab      	itete	ge
 800f420:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f422:	89a3      	ldrhlt	r3, [r4, #12]
 800f424:	181b      	addge	r3, r3, r0
 800f426:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f42a:	bfac      	ite	ge
 800f42c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f42e:	81a3      	strhlt	r3, [r4, #12]
 800f430:	bd10      	pop	{r4, pc}

0800f432 <__swrite>:
 800f432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f436:	461f      	mov	r7, r3
 800f438:	898b      	ldrh	r3, [r1, #12]
 800f43a:	05db      	lsls	r3, r3, #23
 800f43c:	4605      	mov	r5, r0
 800f43e:	460c      	mov	r4, r1
 800f440:	4616      	mov	r6, r2
 800f442:	d505      	bpl.n	800f450 <__swrite+0x1e>
 800f444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f448:	2302      	movs	r3, #2
 800f44a:	2200      	movs	r2, #0
 800f44c:	f000 f8aa 	bl	800f5a4 <_lseek_r>
 800f450:	89a3      	ldrh	r3, [r4, #12]
 800f452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f456:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f45a:	81a3      	strh	r3, [r4, #12]
 800f45c:	4632      	mov	r2, r6
 800f45e:	463b      	mov	r3, r7
 800f460:	4628      	mov	r0, r5
 800f462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f466:	f000 b8c1 	b.w	800f5ec <_write_r>

0800f46a <__sseek>:
 800f46a:	b510      	push	{r4, lr}
 800f46c:	460c      	mov	r4, r1
 800f46e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f472:	f000 f897 	bl	800f5a4 <_lseek_r>
 800f476:	1c43      	adds	r3, r0, #1
 800f478:	89a3      	ldrh	r3, [r4, #12]
 800f47a:	bf15      	itete	ne
 800f47c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f47e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f482:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f486:	81a3      	strheq	r3, [r4, #12]
 800f488:	bf18      	it	ne
 800f48a:	81a3      	strhne	r3, [r4, #12]
 800f48c:	bd10      	pop	{r4, pc}

0800f48e <__sclose>:
 800f48e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f492:	f000 b877 	b.w	800f584 <_close_r>

0800f496 <memset>:
 800f496:	4402      	add	r2, r0
 800f498:	4603      	mov	r3, r0
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d100      	bne.n	800f4a0 <memset+0xa>
 800f49e:	4770      	bx	lr
 800f4a0:	f803 1b01 	strb.w	r1, [r3], #1
 800f4a4:	e7f9      	b.n	800f49a <memset+0x4>

0800f4a6 <strncat>:
 800f4a6:	b530      	push	{r4, r5, lr}
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	7825      	ldrb	r5, [r4, #0]
 800f4ac:	4623      	mov	r3, r4
 800f4ae:	3401      	adds	r4, #1
 800f4b0:	2d00      	cmp	r5, #0
 800f4b2:	d1fa      	bne.n	800f4aa <strncat+0x4>
 800f4b4:	3a01      	subs	r2, #1
 800f4b6:	d304      	bcc.n	800f4c2 <strncat+0x1c>
 800f4b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4bc:	f803 4b01 	strb.w	r4, [r3], #1
 800f4c0:	b904      	cbnz	r4, 800f4c4 <strncat+0x1e>
 800f4c2:	bd30      	pop	{r4, r5, pc}
 800f4c4:	2a00      	cmp	r2, #0
 800f4c6:	d1f5      	bne.n	800f4b4 <strncat+0xe>
 800f4c8:	701a      	strb	r2, [r3, #0]
 800f4ca:	e7f3      	b.n	800f4b4 <strncat+0xe>

0800f4cc <strtok>:
 800f4cc:	4b16      	ldr	r3, [pc, #88]	@ (800f528 <strtok+0x5c>)
 800f4ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4d2:	681f      	ldr	r7, [r3, #0]
 800f4d4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800f4d6:	4605      	mov	r5, r0
 800f4d8:	460e      	mov	r6, r1
 800f4da:	b9ec      	cbnz	r4, 800f518 <strtok+0x4c>
 800f4dc:	2050      	movs	r0, #80	@ 0x50
 800f4de:	f000 f935 	bl	800f74c <malloc>
 800f4e2:	4602      	mov	r2, r0
 800f4e4:	6478      	str	r0, [r7, #68]	@ 0x44
 800f4e6:	b920      	cbnz	r0, 800f4f2 <strtok+0x26>
 800f4e8:	4b10      	ldr	r3, [pc, #64]	@ (800f52c <strtok+0x60>)
 800f4ea:	4811      	ldr	r0, [pc, #68]	@ (800f530 <strtok+0x64>)
 800f4ec:	215b      	movs	r1, #91	@ 0x5b
 800f4ee:	f000 f8c5 	bl	800f67c <__assert_func>
 800f4f2:	e9c0 4400 	strd	r4, r4, [r0]
 800f4f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f4fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f4fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800f502:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800f506:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800f50a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800f50e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800f512:	6184      	str	r4, [r0, #24]
 800f514:	7704      	strb	r4, [r0, #28]
 800f516:	6244      	str	r4, [r0, #36]	@ 0x24
 800f518:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f51a:	4631      	mov	r1, r6
 800f51c:	4628      	mov	r0, r5
 800f51e:	2301      	movs	r3, #1
 800f520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f524:	f000 b806 	b.w	800f534 <__strtok_r>
 800f528:	20000174 	.word	0x20000174
 800f52c:	08010f49 	.word	0x08010f49
 800f530:	08010f60 	.word	0x08010f60

0800f534 <__strtok_r>:
 800f534:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f536:	4604      	mov	r4, r0
 800f538:	b908      	cbnz	r0, 800f53e <__strtok_r+0xa>
 800f53a:	6814      	ldr	r4, [r2, #0]
 800f53c:	b144      	cbz	r4, 800f550 <__strtok_r+0x1c>
 800f53e:	4620      	mov	r0, r4
 800f540:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f544:	460f      	mov	r7, r1
 800f546:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f54a:	b91e      	cbnz	r6, 800f554 <__strtok_r+0x20>
 800f54c:	b965      	cbnz	r5, 800f568 <__strtok_r+0x34>
 800f54e:	6015      	str	r5, [r2, #0]
 800f550:	2000      	movs	r0, #0
 800f552:	e005      	b.n	800f560 <__strtok_r+0x2c>
 800f554:	42b5      	cmp	r5, r6
 800f556:	d1f6      	bne.n	800f546 <__strtok_r+0x12>
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d1f0      	bne.n	800f53e <__strtok_r+0xa>
 800f55c:	6014      	str	r4, [r2, #0]
 800f55e:	7003      	strb	r3, [r0, #0]
 800f560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f562:	461c      	mov	r4, r3
 800f564:	e00c      	b.n	800f580 <__strtok_r+0x4c>
 800f566:	b91d      	cbnz	r5, 800f570 <__strtok_r+0x3c>
 800f568:	4627      	mov	r7, r4
 800f56a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f56e:	460e      	mov	r6, r1
 800f570:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f574:	42ab      	cmp	r3, r5
 800f576:	d1f6      	bne.n	800f566 <__strtok_r+0x32>
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d0f2      	beq.n	800f562 <__strtok_r+0x2e>
 800f57c:	2300      	movs	r3, #0
 800f57e:	703b      	strb	r3, [r7, #0]
 800f580:	6014      	str	r4, [r2, #0]
 800f582:	e7ed      	b.n	800f560 <__strtok_r+0x2c>

0800f584 <_close_r>:
 800f584:	b538      	push	{r3, r4, r5, lr}
 800f586:	4d06      	ldr	r5, [pc, #24]	@ (800f5a0 <_close_r+0x1c>)
 800f588:	2300      	movs	r3, #0
 800f58a:	4604      	mov	r4, r0
 800f58c:	4608      	mov	r0, r1
 800f58e:	602b      	str	r3, [r5, #0]
 800f590:	f7f3 f9ce 	bl	8002930 <_close>
 800f594:	1c43      	adds	r3, r0, #1
 800f596:	d102      	bne.n	800f59e <_close_r+0x1a>
 800f598:	682b      	ldr	r3, [r5, #0]
 800f59a:	b103      	cbz	r3, 800f59e <_close_r+0x1a>
 800f59c:	6023      	str	r3, [r4, #0]
 800f59e:	bd38      	pop	{r3, r4, r5, pc}
 800f5a0:	20004800 	.word	0x20004800

0800f5a4 <_lseek_r>:
 800f5a4:	b538      	push	{r3, r4, r5, lr}
 800f5a6:	4d07      	ldr	r5, [pc, #28]	@ (800f5c4 <_lseek_r+0x20>)
 800f5a8:	4604      	mov	r4, r0
 800f5aa:	4608      	mov	r0, r1
 800f5ac:	4611      	mov	r1, r2
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	602a      	str	r2, [r5, #0]
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	f7f3 f9e3 	bl	800297e <_lseek>
 800f5b8:	1c43      	adds	r3, r0, #1
 800f5ba:	d102      	bne.n	800f5c2 <_lseek_r+0x1e>
 800f5bc:	682b      	ldr	r3, [r5, #0]
 800f5be:	b103      	cbz	r3, 800f5c2 <_lseek_r+0x1e>
 800f5c0:	6023      	str	r3, [r4, #0]
 800f5c2:	bd38      	pop	{r3, r4, r5, pc}
 800f5c4:	20004800 	.word	0x20004800

0800f5c8 <_read_r>:
 800f5c8:	b538      	push	{r3, r4, r5, lr}
 800f5ca:	4d07      	ldr	r5, [pc, #28]	@ (800f5e8 <_read_r+0x20>)
 800f5cc:	4604      	mov	r4, r0
 800f5ce:	4608      	mov	r0, r1
 800f5d0:	4611      	mov	r1, r2
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	602a      	str	r2, [r5, #0]
 800f5d6:	461a      	mov	r2, r3
 800f5d8:	f7f3 f971 	bl	80028be <_read>
 800f5dc:	1c43      	adds	r3, r0, #1
 800f5de:	d102      	bne.n	800f5e6 <_read_r+0x1e>
 800f5e0:	682b      	ldr	r3, [r5, #0]
 800f5e2:	b103      	cbz	r3, 800f5e6 <_read_r+0x1e>
 800f5e4:	6023      	str	r3, [r4, #0]
 800f5e6:	bd38      	pop	{r3, r4, r5, pc}
 800f5e8:	20004800 	.word	0x20004800

0800f5ec <_write_r>:
 800f5ec:	b538      	push	{r3, r4, r5, lr}
 800f5ee:	4d07      	ldr	r5, [pc, #28]	@ (800f60c <_write_r+0x20>)
 800f5f0:	4604      	mov	r4, r0
 800f5f2:	4608      	mov	r0, r1
 800f5f4:	4611      	mov	r1, r2
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	602a      	str	r2, [r5, #0]
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	f7f3 f97c 	bl	80028f8 <_write>
 800f600:	1c43      	adds	r3, r0, #1
 800f602:	d102      	bne.n	800f60a <_write_r+0x1e>
 800f604:	682b      	ldr	r3, [r5, #0]
 800f606:	b103      	cbz	r3, 800f60a <_write_r+0x1e>
 800f608:	6023      	str	r3, [r4, #0]
 800f60a:	bd38      	pop	{r3, r4, r5, pc}
 800f60c:	20004800 	.word	0x20004800

0800f610 <__errno>:
 800f610:	4b01      	ldr	r3, [pc, #4]	@ (800f618 <__errno+0x8>)
 800f612:	6818      	ldr	r0, [r3, #0]
 800f614:	4770      	bx	lr
 800f616:	bf00      	nop
 800f618:	20000174 	.word	0x20000174

0800f61c <__libc_init_array>:
 800f61c:	b570      	push	{r4, r5, r6, lr}
 800f61e:	4d0d      	ldr	r5, [pc, #52]	@ (800f654 <__libc_init_array+0x38>)
 800f620:	4c0d      	ldr	r4, [pc, #52]	@ (800f658 <__libc_init_array+0x3c>)
 800f622:	1b64      	subs	r4, r4, r5
 800f624:	10a4      	asrs	r4, r4, #2
 800f626:	2600      	movs	r6, #0
 800f628:	42a6      	cmp	r6, r4
 800f62a:	d109      	bne.n	800f640 <__libc_init_array+0x24>
 800f62c:	4d0b      	ldr	r5, [pc, #44]	@ (800f65c <__libc_init_array+0x40>)
 800f62e:	4c0c      	ldr	r4, [pc, #48]	@ (800f660 <__libc_init_array+0x44>)
 800f630:	f000 fff6 	bl	8010620 <_init>
 800f634:	1b64      	subs	r4, r4, r5
 800f636:	10a4      	asrs	r4, r4, #2
 800f638:	2600      	movs	r6, #0
 800f63a:	42a6      	cmp	r6, r4
 800f63c:	d105      	bne.n	800f64a <__libc_init_array+0x2e>
 800f63e:	bd70      	pop	{r4, r5, r6, pc}
 800f640:	f855 3b04 	ldr.w	r3, [r5], #4
 800f644:	4798      	blx	r3
 800f646:	3601      	adds	r6, #1
 800f648:	e7ee      	b.n	800f628 <__libc_init_array+0xc>
 800f64a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f64e:	4798      	blx	r3
 800f650:	3601      	adds	r6, #1
 800f652:	e7f2      	b.n	800f63a <__libc_init_array+0x1e>
 800f654:	08011034 	.word	0x08011034
 800f658:	08011034 	.word	0x08011034
 800f65c:	08011034 	.word	0x08011034
 800f660:	08011038 	.word	0x08011038

0800f664 <__retarget_lock_init_recursive>:
 800f664:	4770      	bx	lr

0800f666 <__retarget_lock_acquire_recursive>:
 800f666:	4770      	bx	lr

0800f668 <__retarget_lock_release_recursive>:
 800f668:	4770      	bx	lr

0800f66a <strcpy>:
 800f66a:	4603      	mov	r3, r0
 800f66c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f670:	f803 2b01 	strb.w	r2, [r3], #1
 800f674:	2a00      	cmp	r2, #0
 800f676:	d1f9      	bne.n	800f66c <strcpy+0x2>
 800f678:	4770      	bx	lr
	...

0800f67c <__assert_func>:
 800f67c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f67e:	4614      	mov	r4, r2
 800f680:	461a      	mov	r2, r3
 800f682:	4b09      	ldr	r3, [pc, #36]	@ (800f6a8 <__assert_func+0x2c>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	4605      	mov	r5, r0
 800f688:	68d8      	ldr	r0, [r3, #12]
 800f68a:	b14c      	cbz	r4, 800f6a0 <__assert_func+0x24>
 800f68c:	4b07      	ldr	r3, [pc, #28]	@ (800f6ac <__assert_func+0x30>)
 800f68e:	9100      	str	r1, [sp, #0]
 800f690:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f694:	4906      	ldr	r1, [pc, #24]	@ (800f6b0 <__assert_func+0x34>)
 800f696:	462b      	mov	r3, r5
 800f698:	f000 fc9e 	bl	800ffd8 <fiprintf>
 800f69c:	f000 fce6 	bl	801006c <abort>
 800f6a0:	4b04      	ldr	r3, [pc, #16]	@ (800f6b4 <__assert_func+0x38>)
 800f6a2:	461c      	mov	r4, r3
 800f6a4:	e7f3      	b.n	800f68e <__assert_func+0x12>
 800f6a6:	bf00      	nop
 800f6a8:	20000174 	.word	0x20000174
 800f6ac:	08010fba 	.word	0x08010fba
 800f6b0:	08010fc7 	.word	0x08010fc7
 800f6b4:	08010ff5 	.word	0x08010ff5

0800f6b8 <_free_r>:
 800f6b8:	b538      	push	{r3, r4, r5, lr}
 800f6ba:	4605      	mov	r5, r0
 800f6bc:	2900      	cmp	r1, #0
 800f6be:	d041      	beq.n	800f744 <_free_r+0x8c>
 800f6c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6c4:	1f0c      	subs	r4, r1, #4
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	bfb8      	it	lt
 800f6ca:	18e4      	addlt	r4, r4, r3
 800f6cc:	f000 f8e8 	bl	800f8a0 <__malloc_lock>
 800f6d0:	4a1d      	ldr	r2, [pc, #116]	@ (800f748 <_free_r+0x90>)
 800f6d2:	6813      	ldr	r3, [r2, #0]
 800f6d4:	b933      	cbnz	r3, 800f6e4 <_free_r+0x2c>
 800f6d6:	6063      	str	r3, [r4, #4]
 800f6d8:	6014      	str	r4, [r2, #0]
 800f6da:	4628      	mov	r0, r5
 800f6dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6e0:	f000 b8e4 	b.w	800f8ac <__malloc_unlock>
 800f6e4:	42a3      	cmp	r3, r4
 800f6e6:	d908      	bls.n	800f6fa <_free_r+0x42>
 800f6e8:	6820      	ldr	r0, [r4, #0]
 800f6ea:	1821      	adds	r1, r4, r0
 800f6ec:	428b      	cmp	r3, r1
 800f6ee:	bf01      	itttt	eq
 800f6f0:	6819      	ldreq	r1, [r3, #0]
 800f6f2:	685b      	ldreq	r3, [r3, #4]
 800f6f4:	1809      	addeq	r1, r1, r0
 800f6f6:	6021      	streq	r1, [r4, #0]
 800f6f8:	e7ed      	b.n	800f6d6 <_free_r+0x1e>
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	b10b      	cbz	r3, 800f704 <_free_r+0x4c>
 800f700:	42a3      	cmp	r3, r4
 800f702:	d9fa      	bls.n	800f6fa <_free_r+0x42>
 800f704:	6811      	ldr	r1, [r2, #0]
 800f706:	1850      	adds	r0, r2, r1
 800f708:	42a0      	cmp	r0, r4
 800f70a:	d10b      	bne.n	800f724 <_free_r+0x6c>
 800f70c:	6820      	ldr	r0, [r4, #0]
 800f70e:	4401      	add	r1, r0
 800f710:	1850      	adds	r0, r2, r1
 800f712:	4283      	cmp	r3, r0
 800f714:	6011      	str	r1, [r2, #0]
 800f716:	d1e0      	bne.n	800f6da <_free_r+0x22>
 800f718:	6818      	ldr	r0, [r3, #0]
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	6053      	str	r3, [r2, #4]
 800f71e:	4408      	add	r0, r1
 800f720:	6010      	str	r0, [r2, #0]
 800f722:	e7da      	b.n	800f6da <_free_r+0x22>
 800f724:	d902      	bls.n	800f72c <_free_r+0x74>
 800f726:	230c      	movs	r3, #12
 800f728:	602b      	str	r3, [r5, #0]
 800f72a:	e7d6      	b.n	800f6da <_free_r+0x22>
 800f72c:	6820      	ldr	r0, [r4, #0]
 800f72e:	1821      	adds	r1, r4, r0
 800f730:	428b      	cmp	r3, r1
 800f732:	bf04      	itt	eq
 800f734:	6819      	ldreq	r1, [r3, #0]
 800f736:	685b      	ldreq	r3, [r3, #4]
 800f738:	6063      	str	r3, [r4, #4]
 800f73a:	bf04      	itt	eq
 800f73c:	1809      	addeq	r1, r1, r0
 800f73e:	6021      	streq	r1, [r4, #0]
 800f740:	6054      	str	r4, [r2, #4]
 800f742:	e7ca      	b.n	800f6da <_free_r+0x22>
 800f744:	bd38      	pop	{r3, r4, r5, pc}
 800f746:	bf00      	nop
 800f748:	2000480c 	.word	0x2000480c

0800f74c <malloc>:
 800f74c:	4b02      	ldr	r3, [pc, #8]	@ (800f758 <malloc+0xc>)
 800f74e:	4601      	mov	r1, r0
 800f750:	6818      	ldr	r0, [r3, #0]
 800f752:	f000 b825 	b.w	800f7a0 <_malloc_r>
 800f756:	bf00      	nop
 800f758:	20000174 	.word	0x20000174

0800f75c <sbrk_aligned>:
 800f75c:	b570      	push	{r4, r5, r6, lr}
 800f75e:	4e0f      	ldr	r6, [pc, #60]	@ (800f79c <sbrk_aligned+0x40>)
 800f760:	460c      	mov	r4, r1
 800f762:	6831      	ldr	r1, [r6, #0]
 800f764:	4605      	mov	r5, r0
 800f766:	b911      	cbnz	r1, 800f76e <sbrk_aligned+0x12>
 800f768:	f000 fc62 	bl	8010030 <_sbrk_r>
 800f76c:	6030      	str	r0, [r6, #0]
 800f76e:	4621      	mov	r1, r4
 800f770:	4628      	mov	r0, r5
 800f772:	f000 fc5d 	bl	8010030 <_sbrk_r>
 800f776:	1c43      	adds	r3, r0, #1
 800f778:	d103      	bne.n	800f782 <sbrk_aligned+0x26>
 800f77a:	f04f 34ff 	mov.w	r4, #4294967295
 800f77e:	4620      	mov	r0, r4
 800f780:	bd70      	pop	{r4, r5, r6, pc}
 800f782:	1cc4      	adds	r4, r0, #3
 800f784:	f024 0403 	bic.w	r4, r4, #3
 800f788:	42a0      	cmp	r0, r4
 800f78a:	d0f8      	beq.n	800f77e <sbrk_aligned+0x22>
 800f78c:	1a21      	subs	r1, r4, r0
 800f78e:	4628      	mov	r0, r5
 800f790:	f000 fc4e 	bl	8010030 <_sbrk_r>
 800f794:	3001      	adds	r0, #1
 800f796:	d1f2      	bne.n	800f77e <sbrk_aligned+0x22>
 800f798:	e7ef      	b.n	800f77a <sbrk_aligned+0x1e>
 800f79a:	bf00      	nop
 800f79c:	20004808 	.word	0x20004808

0800f7a0 <_malloc_r>:
 800f7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7a4:	1ccd      	adds	r5, r1, #3
 800f7a6:	f025 0503 	bic.w	r5, r5, #3
 800f7aa:	3508      	adds	r5, #8
 800f7ac:	2d0c      	cmp	r5, #12
 800f7ae:	bf38      	it	cc
 800f7b0:	250c      	movcc	r5, #12
 800f7b2:	2d00      	cmp	r5, #0
 800f7b4:	4606      	mov	r6, r0
 800f7b6:	db01      	blt.n	800f7bc <_malloc_r+0x1c>
 800f7b8:	42a9      	cmp	r1, r5
 800f7ba:	d904      	bls.n	800f7c6 <_malloc_r+0x26>
 800f7bc:	230c      	movs	r3, #12
 800f7be:	6033      	str	r3, [r6, #0]
 800f7c0:	2000      	movs	r0, #0
 800f7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f89c <_malloc_r+0xfc>
 800f7ca:	f000 f869 	bl	800f8a0 <__malloc_lock>
 800f7ce:	f8d8 3000 	ldr.w	r3, [r8]
 800f7d2:	461c      	mov	r4, r3
 800f7d4:	bb44      	cbnz	r4, 800f828 <_malloc_r+0x88>
 800f7d6:	4629      	mov	r1, r5
 800f7d8:	4630      	mov	r0, r6
 800f7da:	f7ff ffbf 	bl	800f75c <sbrk_aligned>
 800f7de:	1c43      	adds	r3, r0, #1
 800f7e0:	4604      	mov	r4, r0
 800f7e2:	d158      	bne.n	800f896 <_malloc_r+0xf6>
 800f7e4:	f8d8 4000 	ldr.w	r4, [r8]
 800f7e8:	4627      	mov	r7, r4
 800f7ea:	2f00      	cmp	r7, #0
 800f7ec:	d143      	bne.n	800f876 <_malloc_r+0xd6>
 800f7ee:	2c00      	cmp	r4, #0
 800f7f0:	d04b      	beq.n	800f88a <_malloc_r+0xea>
 800f7f2:	6823      	ldr	r3, [r4, #0]
 800f7f4:	4639      	mov	r1, r7
 800f7f6:	4630      	mov	r0, r6
 800f7f8:	eb04 0903 	add.w	r9, r4, r3
 800f7fc:	f000 fc18 	bl	8010030 <_sbrk_r>
 800f800:	4581      	cmp	r9, r0
 800f802:	d142      	bne.n	800f88a <_malloc_r+0xea>
 800f804:	6821      	ldr	r1, [r4, #0]
 800f806:	1a6d      	subs	r5, r5, r1
 800f808:	4629      	mov	r1, r5
 800f80a:	4630      	mov	r0, r6
 800f80c:	f7ff ffa6 	bl	800f75c <sbrk_aligned>
 800f810:	3001      	adds	r0, #1
 800f812:	d03a      	beq.n	800f88a <_malloc_r+0xea>
 800f814:	6823      	ldr	r3, [r4, #0]
 800f816:	442b      	add	r3, r5
 800f818:	6023      	str	r3, [r4, #0]
 800f81a:	f8d8 3000 	ldr.w	r3, [r8]
 800f81e:	685a      	ldr	r2, [r3, #4]
 800f820:	bb62      	cbnz	r2, 800f87c <_malloc_r+0xdc>
 800f822:	f8c8 7000 	str.w	r7, [r8]
 800f826:	e00f      	b.n	800f848 <_malloc_r+0xa8>
 800f828:	6822      	ldr	r2, [r4, #0]
 800f82a:	1b52      	subs	r2, r2, r5
 800f82c:	d420      	bmi.n	800f870 <_malloc_r+0xd0>
 800f82e:	2a0b      	cmp	r2, #11
 800f830:	d917      	bls.n	800f862 <_malloc_r+0xc2>
 800f832:	1961      	adds	r1, r4, r5
 800f834:	42a3      	cmp	r3, r4
 800f836:	6025      	str	r5, [r4, #0]
 800f838:	bf18      	it	ne
 800f83a:	6059      	strne	r1, [r3, #4]
 800f83c:	6863      	ldr	r3, [r4, #4]
 800f83e:	bf08      	it	eq
 800f840:	f8c8 1000 	streq.w	r1, [r8]
 800f844:	5162      	str	r2, [r4, r5]
 800f846:	604b      	str	r3, [r1, #4]
 800f848:	4630      	mov	r0, r6
 800f84a:	f000 f82f 	bl	800f8ac <__malloc_unlock>
 800f84e:	f104 000b 	add.w	r0, r4, #11
 800f852:	1d23      	adds	r3, r4, #4
 800f854:	f020 0007 	bic.w	r0, r0, #7
 800f858:	1ac2      	subs	r2, r0, r3
 800f85a:	bf1c      	itt	ne
 800f85c:	1a1b      	subne	r3, r3, r0
 800f85e:	50a3      	strne	r3, [r4, r2]
 800f860:	e7af      	b.n	800f7c2 <_malloc_r+0x22>
 800f862:	6862      	ldr	r2, [r4, #4]
 800f864:	42a3      	cmp	r3, r4
 800f866:	bf0c      	ite	eq
 800f868:	f8c8 2000 	streq.w	r2, [r8]
 800f86c:	605a      	strne	r2, [r3, #4]
 800f86e:	e7eb      	b.n	800f848 <_malloc_r+0xa8>
 800f870:	4623      	mov	r3, r4
 800f872:	6864      	ldr	r4, [r4, #4]
 800f874:	e7ae      	b.n	800f7d4 <_malloc_r+0x34>
 800f876:	463c      	mov	r4, r7
 800f878:	687f      	ldr	r7, [r7, #4]
 800f87a:	e7b6      	b.n	800f7ea <_malloc_r+0x4a>
 800f87c:	461a      	mov	r2, r3
 800f87e:	685b      	ldr	r3, [r3, #4]
 800f880:	42a3      	cmp	r3, r4
 800f882:	d1fb      	bne.n	800f87c <_malloc_r+0xdc>
 800f884:	2300      	movs	r3, #0
 800f886:	6053      	str	r3, [r2, #4]
 800f888:	e7de      	b.n	800f848 <_malloc_r+0xa8>
 800f88a:	230c      	movs	r3, #12
 800f88c:	6033      	str	r3, [r6, #0]
 800f88e:	4630      	mov	r0, r6
 800f890:	f000 f80c 	bl	800f8ac <__malloc_unlock>
 800f894:	e794      	b.n	800f7c0 <_malloc_r+0x20>
 800f896:	6005      	str	r5, [r0, #0]
 800f898:	e7d6      	b.n	800f848 <_malloc_r+0xa8>
 800f89a:	bf00      	nop
 800f89c:	2000480c 	.word	0x2000480c

0800f8a0 <__malloc_lock>:
 800f8a0:	4801      	ldr	r0, [pc, #4]	@ (800f8a8 <__malloc_lock+0x8>)
 800f8a2:	f7ff bee0 	b.w	800f666 <__retarget_lock_acquire_recursive>
 800f8a6:	bf00      	nop
 800f8a8:	20004804 	.word	0x20004804

0800f8ac <__malloc_unlock>:
 800f8ac:	4801      	ldr	r0, [pc, #4]	@ (800f8b4 <__malloc_unlock+0x8>)
 800f8ae:	f7ff bedb 	b.w	800f668 <__retarget_lock_release_recursive>
 800f8b2:	bf00      	nop
 800f8b4:	20004804 	.word	0x20004804

0800f8b8 <__ssputs_r>:
 800f8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8bc:	688e      	ldr	r6, [r1, #8]
 800f8be:	461f      	mov	r7, r3
 800f8c0:	42be      	cmp	r6, r7
 800f8c2:	680b      	ldr	r3, [r1, #0]
 800f8c4:	4682      	mov	sl, r0
 800f8c6:	460c      	mov	r4, r1
 800f8c8:	4690      	mov	r8, r2
 800f8ca:	d82d      	bhi.n	800f928 <__ssputs_r+0x70>
 800f8cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f8d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f8d4:	d026      	beq.n	800f924 <__ssputs_r+0x6c>
 800f8d6:	6965      	ldr	r5, [r4, #20]
 800f8d8:	6909      	ldr	r1, [r1, #16]
 800f8da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f8de:	eba3 0901 	sub.w	r9, r3, r1
 800f8e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f8e6:	1c7b      	adds	r3, r7, #1
 800f8e8:	444b      	add	r3, r9
 800f8ea:	106d      	asrs	r5, r5, #1
 800f8ec:	429d      	cmp	r5, r3
 800f8ee:	bf38      	it	cc
 800f8f0:	461d      	movcc	r5, r3
 800f8f2:	0553      	lsls	r3, r2, #21
 800f8f4:	d527      	bpl.n	800f946 <__ssputs_r+0x8e>
 800f8f6:	4629      	mov	r1, r5
 800f8f8:	f7ff ff52 	bl	800f7a0 <_malloc_r>
 800f8fc:	4606      	mov	r6, r0
 800f8fe:	b360      	cbz	r0, 800f95a <__ssputs_r+0xa2>
 800f900:	6921      	ldr	r1, [r4, #16]
 800f902:	464a      	mov	r2, r9
 800f904:	f000 fba4 	bl	8010050 <memcpy>
 800f908:	89a3      	ldrh	r3, [r4, #12]
 800f90a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f90e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f912:	81a3      	strh	r3, [r4, #12]
 800f914:	6126      	str	r6, [r4, #16]
 800f916:	6165      	str	r5, [r4, #20]
 800f918:	444e      	add	r6, r9
 800f91a:	eba5 0509 	sub.w	r5, r5, r9
 800f91e:	6026      	str	r6, [r4, #0]
 800f920:	60a5      	str	r5, [r4, #8]
 800f922:	463e      	mov	r6, r7
 800f924:	42be      	cmp	r6, r7
 800f926:	d900      	bls.n	800f92a <__ssputs_r+0x72>
 800f928:	463e      	mov	r6, r7
 800f92a:	6820      	ldr	r0, [r4, #0]
 800f92c:	4632      	mov	r2, r6
 800f92e:	4641      	mov	r1, r8
 800f930:	f000 fb64 	bl	800fffc <memmove>
 800f934:	68a3      	ldr	r3, [r4, #8]
 800f936:	1b9b      	subs	r3, r3, r6
 800f938:	60a3      	str	r3, [r4, #8]
 800f93a:	6823      	ldr	r3, [r4, #0]
 800f93c:	4433      	add	r3, r6
 800f93e:	6023      	str	r3, [r4, #0]
 800f940:	2000      	movs	r0, #0
 800f942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f946:	462a      	mov	r2, r5
 800f948:	f000 fb97 	bl	801007a <_realloc_r>
 800f94c:	4606      	mov	r6, r0
 800f94e:	2800      	cmp	r0, #0
 800f950:	d1e0      	bne.n	800f914 <__ssputs_r+0x5c>
 800f952:	6921      	ldr	r1, [r4, #16]
 800f954:	4650      	mov	r0, sl
 800f956:	f7ff feaf 	bl	800f6b8 <_free_r>
 800f95a:	230c      	movs	r3, #12
 800f95c:	f8ca 3000 	str.w	r3, [sl]
 800f960:	89a3      	ldrh	r3, [r4, #12]
 800f962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f966:	81a3      	strh	r3, [r4, #12]
 800f968:	f04f 30ff 	mov.w	r0, #4294967295
 800f96c:	e7e9      	b.n	800f942 <__ssputs_r+0x8a>
	...

0800f970 <_svfiprintf_r>:
 800f970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f974:	4698      	mov	r8, r3
 800f976:	898b      	ldrh	r3, [r1, #12]
 800f978:	061b      	lsls	r3, r3, #24
 800f97a:	b09d      	sub	sp, #116	@ 0x74
 800f97c:	4607      	mov	r7, r0
 800f97e:	460d      	mov	r5, r1
 800f980:	4614      	mov	r4, r2
 800f982:	d510      	bpl.n	800f9a6 <_svfiprintf_r+0x36>
 800f984:	690b      	ldr	r3, [r1, #16]
 800f986:	b973      	cbnz	r3, 800f9a6 <_svfiprintf_r+0x36>
 800f988:	2140      	movs	r1, #64	@ 0x40
 800f98a:	f7ff ff09 	bl	800f7a0 <_malloc_r>
 800f98e:	6028      	str	r0, [r5, #0]
 800f990:	6128      	str	r0, [r5, #16]
 800f992:	b930      	cbnz	r0, 800f9a2 <_svfiprintf_r+0x32>
 800f994:	230c      	movs	r3, #12
 800f996:	603b      	str	r3, [r7, #0]
 800f998:	f04f 30ff 	mov.w	r0, #4294967295
 800f99c:	b01d      	add	sp, #116	@ 0x74
 800f99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9a2:	2340      	movs	r3, #64	@ 0x40
 800f9a4:	616b      	str	r3, [r5, #20]
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9aa:	2320      	movs	r3, #32
 800f9ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f9b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9b4:	2330      	movs	r3, #48	@ 0x30
 800f9b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fb54 <_svfiprintf_r+0x1e4>
 800f9ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f9be:	f04f 0901 	mov.w	r9, #1
 800f9c2:	4623      	mov	r3, r4
 800f9c4:	469a      	mov	sl, r3
 800f9c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9ca:	b10a      	cbz	r2, 800f9d0 <_svfiprintf_r+0x60>
 800f9cc:	2a25      	cmp	r2, #37	@ 0x25
 800f9ce:	d1f9      	bne.n	800f9c4 <_svfiprintf_r+0x54>
 800f9d0:	ebba 0b04 	subs.w	fp, sl, r4
 800f9d4:	d00b      	beq.n	800f9ee <_svfiprintf_r+0x7e>
 800f9d6:	465b      	mov	r3, fp
 800f9d8:	4622      	mov	r2, r4
 800f9da:	4629      	mov	r1, r5
 800f9dc:	4638      	mov	r0, r7
 800f9de:	f7ff ff6b 	bl	800f8b8 <__ssputs_r>
 800f9e2:	3001      	adds	r0, #1
 800f9e4:	f000 80a7 	beq.w	800fb36 <_svfiprintf_r+0x1c6>
 800f9e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f9ea:	445a      	add	r2, fp
 800f9ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800f9ee:	f89a 3000 	ldrb.w	r3, [sl]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	f000 809f 	beq.w	800fb36 <_svfiprintf_r+0x1c6>
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800f9fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa02:	f10a 0a01 	add.w	sl, sl, #1
 800fa06:	9304      	str	r3, [sp, #16]
 800fa08:	9307      	str	r3, [sp, #28]
 800fa0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa0e:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa10:	4654      	mov	r4, sl
 800fa12:	2205      	movs	r2, #5
 800fa14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa18:	484e      	ldr	r0, [pc, #312]	@ (800fb54 <_svfiprintf_r+0x1e4>)
 800fa1a:	f7f0 fbf9 	bl	8000210 <memchr>
 800fa1e:	9a04      	ldr	r2, [sp, #16]
 800fa20:	b9d8      	cbnz	r0, 800fa5a <_svfiprintf_r+0xea>
 800fa22:	06d0      	lsls	r0, r2, #27
 800fa24:	bf44      	itt	mi
 800fa26:	2320      	movmi	r3, #32
 800fa28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa2c:	0711      	lsls	r1, r2, #28
 800fa2e:	bf44      	itt	mi
 800fa30:	232b      	movmi	r3, #43	@ 0x2b
 800fa32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa36:	f89a 3000 	ldrb.w	r3, [sl]
 800fa3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa3c:	d015      	beq.n	800fa6a <_svfiprintf_r+0xfa>
 800fa3e:	9a07      	ldr	r2, [sp, #28]
 800fa40:	4654      	mov	r4, sl
 800fa42:	2000      	movs	r0, #0
 800fa44:	f04f 0c0a 	mov.w	ip, #10
 800fa48:	4621      	mov	r1, r4
 800fa4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa4e:	3b30      	subs	r3, #48	@ 0x30
 800fa50:	2b09      	cmp	r3, #9
 800fa52:	d94b      	bls.n	800faec <_svfiprintf_r+0x17c>
 800fa54:	b1b0      	cbz	r0, 800fa84 <_svfiprintf_r+0x114>
 800fa56:	9207      	str	r2, [sp, #28]
 800fa58:	e014      	b.n	800fa84 <_svfiprintf_r+0x114>
 800fa5a:	eba0 0308 	sub.w	r3, r0, r8
 800fa5e:	fa09 f303 	lsl.w	r3, r9, r3
 800fa62:	4313      	orrs	r3, r2
 800fa64:	9304      	str	r3, [sp, #16]
 800fa66:	46a2      	mov	sl, r4
 800fa68:	e7d2      	b.n	800fa10 <_svfiprintf_r+0xa0>
 800fa6a:	9b03      	ldr	r3, [sp, #12]
 800fa6c:	1d19      	adds	r1, r3, #4
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	9103      	str	r1, [sp, #12]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	bfbb      	ittet	lt
 800fa76:	425b      	neglt	r3, r3
 800fa78:	f042 0202 	orrlt.w	r2, r2, #2
 800fa7c:	9307      	strge	r3, [sp, #28]
 800fa7e:	9307      	strlt	r3, [sp, #28]
 800fa80:	bfb8      	it	lt
 800fa82:	9204      	strlt	r2, [sp, #16]
 800fa84:	7823      	ldrb	r3, [r4, #0]
 800fa86:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa88:	d10a      	bne.n	800faa0 <_svfiprintf_r+0x130>
 800fa8a:	7863      	ldrb	r3, [r4, #1]
 800fa8c:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa8e:	d132      	bne.n	800faf6 <_svfiprintf_r+0x186>
 800fa90:	9b03      	ldr	r3, [sp, #12]
 800fa92:	1d1a      	adds	r2, r3, #4
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	9203      	str	r2, [sp, #12]
 800fa98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fa9c:	3402      	adds	r4, #2
 800fa9e:	9305      	str	r3, [sp, #20]
 800faa0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fb64 <_svfiprintf_r+0x1f4>
 800faa4:	7821      	ldrb	r1, [r4, #0]
 800faa6:	2203      	movs	r2, #3
 800faa8:	4650      	mov	r0, sl
 800faaa:	f7f0 fbb1 	bl	8000210 <memchr>
 800faae:	b138      	cbz	r0, 800fac0 <_svfiprintf_r+0x150>
 800fab0:	9b04      	ldr	r3, [sp, #16]
 800fab2:	eba0 000a 	sub.w	r0, r0, sl
 800fab6:	2240      	movs	r2, #64	@ 0x40
 800fab8:	4082      	lsls	r2, r0
 800faba:	4313      	orrs	r3, r2
 800fabc:	3401      	adds	r4, #1
 800fabe:	9304      	str	r3, [sp, #16]
 800fac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fac4:	4824      	ldr	r0, [pc, #144]	@ (800fb58 <_svfiprintf_r+0x1e8>)
 800fac6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800faca:	2206      	movs	r2, #6
 800facc:	f7f0 fba0 	bl	8000210 <memchr>
 800fad0:	2800      	cmp	r0, #0
 800fad2:	d036      	beq.n	800fb42 <_svfiprintf_r+0x1d2>
 800fad4:	4b21      	ldr	r3, [pc, #132]	@ (800fb5c <_svfiprintf_r+0x1ec>)
 800fad6:	bb1b      	cbnz	r3, 800fb20 <_svfiprintf_r+0x1b0>
 800fad8:	9b03      	ldr	r3, [sp, #12]
 800fada:	3307      	adds	r3, #7
 800fadc:	f023 0307 	bic.w	r3, r3, #7
 800fae0:	3308      	adds	r3, #8
 800fae2:	9303      	str	r3, [sp, #12]
 800fae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fae6:	4433      	add	r3, r6
 800fae8:	9309      	str	r3, [sp, #36]	@ 0x24
 800faea:	e76a      	b.n	800f9c2 <_svfiprintf_r+0x52>
 800faec:	fb0c 3202 	mla	r2, ip, r2, r3
 800faf0:	460c      	mov	r4, r1
 800faf2:	2001      	movs	r0, #1
 800faf4:	e7a8      	b.n	800fa48 <_svfiprintf_r+0xd8>
 800faf6:	2300      	movs	r3, #0
 800faf8:	3401      	adds	r4, #1
 800fafa:	9305      	str	r3, [sp, #20]
 800fafc:	4619      	mov	r1, r3
 800fafe:	f04f 0c0a 	mov.w	ip, #10
 800fb02:	4620      	mov	r0, r4
 800fb04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb08:	3a30      	subs	r2, #48	@ 0x30
 800fb0a:	2a09      	cmp	r2, #9
 800fb0c:	d903      	bls.n	800fb16 <_svfiprintf_r+0x1a6>
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d0c6      	beq.n	800faa0 <_svfiprintf_r+0x130>
 800fb12:	9105      	str	r1, [sp, #20]
 800fb14:	e7c4      	b.n	800faa0 <_svfiprintf_r+0x130>
 800fb16:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb1a:	4604      	mov	r4, r0
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	e7f0      	b.n	800fb02 <_svfiprintf_r+0x192>
 800fb20:	ab03      	add	r3, sp, #12
 800fb22:	9300      	str	r3, [sp, #0]
 800fb24:	462a      	mov	r2, r5
 800fb26:	4b0e      	ldr	r3, [pc, #56]	@ (800fb60 <_svfiprintf_r+0x1f0>)
 800fb28:	a904      	add	r1, sp, #16
 800fb2a:	4638      	mov	r0, r7
 800fb2c:	f3af 8000 	nop.w
 800fb30:	1c42      	adds	r2, r0, #1
 800fb32:	4606      	mov	r6, r0
 800fb34:	d1d6      	bne.n	800fae4 <_svfiprintf_r+0x174>
 800fb36:	89ab      	ldrh	r3, [r5, #12]
 800fb38:	065b      	lsls	r3, r3, #25
 800fb3a:	f53f af2d 	bmi.w	800f998 <_svfiprintf_r+0x28>
 800fb3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb40:	e72c      	b.n	800f99c <_svfiprintf_r+0x2c>
 800fb42:	ab03      	add	r3, sp, #12
 800fb44:	9300      	str	r3, [sp, #0]
 800fb46:	462a      	mov	r2, r5
 800fb48:	4b05      	ldr	r3, [pc, #20]	@ (800fb60 <_svfiprintf_r+0x1f0>)
 800fb4a:	a904      	add	r1, sp, #16
 800fb4c:	4638      	mov	r0, r7
 800fb4e:	f000 f879 	bl	800fc44 <_printf_i>
 800fb52:	e7ed      	b.n	800fb30 <_svfiprintf_r+0x1c0>
 800fb54:	08010ff6 	.word	0x08010ff6
 800fb58:	08011000 	.word	0x08011000
 800fb5c:	00000000 	.word	0x00000000
 800fb60:	0800f8b9 	.word	0x0800f8b9
 800fb64:	08010ffc 	.word	0x08010ffc

0800fb68 <_printf_common>:
 800fb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb6c:	4616      	mov	r6, r2
 800fb6e:	4698      	mov	r8, r3
 800fb70:	688a      	ldr	r2, [r1, #8]
 800fb72:	690b      	ldr	r3, [r1, #16]
 800fb74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	bfb8      	it	lt
 800fb7c:	4613      	movlt	r3, r2
 800fb7e:	6033      	str	r3, [r6, #0]
 800fb80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fb84:	4607      	mov	r7, r0
 800fb86:	460c      	mov	r4, r1
 800fb88:	b10a      	cbz	r2, 800fb8e <_printf_common+0x26>
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	6033      	str	r3, [r6, #0]
 800fb8e:	6823      	ldr	r3, [r4, #0]
 800fb90:	0699      	lsls	r1, r3, #26
 800fb92:	bf42      	ittt	mi
 800fb94:	6833      	ldrmi	r3, [r6, #0]
 800fb96:	3302      	addmi	r3, #2
 800fb98:	6033      	strmi	r3, [r6, #0]
 800fb9a:	6825      	ldr	r5, [r4, #0]
 800fb9c:	f015 0506 	ands.w	r5, r5, #6
 800fba0:	d106      	bne.n	800fbb0 <_printf_common+0x48>
 800fba2:	f104 0a19 	add.w	sl, r4, #25
 800fba6:	68e3      	ldr	r3, [r4, #12]
 800fba8:	6832      	ldr	r2, [r6, #0]
 800fbaa:	1a9b      	subs	r3, r3, r2
 800fbac:	42ab      	cmp	r3, r5
 800fbae:	dc26      	bgt.n	800fbfe <_printf_common+0x96>
 800fbb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fbb4:	6822      	ldr	r2, [r4, #0]
 800fbb6:	3b00      	subs	r3, #0
 800fbb8:	bf18      	it	ne
 800fbba:	2301      	movne	r3, #1
 800fbbc:	0692      	lsls	r2, r2, #26
 800fbbe:	d42b      	bmi.n	800fc18 <_printf_common+0xb0>
 800fbc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fbc4:	4641      	mov	r1, r8
 800fbc6:	4638      	mov	r0, r7
 800fbc8:	47c8      	blx	r9
 800fbca:	3001      	adds	r0, #1
 800fbcc:	d01e      	beq.n	800fc0c <_printf_common+0xa4>
 800fbce:	6823      	ldr	r3, [r4, #0]
 800fbd0:	6922      	ldr	r2, [r4, #16]
 800fbd2:	f003 0306 	and.w	r3, r3, #6
 800fbd6:	2b04      	cmp	r3, #4
 800fbd8:	bf02      	ittt	eq
 800fbda:	68e5      	ldreq	r5, [r4, #12]
 800fbdc:	6833      	ldreq	r3, [r6, #0]
 800fbde:	1aed      	subeq	r5, r5, r3
 800fbe0:	68a3      	ldr	r3, [r4, #8]
 800fbe2:	bf0c      	ite	eq
 800fbe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbe8:	2500      	movne	r5, #0
 800fbea:	4293      	cmp	r3, r2
 800fbec:	bfc4      	itt	gt
 800fbee:	1a9b      	subgt	r3, r3, r2
 800fbf0:	18ed      	addgt	r5, r5, r3
 800fbf2:	2600      	movs	r6, #0
 800fbf4:	341a      	adds	r4, #26
 800fbf6:	42b5      	cmp	r5, r6
 800fbf8:	d11a      	bne.n	800fc30 <_printf_common+0xc8>
 800fbfa:	2000      	movs	r0, #0
 800fbfc:	e008      	b.n	800fc10 <_printf_common+0xa8>
 800fbfe:	2301      	movs	r3, #1
 800fc00:	4652      	mov	r2, sl
 800fc02:	4641      	mov	r1, r8
 800fc04:	4638      	mov	r0, r7
 800fc06:	47c8      	blx	r9
 800fc08:	3001      	adds	r0, #1
 800fc0a:	d103      	bne.n	800fc14 <_printf_common+0xac>
 800fc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc14:	3501      	adds	r5, #1
 800fc16:	e7c6      	b.n	800fba6 <_printf_common+0x3e>
 800fc18:	18e1      	adds	r1, r4, r3
 800fc1a:	1c5a      	adds	r2, r3, #1
 800fc1c:	2030      	movs	r0, #48	@ 0x30
 800fc1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fc22:	4422      	add	r2, r4
 800fc24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fc28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fc2c:	3302      	adds	r3, #2
 800fc2e:	e7c7      	b.n	800fbc0 <_printf_common+0x58>
 800fc30:	2301      	movs	r3, #1
 800fc32:	4622      	mov	r2, r4
 800fc34:	4641      	mov	r1, r8
 800fc36:	4638      	mov	r0, r7
 800fc38:	47c8      	blx	r9
 800fc3a:	3001      	adds	r0, #1
 800fc3c:	d0e6      	beq.n	800fc0c <_printf_common+0xa4>
 800fc3e:	3601      	adds	r6, #1
 800fc40:	e7d9      	b.n	800fbf6 <_printf_common+0x8e>
	...

0800fc44 <_printf_i>:
 800fc44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc48:	7e0f      	ldrb	r7, [r1, #24]
 800fc4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fc4c:	2f78      	cmp	r7, #120	@ 0x78
 800fc4e:	4691      	mov	r9, r2
 800fc50:	4680      	mov	r8, r0
 800fc52:	460c      	mov	r4, r1
 800fc54:	469a      	mov	sl, r3
 800fc56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fc5a:	d807      	bhi.n	800fc6c <_printf_i+0x28>
 800fc5c:	2f62      	cmp	r7, #98	@ 0x62
 800fc5e:	d80a      	bhi.n	800fc76 <_printf_i+0x32>
 800fc60:	2f00      	cmp	r7, #0
 800fc62:	f000 80d1 	beq.w	800fe08 <_printf_i+0x1c4>
 800fc66:	2f58      	cmp	r7, #88	@ 0x58
 800fc68:	f000 80b8 	beq.w	800fddc <_printf_i+0x198>
 800fc6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fc70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fc74:	e03a      	b.n	800fcec <_printf_i+0xa8>
 800fc76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fc7a:	2b15      	cmp	r3, #21
 800fc7c:	d8f6      	bhi.n	800fc6c <_printf_i+0x28>
 800fc7e:	a101      	add	r1, pc, #4	@ (adr r1, 800fc84 <_printf_i+0x40>)
 800fc80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc84:	0800fcdd 	.word	0x0800fcdd
 800fc88:	0800fcf1 	.word	0x0800fcf1
 800fc8c:	0800fc6d 	.word	0x0800fc6d
 800fc90:	0800fc6d 	.word	0x0800fc6d
 800fc94:	0800fc6d 	.word	0x0800fc6d
 800fc98:	0800fc6d 	.word	0x0800fc6d
 800fc9c:	0800fcf1 	.word	0x0800fcf1
 800fca0:	0800fc6d 	.word	0x0800fc6d
 800fca4:	0800fc6d 	.word	0x0800fc6d
 800fca8:	0800fc6d 	.word	0x0800fc6d
 800fcac:	0800fc6d 	.word	0x0800fc6d
 800fcb0:	0800fdef 	.word	0x0800fdef
 800fcb4:	0800fd1b 	.word	0x0800fd1b
 800fcb8:	0800fda9 	.word	0x0800fda9
 800fcbc:	0800fc6d 	.word	0x0800fc6d
 800fcc0:	0800fc6d 	.word	0x0800fc6d
 800fcc4:	0800fe11 	.word	0x0800fe11
 800fcc8:	0800fc6d 	.word	0x0800fc6d
 800fccc:	0800fd1b 	.word	0x0800fd1b
 800fcd0:	0800fc6d 	.word	0x0800fc6d
 800fcd4:	0800fc6d 	.word	0x0800fc6d
 800fcd8:	0800fdb1 	.word	0x0800fdb1
 800fcdc:	6833      	ldr	r3, [r6, #0]
 800fcde:	1d1a      	adds	r2, r3, #4
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	6032      	str	r2, [r6, #0]
 800fce4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fce8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fcec:	2301      	movs	r3, #1
 800fcee:	e09c      	b.n	800fe2a <_printf_i+0x1e6>
 800fcf0:	6833      	ldr	r3, [r6, #0]
 800fcf2:	6820      	ldr	r0, [r4, #0]
 800fcf4:	1d19      	adds	r1, r3, #4
 800fcf6:	6031      	str	r1, [r6, #0]
 800fcf8:	0606      	lsls	r6, r0, #24
 800fcfa:	d501      	bpl.n	800fd00 <_printf_i+0xbc>
 800fcfc:	681d      	ldr	r5, [r3, #0]
 800fcfe:	e003      	b.n	800fd08 <_printf_i+0xc4>
 800fd00:	0645      	lsls	r5, r0, #25
 800fd02:	d5fb      	bpl.n	800fcfc <_printf_i+0xb8>
 800fd04:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fd08:	2d00      	cmp	r5, #0
 800fd0a:	da03      	bge.n	800fd14 <_printf_i+0xd0>
 800fd0c:	232d      	movs	r3, #45	@ 0x2d
 800fd0e:	426d      	negs	r5, r5
 800fd10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd14:	4858      	ldr	r0, [pc, #352]	@ (800fe78 <_printf_i+0x234>)
 800fd16:	230a      	movs	r3, #10
 800fd18:	e011      	b.n	800fd3e <_printf_i+0xfa>
 800fd1a:	6821      	ldr	r1, [r4, #0]
 800fd1c:	6833      	ldr	r3, [r6, #0]
 800fd1e:	0608      	lsls	r0, r1, #24
 800fd20:	f853 5b04 	ldr.w	r5, [r3], #4
 800fd24:	d402      	bmi.n	800fd2c <_printf_i+0xe8>
 800fd26:	0649      	lsls	r1, r1, #25
 800fd28:	bf48      	it	mi
 800fd2a:	b2ad      	uxthmi	r5, r5
 800fd2c:	2f6f      	cmp	r7, #111	@ 0x6f
 800fd2e:	4852      	ldr	r0, [pc, #328]	@ (800fe78 <_printf_i+0x234>)
 800fd30:	6033      	str	r3, [r6, #0]
 800fd32:	bf14      	ite	ne
 800fd34:	230a      	movne	r3, #10
 800fd36:	2308      	moveq	r3, #8
 800fd38:	2100      	movs	r1, #0
 800fd3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fd3e:	6866      	ldr	r6, [r4, #4]
 800fd40:	60a6      	str	r6, [r4, #8]
 800fd42:	2e00      	cmp	r6, #0
 800fd44:	db05      	blt.n	800fd52 <_printf_i+0x10e>
 800fd46:	6821      	ldr	r1, [r4, #0]
 800fd48:	432e      	orrs	r6, r5
 800fd4a:	f021 0104 	bic.w	r1, r1, #4
 800fd4e:	6021      	str	r1, [r4, #0]
 800fd50:	d04b      	beq.n	800fdea <_printf_i+0x1a6>
 800fd52:	4616      	mov	r6, r2
 800fd54:	fbb5 f1f3 	udiv	r1, r5, r3
 800fd58:	fb03 5711 	mls	r7, r3, r1, r5
 800fd5c:	5dc7      	ldrb	r7, [r0, r7]
 800fd5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fd62:	462f      	mov	r7, r5
 800fd64:	42bb      	cmp	r3, r7
 800fd66:	460d      	mov	r5, r1
 800fd68:	d9f4      	bls.n	800fd54 <_printf_i+0x110>
 800fd6a:	2b08      	cmp	r3, #8
 800fd6c:	d10b      	bne.n	800fd86 <_printf_i+0x142>
 800fd6e:	6823      	ldr	r3, [r4, #0]
 800fd70:	07df      	lsls	r7, r3, #31
 800fd72:	d508      	bpl.n	800fd86 <_printf_i+0x142>
 800fd74:	6923      	ldr	r3, [r4, #16]
 800fd76:	6861      	ldr	r1, [r4, #4]
 800fd78:	4299      	cmp	r1, r3
 800fd7a:	bfde      	ittt	le
 800fd7c:	2330      	movle	r3, #48	@ 0x30
 800fd7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fd82:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fd86:	1b92      	subs	r2, r2, r6
 800fd88:	6122      	str	r2, [r4, #16]
 800fd8a:	f8cd a000 	str.w	sl, [sp]
 800fd8e:	464b      	mov	r3, r9
 800fd90:	aa03      	add	r2, sp, #12
 800fd92:	4621      	mov	r1, r4
 800fd94:	4640      	mov	r0, r8
 800fd96:	f7ff fee7 	bl	800fb68 <_printf_common>
 800fd9a:	3001      	adds	r0, #1
 800fd9c:	d14a      	bne.n	800fe34 <_printf_i+0x1f0>
 800fd9e:	f04f 30ff 	mov.w	r0, #4294967295
 800fda2:	b004      	add	sp, #16
 800fda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fda8:	6823      	ldr	r3, [r4, #0]
 800fdaa:	f043 0320 	orr.w	r3, r3, #32
 800fdae:	6023      	str	r3, [r4, #0]
 800fdb0:	4832      	ldr	r0, [pc, #200]	@ (800fe7c <_printf_i+0x238>)
 800fdb2:	2778      	movs	r7, #120	@ 0x78
 800fdb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fdb8:	6823      	ldr	r3, [r4, #0]
 800fdba:	6831      	ldr	r1, [r6, #0]
 800fdbc:	061f      	lsls	r7, r3, #24
 800fdbe:	f851 5b04 	ldr.w	r5, [r1], #4
 800fdc2:	d402      	bmi.n	800fdca <_printf_i+0x186>
 800fdc4:	065f      	lsls	r7, r3, #25
 800fdc6:	bf48      	it	mi
 800fdc8:	b2ad      	uxthmi	r5, r5
 800fdca:	6031      	str	r1, [r6, #0]
 800fdcc:	07d9      	lsls	r1, r3, #31
 800fdce:	bf44      	itt	mi
 800fdd0:	f043 0320 	orrmi.w	r3, r3, #32
 800fdd4:	6023      	strmi	r3, [r4, #0]
 800fdd6:	b11d      	cbz	r5, 800fde0 <_printf_i+0x19c>
 800fdd8:	2310      	movs	r3, #16
 800fdda:	e7ad      	b.n	800fd38 <_printf_i+0xf4>
 800fddc:	4826      	ldr	r0, [pc, #152]	@ (800fe78 <_printf_i+0x234>)
 800fdde:	e7e9      	b.n	800fdb4 <_printf_i+0x170>
 800fde0:	6823      	ldr	r3, [r4, #0]
 800fde2:	f023 0320 	bic.w	r3, r3, #32
 800fde6:	6023      	str	r3, [r4, #0]
 800fde8:	e7f6      	b.n	800fdd8 <_printf_i+0x194>
 800fdea:	4616      	mov	r6, r2
 800fdec:	e7bd      	b.n	800fd6a <_printf_i+0x126>
 800fdee:	6833      	ldr	r3, [r6, #0]
 800fdf0:	6825      	ldr	r5, [r4, #0]
 800fdf2:	6961      	ldr	r1, [r4, #20]
 800fdf4:	1d18      	adds	r0, r3, #4
 800fdf6:	6030      	str	r0, [r6, #0]
 800fdf8:	062e      	lsls	r6, r5, #24
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	d501      	bpl.n	800fe02 <_printf_i+0x1be>
 800fdfe:	6019      	str	r1, [r3, #0]
 800fe00:	e002      	b.n	800fe08 <_printf_i+0x1c4>
 800fe02:	0668      	lsls	r0, r5, #25
 800fe04:	d5fb      	bpl.n	800fdfe <_printf_i+0x1ba>
 800fe06:	8019      	strh	r1, [r3, #0]
 800fe08:	2300      	movs	r3, #0
 800fe0a:	6123      	str	r3, [r4, #16]
 800fe0c:	4616      	mov	r6, r2
 800fe0e:	e7bc      	b.n	800fd8a <_printf_i+0x146>
 800fe10:	6833      	ldr	r3, [r6, #0]
 800fe12:	1d1a      	adds	r2, r3, #4
 800fe14:	6032      	str	r2, [r6, #0]
 800fe16:	681e      	ldr	r6, [r3, #0]
 800fe18:	6862      	ldr	r2, [r4, #4]
 800fe1a:	2100      	movs	r1, #0
 800fe1c:	4630      	mov	r0, r6
 800fe1e:	f7f0 f9f7 	bl	8000210 <memchr>
 800fe22:	b108      	cbz	r0, 800fe28 <_printf_i+0x1e4>
 800fe24:	1b80      	subs	r0, r0, r6
 800fe26:	6060      	str	r0, [r4, #4]
 800fe28:	6863      	ldr	r3, [r4, #4]
 800fe2a:	6123      	str	r3, [r4, #16]
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe32:	e7aa      	b.n	800fd8a <_printf_i+0x146>
 800fe34:	6923      	ldr	r3, [r4, #16]
 800fe36:	4632      	mov	r2, r6
 800fe38:	4649      	mov	r1, r9
 800fe3a:	4640      	mov	r0, r8
 800fe3c:	47d0      	blx	sl
 800fe3e:	3001      	adds	r0, #1
 800fe40:	d0ad      	beq.n	800fd9e <_printf_i+0x15a>
 800fe42:	6823      	ldr	r3, [r4, #0]
 800fe44:	079b      	lsls	r3, r3, #30
 800fe46:	d413      	bmi.n	800fe70 <_printf_i+0x22c>
 800fe48:	68e0      	ldr	r0, [r4, #12]
 800fe4a:	9b03      	ldr	r3, [sp, #12]
 800fe4c:	4298      	cmp	r0, r3
 800fe4e:	bfb8      	it	lt
 800fe50:	4618      	movlt	r0, r3
 800fe52:	e7a6      	b.n	800fda2 <_printf_i+0x15e>
 800fe54:	2301      	movs	r3, #1
 800fe56:	4632      	mov	r2, r6
 800fe58:	4649      	mov	r1, r9
 800fe5a:	4640      	mov	r0, r8
 800fe5c:	47d0      	blx	sl
 800fe5e:	3001      	adds	r0, #1
 800fe60:	d09d      	beq.n	800fd9e <_printf_i+0x15a>
 800fe62:	3501      	adds	r5, #1
 800fe64:	68e3      	ldr	r3, [r4, #12]
 800fe66:	9903      	ldr	r1, [sp, #12]
 800fe68:	1a5b      	subs	r3, r3, r1
 800fe6a:	42ab      	cmp	r3, r5
 800fe6c:	dcf2      	bgt.n	800fe54 <_printf_i+0x210>
 800fe6e:	e7eb      	b.n	800fe48 <_printf_i+0x204>
 800fe70:	2500      	movs	r5, #0
 800fe72:	f104 0619 	add.w	r6, r4, #25
 800fe76:	e7f5      	b.n	800fe64 <_printf_i+0x220>
 800fe78:	08011007 	.word	0x08011007
 800fe7c:	08011018 	.word	0x08011018

0800fe80 <__sflush_r>:
 800fe80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe88:	0716      	lsls	r6, r2, #28
 800fe8a:	4605      	mov	r5, r0
 800fe8c:	460c      	mov	r4, r1
 800fe8e:	d454      	bmi.n	800ff3a <__sflush_r+0xba>
 800fe90:	684b      	ldr	r3, [r1, #4]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	dc02      	bgt.n	800fe9c <__sflush_r+0x1c>
 800fe96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	dd48      	ble.n	800ff2e <__sflush_r+0xae>
 800fe9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fe9e:	2e00      	cmp	r6, #0
 800fea0:	d045      	beq.n	800ff2e <__sflush_r+0xae>
 800fea2:	2300      	movs	r3, #0
 800fea4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fea8:	682f      	ldr	r7, [r5, #0]
 800feaa:	6a21      	ldr	r1, [r4, #32]
 800feac:	602b      	str	r3, [r5, #0]
 800feae:	d030      	beq.n	800ff12 <__sflush_r+0x92>
 800feb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800feb2:	89a3      	ldrh	r3, [r4, #12]
 800feb4:	0759      	lsls	r1, r3, #29
 800feb6:	d505      	bpl.n	800fec4 <__sflush_r+0x44>
 800feb8:	6863      	ldr	r3, [r4, #4]
 800feba:	1ad2      	subs	r2, r2, r3
 800febc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800febe:	b10b      	cbz	r3, 800fec4 <__sflush_r+0x44>
 800fec0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fec2:	1ad2      	subs	r2, r2, r3
 800fec4:	2300      	movs	r3, #0
 800fec6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fec8:	6a21      	ldr	r1, [r4, #32]
 800feca:	4628      	mov	r0, r5
 800fecc:	47b0      	blx	r6
 800fece:	1c43      	adds	r3, r0, #1
 800fed0:	89a3      	ldrh	r3, [r4, #12]
 800fed2:	d106      	bne.n	800fee2 <__sflush_r+0x62>
 800fed4:	6829      	ldr	r1, [r5, #0]
 800fed6:	291d      	cmp	r1, #29
 800fed8:	d82b      	bhi.n	800ff32 <__sflush_r+0xb2>
 800feda:	4a2a      	ldr	r2, [pc, #168]	@ (800ff84 <__sflush_r+0x104>)
 800fedc:	40ca      	lsrs	r2, r1
 800fede:	07d6      	lsls	r6, r2, #31
 800fee0:	d527      	bpl.n	800ff32 <__sflush_r+0xb2>
 800fee2:	2200      	movs	r2, #0
 800fee4:	6062      	str	r2, [r4, #4]
 800fee6:	04d9      	lsls	r1, r3, #19
 800fee8:	6922      	ldr	r2, [r4, #16]
 800feea:	6022      	str	r2, [r4, #0]
 800feec:	d504      	bpl.n	800fef8 <__sflush_r+0x78>
 800feee:	1c42      	adds	r2, r0, #1
 800fef0:	d101      	bne.n	800fef6 <__sflush_r+0x76>
 800fef2:	682b      	ldr	r3, [r5, #0]
 800fef4:	b903      	cbnz	r3, 800fef8 <__sflush_r+0x78>
 800fef6:	6560      	str	r0, [r4, #84]	@ 0x54
 800fef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fefa:	602f      	str	r7, [r5, #0]
 800fefc:	b1b9      	cbz	r1, 800ff2e <__sflush_r+0xae>
 800fefe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff02:	4299      	cmp	r1, r3
 800ff04:	d002      	beq.n	800ff0c <__sflush_r+0x8c>
 800ff06:	4628      	mov	r0, r5
 800ff08:	f7ff fbd6 	bl	800f6b8 <_free_r>
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff10:	e00d      	b.n	800ff2e <__sflush_r+0xae>
 800ff12:	2301      	movs	r3, #1
 800ff14:	4628      	mov	r0, r5
 800ff16:	47b0      	blx	r6
 800ff18:	4602      	mov	r2, r0
 800ff1a:	1c50      	adds	r0, r2, #1
 800ff1c:	d1c9      	bne.n	800feb2 <__sflush_r+0x32>
 800ff1e:	682b      	ldr	r3, [r5, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d0c6      	beq.n	800feb2 <__sflush_r+0x32>
 800ff24:	2b1d      	cmp	r3, #29
 800ff26:	d001      	beq.n	800ff2c <__sflush_r+0xac>
 800ff28:	2b16      	cmp	r3, #22
 800ff2a:	d11e      	bne.n	800ff6a <__sflush_r+0xea>
 800ff2c:	602f      	str	r7, [r5, #0]
 800ff2e:	2000      	movs	r0, #0
 800ff30:	e022      	b.n	800ff78 <__sflush_r+0xf8>
 800ff32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff36:	b21b      	sxth	r3, r3
 800ff38:	e01b      	b.n	800ff72 <__sflush_r+0xf2>
 800ff3a:	690f      	ldr	r7, [r1, #16]
 800ff3c:	2f00      	cmp	r7, #0
 800ff3e:	d0f6      	beq.n	800ff2e <__sflush_r+0xae>
 800ff40:	0793      	lsls	r3, r2, #30
 800ff42:	680e      	ldr	r6, [r1, #0]
 800ff44:	bf08      	it	eq
 800ff46:	694b      	ldreq	r3, [r1, #20]
 800ff48:	600f      	str	r7, [r1, #0]
 800ff4a:	bf18      	it	ne
 800ff4c:	2300      	movne	r3, #0
 800ff4e:	eba6 0807 	sub.w	r8, r6, r7
 800ff52:	608b      	str	r3, [r1, #8]
 800ff54:	f1b8 0f00 	cmp.w	r8, #0
 800ff58:	dde9      	ble.n	800ff2e <__sflush_r+0xae>
 800ff5a:	6a21      	ldr	r1, [r4, #32]
 800ff5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ff5e:	4643      	mov	r3, r8
 800ff60:	463a      	mov	r2, r7
 800ff62:	4628      	mov	r0, r5
 800ff64:	47b0      	blx	r6
 800ff66:	2800      	cmp	r0, #0
 800ff68:	dc08      	bgt.n	800ff7c <__sflush_r+0xfc>
 800ff6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff72:	81a3      	strh	r3, [r4, #12]
 800ff74:	f04f 30ff 	mov.w	r0, #4294967295
 800ff78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff7c:	4407      	add	r7, r0
 800ff7e:	eba8 0800 	sub.w	r8, r8, r0
 800ff82:	e7e7      	b.n	800ff54 <__sflush_r+0xd4>
 800ff84:	20400001 	.word	0x20400001

0800ff88 <_fflush_r>:
 800ff88:	b538      	push	{r3, r4, r5, lr}
 800ff8a:	690b      	ldr	r3, [r1, #16]
 800ff8c:	4605      	mov	r5, r0
 800ff8e:	460c      	mov	r4, r1
 800ff90:	b913      	cbnz	r3, 800ff98 <_fflush_r+0x10>
 800ff92:	2500      	movs	r5, #0
 800ff94:	4628      	mov	r0, r5
 800ff96:	bd38      	pop	{r3, r4, r5, pc}
 800ff98:	b118      	cbz	r0, 800ffa2 <_fflush_r+0x1a>
 800ff9a:	6a03      	ldr	r3, [r0, #32]
 800ff9c:	b90b      	cbnz	r3, 800ffa2 <_fflush_r+0x1a>
 800ff9e:	f7ff f9df 	bl	800f360 <__sinit>
 800ffa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d0f3      	beq.n	800ff92 <_fflush_r+0xa>
 800ffaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ffac:	07d0      	lsls	r0, r2, #31
 800ffae:	d404      	bmi.n	800ffba <_fflush_r+0x32>
 800ffb0:	0599      	lsls	r1, r3, #22
 800ffb2:	d402      	bmi.n	800ffba <_fflush_r+0x32>
 800ffb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ffb6:	f7ff fb56 	bl	800f666 <__retarget_lock_acquire_recursive>
 800ffba:	4628      	mov	r0, r5
 800ffbc:	4621      	mov	r1, r4
 800ffbe:	f7ff ff5f 	bl	800fe80 <__sflush_r>
 800ffc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ffc4:	07da      	lsls	r2, r3, #31
 800ffc6:	4605      	mov	r5, r0
 800ffc8:	d4e4      	bmi.n	800ff94 <_fflush_r+0xc>
 800ffca:	89a3      	ldrh	r3, [r4, #12]
 800ffcc:	059b      	lsls	r3, r3, #22
 800ffce:	d4e1      	bmi.n	800ff94 <_fflush_r+0xc>
 800ffd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ffd2:	f7ff fb49 	bl	800f668 <__retarget_lock_release_recursive>
 800ffd6:	e7dd      	b.n	800ff94 <_fflush_r+0xc>

0800ffd8 <fiprintf>:
 800ffd8:	b40e      	push	{r1, r2, r3}
 800ffda:	b503      	push	{r0, r1, lr}
 800ffdc:	4601      	mov	r1, r0
 800ffde:	ab03      	add	r3, sp, #12
 800ffe0:	4805      	ldr	r0, [pc, #20]	@ (800fff8 <fiprintf+0x20>)
 800ffe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffe6:	6800      	ldr	r0, [r0, #0]
 800ffe8:	9301      	str	r3, [sp, #4]
 800ffea:	f000 f89d 	bl	8010128 <_vfiprintf_r>
 800ffee:	b002      	add	sp, #8
 800fff0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fff4:	b003      	add	sp, #12
 800fff6:	4770      	bx	lr
 800fff8:	20000174 	.word	0x20000174

0800fffc <memmove>:
 800fffc:	4288      	cmp	r0, r1
 800fffe:	b510      	push	{r4, lr}
 8010000:	eb01 0402 	add.w	r4, r1, r2
 8010004:	d902      	bls.n	801000c <memmove+0x10>
 8010006:	4284      	cmp	r4, r0
 8010008:	4623      	mov	r3, r4
 801000a:	d807      	bhi.n	801001c <memmove+0x20>
 801000c:	1e43      	subs	r3, r0, #1
 801000e:	42a1      	cmp	r1, r4
 8010010:	d008      	beq.n	8010024 <memmove+0x28>
 8010012:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010016:	f803 2f01 	strb.w	r2, [r3, #1]!
 801001a:	e7f8      	b.n	801000e <memmove+0x12>
 801001c:	4402      	add	r2, r0
 801001e:	4601      	mov	r1, r0
 8010020:	428a      	cmp	r2, r1
 8010022:	d100      	bne.n	8010026 <memmove+0x2a>
 8010024:	bd10      	pop	{r4, pc}
 8010026:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801002a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801002e:	e7f7      	b.n	8010020 <memmove+0x24>

08010030 <_sbrk_r>:
 8010030:	b538      	push	{r3, r4, r5, lr}
 8010032:	4d06      	ldr	r5, [pc, #24]	@ (801004c <_sbrk_r+0x1c>)
 8010034:	2300      	movs	r3, #0
 8010036:	4604      	mov	r4, r0
 8010038:	4608      	mov	r0, r1
 801003a:	602b      	str	r3, [r5, #0]
 801003c:	f7f2 fcac 	bl	8002998 <_sbrk>
 8010040:	1c43      	adds	r3, r0, #1
 8010042:	d102      	bne.n	801004a <_sbrk_r+0x1a>
 8010044:	682b      	ldr	r3, [r5, #0]
 8010046:	b103      	cbz	r3, 801004a <_sbrk_r+0x1a>
 8010048:	6023      	str	r3, [r4, #0]
 801004a:	bd38      	pop	{r3, r4, r5, pc}
 801004c:	20004800 	.word	0x20004800

08010050 <memcpy>:
 8010050:	440a      	add	r2, r1
 8010052:	4291      	cmp	r1, r2
 8010054:	f100 33ff 	add.w	r3, r0, #4294967295
 8010058:	d100      	bne.n	801005c <memcpy+0xc>
 801005a:	4770      	bx	lr
 801005c:	b510      	push	{r4, lr}
 801005e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010062:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010066:	4291      	cmp	r1, r2
 8010068:	d1f9      	bne.n	801005e <memcpy+0xe>
 801006a:	bd10      	pop	{r4, pc}

0801006c <abort>:
 801006c:	b508      	push	{r3, lr}
 801006e:	2006      	movs	r0, #6
 8010070:	f000 fa2e 	bl	80104d0 <raise>
 8010074:	2001      	movs	r0, #1
 8010076:	f7f2 fc17 	bl	80028a8 <_exit>

0801007a <_realloc_r>:
 801007a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801007e:	4607      	mov	r7, r0
 8010080:	4614      	mov	r4, r2
 8010082:	460d      	mov	r5, r1
 8010084:	b921      	cbnz	r1, 8010090 <_realloc_r+0x16>
 8010086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801008a:	4611      	mov	r1, r2
 801008c:	f7ff bb88 	b.w	800f7a0 <_malloc_r>
 8010090:	b92a      	cbnz	r2, 801009e <_realloc_r+0x24>
 8010092:	f7ff fb11 	bl	800f6b8 <_free_r>
 8010096:	4625      	mov	r5, r4
 8010098:	4628      	mov	r0, r5
 801009a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801009e:	f000 fa33 	bl	8010508 <_malloc_usable_size_r>
 80100a2:	4284      	cmp	r4, r0
 80100a4:	4606      	mov	r6, r0
 80100a6:	d802      	bhi.n	80100ae <_realloc_r+0x34>
 80100a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80100ac:	d8f4      	bhi.n	8010098 <_realloc_r+0x1e>
 80100ae:	4621      	mov	r1, r4
 80100b0:	4638      	mov	r0, r7
 80100b2:	f7ff fb75 	bl	800f7a0 <_malloc_r>
 80100b6:	4680      	mov	r8, r0
 80100b8:	b908      	cbnz	r0, 80100be <_realloc_r+0x44>
 80100ba:	4645      	mov	r5, r8
 80100bc:	e7ec      	b.n	8010098 <_realloc_r+0x1e>
 80100be:	42b4      	cmp	r4, r6
 80100c0:	4622      	mov	r2, r4
 80100c2:	4629      	mov	r1, r5
 80100c4:	bf28      	it	cs
 80100c6:	4632      	movcs	r2, r6
 80100c8:	f7ff ffc2 	bl	8010050 <memcpy>
 80100cc:	4629      	mov	r1, r5
 80100ce:	4638      	mov	r0, r7
 80100d0:	f7ff faf2 	bl	800f6b8 <_free_r>
 80100d4:	e7f1      	b.n	80100ba <_realloc_r+0x40>

080100d6 <__sfputc_r>:
 80100d6:	6893      	ldr	r3, [r2, #8]
 80100d8:	3b01      	subs	r3, #1
 80100da:	2b00      	cmp	r3, #0
 80100dc:	b410      	push	{r4}
 80100de:	6093      	str	r3, [r2, #8]
 80100e0:	da08      	bge.n	80100f4 <__sfputc_r+0x1e>
 80100e2:	6994      	ldr	r4, [r2, #24]
 80100e4:	42a3      	cmp	r3, r4
 80100e6:	db01      	blt.n	80100ec <__sfputc_r+0x16>
 80100e8:	290a      	cmp	r1, #10
 80100ea:	d103      	bne.n	80100f4 <__sfputc_r+0x1e>
 80100ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100f0:	f000 b932 	b.w	8010358 <__swbuf_r>
 80100f4:	6813      	ldr	r3, [r2, #0]
 80100f6:	1c58      	adds	r0, r3, #1
 80100f8:	6010      	str	r0, [r2, #0]
 80100fa:	7019      	strb	r1, [r3, #0]
 80100fc:	4608      	mov	r0, r1
 80100fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010102:	4770      	bx	lr

08010104 <__sfputs_r>:
 8010104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010106:	4606      	mov	r6, r0
 8010108:	460f      	mov	r7, r1
 801010a:	4614      	mov	r4, r2
 801010c:	18d5      	adds	r5, r2, r3
 801010e:	42ac      	cmp	r4, r5
 8010110:	d101      	bne.n	8010116 <__sfputs_r+0x12>
 8010112:	2000      	movs	r0, #0
 8010114:	e007      	b.n	8010126 <__sfputs_r+0x22>
 8010116:	f814 1b01 	ldrb.w	r1, [r4], #1
 801011a:	463a      	mov	r2, r7
 801011c:	4630      	mov	r0, r6
 801011e:	f7ff ffda 	bl	80100d6 <__sfputc_r>
 8010122:	1c43      	adds	r3, r0, #1
 8010124:	d1f3      	bne.n	801010e <__sfputs_r+0xa>
 8010126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010128 <_vfiprintf_r>:
 8010128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801012c:	460d      	mov	r5, r1
 801012e:	b09d      	sub	sp, #116	@ 0x74
 8010130:	4614      	mov	r4, r2
 8010132:	4698      	mov	r8, r3
 8010134:	4606      	mov	r6, r0
 8010136:	b118      	cbz	r0, 8010140 <_vfiprintf_r+0x18>
 8010138:	6a03      	ldr	r3, [r0, #32]
 801013a:	b90b      	cbnz	r3, 8010140 <_vfiprintf_r+0x18>
 801013c:	f7ff f910 	bl	800f360 <__sinit>
 8010140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010142:	07d9      	lsls	r1, r3, #31
 8010144:	d405      	bmi.n	8010152 <_vfiprintf_r+0x2a>
 8010146:	89ab      	ldrh	r3, [r5, #12]
 8010148:	059a      	lsls	r2, r3, #22
 801014a:	d402      	bmi.n	8010152 <_vfiprintf_r+0x2a>
 801014c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801014e:	f7ff fa8a 	bl	800f666 <__retarget_lock_acquire_recursive>
 8010152:	89ab      	ldrh	r3, [r5, #12]
 8010154:	071b      	lsls	r3, r3, #28
 8010156:	d501      	bpl.n	801015c <_vfiprintf_r+0x34>
 8010158:	692b      	ldr	r3, [r5, #16]
 801015a:	b99b      	cbnz	r3, 8010184 <_vfiprintf_r+0x5c>
 801015c:	4629      	mov	r1, r5
 801015e:	4630      	mov	r0, r6
 8010160:	f000 f938 	bl	80103d4 <__swsetup_r>
 8010164:	b170      	cbz	r0, 8010184 <_vfiprintf_r+0x5c>
 8010166:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010168:	07dc      	lsls	r4, r3, #31
 801016a:	d504      	bpl.n	8010176 <_vfiprintf_r+0x4e>
 801016c:	f04f 30ff 	mov.w	r0, #4294967295
 8010170:	b01d      	add	sp, #116	@ 0x74
 8010172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010176:	89ab      	ldrh	r3, [r5, #12]
 8010178:	0598      	lsls	r0, r3, #22
 801017a:	d4f7      	bmi.n	801016c <_vfiprintf_r+0x44>
 801017c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801017e:	f7ff fa73 	bl	800f668 <__retarget_lock_release_recursive>
 8010182:	e7f3      	b.n	801016c <_vfiprintf_r+0x44>
 8010184:	2300      	movs	r3, #0
 8010186:	9309      	str	r3, [sp, #36]	@ 0x24
 8010188:	2320      	movs	r3, #32
 801018a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801018e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010192:	2330      	movs	r3, #48	@ 0x30
 8010194:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010344 <_vfiprintf_r+0x21c>
 8010198:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801019c:	f04f 0901 	mov.w	r9, #1
 80101a0:	4623      	mov	r3, r4
 80101a2:	469a      	mov	sl, r3
 80101a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101a8:	b10a      	cbz	r2, 80101ae <_vfiprintf_r+0x86>
 80101aa:	2a25      	cmp	r2, #37	@ 0x25
 80101ac:	d1f9      	bne.n	80101a2 <_vfiprintf_r+0x7a>
 80101ae:	ebba 0b04 	subs.w	fp, sl, r4
 80101b2:	d00b      	beq.n	80101cc <_vfiprintf_r+0xa4>
 80101b4:	465b      	mov	r3, fp
 80101b6:	4622      	mov	r2, r4
 80101b8:	4629      	mov	r1, r5
 80101ba:	4630      	mov	r0, r6
 80101bc:	f7ff ffa2 	bl	8010104 <__sfputs_r>
 80101c0:	3001      	adds	r0, #1
 80101c2:	f000 80a7 	beq.w	8010314 <_vfiprintf_r+0x1ec>
 80101c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80101c8:	445a      	add	r2, fp
 80101ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80101cc:	f89a 3000 	ldrb.w	r3, [sl]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	f000 809f 	beq.w	8010314 <_vfiprintf_r+0x1ec>
 80101d6:	2300      	movs	r3, #0
 80101d8:	f04f 32ff 	mov.w	r2, #4294967295
 80101dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101e0:	f10a 0a01 	add.w	sl, sl, #1
 80101e4:	9304      	str	r3, [sp, #16]
 80101e6:	9307      	str	r3, [sp, #28]
 80101e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80101ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80101ee:	4654      	mov	r4, sl
 80101f0:	2205      	movs	r2, #5
 80101f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101f6:	4853      	ldr	r0, [pc, #332]	@ (8010344 <_vfiprintf_r+0x21c>)
 80101f8:	f7f0 f80a 	bl	8000210 <memchr>
 80101fc:	9a04      	ldr	r2, [sp, #16]
 80101fe:	b9d8      	cbnz	r0, 8010238 <_vfiprintf_r+0x110>
 8010200:	06d1      	lsls	r1, r2, #27
 8010202:	bf44      	itt	mi
 8010204:	2320      	movmi	r3, #32
 8010206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801020a:	0713      	lsls	r3, r2, #28
 801020c:	bf44      	itt	mi
 801020e:	232b      	movmi	r3, #43	@ 0x2b
 8010210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010214:	f89a 3000 	ldrb.w	r3, [sl]
 8010218:	2b2a      	cmp	r3, #42	@ 0x2a
 801021a:	d015      	beq.n	8010248 <_vfiprintf_r+0x120>
 801021c:	9a07      	ldr	r2, [sp, #28]
 801021e:	4654      	mov	r4, sl
 8010220:	2000      	movs	r0, #0
 8010222:	f04f 0c0a 	mov.w	ip, #10
 8010226:	4621      	mov	r1, r4
 8010228:	f811 3b01 	ldrb.w	r3, [r1], #1
 801022c:	3b30      	subs	r3, #48	@ 0x30
 801022e:	2b09      	cmp	r3, #9
 8010230:	d94b      	bls.n	80102ca <_vfiprintf_r+0x1a2>
 8010232:	b1b0      	cbz	r0, 8010262 <_vfiprintf_r+0x13a>
 8010234:	9207      	str	r2, [sp, #28]
 8010236:	e014      	b.n	8010262 <_vfiprintf_r+0x13a>
 8010238:	eba0 0308 	sub.w	r3, r0, r8
 801023c:	fa09 f303 	lsl.w	r3, r9, r3
 8010240:	4313      	orrs	r3, r2
 8010242:	9304      	str	r3, [sp, #16]
 8010244:	46a2      	mov	sl, r4
 8010246:	e7d2      	b.n	80101ee <_vfiprintf_r+0xc6>
 8010248:	9b03      	ldr	r3, [sp, #12]
 801024a:	1d19      	adds	r1, r3, #4
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	9103      	str	r1, [sp, #12]
 8010250:	2b00      	cmp	r3, #0
 8010252:	bfbb      	ittet	lt
 8010254:	425b      	neglt	r3, r3
 8010256:	f042 0202 	orrlt.w	r2, r2, #2
 801025a:	9307      	strge	r3, [sp, #28]
 801025c:	9307      	strlt	r3, [sp, #28]
 801025e:	bfb8      	it	lt
 8010260:	9204      	strlt	r2, [sp, #16]
 8010262:	7823      	ldrb	r3, [r4, #0]
 8010264:	2b2e      	cmp	r3, #46	@ 0x2e
 8010266:	d10a      	bne.n	801027e <_vfiprintf_r+0x156>
 8010268:	7863      	ldrb	r3, [r4, #1]
 801026a:	2b2a      	cmp	r3, #42	@ 0x2a
 801026c:	d132      	bne.n	80102d4 <_vfiprintf_r+0x1ac>
 801026e:	9b03      	ldr	r3, [sp, #12]
 8010270:	1d1a      	adds	r2, r3, #4
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	9203      	str	r2, [sp, #12]
 8010276:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801027a:	3402      	adds	r4, #2
 801027c:	9305      	str	r3, [sp, #20]
 801027e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010354 <_vfiprintf_r+0x22c>
 8010282:	7821      	ldrb	r1, [r4, #0]
 8010284:	2203      	movs	r2, #3
 8010286:	4650      	mov	r0, sl
 8010288:	f7ef ffc2 	bl	8000210 <memchr>
 801028c:	b138      	cbz	r0, 801029e <_vfiprintf_r+0x176>
 801028e:	9b04      	ldr	r3, [sp, #16]
 8010290:	eba0 000a 	sub.w	r0, r0, sl
 8010294:	2240      	movs	r2, #64	@ 0x40
 8010296:	4082      	lsls	r2, r0
 8010298:	4313      	orrs	r3, r2
 801029a:	3401      	adds	r4, #1
 801029c:	9304      	str	r3, [sp, #16]
 801029e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102a2:	4829      	ldr	r0, [pc, #164]	@ (8010348 <_vfiprintf_r+0x220>)
 80102a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80102a8:	2206      	movs	r2, #6
 80102aa:	f7ef ffb1 	bl	8000210 <memchr>
 80102ae:	2800      	cmp	r0, #0
 80102b0:	d03f      	beq.n	8010332 <_vfiprintf_r+0x20a>
 80102b2:	4b26      	ldr	r3, [pc, #152]	@ (801034c <_vfiprintf_r+0x224>)
 80102b4:	bb1b      	cbnz	r3, 80102fe <_vfiprintf_r+0x1d6>
 80102b6:	9b03      	ldr	r3, [sp, #12]
 80102b8:	3307      	adds	r3, #7
 80102ba:	f023 0307 	bic.w	r3, r3, #7
 80102be:	3308      	adds	r3, #8
 80102c0:	9303      	str	r3, [sp, #12]
 80102c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102c4:	443b      	add	r3, r7
 80102c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80102c8:	e76a      	b.n	80101a0 <_vfiprintf_r+0x78>
 80102ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80102ce:	460c      	mov	r4, r1
 80102d0:	2001      	movs	r0, #1
 80102d2:	e7a8      	b.n	8010226 <_vfiprintf_r+0xfe>
 80102d4:	2300      	movs	r3, #0
 80102d6:	3401      	adds	r4, #1
 80102d8:	9305      	str	r3, [sp, #20]
 80102da:	4619      	mov	r1, r3
 80102dc:	f04f 0c0a 	mov.w	ip, #10
 80102e0:	4620      	mov	r0, r4
 80102e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102e6:	3a30      	subs	r2, #48	@ 0x30
 80102e8:	2a09      	cmp	r2, #9
 80102ea:	d903      	bls.n	80102f4 <_vfiprintf_r+0x1cc>
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d0c6      	beq.n	801027e <_vfiprintf_r+0x156>
 80102f0:	9105      	str	r1, [sp, #20]
 80102f2:	e7c4      	b.n	801027e <_vfiprintf_r+0x156>
 80102f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80102f8:	4604      	mov	r4, r0
 80102fa:	2301      	movs	r3, #1
 80102fc:	e7f0      	b.n	80102e0 <_vfiprintf_r+0x1b8>
 80102fe:	ab03      	add	r3, sp, #12
 8010300:	9300      	str	r3, [sp, #0]
 8010302:	462a      	mov	r2, r5
 8010304:	4b12      	ldr	r3, [pc, #72]	@ (8010350 <_vfiprintf_r+0x228>)
 8010306:	a904      	add	r1, sp, #16
 8010308:	4630      	mov	r0, r6
 801030a:	f3af 8000 	nop.w
 801030e:	4607      	mov	r7, r0
 8010310:	1c78      	adds	r0, r7, #1
 8010312:	d1d6      	bne.n	80102c2 <_vfiprintf_r+0x19a>
 8010314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010316:	07d9      	lsls	r1, r3, #31
 8010318:	d405      	bmi.n	8010326 <_vfiprintf_r+0x1fe>
 801031a:	89ab      	ldrh	r3, [r5, #12]
 801031c:	059a      	lsls	r2, r3, #22
 801031e:	d402      	bmi.n	8010326 <_vfiprintf_r+0x1fe>
 8010320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010322:	f7ff f9a1 	bl	800f668 <__retarget_lock_release_recursive>
 8010326:	89ab      	ldrh	r3, [r5, #12]
 8010328:	065b      	lsls	r3, r3, #25
 801032a:	f53f af1f 	bmi.w	801016c <_vfiprintf_r+0x44>
 801032e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010330:	e71e      	b.n	8010170 <_vfiprintf_r+0x48>
 8010332:	ab03      	add	r3, sp, #12
 8010334:	9300      	str	r3, [sp, #0]
 8010336:	462a      	mov	r2, r5
 8010338:	4b05      	ldr	r3, [pc, #20]	@ (8010350 <_vfiprintf_r+0x228>)
 801033a:	a904      	add	r1, sp, #16
 801033c:	4630      	mov	r0, r6
 801033e:	f7ff fc81 	bl	800fc44 <_printf_i>
 8010342:	e7e4      	b.n	801030e <_vfiprintf_r+0x1e6>
 8010344:	08010ff6 	.word	0x08010ff6
 8010348:	08011000 	.word	0x08011000
 801034c:	00000000 	.word	0x00000000
 8010350:	08010105 	.word	0x08010105
 8010354:	08010ffc 	.word	0x08010ffc

08010358 <__swbuf_r>:
 8010358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801035a:	460e      	mov	r6, r1
 801035c:	4614      	mov	r4, r2
 801035e:	4605      	mov	r5, r0
 8010360:	b118      	cbz	r0, 801036a <__swbuf_r+0x12>
 8010362:	6a03      	ldr	r3, [r0, #32]
 8010364:	b90b      	cbnz	r3, 801036a <__swbuf_r+0x12>
 8010366:	f7fe fffb 	bl	800f360 <__sinit>
 801036a:	69a3      	ldr	r3, [r4, #24]
 801036c:	60a3      	str	r3, [r4, #8]
 801036e:	89a3      	ldrh	r3, [r4, #12]
 8010370:	071a      	lsls	r2, r3, #28
 8010372:	d501      	bpl.n	8010378 <__swbuf_r+0x20>
 8010374:	6923      	ldr	r3, [r4, #16]
 8010376:	b943      	cbnz	r3, 801038a <__swbuf_r+0x32>
 8010378:	4621      	mov	r1, r4
 801037a:	4628      	mov	r0, r5
 801037c:	f000 f82a 	bl	80103d4 <__swsetup_r>
 8010380:	b118      	cbz	r0, 801038a <__swbuf_r+0x32>
 8010382:	f04f 37ff 	mov.w	r7, #4294967295
 8010386:	4638      	mov	r0, r7
 8010388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801038a:	6823      	ldr	r3, [r4, #0]
 801038c:	6922      	ldr	r2, [r4, #16]
 801038e:	1a98      	subs	r0, r3, r2
 8010390:	6963      	ldr	r3, [r4, #20]
 8010392:	b2f6      	uxtb	r6, r6
 8010394:	4283      	cmp	r3, r0
 8010396:	4637      	mov	r7, r6
 8010398:	dc05      	bgt.n	80103a6 <__swbuf_r+0x4e>
 801039a:	4621      	mov	r1, r4
 801039c:	4628      	mov	r0, r5
 801039e:	f7ff fdf3 	bl	800ff88 <_fflush_r>
 80103a2:	2800      	cmp	r0, #0
 80103a4:	d1ed      	bne.n	8010382 <__swbuf_r+0x2a>
 80103a6:	68a3      	ldr	r3, [r4, #8]
 80103a8:	3b01      	subs	r3, #1
 80103aa:	60a3      	str	r3, [r4, #8]
 80103ac:	6823      	ldr	r3, [r4, #0]
 80103ae:	1c5a      	adds	r2, r3, #1
 80103b0:	6022      	str	r2, [r4, #0]
 80103b2:	701e      	strb	r6, [r3, #0]
 80103b4:	6962      	ldr	r2, [r4, #20]
 80103b6:	1c43      	adds	r3, r0, #1
 80103b8:	429a      	cmp	r2, r3
 80103ba:	d004      	beq.n	80103c6 <__swbuf_r+0x6e>
 80103bc:	89a3      	ldrh	r3, [r4, #12]
 80103be:	07db      	lsls	r3, r3, #31
 80103c0:	d5e1      	bpl.n	8010386 <__swbuf_r+0x2e>
 80103c2:	2e0a      	cmp	r6, #10
 80103c4:	d1df      	bne.n	8010386 <__swbuf_r+0x2e>
 80103c6:	4621      	mov	r1, r4
 80103c8:	4628      	mov	r0, r5
 80103ca:	f7ff fddd 	bl	800ff88 <_fflush_r>
 80103ce:	2800      	cmp	r0, #0
 80103d0:	d0d9      	beq.n	8010386 <__swbuf_r+0x2e>
 80103d2:	e7d6      	b.n	8010382 <__swbuf_r+0x2a>

080103d4 <__swsetup_r>:
 80103d4:	b538      	push	{r3, r4, r5, lr}
 80103d6:	4b29      	ldr	r3, [pc, #164]	@ (801047c <__swsetup_r+0xa8>)
 80103d8:	4605      	mov	r5, r0
 80103da:	6818      	ldr	r0, [r3, #0]
 80103dc:	460c      	mov	r4, r1
 80103de:	b118      	cbz	r0, 80103e8 <__swsetup_r+0x14>
 80103e0:	6a03      	ldr	r3, [r0, #32]
 80103e2:	b90b      	cbnz	r3, 80103e8 <__swsetup_r+0x14>
 80103e4:	f7fe ffbc 	bl	800f360 <__sinit>
 80103e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103ec:	0719      	lsls	r1, r3, #28
 80103ee:	d422      	bmi.n	8010436 <__swsetup_r+0x62>
 80103f0:	06da      	lsls	r2, r3, #27
 80103f2:	d407      	bmi.n	8010404 <__swsetup_r+0x30>
 80103f4:	2209      	movs	r2, #9
 80103f6:	602a      	str	r2, [r5, #0]
 80103f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103fc:	81a3      	strh	r3, [r4, #12]
 80103fe:	f04f 30ff 	mov.w	r0, #4294967295
 8010402:	e033      	b.n	801046c <__swsetup_r+0x98>
 8010404:	0758      	lsls	r0, r3, #29
 8010406:	d512      	bpl.n	801042e <__swsetup_r+0x5a>
 8010408:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801040a:	b141      	cbz	r1, 801041e <__swsetup_r+0x4a>
 801040c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010410:	4299      	cmp	r1, r3
 8010412:	d002      	beq.n	801041a <__swsetup_r+0x46>
 8010414:	4628      	mov	r0, r5
 8010416:	f7ff f94f 	bl	800f6b8 <_free_r>
 801041a:	2300      	movs	r3, #0
 801041c:	6363      	str	r3, [r4, #52]	@ 0x34
 801041e:	89a3      	ldrh	r3, [r4, #12]
 8010420:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010424:	81a3      	strh	r3, [r4, #12]
 8010426:	2300      	movs	r3, #0
 8010428:	6063      	str	r3, [r4, #4]
 801042a:	6923      	ldr	r3, [r4, #16]
 801042c:	6023      	str	r3, [r4, #0]
 801042e:	89a3      	ldrh	r3, [r4, #12]
 8010430:	f043 0308 	orr.w	r3, r3, #8
 8010434:	81a3      	strh	r3, [r4, #12]
 8010436:	6923      	ldr	r3, [r4, #16]
 8010438:	b94b      	cbnz	r3, 801044e <__swsetup_r+0x7a>
 801043a:	89a3      	ldrh	r3, [r4, #12]
 801043c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010444:	d003      	beq.n	801044e <__swsetup_r+0x7a>
 8010446:	4621      	mov	r1, r4
 8010448:	4628      	mov	r0, r5
 801044a:	f000 f88b 	bl	8010564 <__smakebuf_r>
 801044e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010452:	f013 0201 	ands.w	r2, r3, #1
 8010456:	d00a      	beq.n	801046e <__swsetup_r+0x9a>
 8010458:	2200      	movs	r2, #0
 801045a:	60a2      	str	r2, [r4, #8]
 801045c:	6962      	ldr	r2, [r4, #20]
 801045e:	4252      	negs	r2, r2
 8010460:	61a2      	str	r2, [r4, #24]
 8010462:	6922      	ldr	r2, [r4, #16]
 8010464:	b942      	cbnz	r2, 8010478 <__swsetup_r+0xa4>
 8010466:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801046a:	d1c5      	bne.n	80103f8 <__swsetup_r+0x24>
 801046c:	bd38      	pop	{r3, r4, r5, pc}
 801046e:	0799      	lsls	r1, r3, #30
 8010470:	bf58      	it	pl
 8010472:	6962      	ldrpl	r2, [r4, #20]
 8010474:	60a2      	str	r2, [r4, #8]
 8010476:	e7f4      	b.n	8010462 <__swsetup_r+0x8e>
 8010478:	2000      	movs	r0, #0
 801047a:	e7f7      	b.n	801046c <__swsetup_r+0x98>
 801047c:	20000174 	.word	0x20000174

08010480 <_raise_r>:
 8010480:	291f      	cmp	r1, #31
 8010482:	b538      	push	{r3, r4, r5, lr}
 8010484:	4605      	mov	r5, r0
 8010486:	460c      	mov	r4, r1
 8010488:	d904      	bls.n	8010494 <_raise_r+0x14>
 801048a:	2316      	movs	r3, #22
 801048c:	6003      	str	r3, [r0, #0]
 801048e:	f04f 30ff 	mov.w	r0, #4294967295
 8010492:	bd38      	pop	{r3, r4, r5, pc}
 8010494:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010496:	b112      	cbz	r2, 801049e <_raise_r+0x1e>
 8010498:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801049c:	b94b      	cbnz	r3, 80104b2 <_raise_r+0x32>
 801049e:	4628      	mov	r0, r5
 80104a0:	f000 f830 	bl	8010504 <_getpid_r>
 80104a4:	4622      	mov	r2, r4
 80104a6:	4601      	mov	r1, r0
 80104a8:	4628      	mov	r0, r5
 80104aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104ae:	f000 b817 	b.w	80104e0 <_kill_r>
 80104b2:	2b01      	cmp	r3, #1
 80104b4:	d00a      	beq.n	80104cc <_raise_r+0x4c>
 80104b6:	1c59      	adds	r1, r3, #1
 80104b8:	d103      	bne.n	80104c2 <_raise_r+0x42>
 80104ba:	2316      	movs	r3, #22
 80104bc:	6003      	str	r3, [r0, #0]
 80104be:	2001      	movs	r0, #1
 80104c0:	e7e7      	b.n	8010492 <_raise_r+0x12>
 80104c2:	2100      	movs	r1, #0
 80104c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80104c8:	4620      	mov	r0, r4
 80104ca:	4798      	blx	r3
 80104cc:	2000      	movs	r0, #0
 80104ce:	e7e0      	b.n	8010492 <_raise_r+0x12>

080104d0 <raise>:
 80104d0:	4b02      	ldr	r3, [pc, #8]	@ (80104dc <raise+0xc>)
 80104d2:	4601      	mov	r1, r0
 80104d4:	6818      	ldr	r0, [r3, #0]
 80104d6:	f7ff bfd3 	b.w	8010480 <_raise_r>
 80104da:	bf00      	nop
 80104dc:	20000174 	.word	0x20000174

080104e0 <_kill_r>:
 80104e0:	b538      	push	{r3, r4, r5, lr}
 80104e2:	4d07      	ldr	r5, [pc, #28]	@ (8010500 <_kill_r+0x20>)
 80104e4:	2300      	movs	r3, #0
 80104e6:	4604      	mov	r4, r0
 80104e8:	4608      	mov	r0, r1
 80104ea:	4611      	mov	r1, r2
 80104ec:	602b      	str	r3, [r5, #0]
 80104ee:	f7f2 f9cb 	bl	8002888 <_kill>
 80104f2:	1c43      	adds	r3, r0, #1
 80104f4:	d102      	bne.n	80104fc <_kill_r+0x1c>
 80104f6:	682b      	ldr	r3, [r5, #0]
 80104f8:	b103      	cbz	r3, 80104fc <_kill_r+0x1c>
 80104fa:	6023      	str	r3, [r4, #0]
 80104fc:	bd38      	pop	{r3, r4, r5, pc}
 80104fe:	bf00      	nop
 8010500:	20004800 	.word	0x20004800

08010504 <_getpid_r>:
 8010504:	f7f2 b9b8 	b.w	8002878 <_getpid>

08010508 <_malloc_usable_size_r>:
 8010508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801050c:	1f18      	subs	r0, r3, #4
 801050e:	2b00      	cmp	r3, #0
 8010510:	bfbc      	itt	lt
 8010512:	580b      	ldrlt	r3, [r1, r0]
 8010514:	18c0      	addlt	r0, r0, r3
 8010516:	4770      	bx	lr

08010518 <__swhatbuf_r>:
 8010518:	b570      	push	{r4, r5, r6, lr}
 801051a:	460c      	mov	r4, r1
 801051c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010520:	2900      	cmp	r1, #0
 8010522:	b096      	sub	sp, #88	@ 0x58
 8010524:	4615      	mov	r5, r2
 8010526:	461e      	mov	r6, r3
 8010528:	da0d      	bge.n	8010546 <__swhatbuf_r+0x2e>
 801052a:	89a3      	ldrh	r3, [r4, #12]
 801052c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010530:	f04f 0100 	mov.w	r1, #0
 8010534:	bf14      	ite	ne
 8010536:	2340      	movne	r3, #64	@ 0x40
 8010538:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801053c:	2000      	movs	r0, #0
 801053e:	6031      	str	r1, [r6, #0]
 8010540:	602b      	str	r3, [r5, #0]
 8010542:	b016      	add	sp, #88	@ 0x58
 8010544:	bd70      	pop	{r4, r5, r6, pc}
 8010546:	466a      	mov	r2, sp
 8010548:	f000 f848 	bl	80105dc <_fstat_r>
 801054c:	2800      	cmp	r0, #0
 801054e:	dbec      	blt.n	801052a <__swhatbuf_r+0x12>
 8010550:	9901      	ldr	r1, [sp, #4]
 8010552:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010556:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801055a:	4259      	negs	r1, r3
 801055c:	4159      	adcs	r1, r3
 801055e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010562:	e7eb      	b.n	801053c <__swhatbuf_r+0x24>

08010564 <__smakebuf_r>:
 8010564:	898b      	ldrh	r3, [r1, #12]
 8010566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010568:	079d      	lsls	r5, r3, #30
 801056a:	4606      	mov	r6, r0
 801056c:	460c      	mov	r4, r1
 801056e:	d507      	bpl.n	8010580 <__smakebuf_r+0x1c>
 8010570:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010574:	6023      	str	r3, [r4, #0]
 8010576:	6123      	str	r3, [r4, #16]
 8010578:	2301      	movs	r3, #1
 801057a:	6163      	str	r3, [r4, #20]
 801057c:	b003      	add	sp, #12
 801057e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010580:	ab01      	add	r3, sp, #4
 8010582:	466a      	mov	r2, sp
 8010584:	f7ff ffc8 	bl	8010518 <__swhatbuf_r>
 8010588:	9f00      	ldr	r7, [sp, #0]
 801058a:	4605      	mov	r5, r0
 801058c:	4639      	mov	r1, r7
 801058e:	4630      	mov	r0, r6
 8010590:	f7ff f906 	bl	800f7a0 <_malloc_r>
 8010594:	b948      	cbnz	r0, 80105aa <__smakebuf_r+0x46>
 8010596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801059a:	059a      	lsls	r2, r3, #22
 801059c:	d4ee      	bmi.n	801057c <__smakebuf_r+0x18>
 801059e:	f023 0303 	bic.w	r3, r3, #3
 80105a2:	f043 0302 	orr.w	r3, r3, #2
 80105a6:	81a3      	strh	r3, [r4, #12]
 80105a8:	e7e2      	b.n	8010570 <__smakebuf_r+0xc>
 80105aa:	89a3      	ldrh	r3, [r4, #12]
 80105ac:	6020      	str	r0, [r4, #0]
 80105ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105b2:	81a3      	strh	r3, [r4, #12]
 80105b4:	9b01      	ldr	r3, [sp, #4]
 80105b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80105ba:	b15b      	cbz	r3, 80105d4 <__smakebuf_r+0x70>
 80105bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105c0:	4630      	mov	r0, r6
 80105c2:	f000 f81d 	bl	8010600 <_isatty_r>
 80105c6:	b128      	cbz	r0, 80105d4 <__smakebuf_r+0x70>
 80105c8:	89a3      	ldrh	r3, [r4, #12]
 80105ca:	f023 0303 	bic.w	r3, r3, #3
 80105ce:	f043 0301 	orr.w	r3, r3, #1
 80105d2:	81a3      	strh	r3, [r4, #12]
 80105d4:	89a3      	ldrh	r3, [r4, #12]
 80105d6:	431d      	orrs	r5, r3
 80105d8:	81a5      	strh	r5, [r4, #12]
 80105da:	e7cf      	b.n	801057c <__smakebuf_r+0x18>

080105dc <_fstat_r>:
 80105dc:	b538      	push	{r3, r4, r5, lr}
 80105de:	4d07      	ldr	r5, [pc, #28]	@ (80105fc <_fstat_r+0x20>)
 80105e0:	2300      	movs	r3, #0
 80105e2:	4604      	mov	r4, r0
 80105e4:	4608      	mov	r0, r1
 80105e6:	4611      	mov	r1, r2
 80105e8:	602b      	str	r3, [r5, #0]
 80105ea:	f7f2 f9ad 	bl	8002948 <_fstat>
 80105ee:	1c43      	adds	r3, r0, #1
 80105f0:	d102      	bne.n	80105f8 <_fstat_r+0x1c>
 80105f2:	682b      	ldr	r3, [r5, #0]
 80105f4:	b103      	cbz	r3, 80105f8 <_fstat_r+0x1c>
 80105f6:	6023      	str	r3, [r4, #0]
 80105f8:	bd38      	pop	{r3, r4, r5, pc}
 80105fa:	bf00      	nop
 80105fc:	20004800 	.word	0x20004800

08010600 <_isatty_r>:
 8010600:	b538      	push	{r3, r4, r5, lr}
 8010602:	4d06      	ldr	r5, [pc, #24]	@ (801061c <_isatty_r+0x1c>)
 8010604:	2300      	movs	r3, #0
 8010606:	4604      	mov	r4, r0
 8010608:	4608      	mov	r0, r1
 801060a:	602b      	str	r3, [r5, #0]
 801060c:	f7f2 f9ac 	bl	8002968 <_isatty>
 8010610:	1c43      	adds	r3, r0, #1
 8010612:	d102      	bne.n	801061a <_isatty_r+0x1a>
 8010614:	682b      	ldr	r3, [r5, #0]
 8010616:	b103      	cbz	r3, 801061a <_isatty_r+0x1a>
 8010618:	6023      	str	r3, [r4, #0]
 801061a:	bd38      	pop	{r3, r4, r5, pc}
 801061c:	20004800 	.word	0x20004800

08010620 <_init>:
 8010620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010622:	bf00      	nop
 8010624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010626:	bc08      	pop	{r3}
 8010628:	469e      	mov	lr, r3
 801062a:	4770      	bx	lr

0801062c <_fini>:
 801062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801062e:	bf00      	nop
 8010630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010632:	bc08      	pop	{r3}
 8010634:	469e      	mov	lr, r3
 8010636:	4770      	bx	lr
