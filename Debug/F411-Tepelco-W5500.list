
F411-Tepelco-W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fef8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  08010098  08010098  00020098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108d8  080108d8  00030198  2**0
                  CONTENTS
  4 .ARM          00000008  080108d8  080108d8  000208d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108e0  080108e0  00030198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108e0  080108e0  000208e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080108e4  080108e4  000208e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  080108e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043f4  20000198  08010a80  00030198  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000458c  08010a80  0003458c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014af3  00000000  00000000  0003020b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c9a  00000000  00000000  00044cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  00047998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd9  00000000  00000000  00048aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018521  00000000  00000000  00049881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000172c8  00000000  00000000  00061da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009366d  00000000  00000000  0007906a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053e8  00000000  00000000  0010c6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00111ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000198 	.word	0x20000198
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010080 	.word	0x08010080

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000019c 	.word	0x2000019c
 80001dc:	08010080 	.word	0x08010080

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000698:	b096      	sub	sp, #88	; 0x58
 800069a:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5500 Environment-------------------------//
	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069c:	4bce      	ldr	r3, [pc, #824]	; (80009d8 <main+0x344>)
 800069e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a2:	22c0      	movs	r2, #192	; 0xc0
 80006a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.GAR[1]=168;
 80006a8:	4bcb      	ldr	r3, [pc, #812]	; (80009d8 <main+0x344>)
 80006aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ae:	22a8      	movs	r2, #168	; 0xa8
 80006b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.GAR[2]=0;
 80006b4:	4bc8      	ldr	r3, [pc, #800]	; (80009d8 <main+0x344>)
 80006b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.GAR[3]=1;
 80006c0:	4bc5      	ldr	r3, [pc, #788]	; (80009d8 <main+0x344>)
 80006c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c6:	2201      	movs	r2, #1
 80006c8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006cc:	4bc2      	ldr	r3, [pc, #776]	; (80009d8 <main+0x344>)
 80006ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d2:	22ff      	movs	r2, #255	; 0xff
 80006d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SUBR[1]=255;
 80006d8:	4bbf      	ldr	r3, [pc, #764]	; (80009d8 <main+0x344>)
 80006da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006de:	22ff      	movs	r2, #255	; 0xff
 80006e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		ETH.SUBR[2]=255;
 80006e4:	4bbc      	ldr	r3, [pc, #752]	; (80009d8 <main+0x344>)
 80006e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ea:	22ff      	movs	r2, #255	; 0xff
 80006ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SUBR[3]=0;
 80006f0:	4bb9      	ldr	r3, [pc, #740]	; (80009d8 <main+0x344>)
 80006f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006fc:	4bb6      	ldr	r3, [pc, #728]	; (80009d8 <main+0x344>)
 80006fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000702:	2200      	movs	r2, #0
 8000704:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SHAR[1]=0x08;
 8000708:	4bb3      	ldr	r3, [pc, #716]	; (80009d8 <main+0x344>)
 800070a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800070e:	2208      	movs	r2, #8
 8000710:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		ETH.SHAR[2]=0xDC;
 8000714:	4bb0      	ldr	r3, [pc, #704]	; (80009d8 <main+0x344>)
 8000716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071a:	22dc      	movs	r2, #220	; 0xdc
 800071c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		ETH.SHAR[3]=0x00;
 8000720:	4bad      	ldr	r3, [pc, #692]	; (80009d8 <main+0x344>)
 8000722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000726:	2200      	movs	r2, #0
 8000728:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		ETH.SHAR[4]=0xC0;
 800072c:	4baa      	ldr	r3, [pc, #680]	; (80009d8 <main+0x344>)
 800072e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000732:	22c0      	movs	r2, #192	; 0xc0
 8000734:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		ETH.SHAR[5]=0x03;
 8000738:	4ba7      	ldr	r3, [pc, #668]	; (80009d8 <main+0x344>)
 800073a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800073e:	2203      	movs	r2, #3
 8000740:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 8000744:	4ba4      	ldr	r3, [pc, #656]	; (80009d8 <main+0x344>)
 8000746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074a:	22c0      	movs	r2, #192	; 0xc0
 800074c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		ETH.SIPR[1]=168;
 8000750:	4ba1      	ldr	r3, [pc, #644]	; (80009d8 <main+0x344>)
 8000752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000756:	22a8      	movs	r2, #168	; 0xa8
 8000758:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		ETH.SIPR[2]=0;
 800075c:	4b9e      	ldr	r3, [pc, #632]	; (80009d8 <main+0x344>)
 800075e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		ETH.SIPR[3]=6,//ETH.SIPR[3]=34,
 8000768:	4b9b      	ldr	r3, [pc, #620]	; (80009d8 <main+0x344>)
 800076a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800076e:	2206      	movs	r2, #6
 8000770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	//  Socket RX memory
		ETH.RMSR=0x55;
 8000774:	4b98      	ldr	r3, [pc, #608]	; (80009d8 <main+0x344>)
 8000776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077a:	2255      	movs	r2, #85	; 0x55
 800077c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	//  Socket TX memory
		ETH.TMSR=0x55;
 8000780:	4b95      	ldr	r3, [pc, #596]	; (80009d8 <main+0x344>)
 8000782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000786:	2255      	movs	r2, #85	; 0x55
 8000788:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	//  S0 Port Number
		ETH.S_PORT[0]=0x01; //01
 800078c:	4b92      	ldr	r3, [pc, #584]	; (80009d8 <main+0x344>)
 800078e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000792:	2201      	movs	r2, #1
 8000794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		ETH.S_PORT[1]=0xF6; //f6
 8000798:	4b8f      	ldr	r3, [pc, #572]	; (80009d8 <main+0x344>)
 800079a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800079e:	22f6      	movs	r2, #246	; 0xf6
 80007a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	//	S0 Client IP ADDRESS
		ETH.S_DIPR[0]=192;
 80007a4:	4b8c      	ldr	r3, [pc, #560]	; (80009d8 <main+0x344>)
 80007a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007aa:	22c0      	movs	r2, #192	; 0xc0
 80007ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		ETH.S_DIPR[1]=168;
 80007b0:	4b89      	ldr	r3, [pc, #548]	; (80009d8 <main+0x344>)
 80007b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007b6:	22a8      	movs	r2, #168	; 0xa8
 80007b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		ETH.S_DIPR[2]=0;
 80007bc:	4b86      	ldr	r3, [pc, #536]	; (80009d8 <main+0x344>)
 80007be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		ETH.S_DIPR[3]=3;
 80007c8:	4b83      	ldr	r3, [pc, #524]	; (80009d8 <main+0x344>)
 80007ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ce:	2203      	movs	r2, #3
 80007d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	//	S0 Client IP ADDRESS
		ETH.S_DPORT[0]=0x01;
 80007d4:	4b80      	ldr	r3, [pc, #512]	; (80009d8 <main+0x344>)
 80007d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007da:	2201      	movs	r2, #1
 80007dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		ETH.S_DPORT[1]=0xF6;
 80007e0:	4b7d      	ldr	r3, [pc, #500]	; (80009d8 <main+0x344>)
 80007e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007e6:	22f6      	movs	r2, #246	; 0xf6
 80007e8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

		ETH.gS_RX_BASE = 0x0000;
 80007ec:	4b7a      	ldr	r3, [pc, #488]	; (80009d8 <main+0x344>)
 80007ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f2:	2200      	movs	r2, #0
 80007f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS_RX_MASK = 0x07FF;
 80007f8:	4b77      	ldr	r3, [pc, #476]	; (80009d8 <main+0x344>)
 80007fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000802:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS1_RX_BASE = 0x6800;
 8000806:	4b74      	ldr	r3, [pc, #464]	; (80009d8 <main+0x344>)
 8000808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800080c:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 8000810:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS1_RX_MASK = 0x07FF;
 8000814:	4b70      	ldr	r3, [pc, #448]	; (80009d8 <main+0x344>)
 8000816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800081a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800081e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS2_RX_BASE = 0x7000;
 8000822:	4b6d      	ldr	r3, [pc, #436]	; (80009d8 <main+0x344>)
 8000824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000828:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800082c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS2_RX_MASK = 0x07FF;
 8000830:	4b69      	ldr	r3, [pc, #420]	; (80009d8 <main+0x344>)
 8000832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000836:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800083a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS3_RX_BASE = 0x7800;
 800083e:	4b66      	ldr	r3, [pc, #408]	; (80009d8 <main+0x344>)
 8000840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000844:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000848:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS3_RX_MASK = 0x07FF;
 800084c:	4b62      	ldr	r3, [pc, #392]	; (80009d8 <main+0x344>)
 800084e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000852:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000856:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS_TX_BASE = 0x0000;
 800085a:	4b5f      	ldr	r3, [pc, #380]	; (80009d8 <main+0x344>)
 800085c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000860:	2200      	movs	r2, #0
 8000862:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS_TX_MASK = 0x07FF;
 8000866:	4b5c      	ldr	r3, [pc, #368]	; (80009d8 <main+0x344>)
 8000868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800086c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000870:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS1_TX_BASE = 0x4800;
 8000874:	4b58      	ldr	r3, [pc, #352]	; (80009d8 <main+0x344>)
 8000876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800087a:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		ETH.gS1_TX_MASK = 0x07FF;
 8000882:	4b55      	ldr	r3, [pc, #340]	; (80009d8 <main+0x344>)
 8000884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000888:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800088c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		ETH.gS2_TX_BASE = 0x5000;
 8000890:	4b51      	ldr	r3, [pc, #324]	; (80009d8 <main+0x344>)
 8000892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000896:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800089a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		ETH.gS2_TX_MASK = 0x07FF;
 800089e:	4b4e      	ldr	r3, [pc, #312]	; (80009d8 <main+0x344>)
 80008a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		ETH.gS3_TX_BASE = 0x5800;
 80008ac:	4b4a      	ldr	r3, [pc, #296]	; (80009d8 <main+0x344>)
 80008ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b2:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b6:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		ETH.gS3_TX_MASK = 0x07FF;
 80008ba:	4b47      	ldr	r3, [pc, #284]	; (80009d8 <main+0x344>)
 80008bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c4:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

		ETH.S_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c8:	4b43      	ldr	r3, [pc, #268]	; (80009d8 <main+0x344>)
 80008ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

		spi_no_debug=1;
 80008d4:	4b41      	ldr	r3, [pc, #260]	; (80009dc <main+0x348>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80008da:	4b3f      	ldr	r3, [pc, #252]	; (80009d8 <main+0x344>)
 80008dc:	4a40      	ldr	r2, [pc, #256]	; (80009e0 <main+0x34c>)
 80008de:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80008e0:	4b3d      	ldr	r3, [pc, #244]	; (80009d8 <main+0x344>)
 80008e2:	2210      	movs	r2, #16
 80008e4:	811a      	strh	r2, [r3, #8]
		ETH.RST_PORT=GPIOB;
 80008e6:	4b3c      	ldr	r3, [pc, #240]	; (80009d8 <main+0x344>)
 80008e8:	4a3e      	ldr	r2, [pc, #248]	; (80009e4 <main+0x350>)
 80008ea:	60da      	str	r2, [r3, #12]
		ETH.RST_PIN=GPIO_PIN_0;
 80008ec:	4b3a      	ldr	r3, [pc, #232]	; (80009d8 <main+0x344>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	821a      	strh	r2, [r3, #16]
		ETH.SPI= &hspi1;
 80008f2:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <main+0x344>)
 80008f4:	4a3c      	ldr	r2, [pc, #240]	; (80009e8 <main+0x354>)
 80008f6:	601a      	str	r2, [r3, #0]
	  //----------------------- ETHERNET W5500 Environment-------------------------//
	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008f8:	483c      	ldr	r0, [pc, #240]	; (80009ec <main+0x358>)
 80008fa:	f005 fdcf 	bl	800649c <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008fe:	493c      	ldr	r1, [pc, #240]	; (80009f0 <main+0x35c>)
 8000900:	483c      	ldr	r0, [pc, #240]	; (80009f4 <main+0x360>)
 8000902:	f00e fbd7 	bl	800f0b4 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 8000906:	493c      	ldr	r1, [pc, #240]	; (80009f8 <main+0x364>)
 8000908:	483c      	ldr	r0, [pc, #240]	; (80009fc <main+0x368>)
 800090a:	f00e fbd3 	bl	800f0b4 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 800090e:	493c      	ldr	r1, [pc, #240]	; (8000a00 <main+0x36c>)
 8000910:	483c      	ldr	r0, [pc, #240]	; (8000a04 <main+0x370>)
 8000912:	f00e fbcf 	bl	800f0b4 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 8000916:	493c      	ldr	r1, [pc, #240]	; (8000a08 <main+0x374>)
 8000918:	483c      	ldr	r0, [pc, #240]	; (8000a0c <main+0x378>)
 800091a:	f00e fbcb 	bl	800f0b4 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 800091e:	493c      	ldr	r1, [pc, #240]	; (8000a10 <main+0x37c>)
 8000920:	483c      	ldr	r0, [pc, #240]	; (8000a14 <main+0x380>)
 8000922:	f00e fbc7 	bl	800f0b4 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 8000926:	493c      	ldr	r1, [pc, #240]	; (8000a18 <main+0x384>)
 8000928:	483c      	ldr	r0, [pc, #240]	; (8000a1c <main+0x388>)
 800092a:	f00e fbc3 	bl	800f0b4 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 800092e:	493c      	ldr	r1, [pc, #240]	; (8000a20 <main+0x38c>)
 8000930:	483c      	ldr	r0, [pc, #240]	; (8000a24 <main+0x390>)
 8000932:	f00e fbbf 	bl	800f0b4 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 8000936:	493c      	ldr	r1, [pc, #240]	; (8000a28 <main+0x394>)
 8000938:	483c      	ldr	r0, [pc, #240]	; (8000a2c <main+0x398>)
 800093a:	f00e fbbb 	bl	800f0b4 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <main+0x358>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000946:	4b29      	ldr	r3, [pc, #164]	; (80009ec <main+0x358>)
 8000948:	2200      	movs	r2, #0
 800094a:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <main+0x358>)
 8000950:	2200      	movs	r2, #0
 8000952:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <main+0x358>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <main+0x358>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <main+0x358>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <main+0x358>)
 8000970:	2206      	movs	r2, #6
 8000972:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <main+0x358>)
 8000978:	2201      	movs	r2, #1
 800097a:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <main+0x358>)
 8000980:	2203      	movs	r2, #3
 8000982:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <main+0x358>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <main+0x358>)
 8000990:	2200      	movs	r2, #0
 8000992:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <main+0x358>)
 8000998:	2200      	movs	r2, #0
 800099a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <main+0x358>)
 80009a0:	220a      	movs	r2, #10
 80009a2:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <main+0x358>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <main+0x358>)
 80009b0:	2233      	movs	r2, #51	; 0x33
 80009b2:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <main+0x358>)
 80009b8:	2234      	movs	r2, #52	; 0x34
 80009ba:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <main+0x358>)
 80009c0:	2235      	movs	r2, #53	; 0x35
 80009c2:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <main+0x358>)
 80009c8:	220c      	movs	r2, #12
 80009ca:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <main+0x358>)
 80009d0:	2264      	movs	r2, #100	; 0x64
 80009d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80009d6:	e02b      	b.n	8000a30 <main+0x39c>
 80009d8:	200002e4 	.word	0x200002e4
 80009dc:	20003fe8 	.word	0x20003fe8
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020400 	.word	0x40020400
 80009e8:	200001b4 	.word	0x200001b4
 80009ec:	200023b4 	.word	0x200023b4
 80009f0:	20000024 	.word	0x20000024
 80009f4:	200023ba 	.word	0x200023ba
 80009f8:	2000002c 	.word	0x2000002c
 80009fc:	200023da 	.word	0x200023da
 8000a00:	20000038 	.word	0x20000038
 8000a04:	200023ea 	.word	0x200023ea
 8000a08:	20000048 	.word	0x20000048
 8000a0c:	200023fa 	.word	0x200023fa
 8000a10:	20000050 	.word	0x20000050
 8000a14:	20002400 	.word	0x20002400
 8000a18:	20000060 	.word	0x20000060
 8000a1c:	20002416 	.word	0x20002416
 8000a20:	20000070 	.word	0x20000070
 8000a24:	20002426 	.word	0x20002426
 8000a28:	20000080 	.word	0x20000080
 8000a2c:	20002410 	.word	0x20002410
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 8000a30:	4b75      	ldr	r3, [pc, #468]	; (8000c08 <main+0x574>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._DBG_EN=1;
 8000a38:	4b73      	ldr	r3, [pc, #460]	; (8000c08 <main+0x574>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
		wf.RESET_PORT=GPIOA;
 8000a40:	4b71      	ldr	r3, [pc, #452]	; (8000c08 <main+0x574>)
 8000a42:	4a72      	ldr	r2, [pc, #456]	; (8000c0c <main+0x578>)
 8000a44:	601a      	str	r2, [r3, #0]
		wf.RESET_PIN=GPIO_PIN_8;
 8000a46:	4b70      	ldr	r3, [pc, #448]	; (8000c08 <main+0x574>)
 8000a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a4c:	809a      	strh	r2, [r3, #4]
	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//
		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a4e:	4870      	ldr	r0, [pc, #448]	; (8000c10 <main+0x57c>)
 8000a50:	f00a fe0c 	bl	800b66c <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a54:	4b6e      	ldr	r3, [pc, #440]	; (8000c10 <main+0x57c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	705a      	strb	r2, [r3, #1]
		ModBUS_Config(&mb_wf);		//WIFI como servidor TCP, recibe comadno ModBUS
 8000a5a:	486e      	ldr	r0, [pc, #440]	; (8000c14 <main+0x580>)
 8000a5c:	f00a fe06 	bl	800b66c <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a60:	4b6c      	ldr	r3, [pc, #432]	; (8000c14 <main+0x580>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	705a      	strb	r2, [r3, #1]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a66:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a6a:	2103      	movs	r1, #3
 8000a6c:	4869      	ldr	r0, [pc, #420]	; (8000c14 <main+0x580>)
 8000a6e:	f00a fea0 	bl	800b7b2 <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a72:	f001 fe83 	bl	800277c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a76:	f000 faad 	bl	8000fd4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a7a:	4b67      	ldr	r3, [pc, #412]	; (8000c18 <main+0x584>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a67      	ldr	r2, [pc, #412]	; (8000c1c <main+0x588>)
 8000a80:	fba2 2303 	umull	r2, r3, r2, r3
 8000a84:	099b      	lsrs	r3, r3, #6
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fdba 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8c:	f000 fc0e 	bl	80012ac <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a90:	f000 fb08 	bl	80010a4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000a94:	f000 fb3c 	bl	8001110 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a98:	f000 fbb4 	bl	8001204 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a9c:	f000 fbdc 	bl	8001258 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000aa0:	210e      	movs	r1, #14
 8000aa2:	485f      	ldr	r0, [pc, #380]	; (8000c20 <main+0x58c>)
 8000aa4:	f000 fca8 	bl	80013f8 <ITM0_Write>
  	  HAL_UART_Transmit_IT(&huart2,"\r\n INICIO OK \r\n",strlen("\r\n INICIO OK \r\n"));
 8000aa8:	220f      	movs	r2, #15
 8000aaa:	495e      	ldr	r1, [pc, #376]	; (8000c24 <main+0x590>)
 8000aac:	485e      	ldr	r0, [pc, #376]	; (8000c28 <main+0x594>)
 8000aae:	f004 fc1d 	bl	80052ec <HAL_UART_Transmit_IT>
	  HW_RESET(&wf);
 8000ab2:	4855      	ldr	r0, [pc, #340]	; (8000c08 <main+0x574>)
 8000ab4:	f005 fbee 	bl	8006294 <HW_RESET>

	  if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000ab8:	4b53      	ldr	r3, [pc, #332]	; (8000c08 <main+0x574>)
 8000aba:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <main+0x436>
 8000ac2:	2113      	movs	r1, #19
 8000ac4:	4859      	ldr	r0, [pc, #356]	; (8000c2c <main+0x598>)
 8000ac6:	f000 fc97 	bl	80013f8 <ITM0_Write>
	  HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000aca:	2201      	movs	r2, #1
 8000acc:	4958      	ldr	r1, [pc, #352]	; (8000c30 <main+0x59c>)
 8000ace:	4859      	ldr	r0, [pc, #356]	; (8000c34 <main+0x5a0>)
 8000ad0:	f004 fc51 	bl	8005376 <HAL_UART_Receive_IT>

	  if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5500 \r\n",strlen("\r\n SET-UP W5500 \r\n"));
 8000ad4:	4b58      	ldr	r3, [pc, #352]	; (8000c38 <main+0x5a4>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <main+0x450>
 8000adc:	2112      	movs	r1, #18
 8000ade:	4857      	ldr	r0, [pc, #348]	; (8000c3c <main+0x5a8>)
 8000ae0:	f000 fc8a 	bl	80013f8 <ITM0_Write>


      SPI_ETH_PHY_RESET(&ETH);
 8000ae4:	4856      	ldr	r0, [pc, #344]	; (8000c40 <main+0x5ac>)
 8000ae6:	f00c f91d 	bl	800cd24 <SPI_ETH_PHY_RESET>
      HAL_Delay(800);
 8000aea:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000aee:	f001 feb7 	bl	8002860 <HAL_Delay>
      eth_init(&ETH);
 8000af2:	4853      	ldr	r0, [pc, #332]	; (8000c40 <main+0x5ac>)
 8000af4:	f00c fb00 	bl	800d0f8 <eth_init>
      SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000af8:	4951      	ldr	r1, [pc, #324]	; (8000c40 <main+0x5ac>)
 8000afa:	4852      	ldr	r0, [pc, #328]	; (8000c44 <main+0x5b0>)
 8000afc:	f00c fe81 	bl	800d802 <SPI_ETH_SNIFF>
      HAL_Delay(800);
 8000b00:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000b04:	f001 feac 	bl	8002860 <HAL_Delay>
   	  eth_socket_init(&ETH,S0_REG);
 8000b08:	2101      	movs	r1, #1
 8000b0a:	484d      	ldr	r0, [pc, #308]	; (8000c40 <main+0x5ac>)
 8000b0c:	f00c fbc6 	bl	800d29c <eth_socket_init>

   	  SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b10:	494b      	ldr	r1, [pc, #300]	; (8000c40 <main+0x5ac>)
 8000b12:	484c      	ldr	r0, [pc, #304]	; (8000c44 <main+0x5b0>)
 8000b14:	f00c fe75 	bl	800d802 <SPI_ETH_SNIFF>

	 uint16_t b=0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	83fb      	strh	r3, [r7, #30]
	 uint8_t spi_Data[2];
	 b = SPI_ETH_REG(&ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2300      	movs	r3, #0
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2124      	movs	r1, #36	; 0x24
 8000b2c:	4844      	ldr	r0, [pc, #272]	; (8000c40 <main+0x5ac>)
 8000b2e:	f00c f950 	bl	800cdd2 <SPI_ETH_REG>
 8000b32:	4603      	mov	r3, r0
 8000b34:	83fb      	strh	r3, [r7, #30]

	 eth_wr_SOCKET_MODE(&ETH,S0_REG,MODE_TCP);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4841      	ldr	r0, [pc, #260]	; (8000c40 <main+0x5ac>)
 8000b3c:	f00c faba 	bl	800d0b4 <eth_wr_SOCKET_MODE>
   	 SPI_ETH_REG(&ETH, S_DIPR, S0_REG,SPI_WRITE, ETH.S_DIPR,4);									// client
 8000b40:	2304      	movs	r3, #4
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	4b40      	ldr	r3, [pc, #256]	; (8000c48 <main+0x5b4>)
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	210c      	movs	r1, #12
 8000b4e:	483c      	ldr	r0, [pc, #240]	; (8000c40 <main+0x5ac>)
 8000b50:	f00c f93f 	bl	800cdd2 <SPI_ETH_REG>
   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 8000b54:	212e      	movs	r1, #46	; 0x2e
 8000b56:	483d      	ldr	r0, [pc, #244]	; (8000c4c <main+0x5b8>)
 8000b58:	f000 fc4e 	bl	80013f8 <ITM0_Write>
   	 SPI_ETH_REG(&ETH, S_DPORT, S0_REG,SPI_WRITE, ETH.S_DPORT,2);									// client
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	9301      	str	r3, [sp, #4]
 8000b60:	4b3b      	ldr	r3, [pc, #236]	; (8000c50 <main+0x5bc>)
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	2301      	movs	r3, #1
 8000b66:	2201      	movs	r2, #1
 8000b68:	2110      	movs	r1, #16
 8000b6a:	4835      	ldr	r0, [pc, #212]	; (8000c40 <main+0x5ac>)
 8000b6c:	f00c f931 	bl	800cdd2 <SPI_ETH_REG>
   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 8000b70:	2120      	movs	r1, #32
 8000b72:	4838      	ldr	r0, [pc, #224]	; (8000c54 <main+0x5c0>)
 8000b74:	f000 fc40 	bl	80013f8 <ITM0_Write>

   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b78:	4931      	ldr	r1, [pc, #196]	; (8000c40 <main+0x5ac>)
 8000b7a:	4832      	ldr	r0, [pc, #200]	; (8000c44 <main+0x5b0>)
 8000b7c:	f00c fe41 	bl	800d802 <SPI_ETH_SNIFF>

   	 eth_wr_SOCKET_CMD(&ETH, S0_REG,OPEN );
 8000b80:	2201      	movs	r2, #1
 8000b82:	2101      	movs	r1, #1
 8000b84:	482e      	ldr	r0, [pc, #184]	; (8000c40 <main+0x5ac>)
 8000b86:	f00c fa73 	bl	800d070 <eth_wr_SOCKET_CMD>

   	 HAL_Delay(1000);
 8000b8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b8e:	f001 fe67 	bl	8002860 <HAL_Delay>

   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b92:	492b      	ldr	r1, [pc, #172]	; (8000c40 <main+0x5ac>)
 8000b94:	482b      	ldr	r0, [pc, #172]	; (8000c44 <main+0x5b0>)
 8000b96:	f00c fe34 	bl	800d802 <SPI_ETH_SNIFF>

	 //SPI_READ_EN=1;
   	 //------------------------ RUN ESP -----------------------------------//
     if(ESP8266_HW_Init(&huart1)==1)
 8000b9a:	4826      	ldr	r0, [pc, #152]	; (8000c34 <main+0x5a0>)
 8000b9c:	f001 faa2 	bl	80020e4 <ESP8266_HW_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d111      	bne.n	8000bca <main+0x536>
     {
		  ESP_HW_Init=1;
 8000ba6:	4b2c      	ldr	r3, [pc, #176]	; (8000c58 <main+0x5c4>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <main+0x574>)
 8000bae:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <main+0x52a>
 8000bb6:	2113      	movs	r1, #19
 8000bb8:	4828      	ldr	r0, [pc, #160]	; (8000c5c <main+0x5c8>)
 8000bba:	f000 fc1d 	bl	80013f8 <ITM0_Write>
		  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000bbe:	2213      	movs	r2, #19
 8000bc0:	4926      	ldr	r1, [pc, #152]	; (8000c5c <main+0x5c8>)
 8000bc2:	4819      	ldr	r0, [pc, #100]	; (8000c28 <main+0x594>)
 8000bc4:	f004 fb92 	bl	80052ec <HAL_UART_Transmit_IT>
 8000bc8:	e05f      	b.n	8000c8a <main+0x5f6>
     }
     else
     {

    	 HW_RESET(&wf);
 8000bca:	480f      	ldr	r0, [pc, #60]	; (8000c08 <main+0x574>)
 8000bcc:	f005 fb62 	bl	8006294 <HW_RESET>
		 ESP_REinit=0;
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <main+0x5cc>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
			  if(ESP8266_HW_Init(&huart1)==1)
 8000bd6:	4817      	ldr	r0, [pc, #92]	; (8000c34 <main+0x5a0>)
 8000bd8:	f001 fa84 	bl	80020e4 <ESP8266_HW_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d142      	bne.n	8000c68 <main+0x5d4>
				  {
					  ESP_HW_Init=1;
 8000be2:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <main+0x5c4>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	701a      	strb	r2, [r3, #0]
					  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <main+0x574>)
 8000bea:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <main+0x566>
 8000bf2:	2113      	movs	r1, #19
 8000bf4:	4819      	ldr	r0, [pc, #100]	; (8000c5c <main+0x5c8>)
 8000bf6:	f000 fbff 	bl	80013f8 <ITM0_Write>
					  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init2 OK\r\n",strlen("\r\n ESP HW Init2 OK\r\n"));
 8000bfa:	2214      	movs	r2, #20
 8000bfc:	4919      	ldr	r1, [pc, #100]	; (8000c64 <main+0x5d0>)
 8000bfe:	480a      	ldr	r0, [pc, #40]	; (8000c28 <main+0x594>)
 8000c00:	f004 fb74 	bl	80052ec <HAL_UART_Transmit_IT>
 8000c04:	e041      	b.n	8000c8a <main+0x5f6>
 8000c06:	bf00      	nop
 8000c08:	200023b4 	.word	0x200023b4
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	20003100 	.word	0x20003100
 8000c14:	2000364c 	.word	0x2000364c
 8000c18:	20000084 	.word	0x20000084
 8000c1c:	10624dd3 	.word	0x10624dd3
 8000c20:	08010098 	.word	0x08010098
 8000c24:	080100a8 	.word	0x080100a8
 8000c28:	20000298 	.word	0x20000298
 8000c2c:	080100b8 	.word	0x080100b8
 8000c30:	20004400 	.word	0x20004400
 8000c34:	20000254 	.word	0x20000254
 8000c38:	20003f98 	.word	0x20003f98
 8000c3c:	080100cc 	.word	0x080100cc
 8000c40:	200002e4 	.word	0x200002e4
 8000c44:	20001358 	.word	0x20001358
 8000c48:	20001328 	.word	0x20001328
 8000c4c:	080100e0 	.word	0x080100e0
 8000c50:	2000132c 	.word	0x2000132c
 8000c54:	08010110 	.word	0x08010110
 8000c58:	20003feb 	.word	0x20003feb
 8000c5c:	08010134 	.word	0x08010134
 8000c60:	20003fe9 	.word	0x20003fe9
 8000c64:	08010148 	.word	0x08010148
				  }
				  else
				  {
					  ESP_HW_Init=0;
 8000c68:	4bac      	ldr	r3, [pc, #688]	; (8000f1c <main+0x888>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
					  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000c6e:	4bac      	ldr	r3, [pc, #688]	; (8000f20 <main+0x88c>)
 8000c70:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d003      	beq.n	8000c80 <main+0x5ec>
 8000c78:	2115      	movs	r1, #21
 8000c7a:	48aa      	ldr	r0, [pc, #680]	; (8000f24 <main+0x890>)
 8000c7c:	f000 fbbc 	bl	80013f8 <ITM0_Write>
					  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Fail\r\n",strlen("\r\n ESP HW Fail\r\n"));
 8000c80:	2210      	movs	r2, #16
 8000c82:	49a9      	ldr	r1, [pc, #676]	; (8000f28 <main+0x894>)
 8000c84:	48a9      	ldr	r0, [pc, #676]	; (8000f2c <main+0x898>)
 8000c86:	f004 fb31 	bl	80052ec <HAL_UART_Transmit_IT>
				  }
     }
     //------------------------ RUN ESP -----------------------------------//

     HAL_Delay(1000);
 8000c8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c8e:	f001 fde7 	bl	8002860 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 SPI_READ_EN=1;
 8000c92:	4ba7      	ldr	r3, [pc, #668]	; (8000f30 <main+0x89c>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	601a      	str	r2, [r3, #0]





		  	  if (ESP_HW_Init==1)
 8000c98:	4ba0      	ldr	r3, [pc, #640]	; (8000f1c <main+0x888>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	f040 80ab 	bne.w	8000df8 <main+0x764>
		  	  {
		  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S_data_available))
 8000ca2:	4ba4      	ldr	r3, [pc, #656]	; (8000f34 <main+0x8a0>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	f040 80a6 	bne.w	8000df8 <main+0x764>
 8000cac:	4b9c      	ldr	r3, [pc, #624]	; (8000f20 <main+0x88c>)
 8000cae:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 80a0 	bne.w	8000df8 <main+0x764>
 8000cb8:	4b99      	ldr	r3, [pc, #612]	; (8000f20 <main+0x88c>)
 8000cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cbe:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000cc2:	f340 8099 	ble.w	8000df8 <main+0x764>
 8000cc6:	4b9c      	ldr	r3, [pc, #624]	; (8000f38 <main+0x8a4>)
 8000cc8:	7e9b      	ldrb	r3, [r3, #26]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 8094 	beq.w	8000df8 <main+0x764>
		  			{	ETH.S_data_available=0;
 8000cd0:	4b99      	ldr	r3, [pc, #612]	; (8000f38 <main+0x8a4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	769a      	strb	r2, [r3, #26]
		  				wf_snd_flag_ticks=0;
 8000cd6:	4b99      	ldr	r3, [pc, #612]	; (8000f3c <main+0x8a8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
		  				WF_SND_FLAG=0;
 8000cdc:	4b95      	ldr	r3, [pc, #596]	; (8000f34 <main+0x8a0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
		  				HAL_UART_Transmit_IT(&huart2,"\r\n ENTER TO SEND DATA \r\n",strlen("\r\n ENTER TO SEND DATA \r\n"));
 8000ce2:	2218      	movs	r2, #24
 8000ce4:	4996      	ldr	r1, [pc, #600]	; (8000f40 <main+0x8ac>)
 8000ce6:	4891      	ldr	r0, [pc, #580]	; (8000f2c <main+0x898>)
 8000ce8:	f004 fb00 	bl	80052ec <HAL_UART_Transmit_IT>
		  				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000cec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf0:	4894      	ldr	r0, [pc, #592]	; (8000f44 <main+0x8b0>)
 8000cf2:	f002 fa30 	bl	8003156 <HAL_GPIO_TogglePin>
		  				ITM0_Write("\r\n#RED#WF-SE GENERA INFO Y ENVIA\r\n",strlen("\r\n#RED#WF-SE GENERA INFO Y ENVIA\r\n"));
 8000cf6:	2122      	movs	r1, #34	; 0x22
 8000cf8:	4893      	ldr	r0, [pc, #588]	; (8000f48 <main+0x8b4>)
 8000cfa:	f000 fb7d 	bl	80013f8 <ITM0_Write>

		  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4892      	ldr	r0, [pc, #584]	; (8000f4c <main+0x8b8>)
 8000d02:	f00a fd84 	bl	800b80e <ModBUS_F03_Read>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4698      	mov	r8, r3
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	488f      	ldr	r0, [pc, #572]	; (8000f4c <main+0x8b8>)
 8000d0e:	f00a fd7e 	bl	800b80e <ModBUS_F03_Read>
 8000d12:	4603      	mov	r3, r0
 8000d14:	461c      	mov	r4, r3
 8000d16:	2102      	movs	r1, #2
 8000d18:	488c      	ldr	r0, [pc, #560]	; (8000f4c <main+0x8b8>)
 8000d1a:	f00a fd78 	bl	800b80e <ModBUS_F03_Read>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	461d      	mov	r5, r3
 8000d22:	2103      	movs	r1, #3
 8000d24:	4889      	ldr	r0, [pc, #548]	; (8000f4c <main+0x8b8>)
 8000d26:	f00a fd72 	bl	800b80e <ModBUS_F03_Read>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461e      	mov	r6, r3
 8000d2e:	2104      	movs	r1, #4
 8000d30:	4886      	ldr	r0, [pc, #536]	; (8000f4c <main+0x8b8>)
 8000d32:	f00a fd6c 	bl	800b80e <ModBUS_F03_Read>
 8000d36:	4603      	mov	r3, r0
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	2105      	movs	r1, #5
 8000d3c:	4883      	ldr	r0, [pc, #524]	; (8000f4c <main+0x8b8>)
 8000d3e:	f00a fd66 	bl	800b80e <ModBUS_F03_Read>
 8000d42:	4603      	mov	r3, r0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	2106      	movs	r1, #6
 8000d48:	4880      	ldr	r0, [pc, #512]	; (8000f4c <main+0x8b8>)
 8000d4a:	f00a fd60 	bl	800b80e <ModBUS_F03_Read>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	2107      	movs	r1, #7
 8000d54:	487d      	ldr	r0, [pc, #500]	; (8000f4c <main+0x8b8>)
 8000d56:	f00a fd5a 	bl	800b80e <ModBUS_F03_Read>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	2108      	movs	r1, #8
 8000d60:	487a      	ldr	r0, [pc, #488]	; (8000f4c <main+0x8b8>)
 8000d62:	f00a fd54 	bl	800b80e <ModBUS_F03_Read>
 8000d66:	4603      	mov	r3, r0
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	2109      	movs	r1, #9
 8000d6c:	4877      	ldr	r0, [pc, #476]	; (8000f4c <main+0x8b8>)
 8000d6e:	f00a fd4e 	bl	800b80e <ModBUS_F03_Read>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d7a:	930c      	str	r3, [sp, #48]	; 0x30
 8000d7c:	4b74      	ldr	r3, [pc, #464]	; (8000f50 <main+0x8bc>)
 8000d7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8000d80:	4b74      	ldr	r3, [pc, #464]	; (8000f54 <main+0x8c0>)
 8000d82:	930a      	str	r3, [sp, #40]	; 0x28
 8000d84:	2302      	movs	r3, #2
 8000d86:	9309      	str	r3, [sp, #36]	; 0x24
 8000d88:	9208      	str	r2, [sp, #32]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	9207      	str	r2, [sp, #28]
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	9206      	str	r2, [sp, #24]
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	9205      	str	r2, [sp, #20]
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	9204      	str	r2, [sp, #16]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	9303      	str	r3, [sp, #12]
 8000d9e:	9602      	str	r6, [sp, #8]
 8000da0:	9501      	str	r5, [sp, #4]
 8000da2:	9400      	str	r4, [sp, #0]
 8000da4:	4643      	mov	r3, r8
 8000da6:	4a6c      	ldr	r2, [pc, #432]	; (8000f58 <main+0x8c4>)
 8000da8:	496c      	ldr	r1, [pc, #432]	; (8000f5c <main+0x8c8>)
 8000daa:	486d      	ldr	r0, [pc, #436]	; (8000f60 <main+0x8cc>)
 8000dac:	f00a f9ae 	bl	800b10c <httpPOST>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d020      	beq.n	8000df8 <main+0x764>
		  								ModBUS_F03_Read(&mb_eth,8),
										ModBUS_F03_Read(&mb_eth,9),TEST_2,//ModBUS_F03_Read(&mb_eth,9),TEPELCO,
		  								post, body, 512))

		  				{
		  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000db6:	4867      	ldr	r0, [pc, #412]	; (8000f54 <main+0x8c0>)
 8000db8:	f7ff fa1c 	bl	80001f4 <strlen>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	2341      	movs	r3, #65	; 0x41
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	4963      	ldr	r1, [pc, #396]	; (8000f54 <main+0x8c0>)
 8000dc8:	4866      	ldr	r0, [pc, #408]	; (8000f64 <main+0x8d0>)
 8000dca:	f00d fe9b 	bl	800eb04 <CopiaVector>
		  							wf._n_D2SND=strlen(post);
 8000dce:	4861      	ldr	r0, [pc, #388]	; (8000f54 <main+0x8c0>)
 8000dd0:	f7ff fa10 	bl	80001f4 <strlen>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4b51      	ldr	r3, [pc, #324]	; (8000f20 <main+0x88c>)
 8000dda:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000dde:	4b50      	ldr	r3, [pc, #320]	; (8000f20 <main+0x88c>)
 8000de0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d807      	bhi.n	8000df8 <main+0x764>
		  							{
		  								EnviarDatos(&wf);
 8000de8:	484d      	ldr	r0, [pc, #308]	; (8000f20 <main+0x88c>)
 8000dea:	f005 fb41 	bl	8006470 <EnviarDatos>
		  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000dee:	4b4c      	ldr	r3, [pc, #304]	; (8000f20 <main+0x88c>)
 8000df0:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000df4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		  				}
		  			}
		  	  }
		  /**************[ FIN PIDO ENVIAR DATOS ]**************/

		  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000df8:	4b5b      	ldr	r3, [pc, #364]	; (8000f68 <main+0x8d4>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d003      	beq.n	8000e08 <main+0x774>
 8000e00:	4b5a      	ldr	r3, [pc, #360]	; (8000f6c <main+0x8d8>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d175      	bne.n	8000ef4 <main+0x860>
		  		{
		  			if(FLAG_UART1==1)
 8000e08:	4b57      	ldr	r3, [pc, #348]	; (8000f68 <main+0x8d4>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d11c      	bne.n	8000e4a <main+0x7b6>
		  				{
		  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000e10:	4b57      	ldr	r3, [pc, #348]	; (8000f70 <main+0x8dc>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b57      	ldr	r3, [pc, #348]	; (8000f74 <main+0x8e0>)
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	4957      	ldr	r1, [pc, #348]	; (8000f78 <main+0x8e4>)
 8000e1c:	4857      	ldr	r0, [pc, #348]	; (8000f7c <main+0x8e8>)
 8000e1e:	f00d fe71 	bl	800eb04 <CopiaVector>
		  					FLAG_UART1=0;
 8000e22:	4b51      	ldr	r3, [pc, #324]	; (8000f68 <main+0x8d4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]

		  						if (error_rxdata==3)
 8000e28:	4b55      	ldr	r3, [pc, #340]	; (8000f80 <main+0x8ec>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d102      	bne.n	8000e36 <main+0x7a2>
		  						{
		  							error_rxdata=0;
 8000e30:	4b53      	ldr	r3, [pc, #332]	; (8000f80 <main+0x8ec>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
		  						}
		  						if (error_rxdata==1)
 8000e36:	4b52      	ldr	r3, [pc, #328]	; (8000f80 <main+0x8ec>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d105      	bne.n	8000e4a <main+0x7b6>
		  						{
		  							error_rxdata=5;
 8000e3e:	4b50      	ldr	r3, [pc, #320]	; (8000f80 <main+0x8ec>)
 8000e40:	2205      	movs	r2, #5
 8000e42:	701a      	strb	r2, [r3, #0]
		  							error_rxdata=0;
 8000e44:	4b4e      	ldr	r3, [pc, #312]	; (8000f80 <main+0x8ec>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
		  						}
		  				}
		  			if(FLAG_TIMEOUT==1)
 8000e4a:	4b48      	ldr	r3, [pc, #288]	; (8000f6c <main+0x8d8>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d102      	bne.n	8000e58 <main+0x7c4>
		  					{
		  						FLAG_TIMEOUT=0;
 8000e52:	4b46      	ldr	r3, [pc, #280]	; (8000f6c <main+0x8d8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
		  					}

		  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000e58:	4b30      	ldr	r3, [pc, #192]	; (8000f1c <main+0x888>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d149      	bne.n	8000ef4 <main+0x860>
		  				{
		  					/*************** Copio y proceso info recibida ***************/
		  					wf._n_orig=UART_RX_items;
 8000e60:	4b43      	ldr	r3, [pc, #268]	; (8000f70 <main+0x8dc>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a2e      	ldr	r2, [pc, #184]	; (8000f20 <main+0x88c>)
 8000e66:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
		  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000e6a:	4b41      	ldr	r3, [pc, #260]	; (8000f70 <main+0x8dc>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4b41      	ldr	r3, [pc, #260]	; (8000f74 <main+0x8e0>)
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	2301      	movs	r3, #1
 8000e74:	4940      	ldr	r1, [pc, #256]	; (8000f78 <main+0x8e4>)
 8000e76:	4841      	ldr	r0, [pc, #260]	; (8000f7c <main+0x8e8>)
 8000e78:	f00d fe44 	bl	800eb04 <CopiaVector>
		  					resultado=AT_ESP8266_ND(&wf);
 8000e7c:	4828      	ldr	r0, [pc, #160]	; (8000f20 <main+0x88c>)
 8000e7e:	f005 fbd7 	bl	8006630 <AT_ESP8266_ND>
 8000e82:	4603      	mov	r3, r0
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b3f      	ldr	r3, [pc, #252]	; (8000f84 <main+0x8f0>)
 8000e88:	701a      	strb	r2, [r3, #0]

		  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

		  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000e8a:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <main+0x88c>)
 8000e8c:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d12f      	bne.n	8000ef4 <main+0x860>
 8000e94:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <main+0x88c>)
 8000e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e9a:	2b63      	cmp	r3, #99	; 0x63
 8000e9c:	d12a      	bne.n	8000ef4 <main+0x860>
		  					{

		  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000e9e:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <main+0x88c>)
 8000ea0:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000ea4:	2341      	movs	r3, #65	; 0x41
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	4937      	ldr	r1, [pc, #220]	; (8000f88 <main+0x8f4>)
 8000eac:	4837      	ldr	r0, [pc, #220]	; (8000f8c <main+0x8f8>)
 8000eae:	f00d fe29 	bl	800eb04 <CopiaVector>
		  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <main+0x88c>)
 8000eb4:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000eb8:	4a35      	ldr	r2, [pc, #212]	; (8000f90 <main+0x8fc>)
 8000eba:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190

		  						ModBUS(&mb_wf);
 8000ebe:	4834      	ldr	r0, [pc, #208]	; (8000f90 <main+0x8fc>)
 8000ec0:	f00a fd2a 	bl	800b918 <ModBUS>

		  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000ec4:	4b32      	ldr	r3, [pc, #200]	; (8000f90 <main+0x8fc>)
 8000ec6:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8000eca:	2341      	movs	r3, #65	; 0x41
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	4930      	ldr	r1, [pc, #192]	; (8000f94 <main+0x900>)
 8000ed2:	4824      	ldr	r0, [pc, #144]	; (8000f64 <main+0x8d0>)
 8000ed4:	f00d fe16 	bl	800eb04 <CopiaVector>
		  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000ed8:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <main+0x8fc>)
 8000eda:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8000ede:	4a10      	ldr	r2, [pc, #64]	; (8000f20 <main+0x88c>)
 8000ee0:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
		  						wf._new_data_rcv=0;//
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <main+0x88c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
		  						wf._send_data=1;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <main+0x88c>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
		  						}
		  					}

		  		}

		  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <main+0x888>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d108      	bne.n	8000f0e <main+0x87a>
		  			{
		  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000efc:	2201      	movs	r2, #1
 8000efe:	4926      	ldr	r1, [pc, #152]	; (8000f98 <main+0x904>)
 8000f00:	4807      	ldr	r0, [pc, #28]	; (8000f20 <main+0x88c>)
 8000f02:	f008 fc95 	bl	8009830 <WiFi_Conn_ND>
 8000f06:	4603      	mov	r3, r0
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <main+0x908>)
 8000f0c:	701a      	strb	r2, [r3, #0]

		  			}
		  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <main+0x90c>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	f47f aebd 	bne.w	8000c92 <main+0x5fe>
 8000f18:	e044      	b.n	8000fa4 <main+0x910>
 8000f1a:	bf00      	nop
 8000f1c:	20003feb 	.word	0x20003feb
 8000f20:	200023b4 	.word	0x200023b4
 8000f24:	08010160 	.word	0x08010160
 8000f28:	08010178 	.word	0x08010178
 8000f2c:	20000298 	.word	0x20000298
 8000f30:	20003ff8 	.word	0x20003ff8
 8000f34:	20003f99 	.word	0x20003f99
 8000f38:	200002e4 	.word	0x200002e4
 8000f3c:	20003f9c 	.word	0x20003f9c
 8000f40:	0801018c 	.word	0x0801018c
 8000f44:	40020800 	.word	0x40020800
 8000f48:	080101a8 	.word	0x080101a8
 8000f4c:	20003100 	.word	0x20003100
 8000f50:	20003d98 	.word	0x20003d98
 8000f54:	20003b98 	.word	0x20003b98
 8000f58:	2000001c 	.word	0x2000001c
 8000f5c:	2000000c 	.word	0x2000000c
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20002648 	.word	0x20002648
 8000f68:	20003fef 	.word	0x20003fef
 8000f6c:	20003fee 	.word	0x20003fee
 8000f70:	20004404 	.word	0x20004404
 8000f74:	200043fc 	.word	0x200043fc
 8000f78:	200041fc 	.word	0x200041fc
 8000f7c:	20002a48 	.word	0x20002a48
 8000f80:	20003ff1 	.word	0x20003ff1
 8000f84:	20003ff0 	.word	0x20003ff0
 8000f88:	20002448 	.word	0x20002448
 8000f8c:	20003659 	.word	0x20003659
 8000f90:	2000364c 	.word	0x2000364c
 8000f94:	200037e0 	.word	0x200037e0
 8000f98:	20000254 	.word	0x20000254
 8000f9c:	20003ff3 	.word	0x20003ff3
 8000fa0:	20003ff2 	.word	0x20003ff2
		  			{

		  				HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Resetting \r\n",strlen("\r\n ESP HW Resetting \r\n"));
 8000fa4:	2216      	movs	r2, #22
 8000fa6:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <main+0x930>)
 8000fa8:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <main+0x934>)
 8000faa:	f004 f99f 	bl	80052ec <HAL_UART_Transmit_IT>
		  				HW_RESET(&wf);
 8000fae:	4807      	ldr	r0, [pc, #28]	; (8000fcc <main+0x938>)
 8000fb0:	f005 f970 	bl	8006294 <HW_RESET>
		  				HAL_Delay(5000);//210419
 8000fb4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fb8:	f001 fc52 	bl	8002860 <HAL_Delay>
		  				esp_restart=0;
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <main+0x93c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
		 SPI_READ_EN=1;
 8000fc2:	e666      	b.n	8000c92 <main+0x5fe>
 8000fc4:	080101cc 	.word	0x080101cc
 8000fc8:	20000298 	.word	0x20000298
 8000fcc:	200023b4 	.word	0x200023b4
 8000fd0:	20003ff2 	.word	0x20003ff2

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b094      	sub	sp, #80	; 0x50
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	2230      	movs	r2, #48	; 0x30
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f00d ff7d 	bl	800eee2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	4b27      	ldr	r3, [pc, #156]	; (800109c <SystemClock_Config+0xc8>)
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	4a26      	ldr	r2, [pc, #152]	; (800109c <SystemClock_Config+0xc8>)
 8001002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001006:	6413      	str	r3, [r2, #64]	; 0x40
 8001008:	4b24      	ldr	r3, [pc, #144]	; (800109c <SystemClock_Config+0xc8>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <SystemClock_Config+0xcc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a20      	ldr	r2, [pc, #128]	; (80010a0 <SystemClock_Config+0xcc>)
 800101e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <SystemClock_Config+0xcc>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001030:	2301      	movs	r3, #1
 8001032:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103a:	2302      	movs	r3, #2
 800103c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001044:	230c      	movs	r3, #12
 8001046:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001048:	2360      	movs	r3, #96	; 0x60
 800104a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800104c:	2302      	movs	r3, #2
 800104e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001050:	2304      	movs	r3, #4
 8001052:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001054:	f107 0320 	add.w	r3, r7, #32
 8001058:	4618      	mov	r0, r3
 800105a:	f002 f897 	bl	800318c <HAL_RCC_OscConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001064:	f001 f8e8 	bl	8002238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	230f      	movs	r3, #15
 800106a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106c:	2302      	movs	r3, #2
 800106e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001078:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	2103      	movs	r1, #3
 8001084:	4618      	mov	r0, r3
 8001086:	f002 faf9 	bl	800367c <HAL_RCC_ClockConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001090:	f001 f8d2 	bl	8002238 <Error_Handler>
  }
}
 8001094:	bf00      	nop
 8001096:	3750      	adds	r7, #80	; 0x50
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000

080010a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <MX_SPI1_Init+0x64>)
 80010aa:	4a18      	ldr	r2, [pc, #96]	; (800110c <MX_SPI1_Init+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <MX_SPI1_Init+0x64>)
 80010b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <MX_SPI1_Init+0x64>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <MX_SPI1_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_SPI1_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <MX_SPI1_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_SPI1_Init+0x64>)
 80010d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_SPI1_Init+0x64>)
 80010d8:	2208      	movs	r2, #8
 80010da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <MX_SPI1_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_SPI1_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <MX_SPI1_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_SPI1_Init+0x64>)
 80010f0:	220a      	movs	r2, #10
 80010f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_SPI1_Init+0x64>)
 80010f6:	f002 fca1 	bl	8003a3c <HAL_SPI_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001100:	f001 f89a 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200001b4 	.word	0x200001b4
 800110c:	40013000 	.word	0x40013000

08001110 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08e      	sub	sp, #56	; 0x38
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	f107 0320 	add.w	r3, r7, #32
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	615a      	str	r2, [r3, #20]
 800113e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001140:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <MX_TIM2_Init+0xf0>)
 8001142:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001146:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001148:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <MX_TIM2_Init+0xf0>)
 800114a:	2264      	movs	r2, #100	; 0x64
 800114c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114e:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <MX_TIM2_Init+0xf0>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001154:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <MX_TIM2_Init+0xf0>)
 8001156:	2264      	movs	r2, #100	; 0x64
 8001158:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115a:	4b29      	ldr	r3, [pc, #164]	; (8001200 <MX_TIM2_Init+0xf0>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <MX_TIM2_Init+0xf0>)
 8001162:	2280      	movs	r2, #128	; 0x80
 8001164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001166:	4826      	ldr	r0, [pc, #152]	; (8001200 <MX_TIM2_Init+0xf0>)
 8001168:	f002 ff5e 	bl	8004028 <HAL_TIM_Base_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001172:	f001 f861 	bl	8002238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800117c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001180:	4619      	mov	r1, r3
 8001182:	481f      	ldr	r0, [pc, #124]	; (8001200 <MX_TIM2_Init+0xf0>)
 8001184:	f003 fb66 	bl	8004854 <HAL_TIM_ConfigClockSource>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800118e:	f001 f853 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001192:	481b      	ldr	r0, [pc, #108]	; (8001200 <MX_TIM2_Init+0xf0>)
 8001194:	f002 ff97 	bl	80040c6 <HAL_TIM_OC_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800119e:	f001 f84b 	bl	8002238 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80011a2:	2108      	movs	r1, #8
 80011a4:	4816      	ldr	r0, [pc, #88]	; (8001200 <MX_TIM2_Init+0xf0>)
 80011a6:	f003 f997 	bl	80044d8 <HAL_TIM_OnePulse_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80011b0:	f001 f842 	bl	8002238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011bc:	f107 0320 	add.w	r3, r7, #32
 80011c0:	4619      	mov	r1, r3
 80011c2:	480f      	ldr	r0, [pc, #60]	; (8001200 <MX_TIM2_Init+0xf0>)
 80011c4:	f003 ff02 	bl	8004fcc <HAL_TIMEx_MasterConfigSynchronization>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80011ce:	f001 f833 	bl	8002238 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80011d2:	2320      	movs	r3, #32
 80011d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	; (8001200 <MX_TIM2_Init+0xf0>)
 80011ea:	f003 fad7 	bl	800479c <HAL_TIM_OC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80011f4:	f001 f820 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	3738      	adds	r7, #56	; 0x38
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2000020c 	.word	0x2000020c

08001204 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_USART1_UART_Init+0x4c>)
 800120a:	4a12      	ldr	r2, [pc, #72]	; (8001254 <MX_USART1_UART_Init+0x50>)
 800120c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_USART1_UART_Init+0x4c>)
 8001210:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001214:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_USART1_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_USART1_UART_Init+0x4c>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_USART1_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_USART1_UART_Init+0x4c>)
 800122a:	220c      	movs	r2, #12
 800122c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MX_USART1_UART_Init+0x4c>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_USART1_UART_Init+0x4c>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_USART1_UART_Init+0x4c>)
 800123c:	f003 ff48 	bl	80050d0 <HAL_UART_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001246:	f000 fff7 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000254 	.word	0x20000254
 8001254:	40011000 	.word	0x40011000

08001258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <MX_USART2_UART_Init+0x50>)
 8001260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001290:	f003 ff1e 	bl	80050d0 <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800129a:	f000 ffcd 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000298 	.word	0x20000298
 80012a8:	40004400 	.word	0x40004400

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b48      	ldr	r3, [pc, #288]	; (80013e8 <MX_GPIO_Init+0x13c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a47      	ldr	r2, [pc, #284]	; (80013e8 <MX_GPIO_Init+0x13c>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b45      	ldr	r3, [pc, #276]	; (80013e8 <MX_GPIO_Init+0x13c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b41      	ldr	r3, [pc, #260]	; (80013e8 <MX_GPIO_Init+0x13c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a40      	ldr	r2, [pc, #256]	; (80013e8 <MX_GPIO_Init+0x13c>)
 80012e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b3e      	ldr	r3, [pc, #248]	; (80013e8 <MX_GPIO_Init+0x13c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <MX_GPIO_Init+0x13c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a39      	ldr	r2, [pc, #228]	; (80013e8 <MX_GPIO_Init+0x13c>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <MX_GPIO_Init+0x13c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <MX_GPIO_Init+0x13c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a32      	ldr	r2, [pc, #200]	; (80013e8 <MX_GPIO_Init+0x13c>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <MX_GPIO_Init+0x13c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001338:	482c      	ldr	r0, [pc, #176]	; (80013ec <MX_GPIO_Init+0x140>)
 800133a:	f001 fef3 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|WiFi_EN_Pin, GPIO_PIN_SET);
 800133e:	2201      	movs	r2, #1
 8001340:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001344:	482a      	ldr	r0, [pc, #168]	; (80013f0 <MX_GPIO_Init+0x144>)
 8001346:	f001 feed 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	2101      	movs	r1, #1
 800134e:	4829      	ldr	r0, [pc, #164]	; (80013f4 <MX_GPIO_Init+0x148>)
 8001350:	f001 fee8 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 8001354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	481f      	ldr	r0, [pc, #124]	; (80013ec <MX_GPIO_Init+0x140>)
 800136e:	f001 fc71 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 8001372:	2301      	movs	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	481a      	ldr	r0, [pc, #104]	; (80013f0 <MX_GPIO_Init+0x144>)
 8001386:	f001 fc65 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 800138a:	2310      	movs	r3, #16
 800138c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4813      	ldr	r0, [pc, #76]	; (80013f0 <MX_GPIO_Init+0x144>)
 80013a2:	f001 fc57 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_RST_Pin */
  GPIO_InitStruct.Pin = SPI_RST_Pin;
 80013a6:	2301      	movs	r3, #1
 80013a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_RST_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <MX_GPIO_Init+0x148>)
 80013be:	f001 fc49 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : WiFi_EN_Pin */
  GPIO_InitStruct.Pin = WiFi_EN_Pin;
 80013c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WiFi_EN_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_GPIO_Init+0x144>)
 80013dc:	f001 fc3a 	bl	8002c54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e0:	bf00      	nop
 80013e2:	3728      	adds	r7, #40	; 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020400 	.word	0x40020400

080013f8 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	e009      	b.n	800141c <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f917 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3301      	adds	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	dbf1      	blt.n	8001408 <ITM0_Write+0x10>
  }
  return len;
 8001424:	683b      	ldr	r3, [r7, #0]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8001436:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */
	unsigned char text[512];
	int ns=0;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	ms_ticks++;	//100 ms
 800143e:	4b66      	ldr	r3, [pc, #408]	; (80015d8 <SysTick_Handler+0x1a8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	4a64      	ldr	r2, [pc, #400]	; (80015d8 <SysTick_Handler+0x1a8>)
 8001446:	6013      	str	r3, [r2, #0]

	if(wf._estado_conexion!=ESPstate)
 8001448:	4b64      	ldr	r3, [pc, #400]	; (80015dc <SysTick_Handler+0x1ac>)
 800144a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800144e:	4b64      	ldr	r3, [pc, #400]	; (80015e0 <SysTick_Handler+0x1b0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d015      	beq.n	8001482 <SysTick_Handler+0x52>
	{
		ESPstate=wf._estado_conexion;
 8001456:	4b61      	ldr	r3, [pc, #388]	; (80015dc <SysTick_Handler+0x1ac>)
 8001458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800145c:	4a60      	ldr	r2, [pc, #384]	; (80015e0 <SysTick_Handler+0x1b0>)
 800145e:	6013      	str	r3, [r2, #0]
		ns=INTOA(ESPstate,text);
 8001460:	4b5f      	ldr	r3, [pc, #380]	; (80015e0 <SysTick_Handler+0x1b0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	463a      	mov	r2, r7
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f00d fb17 	bl	800ea9c <INTOA>
 800146e:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
		HAL_UART_Transmit_IT(&huart2,&text,ns);
 8001472:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001476:	b29a      	uxth	r2, r3
 8001478:	463b      	mov	r3, r7
 800147a:	4619      	mov	r1, r3
 800147c:	4859      	ldr	r0, [pc, #356]	; (80015e4 <SysTick_Handler+0x1b4>)
 800147e:	f003 ff35 	bl	80052ec <HAL_UART_Transmit_IT>

	}

	ESP_ticks++;
 8001482:	4b59      	ldr	r3, [pc, #356]	; (80015e8 <SysTick_Handler+0x1b8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	4a57      	ldr	r2, [pc, #348]	; (80015e8 <SysTick_Handler+0x1b8>)
 800148a:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 800148c:	4b57      	ldr	r3, [pc, #348]	; (80015ec <SysTick_Handler+0x1bc>)
 800148e:	791b      	ldrb	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d004      	beq.n	800149e <SysTick_Handler+0x6e>
 8001494:	4b56      	ldr	r3, [pc, #344]	; (80015f0 <SysTick_Handler+0x1c0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3301      	adds	r3, #1
 800149a:	4a55      	ldr	r2, [pc, #340]	; (80015f0 <SysTick_Handler+0x1c0>)
 800149c:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 800149e:	4b53      	ldr	r3, [pc, #332]	; (80015ec <SysTick_Handler+0x1bc>)
 80014a0:	791b      	ldrb	r3, [r3, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00c      	beq.n	80014c0 <SysTick_Handler+0x90>
 80014a6:	4b51      	ldr	r3, [pc, #324]	; (80015ec <SysTick_Handler+0x1bc>)
 80014a8:	885b      	ldrh	r3, [r3, #2]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b50      	ldr	r3, [pc, #320]	; (80015f0 <SysTick_Handler+0x1c0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	da05      	bge.n	80014c0 <SysTick_Handler+0x90>
		{
			mb_eth._w_answer=0;
 80014b4:	4b4d      	ldr	r3, [pc, #308]	; (80015ec <SysTick_Handler+0x1bc>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	711a      	strb	r2, [r3, #4]
			MB_TOUT_ticks=0;
 80014ba:	4b4d      	ldr	r3, [pc, #308]	; (80015f0 <SysTick_Handler+0x1c0>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
		}
	}*/
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 80014c0:	4b46      	ldr	r3, [pc, #280]	; (80015dc <SysTick_Handler+0x1ac>)
 80014c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014c6:	f240 2261 	movw	r2, #609	; 0x261
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d005      	beq.n	80014da <SysTick_Handler+0xaa>
 80014ce:	4b43      	ldr	r3, [pc, #268]	; (80015dc <SysTick_Handler+0x1ac>)
 80014d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014d4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80014d8:	d109      	bne.n	80014ee <SysTick_Handler+0xbe>
 80014da:	4b40      	ldr	r3, [pc, #256]	; (80015dc <SysTick_Handler+0x1ac>)
 80014dc:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d104      	bne.n	80014ee <SysTick_Handler+0xbe>
 80014e4:	4b43      	ldr	r3, [pc, #268]	; (80015f4 <SysTick_Handler+0x1c4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	4a42      	ldr	r2, [pc, #264]	; (80015f4 <SysTick_Handler+0x1c4>)
 80014ec:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 20000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;					//230517 wf_snd_flag_ticks>= 2000
 80014ee:	4b41      	ldr	r3, [pc, #260]	; (80015f4 <SysTick_Handler+0x1c4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80014f6:	4293      	cmp	r3, r2
 80014f8:	dd0c      	ble.n	8001514 <SysTick_Handler+0xe4>
 80014fa:	4b38      	ldr	r3, [pc, #224]	; (80015dc <SysTick_Handler+0x1ac>)
 80014fc:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001500:	2b01      	cmp	r3, #1
 8001502:	d007      	beq.n	8001514 <SysTick_Handler+0xe4>
 8001504:	4b35      	ldr	r3, [pc, #212]	; (80015dc <SysTick_Handler+0x1ac>)
 8001506:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <SysTick_Handler+0xe4>
 800150e:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <SysTick_Handler+0x1c8>)
 8001510:	2201      	movs	r2, #1
 8001512:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S_status == 0)
 8001514:	4b39      	ldr	r3, [pc, #228]	; (80015fc <SysTick_Handler+0x1cc>)
 8001516:	7d9b      	ldrb	r3, [r3, #22]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10e      	bne.n	800153a <SysTick_Handler+0x10a>
	{
		ETH.ETH_WDG++;
 800151c:	4b37      	ldr	r3, [pc, #220]	; (80015fc <SysTick_Handler+0x1cc>)
 800151e:	8a9b      	ldrh	r3, [r3, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	b29a      	uxth	r2, r3
 8001524:	4b35      	ldr	r3, [pc, #212]	; (80015fc <SysTick_Handler+0x1cc>)
 8001526:	829a      	strh	r2, [r3, #20]
		if (ETH.ETH_WDG>=64000)
 8001528:	4b34      	ldr	r3, [pc, #208]	; (80015fc <SysTick_Handler+0x1cc>)
 800152a:	8a9b      	ldrh	r3, [r3, #20]
 800152c:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001530:	d303      	bcc.n	800153a <SysTick_Handler+0x10a>
		{
			ETH.ETH_WDG=64000;
 8001532:	4b32      	ldr	r3, [pc, #200]	; (80015fc <SysTick_Handler+0x1cc>)
 8001534:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001538:	829a      	strh	r2, [r3, #20]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 800153a:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <SysTick_Handler+0x1a8>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	f040 842a 	bne.w	8001d98 <SysTick_Handler+0x968>
  {
	  dbgn++;
 8001544:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <SysTick_Handler+0x1d0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	4a2d      	ldr	r2, [pc, #180]	; (8001600 <SysTick_Handler+0x1d0>)
 800154c:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <SysTick_Handler+0x1a8>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 8001554:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <SysTick_Handler+0x1d4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	4a2a      	ldr	r2, [pc, #168]	; (8001604 <SysTick_Handler+0x1d4>)
 800155c:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 800155e:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <SysTick_Handler+0x1d8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001566:	d102      	bne.n	800156e <SysTick_Handler+0x13e>
 8001568:	4b27      	ldr	r3, [pc, #156]	; (8001608 <SysTick_Handler+0x1d8>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 800156e:	4b27      	ldr	r3, [pc, #156]	; (800160c <SysTick_Handler+0x1dc>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d104      	bne.n	8001580 <SysTick_Handler+0x150>
 8001576:	4b24      	ldr	r3, [pc, #144]	; (8001608 <SysTick_Handler+0x1d8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	4a22      	ldr	r2, [pc, #136]	; (8001608 <SysTick_Handler+0x1d8>)
 800157e:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 8001580:	4b21      	ldr	r3, [pc, #132]	; (8001608 <SysTick_Handler+0x1d8>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b64      	cmp	r3, #100	; 0x64
 8001586:	d102      	bne.n	800158e <SysTick_Handler+0x15e>
 8001588:	4b20      	ldr	r3, [pc, #128]	; (800160c <SysTick_Handler+0x1dc>)
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <SysTick_Handler+0x1dc>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d104      	bne.n	80015a0 <SysTick_Handler+0x170>
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <SysTick_Handler+0x1d8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	3b01      	subs	r3, #1
 800159c:	4a1a      	ldr	r2, [pc, #104]	; (8001608 <SysTick_Handler+0x1d8>)
 800159e:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <SysTick_Handler+0x1d8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <SysTick_Handler+0x17e>
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <SysTick_Handler+0x1dc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]


	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  if(spi_no_debug)
 80015ae:	4b18      	ldr	r3, [pc, #96]	; (8001610 <SysTick_Handler+0x1e0>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 83e2 	beq.w	8001d7c <SysTick_Handler+0x94c>
	  	  {
	  if(SPI_READ_EN)
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <SysTick_Handler+0x1e4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 83e1 	beq.w	8001d84 <SysTick_Handler+0x954>
	  {
	     ETH.S_status=eth_rd_SOCKET_STAT(&ETH,S0_REG);  //este era el bardo
 80015c2:	2101      	movs	r1, #1
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <SysTick_Handler+0x1cc>)
 80015c6:	f00b ffb1 	bl	800d52c <eth_rd_SOCKET_STAT>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <SysTick_Handler+0x1cc>)
 80015d0:	759a      	strb	r2, [r3, #22]

		  switch(ETH.S_status)	//Check Socket status
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <SysTick_Handler+0x1cc>)
 80015d4:	7d9b      	ldrb	r3, [r3, #22]
 80015d6:	e01f      	b.n	8001618 <SysTick_Handler+0x1e8>
 80015d8:	200002dc 	.word	0x200002dc
 80015dc:	200023b4 	.word	0x200023b4
 80015e0:	2000442c 	.word	0x2000442c
 80015e4:	20000298 	.word	0x20000298
 80015e8:	20004408 	.word	0x20004408
 80015ec:	20003100 	.word	0x20003100
 80015f0:	20004410 	.word	0x20004410
 80015f4:	20003f9c 	.word	0x20003f9c
 80015f8:	20003f99 	.word	0x20003f99
 80015fc:	200002e4 	.word	0x200002e4
 8001600:	20004434 	.word	0x20004434
 8001604:	200002e0 	.word	0x200002e0
 8001608:	2000440c 	.word	0x2000440c
 800160c:	20003ff4 	.word	0x20003ff4
 8001610:	20003fe8 	.word	0x20003fe8
 8001614:	20003ff8 	.word	0x20003ff8
 8001618:	2b5f      	cmp	r3, #95	; 0x5f
 800161a:	f200 83b6 	bhi.w	8001d8a <SysTick_Handler+0x95a>
 800161e:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <SysTick_Handler+0x1f4>)
 8001620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001624:	080017a5 	.word	0x080017a5
 8001628:	08001d8b 	.word	0x08001d8b
 800162c:	08001d8b 	.word	0x08001d8b
 8001630:	08001d8b 	.word	0x08001d8b
 8001634:	08001d8b 	.word	0x08001d8b
 8001638:	08001d8b 	.word	0x08001d8b
 800163c:	08001d8b 	.word	0x08001d8b
 8001640:	08001d8b 	.word	0x08001d8b
 8001644:	08001d8b 	.word	0x08001d8b
 8001648:	08001d8b 	.word	0x08001d8b
 800164c:	08001d8b 	.word	0x08001d8b
 8001650:	08001d8b 	.word	0x08001d8b
 8001654:	08001d8b 	.word	0x08001d8b
 8001658:	08001d8b 	.word	0x08001d8b
 800165c:	08001d8b 	.word	0x08001d8b
 8001660:	08001d8b 	.word	0x08001d8b
 8001664:	08001d8b 	.word	0x08001d8b
 8001668:	08001d8b 	.word	0x08001d8b
 800166c:	08001d8b 	.word	0x08001d8b
 8001670:	080017c7 	.word	0x080017c7
 8001674:	08001829 	.word	0x08001829
 8001678:	08001841 	.word	0x08001841
 800167c:	08001859 	.word	0x08001859
 8001680:	08001871 	.word	0x08001871
 8001684:	08001bf3 	.word	0x08001bf3
 8001688:	08001d8b 	.word	0x08001d8b
 800168c:	08001c0b 	.word	0x08001c0b
 8001690:	08001c23 	.word	0x08001c23
 8001694:	08001c61 	.word	0x08001c61
 8001698:	08001d05 	.word	0x08001d05
 800169c:	08001d8b 	.word	0x08001d8b
 80016a0:	08001d8b 	.word	0x08001d8b
 80016a4:	08001d8b 	.word	0x08001d8b
 80016a8:	08001d8b 	.word	0x08001d8b
 80016ac:	08001d1d 	.word	0x08001d1d
 80016b0:	08001d8b 	.word	0x08001d8b
 80016b4:	08001d8b 	.word	0x08001d8b
 80016b8:	08001d8b 	.word	0x08001d8b
 80016bc:	08001d8b 	.word	0x08001d8b
 80016c0:	08001d8b 	.word	0x08001d8b
 80016c4:	08001d8b 	.word	0x08001d8b
 80016c8:	08001d8b 	.word	0x08001d8b
 80016cc:	08001d8b 	.word	0x08001d8b
 80016d0:	08001d8b 	.word	0x08001d8b
 80016d4:	08001d8b 	.word	0x08001d8b
 80016d8:	08001d8b 	.word	0x08001d8b
 80016dc:	08001d8b 	.word	0x08001d8b
 80016e0:	08001d8b 	.word	0x08001d8b
 80016e4:	08001d8b 	.word	0x08001d8b
 80016e8:	08001d8b 	.word	0x08001d8b
 80016ec:	08001d35 	.word	0x08001d35
 80016f0:	08001d8b 	.word	0x08001d8b
 80016f4:	08001d8b 	.word	0x08001d8b
 80016f8:	08001d8b 	.word	0x08001d8b
 80016fc:	08001d8b 	.word	0x08001d8b
 8001700:	08001d8b 	.word	0x08001d8b
 8001704:	08001d8b 	.word	0x08001d8b
 8001708:	08001d8b 	.word	0x08001d8b
 800170c:	08001d8b 	.word	0x08001d8b
 8001710:	08001d8b 	.word	0x08001d8b
 8001714:	08001d8b 	.word	0x08001d8b
 8001718:	08001d8b 	.word	0x08001d8b
 800171c:	08001d8b 	.word	0x08001d8b
 8001720:	08001d8b 	.word	0x08001d8b
 8001724:	08001d8b 	.word	0x08001d8b
 8001728:	08001d8b 	.word	0x08001d8b
 800172c:	08001d4d 	.word	0x08001d4d
 8001730:	08001d8b 	.word	0x08001d8b
 8001734:	08001d8b 	.word	0x08001d8b
 8001738:	08001d8b 	.word	0x08001d8b
 800173c:	08001d8b 	.word	0x08001d8b
 8001740:	08001d8b 	.word	0x08001d8b
 8001744:	08001d8b 	.word	0x08001d8b
 8001748:	08001d8b 	.word	0x08001d8b
 800174c:	08001d8b 	.word	0x08001d8b
 8001750:	08001d8b 	.word	0x08001d8b
 8001754:	08001d8b 	.word	0x08001d8b
 8001758:	08001d8b 	.word	0x08001d8b
 800175c:	08001d8b 	.word	0x08001d8b
 8001760:	08001d8b 	.word	0x08001d8b
 8001764:	08001d8b 	.word	0x08001d8b
 8001768:	08001d8b 	.word	0x08001d8b
 800176c:	08001d8b 	.word	0x08001d8b
 8001770:	08001d8b 	.word	0x08001d8b
 8001774:	08001d8b 	.word	0x08001d8b
 8001778:	08001d8b 	.word	0x08001d8b
 800177c:	08001d8b 	.word	0x08001d8b
 8001780:	08001d8b 	.word	0x08001d8b
 8001784:	08001d8b 	.word	0x08001d8b
 8001788:	08001d8b 	.word	0x08001d8b
 800178c:	08001d8b 	.word	0x08001d8b
 8001790:	08001d8b 	.word	0x08001d8b
 8001794:	08001d8b 	.word	0x08001d8b
 8001798:	08001d8b 	.word	0x08001d8b
 800179c:	08001d8b 	.word	0x08001d8b
 80017a0:	08001d65 	.word	0x08001d65
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 80017a4:	4b7f      	ldr	r3, [pc, #508]	; (80019a4 <SysTick_Handler+0x574>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <SysTick_Handler+0x384>
 80017ac:	2113      	movs	r1, #19
 80017ae:	487e      	ldr	r0, [pc, #504]	; (80019a8 <SysTick_Handler+0x578>)
 80017b0:	f7ff fe22 	bl	80013f8 <ITM0_Write>
					 eth_wr_SOCKET_CMD(&ETH, S0_REG ,OPEN );
 80017b4:	2201      	movs	r2, #1
 80017b6:	2101      	movs	r1, #1
 80017b8:	487c      	ldr	r0, [pc, #496]	; (80019ac <SysTick_Handler+0x57c>)
 80017ba:	f00b fc59 	bl	800d070 <eth_wr_SOCKET_CMD>
					 ETH.ETH_WDG=1;
 80017be:	4b7b      	ldr	r3, [pc, #492]	; (80019ac <SysTick_Handler+0x57c>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	829a      	strh	r2, [r3, #20]


				 }
			 break;
 80017c4:	e2e1      	b.n	8001d8a <SysTick_Handler+0x95a>
			 case  SOCK_INIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 80017c6:	4b77      	ldr	r3, [pc, #476]	; (80019a4 <SysTick_Handler+0x574>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <SysTick_Handler+0x3a6>
 80017ce:	2111      	movs	r1, #17
 80017d0:	4877      	ldr	r0, [pc, #476]	; (80019b0 <SysTick_Handler+0x580>)
 80017d2:	f7ff fe11 	bl	80013f8 <ITM0_Write>
					 if(ETH.S_ENserver == 1)
 80017d6:	4b75      	ldr	r3, [pc, #468]	; (80019ac <SysTick_Handler+0x57c>)
 80017d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017dc:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d110      	bne.n	8001806 <SysTick_Handler+0x3d6>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 80017e4:	4b6f      	ldr	r3, [pc, #444]	; (80019a4 <SysTick_Handler+0x574>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <SysTick_Handler+0x3c4>
 80017ec:	2111      	movs	r1, #17
 80017ee:	4870      	ldr	r0, [pc, #448]	; (80019b0 <SysTick_Handler+0x580>)
 80017f0:	f7ff fe02 	bl	80013f8 <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, S0_REG, LISTEN );
 80017f4:	2202      	movs	r2, #2
 80017f6:	2101      	movs	r1, #1
 80017f8:	486c      	ldr	r0, [pc, #432]	; (80019ac <SysTick_Handler+0x57c>)
 80017fa:	f00b fc39 	bl	800d070 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 80017fe:	4b6b      	ldr	r3, [pc, #428]	; (80019ac <SysTick_Handler+0x57c>)
 8001800:	2200      	movs	r2, #0
 8001802:	829a      	strh	r2, [r3, #20]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5500-CONNECT\r\n",strlen("\r\nETH-W5500-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 8001804:	e2c1      	b.n	8001d8a <SysTick_Handler+0x95a>
						    eth_wr_SOCKET_CMD(&ETH,S0_REG, CONNECT);																				//only for server
 8001806:	2204      	movs	r2, #4
 8001808:	2101      	movs	r1, #1
 800180a:	4868      	ldr	r0, [pc, #416]	; (80019ac <SysTick_Handler+0x57c>)
 800180c:	f00b fc30 	bl	800d070 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5500-CONNECT\r\n",strlen("\r\nETH-W5500-CONNECT\r\n"));
 8001810:	4b64      	ldr	r3, [pc, #400]	; (80019a4 <SysTick_Handler+0x574>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <SysTick_Handler+0x3f0>
 8001818:	2115      	movs	r1, #21
 800181a:	4866      	ldr	r0, [pc, #408]	; (80019b4 <SysTick_Handler+0x584>)
 800181c:	f7ff fdec 	bl	80013f8 <ITM0_Write>
						 	ETH.ETH_WDG=0;
 8001820:	4b62      	ldr	r3, [pc, #392]	; (80019ac <SysTick_Handler+0x57c>)
 8001822:	2200      	movs	r2, #0
 8001824:	829a      	strh	r2, [r3, #20]
			 break;
 8001826:	e2b0      	b.n	8001d8a <SysTick_Handler+0x95a>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 8001828:	4b5e      	ldr	r3, [pc, #376]	; (80019a4 <SysTick_Handler+0x574>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <SysTick_Handler+0x408>
 8001830:	2113      	movs	r1, #19
 8001832:	4861      	ldr	r0, [pc, #388]	; (80019b8 <SysTick_Handler+0x588>)
 8001834:	f7ff fde0 	bl	80013f8 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001838:	4b5c      	ldr	r3, [pc, #368]	; (80019ac <SysTick_Handler+0x57c>)
 800183a:	2200      	movs	r2, #0
 800183c:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 800183e:	e2a4      	b.n	8001d8a <SysTick_Handler+0x95a>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 8001840:	4b58      	ldr	r3, [pc, #352]	; (80019a4 <SysTick_Handler+0x574>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <SysTick_Handler+0x420>
 8001848:	2114      	movs	r1, #20
 800184a:	485c      	ldr	r0, [pc, #368]	; (80019bc <SysTick_Handler+0x58c>)
 800184c:	f7ff fdd4 	bl	80013f8 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001850:	4b56      	ldr	r3, [pc, #344]	; (80019ac <SysTick_Handler+0x57c>)
 8001852:	2200      	movs	r2, #0
 8001854:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001856:	e298      	b.n	8001d8a <SysTick_Handler+0x95a>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 8001858:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <SysTick_Handler+0x574>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <SysTick_Handler+0x438>
 8001860:	2114      	movs	r1, #20
 8001862:	4857      	ldr	r0, [pc, #348]	; (80019c0 <SysTick_Handler+0x590>)
 8001864:	f7ff fdc8 	bl	80013f8 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001868:	4b50      	ldr	r3, [pc, #320]	; (80019ac <SysTick_Handler+0x57c>)
 800186a:	2200      	movs	r2, #0
 800186c:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 800186e:	e28c      	b.n	8001d8a <SysTick_Handler+0x95a>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 8001870:	4b4c      	ldr	r3, [pc, #304]	; (80019a4 <SysTick_Handler+0x574>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <SysTick_Handler+0x450>
 8001878:	2118      	movs	r1, #24
 800187a:	4852      	ldr	r0, [pc, #328]	; (80019c4 <SysTick_Handler+0x594>)
 800187c:	f7ff fdbc 	bl	80013f8 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001880:	4b4a      	ldr	r3, [pc, #296]	; (80019ac <SysTick_Handler+0x57c>)
 8001882:	2200      	movs	r2, #0
 8001884:	829a      	strh	r2, [r3, #20]

					if (ETH.S_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 8001886:	4b49      	ldr	r3, [pc, #292]	; (80019ac <SysTick_Handler+0x57c>)
 8001888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800188c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001890:	2b01      	cmp	r3, #1
 8001892:	f040 80ad 	bne.w	80019f0 <SysTick_Handler+0x5c0>
					{

						S0_get_size = SPI_ETH_REG(&ETH, S_RX_RSR ,S0_REG, SPI_READ, spi_Data,2);//S0_get_size = SPI_ETH_REG(&ETH, S_RX_SZ_ADDR_BASEHH,S_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001896:	2302      	movs	r3, #2
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	4b4b      	ldr	r3, [pc, #300]	; (80019c8 <SysTick_Handler+0x598>)
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2300      	movs	r3, #0
 80018a0:	2201      	movs	r2, #1
 80018a2:	2126      	movs	r1, #38	; 0x26
 80018a4:	4841      	ldr	r0, [pc, #260]	; (80019ac <SysTick_Handler+0x57c>)
 80018a6:	f00b fa94 	bl	800cdd2 <SPI_ETH_REG>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b47      	ldr	r3, [pc, #284]	; (80019cc <SysTick_Handler+0x59c>)
 80018b0:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 80018b2:	4b46      	ldr	r3, [pc, #280]	; (80019cc <SysTick_Handler+0x59c>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8266 	beq.w	8001d88 <SysTick_Handler+0x958>
							{
								eth_rd_SOCKET_DATA(&ETH,S0_RX_BUFF,&rx_mem_pointer,S0_get_size); // read socket data
 80018bc:	4b43      	ldr	r3, [pc, #268]	; (80019cc <SysTick_Handler+0x59c>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	4a43      	ldr	r2, [pc, #268]	; (80019d0 <SysTick_Handler+0x5a0>)
 80018c2:	2103      	movs	r1, #3
 80018c4:	4839      	ldr	r0, [pc, #228]	; (80019ac <SysTick_Handler+0x57c>)
 80018c6:	f00b fe67 	bl	800d598 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S_RX_RD0,rx_mem_pointer,S0_REG );		// write rx memory pointer
 80018ca:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <SysTick_Handler+0x5a0>)
 80018cc:	881a      	ldrh	r2, [r3, #0]
 80018ce:	2301      	movs	r3, #1
 80018d0:	2128      	movs	r1, #40	; 0x28
 80018d2:	4836      	ldr	r0, [pc, #216]	; (80019ac <SysTick_Handler+0x57c>)
 80018d4:	f00b fb03 	bl	800cede <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,RECV);							// write command to execute
 80018d8:	2240      	movs	r2, #64	; 0x40
 80018da:	2101      	movs	r1, #1
 80018dc:	4833      	ldr	r0, [pc, #204]	; (80019ac <SysTick_Handler+0x57c>)
 80018de:	f00b fbc7 	bl	800d070 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,S0_REG))						// wait until end of command execution
 80018e2:	bf00      	nop
 80018e4:	2101      	movs	r1, #1
 80018e6:	4831      	ldr	r0, [pc, #196]	; (80019ac <SysTick_Handler+0x57c>)
 80018e8:	f00b fe3b 	bl	800d562 <eth_rd_SOCKET_CMD>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f8      	bne.n	80018e4 <SysTick_Handler+0x4b4>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 80018f2:	4b36      	ldr	r3, [pc, #216]	; (80019cc <SysTick_Handler+0x59c>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	2300      	movs	r3, #0
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2300      	movs	r3, #0
 80018fe:	4935      	ldr	r1, [pc, #212]	; (80019d4 <SysTick_Handler+0x5a4>)
 8001900:	4835      	ldr	r0, [pc, #212]	; (80019d8 <SysTick_Handler+0x5a8>)
 8001902:	f00d f8ff 	bl	800eb04 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001906:	4b31      	ldr	r3, [pc, #196]	; (80019cc <SysTick_Handler+0x59c>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	4b33      	ldr	r3, [pc, #204]	; (80019dc <SysTick_Handler+0x5ac>)
 800190e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

								if(S0_get_size > 0)	{ ETH.S_data_available=1;}					//Flag data received
 8001912:	4b2e      	ldr	r3, [pc, #184]	; (80019cc <SysTick_Handler+0x59c>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <SysTick_Handler+0x4f0>
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <SysTick_Handler+0x57c>)
 800191c:	2201      	movs	r2, #1
 800191e:	769a      	strb	r2, [r3, #26]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001920:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <SysTick_Handler+0x5ac>)
 8001922:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001926:	4619      	mov	r1, r3
 8001928:	482b      	ldr	r0, [pc, #172]	; (80019d8 <SysTick_Handler+0x5a8>)
 800192a:	f009 fef3 	bl	800b714 <ModBUS_Check>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00d      	beq.n	8001950 <SysTick_Handler+0x520>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001934:	4829      	ldr	r0, [pc, #164]	; (80019dc <SysTick_Handler+0x5ac>)
 8001936:	f009 ffef 	bl	800b918 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 800193a:	4b28      	ldr	r3, [pc, #160]	; (80019dc <SysTick_Handler+0x5ac>)
 800193c:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8001940:	2300      	movs	r3, #0
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2300      	movs	r3, #0
 8001946:	4926      	ldr	r1, [pc, #152]	; (80019e0 <SysTick_Handler+0x5b0>)
 8001948:	4822      	ldr	r0, [pc, #136]	; (80019d4 <SysTick_Handler+0x5a4>)
 800194a:	f00d f8db 	bl	800eb04 <CopiaVector>
 800194e:	e007      	b.n	8001960 <SysTick_Handler+0x530>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <SysTick_Handler+0x574>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <SysTick_Handler+0x530>
 8001958:	2111      	movs	r1, #17
 800195a:	4822      	ldr	r0, [pc, #136]	; (80019e4 <SysTick_Handler+0x5b4>)
 800195c:	f7ff fd4c 	bl	80013f8 <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001960:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <SysTick_Handler+0x5ac>)
 8001962:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8001966:	b29a      	uxth	r2, r3
 8001968:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <SysTick_Handler+0x5b8>)
 800196a:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,S0_RX_BUFF, &tx_mem_pointer, send_size);	// write socket data
 800196c:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <SysTick_Handler+0x5b8>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <SysTick_Handler+0x5bc>)
 8001972:	2103      	movs	r1, #3
 8001974:	480d      	ldr	r0, [pc, #52]	; (80019ac <SysTick_Handler+0x57c>)
 8001976:	f00b fea0 	bl	800d6ba <eth_wr_SOCKET_DATA>

								SPI_ETH_WR_REG_16(&ETH,S_TX_WR,tx_mem_pointer,S0_REG);			// write tx memory pointer//SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer,0);			// write tx memory pointer
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <SysTick_Handler+0x5bc>)
 800197c:	881a      	ldrh	r2, [r3, #0]
 800197e:	2301      	movs	r3, #1
 8001980:	2124      	movs	r1, #36	; 0x24
 8001982:	480a      	ldr	r0, [pc, #40]	; (80019ac <SysTick_Handler+0x57c>)
 8001984:	f00b faab 	bl	800cede <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,SEND);							// write command to execute
 8001988:	2220      	movs	r2, #32
 800198a:	2101      	movs	r1, #1
 800198c:	4807      	ldr	r0, [pc, #28]	; (80019ac <SysTick_Handler+0x57c>)
 800198e:	f00b fb6f 	bl	800d070 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,S0_REG))						// wait until end of command execution
 8001992:	bf00      	nop
 8001994:	2101      	movs	r1, #1
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <SysTick_Handler+0x57c>)
 8001998:	f00b fde3 	bl	800d562 <eth_rd_SOCKET_CMD>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f8      	bne.n	8001994 <SysTick_Handler+0x564>

							}
						}
					}
				 }
			 break;
 80019a2:	e1f1      	b.n	8001d88 <SysTick_Handler+0x958>
 80019a4:	20003f98 	.word	0x20003f98
 80019a8:	080101e4 	.word	0x080101e4
 80019ac:	200002e4 	.word	0x200002e4
 80019b0:	080101f8 	.word	0x080101f8
 80019b4:	0801020c 	.word	0x0801020c
 80019b8:	08010224 	.word	0x08010224
 80019bc:	08010238 	.word	0x08010238
 80019c0:	08010250 	.word	0x08010250
 80019c4:	08010268 	.word	0x08010268
 80019c8:	20003fa8 	.word	0x20003fa8
 80019cc:	20003fa0 	.word	0x20003fa0
 80019d0:	20003fa4 	.word	0x20003fa4
 80019d4:	20000308 	.word	0x20000308
 80019d8:	2000310d 	.word	0x2000310d
 80019dc:	20003100 	.word	0x20003100
 80019e0:	20003294 	.word	0x20003294
 80019e4:	08010284 	.word	0x08010284
 80019e8:	20003fa6 	.word	0x20003fa6
 80019ec:	20003fa2 	.word	0x20003fa2
						if (mb_eth._w_answer==0)
 80019f0:	4bab      	ldr	r3, [pc, #684]	; (8001ca0 <SysTick_Handler+0x870>)
 80019f2:	791b      	ldrb	r3, [r3, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d17e      	bne.n	8001af6 <SysTick_Handler+0x6c6>
							ETH.data[0]=0x00;
 80019f8:	4baa      	ldr	r3, [pc, #680]	; (8001ca4 <SysTick_Handler+0x874>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[1]=0x00;
 8001a00:	4ba8      	ldr	r3, [pc, #672]	; (8001ca4 <SysTick_Handler+0x874>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[2]=0x00;
 8001a08:	4ba6      	ldr	r3, [pc, #664]	; (8001ca4 <SysTick_Handler+0x874>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[3]=0x00;
 8001a10:	4ba4      	ldr	r3, [pc, #656]	; (8001ca4 <SysTick_Handler+0x874>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							ETH.data[4]=0x00;
 8001a18:	4ba2      	ldr	r3, [pc, #648]	; (8001ca4 <SysTick_Handler+0x874>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
							ETH.data[5]=0x06;
 8001a20:	4ba0      	ldr	r3, [pc, #640]	; (8001ca4 <SysTick_Handler+0x874>)
 8001a22:	2206      	movs	r2, #6
 8001a24:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
							ETH.data[6]=0x01;
 8001a28:	4b9e      	ldr	r3, [pc, #632]	; (8001ca4 <SysTick_Handler+0x874>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
							ETH.data[7]=0x03;
 8001a30:	4b9c      	ldr	r3, [pc, #624]	; (8001ca4 <SysTick_Handler+0x874>)
 8001a32:	2203      	movs	r2, #3
 8001a34:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
							ETH.data[8]=0x00;
 8001a38:	4b9a      	ldr	r3, [pc, #616]	; (8001ca4 <SysTick_Handler+0x874>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
							ETH.data[9]=0x00;
 8001a40:	4b98      	ldr	r3, [pc, #608]	; (8001ca4 <SysTick_Handler+0x874>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
							ETH.data[10]=0x00;
 8001a48:	4b96      	ldr	r3, [pc, #600]	; (8001ca4 <SysTick_Handler+0x874>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
							ETH.data[11]=0x0A;
 8001a50:	4b94      	ldr	r3, [pc, #592]	; (8001ca4 <SysTick_Handler+0x874>)
 8001a52:	220a      	movs	r2, #10
 8001a54:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
							send_size=12;
 8001a58:	4b93      	ldr	r3, [pc, #588]	; (8001ca8 <SysTick_Handler+0x878>)
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001a5e:	220f      	movs	r2, #15
 8001a60:	2100      	movs	r1, #0
 8001a62:	488f      	ldr	r0, [pc, #572]	; (8001ca0 <SysTick_Handler+0x870>)
 8001a64:	f009 ff01 	bl	800b86a <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	220c      	movs	r2, #12
 8001a70:	498e      	ldr	r1, [pc, #568]	; (8001cac <SysTick_Handler+0x87c>)
 8001a72:	488f      	ldr	r0, [pc, #572]	; (8001cb0 <SysTick_Handler+0x880>)
 8001a74:	f00d f846 	bl	800eb04 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,S0_TX_BUFF, &tx_mem_pointer, send_size);	// write socket data
 8001a78:	4b8b      	ldr	r3, [pc, #556]	; (8001ca8 <SysTick_Handler+0x878>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	4a8d      	ldr	r2, [pc, #564]	; (8001cb4 <SysTick_Handler+0x884>)
 8001a7e:	2102      	movs	r1, #2
 8001a80:	4888      	ldr	r0, [pc, #544]	; (8001ca4 <SysTick_Handler+0x874>)
 8001a82:	f00b fe1a 	bl	800d6ba <eth_wr_SOCKET_DATA>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001a86:	4987      	ldr	r1, [pc, #540]	; (8001ca4 <SysTick_Handler+0x874>)
 8001a88:	488b      	ldr	r0, [pc, #556]	; (8001cb8 <SysTick_Handler+0x888>)
 8001a8a:	f00b feba 	bl	800d802 <SPI_ETH_SNIFF>
							SPI_ETH_WR_REG_16(&ETH,S_TX_WR,tx_mem_pointer,S0_REG);			// write tx memory pointer
 8001a8e:	4b89      	ldr	r3, [pc, #548]	; (8001cb4 <SysTick_Handler+0x884>)
 8001a90:	881a      	ldrh	r2, [r3, #0]
 8001a92:	2301      	movs	r3, #1
 8001a94:	2124      	movs	r1, #36	; 0x24
 8001a96:	4883      	ldr	r0, [pc, #524]	; (8001ca4 <SysTick_Handler+0x874>)
 8001a98:	f00b fa21 	bl	800cede <SPI_ETH_WR_REG_16>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001a9c:	4981      	ldr	r1, [pc, #516]	; (8001ca4 <SysTick_Handler+0x874>)
 8001a9e:	4886      	ldr	r0, [pc, #536]	; (8001cb8 <SysTick_Handler+0x888>)
 8001aa0:	f00b feaf 	bl	800d802 <SPI_ETH_SNIFF>
							eth_wr_SOCKET_CMD(&ETH,S0_REG,SEND);							// write command to execute
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	487e      	ldr	r0, [pc, #504]	; (8001ca4 <SysTick_Handler+0x874>)
 8001aaa:	f00b fae1 	bl	800d070 <eth_wr_SOCKET_CMD>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001aae:	497d      	ldr	r1, [pc, #500]	; (8001ca4 <SysTick_Handler+0x874>)
 8001ab0:	4881      	ldr	r0, [pc, #516]	; (8001cb8 <SysTick_Handler+0x888>)
 8001ab2:	f00b fea6 	bl	800d802 <SPI_ETH_SNIFF>
							uint16_t read=0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
								read=SPI_ETH_REG(&ETH, S_IR,S0_REG,SPI_READ, ETH.GAR,1);
 8001abc:	2301      	movs	r3, #1
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	4b7e      	ldr	r3, [pc, #504]	; (8001cbc <SysTick_Handler+0x88c>)
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2102      	movs	r1, #2
 8001aca:	4876      	ldr	r0, [pc, #472]	; (8001ca4 <SysTick_Handler+0x874>)
 8001acc:	f00b f981 	bl	800cdd2 <SPI_ETH_REG>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
							mb_eth._w_answer=1;	// Waiting answer flag_w_answer=1;	// Waiting answer flag
 8001ad6:	4b72      	ldr	r3, [pc, #456]	; (8001ca0 <SysTick_Handler+0x870>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	711a      	strb	r2, [r3, #4]
							MB_TOUT_ticks=0;	// restart counting
 8001adc:	4b78      	ldr	r3, [pc, #480]	; (8001cc0 <SysTick_Handler+0x890>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001ae2:	4b78      	ldr	r3, [pc, #480]	; (8001cc4 <SysTick_Handler+0x894>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 814e 	beq.w	8001d88 <SysTick_Handler+0x958>
 8001aec:	2117      	movs	r1, #23
 8001aee:	4876      	ldr	r0, [pc, #472]	; (8001cc8 <SysTick_Handler+0x898>)
 8001af0:	f7ff fc82 	bl	80013f8 <ITM0_Write>
			 break;
 8001af4:	e148      	b.n	8001d88 <SysTick_Handler+0x958>
						S0_get_size = SPI_ETH_REG(&ETH, S_RX_RSR ,S0_REG ,SPI_READ, spi_Data,2);
 8001af6:	2302      	movs	r3, #2
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	4b74      	ldr	r3, [pc, #464]	; (8001ccc <SysTick_Handler+0x89c>)
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	2201      	movs	r2, #1
 8001b02:	2126      	movs	r1, #38	; 0x26
 8001b04:	4867      	ldr	r0, [pc, #412]	; (8001ca4 <SysTick_Handler+0x874>)
 8001b06:	f00b f964 	bl	800cdd2 <SPI_ETH_REG>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b70      	ldr	r3, [pc, #448]	; (8001cd0 <SysTick_Handler+0x8a0>)
 8001b10:	801a      	strh	r2, [r3, #0]
						if(S0_get_size != 0x00)
 8001b12:	4b6f      	ldr	r3, [pc, #444]	; (8001cd0 <SysTick_Handler+0x8a0>)
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8136 	beq.w	8001d88 <SysTick_Handler+0x958>
								eth_rd_SOCKET_DATA(&ETH,S0_RX_BUFF,&rx_mem_pointer,S0_get_size); // read socket data
 8001b1c:	4b6c      	ldr	r3, [pc, #432]	; (8001cd0 <SysTick_Handler+0x8a0>)
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	4a6c      	ldr	r2, [pc, #432]	; (8001cd4 <SysTick_Handler+0x8a4>)
 8001b22:	2103      	movs	r1, #3
 8001b24:	485f      	ldr	r0, [pc, #380]	; (8001ca4 <SysTick_Handler+0x874>)
 8001b26:	f00b fd37 	bl	800d598 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S_RX_RD0,rx_mem_pointer,S0_REG);		// write rx memory pointer
 8001b2a:	4b6a      	ldr	r3, [pc, #424]	; (8001cd4 <SysTick_Handler+0x8a4>)
 8001b2c:	881a      	ldrh	r2, [r3, #0]
 8001b2e:	2301      	movs	r3, #1
 8001b30:	2128      	movs	r1, #40	; 0x28
 8001b32:	485c      	ldr	r0, [pc, #368]	; (8001ca4 <SysTick_Handler+0x874>)
 8001b34:	f00b f9d3 	bl	800cede <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,RECV);							// write command to execute
 8001b38:	2240      	movs	r2, #64	; 0x40
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	4859      	ldr	r0, [pc, #356]	; (8001ca4 <SysTick_Handler+0x874>)
 8001b3e:	f00b fa97 	bl	800d070 <eth_wr_SOCKET_CMD>
								if (ETH_DBG_EN) ITM0_Write("\r\n RCVD DATA \r\n",strlen("\r\n RCVD DATA \r\n"));
 8001b42:	4b60      	ldr	r3, [pc, #384]	; (8001cc4 <SysTick_Handler+0x894>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <SysTick_Handler+0x722>
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	4862      	ldr	r0, [pc, #392]	; (8001cd8 <SysTick_Handler+0x8a8>)
 8001b4e:	f7ff fc53 	bl	80013f8 <ITM0_Write>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001b52:	4b5f      	ldr	r3, [pc, #380]	; (8001cd0 <SysTick_Handler+0x8a0>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	2300      	movs	r3, #0
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	4954      	ldr	r1, [pc, #336]	; (8001cb0 <SysTick_Handler+0x880>)
 8001b60:	485e      	ldr	r0, [pc, #376]	; (8001cdc <SysTick_Handler+0x8ac>)
 8001b62:	f00c ffcf 	bl	800eb04 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001b66:	4b5a      	ldr	r3, [pc, #360]	; (8001cd0 <SysTick_Handler+0x8a0>)
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ca0 <SysTick_Handler+0x870>)
 8001b6e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
								if(S0_get_size > 0)	{ ETH.S_data_available=1;}
 8001b72:	4b57      	ldr	r3, [pc, #348]	; (8001cd0 <SysTick_Handler+0x8a0>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <SysTick_Handler+0x750>
 8001b7a:	4b4a      	ldr	r3, [pc, #296]	; (8001ca4 <SysTick_Handler+0x874>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	769a      	strb	r2, [r3, #26]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001b80:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <SysTick_Handler+0x870>)
 8001b82:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001b86:	4619      	mov	r1, r3
 8001b88:	4854      	ldr	r0, [pc, #336]	; (8001cdc <SysTick_Handler+0x8ac>)
 8001b8a:	f009 fdc3 	bl	800b714 <ModBUS_Check>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d024      	beq.n	8001bde <SysTick_Handler+0x7ae>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001b94:	4b42      	ldr	r3, [pc, #264]	; (8001ca0 <SysTick_Handler+0x870>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	711a      	strb	r2, [r3, #4]
										MB_TOUT_ticks=0;
 8001b9a:	4b49      	ldr	r3, [pc, #292]	; (8001cc0 <SysTick_Handler+0x890>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001ba0:	483f      	ldr	r0, [pc, #252]	; (8001ca0 <SysTick_Handler+0x870>)
 8001ba2:	f009 feb9 	bl	800b918 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001ba6:	4b3e      	ldr	r3, [pc, #248]	; (8001ca0 <SysTick_Handler+0x870>)
 8001ba8:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8001bac:	2300      	movs	r3, #0
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	494a      	ldr	r1, [pc, #296]	; (8001cdc <SysTick_Handler+0x8ac>)
 8001bb4:	484a      	ldr	r0, [pc, #296]	; (8001ce0 <SysTick_Handler+0x8b0>)
 8001bb6:	f00c ffa5 	bl	800eb04 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2240      	movs	r2, #64	; 0x40
 8001bc2:	4948      	ldr	r1, [pc, #288]	; (8001ce4 <SysTick_Handler+0x8b4>)
 8001bc4:	4848      	ldr	r0, [pc, #288]	; (8001ce8 <SysTick_Handler+0x8b8>)
 8001bc6:	f00c ff9d 	bl	800eb04 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 8001bca:	4b3e      	ldr	r3, [pc, #248]	; (8001cc4 <SysTick_Handler+0x894>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 80da 	beq.w	8001d88 <SysTick_Handler+0x958>
 8001bd4:	2117      	movs	r1, #23
 8001bd6:	4845      	ldr	r0, [pc, #276]	; (8001cec <SysTick_Handler+0x8bc>)
 8001bd8:	f7ff fc0e 	bl	80013f8 <ITM0_Write>
			 break;
 8001bdc:	e0d4      	b.n	8001d88 <SysTick_Handler+0x958>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001bde:	4b39      	ldr	r3, [pc, #228]	; (8001cc4 <SysTick_Handler+0x894>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80d0 	beq.w	8001d88 <SysTick_Handler+0x958>
 8001be8:	2111      	movs	r1, #17
 8001bea:	4841      	ldr	r0, [pc, #260]	; (8001cf0 <SysTick_Handler+0x8c0>)
 8001bec:	f7ff fc04 	bl	80013f8 <ITM0_Write>
			 break;
 8001bf0:	e0ca      	b.n	8001d88 <SysTick_Handler+0x958>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001bf2:	4b34      	ldr	r3, [pc, #208]	; (8001cc4 <SysTick_Handler+0x894>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <SysTick_Handler+0x7d2>
 8001bfa:	2115      	movs	r1, #21
 8001bfc:	483d      	ldr	r0, [pc, #244]	; (8001cf4 <SysTick_Handler+0x8c4>)
 8001bfe:	f7ff fbfb 	bl	80013f8 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001c02:	4b28      	ldr	r3, [pc, #160]	; (8001ca4 <SysTick_Handler+0x874>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001c08:	e0bf      	b.n	8001d8a <SysTick_Handler+0x95a>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001c0a:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <SysTick_Handler+0x894>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <SysTick_Handler+0x7ea>
 8001c12:	2114      	movs	r1, #20
 8001c14:	4838      	ldr	r0, [pc, #224]	; (8001cf8 <SysTick_Handler+0x8c8>)
 8001c16:	f7ff fbef 	bl	80013f8 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001c1a:	4b22      	ldr	r3, [pc, #136]	; (8001ca4 <SysTick_Handler+0x874>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001c20:	e0b3      	b.n	8001d8a <SysTick_Handler+0x95a>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001c22:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <SysTick_Handler+0x894>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <SysTick_Handler+0x802>
 8001c2a:	2116      	movs	r1, #22
 8001c2c:	4833      	ldr	r0, [pc, #204]	; (8001cfc <SysTick_Handler+0x8cc>)
 8001c2e:	f7ff fbe3 	bl	80013f8 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,S0_REG, DISCON );
 8001c32:	2208      	movs	r2, #8
 8001c34:	2101      	movs	r1, #1
 8001c36:	481b      	ldr	r0, [pc, #108]	; (8001ca4 <SysTick_Handler+0x874>)
 8001c38:	f00b fa1a 	bl	800d070 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH,S_CR ,S0_REG,SPI_READ, spi_Data,1))//while( SPI_ETH_REG(&ETH, S_CR_ADDR_BASEH,S_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001c3c:	bf00      	nop
 8001c3e:	2301      	movs	r3, #1
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <SysTick_Handler+0x89c>)
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	2300      	movs	r3, #0
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	4815      	ldr	r0, [pc, #84]	; (8001ca4 <SysTick_Handler+0x874>)
 8001c4e:	f00b f8c0 	bl	800cdd2 <SPI_ETH_REG>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f2      	bne.n	8001c3e <SysTick_Handler+0x80e>
					{}
					ETH.ETH_WDG=0;
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <SysTick_Handler+0x874>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001c5e:	e094      	b.n	8001d8a <SysTick_Handler+0x95a>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <SysTick_Handler+0x894>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <SysTick_Handler+0x840>
 8001c68:	2117      	movs	r1, #23
 8001c6a:	4825      	ldr	r0, [pc, #148]	; (8001d00 <SysTick_Handler+0x8d0>)
 8001c6c:	f7ff fbc4 	bl	80013f8 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,S0_REG,DISCON );
 8001c70:	2208      	movs	r2, #8
 8001c72:	2101      	movs	r1, #1
 8001c74:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <SysTick_Handler+0x874>)
 8001c76:	f00b f9fb 	bl	800d070 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH,S_CR,S0_REG,SPI_READ, spi_Data,1))
 8001c7a:	bf00      	nop
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <SysTick_Handler+0x89c>)
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2300      	movs	r3, #0
 8001c86:	2201      	movs	r2, #1
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4806      	ldr	r0, [pc, #24]	; (8001ca4 <SysTick_Handler+0x874>)
 8001c8c:	f00b f8a1 	bl	800cdd2 <SPI_ETH_REG>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f2      	bne.n	8001c7c <SysTick_Handler+0x84c>
					{}
					ETH.ETH_WDG=0;
 8001c96:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <SysTick_Handler+0x874>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001c9c:	e075      	b.n	8001d8a <SysTick_Handler+0x95a>
 8001c9e:	bf00      	nop
 8001ca0:	20003100 	.word	0x20003100
 8001ca4:	200002e4 	.word	0x200002e4
 8001ca8:	20003fa6 	.word	0x20003fa6
 8001cac:	20003294 	.word	0x20003294
 8001cb0:	20000308 	.word	0x20000308
 8001cb4:	20003fa2 	.word	0x20003fa2
 8001cb8:	20001358 	.word	0x20001358
 8001cbc:	20001308 	.word	0x20001308
 8001cc0:	20004410 	.word	0x20004410
 8001cc4:	20003f98 	.word	0x20003f98
 8001cc8:	08010294 	.word	0x08010294
 8001ccc:	20003fa8 	.word	0x20003fa8
 8001cd0:	20003fa0 	.word	0x20003fa0
 8001cd4:	20003fa4 	.word	0x20003fa4
 8001cd8:	080102a8 	.word	0x080102a8
 8001cdc:	2000310d 	.word	0x2000310d
 8001ce0:	20000b08 	.word	0x20000b08
 8001ce4:	20003420 	.word	0x20003420
 8001ce8:	2000396c 	.word	0x2000396c
 8001cec:	080102b8 	.word	0x080102b8
 8001cf0:	08010284 	.word	0x08010284
 8001cf4:	080102cc 	.word	0x080102cc
 8001cf8:	080102e4 	.word	0x080102e4
 8001cfc:	080102fc 	.word	0x080102fc
 8001d00:	08010314 	.word	0x08010314
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001d04:	4b6e      	ldr	r3, [pc, #440]	; (8001ec0 <SysTick_Handler+0xa90>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <SysTick_Handler+0x8e4>
 8001d0c:	2115      	movs	r1, #21
 8001d0e:	486d      	ldr	r0, [pc, #436]	; (8001ec4 <SysTick_Handler+0xa94>)
 8001d10:	f7ff fb72 	bl	80013f8 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001d14:	4b6c      	ldr	r3, [pc, #432]	; (8001ec8 <SysTick_Handler+0xa98>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001d1a:	e036      	b.n	8001d8a <SysTick_Handler+0x95a>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 8001d1c:	4b68      	ldr	r3, [pc, #416]	; (8001ec0 <SysTick_Handler+0xa90>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <SysTick_Handler+0x8fc>
 8001d24:	2110      	movs	r1, #16
 8001d26:	4869      	ldr	r0, [pc, #420]	; (8001ecc <SysTick_Handler+0xa9c>)
 8001d28:	f7ff fb66 	bl	80013f8 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001d2c:	4b66      	ldr	r3, [pc, #408]	; (8001ec8 <SysTick_Handler+0xa98>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001d32:	e02a      	b.n	8001d8a <SysTick_Handler+0x95a>
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 8001d34:	4b62      	ldr	r3, [pc, #392]	; (8001ec0 <SysTick_Handler+0xa90>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <SysTick_Handler+0x914>
 8001d3c:	2112      	movs	r1, #18
 8001d3e:	4864      	ldr	r0, [pc, #400]	; (8001ed0 <SysTick_Handler+0xaa0>)
 8001d40:	f7ff fb5a 	bl	80013f8 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001d44:	4b60      	ldr	r3, [pc, #384]	; (8001ec8 <SysTick_Handler+0xa98>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001d4a:	e01e      	b.n	8001d8a <SysTick_Handler+0x95a>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 8001d4c:	4b5c      	ldr	r3, [pc, #368]	; (8001ec0 <SysTick_Handler+0xa90>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <SysTick_Handler+0x92c>
 8001d54:	2113      	movs	r1, #19
 8001d56:	485f      	ldr	r0, [pc, #380]	; (8001ed4 <SysTick_Handler+0xaa4>)
 8001d58:	f7ff fb4e 	bl	80013f8 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001d5c:	4b5a      	ldr	r3, [pc, #360]	; (8001ec8 <SysTick_Handler+0xa98>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001d62:	e012      	b.n	8001d8a <SysTick_Handler+0x95a>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8001d64:	4b56      	ldr	r3, [pc, #344]	; (8001ec0 <SysTick_Handler+0xa90>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <SysTick_Handler+0x944>
 8001d6c:	2111      	movs	r1, #17
 8001d6e:	485a      	ldr	r0, [pc, #360]	; (8001ed8 <SysTick_Handler+0xaa8>)
 8001d70:	f7ff fb42 	bl	80013f8 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001d74:	4b54      	ldr	r3, [pc, #336]	; (8001ec8 <SysTick_Handler+0xa98>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001d7a:	e006      	b.n	8001d8a <SysTick_Handler+0x95a>
	  }
	  }else
	  	  {
		  //ETH.operacion=SPI_READ;
		  //ETH.TX[3]=0x00;
		  SPI_ETH(&ETH);
 8001d7c:	4852      	ldr	r0, [pc, #328]	; (8001ec8 <SysTick_Handler+0xa98>)
 8001d7e:	f00b f800 	bl	800cd82 <SPI_ETH>
 8001d82:	e002      	b.n	8001d8a <SysTick_Handler+0x95a>
			 default:
 8001d84:	bf00      	nop
 8001d86:	e000      	b.n	8001d8a <SysTick_Handler+0x95a>
			 break;
 8001d88:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001d8a:	4b54      	ldr	r3, [pc, #336]	; (8001edc <SysTick_Handler+0xaac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d102      	bne.n	8001d98 <SysTick_Handler+0x968>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001d92:	4b52      	ldr	r3, [pc, #328]	; (8001edc <SysTick_Handler+0xaac>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
		  }
  }

if(EN_USART1_TMR==1) USART1_ticks++;
 8001d98:	4b51      	ldr	r3, [pc, #324]	; (8001ee0 <SysTick_Handler+0xab0>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d104      	bne.n	8001daa <SysTick_Handler+0x97a>
 8001da0:	4b50      	ldr	r3, [pc, #320]	; (8001ee4 <SysTick_Handler+0xab4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	4a4f      	ldr	r2, [pc, #316]	; (8001ee4 <SysTick_Handler+0xab4>)
 8001da8:	6013      	str	r3, [r2, #0]

if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001daa:	4b4e      	ldr	r3, [pc, #312]	; (8001ee4 <SysTick_Handler+0xab4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	dd0f      	ble.n	8001dd2 <SysTick_Handler+0x9a2>
{
	USART1_ticks=0;
 8001db2:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <SysTick_Handler+0xab4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
	FLAG_USART1=1;
 8001db8:	4b4b      	ldr	r3, [pc, #300]	; (8001ee8 <SysTick_Handler+0xab8>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
	EN_USART1_TMR=0;
 8001dbe:	4b48      	ldr	r3, [pc, #288]	; (8001ee0 <SysTick_Handler+0xab0>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
	items_rx=uart1pass;
 8001dc4:	4b49      	ldr	r3, [pc, #292]	; (8001eec <SysTick_Handler+0xabc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a49      	ldr	r2, [pc, #292]	; (8001ef0 <SysTick_Handler+0xac0>)
 8001dca:	6013      	str	r3, [r2, #0]
	uart1pass=0;
 8001dcc:	4b47      	ldr	r3, [pc, #284]	; (8001eec <SysTick_Handler+0xabc>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd2:	f000 fd25 	bl	8002820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 8001dd6:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <SysTick_Handler+0xac4>)
 8001dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d105      	bne.n	8001dec <SysTick_Handler+0x9bc>
	{
		ticks++;
 8001de0:	4b45      	ldr	r3, [pc, #276]	; (8001ef8 <SysTick_Handler+0xac8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	3301      	adds	r3, #1
 8001de6:	4a44      	ldr	r2, [pc, #272]	; (8001ef8 <SysTick_Handler+0xac8>)
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	e002      	b.n	8001df2 <SysTick_Handler+0x9c2>
	}
	else
	{
		ticks=0;
 8001dec:	4b42      	ldr	r3, [pc, #264]	; (8001ef8 <SysTick_Handler+0xac8>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
	}

	if(wf._ejecucion==1)
 8001df2:	4b40      	ldr	r3, [pc, #256]	; (8001ef4 <SysTick_Handler+0xac4>)
 8001df4:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d158      	bne.n	8001eae <SysTick_Handler+0xa7e>
		{
			if (FLAG_TIMEOUT!=1)
 8001dfc:	4b3f      	ldr	r3, [pc, #252]	; (8001efc <SysTick_Handler+0xacc>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d017      	beq.n	8001e34 <SysTick_Handler+0xa04>
			{
				if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8001e04:	4b3b      	ldr	r3, [pc, #236]	; (8001ef4 <SysTick_Handler+0xac4>)
 8001e06:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d006      	beq.n	8001e1c <SysTick_Handler+0x9ec>
 8001e0e:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <SysTick_Handler+0xac4>)
 8001e10:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001e14:	3301      	adds	r3, #1
 8001e16:	4a37      	ldr	r2, [pc, #220]	; (8001ef4 <SysTick_Handler+0xac4>)
 8001e18:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
				if(wf._instruccion==2) wf._ticks2++;
 8001e1c:	4b35      	ldr	r3, [pc, #212]	; (8001ef4 <SysTick_Handler+0xac4>)
 8001e1e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d106      	bne.n	8001e34 <SysTick_Handler+0xa04>
 8001e26:	4b33      	ldr	r3, [pc, #204]	; (8001ef4 <SysTick_Handler+0xac4>)
 8001e28:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	4a31      	ldr	r2, [pc, #196]	; (8001ef4 <SysTick_Handler+0xac4>)
 8001e30:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
			}


			if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8001e34:	4b2f      	ldr	r3, [pc, #188]	; (8001ef4 <SysTick_Handler+0xac4>)
 8001e36:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d018      	beq.n	8001e70 <SysTick_Handler+0xa40>
 8001e3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <SysTick_Handler+0xac4>)
 8001e40:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001e44:	f241 527c 	movw	r2, #5500	; 0x157c
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	dd11      	ble.n	8001e70 <SysTick_Handler+0xa40>
			{
				FLAG_TIMEOUT=1;
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <SysTick_Handler+0xacc>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	701a      	strb	r2, [r3, #0]
				if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001e52:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <SysTick_Handler+0xad0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f242 020c 	movw	r2, #8204	; 0x200c
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d107      	bne.n	8001e70 <SysTick_Handler+0xa40>
				{
					HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001e60:	2201      	movs	r2, #1
 8001e62:	4928      	ldr	r1, [pc, #160]	; (8001f04 <SysTick_Handler+0xad4>)
 8001e64:	4826      	ldr	r0, [pc, #152]	; (8001f00 <SysTick_Handler+0xad0>)
 8001e66:	f003 fa86 	bl	8005376 <HAL_UART_Receive_IT>
					EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001e6a:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <SysTick_Handler+0xad8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
				}
				//wf._ticks=0;
			}
			if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 8001e70:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <SysTick_Handler+0xac4>)
 8001e72:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d11d      	bne.n	8001eb6 <SysTick_Handler+0xa86>
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <SysTick_Handler+0xac4>)
 8001e7c:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001e80:	f245 0214 	movw	r2, #20500	; 0x5014
 8001e84:	4293      	cmp	r3, r2
 8001e86:	dd16      	ble.n	8001eb6 <SysTick_Handler+0xa86>
			{
				FLAG_TIMEOUT=1;
 8001e88:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <SysTick_Handler+0xacc>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
				if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <SysTick_Handler+0xad0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f242 020c 	movw	r2, #8204	; 0x200c
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d10c      	bne.n	8001eb6 <SysTick_Handler+0xa86>
				{
					HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4919      	ldr	r1, [pc, #100]	; (8001f04 <SysTick_Handler+0xad4>)
 8001ea0:	4817      	ldr	r0, [pc, #92]	; (8001f00 <SysTick_Handler+0xad0>)
 8001ea2:	f003 fa68 	bl	8005376 <HAL_UART_Receive_IT>
					EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <SysTick_Handler+0xad8>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
		else
		{
			wf._ticks=0;
		}
  /* USER CODE END SysTick_IRQn 1 */
}
 8001eac:	e003      	b.n	8001eb6 <SysTick_Handler+0xa86>
			wf._ticks=0;
 8001eae:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <SysTick_Handler+0xac4>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 8001eb6:	bf00      	nop
 8001eb8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20003f98 	.word	0x20003f98
 8001ec4:	0801032c 	.word	0x0801032c
 8001ec8:	200002e4 	.word	0x200002e4
 8001ecc:	08010344 	.word	0x08010344
 8001ed0:	08010358 	.word	0x08010358
 8001ed4:	0801036c 	.word	0x0801036c
 8001ed8:	08010380 	.word	0x08010380
 8001edc:	200002e0 	.word	0x200002e0
 8001ee0:	20003fed 	.word	0x20003fed
 8001ee4:	20004420 	.word	0x20004420
 8001ee8:	20004424 	.word	0x20004424
 8001eec:	2000441c 	.word	0x2000441c
 8001ef0:	20004428 	.word	0x20004428
 8001ef4:	200023b4 	.word	0x200023b4
 8001ef8:	20004414 	.word	0x20004414
 8001efc:	20003fee 	.word	0x20003fee
 8001f00:	20000254 	.word	0x20000254
 8001f04:	20004400 	.word	0x20004400
 8001f08:	20003fec 	.word	0x20003fec

08001f0c <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a25      	ldr	r2, [pc, #148]	; (8001fb0 <HAL_UART_ErrorCallback+0xa4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d121      	bne.n	8001f62 <HAL_UART_ErrorCallback+0x56>
	{
		 volatile int aore=0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 8001f26:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <HAL_UART_ErrorCallback+0xa8>)
 8001f28:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	4a21      	ldr	r2, [pc, #132]	; (8001fb4 <HAL_UART_ErrorCallback+0xa8>)
 8001f30:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	613b      	str	r3, [r7, #16]


		 HAL_UART_Transmit_IT(&huart2,"\r\n ERROR HW UARRT1 \r\n",strlen("\r\n ERROR HW UARRT1 \r\n"));
 8001f44:	2215      	movs	r2, #21
 8001f46:	491c      	ldr	r1, [pc, #112]	; (8001fb8 <HAL_UART_ErrorCallback+0xac>)
 8001f48:	481c      	ldr	r0, [pc, #112]	; (8001fbc <HAL_UART_ErrorCallback+0xb0>)
 8001f4a:	f003 f9cf 	bl	80052ec <HAL_UART_Transmit_IT>
		 HAL_UART_DeInit(ERRUART);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f003 f90b 	bl	800516a <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8001f54:	f7ff f956 	bl	8001204 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	4919      	ldr	r1, [pc, #100]	; (8001fc0 <HAL_UART_ErrorCallback+0xb4>)
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f003 fa0a 	bl	8005376 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a17      	ldr	r2, [pc, #92]	; (8001fc4 <HAL_UART_ErrorCallback+0xb8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d11c      	bne.n	8001fa6 <HAL_UART_ErrorCallback+0x9a>
	{
		 volatile int aore=0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <HAL_UART_ErrorCallback+0xa8>)
 8001f76:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <HAL_UART_ErrorCallback+0xa8>)
 8001f7e:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f003 f8e9 	bl	800516a <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 8001f98:	f7ff f95e 	bl	8001258 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4908      	ldr	r1, [pc, #32]	; (8001fc0 <HAL_UART_ErrorCallback+0xb4>)
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f003 f9e8 	bl	8005376 <HAL_UART_Receive_IT>
	}
}
 8001fa6:	bf00      	nop
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40011000 	.word	0x40011000
 8001fb4:	200023b4 	.word	0x200023b4
 8001fb8:	08010394 	.word	0x08010394
 8001fbc:	20000298 	.word	0x20000298
 8001fc0:	20004400 	.word	0x20004400
 8001fc4:	40004400 	.word	0x40004400

08001fc8 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a15      	ldr	r2, [pc, #84]	; (800202c <HAL_UART_RxCpltCallback+0x64>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d123      	bne.n	8002022 <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_UART_RxCpltCallback+0x68>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a15      	ldr	r2, [pc, #84]	; (8002034 <HAL_UART_RxCpltCallback+0x6c>)
 8001fe0:	7811      	ldrb	r1, [r2, #0]
 8001fe2:	4a15      	ldr	r2, [pc, #84]	; (8002038 <HAL_UART_RxCpltCallback+0x70>)
 8001fe4:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_UART_RxCpltCallback+0x68>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	3301      	adds	r3, #1
 8001fec:	4a10      	ldr	r2, [pc, #64]	; (8002030 <HAL_UART_RxCpltCallback+0x68>)
 8001fee:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_UART_RxCpltCallback+0x68>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff8:	db03      	blt.n	8002002 <HAL_UART_RxCpltCallback+0x3a>
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_UART_RxCpltCallback+0x68>)
 8001ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002000:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8002002:	2100      	movs	r1, #0
 8002004:	480d      	ldr	r0, [pc, #52]	; (800203c <HAL_UART_RxCpltCallback+0x74>)
 8002006:	f002 f8b7 	bl	8004178 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 800200a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800200e:	2201      	movs	r2, #1
 8002010:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_UART_RxCpltCallback+0x78>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 8002018:	2201      	movs	r2, #1
 800201a:	4906      	ldr	r1, [pc, #24]	; (8002034 <HAL_UART_RxCpltCallback+0x6c>)
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f003 f9aa 	bl	8005376 <HAL_UART_Receive_IT>
		 }
 }
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40011000 	.word	0x40011000
 8002030:	20004430 	.word	0x20004430
 8002034:	20004400 	.word	0x20004400
 8002038:	20003ffc 	.word	0x20003ffc
 800203c:	2000020c 	.word	0x2000020c
 8002040:	20003fec 	.word	0x20003fec

08002044 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af02      	add	r7, sp, #8
 800204a:	6078      	str	r0, [r7, #4]

		if(TIMER->Instance==TIM2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002054:	d12d      	bne.n	80020b2 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8002056:	2100      	movs	r1, #0
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f002 f98b 	bl	8004374 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 800206a:	4b16      	ldr	r3, [pc, #88]	; (80020c4 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a16      	ldr	r2, [pc, #88]	; (80020c8 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8002070:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 8002072:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002078:	4b14      	ldr	r3, [pc, #80]	; (80020cc <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	2301      	movs	r3, #1
 800208a:	4910      	ldr	r1, [pc, #64]	; (80020cc <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 800208c:	4811      	ldr	r0, [pc, #68]	; (80020d4 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 800208e:	f00c fd39 	bl	800eb04 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8002092:	2201      	movs	r2, #1
 8002094:	4910      	ldr	r1, [pc, #64]	; (80020d8 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002096:	4811      	ldr	r0, [pc, #68]	; (80020dc <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002098:	f003 f96d 	bl	8005376 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 800209c:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 800209e:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d105      	bne.n	80020b2 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4619      	mov	r1, r3
 80020ac:	4809      	ldr	r0, [pc, #36]	; (80020d4 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 80020ae:	f7ff f9a3 	bl	80013f8 <ITM0_Write>
				 }
		}
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20003fef 	.word	0x20003fef
 80020c0:	20003fec 	.word	0x20003fec
 80020c4:	20004430 	.word	0x20004430
 80020c8:	20004404 	.word	0x20004404
 80020cc:	20003ffc 	.word	0x20003ffc
 80020d0:	200043fc 	.word	0x200043fc
 80020d4:	200041fc 	.word	0x200041fc
 80020d8:	20004400 	.word	0x20004400
 80020dc:	20000254 	.word	0x20000254
 80020e0:	200023b4 	.word	0x200023b4

080020e4 <ESP8266_HW_Init>:

uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af06      	add	r7, sp, #24
 80020ea:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 80020ec:	2364      	movs	r3, #100	; 0x64
 80020ee:	220c      	movs	r2, #12
 80020f0:	4943      	ldr	r1, [pc, #268]	; (8002200 <ESP8266_HW_Init+0x11c>)
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f003 f868 	bl	80051c8 <HAL_UART_Transmit>
		  HAL_Delay(500);
 80020f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020fc:	f000 fbb0 	bl	8002860 <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 8002100:	4b40      	ldr	r3, [pc, #256]	; (8002204 <ESP8266_HW_Init+0x120>)
 8002102:	2205      	movs	r2, #5
 8002104:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART_RX_items;
 8002108:	4b3f      	ldr	r3, [pc, #252]	; (8002208 <ESP8266_HW_Init+0x124>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a3d      	ldr	r2, [pc, #244]	; (8002204 <ESP8266_HW_Init+0x120>)
 800210e:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 8002112:	e00e      	b.n	8002132 <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 8002114:	4b3c      	ldr	r3, [pc, #240]	; (8002208 <ESP8266_HW_Init+0x124>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a3a      	ldr	r2, [pc, #232]	; (8002204 <ESP8266_HW_Init+0x120>)
 800211a:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  	  if (ESP_ticks>=5000)
 800211e:	4b3b      	ldr	r3, [pc, #236]	; (800220c <ESP8266_HW_Init+0x128>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f241 3287 	movw	r2, #4999	; 0x1387
 8002126:	4293      	cmp	r3, r2
 8002128:	dd03      	ble.n	8002132 <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 800212a:	4b39      	ldr	r3, [pc, #228]	; (8002210 <ESP8266_HW_Init+0x12c>)
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
			  		 break;
 8002130:	e012      	b.n	8002158 <ESP8266_HW_Init+0x74>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 8002132:	2300      	movs	r3, #0
 8002134:	9304      	str	r3, [sp, #16]
 8002136:	4b37      	ldr	r3, [pc, #220]	; (8002214 <ESP8266_HW_Init+0x130>)
 8002138:	9303      	str	r3, [sp, #12]
 800213a:	4b37      	ldr	r3, [pc, #220]	; (8002218 <ESP8266_HW_Init+0x134>)
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	4b37      	ldr	r3, [pc, #220]	; (800221c <ESP8266_HW_Init+0x138>)
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	4b37      	ldr	r3, [pc, #220]	; (8002220 <ESP8266_HW_Init+0x13c>)
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	4b37      	ldr	r3, [pc, #220]	; (8002224 <ESP8266_HW_Init+0x140>)
 8002148:	4a37      	ldr	r2, [pc, #220]	; (8002228 <ESP8266_HW_Init+0x144>)
 800214a:	4938      	ldr	r1, [pc, #224]	; (800222c <ESP8266_HW_Init+0x148>)
 800214c:	4838      	ldr	r0, [pc, #224]	; (8002230 <ESP8266_HW_Init+0x14c>)
 800214e:	f00c f973 	bl	800e438 <FT_String_ND>
 8002152:	4603      	mov	r3, r0
 8002154:	2b01      	cmp	r3, #1
 8002156:	d1dd      	bne.n	8002114 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 8002158:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <ESP8266_HW_Init+0x12c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d129      	bne.n	80021b4 <ESP8266_HW_Init+0xd0>
		  {
			  wf._n_fcomp=strlen("ready");
 8002160:	4b28      	ldr	r3, [pc, #160]	; (8002204 <ESP8266_HW_Init+0x120>)
 8002162:	2205      	movs	r2, #5
 8002164:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			  wf._n_orig=UART_RX_items;
 8002168:	4b27      	ldr	r3, [pc, #156]	; (8002208 <ESP8266_HW_Init+0x124>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a25      	ldr	r2, [pc, #148]	; (8002204 <ESP8266_HW_Init+0x120>)
 800216e:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 8002172:	e00a      	b.n	800218a <ESP8266_HW_Init+0xa6>
			  {
				  wf._n_orig=UART_RX_items;
 8002174:	4b24      	ldr	r3, [pc, #144]	; (8002208 <ESP8266_HW_Init+0x124>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a22      	ldr	r2, [pc, #136]	; (8002204 <ESP8266_HW_Init+0x120>)
 800217a:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 800217e:	4b23      	ldr	r3, [pc, #140]	; (800220c <ESP8266_HW_Init+0x128>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f241 3287 	movw	r2, #4999	; 0x1387
 8002186:	4293      	cmp	r3, r2
 8002188:	dc13      	bgt.n	80021b2 <ESP8266_HW_Init+0xce>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 800218a:	2300      	movs	r3, #0
 800218c:	9304      	str	r3, [sp, #16]
 800218e:	4b21      	ldr	r3, [pc, #132]	; (8002214 <ESP8266_HW_Init+0x130>)
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	4b21      	ldr	r3, [pc, #132]	; (8002218 <ESP8266_HW_Init+0x134>)
 8002194:	9302      	str	r3, [sp, #8]
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <ESP8266_HW_Init+0x138>)
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	4b21      	ldr	r3, [pc, #132]	; (8002220 <ESP8266_HW_Init+0x13c>)
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <ESP8266_HW_Init+0x140>)
 80021a0:	4a21      	ldr	r2, [pc, #132]	; (8002228 <ESP8266_HW_Init+0x144>)
 80021a2:	4922      	ldr	r1, [pc, #136]	; (800222c <ESP8266_HW_Init+0x148>)
 80021a4:	4822      	ldr	r0, [pc, #136]	; (8002230 <ESP8266_HW_Init+0x14c>)
 80021a6:	f00c f947 	bl	800e438 <FT_String_ND>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d1e1      	bne.n	8002174 <ESP8266_HW_Init+0x90>
 80021b0:	e000      	b.n	80021b4 <ESP8266_HW_Init+0xd0>
					 {
					 break;
 80021b2:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 80021b4:	4b15      	ldr	r3, [pc, #84]	; (800220c <ESP8266_HW_Init+0x128>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f241 3287 	movw	r2, #4999	; 0x1387
 80021bc:	4293      	cmp	r3, r2
 80021be:	dc06      	bgt.n	80021ce <ESP8266_HW_Init+0xea>
		  {
			  ESP_REinit=10;
 80021c0:	4b1c      	ldr	r3, [pc, #112]	; (8002234 <ESP8266_HW_Init+0x150>)
 80021c2:	220a      	movs	r2, #10
 80021c4:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <ESP8266_HW_Init+0x128>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e008      	b.n	80021e0 <ESP8266_HW_Init+0xfc>
		  }
		  else
		  {
			  ESP_REinit++;
 80021ce:	4b19      	ldr	r3, [pc, #100]	; (8002234 <ESP8266_HW_Init+0x150>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	3301      	adds	r3, #1
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b17      	ldr	r3, [pc, #92]	; (8002234 <ESP8266_HW_Init+0x150>)
 80021d8:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <ESP8266_HW_Init+0x128>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <ESP8266_HW_Init+0x150>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b05      	cmp	r3, #5
 80021e6:	d981      	bls.n	80020ec <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <ESP8266_HW_Init+0x150>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b0a      	cmp	r3, #10
 80021ee:	d101      	bne.n	80021f4 <ESP8266_HW_Init+0x110>
	  {
		  return(1);
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <ESP8266_HW_Init+0x112>
	  }
	  else
	  {
		  return(0);
 80021f4:	2300      	movs	r3, #0
	  }
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	080103ac 	.word	0x080103ac
 8002204:	200023b4 	.word	0x200023b4
 8002208:	20004404 	.word	0x20004404
 800220c:	20004408 	.word	0x20004408
 8002210:	20003fea 	.word	0x20003fea
 8002214:	20002e48 	.word	0x20002e48
 8002218:	20004418 	.word	0x20004418
 800221c:	20003094 	.word	0x20003094
 8002220:	20002c48 	.word	0x20002c48
 8002224:	200030a0 	.word	0x200030a0
 8002228:	080103bc 	.word	0x080103bc
 800222c:	2000308c 	.word	0x2000308c
 8002230:	200041fc 	.word	0x200041fc
 8002234:	20003fe9 	.word	0x20003fe9

08002238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800223c:	b672      	cpsid	i
}
 800223e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002240:	e7fe      	b.n	8002240 <Error_Handler+0x8>
	...

08002244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <HAL_MspInit+0x4c>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	4a0f      	ldr	r2, [pc, #60]	; (8002290 <HAL_MspInit+0x4c>)
 8002254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002258:	6453      	str	r3, [r2, #68]	; 0x44
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <HAL_MspInit+0x4c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	603b      	str	r3, [r7, #0]
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_MspInit+0x4c>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	4a08      	ldr	r2, [pc, #32]	; (8002290 <HAL_MspInit+0x4c>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002274:	6413      	str	r3, [r2, #64]	; 0x40
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_MspInit+0x4c>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800

08002294 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a19      	ldr	r2, [pc, #100]	; (8002318 <HAL_SPI_MspInit+0x84>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d12b      	bne.n	800230e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_SPI_MspInit+0x88>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	4a17      	ldr	r2, [pc, #92]	; (800231c <HAL_SPI_MspInit+0x88>)
 80022c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022c4:	6453      	str	r3, [r2, #68]	; 0x44
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <HAL_SPI_MspInit+0x88>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_SPI_MspInit+0x88>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a10      	ldr	r2, [pc, #64]	; (800231c <HAL_SPI_MspInit+0x88>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <HAL_SPI_MspInit+0x88>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022ee:	23e0      	movs	r3, #224	; 0xe0
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022fe:	2305      	movs	r3, #5
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	4805      	ldr	r0, [pc, #20]	; (8002320 <HAL_SPI_MspInit+0x8c>)
 800230a:	f000 fca3 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800230e:	bf00      	nop
 8002310:	3728      	adds	r7, #40	; 0x28
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40013000 	.word	0x40013000
 800231c:	40023800 	.word	0x40023800
 8002320:	40020000 	.word	0x40020000

08002324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002334:	d115      	bne.n	8002362 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b0c      	ldr	r3, [pc, #48]	; (800236c <HAL_TIM_Base_MspInit+0x48>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	4a0b      	ldr	r2, [pc, #44]	; (800236c <HAL_TIM_Base_MspInit+0x48>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_TIM_Base_MspInit+0x48>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	201c      	movs	r0, #28
 8002358:	f000 fba5 	bl	8002aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800235c:	201c      	movs	r0, #28
 800235e:	f000 fbbe 	bl	8002ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800

08002370 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08c      	sub	sp, #48	; 0x30
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 031c 	add.w	r3, r7, #28
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a3a      	ldr	r2, [pc, #232]	; (8002478 <HAL_UART_MspInit+0x108>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d135      	bne.n	80023fe <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	4b39      	ldr	r3, [pc, #228]	; (800247c <HAL_UART_MspInit+0x10c>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	4a38      	ldr	r2, [pc, #224]	; (800247c <HAL_UART_MspInit+0x10c>)
 800239c:	f043 0310 	orr.w	r3, r3, #16
 80023a0:	6453      	str	r3, [r2, #68]	; 0x44
 80023a2:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_UART_MspInit+0x10c>)
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	4b32      	ldr	r3, [pc, #200]	; (800247c <HAL_UART_MspInit+0x10c>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a31      	ldr	r2, [pc, #196]	; (800247c <HAL_UART_MspInit+0x10c>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b2f      	ldr	r3, [pc, #188]	; (800247c <HAL_UART_MspInit+0x10c>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = WF_TX_Pin|WF_RX_Pin;
 80023ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d8:	2303      	movs	r3, #3
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023dc:	2307      	movs	r3, #7
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	4619      	mov	r1, r3
 80023e6:	4826      	ldr	r0, [pc, #152]	; (8002480 <HAL_UART_MspInit+0x110>)
 80023e8:	f000 fc34 	bl	8002c54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023ec:	2200      	movs	r2, #0
 80023ee:	2100      	movs	r1, #0
 80023f0:	2025      	movs	r0, #37	; 0x25
 80023f2:	f000 fb58 	bl	8002aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023f6:	2025      	movs	r0, #37	; 0x25
 80023f8:	f000 fb71 	bl	8002ade <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023fc:	e038      	b.n	8002470 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a20      	ldr	r2, [pc, #128]	; (8002484 <HAL_UART_MspInit+0x114>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d133      	bne.n	8002470 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	4b1b      	ldr	r3, [pc, #108]	; (800247c <HAL_UART_MspInit+0x10c>)
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	4a1a      	ldr	r2, [pc, #104]	; (800247c <HAL_UART_MspInit+0x10c>)
 8002412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002416:	6413      	str	r3, [r2, #64]	; 0x40
 8002418:	4b18      	ldr	r3, [pc, #96]	; (800247c <HAL_UART_MspInit+0x10c>)
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	4b14      	ldr	r3, [pc, #80]	; (800247c <HAL_UART_MspInit+0x10c>)
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	4a13      	ldr	r2, [pc, #76]	; (800247c <HAL_UART_MspInit+0x10c>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6313      	str	r3, [r2, #48]	; 0x30
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <HAL_UART_MspInit+0x10c>)
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PORT2TX_Pin|PORT2_RX_Pin;
 8002440:	230c      	movs	r3, #12
 8002442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002450:	2307      	movs	r3, #7
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002454:	f107 031c 	add.w	r3, r7, #28
 8002458:	4619      	mov	r1, r3
 800245a:	4809      	ldr	r0, [pc, #36]	; (8002480 <HAL_UART_MspInit+0x110>)
 800245c:	f000 fbfa 	bl	8002c54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002460:	2200      	movs	r2, #0
 8002462:	2100      	movs	r1, #0
 8002464:	2026      	movs	r0, #38	; 0x26
 8002466:	f000 fb1e 	bl	8002aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800246a:	2026      	movs	r0, #38	; 0x26
 800246c:	f000 fb37 	bl	8002ade <HAL_NVIC_EnableIRQ>
}
 8002470:	bf00      	nop
 8002472:	3730      	adds	r7, #48	; 0x30
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40011000 	.word	0x40011000
 800247c:	40023800 	.word	0x40023800
 8002480:	40020000 	.word	0x40020000
 8002484:	40004400 	.word	0x40004400

08002488 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a13      	ldr	r2, [pc, #76]	; (80024e4 <HAL_UART_MspDeInit+0x5c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d10e      	bne.n	80024b8 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <HAL_UART_MspDeInit+0x60>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <HAL_UART_MspDeInit+0x60>)
 80024a0:	f023 0310 	bic.w	r3, r3, #16
 80024a4:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, WF_TX_Pin|WF_RX_Pin);
 80024a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80024aa:	4810      	ldr	r0, [pc, #64]	; (80024ec <HAL_UART_MspDeInit+0x64>)
 80024ac:	f000 fd56 	bl	8002f5c <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80024b0:	2025      	movs	r0, #37	; 0x25
 80024b2:	f000 fb22 	bl	8002afa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80024b6:	e011      	b.n	80024dc <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0c      	ldr	r2, [pc, #48]	; (80024f0 <HAL_UART_MspDeInit+0x68>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d10c      	bne.n	80024dc <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_UART_MspDeInit+0x60>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a08      	ldr	r2, [pc, #32]	; (80024e8 <HAL_UART_MspDeInit+0x60>)
 80024c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PORT2TX_Pin|PORT2_RX_Pin);
 80024ce:	210c      	movs	r1, #12
 80024d0:	4806      	ldr	r0, [pc, #24]	; (80024ec <HAL_UART_MspDeInit+0x64>)
 80024d2:	f000 fd43 	bl	8002f5c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80024d6:	2026      	movs	r0, #38	; 0x26
 80024d8:	f000 fb0f 	bl	8002afa <HAL_NVIC_DisableIRQ>
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40011000 	.word	0x40011000
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40020000 	.word	0x40020000
 80024f0:	40004400 	.word	0x40004400

080024f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <NMI_Handler+0x4>

080024fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024fe:	e7fe      	b.n	80024fe <HardFault_Handler+0x4>

08002500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002504:	e7fe      	b.n	8002504 <MemManage_Handler+0x4>

08002506 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800250a:	e7fe      	b.n	800250a <BusFault_Handler+0x4>

0800250c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002510:	e7fe      	b.n	8002510 <UsageFault_Handler+0x4>

08002512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <TIM2_IRQHandler+0x10>)
 8002542:	f002 f823 	bl	800458c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	2000020c 	.word	0x2000020c

08002550 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <USART1_IRQHandler+0x10>)
 8002556:	f002 ff3f 	bl	80053d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000254 	.word	0x20000254

08002564 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <USART2_IRQHandler+0x10>)
 800256a:	f002 ff35 	bl	80053d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000298 	.word	0x20000298

08002578 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
	return 1;
 800257c:	2301      	movs	r3, #1
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <_kill>:

int _kill(int pid, int sig)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002592:	f00c fd63 	bl	800f05c <__errno>
 8002596:	4603      	mov	r3, r0
 8002598:	2216      	movs	r2, #22
 800259a:	601a      	str	r2, [r3, #0]
	return -1;
 800259c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <_exit>:

void _exit (int status)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025b0:	f04f 31ff 	mov.w	r1, #4294967295
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ffe7 	bl	8002588 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025ba:	e7fe      	b.n	80025ba <_exit+0x12>

080025bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	e00a      	b.n	80025e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025ce:	f3af 8000 	nop.w
 80025d2:	4601      	mov	r1, r0
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	60ba      	str	r2, [r7, #8]
 80025da:	b2ca      	uxtb	r2, r1
 80025dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	3301      	adds	r3, #1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	dbf0      	blt.n	80025ce <_read+0x12>
	}

return len;
 80025ec:	687b      	ldr	r3, [r7, #4]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	e009      	b.n	800261c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	60ba      	str	r2, [r7, #8]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	3301      	adds	r3, #1
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	429a      	cmp	r2, r3
 8002622:	dbf1      	blt.n	8002608 <_write+0x12>
	}
	return len;
 8002624:	687b      	ldr	r3, [r7, #4]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <_close>:

int _close(int file)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
	return -1;
 8002636:	f04f 33ff 	mov.w	r3, #4294967295
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002656:	605a      	str	r2, [r3, #4]
	return 0;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <_isatty>:

int _isatty(int file)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
	return 1;
 800266e:	2301      	movs	r3, #1
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
	return 0;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026a0:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <_sbrk+0x5c>)
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <_sbrk+0x60>)
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026ac:	4b13      	ldr	r3, [pc, #76]	; (80026fc <_sbrk+0x64>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d102      	bne.n	80026ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <_sbrk+0x64>)
 80026b6:	4a12      	ldr	r2, [pc, #72]	; (8002700 <_sbrk+0x68>)
 80026b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <_sbrk+0x64>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d207      	bcs.n	80026d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026c8:	f00c fcc8 	bl	800f05c <__errno>
 80026cc:	4603      	mov	r3, r0
 80026ce:	220c      	movs	r2, #12
 80026d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
 80026d6:	e009      	b.n	80026ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <_sbrk+0x64>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026de:	4b07      	ldr	r3, [pc, #28]	; (80026fc <_sbrk+0x64>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	4a05      	ldr	r2, [pc, #20]	; (80026fc <_sbrk+0x64>)
 80026e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ea:	68fb      	ldr	r3, [r7, #12]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20020000 	.word	0x20020000
 80026f8:	00000400 	.word	0x00000400
 80026fc:	20004438 	.word	0x20004438
 8002700:	20004590 	.word	0x20004590

08002704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <SystemInit+0x20>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270e:	4a05      	ldr	r2, [pc, #20]	; (8002724 <SystemInit+0x20>)
 8002710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002760 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800272c:	480d      	ldr	r0, [pc, #52]	; (8002764 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800272e:	490e      	ldr	r1, [pc, #56]	; (8002768 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002730:	4a0e      	ldr	r2, [pc, #56]	; (800276c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002734:	e002      	b.n	800273c <LoopCopyDataInit>

08002736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273a:	3304      	adds	r3, #4

0800273c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800273c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002740:	d3f9      	bcc.n	8002736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002742:	4a0b      	ldr	r2, [pc, #44]	; (8002770 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002744:	4c0b      	ldr	r4, [pc, #44]	; (8002774 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002748:	e001      	b.n	800274e <LoopFillZerobss>

0800274a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800274c:	3204      	adds	r2, #4

0800274e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002750:	d3fb      	bcc.n	800274a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002752:	f7ff ffd7 	bl	8002704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002756:	f00c fc87 	bl	800f068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800275a:	f7fd ff9b 	bl	8000694 <main>
  bx  lr    
 800275e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002760:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002768:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 800276c:	080108e8 	.word	0x080108e8
  ldr r2, =_sbss
 8002770:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8002774:	2000458c 	.word	0x2000458c

08002778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002778:	e7fe      	b.n	8002778 <ADC_IRQHandler>
	...

0800277c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002780:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <HAL_Init+0x40>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0d      	ldr	r2, [pc, #52]	; (80027bc <HAL_Init+0x40>)
 8002786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800278a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_Init+0x40>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <HAL_Init+0x40>)
 8002792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <HAL_Init+0x40>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a07      	ldr	r2, [pc, #28]	; (80027bc <HAL_Init+0x40>)
 800279e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a4:	2003      	movs	r0, #3
 80027a6:	f000 f973 	bl	8002a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027aa:	200f      	movs	r0, #15
 80027ac:	f000 f808 	bl	80027c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b0:	f7ff fd48 	bl	8002244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40023c00 	.word	0x40023c00

080027c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_InitTick+0x54>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_InitTick+0x58>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	4619      	mov	r1, r3
 80027d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027da:	fbb2 f3f3 	udiv	r3, r2, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f999 	bl	8002b16 <HAL_SYSTICK_Config>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e00e      	b.n	800280c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b0f      	cmp	r3, #15
 80027f2:	d80a      	bhi.n	800280a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f4:	2200      	movs	r2, #0
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295
 80027fc:	f000 f953 	bl	8002aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002800:	4a06      	ldr	r2, [pc, #24]	; (800281c <HAL_InitTick+0x5c>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	e000      	b.n	800280c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000084 	.word	0x20000084
 8002818:	2000008c 	.word	0x2000008c
 800281c:	20000088 	.word	0x20000088

08002820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_IncTick+0x20>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_IncTick+0x24>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4413      	add	r3, r2
 8002830:	4a04      	ldr	r2, [pc, #16]	; (8002844 <HAL_IncTick+0x24>)
 8002832:	6013      	str	r3, [r2, #0]
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	2000008c 	.word	0x2000008c
 8002844:	2000443c 	.word	0x2000443c

08002848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return uwTick;
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <HAL_GetTick+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	2000443c 	.word	0x2000443c

08002860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002868:	f7ff ffee 	bl	8002848 <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d005      	beq.n	8002886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_Delay+0x44>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4413      	add	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002886:	bf00      	nop
 8002888:	f7ff ffde 	bl	8002848 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	429a      	cmp	r2, r3
 8002896:	d8f7      	bhi.n	8002888 <HAL_Delay+0x28>
  {
  }
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	2000008c 	.word	0x2000008c

080028a8 <__NVIC_SetPriorityGrouping>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c4:	4013      	ands	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028da:	4a04      	ldr	r2, [pc, #16]	; (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	60d3      	str	r3, [r2, #12]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_GetPriorityGrouping>:
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f4:	4b04      	ldr	r3, [pc, #16]	; (8002908 <__NVIC_GetPriorityGrouping+0x18>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	f003 0307 	and.w	r3, r3, #7
}
 80028fe:	4618      	mov	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_EnableIRQ>:
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	2b00      	cmp	r3, #0
 800291c:	db0b      	blt.n	8002936 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	f003 021f 	and.w	r2, r3, #31
 8002924:	4907      	ldr	r1, [pc, #28]	; (8002944 <__NVIC_EnableIRQ+0x38>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2001      	movs	r0, #1
 800292e:	fa00 f202 	lsl.w	r2, r0, r2
 8002932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	e000e100 	.word	0xe000e100

08002948 <__NVIC_DisableIRQ>:
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	2b00      	cmp	r3, #0
 8002958:	db12      	blt.n	8002980 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	490a      	ldr	r1, [pc, #40]	; (800298c <__NVIC_DisableIRQ+0x44>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	2001      	movs	r0, #1
 800296a:	fa00 f202 	lsl.w	r2, r0, r2
 800296e:	3320      	adds	r3, #32
 8002970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002974:	f3bf 8f4f 	dsb	sy
}
 8002978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800297a:	f3bf 8f6f 	isb	sy
}
 800297e:	bf00      	nop
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000e100 	.word	0xe000e100

08002990 <__NVIC_SetPriority>:
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	6039      	str	r1, [r7, #0]
 800299a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	db0a      	blt.n	80029ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	490c      	ldr	r1, [pc, #48]	; (80029dc <__NVIC_SetPriority+0x4c>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	0112      	lsls	r2, r2, #4
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	440b      	add	r3, r1
 80029b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80029b8:	e00a      	b.n	80029d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	4908      	ldr	r1, [pc, #32]	; (80029e0 <__NVIC_SetPriority+0x50>)
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	3b04      	subs	r3, #4
 80029c8:	0112      	lsls	r2, r2, #4
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	440b      	add	r3, r1
 80029ce:	761a      	strb	r2, [r3, #24]
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	e000e100 	.word	0xe000e100
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <NVIC_EncodePriority>:
{
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f1c3 0307 	rsb	r3, r3, #7
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	bf28      	it	cs
 8002a02:	2304      	movcs	r3, #4
 8002a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	2b06      	cmp	r3, #6
 8002a0c:	d902      	bls.n	8002a14 <NVIC_EncodePriority+0x30>
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3b03      	subs	r3, #3
 8002a12:	e000      	b.n	8002a16 <NVIC_EncodePriority+0x32>
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a18:	f04f 32ff 	mov.w	r2, #4294967295
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43da      	mvns	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	401a      	ands	r2, r3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	fa01 f303 	lsl.w	r3, r1, r3
 8002a36:	43d9      	mvns	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	4313      	orrs	r3, r2
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3724      	adds	r7, #36	; 0x24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
	...

08002a4c <SysTick_Config>:
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a5c:	d301      	bcc.n	8002a62 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e00f      	b.n	8002a82 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a62:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <SysTick_Config+0x40>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a6a:	210f      	movs	r1, #15
 8002a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a70:	f7ff ff8e 	bl	8002990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a74:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <SysTick_Config+0x40>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a7a:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <SysTick_Config+0x40>)
 8002a7c:	2207      	movs	r2, #7
 8002a7e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	e000e010 	.word	0xe000e010

08002a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff ff05 	bl	80028a8 <__NVIC_SetPriorityGrouping>
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b086      	sub	sp, #24
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	4603      	mov	r3, r0
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ab8:	f7ff ff1a 	bl	80028f0 <__NVIC_GetPriorityGrouping>
 8002abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68b9      	ldr	r1, [r7, #8]
 8002ac2:	6978      	ldr	r0, [r7, #20]
 8002ac4:	f7ff ff8e 	bl	80029e4 <NVIC_EncodePriority>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff5d 	bl	8002990 <__NVIC_SetPriority>
}
 8002ad6:	bf00      	nop
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff0d 	bl	800290c <__NVIC_EnableIRQ>
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff1d 	bl	8002948 <__NVIC_DisableIRQ>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff ff94 	bl	8002a4c <SysTick_Config>
 8002b24:	4603      	mov	r3, r0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b3c:	f7ff fe84 	bl	8002848 <HAL_GetTick>
 8002b40:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d008      	beq.n	8002b60 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2280      	movs	r2, #128	; 0x80
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e052      	b.n	8002c06 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0216 	bic.w	r2, r2, #22
 8002b6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b7e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d103      	bne.n	8002b90 <HAL_DMA_Abort+0x62>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0208 	bic.w	r2, r2, #8
 8002b9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bb0:	e013      	b.n	8002bda <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bb2:	f7ff fe49 	bl	8002848 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	d90c      	bls.n	8002bda <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2203      	movs	r2, #3
 8002bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e015      	b.n	8002c06 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e4      	bne.n	8002bb2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	223f      	movs	r2, #63	; 0x3f
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d004      	beq.n	8002c2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2280      	movs	r2, #128	; 0x80
 8002c26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e00c      	b.n	8002c46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2205      	movs	r2, #5
 8002c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0201 	bic.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	e159      	b.n	8002f24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c70:	2201      	movs	r2, #1
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	f040 8148 	bne.w	8002f1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d005      	beq.n	8002ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d130      	bne.n	8002d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cdc:	2201      	movs	r2, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 0201 	and.w	r2, r3, #1
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d017      	beq.n	8002d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	2203      	movs	r2, #3
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d123      	bne.n	8002d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	08da      	lsrs	r2, r3, #3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3208      	adds	r2, #8
 8002d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	220f      	movs	r2, #15
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	08da      	lsrs	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3208      	adds	r2, #8
 8002d92:	69b9      	ldr	r1, [r7, #24]
 8002d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	2203      	movs	r2, #3
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0203 	and.w	r2, r3, #3
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80a2 	beq.w	8002f1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	4b57      	ldr	r3, [pc, #348]	; (8002f3c <HAL_GPIO_Init+0x2e8>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	4a56      	ldr	r2, [pc, #344]	; (8002f3c <HAL_GPIO_Init+0x2e8>)
 8002de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dea:	4b54      	ldr	r3, [pc, #336]	; (8002f3c <HAL_GPIO_Init+0x2e8>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002df6:	4a52      	ldr	r2, [pc, #328]	; (8002f40 <HAL_GPIO_Init+0x2ec>)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	220f      	movs	r2, #15
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43db      	mvns	r3, r3
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a49      	ldr	r2, [pc, #292]	; (8002f44 <HAL_GPIO_Init+0x2f0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d019      	beq.n	8002e56 <HAL_GPIO_Init+0x202>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a48      	ldr	r2, [pc, #288]	; (8002f48 <HAL_GPIO_Init+0x2f4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_GPIO_Init+0x1fe>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a47      	ldr	r2, [pc, #284]	; (8002f4c <HAL_GPIO_Init+0x2f8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00d      	beq.n	8002e4e <HAL_GPIO_Init+0x1fa>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a46      	ldr	r2, [pc, #280]	; (8002f50 <HAL_GPIO_Init+0x2fc>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <HAL_GPIO_Init+0x1f6>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a45      	ldr	r2, [pc, #276]	; (8002f54 <HAL_GPIO_Init+0x300>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_GPIO_Init+0x1f2>
 8002e42:	2304      	movs	r3, #4
 8002e44:	e008      	b.n	8002e58 <HAL_GPIO_Init+0x204>
 8002e46:	2307      	movs	r3, #7
 8002e48:	e006      	b.n	8002e58 <HAL_GPIO_Init+0x204>
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e004      	b.n	8002e58 <HAL_GPIO_Init+0x204>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e002      	b.n	8002e58 <HAL_GPIO_Init+0x204>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_GPIO_Init+0x204>
 8002e56:	2300      	movs	r3, #0
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	f002 0203 	and.w	r2, r2, #3
 8002e5e:	0092      	lsls	r2, r2, #2
 8002e60:	4093      	lsls	r3, r2
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e68:	4935      	ldr	r1, [pc, #212]	; (8002f40 <HAL_GPIO_Init+0x2ec>)
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	089b      	lsrs	r3, r3, #2
 8002e6e:	3302      	adds	r3, #2
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e76:	4b38      	ldr	r3, [pc, #224]	; (8002f58 <HAL_GPIO_Init+0x304>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e9a:	4a2f      	ldr	r2, [pc, #188]	; (8002f58 <HAL_GPIO_Init+0x304>)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ea0:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <HAL_GPIO_Init+0x304>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ec4:	4a24      	ldr	r2, [pc, #144]	; (8002f58 <HAL_GPIO_Init+0x304>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eca:	4b23      	ldr	r3, [pc, #140]	; (8002f58 <HAL_GPIO_Init+0x304>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eee:	4a1a      	ldr	r2, [pc, #104]	; (8002f58 <HAL_GPIO_Init+0x304>)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ef4:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <HAL_GPIO_Init+0x304>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f18:	4a0f      	ldr	r2, [pc, #60]	; (8002f58 <HAL_GPIO_Init+0x304>)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3301      	adds	r3, #1
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b0f      	cmp	r3, #15
 8002f28:	f67f aea2 	bls.w	8002c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	bf00      	nop
 8002f30:	3724      	adds	r7, #36	; 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40013800 	.word	0x40013800
 8002f44:	40020000 	.word	0x40020000
 8002f48:	40020400 	.word	0x40020400
 8002f4c:	40020800 	.word	0x40020800
 8002f50:	40020c00 	.word	0x40020c00
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40013c00 	.word	0x40013c00

08002f5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	e0bb      	b.n	80030f0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	f040 80ab 	bne.w	80030ea <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002f94:	4a5c      	ldr	r2, [pc, #368]	; (8003108 <HAL_GPIO_DeInit+0x1ac>)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	089b      	lsrs	r3, r3, #2
 8002f9a:	3302      	adds	r3, #2
 8002f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f003 0303 	and.w	r3, r3, #3
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	220f      	movs	r2, #15
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a54      	ldr	r2, [pc, #336]	; (800310c <HAL_GPIO_DeInit+0x1b0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d019      	beq.n	8002ff2 <HAL_GPIO_DeInit+0x96>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a53      	ldr	r2, [pc, #332]	; (8003110 <HAL_GPIO_DeInit+0x1b4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <HAL_GPIO_DeInit+0x92>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a52      	ldr	r2, [pc, #328]	; (8003114 <HAL_GPIO_DeInit+0x1b8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00d      	beq.n	8002fea <HAL_GPIO_DeInit+0x8e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a51      	ldr	r2, [pc, #324]	; (8003118 <HAL_GPIO_DeInit+0x1bc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d007      	beq.n	8002fe6 <HAL_GPIO_DeInit+0x8a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a50      	ldr	r2, [pc, #320]	; (800311c <HAL_GPIO_DeInit+0x1c0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_GPIO_DeInit+0x86>
 8002fde:	2304      	movs	r3, #4
 8002fe0:	e008      	b.n	8002ff4 <HAL_GPIO_DeInit+0x98>
 8002fe2:	2307      	movs	r3, #7
 8002fe4:	e006      	b.n	8002ff4 <HAL_GPIO_DeInit+0x98>
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e004      	b.n	8002ff4 <HAL_GPIO_DeInit+0x98>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e002      	b.n	8002ff4 <HAL_GPIO_DeInit+0x98>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <HAL_GPIO_DeInit+0x98>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	f002 0203 	and.w	r2, r2, #3
 8002ffa:	0092      	lsls	r2, r2, #2
 8002ffc:	4093      	lsls	r3, r2
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	429a      	cmp	r2, r3
 8003002:	d132      	bne.n	800306a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003004:	4b46      	ldr	r3, [pc, #280]	; (8003120 <HAL_GPIO_DeInit+0x1c4>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	43db      	mvns	r3, r3
 800300c:	4944      	ldr	r1, [pc, #272]	; (8003120 <HAL_GPIO_DeInit+0x1c4>)
 800300e:	4013      	ands	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003012:	4b43      	ldr	r3, [pc, #268]	; (8003120 <HAL_GPIO_DeInit+0x1c4>)
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	43db      	mvns	r3, r3
 800301a:	4941      	ldr	r1, [pc, #260]	; (8003120 <HAL_GPIO_DeInit+0x1c4>)
 800301c:	4013      	ands	r3, r2
 800301e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003020:	4b3f      	ldr	r3, [pc, #252]	; (8003120 <HAL_GPIO_DeInit+0x1c4>)
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	43db      	mvns	r3, r3
 8003028:	493d      	ldr	r1, [pc, #244]	; (8003120 <HAL_GPIO_DeInit+0x1c4>)
 800302a:	4013      	ands	r3, r2
 800302c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800302e:	4b3c      	ldr	r3, [pc, #240]	; (8003120 <HAL_GPIO_DeInit+0x1c4>)
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	43db      	mvns	r3, r3
 8003036:	493a      	ldr	r1, [pc, #232]	; (8003120 <HAL_GPIO_DeInit+0x1c4>)
 8003038:	4013      	ands	r3, r2
 800303a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	220f      	movs	r2, #15
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800304c:	4a2e      	ldr	r2, [pc, #184]	; (8003108 <HAL_GPIO_DeInit+0x1ac>)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	089b      	lsrs	r3, r3, #2
 8003052:	3302      	adds	r3, #2
 8003054:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	43da      	mvns	r2, r3
 800305c:	482a      	ldr	r0, [pc, #168]	; (8003108 <HAL_GPIO_DeInit+0x1ac>)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	400a      	ands	r2, r1
 8003064:	3302      	adds	r3, #2
 8003066:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	2103      	movs	r1, #3
 8003074:	fa01 f303 	lsl.w	r3, r1, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	401a      	ands	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	08da      	lsrs	r2, r3, #3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3208      	adds	r2, #8
 8003088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	220f      	movs	r2, #15
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	08d2      	lsrs	r2, r2, #3
 80030a0:	4019      	ands	r1, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3208      	adds	r2, #8
 80030a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	2103      	movs	r1, #3
 80030b4:	fa01 f303 	lsl.w	r3, r1, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	401a      	ands	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	2101      	movs	r1, #1
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	fa01 f303 	lsl.w	r3, r1, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	401a      	ands	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	2103      	movs	r1, #3
 80030de:	fa01 f303 	lsl.w	r3, r1, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	401a      	ands	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	3301      	adds	r3, #1
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2b0f      	cmp	r3, #15
 80030f4:	f67f af40 	bls.w	8002f78 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40013800 	.word	0x40013800
 800310c:	40020000 	.word	0x40020000
 8003110:	40020400 	.word	0x40020400
 8003114:	40020800 	.word	0x40020800
 8003118:	40020c00 	.word	0x40020c00
 800311c:	40021000 	.word	0x40021000
 8003120:	40013c00 	.word	0x40013c00

08003124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	807b      	strh	r3, [r7, #2]
 8003130:	4613      	mov	r3, r2
 8003132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003134:	787b      	ldrb	r3, [r7, #1]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003140:	e003      	b.n	800314a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003142:	887b      	ldrh	r3, [r7, #2]
 8003144:	041a      	lsls	r2, r3, #16
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	619a      	str	r2, [r3, #24]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003156:	b480      	push	{r7}
 8003158:	b085      	sub	sp, #20
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003168:	887a      	ldrh	r2, [r7, #2]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4013      	ands	r3, r2
 800316e:	041a      	lsls	r2, r3, #16
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	43d9      	mvns	r1, r3
 8003174:	887b      	ldrh	r3, [r7, #2]
 8003176:	400b      	ands	r3, r1
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	619a      	str	r2, [r3, #24]
}
 800317e:	bf00      	nop
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
	...

0800318c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e267      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d075      	beq.n	8003296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031aa:	4b88      	ldr	r3, [pc, #544]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b04      	cmp	r3, #4
 80031b4:	d00c      	beq.n	80031d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b6:	4b85      	ldr	r3, [pc, #532]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d112      	bne.n	80031e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c2:	4b82      	ldr	r3, [pc, #520]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ce:	d10b      	bne.n	80031e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d0:	4b7e      	ldr	r3, [pc, #504]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d05b      	beq.n	8003294 <HAL_RCC_OscConfig+0x108>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d157      	bne.n	8003294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e242      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f0:	d106      	bne.n	8003200 <HAL_RCC_OscConfig+0x74>
 80031f2:	4b76      	ldr	r3, [pc, #472]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a75      	ldr	r2, [pc, #468]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80031f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	e01d      	b.n	800323c <HAL_RCC_OscConfig+0xb0>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0x98>
 800320a:	4b70      	ldr	r3, [pc, #448]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a6f      	ldr	r2, [pc, #444]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	4b6d      	ldr	r3, [pc, #436]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a6c      	ldr	r2, [pc, #432]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800321c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	e00b      	b.n	800323c <HAL_RCC_OscConfig+0xb0>
 8003224:	4b69      	ldr	r3, [pc, #420]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a68      	ldr	r2, [pc, #416]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800322a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	4b66      	ldr	r3, [pc, #408]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a65      	ldr	r2, [pc, #404]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800323a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d013      	beq.n	800326c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003244:	f7ff fb00 	bl	8002848 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800324c:	f7ff fafc 	bl	8002848 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	; 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e207      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325e:	4b5b      	ldr	r3, [pc, #364]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0f0      	beq.n	800324c <HAL_RCC_OscConfig+0xc0>
 800326a:	e014      	b.n	8003296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7ff faec 	bl	8002848 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003274:	f7ff fae8 	bl	8002848 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e1f3      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003286:	4b51      	ldr	r3, [pc, #324]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0xe8>
 8003292:	e000      	b.n	8003296 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d063      	beq.n	800336a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032a2:	4b4a      	ldr	r3, [pc, #296]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00b      	beq.n	80032c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ae:	4b47      	ldr	r3, [pc, #284]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d11c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ba:	4b44      	ldr	r3, [pc, #272]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d116      	bne.n	80032f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c6:	4b41      	ldr	r3, [pc, #260]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_RCC_OscConfig+0x152>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e1c7      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032de:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4937      	ldr	r1, [pc, #220]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f2:	e03a      	b.n	800336a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d020      	beq.n	800333e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032fc:	4b34      	ldr	r3, [pc, #208]	; (80033d0 <HAL_RCC_OscConfig+0x244>)
 80032fe:	2201      	movs	r2, #1
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7ff faa1 	bl	8002848 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800330a:	f7ff fa9d 	bl	8002848 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e1a8      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331c:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003328:	4b28      	ldr	r3, [pc, #160]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4925      	ldr	r1, [pc, #148]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003338:	4313      	orrs	r3, r2
 800333a:	600b      	str	r3, [r1, #0]
 800333c:	e015      	b.n	800336a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333e:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_RCC_OscConfig+0x244>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7ff fa80 	bl	8002848 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334c:	f7ff fa7c 	bl	8002848 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e187      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335e:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d036      	beq.n	80033e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d016      	beq.n	80033ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <HAL_RCC_OscConfig+0x248>)
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7ff fa60 	bl	8002848 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800338c:	f7ff fa5c 	bl	8002848 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e167      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_RCC_OscConfig+0x240>)
 80033a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x200>
 80033aa:	e01b      	b.n	80033e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_RCC_OscConfig+0x248>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b2:	f7ff fa49 	bl	8002848 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b8:	e00e      	b.n	80033d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ba:	f7ff fa45 	bl	8002848 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d907      	bls.n	80033d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e150      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
 80033cc:	40023800 	.word	0x40023800
 80033d0:	42470000 	.word	0x42470000
 80033d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d8:	4b88      	ldr	r3, [pc, #544]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80033da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1ea      	bne.n	80033ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8097 	beq.w	8003520 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f2:	2300      	movs	r3, #0
 80033f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f6:	4b81      	ldr	r3, [pc, #516]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10f      	bne.n	8003422 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	4b7d      	ldr	r3, [pc, #500]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	4a7c      	ldr	r2, [pc, #496]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800340c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003410:	6413      	str	r3, [r2, #64]	; 0x40
 8003412:	4b7a      	ldr	r3, [pc, #488]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003422:	4b77      	ldr	r3, [pc, #476]	; (8003600 <HAL_RCC_OscConfig+0x474>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d118      	bne.n	8003460 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800342e:	4b74      	ldr	r3, [pc, #464]	; (8003600 <HAL_RCC_OscConfig+0x474>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a73      	ldr	r2, [pc, #460]	; (8003600 <HAL_RCC_OscConfig+0x474>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800343a:	f7ff fa05 	bl	8002848 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003442:	f7ff fa01 	bl	8002848 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e10c      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	4b6a      	ldr	r3, [pc, #424]	; (8003600 <HAL_RCC_OscConfig+0x474>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d106      	bne.n	8003476 <HAL_RCC_OscConfig+0x2ea>
 8003468:	4b64      	ldr	r3, [pc, #400]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	4a63      	ldr	r2, [pc, #396]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	6713      	str	r3, [r2, #112]	; 0x70
 8003474:	e01c      	b.n	80034b0 <HAL_RCC_OscConfig+0x324>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b05      	cmp	r3, #5
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x30c>
 800347e:	4b5f      	ldr	r3, [pc, #380]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	4a5e      	ldr	r2, [pc, #376]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003484:	f043 0304 	orr.w	r3, r3, #4
 8003488:	6713      	str	r3, [r2, #112]	; 0x70
 800348a:	4b5c      	ldr	r3, [pc, #368]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	4a5b      	ldr	r2, [pc, #364]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	6713      	str	r3, [r2, #112]	; 0x70
 8003496:	e00b      	b.n	80034b0 <HAL_RCC_OscConfig+0x324>
 8003498:	4b58      	ldr	r3, [pc, #352]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	4a57      	ldr	r2, [pc, #348]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800349e:	f023 0301 	bic.w	r3, r3, #1
 80034a2:	6713      	str	r3, [r2, #112]	; 0x70
 80034a4:	4b55      	ldr	r3, [pc, #340]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	4a54      	ldr	r2, [pc, #336]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80034aa:	f023 0304 	bic.w	r3, r3, #4
 80034ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d015      	beq.n	80034e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b8:	f7ff f9c6 	bl	8002848 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034be:	e00a      	b.n	80034d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c0:	f7ff f9c2 	bl	8002848 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e0cb      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d6:	4b49      	ldr	r3, [pc, #292]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80034d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0ee      	beq.n	80034c0 <HAL_RCC_OscConfig+0x334>
 80034e2:	e014      	b.n	800350e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e4:	f7ff f9b0 	bl	8002848 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7ff f9ac 	bl	8002848 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e0b5      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003502:	4b3e      	ldr	r3, [pc, #248]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1ee      	bne.n	80034ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d105      	bne.n	8003520 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003514:	4b39      	ldr	r3, [pc, #228]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	4a38      	ldr	r2, [pc, #224]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800351a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800351e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80a1 	beq.w	800366c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800352a:	4b34      	ldr	r3, [pc, #208]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b08      	cmp	r3, #8
 8003534:	d05c      	beq.n	80035f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d141      	bne.n	80035c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353e:	4b31      	ldr	r3, [pc, #196]	; (8003604 <HAL_RCC_OscConfig+0x478>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7ff f980 	bl	8002848 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354c:	f7ff f97c 	bl	8002848 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e087      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355e:	4b27      	ldr	r3, [pc, #156]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69da      	ldr	r2, [r3, #28]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	019b      	lsls	r3, r3, #6
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	085b      	lsrs	r3, r3, #1
 8003582:	3b01      	subs	r3, #1
 8003584:	041b      	lsls	r3, r3, #16
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	491b      	ldr	r1, [pc, #108]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 8003590:	4313      	orrs	r3, r2
 8003592:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003594:	4b1b      	ldr	r3, [pc, #108]	; (8003604 <HAL_RCC_OscConfig+0x478>)
 8003596:	2201      	movs	r2, #1
 8003598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359a:	f7ff f955 	bl	8002848 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a2:	f7ff f951 	bl	8002848 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e05c      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x416>
 80035c0:	e054      	b.n	800366c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <HAL_RCC_OscConfig+0x478>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7ff f93e 	bl	8002848 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d0:	f7ff f93a 	bl	8002848 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e045      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_RCC_OscConfig+0x470>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x444>
 80035ee:	e03d      	b.n	800366c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d107      	bne.n	8003608 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e038      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
 80035fc:	40023800 	.word	0x40023800
 8003600:	40007000 	.word	0x40007000
 8003604:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003608:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <HAL_RCC_OscConfig+0x4ec>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d028      	beq.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d121      	bne.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d11a      	bne.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003638:	4013      	ands	r3, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800363e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003640:	4293      	cmp	r3, r2
 8003642:	d111      	bne.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	3b01      	subs	r3, #1
 8003652:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d107      	bne.n	8003668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40023800 	.word	0x40023800

0800367c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0cc      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003690:	4b68      	ldr	r3, [pc, #416]	; (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d90c      	bls.n	80036b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369e:	4b65      	ldr	r3, [pc, #404]	; (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b63      	ldr	r3, [pc, #396]	; (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0b8      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d020      	beq.n	8003706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d0:	4b59      	ldr	r3, [pc, #356]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4a58      	ldr	r2, [pc, #352]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036e8:	4b53      	ldr	r3, [pc, #332]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4a52      	ldr	r2, [pc, #328]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f4:	4b50      	ldr	r3, [pc, #320]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	494d      	ldr	r1, [pc, #308]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d044      	beq.n	800379c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d107      	bne.n	800372a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371a:	4b47      	ldr	r3, [pc, #284]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d119      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e07f      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d003      	beq.n	800373a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003736:	2b03      	cmp	r3, #3
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373a:	4b3f      	ldr	r3, [pc, #252]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e06f      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374a:	4b3b      	ldr	r3, [pc, #236]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e067      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800375a:	4b37      	ldr	r3, [pc, #220]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f023 0203 	bic.w	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4934      	ldr	r1, [pc, #208]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	4313      	orrs	r3, r2
 800376a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800376c:	f7ff f86c 	bl	8002848 <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003772:	e00a      	b.n	800378a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003774:	f7ff f868 	bl	8002848 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e04f      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	4b2b      	ldr	r3, [pc, #172]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 020c 	and.w	r2, r3, #12
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	429a      	cmp	r2, r3
 800379a:	d1eb      	bne.n	8003774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800379c:	4b25      	ldr	r3, [pc, #148]	; (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d20c      	bcs.n	80037c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b22      	ldr	r3, [pc, #136]	; (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b20      	ldr	r3, [pc, #128]	; (8003834 <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e032      	b.n	800382a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d0:	4b19      	ldr	r3, [pc, #100]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4916      	ldr	r1, [pc, #88]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	490e      	ldr	r1, [pc, #56]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003802:	f000 f821 	bl	8003848 <HAL_RCC_GetSysClockFreq>
 8003806:	4602      	mov	r2, r0
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	490a      	ldr	r1, [pc, #40]	; (800383c <HAL_RCC_ClockConfig+0x1c0>)
 8003814:	5ccb      	ldrb	r3, [r1, r3]
 8003816:	fa22 f303 	lsr.w	r3, r2, r3
 800381a:	4a09      	ldr	r2, [pc, #36]	; (8003840 <HAL_RCC_ClockConfig+0x1c4>)
 800381c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800381e:	4b09      	ldr	r3, [pc, #36]	; (8003844 <HAL_RCC_ClockConfig+0x1c8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe ffcc 	bl	80027c0 <HAL_InitTick>

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40023c00 	.word	0x40023c00
 8003838:	40023800 	.word	0x40023800
 800383c:	080106dc 	.word	0x080106dc
 8003840:	20000084 	.word	0x20000084
 8003844:	20000088 	.word	0x20000088

08003848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800384c:	b090      	sub	sp, #64	; 0x40
 800384e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	637b      	str	r3, [r7, #52]	; 0x34
 8003854:	2300      	movs	r3, #0
 8003856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003858:	2300      	movs	r3, #0
 800385a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003860:	4b59      	ldr	r3, [pc, #356]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b08      	cmp	r3, #8
 800386a:	d00d      	beq.n	8003888 <HAL_RCC_GetSysClockFreq+0x40>
 800386c:	2b08      	cmp	r3, #8
 800386e:	f200 80a1 	bhi.w	80039b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_RCC_GetSysClockFreq+0x34>
 8003876:	2b04      	cmp	r3, #4
 8003878:	d003      	beq.n	8003882 <HAL_RCC_GetSysClockFreq+0x3a>
 800387a:	e09b      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800387c:	4b53      	ldr	r3, [pc, #332]	; (80039cc <HAL_RCC_GetSysClockFreq+0x184>)
 800387e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003880:	e09b      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003882:	4b53      	ldr	r3, [pc, #332]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003884:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003886:	e098      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003888:	4b4f      	ldr	r3, [pc, #316]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003890:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003892:	4b4d      	ldr	r3, [pc, #308]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d028      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800389e:	4b4a      	ldr	r3, [pc, #296]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	099b      	lsrs	r3, r3, #6
 80038a4:	2200      	movs	r2, #0
 80038a6:	623b      	str	r3, [r7, #32]
 80038a8:	627a      	str	r2, [r7, #36]	; 0x24
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038b0:	2100      	movs	r1, #0
 80038b2:	4b47      	ldr	r3, [pc, #284]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80038b4:	fb03 f201 	mul.w	r2, r3, r1
 80038b8:	2300      	movs	r3, #0
 80038ba:	fb00 f303 	mul.w	r3, r0, r3
 80038be:	4413      	add	r3, r2
 80038c0:	4a43      	ldr	r2, [pc, #268]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80038c2:	fba0 1202 	umull	r1, r2, r0, r2
 80038c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038c8:	460a      	mov	r2, r1
 80038ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80038cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ce:	4413      	add	r3, r2
 80038d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d4:	2200      	movs	r2, #0
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	61fa      	str	r2, [r7, #28]
 80038da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80038e2:	f7fc fce5 	bl	80002b0 <__aeabi_uldivmod>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4613      	mov	r3, r2
 80038ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ee:	e053      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f0:	4b35      	ldr	r3, [pc, #212]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	099b      	lsrs	r3, r3, #6
 80038f6:	2200      	movs	r2, #0
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	617a      	str	r2, [r7, #20]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003902:	f04f 0b00 	mov.w	fp, #0
 8003906:	4652      	mov	r2, sl
 8003908:	465b      	mov	r3, fp
 800390a:	f04f 0000 	mov.w	r0, #0
 800390e:	f04f 0100 	mov.w	r1, #0
 8003912:	0159      	lsls	r1, r3, #5
 8003914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003918:	0150      	lsls	r0, r2, #5
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	ebb2 080a 	subs.w	r8, r2, sl
 8003922:	eb63 090b 	sbc.w	r9, r3, fp
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003932:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003936:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800393a:	ebb2 0408 	subs.w	r4, r2, r8
 800393e:	eb63 0509 	sbc.w	r5, r3, r9
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	00eb      	lsls	r3, r5, #3
 800394c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003950:	00e2      	lsls	r2, r4, #3
 8003952:	4614      	mov	r4, r2
 8003954:	461d      	mov	r5, r3
 8003956:	eb14 030a 	adds.w	r3, r4, sl
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	eb45 030b 	adc.w	r3, r5, fp
 8003960:	607b      	str	r3, [r7, #4]
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800396e:	4629      	mov	r1, r5
 8003970:	028b      	lsls	r3, r1, #10
 8003972:	4621      	mov	r1, r4
 8003974:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003978:	4621      	mov	r1, r4
 800397a:	028a      	lsls	r2, r1, #10
 800397c:	4610      	mov	r0, r2
 800397e:	4619      	mov	r1, r3
 8003980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003982:	2200      	movs	r2, #0
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	60fa      	str	r2, [r7, #12]
 8003988:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800398c:	f7fc fc90 	bl	80002b0 <__aeabi_uldivmod>
 8003990:	4602      	mov	r2, r0
 8003992:	460b      	mov	r3, r1
 8003994:	4613      	mov	r3, r2
 8003996:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	0c1b      	lsrs	r3, r3, #16
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	3301      	adds	r3, #1
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80039a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039b2:	e002      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_RCC_GetSysClockFreq+0x184>)
 80039b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3740      	adds	r7, #64	; 0x40
 80039c0:	46bd      	mov	sp, r7
 80039c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039c6:	bf00      	nop
 80039c8:	40023800 	.word	0x40023800
 80039cc:	00f42400 	.word	0x00f42400
 80039d0:	017d7840 	.word	0x017d7840

080039d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039da:	681b      	ldr	r3, [r3, #0]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20000084 	.word	0x20000084

080039ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039f0:	f7ff fff0 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 80039f4:	4602      	mov	r2, r0
 80039f6:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	0a9b      	lsrs	r3, r3, #10
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	4903      	ldr	r1, [pc, #12]	; (8003a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a02:	5ccb      	ldrb	r3, [r1, r3]
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	080106ec 	.word	0x080106ec

08003a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a18:	f7ff ffdc 	bl	80039d4 <HAL_RCC_GetHCLKFreq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	0b5b      	lsrs	r3, r3, #13
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	4903      	ldr	r1, [pc, #12]	; (8003a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a2a:	5ccb      	ldrb	r3, [r1, r3]
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	080106ec 	.word	0x080106ec

08003a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e07b      	b.n	8003b46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d108      	bne.n	8003a68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a5e:	d009      	beq.n	8003a74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	61da      	str	r2, [r3, #28]
 8003a66:	e005      	b.n	8003a74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fe fc00 	bl	8002294 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af8:	ea42 0103 	orr.w	r1, r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	0c1b      	lsrs	r3, r3, #16
 8003b12:	f003 0104 	and.w	r1, r3, #4
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	f003 0210 	and.w	r2, r3, #16
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b08c      	sub	sp, #48	; 0x30
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_SPI_TransmitReceive+0x26>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e18a      	b.n	8003e8a <HAL_SPI_TransmitReceive+0x33c>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b7c:	f7fe fe64 	bl	8002848 <HAL_GetTick>
 8003b80:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003b92:	887b      	ldrh	r3, [r7, #2]
 8003b94:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d00f      	beq.n	8003bbe <HAL_SPI_TransmitReceive+0x70>
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ba4:	d107      	bne.n	8003bb6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <HAL_SPI_TransmitReceive+0x68>
 8003bae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d003      	beq.n	8003bbe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003bbc:	e15b      	b.n	8003e76 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_SPI_TransmitReceive+0x82>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_SPI_TransmitReceive+0x82>
 8003bca:	887b      	ldrh	r3, [r7, #2]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d103      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003bd6:	e14e      	b.n	8003e76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d003      	beq.n	8003bec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2205      	movs	r2, #5
 8003be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	887a      	ldrh	r2, [r7, #2]
 8003bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	887a      	ldrh	r2, [r7, #2]
 8003c02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	887a      	ldrh	r2, [r7, #2]
 8003c0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	887a      	ldrh	r2, [r7, #2]
 8003c14:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2c:	2b40      	cmp	r3, #64	; 0x40
 8003c2e:	d007      	beq.n	8003c40 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c48:	d178      	bne.n	8003d3c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_SPI_TransmitReceive+0x10a>
 8003c52:	8b7b      	ldrh	r3, [r7, #26]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d166      	bne.n	8003d26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	881a      	ldrh	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	1c9a      	adds	r2, r3, #2
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	3b01      	subs	r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c7c:	e053      	b.n	8003d26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d11b      	bne.n	8003cc4 <HAL_SPI_TransmitReceive+0x176>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d016      	beq.n	8003cc4 <HAL_SPI_TransmitReceive+0x176>
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d113      	bne.n	8003cc4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	881a      	ldrh	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	1c9a      	adds	r2, r3, #2
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d119      	bne.n	8003d06 <HAL_SPI_TransmitReceive+0x1b8>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d014      	beq.n	8003d06 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	b292      	uxth	r2, r2
 8003ce8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	1c9a      	adds	r2, r3, #2
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d02:	2301      	movs	r3, #1
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d06:	f7fe fd9f 	bl	8002848 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d807      	bhi.n	8003d26 <HAL_SPI_TransmitReceive+0x1d8>
 8003d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1c:	d003      	beq.n	8003d26 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003d24:	e0a7      	b.n	8003e76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1a6      	bne.n	8003c7e <HAL_SPI_TransmitReceive+0x130>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1a1      	bne.n	8003c7e <HAL_SPI_TransmitReceive+0x130>
 8003d3a:	e07c      	b.n	8003e36 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <HAL_SPI_TransmitReceive+0x1fc>
 8003d44:	8b7b      	ldrh	r3, [r7, #26]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d16b      	bne.n	8003e22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	7812      	ldrb	r2, [r2, #0]
 8003d56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d70:	e057      	b.n	8003e22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d11c      	bne.n	8003dba <HAL_SPI_TransmitReceive+0x26c>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d017      	beq.n	8003dba <HAL_SPI_TransmitReceive+0x26c>
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d114      	bne.n	8003dba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	330c      	adds	r3, #12
 8003d9a:	7812      	ldrb	r2, [r2, #0]
 8003d9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d119      	bne.n	8003dfc <HAL_SPI_TransmitReceive+0x2ae>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d014      	beq.n	8003dfc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003dfc:	f7fe fd24 	bl	8002848 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d803      	bhi.n	8003e14 <HAL_SPI_TransmitReceive+0x2c6>
 8003e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e12:	d102      	bne.n	8003e1a <HAL_SPI_TransmitReceive+0x2cc>
 8003e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d103      	bne.n	8003e22 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e20:	e029      	b.n	8003e76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1a2      	bne.n	8003d72 <HAL_SPI_TransmitReceive+0x224>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d19d      	bne.n	8003d72 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 f8b2 	bl	8003fa4 <SPI_EndRxTxTransaction>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d006      	beq.n	8003e54 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003e52:	e010      	b.n	8003e76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10b      	bne.n	8003e74 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	e000      	b.n	8003e76 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003e74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3730      	adds	r7, #48	; 0x30
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ea4:	f7fe fcd0 	bl	8002848 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003eb4:	f7fe fcc8 	bl	8002848 <HAL_GetTick>
 8003eb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003eba:	4b39      	ldr	r3, [pc, #228]	; (8003fa0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	015b      	lsls	r3, r3, #5
 8003ec0:	0d1b      	lsrs	r3, r3, #20
 8003ec2:	69fa      	ldr	r2, [r7, #28]
 8003ec4:	fb02 f303 	mul.w	r3, r2, r3
 8003ec8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eca:	e054      	b.n	8003f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d050      	beq.n	8003f76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ed4:	f7fe fcb8 	bl	8002848 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	69fa      	ldr	r2, [r7, #28]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d902      	bls.n	8003eea <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d13d      	bne.n	8003f66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ef8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f02:	d111      	bne.n	8003f28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f0c:	d004      	beq.n	8003f18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f16:	d107      	bne.n	8003f28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f30:	d10f      	bne.n	8003f52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e017      	b.n	8003f96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	bf0c      	ite	eq
 8003f86:	2301      	moveq	r3, #1
 8003f88:	2300      	movne	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	79fb      	ldrb	r3, [r7, #7]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d19b      	bne.n	8003ecc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3720      	adds	r7, #32
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20000084 	.word	0x20000084

08003fa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fb0:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <SPI_EndRxTxTransaction+0x7c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a1b      	ldr	r2, [pc, #108]	; (8004024 <SPI_EndRxTxTransaction+0x80>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	0d5b      	lsrs	r3, r3, #21
 8003fbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fc0:	fb02 f303 	mul.w	r3, r2, r3
 8003fc4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fce:	d112      	bne.n	8003ff6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2180      	movs	r1, #128	; 0x80
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f7ff ff5a 	bl	8003e94 <SPI_WaitFlagStateUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d016      	beq.n	8004014 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fea:	f043 0220 	orr.w	r2, r3, #32
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e00f      	b.n	8004016 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400c:	2b80      	cmp	r3, #128	; 0x80
 800400e:	d0f2      	beq.n	8003ff6 <SPI_EndRxTxTransaction+0x52>
 8004010:	e000      	b.n	8004014 <SPI_EndRxTxTransaction+0x70>
        break;
 8004012:	bf00      	nop
  }

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	20000084 	.word	0x20000084
 8004024:	165e9f81 	.word	0x165e9f81

08004028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e041      	b.n	80040be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fe f968 	bl	8002324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	4619      	mov	r1, r3
 8004066:	4610      	mov	r0, r2
 8004068:	f000 fce4 	bl	8004a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e041      	b.n	800415c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d106      	bne.n	80040f2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f839 	bl	8004164 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2202      	movs	r2, #2
 80040f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3304      	adds	r3, #4
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f000 fc95 	bl	8004a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d109      	bne.n	80041a0 <HAL_TIM_OC_Start_IT+0x28>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b01      	cmp	r3, #1
 8004196:	bf14      	ite	ne
 8004198:	2301      	movne	r3, #1
 800419a:	2300      	moveq	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	e022      	b.n	80041e6 <HAL_TIM_OC_Start_IT+0x6e>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d109      	bne.n	80041ba <HAL_TIM_OC_Start_IT+0x42>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	bf14      	ite	ne
 80041b2:	2301      	movne	r3, #1
 80041b4:	2300      	moveq	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	e015      	b.n	80041e6 <HAL_TIM_OC_Start_IT+0x6e>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d109      	bne.n	80041d4 <HAL_TIM_OC_Start_IT+0x5c>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	bf14      	ite	ne
 80041cc:	2301      	movne	r3, #1
 80041ce:	2300      	moveq	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	e008      	b.n	80041e6 <HAL_TIM_OC_Start_IT+0x6e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	bf14      	ite	ne
 80041e0:	2301      	movne	r3, #1
 80041e2:	2300      	moveq	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e0b3      	b.n	8004356 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d104      	bne.n	80041fe <HAL_TIM_OC_Start_IT+0x86>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041fc:	e013      	b.n	8004226 <HAL_TIM_OC_Start_IT+0xae>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b04      	cmp	r3, #4
 8004202:	d104      	bne.n	800420e <HAL_TIM_OC_Start_IT+0x96>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800420c:	e00b      	b.n	8004226 <HAL_TIM_OC_Start_IT+0xae>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d104      	bne.n	800421e <HAL_TIM_OC_Start_IT+0xa6>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800421c:	e003      	b.n	8004226 <HAL_TIM_OC_Start_IT+0xae>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2202      	movs	r2, #2
 8004222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	2b0c      	cmp	r3, #12
 800422a:	d841      	bhi.n	80042b0 <HAL_TIM_OC_Start_IT+0x138>
 800422c:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <HAL_TIM_OC_Start_IT+0xbc>)
 800422e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004232:	bf00      	nop
 8004234:	08004269 	.word	0x08004269
 8004238:	080042b1 	.word	0x080042b1
 800423c:	080042b1 	.word	0x080042b1
 8004240:	080042b1 	.word	0x080042b1
 8004244:	0800427b 	.word	0x0800427b
 8004248:	080042b1 	.word	0x080042b1
 800424c:	080042b1 	.word	0x080042b1
 8004250:	080042b1 	.word	0x080042b1
 8004254:	0800428d 	.word	0x0800428d
 8004258:	080042b1 	.word	0x080042b1
 800425c:	080042b1 	.word	0x080042b1
 8004260:	080042b1 	.word	0x080042b1
 8004264:	0800429f 	.word	0x0800429f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0202 	orr.w	r2, r2, #2
 8004276:	60da      	str	r2, [r3, #12]
      break;
 8004278:	e01d      	b.n	80042b6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0204 	orr.w	r2, r2, #4
 8004288:	60da      	str	r2, [r3, #12]
      break;
 800428a:	e014      	b.n	80042b6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0208 	orr.w	r2, r2, #8
 800429a:	60da      	str	r2, [r3, #12]
      break;
 800429c:	e00b      	b.n	80042b6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f042 0210 	orr.w	r2, r2, #16
 80042ac:	60da      	str	r2, [r3, #12]
      break;
 80042ae:	e002      	b.n	80042b6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
      break;
 80042b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d14b      	bne.n	8004354 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2201      	movs	r2, #1
 80042c2:	6839      	ldr	r1, [r7, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 fe5b 	bl	8004f80 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a24      	ldr	r2, [pc, #144]	; (8004360 <HAL_TIM_OC_Start_IT+0x1e8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d107      	bne.n	80042e4 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042e2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <HAL_TIM_OC_Start_IT+0x1e8>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d018      	beq.n	8004320 <HAL_TIM_OC_Start_IT+0x1a8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f6:	d013      	beq.n	8004320 <HAL_TIM_OC_Start_IT+0x1a8>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a19      	ldr	r2, [pc, #100]	; (8004364 <HAL_TIM_OC_Start_IT+0x1ec>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00e      	beq.n	8004320 <HAL_TIM_OC_Start_IT+0x1a8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a18      	ldr	r2, [pc, #96]	; (8004368 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d009      	beq.n	8004320 <HAL_TIM_OC_Start_IT+0x1a8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a16      	ldr	r2, [pc, #88]	; (800436c <HAL_TIM_OC_Start_IT+0x1f4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d004      	beq.n	8004320 <HAL_TIM_OC_Start_IT+0x1a8>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a15      	ldr	r2, [pc, #84]	; (8004370 <HAL_TIM_OC_Start_IT+0x1f8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d111      	bne.n	8004344 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b06      	cmp	r3, #6
 8004330:	d010      	beq.n	8004354 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0201 	orr.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004342:	e007      	b.n	8004354 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0201 	orr.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004354:	7bfb      	ldrb	r3, [r7, #15]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40010000 	.word	0x40010000
 8004364:	40000400 	.word	0x40000400
 8004368:	40000800 	.word	0x40000800
 800436c:	40000c00 	.word	0x40000c00
 8004370:	40014000 	.word	0x40014000

08004374 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b0c      	cmp	r3, #12
 8004386:	d841      	bhi.n	800440c <HAL_TIM_OC_Stop_IT+0x98>
 8004388:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <HAL_TIM_OC_Stop_IT+0x1c>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043c5 	.word	0x080043c5
 8004394:	0800440d 	.word	0x0800440d
 8004398:	0800440d 	.word	0x0800440d
 800439c:	0800440d 	.word	0x0800440d
 80043a0:	080043d7 	.word	0x080043d7
 80043a4:	0800440d 	.word	0x0800440d
 80043a8:	0800440d 	.word	0x0800440d
 80043ac:	0800440d 	.word	0x0800440d
 80043b0:	080043e9 	.word	0x080043e9
 80043b4:	0800440d 	.word	0x0800440d
 80043b8:	0800440d 	.word	0x0800440d
 80043bc:	0800440d 	.word	0x0800440d
 80043c0:	080043fb 	.word	0x080043fb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0202 	bic.w	r2, r2, #2
 80043d2:	60da      	str	r2, [r3, #12]
      break;
 80043d4:	e01d      	b.n	8004412 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0204 	bic.w	r2, r2, #4
 80043e4:	60da      	str	r2, [r3, #12]
      break;
 80043e6:	e014      	b.n	8004412 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0208 	bic.w	r2, r2, #8
 80043f6:	60da      	str	r2, [r3, #12]
      break;
 80043f8:	e00b      	b.n	8004412 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0210 	bic.w	r2, r2, #16
 8004408:	60da      	str	r2, [r3, #12]
      break;
 800440a:	e002      	b.n	8004412 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
      break;
 8004410:	bf00      	nop
  }

  if (status == HAL_OK)
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d157      	bne.n	80044c8 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2200      	movs	r2, #0
 800441e:	6839      	ldr	r1, [r7, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fdad 	bl	8004f80 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a2a      	ldr	r2, [pc, #168]	; (80044d4 <HAL_TIM_OC_Stop_IT+0x160>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d117      	bne.n	8004460 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6a1a      	ldr	r2, [r3, #32]
 8004436:	f241 1311 	movw	r3, #4369	; 0x1111
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10f      	bne.n	8004460 <HAL_TIM_OC_Stop_IT+0xec>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6a1a      	ldr	r2, [r3, #32]
 8004446:	f240 4344 	movw	r3, #1092	; 0x444
 800444a:	4013      	ands	r3, r2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d107      	bne.n	8004460 <HAL_TIM_OC_Stop_IT+0xec>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800445e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6a1a      	ldr	r2, [r3, #32]
 8004466:	f241 1311 	movw	r3, #4369	; 0x1111
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10f      	bne.n	8004490 <HAL_TIM_OC_Stop_IT+0x11c>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6a1a      	ldr	r2, [r3, #32]
 8004476:	f240 4344 	movw	r3, #1092	; 0x444
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d107      	bne.n	8004490 <HAL_TIM_OC_Stop_IT+0x11c>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d104      	bne.n	80044a0 <HAL_TIM_OC_Stop_IT+0x12c>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800449e:	e013      	b.n	80044c8 <HAL_TIM_OC_Stop_IT+0x154>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d104      	bne.n	80044b0 <HAL_TIM_OC_Stop_IT+0x13c>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044ae:	e00b      	b.n	80044c8 <HAL_TIM_OC_Stop_IT+0x154>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d104      	bne.n	80044c0 <HAL_TIM_OC_Stop_IT+0x14c>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044be:	e003      	b.n	80044c8 <HAL_TIM_OC_Stop_IT+0x154>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40010000 	.word	0x40010000

080044d8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e041      	b.n	8004570 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d106      	bne.n	8004506 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f839 	bl	8004578 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2202      	movs	r2, #2
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3304      	adds	r3, #4
 8004516:	4619      	mov	r1, r3
 8004518:	4610      	mov	r0, r2
 800451a:	f000 fa8b 	bl	8004a34 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0208 	bic.w	r2, r2, #8
 800452c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6819      	ldr	r1, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d122      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d11b      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0202 	mvn.w	r2, #2
 80045b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	f003 0303 	and.w	r3, r3, #3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fa11 	bl	80049f6 <HAL_TIM_IC_CaptureCallback>
 80045d4:	e005      	b.n	80045e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fd fd34 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fa14 	bl	8004a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d122      	bne.n	800463c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b04      	cmp	r3, #4
 8004602:	d11b      	bne.n	800463c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0204 	mvn.w	r2, #4
 800460c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f9e7 	bl	80049f6 <HAL_TIM_IC_CaptureCallback>
 8004628:	e005      	b.n	8004636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fd fd0a 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f9ea 	bl	8004a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0308 	and.w	r3, r3, #8
 8004646:	2b08      	cmp	r3, #8
 8004648:	d122      	bne.n	8004690 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b08      	cmp	r3, #8
 8004656:	d11b      	bne.n	8004690 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0208 	mvn.w	r2, #8
 8004660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2204      	movs	r2, #4
 8004666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f9bd 	bl	80049f6 <HAL_TIM_IC_CaptureCallback>
 800467c:	e005      	b.n	800468a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fd fce0 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f9c0 	bl	8004a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b10      	cmp	r3, #16
 800469c:	d122      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0310 	and.w	r3, r3, #16
 80046a8:	2b10      	cmp	r3, #16
 80046aa:	d11b      	bne.n	80046e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0210 	mvn.w	r2, #16
 80046b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2208      	movs	r2, #8
 80046ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f993 	bl	80049f6 <HAL_TIM_IC_CaptureCallback>
 80046d0:	e005      	b.n	80046de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fd fcb6 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f996 	bl	8004a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d10e      	bne.n	8004710 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d107      	bne.n	8004710 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0201 	mvn.w	r2, #1
 8004708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f969 	bl	80049e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471a:	2b80      	cmp	r3, #128	; 0x80
 800471c:	d10e      	bne.n	800473c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	2b80      	cmp	r3, #128	; 0x80
 800472a:	d107      	bne.n	800473c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fcc0 	bl	80050bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004746:	2b40      	cmp	r3, #64	; 0x40
 8004748:	d10e      	bne.n	8004768 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004754:	2b40      	cmp	r3, #64	; 0x40
 8004756:	d107      	bne.n	8004768 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f95b 	bl	8004a1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b20      	cmp	r3, #32
 8004774:	d10e      	bne.n	8004794 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f003 0320 	and.w	r3, r3, #32
 8004780:	2b20      	cmp	r3, #32
 8004782:	d107      	bne.n	8004794 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0220 	mvn.w	r2, #32
 800478c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fc8a 	bl	80050a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004794:	bf00      	nop
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_TIM_OC_ConfigChannel+0x1e>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e048      	b.n	800484c <HAL_TIM_OC_ConfigChannel+0xb0>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b0c      	cmp	r3, #12
 80047c6:	d839      	bhi.n	800483c <HAL_TIM_OC_ConfigChannel+0xa0>
 80047c8:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80047ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ce:	bf00      	nop
 80047d0:	08004805 	.word	0x08004805
 80047d4:	0800483d 	.word	0x0800483d
 80047d8:	0800483d 	.word	0x0800483d
 80047dc:	0800483d 	.word	0x0800483d
 80047e0:	08004813 	.word	0x08004813
 80047e4:	0800483d 	.word	0x0800483d
 80047e8:	0800483d 	.word	0x0800483d
 80047ec:	0800483d 	.word	0x0800483d
 80047f0:	08004821 	.word	0x08004821
 80047f4:	0800483d 	.word	0x0800483d
 80047f8:	0800483d 	.word	0x0800483d
 80047fc:	0800483d 	.word	0x0800483d
 8004800:	0800482f 	.word	0x0800482f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 f992 	bl	8004b34 <TIM_OC1_SetConfig>
      break;
 8004810:	e017      	b.n	8004842 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	4618      	mov	r0, r3
 800481a:	f000 f9f1 	bl	8004c00 <TIM_OC2_SetConfig>
      break;
 800481e:	e010      	b.n	8004842 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fa56 	bl	8004cd8 <TIM_OC3_SetConfig>
      break;
 800482c:	e009      	b.n	8004842 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fab9 	bl	8004dac <TIM_OC4_SetConfig>
      break;
 800483a:	e002      	b.n	8004842 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	75fb      	strb	r3, [r7, #23]
      break;
 8004840:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800484a:	7dfb      	ldrb	r3, [r7, #23]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_TIM_ConfigClockSource+0x1c>
 800486c:	2302      	movs	r3, #2
 800486e:	e0b4      	b.n	80049da <HAL_TIM_ConfigClockSource+0x186>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800488e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004896:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048a8:	d03e      	beq.n	8004928 <HAL_TIM_ConfigClockSource+0xd4>
 80048aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ae:	f200 8087 	bhi.w	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b6:	f000 8086 	beq.w	80049c6 <HAL_TIM_ConfigClockSource+0x172>
 80048ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048be:	d87f      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048c0:	2b70      	cmp	r3, #112	; 0x70
 80048c2:	d01a      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0xa6>
 80048c4:	2b70      	cmp	r3, #112	; 0x70
 80048c6:	d87b      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048c8:	2b60      	cmp	r3, #96	; 0x60
 80048ca:	d050      	beq.n	800496e <HAL_TIM_ConfigClockSource+0x11a>
 80048cc:	2b60      	cmp	r3, #96	; 0x60
 80048ce:	d877      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d0:	2b50      	cmp	r3, #80	; 0x50
 80048d2:	d03c      	beq.n	800494e <HAL_TIM_ConfigClockSource+0xfa>
 80048d4:	2b50      	cmp	r3, #80	; 0x50
 80048d6:	d873      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d058      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x13a>
 80048dc:	2b40      	cmp	r3, #64	; 0x40
 80048de:	d86f      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048e0:	2b30      	cmp	r3, #48	; 0x30
 80048e2:	d064      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x15a>
 80048e4:	2b30      	cmp	r3, #48	; 0x30
 80048e6:	d86b      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d060      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x15a>
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d867      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d05c      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x15a>
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d05a      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x15a>
 80048f8:	e062      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6899      	ldr	r1, [r3, #8]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f000 fb19 	bl	8004f40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800491c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	609a      	str	r2, [r3, #8]
      break;
 8004926:	e04f      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6818      	ldr	r0, [r3, #0]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	6899      	ldr	r1, [r3, #8]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f000 fb02 	bl	8004f40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800494a:	609a      	str	r2, [r3, #8]
      break;
 800494c:	e03c      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	6859      	ldr	r1, [r3, #4]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	461a      	mov	r2, r3
 800495c:	f000 fa76 	bl	8004e4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2150      	movs	r1, #80	; 0x50
 8004966:	4618      	mov	r0, r3
 8004968:	f000 facf 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 800496c:	e02c      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6859      	ldr	r1, [r3, #4]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	461a      	mov	r2, r3
 800497c:	f000 fa95 	bl	8004eaa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2160      	movs	r1, #96	; 0x60
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fabf 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 800498c:	e01c      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6818      	ldr	r0, [r3, #0]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	6859      	ldr	r1, [r3, #4]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	461a      	mov	r2, r3
 800499c:	f000 fa56 	bl	8004e4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2140      	movs	r1, #64	; 0x40
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 faaf 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 80049ac:	e00c      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f000 faa6 	bl	8004f0a <TIM_ITRx_SetConfig>
      break;
 80049be:	e003      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
      break;
 80049c4:	e000      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a34      	ldr	r2, [pc, #208]	; (8004b18 <TIM_Base_SetConfig+0xe4>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00f      	beq.n	8004a6c <TIM_Base_SetConfig+0x38>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a52:	d00b      	beq.n	8004a6c <TIM_Base_SetConfig+0x38>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a31      	ldr	r2, [pc, #196]	; (8004b1c <TIM_Base_SetConfig+0xe8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d007      	beq.n	8004a6c <TIM_Base_SetConfig+0x38>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a30      	ldr	r2, [pc, #192]	; (8004b20 <TIM_Base_SetConfig+0xec>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_Base_SetConfig+0x38>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a2f      	ldr	r2, [pc, #188]	; (8004b24 <TIM_Base_SetConfig+0xf0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d108      	bne.n	8004a7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a25      	ldr	r2, [pc, #148]	; (8004b18 <TIM_Base_SetConfig+0xe4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d01b      	beq.n	8004abe <TIM_Base_SetConfig+0x8a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8c:	d017      	beq.n	8004abe <TIM_Base_SetConfig+0x8a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a22      	ldr	r2, [pc, #136]	; (8004b1c <TIM_Base_SetConfig+0xe8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d013      	beq.n	8004abe <TIM_Base_SetConfig+0x8a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a21      	ldr	r2, [pc, #132]	; (8004b20 <TIM_Base_SetConfig+0xec>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00f      	beq.n	8004abe <TIM_Base_SetConfig+0x8a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a20      	ldr	r2, [pc, #128]	; (8004b24 <TIM_Base_SetConfig+0xf0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00b      	beq.n	8004abe <TIM_Base_SetConfig+0x8a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a1f      	ldr	r2, [pc, #124]	; (8004b28 <TIM_Base_SetConfig+0xf4>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d007      	beq.n	8004abe <TIM_Base_SetConfig+0x8a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a1e      	ldr	r2, [pc, #120]	; (8004b2c <TIM_Base_SetConfig+0xf8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d003      	beq.n	8004abe <TIM_Base_SetConfig+0x8a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a1d      	ldr	r2, [pc, #116]	; (8004b30 <TIM_Base_SetConfig+0xfc>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d108      	bne.n	8004ad0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a08      	ldr	r2, [pc, #32]	; (8004b18 <TIM_Base_SetConfig+0xe4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d103      	bne.n	8004b04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	615a      	str	r2, [r3, #20]
}
 8004b0a:	bf00      	nop
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	40010000 	.word	0x40010000
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40000c00 	.word	0x40000c00
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40014400 	.word	0x40014400
 8004b30:	40014800 	.word	0x40014800

08004b34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	f023 0201 	bic.w	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0303 	bic.w	r3, r3, #3
 8004b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f023 0302 	bic.w	r3, r3, #2
 8004b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a1c      	ldr	r2, [pc, #112]	; (8004bfc <TIM_OC1_SetConfig+0xc8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d10c      	bne.n	8004baa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f023 0308 	bic.w	r3, r3, #8
 8004b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f023 0304 	bic.w	r3, r3, #4
 8004ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <TIM_OC1_SetConfig+0xc8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d111      	bne.n	8004bd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	621a      	str	r2, [r3, #32]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	40010000 	.word	0x40010000

08004c00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f023 0210 	bic.w	r2, r3, #16
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	021b      	lsls	r3, r3, #8
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 0320 	bic.w	r3, r3, #32
 8004c4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a1e      	ldr	r2, [pc, #120]	; (8004cd4 <TIM_OC2_SetConfig+0xd4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d10d      	bne.n	8004c7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a15      	ldr	r2, [pc, #84]	; (8004cd4 <TIM_OC2_SetConfig+0xd4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d113      	bne.n	8004cac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	621a      	str	r2, [r3, #32]
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40010000 	.word	0x40010000

08004cd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0303 	bic.w	r3, r3, #3
 8004d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a1d      	ldr	r2, [pc, #116]	; (8004da8 <TIM_OC3_SetConfig+0xd0>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d10d      	bne.n	8004d52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	021b      	lsls	r3, r3, #8
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a14      	ldr	r2, [pc, #80]	; (8004da8 <TIM_OC3_SetConfig+0xd0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d113      	bne.n	8004d82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	621a      	str	r2, [r3, #32]
}
 8004d9c:	bf00      	nop
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	40010000 	.word	0x40010000

08004dac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	021b      	lsls	r3, r3, #8
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004df6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	031b      	lsls	r3, r3, #12
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a10      	ldr	r2, [pc, #64]	; (8004e48 <TIM_OC4_SetConfig+0x9c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d109      	bne.n	8004e20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	019b      	lsls	r3, r3, #6
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40010000 	.word	0x40010000

08004e4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f023 0201 	bic.w	r2, r3, #1
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f023 030a 	bic.w	r3, r3, #10
 8004e88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	621a      	str	r2, [r3, #32]
}
 8004e9e:	bf00      	nop
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b087      	sub	sp, #28
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	f023 0210 	bic.w	r2, r3, #16
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ed4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	031b      	lsls	r3, r3, #12
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ee6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	621a      	str	r2, [r3, #32]
}
 8004efe:	bf00      	nop
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f043 0307 	orr.w	r3, r3, #7
 8004f2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	609a      	str	r2, [r3, #8]
}
 8004f34:	bf00      	nop
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	021a      	lsls	r2, r3, #8
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	431a      	orrs	r2, r3
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	609a      	str	r2, [r3, #8]
}
 8004f74:	bf00      	nop
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f003 031f 	and.w	r3, r3, #31
 8004f92:	2201      	movs	r2, #1
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a1a      	ldr	r2, [r3, #32]
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	401a      	ands	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a1a      	ldr	r2, [r3, #32]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e050      	b.n	8005086 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1c      	ldr	r2, [pc, #112]	; (8005094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d018      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005030:	d013      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a18      	ldr	r2, [pc, #96]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00e      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a16      	ldr	r2, [pc, #88]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d009      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a15      	ldr	r2, [pc, #84]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d004      	beq.n	800505a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d10c      	bne.n	8005074 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	4313      	orrs	r3, r2
 800506a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40010000 	.word	0x40010000
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800
 80050a0:	40000c00 	.word	0x40000c00
 80050a4:	40014000 	.word	0x40014000

080050a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e03f      	b.n	8005162 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fd f93a 	bl	8002370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2224      	movs	r2, #36	; 0x24
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005112:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fe49 	bl	8005dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005128:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005138:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005148:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b082      	sub	sp, #8
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e021      	b.n	80051c0 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2224      	movs	r2, #36	; 0x24
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005192:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7fd f977 	bl	8002488 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08a      	sub	sp, #40	; 0x28
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	4613      	mov	r3, r2
 80051d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d17c      	bne.n	80052e2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_UART_Transmit+0x2c>
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e075      	b.n	80052e4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d101      	bne.n	8005206 <HAL_UART_Transmit+0x3e>
 8005202:	2302      	movs	r3, #2
 8005204:	e06e      	b.n	80052e4 <HAL_UART_Transmit+0x11c>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2221      	movs	r2, #33	; 0x21
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800521c:	f7fd fb14 	bl	8002848 <HAL_GetTick>
 8005220:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	88fa      	ldrh	r2, [r7, #6]
 8005226:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	88fa      	ldrh	r2, [r7, #6]
 800522c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005236:	d108      	bne.n	800524a <HAL_UART_Transmit+0x82>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d104      	bne.n	800524a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005240:	2300      	movs	r3, #0
 8005242:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	61bb      	str	r3, [r7, #24]
 8005248:	e003      	b.n	8005252 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800524e:	2300      	movs	r3, #0
 8005250:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800525a:	e02a      	b.n	80052b2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2200      	movs	r2, #0
 8005264:	2180      	movs	r1, #128	; 0x80
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 fb5a 	bl	8005920 <UART_WaitOnFlagUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e036      	b.n	80052e4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10b      	bne.n	8005294 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	461a      	mov	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800528a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	3302      	adds	r3, #2
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	e007      	b.n	80052a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	781a      	ldrb	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	3301      	adds	r3, #1
 80052a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1cf      	bne.n	800525c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2200      	movs	r2, #0
 80052c4:	2140      	movs	r1, #64	; 0x40
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 fb2a 	bl	8005920 <UART_WaitOnFlagUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e006      	b.n	80052e4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	e000      	b.n	80052e4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80052e2:	2302      	movs	r3, #2
  }
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3720      	adds	r7, #32
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	4613      	mov	r3, r2
 80052f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b20      	cmp	r3, #32
 8005304:	d130      	bne.n	8005368 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <HAL_UART_Transmit_IT+0x26>
 800530c:	88fb      	ldrh	r3, [r7, #6]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e029      	b.n	800536a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <HAL_UART_Transmit_IT+0x38>
 8005320:	2302      	movs	r3, #2
 8005322:	e022      	b.n	800536a <HAL_UART_Transmit_IT+0x7e>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	88fa      	ldrh	r2, [r7, #6]
 8005336:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	88fa      	ldrh	r2, [r7, #6]
 800533c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2221      	movs	r2, #33	; 0x21
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005362:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	e000      	b.n	800536a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005368:	2302      	movs	r3, #2
  }
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b084      	sub	sp, #16
 800537a:	af00      	add	r7, sp, #0
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	4613      	mov	r3, r2
 8005382:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b20      	cmp	r3, #32
 800538e:	d11d      	bne.n	80053cc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <HAL_UART_Receive_IT+0x26>
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e016      	b.n	80053ce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d101      	bne.n	80053ae <HAL_UART_Receive_IT+0x38>
 80053aa:	2302      	movs	r3, #2
 80053ac:	e00f      	b.n	80053ce <HAL_UART_Receive_IT+0x58>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80053bc:	88fb      	ldrh	r3, [r7, #6]
 80053be:	461a      	mov	r2, r3
 80053c0:	68b9      	ldr	r1, [r7, #8]
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 fb1a 	bl	80059fc <UART_Start_Receive_IT>
 80053c8:	4603      	mov	r3, r0
 80053ca:	e000      	b.n	80053ce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80053cc:	2302      	movs	r3, #2
  }
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b0ba      	sub	sp, #232	; 0xe8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80053fe:	2300      	movs	r3, #0
 8005400:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005404:	2300      	movs	r3, #0
 8005406:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800540a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10f      	bne.n	800543e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800541e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d009      	beq.n	800543e <HAL_UART_IRQHandler+0x66>
 800542a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fbfd 	bl	8005c36 <UART_Receive_IT>
      return;
 800543c:	e256      	b.n	80058ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800543e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 80de 	beq.w	8005604 <HAL_UART_IRQHandler+0x22c>
 8005448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d106      	bne.n	8005462 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005458:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 80d1 	beq.w	8005604 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00b      	beq.n	8005486 <HAL_UART_IRQHandler+0xae>
 800546e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005476:	2b00      	cmp	r3, #0
 8005478:	d005      	beq.n	8005486 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	f043 0201 	orr.w	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <HAL_UART_IRQHandler+0xd2>
 8005492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	f043 0202 	orr.w	r2, r3, #2
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00b      	beq.n	80054ce <HAL_UART_IRQHandler+0xf6>
 80054b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d005      	beq.n	80054ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	f043 0204 	orr.w	r2, r3, #4
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d011      	beq.n	80054fe <HAL_UART_IRQHandler+0x126>
 80054da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d105      	bne.n	80054f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	f043 0208 	orr.w	r2, r3, #8
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 81ed 	beq.w	80058e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d008      	beq.n	8005526 <HAL_UART_IRQHandler+0x14e>
 8005514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fb88 	bl	8005c36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005530:	2b40      	cmp	r3, #64	; 0x40
 8005532:	bf0c      	ite	eq
 8005534:	2301      	moveq	r3, #1
 8005536:	2300      	movne	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d103      	bne.n	8005552 <HAL_UART_IRQHandler+0x17a>
 800554a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800554e:	2b00      	cmp	r3, #0
 8005550:	d04f      	beq.n	80055f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fa90 	bl	8005a78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005562:	2b40      	cmp	r3, #64	; 0x40
 8005564:	d141      	bne.n	80055ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3314      	adds	r3, #20
 800556c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800557c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005584:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3314      	adds	r3, #20
 800558e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005592:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005596:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800559e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1d9      	bne.n	8005566 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d013      	beq.n	80055e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055be:	4a7d      	ldr	r2, [pc, #500]	; (80057b4 <HAL_UART_IRQHandler+0x3dc>)
 80055c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fd fb21 	bl	8002c0e <HAL_DMA_Abort_IT>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d016      	beq.n	8005600 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055dc:	4610      	mov	r0, r2
 80055de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e0:	e00e      	b.n	8005600 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fc fc92 	bl	8001f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e8:	e00a      	b.n	8005600 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7fc fc8e 	bl	8001f0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f0:	e006      	b.n	8005600 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fc fc8a 	bl	8001f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80055fe:	e170      	b.n	80058e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005600:	bf00      	nop
    return;
 8005602:	e16e      	b.n	80058e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	2b01      	cmp	r3, #1
 800560a:	f040 814a 	bne.w	80058a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800560e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 8143 	beq.w	80058a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800561c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005620:	f003 0310 	and.w	r3, r3, #16
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 813c 	beq.w	80058a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800562a:	2300      	movs	r3, #0
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	60bb      	str	r3, [r7, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564a:	2b40      	cmp	r3, #64	; 0x40
 800564c:	f040 80b4 	bne.w	80057b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800565c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 8140 	beq.w	80058e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800566a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800566e:	429a      	cmp	r2, r3
 8005670:	f080 8139 	bcs.w	80058e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800567a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005686:	f000 8088 	beq.w	800579a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	330c      	adds	r3, #12
 8005690:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	330c      	adds	r3, #12
 80056b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80056b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1d9      	bne.n	800568a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3314      	adds	r3, #20
 80056dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056e8:	f023 0301 	bic.w	r3, r3, #1
 80056ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3314      	adds	r3, #20
 80056f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005702:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800570c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e1      	bne.n	80056d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3314      	adds	r3, #20
 8005718:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800571c:	e853 3f00 	ldrex	r3, [r3]
 8005720:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3314      	adds	r3, #20
 8005732:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005736:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005738:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800573c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800573e:	e841 2300 	strex	r3, r2, [r1]
 8005742:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1e3      	bne.n	8005712 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	330c      	adds	r3, #12
 800575e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005762:	e853 3f00 	ldrex	r3, [r3]
 8005766:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800576a:	f023 0310 	bic.w	r3, r3, #16
 800576e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	330c      	adds	r3, #12
 8005778:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800577c:	65ba      	str	r2, [r7, #88]	; 0x58
 800577e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005780:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005782:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005784:	e841 2300 	strex	r3, r2, [r1]
 8005788:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800578a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e3      	bne.n	8005758 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	4618      	mov	r0, r3
 8005796:	f7fd f9ca 	bl	8002b2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	4619      	mov	r1, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f8ac 	bl	8005908 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057b0:	e099      	b.n	80058e6 <HAL_UART_IRQHandler+0x50e>
 80057b2:	bf00      	nop
 80057b4:	08005b3f 	.word	0x08005b3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 808b 	beq.w	80058ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80057d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 8086 	beq.w	80058ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	330c      	adds	r3, #12
 80057e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	330c      	adds	r3, #12
 80057fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005802:	647a      	str	r2, [r7, #68]	; 0x44
 8005804:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005806:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005808:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1e3      	bne.n	80057de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3314      	adds	r3, #20
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	e853 3f00 	ldrex	r3, [r3]
 8005824:	623b      	str	r3, [r7, #32]
   return(result);
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	f023 0301 	bic.w	r3, r3, #1
 800582c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3314      	adds	r3, #20
 8005836:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800583a:	633a      	str	r2, [r7, #48]	; 0x30
 800583c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e3      	bne.n	8005816 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	330c      	adds	r3, #12
 8005862:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	60fb      	str	r3, [r7, #12]
   return(result);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0310 	bic.w	r3, r3, #16
 8005872:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	330c      	adds	r3, #12
 800587c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005880:	61fa      	str	r2, [r7, #28]
 8005882:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	69b9      	ldr	r1, [r7, #24]
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	617b      	str	r3, [r7, #20]
   return(result);
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e3      	bne.n	800585c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005894:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f834 	bl	8005908 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058a0:	e023      	b.n	80058ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d009      	beq.n	80058c2 <HAL_UART_IRQHandler+0x4ea>
 80058ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f953 	bl	8005b66 <UART_Transmit_IT>
    return;
 80058c0:	e014      	b.n	80058ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00e      	beq.n	80058ec <HAL_UART_IRQHandler+0x514>
 80058ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d008      	beq.n	80058ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f993 	bl	8005c06 <UART_EndTransmit_IT>
    return;
 80058e0:	e004      	b.n	80058ec <HAL_UART_IRQHandler+0x514>
    return;
 80058e2:	bf00      	nop
 80058e4:	e002      	b.n	80058ec <HAL_UART_IRQHandler+0x514>
      return;
 80058e6:	bf00      	nop
 80058e8:	e000      	b.n	80058ec <HAL_UART_IRQHandler+0x514>
      return;
 80058ea:	bf00      	nop
  }
}
 80058ec:	37e8      	adds	r7, #232	; 0xe8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop

080058f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b090      	sub	sp, #64	; 0x40
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	4613      	mov	r3, r2
 800592e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005930:	e050      	b.n	80059d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005938:	d04c      	beq.n	80059d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800593a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800593c:	2b00      	cmp	r3, #0
 800593e:	d007      	beq.n	8005950 <UART_WaitOnFlagUntilTimeout+0x30>
 8005940:	f7fc ff82 	bl	8002848 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800594c:	429a      	cmp	r2, r3
 800594e:	d241      	bcs.n	80059d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	330c      	adds	r3, #12
 8005956:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005970:	637a      	str	r2, [r7, #52]	; 0x34
 8005972:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005974:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005978:	e841 2300 	strex	r3, r2, [r1]
 800597c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800597e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e5      	bne.n	8005950 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	3314      	adds	r3, #20
 800598a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	e853 3f00 	ldrex	r3, [r3]
 8005992:	613b      	str	r3, [r7, #16]
   return(result);
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f023 0301 	bic.w	r3, r3, #1
 800599a:	63bb      	str	r3, [r7, #56]	; 0x38
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3314      	adds	r3, #20
 80059a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059a4:	623a      	str	r2, [r7, #32]
 80059a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a8:	69f9      	ldr	r1, [r7, #28]
 80059aa:	6a3a      	ldr	r2, [r7, #32]
 80059ac:	e841 2300 	strex	r3, r2, [r1]
 80059b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e5      	bne.n	8005984 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e00f      	b.n	80059f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	4013      	ands	r3, r2
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	bf0c      	ite	eq
 80059e4:	2301      	moveq	r3, #1
 80059e6:	2300      	movne	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	461a      	mov	r2, r3
 80059ec:	79fb      	ldrb	r3, [r7, #7]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d09f      	beq.n	8005932 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3740      	adds	r7, #64	; 0x40
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	4613      	mov	r3, r2
 8005a08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	88fa      	ldrh	r2, [r7, #6]
 8005a14:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	88fa      	ldrh	r2, [r7, #6]
 8005a1a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2222      	movs	r2, #34	; 0x22
 8005a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d007      	beq.n	8005a4a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68da      	ldr	r2, [r3, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a48:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695a      	ldr	r2, [r3, #20]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0201 	orr.w	r2, r2, #1
 8005a58:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f042 0220 	orr.w	r2, r2, #32
 8005a68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b095      	sub	sp, #84	; 0x54
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	330c      	adds	r3, #12
 8005a86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8a:	e853 3f00 	ldrex	r3, [r3]
 8005a8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	330c      	adds	r3, #12
 8005a9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005aa0:	643a      	str	r2, [r7, #64]	; 0x40
 8005aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005aa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005aa8:	e841 2300 	strex	r3, r2, [r1]
 8005aac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e5      	bne.n	8005a80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3314      	adds	r3, #20
 8005aba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	e853 3f00 	ldrex	r3, [r3]
 8005ac2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	f023 0301 	bic.w	r3, r3, #1
 8005aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3314      	adds	r3, #20
 8005ad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ad4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005adc:	e841 2300 	strex	r3, r2, [r1]
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1e5      	bne.n	8005ab4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d119      	bne.n	8005b24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	330c      	adds	r3, #12
 8005af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f023 0310 	bic.w	r3, r3, #16
 8005b06:	647b      	str	r3, [r7, #68]	; 0x44
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	330c      	adds	r3, #12
 8005b0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b10:	61ba      	str	r2, [r7, #24]
 8005b12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	6979      	ldr	r1, [r7, #20]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e5      	bne.n	8005af0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b32:	bf00      	nop
 8005b34:	3754      	adds	r7, #84	; 0x54
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b084      	sub	sp, #16
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f7fc f9d7 	bl	8001f0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b5e:	bf00      	nop
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b085      	sub	sp, #20
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b21      	cmp	r3, #33	; 0x21
 8005b78:	d13e      	bne.n	8005bf8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b82:	d114      	bne.n	8005bae <UART_Transmit_IT+0x48>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d110      	bne.n	8005bae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ba0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	1c9a      	adds	r2, r3, #2
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	621a      	str	r2, [r3, #32]
 8005bac:	e008      	b.n	8005bc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	1c59      	adds	r1, r3, #1
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6211      	str	r1, [r2, #32]
 8005bb8:	781a      	ldrb	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10f      	bne.n	8005bf4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005be2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bf2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e000      	b.n	8005bfa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bf8:	2302      	movs	r3, #2
  }
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b082      	sub	sp, #8
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7ff fe64 	bl	80058f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b08c      	sub	sp, #48	; 0x30
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b22      	cmp	r3, #34	; 0x22
 8005c48:	f040 80ab 	bne.w	8005da2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c54:	d117      	bne.n	8005c86 <UART_Receive_IT+0x50>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d113      	bne.n	8005c86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7e:	1c9a      	adds	r2, r3, #2
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	629a      	str	r2, [r3, #40]	; 0x28
 8005c84:	e026      	b.n	8005cd4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c98:	d007      	beq.n	8005caa <UART_Receive_IT+0x74>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10a      	bne.n	8005cb8 <UART_Receive_IT+0x82>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d106      	bne.n	8005cb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	e008      	b.n	8005cca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d15a      	bne.n	8005d9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68da      	ldr	r2, [r3, #12]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 0220 	bic.w	r2, r2, #32
 8005cf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68da      	ldr	r2, [r3, #12]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695a      	ldr	r2, [r3, #20]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0201 	bic.w	r2, r2, #1
 8005d16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d135      	bne.n	8005d94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	330c      	adds	r3, #12
 8005d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	e853 3f00 	ldrex	r3, [r3]
 8005d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f023 0310 	bic.w	r3, r3, #16
 8005d44:	627b      	str	r3, [r7, #36]	; 0x24
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	330c      	adds	r3, #12
 8005d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4e:	623a      	str	r2, [r7, #32]
 8005d50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	69f9      	ldr	r1, [r7, #28]
 8005d54:	6a3a      	ldr	r2, [r7, #32]
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e5      	bne.n	8005d2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0310 	and.w	r3, r3, #16
 8005d6c:	2b10      	cmp	r3, #16
 8005d6e:	d10a      	bne.n	8005d86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d70:	2300      	movs	r3, #0
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7ff fdbb 	bl	8005908 <HAL_UARTEx_RxEventCallback>
 8005d92:	e002      	b.n	8005d9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7fc f917 	bl	8001fc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e002      	b.n	8005da4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e000      	b.n	8005da4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005da2:	2302      	movs	r3, #2
  }
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3730      	adds	r7, #48	; 0x30
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005db0:	b0c0      	sub	sp, #256	; 0x100
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc8:	68d9      	ldr	r1, [r3, #12]
 8005dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	ea40 0301 	orr.w	r3, r0, r1
 8005dd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	431a      	orrs	r2, r3
 8005de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e04:	f021 010c 	bic.w	r1, r1, #12
 8005e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e12:	430b      	orrs	r3, r1
 8005e14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e26:	6999      	ldr	r1, [r3, #24]
 8005e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	ea40 0301 	orr.w	r3, r0, r1
 8005e32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	4b8f      	ldr	r3, [pc, #572]	; (8006078 <UART_SetConfig+0x2cc>)
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d005      	beq.n	8005e4c <UART_SetConfig+0xa0>
 8005e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	4b8d      	ldr	r3, [pc, #564]	; (800607c <UART_SetConfig+0x2d0>)
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d104      	bne.n	8005e56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e4c:	f7fd fde2 	bl	8003a14 <HAL_RCC_GetPCLK2Freq>
 8005e50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e54:	e003      	b.n	8005e5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e56:	f7fd fdc9 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8005e5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e68:	f040 810c 	bne.w	8006084 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e70:	2200      	movs	r2, #0
 8005e72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e7e:	4622      	mov	r2, r4
 8005e80:	462b      	mov	r3, r5
 8005e82:	1891      	adds	r1, r2, r2
 8005e84:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e86:	415b      	adcs	r3, r3
 8005e88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e8e:	4621      	mov	r1, r4
 8005e90:	eb12 0801 	adds.w	r8, r2, r1
 8005e94:	4629      	mov	r1, r5
 8005e96:	eb43 0901 	adc.w	r9, r3, r1
 8005e9a:	f04f 0200 	mov.w	r2, #0
 8005e9e:	f04f 0300 	mov.w	r3, #0
 8005ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eae:	4690      	mov	r8, r2
 8005eb0:	4699      	mov	r9, r3
 8005eb2:	4623      	mov	r3, r4
 8005eb4:	eb18 0303 	adds.w	r3, r8, r3
 8005eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ebc:	462b      	mov	r3, r5
 8005ebe:	eb49 0303 	adc.w	r3, r9, r3
 8005ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ed2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005ed6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005eda:	460b      	mov	r3, r1
 8005edc:	18db      	adds	r3, r3, r3
 8005ede:	653b      	str	r3, [r7, #80]	; 0x50
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	eb42 0303 	adc.w	r3, r2, r3
 8005ee6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ee8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005eec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ef0:	f7fa f9de 	bl	80002b0 <__aeabi_uldivmod>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4b61      	ldr	r3, [pc, #388]	; (8006080 <UART_SetConfig+0x2d4>)
 8005efa:	fba3 2302 	umull	r2, r3, r3, r2
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	011c      	lsls	r4, r3, #4
 8005f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f14:	4642      	mov	r2, r8
 8005f16:	464b      	mov	r3, r9
 8005f18:	1891      	adds	r1, r2, r2
 8005f1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f1c:	415b      	adcs	r3, r3
 8005f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f24:	4641      	mov	r1, r8
 8005f26:	eb12 0a01 	adds.w	sl, r2, r1
 8005f2a:	4649      	mov	r1, r9
 8005f2c:	eb43 0b01 	adc.w	fp, r3, r1
 8005f30:	f04f 0200 	mov.w	r2, #0
 8005f34:	f04f 0300 	mov.w	r3, #0
 8005f38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f44:	4692      	mov	sl, r2
 8005f46:	469b      	mov	fp, r3
 8005f48:	4643      	mov	r3, r8
 8005f4a:	eb1a 0303 	adds.w	r3, sl, r3
 8005f4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f52:	464b      	mov	r3, r9
 8005f54:	eb4b 0303 	adc.w	r3, fp, r3
 8005f58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f70:	460b      	mov	r3, r1
 8005f72:	18db      	adds	r3, r3, r3
 8005f74:	643b      	str	r3, [r7, #64]	; 0x40
 8005f76:	4613      	mov	r3, r2
 8005f78:	eb42 0303 	adc.w	r3, r2, r3
 8005f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8005f7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f86:	f7fa f993 	bl	80002b0 <__aeabi_uldivmod>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4611      	mov	r1, r2
 8005f90:	4b3b      	ldr	r3, [pc, #236]	; (8006080 <UART_SetConfig+0x2d4>)
 8005f92:	fba3 2301 	umull	r2, r3, r3, r1
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	2264      	movs	r2, #100	; 0x64
 8005f9a:	fb02 f303 	mul.w	r3, r2, r3
 8005f9e:	1acb      	subs	r3, r1, r3
 8005fa0:	00db      	lsls	r3, r3, #3
 8005fa2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005fa6:	4b36      	ldr	r3, [pc, #216]	; (8006080 <UART_SetConfig+0x2d4>)
 8005fa8:	fba3 2302 	umull	r2, r3, r3, r2
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fb4:	441c      	add	r4, r3
 8005fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005fc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005fc8:	4642      	mov	r2, r8
 8005fca:	464b      	mov	r3, r9
 8005fcc:	1891      	adds	r1, r2, r2
 8005fce:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fd0:	415b      	adcs	r3, r3
 8005fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fd8:	4641      	mov	r1, r8
 8005fda:	1851      	adds	r1, r2, r1
 8005fdc:	6339      	str	r1, [r7, #48]	; 0x30
 8005fde:	4649      	mov	r1, r9
 8005fe0:	414b      	adcs	r3, r1
 8005fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ff0:	4659      	mov	r1, fp
 8005ff2:	00cb      	lsls	r3, r1, #3
 8005ff4:	4651      	mov	r1, sl
 8005ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ffa:	4651      	mov	r1, sl
 8005ffc:	00ca      	lsls	r2, r1, #3
 8005ffe:	4610      	mov	r0, r2
 8006000:	4619      	mov	r1, r3
 8006002:	4603      	mov	r3, r0
 8006004:	4642      	mov	r2, r8
 8006006:	189b      	adds	r3, r3, r2
 8006008:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800600c:	464b      	mov	r3, r9
 800600e:	460a      	mov	r2, r1
 8006010:	eb42 0303 	adc.w	r3, r2, r3
 8006014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006024:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006028:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800602c:	460b      	mov	r3, r1
 800602e:	18db      	adds	r3, r3, r3
 8006030:	62bb      	str	r3, [r7, #40]	; 0x28
 8006032:	4613      	mov	r3, r2
 8006034:	eb42 0303 	adc.w	r3, r2, r3
 8006038:	62fb      	str	r3, [r7, #44]	; 0x2c
 800603a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800603e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006042:	f7fa f935 	bl	80002b0 <__aeabi_uldivmod>
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	4b0d      	ldr	r3, [pc, #52]	; (8006080 <UART_SetConfig+0x2d4>)
 800604c:	fba3 1302 	umull	r1, r3, r3, r2
 8006050:	095b      	lsrs	r3, r3, #5
 8006052:	2164      	movs	r1, #100	; 0x64
 8006054:	fb01 f303 	mul.w	r3, r1, r3
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	3332      	adds	r3, #50	; 0x32
 800605e:	4a08      	ldr	r2, [pc, #32]	; (8006080 <UART_SetConfig+0x2d4>)
 8006060:	fba2 2303 	umull	r2, r3, r2, r3
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	f003 0207 	and.w	r2, r3, #7
 800606a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4422      	add	r2, r4
 8006072:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006074:	e106      	b.n	8006284 <UART_SetConfig+0x4d8>
 8006076:	bf00      	nop
 8006078:	40011000 	.word	0x40011000
 800607c:	40011400 	.word	0x40011400
 8006080:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006088:	2200      	movs	r2, #0
 800608a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800608e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006092:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006096:	4642      	mov	r2, r8
 8006098:	464b      	mov	r3, r9
 800609a:	1891      	adds	r1, r2, r2
 800609c:	6239      	str	r1, [r7, #32]
 800609e:	415b      	adcs	r3, r3
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24
 80060a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060a6:	4641      	mov	r1, r8
 80060a8:	1854      	adds	r4, r2, r1
 80060aa:	4649      	mov	r1, r9
 80060ac:	eb43 0501 	adc.w	r5, r3, r1
 80060b0:	f04f 0200 	mov.w	r2, #0
 80060b4:	f04f 0300 	mov.w	r3, #0
 80060b8:	00eb      	lsls	r3, r5, #3
 80060ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060be:	00e2      	lsls	r2, r4, #3
 80060c0:	4614      	mov	r4, r2
 80060c2:	461d      	mov	r5, r3
 80060c4:	4643      	mov	r3, r8
 80060c6:	18e3      	adds	r3, r4, r3
 80060c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060cc:	464b      	mov	r3, r9
 80060ce:	eb45 0303 	adc.w	r3, r5, r3
 80060d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060e6:	f04f 0200 	mov.w	r2, #0
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80060f2:	4629      	mov	r1, r5
 80060f4:	008b      	lsls	r3, r1, #2
 80060f6:	4621      	mov	r1, r4
 80060f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060fc:	4621      	mov	r1, r4
 80060fe:	008a      	lsls	r2, r1, #2
 8006100:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006104:	f7fa f8d4 	bl	80002b0 <__aeabi_uldivmod>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4b60      	ldr	r3, [pc, #384]	; (8006290 <UART_SetConfig+0x4e4>)
 800610e:	fba3 2302 	umull	r2, r3, r3, r2
 8006112:	095b      	lsrs	r3, r3, #5
 8006114:	011c      	lsls	r4, r3, #4
 8006116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800611a:	2200      	movs	r2, #0
 800611c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006120:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006124:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006128:	4642      	mov	r2, r8
 800612a:	464b      	mov	r3, r9
 800612c:	1891      	adds	r1, r2, r2
 800612e:	61b9      	str	r1, [r7, #24]
 8006130:	415b      	adcs	r3, r3
 8006132:	61fb      	str	r3, [r7, #28]
 8006134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006138:	4641      	mov	r1, r8
 800613a:	1851      	adds	r1, r2, r1
 800613c:	6139      	str	r1, [r7, #16]
 800613e:	4649      	mov	r1, r9
 8006140:	414b      	adcs	r3, r1
 8006142:	617b      	str	r3, [r7, #20]
 8006144:	f04f 0200 	mov.w	r2, #0
 8006148:	f04f 0300 	mov.w	r3, #0
 800614c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006150:	4659      	mov	r1, fp
 8006152:	00cb      	lsls	r3, r1, #3
 8006154:	4651      	mov	r1, sl
 8006156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800615a:	4651      	mov	r1, sl
 800615c:	00ca      	lsls	r2, r1, #3
 800615e:	4610      	mov	r0, r2
 8006160:	4619      	mov	r1, r3
 8006162:	4603      	mov	r3, r0
 8006164:	4642      	mov	r2, r8
 8006166:	189b      	adds	r3, r3, r2
 8006168:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800616c:	464b      	mov	r3, r9
 800616e:	460a      	mov	r2, r1
 8006170:	eb42 0303 	adc.w	r3, r2, r3
 8006174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	67bb      	str	r3, [r7, #120]	; 0x78
 8006182:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006190:	4649      	mov	r1, r9
 8006192:	008b      	lsls	r3, r1, #2
 8006194:	4641      	mov	r1, r8
 8006196:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800619a:	4641      	mov	r1, r8
 800619c:	008a      	lsls	r2, r1, #2
 800619e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80061a2:	f7fa f885 	bl	80002b0 <__aeabi_uldivmod>
 80061a6:	4602      	mov	r2, r0
 80061a8:	460b      	mov	r3, r1
 80061aa:	4611      	mov	r1, r2
 80061ac:	4b38      	ldr	r3, [pc, #224]	; (8006290 <UART_SetConfig+0x4e4>)
 80061ae:	fba3 2301 	umull	r2, r3, r3, r1
 80061b2:	095b      	lsrs	r3, r3, #5
 80061b4:	2264      	movs	r2, #100	; 0x64
 80061b6:	fb02 f303 	mul.w	r3, r2, r3
 80061ba:	1acb      	subs	r3, r1, r3
 80061bc:	011b      	lsls	r3, r3, #4
 80061be:	3332      	adds	r3, #50	; 0x32
 80061c0:	4a33      	ldr	r2, [pc, #204]	; (8006290 <UART_SetConfig+0x4e4>)
 80061c2:	fba2 2303 	umull	r2, r3, r2, r3
 80061c6:	095b      	lsrs	r3, r3, #5
 80061c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061cc:	441c      	add	r4, r3
 80061ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061d2:	2200      	movs	r2, #0
 80061d4:	673b      	str	r3, [r7, #112]	; 0x70
 80061d6:	677a      	str	r2, [r7, #116]	; 0x74
 80061d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80061dc:	4642      	mov	r2, r8
 80061de:	464b      	mov	r3, r9
 80061e0:	1891      	adds	r1, r2, r2
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	415b      	adcs	r3, r3
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061ec:	4641      	mov	r1, r8
 80061ee:	1851      	adds	r1, r2, r1
 80061f0:	6039      	str	r1, [r7, #0]
 80061f2:	4649      	mov	r1, r9
 80061f4:	414b      	adcs	r3, r1
 80061f6:	607b      	str	r3, [r7, #4]
 80061f8:	f04f 0200 	mov.w	r2, #0
 80061fc:	f04f 0300 	mov.w	r3, #0
 8006200:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006204:	4659      	mov	r1, fp
 8006206:	00cb      	lsls	r3, r1, #3
 8006208:	4651      	mov	r1, sl
 800620a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800620e:	4651      	mov	r1, sl
 8006210:	00ca      	lsls	r2, r1, #3
 8006212:	4610      	mov	r0, r2
 8006214:	4619      	mov	r1, r3
 8006216:	4603      	mov	r3, r0
 8006218:	4642      	mov	r2, r8
 800621a:	189b      	adds	r3, r3, r2
 800621c:	66bb      	str	r3, [r7, #104]	; 0x68
 800621e:	464b      	mov	r3, r9
 8006220:	460a      	mov	r2, r1
 8006222:	eb42 0303 	adc.w	r3, r2, r3
 8006226:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	663b      	str	r3, [r7, #96]	; 0x60
 8006232:	667a      	str	r2, [r7, #100]	; 0x64
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006240:	4649      	mov	r1, r9
 8006242:	008b      	lsls	r3, r1, #2
 8006244:	4641      	mov	r1, r8
 8006246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800624a:	4641      	mov	r1, r8
 800624c:	008a      	lsls	r2, r1, #2
 800624e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006252:	f7fa f82d 	bl	80002b0 <__aeabi_uldivmod>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4b0d      	ldr	r3, [pc, #52]	; (8006290 <UART_SetConfig+0x4e4>)
 800625c:	fba3 1302 	umull	r1, r3, r3, r2
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	2164      	movs	r1, #100	; 0x64
 8006264:	fb01 f303 	mul.w	r3, r1, r3
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	3332      	adds	r3, #50	; 0x32
 800626e:	4a08      	ldr	r2, [pc, #32]	; (8006290 <UART_SetConfig+0x4e4>)
 8006270:	fba2 2303 	umull	r2, r3, r2, r3
 8006274:	095b      	lsrs	r3, r3, #5
 8006276:	f003 020f 	and.w	r2, r3, #15
 800627a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4422      	add	r2, r4
 8006282:	609a      	str	r2, [r3, #8]
}
 8006284:	bf00      	nop
 8006286:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800628a:	46bd      	mov	sp, r7
 800628c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006290:	51eb851f 	.word	0x51eb851f

08006294 <HW_RESET>:


//No se puede quedar esperano en las funciones, hay que detectar a situaci�n y salir del bucle.
//pensar que solo entra cuando recibe datos, si no vuelve a entrar queda ah� eternamentes.
void HW_RESET(struct WIFI *a)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_RESET);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	889b      	ldrh	r3, [r3, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	4619      	mov	r1, r3
 80062a8:	f7fc ff3c 	bl	8003124 <HAL_GPIO_WritePin>
    ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 80062ac:	2115      	movs	r1, #21
 80062ae:	480b      	ldr	r0, [pc, #44]	; (80062dc <HW_RESET+0x48>)
 80062b0:	f7fb f8a2 	bl	80013f8 <ITM0_Write>
    HAL_Delay(2000);											//Tiempo de reset del módulo
 80062b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80062b8:	f7fc fad2 	bl	8002860 <HAL_Delay>
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
 80062bc:	210e      	movs	r1, #14
 80062be:	4808      	ldr	r0, [pc, #32]	; (80062e0 <HW_RESET+0x4c>)
 80062c0:	f7fb f89a 	bl	80013f8 <ITM0_Write>
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6818      	ldr	r0, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	889b      	ldrh	r3, [r3, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	4619      	mov	r1, r3
 80062d0:	f7fc ff28 	bl	8003124 <HAL_GPIO_WritePin>
}
 80062d4:	bf00      	nop
 80062d6:	3708      	adds	r7, #8
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	080103c4 	.word	0x080103c4
 80062e0:	080103dc 	.word	0x080103dc

080062e4 <NOP>:
void NOP(struct WIFI *a)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <MUX>:
void MUX(struct WIFI *a)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2204      	movs	r2, #4
 8006374:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <IPDef>:
void IPDef(struct WIFI *a)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2205      	movs	r2, #5
 80063a0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2206      	movs	r2, #6
 80063f8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2208      	movs	r2, #8
 8006424:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2209      	movs	r2, #9
 8006450:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2207      	movs	r2, #7
 800647c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <Inicializar>:
void Inicializar(struct WIFI *a)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 8006630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006632:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006636:	af06      	add	r7, sp, #24
 8006638:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800663c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006640:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 8006642:	2300      	movs	r3, #0
 8006644:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006648:	2300      	movs	r3, #0
 800664a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800664e:	2300      	movs	r3, #0
 8006650:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8006654:	2300      	movs	r3, #0
 8006656:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800665a:	2300      	movs	r3, #0
 800665c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 8006660:	2320      	movs	r3, #32
 8006662:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 8006666:	2322      	movs	r3, #34	; 0x22
 8006668:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 800666c:	4b71      	ldr	r3, [pc, #452]	; (8006834 <AT_ESP8266_ND+0x204>)
 800666e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 8006672:	4a71      	ldr	r2, [pc, #452]	; (8006838 <AT_ESP8266_ND+0x208>)
 8006674:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8006678:	6812      	ldr	r2, [r2, #0]
 800667a:	4611      	mov	r1, r2
 800667c:	8019      	strh	r1, [r3, #0]
 800667e:	3302      	adds	r3, #2
 8006680:	0c12      	lsrs	r2, r2, #16
 8006682:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 8006684:	f642 4322 	movw	r3, #11298	; 0x2c22
 8006688:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 800668c:	f640 230d 	movw	r3, #2573	; 0xa0d
 8006690:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8006694:	2300      	movs	r3, #0
 8006696:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800669a:	2300      	movs	r3, #0
 800669c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 80066a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 80066b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f203 6394 	addw	r3, r3, #1684	; 0x694
 80066be:	4618      	mov	r0, r3
 80066c0:	f7f9 fd98 	bl	80001f4 <strlen>
 80066c4:	4603      	mov	r3, r0
 80066c6:	461a      	mov	r2, r3
 80066c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 80066d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 80066e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f203 6394 	addw	r3, r3, #1684	; 0x694
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7f9 fd7d 	bl	80001f4 <strlen>
 80066fa:	4603      	mov	r3, r0
 80066fc:	461a      	mov	r2, r3
 80066fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006702:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 800670c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006710:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2206      	movs	r2, #6
 8006718:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800671c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006720:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800672a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800672e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006738:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800673c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006746:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800674a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006754:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006758:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800675c:	6812      	ldr	r2, [r2, #0]
 800675e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006762:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006766:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800676a:	6809      	ldr	r1, [r1, #0]
 800676c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006770:	2600      	movs	r6, #0
 8006772:	9604      	str	r6, [sp, #16]
 8006774:	9103      	str	r1, [sp, #12]
 8006776:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800677a:	9102      	str	r1, [sp, #8]
 800677c:	9201      	str	r2, [sp, #4]
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	462b      	mov	r3, r5
 8006782:	4a2e      	ldr	r2, [pc, #184]	; (800683c <AT_ESP8266_ND+0x20c>)
 8006784:	4621      	mov	r1, r4
 8006786:	f007 fe57 	bl	800e438 <FT_String_ND>
 800678a:	4603      	mov	r3, r0
 800678c:	2b01      	cmp	r3, #1
 800678e:	f040 812a 	bne.w	80069e6 <AT_ESP8266_ND+0x3b6>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006792:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006796:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2206      	movs	r2, #6
 800679e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 80067a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d145      	bne.n	8006840 <AT_ESP8266_ND+0x210>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATA);
 80067b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80067c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80067d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80067de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80067ec:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80067f0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80067f4:	6812      	ldr	r2, [r2, #0]
 80067f6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80067fa:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80067fe:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006802:	6809      	ldr	r1, [r1, #0]
 8006804:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006808:	2604      	movs	r6, #4
 800680a:	9604      	str	r6, [sp, #16]
 800680c:	9103      	str	r1, [sp, #12]
 800680e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006812:	9102      	str	r1, [sp, #8]
 8006814:	9201      	str	r2, [sp, #4]
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	462b      	mov	r3, r5
 800681a:	4a08      	ldr	r2, [pc, #32]	; (800683c <AT_ESP8266_ND+0x20c>)
 800681c:	4621      	mov	r1, r4
 800681e:	f007 fe0b 	bl	800e438 <FT_String_ND>
 8006822:	4602      	mov	r2, r0
 8006824:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006828:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 8006832:	e044      	b.n	80068be <AT_ESP8266_ND+0x28e>
 8006834:	00222c22 	.word	0x00222c22
 8006838:	080105c4 	.word	0x080105c4
 800683c:	080103ec 	.word	0x080103ec
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATASRVR);
 8006840:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006844:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800684e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006852:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800685c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006860:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800686a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800686e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006878:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800687c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006880:	6812      	ldr	r2, [r2, #0]
 8006882:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006886:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800688a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800688e:	6809      	ldr	r1, [r1, #0]
 8006890:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006894:	2605      	movs	r6, #5
 8006896:	9604      	str	r6, [sp, #16]
 8006898:	9103      	str	r1, [sp, #12]
 800689a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800689e:	9102      	str	r1, [sp, #8]
 80068a0:	9201      	str	r2, [sp, #4]
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	462b      	mov	r3, r5
 80068a6:	4ac1      	ldr	r2, [pc, #772]	; (8006bac <AT_ESP8266_ND+0x57c>)
 80068a8:	4621      	mov	r1, r4
 80068aa:	f007 fdc5 	bl	800e438 <FT_String_ND>
 80068ae:	4602      	mov	r2, r0
 80068b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 80068be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 80068cc:	2b04      	cmp	r3, #4
 80068ce:	d15a      	bne.n	8006986 <AT_ESP8266_ND+0x356>
	 	{
	 		a->_estado_rcv_data=99;
 80068d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2263      	movs	r2, #99	; 0x63
 80068dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 80068e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 80068ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 80068fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006900:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f103 0094 	add.w	r0, r3, #148	; 0x94
 800690a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800690e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006918:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800691c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006926:	2341      	movs	r3, #65	; 0x41
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	2300      	movs	r3, #0
 800692c:	f008 f8ea 	bl	800eb04 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006930:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006934:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f503 7025 	add.w	r0, r3, #660	; 0x294
 800693e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006942:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f603 0194 	addw	r1, r3, #2196	; 0x894
 800694c:	2341      	movs	r3, #65	; 0x41
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	2300      	movs	r3, #0
 8006952:	2205      	movs	r2, #5
 8006954:	f008 f8d6 	bl	800eb04 <CopiaVector>

	 		a->_debug_rx_ok++;
 8006958:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800695c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800696c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 8006976:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800697a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2201      	movs	r2, #1
 8006982:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 8006986:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800698a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006994:	2b05      	cmp	r3, #5
 8006996:	d126      	bne.n	80069e6 <AT_ESP8266_ND+0x3b6>
	 	{
	 		a->_estado_rcv_data=55;
 8006998:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800699c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2237      	movs	r2, #55	; 0x37
 80069a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 80069a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 80069b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 80069c6:	1c5a      	adds	r2, r3, #1
 80069c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 80069d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 80069e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2204      	movs	r2, #4
 80069f2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80069f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006a04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006a12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006a20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006a2e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a32:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006a36:	6812      	ldr	r2, [r2, #0]
 8006a38:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006a3c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006a40:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006a44:	6809      	ldr	r1, [r1, #0]
 8006a46:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006a4a:	2600      	movs	r6, #0
 8006a4c:	9604      	str	r6, [sp, #16]
 8006a4e:	9103      	str	r1, [sp, #12]
 8006a50:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006a54:	9102      	str	r1, [sp, #8]
 8006a56:	9201      	str	r2, [sp, #4]
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	462b      	mov	r3, r5
 8006a5c:	4a54      	ldr	r2, [pc, #336]	; (8006bb0 <AT_ESP8266_ND+0x580>)
 8006a5e:	4621      	mov	r1, r4
 8006a60:	f007 fcea 	bl	800e438 <FT_String_ND>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	f040 8334 	bne.w	80070d4 <AT_ESP8266_ND+0xaa4>
	{

		AT_decode=at_ok;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 8006a72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2206      	movs	r2, #6
 8006a7e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Transmision ok
 8006a82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006a90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006a9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aa2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006aac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ab0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006aba:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006abe:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ac8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006acc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ad0:	6809      	ldr	r1, [r1, #0]
 8006ad2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ad6:	2600      	movs	r6, #0
 8006ad8:	9604      	str	r6, [sp, #16]
 8006ada:	9103      	str	r1, [sp, #12]
 8006adc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ae0:	9102      	str	r1, [sp, #8]
 8006ae2:	9201      	str	r2, [sp, #4]
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	462b      	mov	r3, r5
 8006ae8:	4a32      	ldr	r2, [pc, #200]	; (8006bb4 <AT_ESP8266_ND+0x584>)
 8006aea:	4621      	mov	r1, r4
 8006aec:	f007 fca4 	bl	800e438 <FT_String_ND>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d113      	bne.n	8006b1e <AT_ESP8266_ND+0x4ee>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8006af6:	2313      	movs	r3, #19
 8006af8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8006afc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 8006b1a:	f001 b981 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 8006b1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2208      	movs	r2, #8
 8006b2a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006b2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006b3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006b4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006b58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006b66:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b6a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b6e:	6812      	ldr	r2, [r2, #0]
 8006b70:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b74:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b78:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b7c:	6809      	ldr	r1, [r1, #0]
 8006b7e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006b82:	2600      	movs	r6, #0
 8006b84:	9604      	str	r6, [sp, #16]
 8006b86:	9103      	str	r1, [sp, #12]
 8006b88:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b8c:	9102      	str	r1, [sp, #8]
 8006b8e:	9201      	str	r2, [sp, #4]
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	462b      	mov	r3, r5
 8006b94:	4a08      	ldr	r2, [pc, #32]	; (8006bb8 <AT_ESP8266_ND+0x588>)
 8006b96:	4621      	mov	r1, r4
 8006b98:	f007 fc4e 	bl	800e438 <FT_String_ND>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d10c      	bne.n	8006bbc <AT_ESP8266_ND+0x58c>
			{
			AT_decode=at_deconectar_ok;
 8006ba2:	230d      	movs	r3, #13
 8006ba4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006ba8:	f001 b93a 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
 8006bac:	080103ec 	.word	0x080103ec
 8006bb0:	080103f4 	.word	0x080103f4
 8006bb4:	080103fc 	.word	0x080103fc
 8006bb8:	08010404 	.word	0x08010404
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006bbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	220a      	movs	r2, #10
 8006bc8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8006bcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006bda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006be8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006bf6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006c04:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006c08:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c0c:	6812      	ldr	r2, [r2, #0]
 8006c0e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006c12:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006c16:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c1a:	6809      	ldr	r1, [r1, #0]
 8006c1c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006c20:	2600      	movs	r6, #0
 8006c22:	9604      	str	r6, [sp, #16]
 8006c24:	9103      	str	r1, [sp, #12]
 8006c26:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c2a:	9102      	str	r1, [sp, #8]
 8006c2c:	9201      	str	r2, [sp, #4]
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	462b      	mov	r3, r5
 8006c32:	4ab7      	ldr	r2, [pc, #732]	; (8006f10 <AT_ESP8266_ND+0x8e0>)
 8006c34:	4621      	mov	r1, r4
 8006c36:	f007 fbff 	bl	800e438 <FT_String_ND>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d104      	bne.n	8006c4a <AT_ESP8266_ND+0x61a>
			{
				AT_decode=at_cambiar_modo_ok;
 8006c40:	231c      	movs	r3, #28
 8006c42:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006c46:	f001 b8eb 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8006c4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	220f      	movs	r2, #15
 8006c56:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8006c5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006c68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006c76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006c84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006c92:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006c96:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c9a:	6812      	ldr	r2, [r2, #0]
 8006c9c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ca0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ca4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ca8:	6809      	ldr	r1, [r1, #0]
 8006caa:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006cae:	2600      	movs	r6, #0
 8006cb0:	9604      	str	r6, [sp, #16]
 8006cb2:	9103      	str	r1, [sp, #12]
 8006cb4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006cb8:	9102      	str	r1, [sp, #8]
 8006cba:	9201      	str	r2, [sp, #4]
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	462b      	mov	r3, r5
 8006cc0:	4a94      	ldr	r2, [pc, #592]	; (8006f14 <AT_ESP8266_ND+0x8e4>)
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	f007 fbb8 	bl	800e438 <FT_String_ND>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d104      	bne.n	8006cd8 <AT_ESP8266_ND+0x6a8>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 8006cce:	2317      	movs	r3, #23
 8006cd0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006cd4:	f001 b8a4 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 8006cd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2203      	movs	r2, #3
 8006ce4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8006ce8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006cf6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006d04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006d12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006d20:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d24:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d28:	6812      	ldr	r2, [r2, #0]
 8006d2a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006d2e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d32:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d36:	6809      	ldr	r1, [r1, #0]
 8006d38:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006d3c:	2600      	movs	r6, #0
 8006d3e:	9604      	str	r6, [sp, #16]
 8006d40:	9103      	str	r1, [sp, #12]
 8006d42:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d46:	9102      	str	r1, [sp, #8]
 8006d48:	9201      	str	r2, [sp, #4]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	462b      	mov	r3, r5
 8006d4e:	4a72      	ldr	r2, [pc, #456]	; (8006f18 <AT_ESP8266_ND+0x8e8>)
 8006d50:	4621      	mov	r1, r4
 8006d52:	f007 fb71 	bl	800e438 <FT_String_ND>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d104      	bne.n	8006d66 <AT_ESP8266_ND+0x736>
			{
				AT_decode=at_tcp_ok_to_send;
 8006d5c:	2314      	movs	r3, #20
 8006d5e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006d62:	f001 b85d 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 8006d66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	220c      	movs	r2, #12
 8006d72:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006d76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006d84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006d92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006da0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006da4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006dae:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006db2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006db6:	6812      	ldr	r2, [r2, #0]
 8006db8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006dbc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006dc0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006dc4:	6809      	ldr	r1, [r1, #0]
 8006dc6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006dca:	2600      	movs	r6, #0
 8006dcc:	9604      	str	r6, [sp, #16]
 8006dce:	9103      	str	r1, [sp, #12]
 8006dd0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006dd4:	9102      	str	r1, [sp, #8]
 8006dd6:	9201      	str	r2, [sp, #4]
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	462b      	mov	r3, r5
 8006ddc:	4a4f      	ldr	r2, [pc, #316]	; (8006f1c <AT_ESP8266_ND+0x8ec>)
 8006dde:	4621      	mov	r1, r4
 8006de0:	f007 fb2a 	bl	800e438 <FT_String_ND>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d104      	bne.n	8006df4 <AT_ESP8266_ND+0x7c4>
		{
			AT_decode=at_tcp_srvr_ok;
 8006dea:	2315      	movs	r3, #21
 8006dec:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006df0:	f001 b816 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 8006df4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006df8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	220b      	movs	r2, #11
 8006e00:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006e04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006e12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006e20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006e2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006e3c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e40:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e44:	6812      	ldr	r2, [r2, #0]
 8006e46:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006e4a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e4e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e52:	6809      	ldr	r1, [r1, #0]
 8006e54:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006e58:	2600      	movs	r6, #0
 8006e5a:	9604      	str	r6, [sp, #16]
 8006e5c:	9103      	str	r1, [sp, #12]
 8006e5e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e62:	9102      	str	r1, [sp, #8]
 8006e64:	9201      	str	r2, [sp, #4]
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	462b      	mov	r3, r5
 8006e6a:	4a2d      	ldr	r2, [pc, #180]	; (8006f20 <AT_ESP8266_ND+0x8f0>)
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	f007 fae3 	bl	800e438 <FT_String_ND>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d104      	bne.n	8006e82 <AT_ESP8266_ND+0x852>
			{
				AT_decode=at_tcp_closed_ok;
 8006e78:	2309      	movs	r3, #9
 8006e7a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006e7e:	f000 bfcf 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 8006e82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	220b      	movs	r2, #11
 8006e8e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006e92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006ea0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ea4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006eae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006ebc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ec0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006eca:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ece:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ed2:	6812      	ldr	r2, [r2, #0]
 8006ed4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ed8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006edc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ee0:	6809      	ldr	r1, [r1, #0]
 8006ee2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ee6:	2600      	movs	r6, #0
 8006ee8:	9604      	str	r6, [sp, #16]
 8006eea:	9103      	str	r1, [sp, #12]
 8006eec:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ef0:	9102      	str	r1, [sp, #8]
 8006ef2:	9201      	str	r2, [sp, #4]
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	462b      	mov	r3, r5
 8006ef8:	4a0a      	ldr	r2, [pc, #40]	; (8006f24 <AT_ESP8266_ND+0x8f4>)
 8006efa:	4621      	mov	r1, r4
 8006efc:	f007 fa9c 	bl	800e438 <FT_String_ND>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d110      	bne.n	8006f28 <AT_ESP8266_ND+0x8f8>
			{
				AT_decode=at_multiple_conn_ok;
 8006f06:	2307      	movs	r3, #7
 8006f08:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f0c:	f000 bf88 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
 8006f10:	08010410 	.word	0x08010410
 8006f14:	0801041c 	.word	0x0801041c
 8006f18:	0801042c 	.word	0x0801042c
 8006f1c:	08010430 	.word	0x08010430
 8006f20:	08010440 	.word	0x08010440
 8006f24:	0801044c 	.word	0x0801044c
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 8006f28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	220b      	movs	r2, #11
 8006f34:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006f38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006f46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006f54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006f62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f70:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f74:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f78:	6812      	ldr	r2, [r2, #0]
 8006f7a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f7e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f82:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f86:	6809      	ldr	r1, [r1, #0]
 8006f88:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f8c:	2600      	movs	r6, #0
 8006f8e:	9604      	str	r6, [sp, #16]
 8006f90:	9103      	str	r1, [sp, #12]
 8006f92:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f96:	9102      	str	r1, [sp, #8]
 8006f98:	9201      	str	r2, [sp, #4]
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	4ab7      	ldr	r2, [pc, #732]	; (800727c <AT_ESP8266_ND+0xc4c>)
 8006fa0:	4621      	mov	r1, r4
 8006fa2:	f007 fa49 	bl	800e438 <FT_String_ND>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d104      	bne.n	8006fb6 <AT_ESP8266_ND+0x986>
			{
				AT_decode=at_no_multiple_conn_ok;
 8006fac:	2308      	movs	r3, #8
 8006fae:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006fb2:	f000 bf35 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 8006fb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	220a      	movs	r2, #10
 8006fc2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006fc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006fd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006fe2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fe6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006ff0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ff4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ffe:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007002:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007006:	6812      	ldr	r2, [r2, #0]
 8007008:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800700c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007010:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007014:	6809      	ldr	r1, [r1, #0]
 8007016:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800701a:	2600      	movs	r6, #0
 800701c:	9604      	str	r6, [sp, #16]
 800701e:	9103      	str	r1, [sp, #12]
 8007020:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007024:	9102      	str	r1, [sp, #8]
 8007026:	9201      	str	r2, [sp, #4]
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	462b      	mov	r3, r5
 800702c:	4a94      	ldr	r2, [pc, #592]	; (8007280 <AT_ESP8266_ND+0xc50>)
 800702e:	4621      	mov	r1, r4
 8007030:	f007 fa02 	bl	800e438 <FT_String_ND>
 8007034:	4603      	mov	r3, r0
 8007036:	2b01      	cmp	r3, #1
 8007038:	d104      	bne.n	8007044 <AT_ESP8266_ND+0xa14>
			{
				AT_decode=at_def_ip_ok;
 800703a:	231b      	movs	r3, #27
 800703c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007040:	f000 beee 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 8007044:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007048:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2207      	movs	r2, #7
 8007050:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007054:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007058:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007062:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007066:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007070:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007074:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800707e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007082:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800708c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007090:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800709a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800709e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80070a2:	6809      	ldr	r1, [r1, #0]
 80070a4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80070a8:	2600      	movs	r6, #0
 80070aa:	9604      	str	r6, [sp, #16]
 80070ac:	9103      	str	r1, [sp, #12]
 80070ae:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80070b2:	9102      	str	r1, [sp, #8]
 80070b4:	9201      	str	r2, [sp, #4]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	462b      	mov	r3, r5
 80070ba:	4a72      	ldr	r2, [pc, #456]	; (8007284 <AT_ESP8266_ND+0xc54>)
 80070bc:	4621      	mov	r1, r4
 80070be:	f007 f9bb 	bl	800e438 <FT_String_ND>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	f040 86ab 	bne.w	8007e20 <AT_ESP8266_ND+0x17f0>
			{
			AT_decode=at_tcp_conectado;
 80070ca:	230f      	movs	r3, #15
 80070cc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80070d0:	f000 bea6 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 80070d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2207      	movs	r2, #7
 80070e0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80070e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80070f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007100:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007104:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800710e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007112:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800711c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007120:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800712a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800712e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007132:	6809      	ldr	r1, [r1, #0]
 8007134:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007138:	2600      	movs	r6, #0
 800713a:	9604      	str	r6, [sp, #16]
 800713c:	9103      	str	r1, [sp, #12]
 800713e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007142:	9102      	str	r1, [sp, #8]
 8007144:	9201      	str	r2, [sp, #4]
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	462b      	mov	r3, r5
 800714a:	4a4f      	ldr	r2, [pc, #316]	; (8007288 <AT_ESP8266_ND+0xc58>)
 800714c:	4621      	mov	r1, r4
 800714e:	f007 f973 	bl	800e438 <FT_String_ND>
 8007152:	4603      	mov	r3, r0
 8007154:	2b01      	cmp	r3, #1
 8007156:	f040 8326 	bne.w	80077a6 <AT_ESP8266_ND+0x1176>
		{
				AT_decode=at_error;
 800715a:	2302      	movs	r3, #2
 800715c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 8007160:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007164:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2208      	movs	r2, #8
 800716c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Intentando conectar con servidor TCP caido
 8007170:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007174:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800717e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007182:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800718c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007190:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800719a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800719e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80071a8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80071ac:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80071b0:	6812      	ldr	r2, [r2, #0]
 80071b2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80071b6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80071ba:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80071be:	6809      	ldr	r1, [r1, #0]
 80071c0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80071c4:	2600      	movs	r6, #0
 80071c6:	9604      	str	r6, [sp, #16]
 80071c8:	9103      	str	r1, [sp, #12]
 80071ca:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80071ce:	9102      	str	r1, [sp, #8]
 80071d0:	9201      	str	r2, [sp, #4]
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	462b      	mov	r3, r5
 80071d6:	4a2d      	ldr	r2, [pc, #180]	; (800728c <AT_ESP8266_ND+0xc5c>)
 80071d8:	4621      	mov	r1, r4
 80071da:	f007 f92d 	bl	800e438 <FT_String_ND>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d104      	bne.n	80071ee <AT_ESP8266_ND+0xbbe>
				{
						AT_decode=at_tcp_conn_err;
 80071e4:	2306      	movs	r3, #6
 80071e6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80071ea:	f000 be19 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 80071ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2215      	movs	r2, #21
 80071fa:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 80071fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007202:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800720c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007210:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800721a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800721e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007228:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800722c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007236:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800723a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800723e:	6812      	ldr	r2, [r2, #0]
 8007240:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007244:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007248:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800724c:	6809      	ldr	r1, [r1, #0]
 800724e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007252:	2600      	movs	r6, #0
 8007254:	9604      	str	r6, [sp, #16]
 8007256:	9103      	str	r1, [sp, #12]
 8007258:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800725c:	9102      	str	r1, [sp, #8]
 800725e:	9201      	str	r2, [sp, #4]
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	462b      	mov	r3, r5
 8007264:	4a0a      	ldr	r2, [pc, #40]	; (8007290 <AT_ESP8266_ND+0xc60>)
 8007266:	4621      	mov	r1, r4
 8007268:	f007 f8e6 	bl	800e438 <FT_String_ND>
 800726c:	4603      	mov	r3, r0
 800726e:	2b01      	cmp	r3, #1
 8007270:	d110      	bne.n	8007294 <AT_ESP8266_ND+0xc64>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 8007272:	230e      	movs	r3, #14
 8007274:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007278:	f000 bdd2 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
 800727c:	08010458 	.word	0x08010458
 8007280:	08010464 	.word	0x08010464
 8007284:	08010470 	.word	0x08010470
 8007288:	08010478 	.word	0x08010478
 800728c:	08010480 	.word	0x08010480
 8007290:	0801048c 	.word	0x0801048c
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 8007294:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007298:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	220c      	movs	r2, #12
 80072a0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80072a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80072b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80072c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80072ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80072dc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80072e0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80072e4:	6812      	ldr	r2, [r2, #0]
 80072e6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80072ea:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80072ee:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80072f2:	6809      	ldr	r1, [r1, #0]
 80072f4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80072f8:	2600      	movs	r6, #0
 80072fa:	9604      	str	r6, [sp, #16]
 80072fc:	9103      	str	r1, [sp, #12]
 80072fe:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007302:	9102      	str	r1, [sp, #8]
 8007304:	9201      	str	r2, [sp, #4]
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	462b      	mov	r3, r5
 800730a:	4ab7      	ldr	r2, [pc, #732]	; (80075e8 <AT_ESP8266_ND+0xfb8>)
 800730c:	4621      	mov	r1, r4
 800730e:	f007 f893 	bl	800e438 <FT_String_ND>
 8007312:	4603      	mov	r3, r0
 8007314:	2b01      	cmp	r3, #1
 8007316:	d104      	bne.n	8007322 <AT_ESP8266_ND+0xcf2>
				{
					AT_decode=at_tcp_srvr_err;
 8007318:	2316      	movs	r3, #22
 800731a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800731e:	f000 bd7f 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007322:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007326:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	220b      	movs	r2, #11
 800732e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8007332:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007336:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007340:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007344:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800734e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007352:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800735c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007360:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800736a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800736e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007372:	6812      	ldr	r2, [r2, #0]
 8007374:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007378:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800737c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007380:	6809      	ldr	r1, [r1, #0]
 8007382:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007386:	2600      	movs	r6, #0
 8007388:	9604      	str	r6, [sp, #16]
 800738a:	9103      	str	r1, [sp, #12]
 800738c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007390:	9102      	str	r1, [sp, #8]
 8007392:	9201      	str	r2, [sp, #4]
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	462b      	mov	r3, r5
 8007398:	4a94      	ldr	r2, [pc, #592]	; (80075ec <AT_ESP8266_ND+0xfbc>)
 800739a:	4621      	mov	r1, r4
 800739c:	f007 f84c 	bl	800e438 <FT_String_ND>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d104      	bne.n	80073b0 <AT_ESP8266_ND+0xd80>
					{
						AT_decode=at_tcp_close_err;
 80073a6:	231a      	movs	r3, #26
 80073a8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80073ac:	f000 bd38 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 80073b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2211      	movs	r2, #17
 80073bc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80073c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80073ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80073dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80073ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80073f8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073fc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007400:	6812      	ldr	r2, [r2, #0]
 8007402:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007406:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800740a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800740e:	6809      	ldr	r1, [r1, #0]
 8007410:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007414:	2600      	movs	r6, #0
 8007416:	9604      	str	r6, [sp, #16]
 8007418:	9103      	str	r1, [sp, #12]
 800741a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800741e:	9102      	str	r1, [sp, #8]
 8007420:	9201      	str	r2, [sp, #4]
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	462b      	mov	r3, r5
 8007426:	4a72      	ldr	r2, [pc, #456]	; (80075f0 <AT_ESP8266_ND+0xfc0>)
 8007428:	4621      	mov	r1, r4
 800742a:	f007 f805 	bl	800e438 <FT_String_ND>
 800742e:	4603      	mov	r3, r0
 8007430:	2b01      	cmp	r3, #1
 8007432:	d104      	bne.n	800743e <AT_ESP8266_ND+0xe0e>
					{
						AT_decode=at_tcp_snd_err;
 8007434:	2311      	movs	r3, #17
 8007436:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800743a:	f000 bcf1 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 800743e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007442:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	220a      	movs	r2, #10
 800744a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 800744e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007452:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800745c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007460:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800746a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800746e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007478:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800747c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007486:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800748a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800748e:	6812      	ldr	r2, [r2, #0]
 8007490:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007494:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007498:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800749c:	6809      	ldr	r1, [r1, #0]
 800749e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80074a2:	2600      	movs	r6, #0
 80074a4:	9604      	str	r6, [sp, #16]
 80074a6:	9103      	str	r1, [sp, #12]
 80074a8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80074ac:	9102      	str	r1, [sp, #8]
 80074ae:	9201      	str	r2, [sp, #4]
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	462b      	mov	r3, r5
 80074b4:	4a4f      	ldr	r2, [pc, #316]	; (80075f4 <AT_ESP8266_ND+0xfc4>)
 80074b6:	4621      	mov	r1, r4
 80074b8:	f006 ffbe 	bl	800e438 <FT_String_ND>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d104      	bne.n	80074cc <AT_ESP8266_ND+0xe9c>
					{
						AT_decode=at_cambiar_modo_err;
 80074c2:	231d      	movs	r3, #29
 80074c4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80074c8:	f000 bcaa 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 80074cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	220b      	movs	r2, #11
 80074d8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80074dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80074ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80074f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007506:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800750a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007514:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007518:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800751c:	6812      	ldr	r2, [r2, #0]
 800751e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007522:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007526:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800752a:	6809      	ldr	r1, [r1, #0]
 800752c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007530:	2600      	movs	r6, #0
 8007532:	9604      	str	r6, [sp, #16]
 8007534:	9103      	str	r1, [sp, #12]
 8007536:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800753a:	9102      	str	r1, [sp, #8]
 800753c:	9201      	str	r2, [sp, #4]
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	462b      	mov	r3, r5
 8007542:	4a2d      	ldr	r2, [pc, #180]	; (80075f8 <AT_ESP8266_ND+0xfc8>)
 8007544:	4621      	mov	r1, r4
 8007546:	f006 ff77 	bl	800e438 <FT_String_ND>
 800754a:	4603      	mov	r3, r0
 800754c:	2b01      	cmp	r3, #1
 800754e:	d104      	bne.n	800755a <AT_ESP8266_ND+0xf2a>
					{
						AT_decode=at_multiple_conn_err;
 8007550:	231e      	movs	r3, #30
 8007552:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007556:	f000 bc63 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 800755a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800755e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	220b      	movs	r2, #11
 8007566:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800756a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800756e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007578:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800757c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007586:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800758a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007594:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007598:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80075a2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80075a6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80075aa:	6812      	ldr	r2, [r2, #0]
 80075ac:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80075b0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80075b4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80075b8:	6809      	ldr	r1, [r1, #0]
 80075ba:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80075be:	2600      	movs	r6, #0
 80075c0:	9604      	str	r6, [sp, #16]
 80075c2:	9103      	str	r1, [sp, #12]
 80075c4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80075c8:	9102      	str	r1, [sp, #8]
 80075ca:	9201      	str	r2, [sp, #4]
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	462b      	mov	r3, r5
 80075d0:	4a0a      	ldr	r2, [pc, #40]	; (80075fc <AT_ESP8266_ND+0xfcc>)
 80075d2:	4621      	mov	r1, r4
 80075d4:	f006 ff30 	bl	800e438 <FT_String_ND>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d110      	bne.n	8007600 <AT_ESP8266_ND+0xfd0>
					{
						AT_decode=at_no_multiple_conn_err;
 80075de:	231f      	movs	r3, #31
 80075e0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80075e4:	f000 bc1c 	b.w	8007e20 <AT_ESP8266_ND+0x17f0>
 80075e8:	08010430 	.word	0x08010430
 80075ec:	08010440 	.word	0x08010440
 80075f0:	080104a4 	.word	0x080104a4
 80075f4:	08010410 	.word	0x08010410
 80075f8:	0801044c 	.word	0x0801044c
 80075fc:	08010458 	.word	0x08010458
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 8007600:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007604:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2208      	movs	r2, #8
 800760c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007610:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007614:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800761e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007622:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800762c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007630:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800763a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800763e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007648:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800764c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007650:	6812      	ldr	r2, [r2, #0]
 8007652:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007656:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800765a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800765e:	6809      	ldr	r1, [r1, #0]
 8007660:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007664:	2600      	movs	r6, #0
 8007666:	9604      	str	r6, [sp, #16]
 8007668:	9103      	str	r1, [sp, #12]
 800766a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800766e:	9102      	str	r1, [sp, #8]
 8007670:	9201      	str	r2, [sp, #4]
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	462b      	mov	r3, r5
 8007676:	4ac4      	ldr	r2, [pc, #784]	; (8007988 <AT_ESP8266_ND+0x1358>)
 8007678:	4621      	mov	r1, r4
 800767a:	f006 fedd 	bl	800e438 <FT_String_ND>
 800767e:	4603      	mov	r3, r0
 8007680:	2b01      	cmp	r3, #1
 8007682:	d103      	bne.n	800768c <AT_ESP8266_ND+0x105c>
					{
						AT_decode=at_conn_wifi_err;
 8007684:	2320      	movs	r3, #32
 8007686:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800768a:	e3c9      	b.n	8007e20 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 800768c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007690:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	220a      	movs	r2, #10
 8007698:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800769c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80076aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80076b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80076c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80076d4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80076d8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80076dc:	6812      	ldr	r2, [r2, #0]
 80076de:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80076e2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80076e6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80076ea:	6809      	ldr	r1, [r1, #0]
 80076ec:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80076f0:	2600      	movs	r6, #0
 80076f2:	9604      	str	r6, [sp, #16]
 80076f4:	9103      	str	r1, [sp, #12]
 80076f6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076fa:	9102      	str	r1, [sp, #8]
 80076fc:	9201      	str	r2, [sp, #4]
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	462b      	mov	r3, r5
 8007702:	4aa2      	ldr	r2, [pc, #648]	; (800798c <AT_ESP8266_ND+0x135c>)
 8007704:	4621      	mov	r1, r4
 8007706:	f006 fe97 	bl	800e438 <FT_String_ND>
 800770a:	4603      	mov	r3, r0
 800770c:	2b01      	cmp	r3, #1
 800770e:	d103      	bne.n	8007718 <AT_ESP8266_ND+0x10e8>
					{
						AT_decode=at_def_ip_err;
 8007710:	2321      	movs	r3, #33	; 0x21
 8007712:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007716:	e383      	b.n	8007e20 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 8007718:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800771c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2205      	movs	r2, #5
 8007724:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007728:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800772c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007736:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800773a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007744:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007748:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007752:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007756:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007760:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007764:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007768:	6812      	ldr	r2, [r2, #0]
 800776a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800776e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007772:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007776:	6809      	ldr	r1, [r1, #0]
 8007778:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800777c:	2600      	movs	r6, #0
 800777e:	9604      	str	r6, [sp, #16]
 8007780:	9103      	str	r1, [sp, #12]
 8007782:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007786:	9102      	str	r1, [sp, #8]
 8007788:	9201      	str	r2, [sp, #4]
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	462b      	mov	r3, r5
 800778e:	4a80      	ldr	r2, [pc, #512]	; (8007990 <AT_ESP8266_ND+0x1360>)
 8007790:	4621      	mov	r1, r4
 8007792:	f006 fe51 	bl	800e438 <FT_String_ND>
 8007796:	4603      	mov	r3, r0
 8007798:	2b01      	cmp	r3, #1
 800779a:	f040 8341 	bne.w	8007e20 <AT_ESP8266_ND+0x17f0>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 800779e:	2322      	movs	r3, #34	; 0x22
 80077a0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80077a4:	e33c      	b.n	8007e20 <AT_ESP8266_ND+0x17f0>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 80077a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	220f      	movs	r2, #15
 80077b2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 80077b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80077c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80077d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80077e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80077ee:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80077f2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80077f6:	6812      	ldr	r2, [r2, #0]
 80077f8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80077fc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007800:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007804:	6809      	ldr	r1, [r1, #0]
 8007806:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800780a:	2600      	movs	r6, #0
 800780c:	9604      	str	r6, [sp, #16]
 800780e:	9103      	str	r1, [sp, #12]
 8007810:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007814:	9102      	str	r1, [sp, #8]
 8007816:	9201      	str	r2, [sp, #4]
 8007818:	9300      	str	r3, [sp, #0]
 800781a:	462b      	mov	r3, r5
 800781c:	4a5d      	ldr	r2, [pc, #372]	; (8007994 <AT_ESP8266_ND+0x1364>)
 800781e:	4621      	mov	r1, r4
 8007820:	f006 fe0a 	bl	800e438 <FT_String_ND>
 8007824:	4603      	mov	r3, r0
 8007826:	2b01      	cmp	r3, #1
 8007828:	d112      	bne.n	8007850 <AT_ESP8266_ND+0x1220>
				{
					 AT_decode=at_wifi_disconnect;
 800782a:	230a      	movs	r3, #10
 800782c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 8007830:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007834:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800783e:	1c5a      	adds	r2, r3, #1
 8007840:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007844:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 800784e:	e2e7      	b.n	8007e20 <AT_ESP8266_ND+0x17f0>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 8007850:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007854:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2209      	movs	r2, #9
 800785c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007860:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007864:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800786e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007872:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800787c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007880:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800788a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800788e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007898:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800789c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80078a0:	6812      	ldr	r2, [r2, #0]
 80078a2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80078a6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80078aa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80078ae:	6809      	ldr	r1, [r1, #0]
 80078b0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80078b4:	2600      	movs	r6, #0
 80078b6:	9604      	str	r6, [sp, #16]
 80078b8:	9103      	str	r1, [sp, #12]
 80078ba:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078be:	9102      	str	r1, [sp, #8]
 80078c0:	9201      	str	r2, [sp, #4]
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	462b      	mov	r3, r5
 80078c6:	4a34      	ldr	r2, [pc, #208]	; (8007998 <AT_ESP8266_ND+0x1368>)
 80078c8:	4621      	mov	r1, r4
 80078ca:	f006 fdb5 	bl	800e438 <FT_String_ND>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d112      	bne.n	80078fa <AT_ESP8266_ND+0x12ca>
				{
					AT_decode=at_tcp_client_desc;
 80078d4:	2319      	movs	r3, #25
 80078d6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 80078da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 80078f8:	e292      	b.n	8007e20 <AT_ESP8266_ND+0x17f0>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 80078fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2208      	movs	r2, #8
 8007906:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 800790a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800790e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007918:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800791c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007926:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800792a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007934:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007938:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007942:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007946:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800794a:	6812      	ldr	r2, [r2, #0]
 800794c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007950:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007954:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007958:	6809      	ldr	r1, [r1, #0]
 800795a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800795e:	2600      	movs	r6, #0
 8007960:	9604      	str	r6, [sp, #16]
 8007962:	9103      	str	r1, [sp, #12]
 8007964:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007968:	9102      	str	r1, [sp, #8]
 800796a:	9201      	str	r2, [sp, #4]
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	462b      	mov	r3, r5
 8007970:	4a0a      	ldr	r2, [pc, #40]	; (800799c <AT_ESP8266_ND+0x136c>)
 8007972:	4621      	mov	r1, r4
 8007974:	f006 fd60 	bl	800e438 <FT_String_ND>
 8007978:	4603      	mov	r3, r0
 800797a:	2b01      	cmp	r3, #1
 800797c:	d110      	bne.n	80079a0 <AT_ESP8266_ND+0x1370>
				{
					AT_decode=at_tcp_desconectado;
 800797e:	2310      	movs	r3, #16
 8007980:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007984:	e24c      	b.n	8007e20 <AT_ESP8266_ND+0x17f0>
 8007986:	bf00      	nop
 8007988:	080104b8 	.word	0x080104b8
 800798c:	08010464 	.word	0x08010464
 8007990:	080104c4 	.word	0x080104c4
 8007994:	080104cc 	.word	0x080104cc
 8007998:	080104dc 	.word	0x080104dc
 800799c:	08010480 	.word	0x08010480
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 80079a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80079ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80079bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f203 4594 	addw	r5, r3, #1172	; 0x494
 80079ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f603 46dc 	addw	r6, r3, #3292	; 0xcdc
 80079d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80079e6:	603b      	str	r3, [r7, #0]
 80079e8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80079ec:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80079f6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80079fa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80079fe:	6809      	ldr	r1, [r1, #0]
 8007a00:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a04:	2300      	movs	r3, #0
 8007a06:	9304      	str	r3, [sp, #16]
 8007a08:	9103      	str	r1, [sp, #12]
 8007a0a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a0e:	9102      	str	r1, [sp, #8]
 8007a10:	9201      	str	r2, [sp, #4]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	4633      	mov	r3, r6
 8007a18:	462a      	mov	r2, r5
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	f006 fd0c 	bl	800e438 <FT_String_ND>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d112      	bne.n	8007a4c <AT_ESP8266_ND+0x141c>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8007a26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 81f3 	beq.w	8007e20 <AT_ESP8266_ND+0x17f0>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8007a3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 8007a4a:	e1e9      	b.n	8007e20 <AT_ESP8266_ND+0x17f0>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007a4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	220d      	movs	r2, #13
 8007a58:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8007a5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007a6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007a78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007a86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a94:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a98:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a9c:	6812      	ldr	r2, [r2, #0]
 8007a9e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007aa2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007aa6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007aaa:	6809      	ldr	r1, [r1, #0]
 8007aac:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007ab0:	2600      	movs	r6, #0
 8007ab2:	9604      	str	r6, [sp, #16]
 8007ab4:	9103      	str	r1, [sp, #12]
 8007ab6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007aba:	9102      	str	r1, [sp, #8]
 8007abc:	9201      	str	r2, [sp, #4]
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	462b      	mov	r3, r5
 8007ac2:	4aaf      	ldr	r2, [pc, #700]	; (8007d80 <AT_ESP8266_ND+0x1750>)
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	f006 fcb7 	bl	800e438 <FT_String_ND>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d112      	bne.n	8007af6 <AT_ESP8266_ND+0x14c6>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8007ad0:	2312      	movs	r3, #18
 8007ad2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 8007ad6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ada:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8007ae4:	1c5a      	adds	r2, r3, #1
 8007ae6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8007af4:	e194      	b.n	8007e20 <AT_ESP8266_ND+0x17f0>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8007af6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007afa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	220d      	movs	r2, #13
 8007b02:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Obtiene IP
 8007b06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007b14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007b22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007b30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b3e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b42:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b46:	6812      	ldr	r2, [r2, #0]
 8007b48:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b4c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b50:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b54:	6809      	ldr	r1, [r1, #0]
 8007b56:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007b5a:	2600      	movs	r6, #0
 8007b5c:	9604      	str	r6, [sp, #16]
 8007b5e:	9103      	str	r1, [sp, #12]
 8007b60:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b64:	9102      	str	r1, [sp, #8]
 8007b66:	9201      	str	r2, [sp, #4]
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	462b      	mov	r3, r5
 8007b6c:	4a85      	ldr	r2, [pc, #532]	; (8007d84 <AT_ESP8266_ND+0x1754>)
 8007b6e:	4621      	mov	r1, r4
 8007b70:	f006 fc62 	bl	800e438 <FT_String_ND>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d112      	bne.n	8007ba0 <AT_ESP8266_ND+0x1570>
				{
					a->_debug_WF_GOTIP++;
 8007b7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 8007b98:	230c      	movs	r3, #12
 8007b9a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007b9e:	e13f      	b.n	8007e20 <AT_ESP8266_ND+0x17f0>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 8007ba0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ba4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	220e      	movs	r2, #14
 8007bac:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//WIFI CONECTADA
 8007bb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007bbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007bcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007bda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007be8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007bec:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007bf0:	6812      	ldr	r2, [r2, #0]
 8007bf2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007bf6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007bfa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007bfe:	6809      	ldr	r1, [r1, #0]
 8007c00:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007c04:	2600      	movs	r6, #0
 8007c06:	9604      	str	r6, [sp, #16]
 8007c08:	9103      	str	r1, [sp, #12]
 8007c0a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c0e:	9102      	str	r1, [sp, #8]
 8007c10:	9201      	str	r2, [sp, #4]
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	462b      	mov	r3, r5
 8007c16:	4a5c      	ldr	r2, [pc, #368]	; (8007d88 <AT_ESP8266_ND+0x1758>)
 8007c18:	4621      	mov	r1, r4
 8007c1a:	f006 fc0d 	bl	800e438 <FT_String_ND>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d112      	bne.n	8007c4a <AT_ESP8266_ND+0x161a>
				{
					a->_debug_WF_CNNCTD++;
 8007c24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8007c32:	1c5a      	adds	r2, r3, #1
 8007c34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 8007c42:	230b      	movs	r3, #11
 8007c44:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007c48:	e0ea      	b.n	8007e20 <AT_ESP8266_ND+0x17f0>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 8007c4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	220a      	movs	r2, #10
 8007c56:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007c5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007c68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007c76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007c84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007c92:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c96:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c9a:	6812      	ldr	r2, [r2, #0]
 8007c9c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ca0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007ca4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007ca8:	6809      	ldr	r1, [r1, #0]
 8007caa:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007cae:	2600      	movs	r6, #0
 8007cb0:	9604      	str	r6, [sp, #16]
 8007cb2:	9103      	str	r1, [sp, #12]
 8007cb4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007cb8:	9102      	str	r1, [sp, #8]
 8007cba:	9201      	str	r2, [sp, #4]
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	462b      	mov	r3, r5
 8007cc0:	4a32      	ldr	r2, [pc, #200]	; (8007d8c <AT_ESP8266_ND+0x175c>)
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	f006 fbb8 	bl	800e438 <FT_String_ND>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d112      	bne.n	8007cf4 <AT_ESP8266_ND+0x16c4>
				  {
					  AT_decode=at_tcp_client_conectado;
 8007cce:	2318      	movs	r3, #24
 8007cd0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8007cd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8007ce2:	1c5a      	adds	r2, r3, #1
 8007ce4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ce8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8007cf2:	e095      	b.n	8007e20 <AT_ESP8266_ND+0x17f0>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8007cf4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cf8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2208      	movs	r2, #8
 8007d00:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007d04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007d12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007d20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007d2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007d3c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d40:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d44:	6812      	ldr	r2, [r2, #0]
 8007d46:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007d4a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d4e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d52:	6809      	ldr	r1, [r1, #0]
 8007d54:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007d58:	2600      	movs	r6, #0
 8007d5a:	9604      	str	r6, [sp, #16]
 8007d5c:	9103      	str	r1, [sp, #12]
 8007d5e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d62:	9102      	str	r1, [sp, #8]
 8007d64:	9201      	str	r2, [sp, #4]
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	462b      	mov	r3, r5
 8007d6a:	4a09      	ldr	r2, [pc, #36]	; (8007d90 <AT_ESP8266_ND+0x1760>)
 8007d6c:	4621      	mov	r1, r4
 8007d6e:	f006 fb63 	bl	800e438 <FT_String_ND>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d10d      	bne.n	8007d94 <AT_ESP8266_ND+0x1764>
				{
					AT_decode=at_fail;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007d7e:	e04f      	b.n	8007e20 <AT_ESP8266_ND+0x17f0>
 8007d80:	080104e8 	.word	0x080104e8
 8007d84:	080104f8 	.word	0x080104f8
 8007d88:	08010508 	.word	0x08010508
 8007d8c:	08010518 	.word	0x08010518
 8007d90:	08010524 	.word	0x08010524
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 8007d94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2209      	movs	r2, #9
 8007da0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007da4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007da8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007db2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007db6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007dc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007dce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007ddc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007de0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007de4:	6812      	ldr	r2, [r2, #0]
 8007de6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007dea:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007dee:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007df2:	6809      	ldr	r1, [r1, #0]
 8007df4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007df8:	2600      	movs	r6, #0
 8007dfa:	9604      	str	r6, [sp, #16]
 8007dfc:	9103      	str	r1, [sp, #12]
 8007dfe:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e02:	9102      	str	r1, [sp, #8]
 8007e04:	9201      	str	r2, [sp, #4]
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	462b      	mov	r3, r5
 8007e0a:	4a77      	ldr	r2, [pc, #476]	; (8007fe8 <AT_ESP8266_ND+0x19b8>)
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	f006 fb13 	bl	800e438 <FT_String_ND>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d103      	bne.n	8007e20 <AT_ESP8266_ND+0x17f0>
					{
					AT_decode=at_busy_p;
 8007e18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e1c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 8007e20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	f201 84c6 	bhi.w	80097c2 <AT_ESP8266_ND+0x3192>
 8007e36:	a201      	add	r2, pc, #4	; (adr r2, 8007e3c <AT_ESP8266_ND+0x180c>)
 8007e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3c:	08007e61 	.word	0x08007e61
 8007e40:	08007ff1 	.word	0x08007ff1
 8007e44:	08008273 	.word	0x08008273
 8007e48:	080083f1 	.word	0x080083f1
 8007e4c:	080085c9 	.word	0x080085c9
 8007e50:	0800889d 	.word	0x0800889d
 8007e54:	08008b55 	.word	0x08008b55
 8007e58:	0800906d 	.word	0x0800906d
 8007e5c:	08009243 	.word	0x08009243
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007e60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8007e70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d14f      	bne.n	8007f22 <AT_ESP8266_ND+0x18f2>
 8007e82:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d04b      	beq.n	8007f22 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_error)
 8007e8a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d047      	beq.n	8007f22 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_restart)
 8007e92:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007e96:	2b04      	cmp	r3, #4
 8007e98:	d043      	beq.n	8007f22 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_tcp_enviado_ok))
 8007e9a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007e9e:	2b13      	cmp	r3, #19
 8007ea0:	d03f      	beq.n	8007f22 <AT_ESP8266_ND+0x18f2>
						{
						a->_pasos=0;
 8007ea2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ea6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8007eb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 8007ec2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ec6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f7f8 f98f 	bl	80001f4 <strlen>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	4423      	add	r3, r4
 8007eda:	4a44      	ldr	r2, [pc, #272]	; (8007fec <AT_ESP8266_ND+0x19bc>)
 8007edc:	461c      	mov	r4, r3
 8007ede:	4613      	mov	r3, r2
 8007ee0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007ee2:	6020      	str	r0, [r4, #0]
 8007ee4:	6061      	str	r1, [r4, #4]
 8007ee6:	60a2      	str	r2, [r4, #8]
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8007eec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ef0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7f8 f97a 	bl	80001f4 <strlen>
 8007f00:	4603      	mov	r3, r0
 8007f02:	461a      	mov	r2, r3
 8007f04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 8007f12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2264      	movs	r2, #100	; 0x64
 8007f1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 8007f22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007f30:	1c5a      	adds	r2, r3, #1
 8007f32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 8007f40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d11b      	bne.n	8007f8a <AT_ESP8266_ND+0x195a>
 8007f52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d023      	beq.n	8007fa2 <AT_ESP8266_ND+0x1972>
 8007f5a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f5e:	2b1c      	cmp	r3, #28
 8007f60:	d01f      	beq.n	8007fa2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_error)
 8007f62:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d01b      	beq.n	8007fa2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_restart)
 8007f6a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f6e:	2b04      	cmp	r3, #4
 8007f70:	d017      	beq.n	8007fa2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_connected)
 8007f72:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f76:	2b0b      	cmp	r3, #11
 8007f78:	d013      	beq.n	8007fa2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_gotip)
 8007f7a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f7e:	2b0c      	cmp	r3, #12
 8007f80:	d00f      	beq.n	8007fa2 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_tcp_enviado_ok)))
 8007f82:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f86:	2b13      	cmp	r3, #19
 8007f88:	d00b      	beq.n	8007fa2 <AT_ESP8266_ND+0x1972>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 8007f8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8007f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	f341 841a 	ble.w	80097d6 <AT_ESP8266_ND+0x31a6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007fa2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fa6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007fb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8007fb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8007fc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8007fd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 8007fe4:	f001 bbf7 	b.w	80097d6 <AT_ESP8266_ND+0x31a6>
 8007fe8:	08010530 	.word	0x08010530
 8007fec:	0801053c 	.word	0x0801053c
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007ff0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ff4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008000:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008004:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800800e:	2b01      	cmp	r3, #1
 8008010:	f040 80c8 	bne.w	80081a4 <AT_ESP8266_ND+0x1b74>
 8008014:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008018:	2b01      	cmp	r3, #1
 800801a:	f000 80c3 	beq.w	80081a4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_error)
 800801e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008022:	2b02      	cmp	r3, #2
 8008024:	f000 80be 	beq.w	80081a4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_fail)
 8008028:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800802c:	2b03      	cmp	r3, #3
 800802e:	f000 80b9 	beq.w	80081a4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_restart)
 8008032:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008036:	2b04      	cmp	r3, #4
 8008038:	f000 80b4 	beq.w	80081a4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_disconnect)
 800803c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008040:	2b0a      	cmp	r3, #10
 8008042:	f000 80af 	beq.w	80081a4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_connected)
 8008046:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800804a:	2b0b      	cmp	r3, #11
 800804c:	f000 80aa 	beq.w	80081a4 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_gotip))
 8008050:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008054:	2b0c      	cmp	r3, #12
 8008056:	f000 80a5 	beq.w	80081a4 <AT_ESP8266_ND+0x1b74>
						{
						a->_pasos=0;
 800805a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800805e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2200      	movs	r2, #0
 8008066:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800806a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800806e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2201      	movs	r2, #1
 8008076:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 800807a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800807e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008088:	4620      	mov	r0, r4
 800808a:	f7f8 f8b3 	bl	80001f4 <strlen>
 800808e:	4603      	mov	r3, r0
 8008090:	4423      	add	r3, r4
 8008092:	49d5      	ldr	r1, [pc, #852]	; (80083e8 <AT_ESP8266_ND+0x1db8>)
 8008094:	461a      	mov	r2, r3
 8008096:	460b      	mov	r3, r1
 8008098:	cb03      	ldmia	r3!, {r0, r1}
 800809a:	6010      	str	r0, [r2, #0]
 800809c:	6051      	str	r1, [r2, #4]
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 80080a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80080b0:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80080b4:	2201      	movs	r2, #1
 80080b6:	4618      	mov	r0, r3
 80080b8:	f006 ff1b 	bl	800eef2 <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 80080bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80080ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	1d9d      	adds	r5, r3, #6
 80080d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	3306      	adds	r3, #6
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7f8 f886 	bl	80001f4 <strlen>
 80080e8:	4603      	mov	r3, r0
 80080ea:	461a      	mov	r2, r3
 80080ec:	4629      	mov	r1, r5
 80080ee:	4620      	mov	r0, r4
 80080f0:	f006 feff 	bl	800eef2 <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 80080f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008102:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008106:	4618      	mov	r0, r3
 8008108:	f7f8 f874 	bl	80001f4 <strlen>
 800810c:	4602      	mov	r2, r0
 800810e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008112:	4619      	mov	r1, r3
 8008114:	4620      	mov	r0, r4
 8008116:	f006 feec 	bl	800eef2 <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 800811a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800811e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008128:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800812c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8008136:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800813a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3326      	adds	r3, #38	; 0x26
 8008142:	4618      	mov	r0, r3
 8008144:	f7f8 f856 	bl	80001f4 <strlen>
 8008148:	4603      	mov	r3, r0
 800814a:	461a      	mov	r2, r3
 800814c:	4629      	mov	r1, r5
 800814e:	4620      	mov	r0, r4
 8008150:	f006 fecf 	bl	800eef2 <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 8008154:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008158:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008162:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8008166:	2203      	movs	r2, #3
 8008168:	4618      	mov	r0, r3
 800816a:	f006 fec2 	bl	800eef2 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 800816e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008172:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800817c:	4618      	mov	r0, r3
 800817e:	f7f8 f839 	bl	80001f4 <strlen>
 8008182:	4603      	mov	r3, r0
 8008184:	461a      	mov	r2, r3
 8008186:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800818a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 8008194:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008198:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	22c8      	movs	r2, #200	; 0xc8
 80081a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 80081a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 80081c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d11b      	bne.n	800820c <AT_ESP8266_ND+0x1bdc>
 80081d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d023      	beq.n	8008224 <AT_ESP8266_ND+0x1bf4>
 80081dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d01f      	beq.n	8008224 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_fail)
 80081e4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d01b      	beq.n	8008224 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_restart)
 80081ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081f0:	2b04      	cmp	r3, #4
 80081f2:	d017      	beq.n	8008224 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_disconnect)
 80081f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081f8:	2b0a      	cmp	r3, #10
 80081fa:	d013      	beq.n	8008224 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_connected)
 80081fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008200:	2b0b      	cmp	r3, #11
 8008202:	d00f      	beq.n	8008224 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_gotip)))
 8008204:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008208:	2b0c      	cmp	r3, #12
 800820a:	d00b      	beq.n	8008224 <AT_ESP8266_ND+0x1bf4>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 800820c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008210:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 800821a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800821e:	4293      	cmp	r3, r2
 8008220:	f341 82db 	ble.w	80097da <AT_ESP8266_ND+0x31aa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008224:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008228:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 8008236:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800823a:	2b0a      	cmp	r3, #10
 800823c:	d00f      	beq.n	800825e <AT_ESP8266_ND+0x1c2e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 800823e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008242:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2200      	movs	r2, #0
 800824a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 800824e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008252:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2200      	movs	r2, #0
 800825a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 800825e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008262:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2200      	movs	r2, #0
 800826a:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 800826e:	f001 bab4 	b.w	80097da <AT_ESP8266_ND+0x31aa>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008272:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008276:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 8008282:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008286:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008290:	2b01      	cmp	r3, #1
 8008292:	d14d      	bne.n	8008330 <AT_ESP8266_ND+0x1d00>
 8008294:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008298:	2b04      	cmp	r3, #4
 800829a:	d049      	beq.n	8008330 <AT_ESP8266_ND+0x1d00>
 800829c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082a0:	2b0a      	cmp	r3, #10
 80082a2:	d045      	beq.n	8008330 <AT_ESP8266_ND+0x1d00>
 80082a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082a8:	2b0d      	cmp	r3, #13
 80082aa:	d041      	beq.n	8008330 <AT_ESP8266_ND+0x1d00>
						{
						a->_pasos=0;
 80082ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80082bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"));
 80082cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80082da:	4620      	mov	r0, r4
 80082dc:	f7f7 ff8a 	bl	80001f4 <strlen>
 80082e0:	4603      	mov	r3, r0
 80082e2:	4423      	add	r3, r4
 80082e4:	4941      	ldr	r1, [pc, #260]	; (80083ec <AT_ESP8266_ND+0x1dbc>)
 80082e6:	461a      	mov	r2, r3
 80082e8:	460b      	mov	r3, r1
 80082ea:	cb03      	ldmia	r3!, {r0, r1}
 80082ec:	6010      	str	r0, [r2, #0]
 80082ee:	6051      	str	r1, [r2, #4]
 80082f0:	8819      	ldrh	r1, [r3, #0]
 80082f2:	789b      	ldrb	r3, [r3, #2]
 80082f4:	8111      	strh	r1, [r2, #8]
 80082f6:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 80082f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008306:	4618      	mov	r0, r3
 8008308:	f7f7 ff74 	bl	80001f4 <strlen>
 800830c:	4603      	mov	r3, r0
 800830e:	461a      	mov	r2, r3
 8008310:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008314:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 800831e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008322:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800832c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008330:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008334:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008344:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 800834e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008352:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800835c:	2b00      	cmp	r3, #0
 800835e:	d113      	bne.n	8008388 <AT_ESP8266_ND+0x1d58>
 8008360:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008364:	2b0a      	cmp	r3, #10
 8008366:	d01b      	beq.n	80083a0 <AT_ESP8266_ND+0x1d70>
 8008368:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800836c:	2b0b      	cmp	r3, #11
 800836e:	d017      	beq.n	80083a0 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_wifi_gotip)
 8008370:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008374:	2b0c      	cmp	r3, #12
 8008376:	d013      	beq.n	80083a0 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_restart	)
 8008378:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800837c:	2b04      	cmp	r3, #4
 800837e:	d00f      	beq.n	80083a0 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_deconectar_ok )))
 8008380:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008384:	2b0d      	cmp	r3, #13
 8008386:	d00b      	beq.n	80083a0 <AT_ESP8266_ND+0x1d70>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008388:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800838c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008396:	f241 3288 	movw	r2, #5000	; 0x1388
 800839a:	4293      	cmp	r3, r2
 800839c:	f341 821f 	ble.w	80097de <AT_ESP8266_ND+0x31ae>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80083a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80083ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80083b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2200      	movs	r2, #0
 80083be:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80083c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80083d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2200      	movs	r2, #0
 80083de:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 80083e2:	f001 b9fc 	b.w	80097de <AT_ESP8266_ND+0x31ae>
 80083e6:	bf00      	nop
 80083e8:	0801054c 	.word	0x0801054c
 80083ec:	08010558 	.word	0x08010558
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80083f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 8008400:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008404:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800840e:	2b01      	cmp	r3, #1
 8008410:	d16b      	bne.n	80084ea <AT_ESP8266_ND+0x1eba>
 8008412:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008416:	2b04      	cmp	r3, #4
 8008418:	d067      	beq.n	80084ea <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_ok)
 800841a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800841e:	2b01      	cmp	r3, #1
 8008420:	d063      	beq.n	80084ea <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_error))
 8008422:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008426:	2b02      	cmp	r3, #2
 8008428:	d05f      	beq.n	80084ea <AT_ESP8266_ND+0x1eba>
						{
						a->_pasos=0;
 800842a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800842e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2200      	movs	r2, #0
 8008436:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800843a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800843e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2201      	movs	r2, #1
 8008446:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 800844a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800844e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008458:	2b01      	cmp	r3, #1
 800845a:	d115      	bne.n	8008488 <AT_ESP8266_ND+0x1e58>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 800845c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008460:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800846a:	4620      	mov	r0, r4
 800846c:	f7f7 fec2 	bl	80001f4 <strlen>
 8008470:	4603      	mov	r3, r0
 8008472:	4423      	add	r3, r4
 8008474:	4a52      	ldr	r2, [pc, #328]	; (80085c0 <AT_ESP8266_ND+0x1f90>)
 8008476:	461c      	mov	r4, r3
 8008478:	4613      	mov	r3, r2
 800847a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800847c:	6020      	str	r0, [r4, #0]
 800847e:	6061      	str	r1, [r4, #4]
 8008480:	60a2      	str	r2, [r4, #8]
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	81a3      	strh	r3, [r4, #12]
 8008486:	e014      	b.n	80084b2 <AT_ESP8266_ND+0x1e82>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8008488:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800848c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008496:	4620      	mov	r0, r4
 8008498:	f7f7 feac 	bl	80001f4 <strlen>
 800849c:	4603      	mov	r3, r0
 800849e:	4423      	add	r3, r4
 80084a0:	4a48      	ldr	r2, [pc, #288]	; (80085c4 <AT_ESP8266_ND+0x1f94>)
 80084a2:	461c      	mov	r4, r3
 80084a4:	4613      	mov	r3, r2
 80084a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80084a8:	6020      	str	r0, [r4, #0]
 80084aa:	6061      	str	r1, [r4, #4]
 80084ac:	60a2      	str	r2, [r4, #8]
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 80084b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7f7 fe97 	bl	80001f4 <strlen>
 80084c6:	4603      	mov	r3, r0
 80084c8:	461a      	mov	r2, r3
 80084ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 80084d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80084e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 80084ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80084f8:	1c5a      	adds	r2, r3, #1
 80084fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008508:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800850c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008516:	2b00      	cmp	r3, #0
 8008518:	d123      	bne.n	8008562 <AT_ESP8266_ND+0x1f32>
 800851a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800851e:	2b01      	cmp	r3, #1
 8008520:	d02b      	beq.n	800857a <AT_ESP8266_ND+0x1f4a>
 8008522:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008526:	2b0b      	cmp	r3, #11
 8008528:	d027      	beq.n	800857a <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_wifi_gotip)
 800852a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800852e:	2b0c      	cmp	r3, #12
 8008530:	d023      	beq.n	800857a <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_restart)
 8008532:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008536:	2b04      	cmp	r3, #4
 8008538:	d01f      	beq.n	800857a <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_error)
 800853a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800853e:	2b02      	cmp	r3, #2
 8008540:	d01b      	beq.n	800857a <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_ok)
 8008542:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008546:	2b07      	cmp	r3, #7
 8008548:	d017      	beq.n	800857a <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_ok)
 800854a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800854e:	2b08      	cmp	r3, #8
 8008550:	d013      	beq.n	800857a <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_err)
 8008552:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008556:	2b1e      	cmp	r3, #30
 8008558:	d00f      	beq.n	800857a <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_err)))
 800855a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800855e:	2b1f      	cmp	r3, #31
 8008560:	d00b      	beq.n	800857a <AT_ESP8266_ND+0x1f4a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008562:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008566:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008570:	f241 3288 	movw	r2, #5000	; 0x1388
 8008574:	4293      	cmp	r3, r2
 8008576:	f341 8134 	ble.w	80097e2 <AT_ESP8266_ND+0x31b2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800857a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800857e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 800858c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008590:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2200      	movs	r2, #0
 8008598:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 800859c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80085ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 80085bc:	f001 b911 	b.w	80097e2 <AT_ESP8266_ND+0x31b2>
 80085c0:	08010564 	.word	0x08010564
 80085c4:	08010574 	.word	0x08010574
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80085c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 80085d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	f040 80f3 	bne.w	80087d2 <AT_ESP8266_ND+0x21a2>
 80085ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085f0:	2b04      	cmp	r3, #4
 80085f2:	f000 80ee 	beq.w	80087d2 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_ok)
 80085f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	f000 80e9 	beq.w	80087d2 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_error)
 8008600:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008604:	2b02      	cmp	r3, #2
 8008606:	f000 80e4 	beq.w	80087d2 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_err)
 800860a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800860e:	2b21      	cmp	r3, #33	; 0x21
 8008610:	f000 80df 	beq.w	80087d2 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_ok))
 8008614:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008618:	2b1b      	cmp	r3, #27
 800861a:	f000 80da 	beq.w	80087d2 <AT_ESP8266_ND+0x21a2>
						{
						a->_pasos=0;
 800861e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008622:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2200      	movs	r2, #0
 800862a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800862e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008632:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2201      	movs	r2, #1
 800863a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 800863e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008642:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800864c:	4620      	mov	r0, r4
 800864e:	f7f7 fdd1 	bl	80001f4 <strlen>
 8008652:	4603      	mov	r3, r0
 8008654:	4423      	add	r3, r4
 8008656:	4990      	ldr	r1, [pc, #576]	; (8008898 <AT_ESP8266_ND+0x2268>)
 8008658:	461a      	mov	r2, r3
 800865a:	460b      	mov	r3, r1
 800865c:	cb03      	ldmia	r3!, {r0, r1}
 800865e:	6010      	str	r0, [r2, #0]
 8008660:	6051      	str	r1, [r2, #4]
 8008662:	8819      	ldrh	r1, [r3, #0]
 8008664:	789b      	ldrb	r3, [r3, #2]
 8008666:	8111      	strh	r1, [r2, #8]
 8008668:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 800866a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800866e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008678:	f207 212f 	addw	r1, r7, #559	; 0x22f
 800867c:	2201      	movs	r2, #1
 800867e:	4618      	mov	r0, r3
 8008680:	f006 fc37 	bl	800eef2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008684:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008688:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008692:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008696:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 80086a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	334c      	adds	r3, #76	; 0x4c
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7f7 fda1 	bl	80001f4 <strlen>
 80086b2:	4603      	mov	r3, r0
 80086b4:	461a      	mov	r2, r3
 80086b6:	4629      	mov	r1, r5
 80086b8:	4620      	mov	r0, r4
 80086ba:	f006 fc1a 	bl	800eef2 <strncat>
						strncat(a->_uart2snd,separador,3);
 80086be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80086cc:	f507 710a 	add.w	r1, r7, #552	; 0x228
 80086d0:	2203      	movs	r2, #3
 80086d2:	4618      	mov	r0, r3
 80086d4:	f006 fc0d 	bl	800eef2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 80086d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80086e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f103 0562 	add.w	r5, r3, #98	; 0x62
 80086f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3362      	adds	r3, #98	; 0x62
 8008700:	4618      	mov	r0, r3
 8008702:	f7f7 fd77 	bl	80001f4 <strlen>
 8008706:	4603      	mov	r3, r0
 8008708:	461a      	mov	r2, r3
 800870a:	4629      	mov	r1, r5
 800870c:	4620      	mov	r0, r4
 800870e:	f006 fbf0 	bl	800eef2 <strncat>
						strncat(a->_uart2snd,separador,3);
 8008712:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008716:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008720:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008724:	2203      	movs	r2, #3
 8008726:	4618      	mov	r0, r3
 8008728:	f006 fbe3 	bl	800eef2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 800872c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008730:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800873a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800873e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8008748:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800874c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3372      	adds	r3, #114	; 0x72
 8008754:	4618      	mov	r0, r3
 8008756:	f7f7 fd4d 	bl	80001f4 <strlen>
 800875a:	4603      	mov	r3, r0
 800875c:	461a      	mov	r2, r3
 800875e:	4629      	mov	r1, r5
 8008760:	4620      	mov	r0, r4
 8008762:	f006 fbc6 	bl	800eef2 <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008766:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800876a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008774:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008778:	2201      	movs	r2, #1
 800877a:	4618      	mov	r0, r3
 800877c:	f006 fbb9 	bl	800eef2 <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008780:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008784:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800878e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008792:	2202      	movs	r2, #2
 8008794:	4618      	mov	r0, r3
 8008796:	f006 fbac 	bl	800eef2 <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 800879a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800879e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7f7 fd23 	bl	80001f4 <strlen>
 80087ae:	4603      	mov	r3, r0
 80087b0:	461a      	mov	r2, r3
 80087b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 80087c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80087ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 80087d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 80087f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d11b      	bne.n	800883a <AT_ESP8266_ND+0x220a>
 8008802:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008806:	2b01      	cmp	r3, #1
 8008808:	d023      	beq.n	8008852 <AT_ESP8266_ND+0x2222>
 800880a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800880e:	2b0b      	cmp	r3, #11
 8008810:	d01f      	beq.n	8008852 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_wifi_gotip)
 8008812:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008816:	2b0c      	cmp	r3, #12
 8008818:	d01b      	beq.n	8008852 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_restart)
 800881a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800881e:	2b04      	cmp	r3, #4
 8008820:	d017      	beq.n	8008852 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_error)
 8008822:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008826:	2b02      	cmp	r3, #2
 8008828:	d013      	beq.n	8008852 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_err)
 800882a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800882e:	2b21      	cmp	r3, #33	; 0x21
 8008830:	d00f      	beq.n	8008852 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_ok)))
 8008832:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008836:	2b1b      	cmp	r3, #27
 8008838:	d00b      	beq.n	8008852 <AT_ESP8266_ND+0x2222>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 800883a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800883e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008848:	f241 3288 	movw	r2, #5000	; 0x1388
 800884c:	4293      	cmp	r3, r2
 800884e:	f340 87ca 	ble.w	80097e6 <AT_ESP8266_ND+0x31b6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008852:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008856:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008864:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008868:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2200      	movs	r2, #0
 8008870:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008874:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008878:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2200      	movs	r2, #0
 8008880:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008884:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008888:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2200      	movs	r2, #0
 8008890:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008894:	f000 bfa7 	b.w	80097e6 <AT_ESP8266_ND+0x31b6>
 8008898:	08010464 	.word	0x08010464
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800889c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 80088ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	f040 80e2 	bne.w	8008a84 <AT_ESP8266_ND+0x2454>
 80088c0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088c4:	2b0b      	cmp	r3, #11
 80088c6:	f000 80dd 	beq.w	8008a84 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_wifi_gotip)
 80088ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088ce:	2b0c      	cmp	r3, #12
 80088d0:	f000 80d8 	beq.w	8008a84 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 80088d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088d8:	2b0e      	cmp	r3, #14
 80088da:	f000 80d3 	beq.w	8008a84 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_conectado)
 80088de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088e2:	2b0f      	cmp	r3, #15
 80088e4:	f000 80ce 	beq.w	8008a84 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_desconectado)
 80088e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088ec:	2b10      	cmp	r3, #16
 80088ee:	f000 80c9 	beq.w	8008a84 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_error))
 80088f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	f000 80c4 	beq.w	8008a84 <AT_ESP8266_ND+0x2454>
						{
						a->_pasos=0;
 80088fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008900:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2200      	movs	r2, #0
 8008908:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800890c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008910:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2201      	movs	r2, #1
 8008918:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 800891c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008920:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800892a:	4620      	mov	r0, r4
 800892c:	f7f7 fc62 	bl	80001f4 <strlen>
 8008930:	4603      	mov	r3, r0
 8008932:	4423      	add	r3, r4
 8008934:	4aa1      	ldr	r2, [pc, #644]	; (8008bbc <AT_ESP8266_ND+0x258c>)
 8008936:	461c      	mov	r4, r3
 8008938:	4613      	mov	r3, r2
 800893a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800893c:	6020      	str	r0, [r4, #0]
 800893e:	6061      	str	r1, [r4, #4]
 8008940:	60a2      	str	r2, [r4, #8]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008946:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800894a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008954:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008958:	2201      	movs	r2, #1
 800895a:	4618      	mov	r0, r3
 800895c:	f006 fac9 	bl	800eef2 <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008960:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008964:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800896e:	4620      	mov	r0, r4
 8008970:	f7f7 fc40 	bl	80001f4 <strlen>
 8008974:	4603      	mov	r3, r0
 8008976:	4423      	add	r3, r4
 8008978:	4a91      	ldr	r2, [pc, #580]	; (8008bc0 <AT_ESP8266_ND+0x2590>)
 800897a:	6810      	ldr	r0, [r2, #0]
 800897c:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 800897e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008982:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800898c:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008990:	2203      	movs	r2, #3
 8008992:	4618      	mov	r0, r3
 8008994:	f006 faad 	bl	800eef2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008998:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800899c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80089a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f103 0536 	add.w	r5, r3, #54	; 0x36
 80089b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3336      	adds	r3, #54	; 0x36
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7f7 fc17 	bl	80001f4 <strlen>
 80089c6:	4603      	mov	r3, r0
 80089c8:	461a      	mov	r2, r3
 80089ca:	4629      	mov	r1, r5
 80089cc:	4620      	mov	r0, r4
 80089ce:	f006 fa90 	bl	800eef2 <strncat>
						strncat(a->_uart2snd,separador2,2);
 80089d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80089e0:	f507 7108 	add.w	r1, r7, #544	; 0x220
 80089e4:	2202      	movs	r2, #2
 80089e6:	4618      	mov	r0, r3
 80089e8:	f006 fa83 	bl	800eef2 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 80089ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80089fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8008a08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	3346      	adds	r3, #70	; 0x46
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7f7 fbed 	bl	80001f4 <strlen>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	4629      	mov	r1, r5
 8008a20:	4620      	mov	r0, r4
 8008a22:	f006 fa66 	bl	800eef2 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008a26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008a34:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7f7 fbdb 	bl	80001f4 <strlen>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008a44:	4619      	mov	r1, r3
 8008a46:	4620      	mov	r0, r4
 8008a48:	f006 fa53 	bl	800eef2 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008a4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7f7 fbca 	bl	80001f4 <strlen>
 8008a60:	4603      	mov	r3, r0
 8008a62:	461a      	mov	r2, r3
 8008a64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 8008a72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008a80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8008a84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008aa2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aa6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d120      	bne.n	8008af6 <AT_ESP8266_ND+0x24c6>
 8008ab4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ab8:	2b0a      	cmp	r3, #10
 8008aba:	d028      	beq.n	8008b0e <AT_ESP8266_ND+0x24de>
 8008abc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ac0:	2b0b      	cmp	r3, #11
 8008ac2:	d024      	beq.n	8008b0e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_wifi_gotip)
 8008ac4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ac8:	2b0c      	cmp	r3, #12
 8008aca:	d020      	beq.n	8008b0e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8008acc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ad0:	2b0e      	cmp	r3, #14
 8008ad2:	d01c      	beq.n	8008b0e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_conectado)
 8008ad4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ad8:	2b0f      	cmp	r3, #15
 8008ada:	d018      	beq.n	8008b0e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_desconectado)
 8008adc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ae0:	2b10      	cmp	r3, #16
 8008ae2:	d014      	beq.n	8008b0e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_error)
 8008ae4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d010      	beq.n	8008b0e <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_busy_p)))
 8008aec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008af4:	d00b      	beq.n	8008b0e <AT_ESP8266_ND+0x24de>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008af6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008afa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	f340 866e 	ble.w	80097ea <AT_ESP8266_ND+0x31ba>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008b0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008b20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008b30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008b40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008b50:	f000 be4b 	b.w	80097ea <AT_ESP8266_ND+0x31ba>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8008b54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b58:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	601a      	str	r2, [r3, #0]
 8008b60:	2200      	movs	r2, #0
 8008b62:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8008b64:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b68:	2b10      	cmp	r3, #16
 8008b6a:	d003      	beq.n	8008b74 <AT_ESP8266_ND+0x2544>
 8008b6c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b70:	2b0a      	cmp	r3, #10
 8008b72:	d127      	bne.n	8008bc4 <AT_ESP8266_ND+0x2594>
				{
					a->_estado=AT_decode;
 8008b74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8008b86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8008b96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8008ba6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008baa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008bb6:	f000 be1a 	b.w	80097ee <AT_ESP8266_ND+0x31be>
 8008bba:	bf00      	nop
 8008bbc:	08010584 	.word	0x08010584
 8008bc0:	08010594 	.word	0x08010594
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008bc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	f040 80d1 	bne.w	8008d7a <AT_ESP8266_ND+0x274a>
 8008bd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f040 80c7 	bne.w	8008d7a <AT_ESP8266_ND+0x274a>
										a->_ejecucion=1;
 8008bec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8008bfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2218      	movs	r2, #24
 8008c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008c0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8008c1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8008c3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8008c4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 8008c5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f7f7 fac3 	bl	80001f4 <strlen>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	4423      	add	r3, r4
 8008c72:	4abe      	ldr	r2, [pc, #760]	; (8008f6c <AT_ESP8266_ND+0x293c>)
 8008c74:	461c      	mov	r4, r3
 8008c76:	4613      	mov	r3, r2
 8008c78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c7a:	6020      	str	r0, [r4, #0]
 8008c7c:	6061      	str	r1, [r4, #4]
 8008c7e:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8008c80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8008c8e:	f107 0214 	add.w	r2, r7, #20
 8008c92:	4611      	mov	r1, r2
 8008c94:	4618      	mov	r0, r3
 8008c96:	f005 ff01 	bl	800ea9c <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8008c9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008ca8:	f107 0314 	add.w	r3, r7, #20
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7f7 faa1 	bl	80001f4 <strlen>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	f107 0314 	add.w	r3, r7, #20
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f006 f919 	bl	800eef2 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008cc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8008cce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008cdc:	4619      	mov	r1, r3
 8008cde:	4610      	mov	r0, r2
 8008ce0:	f006 f9e8 	bl	800f0b4 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008ce4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ce8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008cf2:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008cf6:	2202      	movs	r2, #2
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f006 f8fa 	bl	800eef2 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8008cfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7f7 fa71 	bl	80001f4 <strlen>
 8008d12:	4603      	mov	r3, r0
 8008d14:	461a      	mov	r2, r3
 8008d16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8008d24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8008d32:	4620      	mov	r0, r4
 8008d34:	f7f7 fa5e 	bl	80001f4 <strlen>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	4423      	add	r3, r4
 8008d3c:	4a8c      	ldr	r2, [pc, #560]	; (8008f70 <AT_ESP8266_ND+0x2940>)
 8008d3e:	461c      	mov	r4, r3
 8008d40:	4613      	mov	r3, r2
 8008d42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d44:	6020      	str	r0, [r4, #0]
 8008d46:	6061      	str	r1, [r4, #4]
 8008d48:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8008d4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8008d58:	1c5a      	adds	r2, r3, #1
 8008d5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 8008d68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8008d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8008d7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008d88:	1c5a      	adds	r2, r3, #1
 8008d8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 8008d98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f040 80a6 	bne.w	8008ef8 <AT_ESP8266_ND+0x28c8>
 8008dac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008db0:	2b13      	cmp	r3, #19
 8008db2:	f000 80a1 	beq.w	8008ef8 <AT_ESP8266_ND+0x28c8>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 8008db6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8008dc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	4610      	mov	r0, r2
 8008dd6:	f7f7 fa03 	bl	80001e0 <strcmp>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d01b      	beq.n	8008e18 <AT_ESP8266_ND+0x27e8>
 8008de0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d017      	beq.n	8008e18 <AT_ESP8266_ND+0x27e8>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 8008de8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dec:	2b14      	cmp	r3, #20
 8008dee:	d013      	beq.n	8008e18 <AT_ESP8266_ND+0x27e8>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8008df0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008df4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e02:	4293      	cmp	r3, r2
 8008e04:	dd78      	ble.n	8008ef8 <AT_ESP8266_ND+0x28c8>
 8008e06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d16f      	bne.n	8008ef8 <AT_ESP8266_ND+0x28c8>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8008e18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	dd0e      	ble.n	8008e4c <AT_ESP8266_ND+0x281c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8008e2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8008e3c:	1c5a      	adds	r2, r3, #1
 8008e3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8008e4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8008e5a:	1c5a      	adds	r2, r3, #1
 8008e5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8008e6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008e78:	1c5a      	adds	r2, r3, #1
 8008e7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8008e88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8008e98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8008ea6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eaa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8008eb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8008ec2:	2361      	movs	r3, #97	; 0x61
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	f005 fe1c 	bl	800eb04 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8008ecc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ed0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8008eda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ede:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8008ee8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 8008ef8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008efc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f06:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8008f0a:	f040 8470 	bne.w	80097ee <AT_ESP8266_ND+0x31be>
 8008f0e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f12:	2b13      	cmp	r3, #19
 8008f14:	d02e      	beq.n	8008f74 <AT_ESP8266_ND+0x2944>
 8008f16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	dc23      	bgt.n	8008f74 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_disconnect)
 8008f2c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f30:	2b0a      	cmp	r3, #10
 8008f32:	d01f      	beq.n	8008f74 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_connected)
 8008f34:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f38:	2b0b      	cmp	r3, #11
 8008f3a:	d01b      	beq.n	8008f74 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_gotip)
 8008f3c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f40:	2b0c      	cmp	r3, #12
 8008f42:	d017      	beq.n	8008f74 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_desconectado)
 8008f44:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f48:	2b10      	cmp	r3, #16
 8008f4a:	d013      	beq.n	8008f74 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_snd_err)
 8008f4c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f50:	2b11      	cmp	r3, #17
 8008f52:	d00f      	beq.n	8008f74 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_enviado_error)
 8008f54:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f58:	2b12      	cmp	r3, #18
 8008f5a:	d00b      	beq.n	8008f74 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_busy_p)))
 8008f5c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f64:	f040 8443 	bne.w	80097ee <AT_ESP8266_ND+0x31be>
 8008f68:	e004      	b.n	8008f74 <AT_ESP8266_ND+0x2944>
 8008f6a:	bf00      	nop
 8008f6c:	08010598 	.word	0x08010598
 8008f70:	080105a4 	.word	0x080105a4
									a->_debug_count5++;
 8008f74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8008f82:	1c5a      	adds	r2, r3, #1
 8008f84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8008f92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	dd25      	ble.n	8008ff4 <AT_ESP8266_ND+0x29c4>
										a->_debug_count8++;
 8008fa8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8008fc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8008fe4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fe8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8008ff4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ff8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009002:	2b02      	cmp	r3, #2
 8009004:	dd10      	ble.n	8009028 <AT_ESP8266_ND+0x29f8>
 8009006:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800900a:	2b10      	cmp	r3, #16
 800900c:	d00c      	beq.n	8009028 <AT_ESP8266_ND+0x29f8>
 800900e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009012:	2b0a      	cmp	r3, #10
 8009014:	d008      	beq.n	8009028 <AT_ESP8266_ND+0x29f8>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 8009016:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800901a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	220f      	movs	r2, #15
 8009022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009026:	e008      	b.n	800903a <AT_ESP8266_ND+0x2a0a>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009028:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800902c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 800903a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800903e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2200      	movs	r2, #0
 8009046:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 800904a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800904e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2200      	movs	r2, #0
 8009056:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 800905a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800905e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2200      	movs	r2, #0
 8009066:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 800906a:	e3c0      	b.n	80097ee <AT_ESP8266_ND+0x31be>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800906c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009070:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 800907c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009080:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800908a:	2b01      	cmp	r3, #1
 800908c:	d16f      	bne.n	800916e <AT_ESP8266_ND+0x2b3e>
						{
						a->_pasos=0;
 800908e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009092:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2200      	movs	r2, #0
 800909a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800909e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 80090ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80090bc:	4620      	mov	r0, r4
 80090be:	f7f7 f899 	bl	80001f4 <strlen>
 80090c2:	4603      	mov	r3, r0
 80090c4:	4423      	add	r3, r4
 80090c6:	4a78      	ldr	r2, [pc, #480]	; (80092a8 <AT_ESP8266_ND+0x2c78>)
 80090c8:	461c      	mov	r4, r3
 80090ca:	4615      	mov	r5, r2
 80090cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090ce:	6020      	str	r0, [r4, #0]
 80090d0:	6061      	str	r1, [r4, #4]
 80090d2:	60a2      	str	r2, [r4, #8]
 80090d4:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 80090d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80090e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 80090f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	335c      	adds	r3, #92	; 0x5c
 80090fe:	4618      	mov	r0, r3
 8009100:	f7f7 f878 	bl	80001f4 <strlen>
 8009104:	4603      	mov	r3, r0
 8009106:	461a      	mov	r2, r3
 8009108:	4629      	mov	r1, r5
 800910a:	4620      	mov	r0, r4
 800910c:	f005 fef1 	bl	800eef2 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009110:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009114:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800911e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009122:	4618      	mov	r0, r3
 8009124:	f7f7 f866 	bl	80001f4 <strlen>
 8009128:	4602      	mov	r2, r0
 800912a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800912e:	4619      	mov	r1, r3
 8009130:	4620      	mov	r0, r4
 8009132:	f005 fede 	bl	800eef2 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8009136:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800913a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009144:	4618      	mov	r0, r3
 8009146:	f7f7 f855 	bl	80001f4 <strlen>
 800914a:	4603      	mov	r3, r0
 800914c:	461a      	mov	r2, r3
 800914e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009152:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 800915c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009160:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f44f 7248 	mov.w	r2, #800	; 0x320
 800916a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 800916e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009172:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800917c:	1c5a      	adds	r2, r3, #1
 800917e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009182:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 800918c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009190:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800919a:	2b00      	cmp	r3, #0
 800919c:	d123      	bne.n	80091e6 <AT_ESP8266_ND+0x2bb6>
 800919e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091a2:	2b0a      	cmp	r3, #10
 80091a4:	d02b      	beq.n	80091fe <AT_ESP8266_ND+0x2bce>
 80091a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091aa:	2b0b      	cmp	r3, #11
 80091ac:	d027      	beq.n	80091fe <AT_ESP8266_ND+0x2bce>
 80091ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091b2:	2b0c      	cmp	r3, #12
 80091b4:	d023      	beq.n	80091fe <AT_ESP8266_ND+0x2bce>
 80091b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091ba:	2b0e      	cmp	r3, #14
 80091bc:	d01f      	beq.n	80091fe <AT_ESP8266_ND+0x2bce>
 80091be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091c2:	2b0f      	cmp	r3, #15
 80091c4:	d01b      	beq.n	80091fe <AT_ESP8266_ND+0x2bce>
 80091c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091ca:	2b10      	cmp	r3, #16
 80091cc:	d017      	beq.n	80091fe <AT_ESP8266_ND+0x2bce>
 80091ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091d2:	2b15      	cmp	r3, #21
 80091d4:	d013      	beq.n	80091fe <AT_ESP8266_ND+0x2bce>
 80091d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091da:	2b16      	cmp	r3, #22
 80091dc:	d00f      	beq.n	80091fe <AT_ESP8266_ND+0x2bce>
 80091de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091e2:	2b17      	cmp	r3, #23
 80091e4:	d00b      	beq.n	80091fe <AT_ESP8266_ND+0x2bce>
 80091e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80091f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091f8:	4293      	cmp	r3, r2
 80091fa:	f340 82fa 	ble.w	80097f2 <AT_ESP8266_ND+0x31c2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80091fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009202:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800920c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009210:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009214:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2200      	movs	r2, #0
 800921c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8009220:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009224:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2200      	movs	r2, #0
 800922c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8009230:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009234:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2200      	movs	r2, #0
 800923c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 8009240:	e2d7      	b.n	80097f2 <AT_ESP8266_ND+0x31c2>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 8009242:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009246:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800924a:	2200      	movs	r2, #0
 800924c:	601a      	str	r2, [r3, #0]
 800924e:	2200      	movs	r2, #0
 8009250:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8009252:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009256:	2b10      	cmp	r3, #16
 8009258:	d003      	beq.n	8009262 <AT_ESP8266_ND+0x2c32>
 800925a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800925e:	2b0a      	cmp	r3, #10
 8009260:	d124      	bne.n	80092ac <AT_ESP8266_ND+0x2c7c>
				{
					a->_estado=AT_decode;
 8009262:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009266:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009274:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009278:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2200      	movs	r2, #0
 8009280:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8009284:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009288:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2200      	movs	r2, #0
 8009290:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8009294:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009298:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2200      	movs	r2, #0
 80092a0:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80092a4:	e2a7      	b.n	80097f6 <AT_ESP8266_ND+0x31c6>
 80092a6:	bf00      	nop
 80092a8:	080105b0 	.word	0x080105b0
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80092ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	f040 8102 	bne.w	80094c4 <AT_ESP8266_ND+0x2e94>
 80092c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f040 80f8 	bne.w	80094c4 <AT_ESP8266_ND+0x2e94>
										a->_ejecucion=1;
 80092d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2201      	movs	r2, #1
 80092e0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 80092e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2218      	movs	r2, #24
 80092f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80092f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009304:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009308:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009318:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8009322:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009326:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2200      	movs	r2, #0
 800932e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8009332:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009336:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2200      	movs	r2, #0
 800933e:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 8009342:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009346:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009350:	4620      	mov	r0, r4
 8009352:	f7f6 ff4f 	bl	80001f4 <strlen>
 8009356:	4603      	mov	r3, r0
 8009358:	4423      	add	r3, r4
 800935a:	4a83      	ldr	r2, [pc, #524]	; (8009568 <AT_ESP8266_ND+0x2f38>)
 800935c:	461c      	mov	r4, r3
 800935e:	4613      	mov	r3, r2
 8009360:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009362:	6020      	str	r0, [r4, #0]
 8009364:	6061      	str	r1, [r4, #4]
 8009366:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 8009368:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800936c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 8009376:	f107 020c 	add.w	r2, r7, #12
 800937a:	4611      	mov	r1, r2
 800937c:	4618      	mov	r0, r3
 800937e:	f005 fb8d 	bl	800ea9c <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 8009382:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009386:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009390:	f107 030c 	add.w	r3, r7, #12
 8009394:	4618      	mov	r0, r3
 8009396:	f7f6 ff2d 	bl	80001f4 <strlen>
 800939a:	4602      	mov	r2, r0
 800939c:	f107 030c 	add.w	r3, r7, #12
 80093a0:	4619      	mov	r1, r3
 80093a2:	4620      	mov	r0, r4
 80093a4:	f005 fda5 	bl	800eef2 <strncat>
										strncat(a->_uart2snd,",",1);
 80093a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80093b6:	4620      	mov	r0, r4
 80093b8:	f7f6 ff1c 	bl	80001f4 <strlen>
 80093bc:	4603      	mov	r3, r0
 80093be:	4423      	add	r3, r4
 80093c0:	496a      	ldr	r1, [pc, #424]	; (800956c <AT_ESP8266_ND+0x2f3c>)
 80093c2:	461a      	mov	r2, r3
 80093c4:	460b      	mov	r3, r1
 80093c6:	881b      	ldrh	r3, [r3, #0]
 80093c8:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 80093ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 80093d8:	f107 020c 	add.w	r2, r7, #12
 80093dc:	4611      	mov	r1, r2
 80093de:	4618      	mov	r0, r3
 80093e0:	f005 fb5c 	bl	800ea9c <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 80093e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80093f2:	f107 030c 	add.w	r3, r7, #12
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7f6 fefc 	bl	80001f4 <strlen>
 80093fc:	4602      	mov	r2, r0
 80093fe:	f107 030c 	add.w	r3, r7, #12
 8009402:	4619      	mov	r1, r3
 8009404:	4620      	mov	r0, r4
 8009406:	f005 fd74 	bl	800eef2 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 800940a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800940e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8009418:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800941c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009426:	4619      	mov	r1, r3
 8009428:	4610      	mov	r0, r2
 800942a:	f005 fe43 	bl	800f0b4 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 800942e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009432:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800943c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009440:	2202      	movs	r2, #2
 8009442:	4618      	mov	r0, r3
 8009444:	f005 fd55 	bl	800eef2 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8009448:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800944c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009456:	4618      	mov	r0, r3
 8009458:	f7f6 fecc 	bl	80001f4 <strlen>
 800945c:	4603      	mov	r3, r0
 800945e:	461a      	mov	r2, r3
 8009460:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009464:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 800946e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009472:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 800947c:	4620      	mov	r0, r4
 800947e:	f7f6 feb9 	bl	80001f4 <strlen>
 8009482:	4603      	mov	r3, r0
 8009484:	4423      	add	r3, r4
 8009486:	4a3a      	ldr	r2, [pc, #232]	; (8009570 <AT_ESP8266_ND+0x2f40>)
 8009488:	461c      	mov	r4, r3
 800948a:	4613      	mov	r3, r2
 800948c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800948e:	6020      	str	r0, [r4, #0]
 8009490:	6061      	str	r1, [r4, #4]
 8009492:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009494:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009498:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80094a2:	1c5a      	adds	r2, r3, #1
 80094a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 80094b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f44f 7261 	mov.w	r2, #900	; 0x384
 80094c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 80094c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 80094e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f040 80b8 	bne.w	8009666 <AT_ESP8266_ND+0x3036>
 80094f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094fa:	2b13      	cmp	r3, #19
 80094fc:	f000 80b3 	beq.w	8009666 <AT_ESP8266_ND+0x3036>
 8009500:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009504:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f203 6294 	addw	r2, r3, #1684	; 0x694
 800950e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009512:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 800951c:	4619      	mov	r1, r3
 800951e:	4610      	mov	r0, r2
 8009520:	f7f6 fe5e 	bl	80001e0 <strcmp>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d024      	beq.n	8009574 <AT_ESP8266_ND+0x2f44>
 800952a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800952e:	2b01      	cmp	r3, #1
 8009530:	d020      	beq.n	8009574 <AT_ESP8266_ND+0x2f44>
 8009532:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009536:	2b14      	cmp	r3, #20
 8009538:	d01c      	beq.n	8009574 <AT_ESP8266_ND+0x2f44>
 800953a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800953e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009548:	f241 3288 	movw	r2, #5000	; 0x1388
 800954c:	4293      	cmp	r3, r2
 800954e:	f340 808a 	ble.w	8009666 <AT_ESP8266_ND+0x3036>
 8009552:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009556:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009560:	2b01      	cmp	r3, #1
 8009562:	f040 8080 	bne.w	8009666 <AT_ESP8266_ND+0x3036>
 8009566:	e005      	b.n	8009574 <AT_ESP8266_ND+0x2f44>
 8009568:	08010598 	.word	0x08010598
 800956c:	080105c0 	.word	0x080105c0
 8009570:	080105a4 	.word	0x080105a4
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8009574:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009578:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009582:	f241 3288 	movw	r2, #5000	; 0x1388
 8009586:	4293      	cmp	r3, r2
 8009588:	dd17      	ble.n	80095ba <AT_ESP8266_ND+0x2f8a>
 800958a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800958e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009598:	2b01      	cmp	r3, #1
 800959a:	d10e      	bne.n	80095ba <AT_ESP8266_ND+0x2f8a>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 800959c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 80095aa:	1c5a      	adds	r2, r3, #1
 80095ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 80095ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 80095c8:	1c5a      	adds	r2, r3, #1
 80095ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 80095d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80095e6:	1c5a      	adds	r2, r3, #1
 80095e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 80095f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2201      	movs	r2, #1
 8009602:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009606:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800960a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009614:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009618:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009622:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009626:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009630:	2361      	movs	r3, #97	; 0x61
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	2301      	movs	r3, #1
 8009636:	f005 fa65 	bl	800eb04 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 800963a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800963e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009648:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800964c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009656:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800965a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2200      	movs	r2, #0
 8009662:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8009666:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800966a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009674:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009678:	f040 80bd 	bne.w	80097f6 <AT_ESP8266_ND+0x31c6>
 800967c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009680:	2b13      	cmp	r3, #19
 8009682:	d02b      	beq.n	80096dc <AT_ESP8266_ND+0x30ac>
 8009684:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009688:	2b0b      	cmp	r3, #11
 800968a:	d027      	beq.n	80096dc <AT_ESP8266_ND+0x30ac>
 800968c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009690:	2b0c      	cmp	r3, #12
 8009692:	d023      	beq.n	80096dc <AT_ESP8266_ND+0x30ac>
 8009694:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009698:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80096a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80096a6:	4293      	cmp	r3, r2
 80096a8:	dc18      	bgt.n	80096dc <AT_ESP8266_ND+0x30ac>
 80096aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096ae:	2b0a      	cmp	r3, #10
 80096b0:	d014      	beq.n	80096dc <AT_ESP8266_ND+0x30ac>
 80096b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096b6:	2b10      	cmp	r3, #16
 80096b8:	d010      	beq.n	80096dc <AT_ESP8266_ND+0x30ac>
 80096ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096be:	2b11      	cmp	r3, #17
 80096c0:	d00c      	beq.n	80096dc <AT_ESP8266_ND+0x30ac>
 80096c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096c6:	2b12      	cmp	r3, #18
 80096c8:	d008      	beq.n	80096dc <AT_ESP8266_ND+0x30ac>
 80096ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096ce:	2b16      	cmp	r3, #22
 80096d0:	d004      	beq.n	80096dc <AT_ESP8266_ND+0x30ac>
 80096d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80096d6:	2b19      	cmp	r3, #25
 80096d8:	f040 808d 	bne.w	80097f6 <AT_ESP8266_ND+0x31c6>
									a->_debug_count5++;
 80096dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 80096fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009708:	f241 3288 	movw	r2, #5000	; 0x1388
 800970c:	4293      	cmp	r3, r2
 800970e:	dd25      	ble.n	800975c <AT_ESP8266_ND+0x312c>
										a->_debug_count8++;
 8009710:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009714:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 800971e:	1c5a      	adds	r2, r3, #1
 8009720:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009724:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 800972e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009732:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009742:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 800974c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009750:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2200      	movs	r2, #0
 8009758:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 800975c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009760:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800976a:	2b02      	cmp	r3, #2
 800976c:	dd07      	ble.n	800977e <AT_ESP8266_ND+0x314e>
 800976e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009772:	2b10      	cmp	r3, #16
 8009774:	d003      	beq.n	800977e <AT_ESP8266_ND+0x314e>
 8009776:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800977a:	2b0a      	cmp	r3, #10
 800977c:	d108      	bne.n	8009790 <AT_ESP8266_ND+0x3160>
										a->_estado=AT_decode;	//Devuelvo el estado
 800977e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009782:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800978c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009790:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009794:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2200      	movs	r2, #0
 800979c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 80097a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 80097b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 80097c0:	e019      	b.n	80097f6 <AT_ESP8266_ND+0x31c6>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 80097c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80097d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 80097d4:	e010      	b.n	80097f8 <AT_ESP8266_ND+0x31c8>
			break;
 80097d6:	bf00      	nop
 80097d8:	e00e      	b.n	80097f8 <AT_ESP8266_ND+0x31c8>
			break;
 80097da:	bf00      	nop
 80097dc:	e00c      	b.n	80097f8 <AT_ESP8266_ND+0x31c8>
			break;
 80097de:	bf00      	nop
 80097e0:	e00a      	b.n	80097f8 <AT_ESP8266_ND+0x31c8>
			break;
 80097e2:	bf00      	nop
 80097e4:	e008      	b.n	80097f8 <AT_ESP8266_ND+0x31c8>
			break;
 80097e6:	bf00      	nop
 80097e8:	e006      	b.n	80097f8 <AT_ESP8266_ND+0x31c8>
			break;
 80097ea:	bf00      	nop
 80097ec:	e004      	b.n	80097f8 <AT_ESP8266_ND+0x31c8>
			break;
 80097ee:	bf00      	nop
 80097f0:	e002      	b.n	80097f8 <AT_ESP8266_ND+0x31c8>
			break;
 80097f2:	bf00      	nop
 80097f4:	e000      	b.n	80097f8 <AT_ESP8266_ND+0x31c8>
			break;
 80097f6:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 80097f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 8009808:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800980c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2200      	movs	r2, #0
 8009814:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 8009818:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800981c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8009826:	4618      	mov	r0, r3
 8009828:	f507 7715 	add.w	r7, r7, #596	; 0x254
 800982c:	46bd      	mov	sp, r7
 800982e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009830 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009842:	f240 328d 	movw	r2, #909	; 0x38d
 8009846:	4293      	cmp	r3, r2
 8009848:	f001 83c3 	beq.w	800afd2 <WiFi_Conn_ND+0x17a2>
 800984c:	f240 328d 	movw	r2, #909	; 0x38d
 8009850:	4293      	cmp	r3, r2
 8009852:	f301 8453 	bgt.w	800b0fc <WiFi_Conn_ND+0x18cc>
 8009856:	f240 3289 	movw	r2, #905	; 0x389
 800985a:	4293      	cmp	r3, r2
 800985c:	f001 8335 	beq.w	800aeca <WiFi_Conn_ND+0x169a>
 8009860:	f240 3289 	movw	r2, #905	; 0x389
 8009864:	4293      	cmp	r3, r2
 8009866:	f301 8449 	bgt.w	800b0fc <WiFi_Conn_ND+0x18cc>
 800986a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800986e:	f001 8224 	beq.w	800acba <WiFi_Conn_ND+0x148a>
 8009872:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009876:	f301 8441 	bgt.w	800b0fc <WiFi_Conn_ND+0x18cc>
 800987a:	f240 3229 	movw	r2, #809	; 0x329
 800987e:	4293      	cmp	r3, r2
 8009880:	f301 843c 	bgt.w	800b0fc <WiFi_Conn_ND+0x18cc>
 8009884:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009888:	f280 80a5 	bge.w	80099d6 <WiFi_Conn_ND+0x1a6>
 800988c:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009890:	4293      	cmp	r3, r2
 8009892:	f000 8776 	beq.w	800a782 <WiFi_Conn_ND+0xf52>
 8009896:	f240 22c5 	movw	r2, #709	; 0x2c5
 800989a:	4293      	cmp	r3, r2
 800989c:	f301 842e 	bgt.w	800b0fc <WiFi_Conn_ND+0x18cc>
 80098a0:	f240 22c1 	movw	r2, #705	; 0x2c1
 80098a4:	4293      	cmp	r3, r2
 80098a6:	f000 86fc 	beq.w	800a6a2 <WiFi_Conn_ND+0xe72>
 80098aa:	f240 22c1 	movw	r2, #705	; 0x2c1
 80098ae:	4293      	cmp	r3, r2
 80098b0:	f301 8424 	bgt.w	800b0fc <WiFi_Conn_ND+0x18cc>
 80098b4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80098b8:	f000 862b 	beq.w	800a512 <WiFi_Conn_ND+0xce2>
 80098bc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80098c0:	f301 841c 	bgt.w	800b0fc <WiFi_Conn_ND+0x18cc>
 80098c4:	f240 2261 	movw	r2, #609	; 0x261
 80098c8:	4293      	cmp	r3, r2
 80098ca:	f000 85b1 	beq.w	800a430 <WiFi_Conn_ND+0xc00>
 80098ce:	f240 2261 	movw	r2, #609	; 0x261
 80098d2:	4293      	cmp	r3, r2
 80098d4:	f301 8412 	bgt.w	800b0fc <WiFi_Conn_ND+0x18cc>
 80098d8:	f240 225d 	movw	r2, #605	; 0x25d
 80098dc:	4293      	cmp	r3, r2
 80098de:	f000 8551 	beq.w	800a384 <WiFi_Conn_ND+0xb54>
 80098e2:	f240 225d 	movw	r2, #605	; 0x25d
 80098e6:	4293      	cmp	r3, r2
 80098e8:	f301 8408 	bgt.w	800b0fc <WiFi_Conn_ND+0x18cc>
 80098ec:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80098f0:	f000 84cf 	beq.w	800a292 <WiFi_Conn_ND+0xa62>
 80098f4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80098f8:	f301 8400 	bgt.w	800b0fc <WiFi_Conn_ND+0x18cc>
 80098fc:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009900:	4293      	cmp	r3, r2
 8009902:	f000 846a 	beq.w	800a1da <WiFi_Conn_ND+0x9aa>
 8009906:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800990a:	f281 83f7 	bge.w	800b0fc <WiFi_Conn_ND+0x18cc>
 800990e:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009912:	4293      	cmp	r3, r2
 8009914:	f000 8425 	beq.w	800a162 <WiFi_Conn_ND+0x932>
 8009918:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 800991c:	f281 83ee 	bge.w	800b0fc <WiFi_Conn_ND+0x18cc>
 8009920:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009924:	f000 83b0 	beq.w	800a088 <WiFi_Conn_ND+0x858>
 8009928:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800992c:	f301 83e6 	bgt.w	800b0fc <WiFi_Conn_ND+0x18cc>
 8009930:	f240 1299 	movw	r2, #409	; 0x199
 8009934:	4293      	cmp	r3, r2
 8009936:	f000 8369 	beq.w	800a00c <WiFi_Conn_ND+0x7dc>
 800993a:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800993e:	f281 83dd 	bge.w	800b0fc <WiFi_Conn_ND+0x18cc>
 8009942:	f240 1295 	movw	r2, #405	; 0x195
 8009946:	4293      	cmp	r3, r2
 8009948:	f000 8329 	beq.w	8009f9e <WiFi_Conn_ND+0x76e>
 800994c:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009950:	f281 83d4 	bge.w	800b0fc <WiFi_Conn_ND+0x18cc>
 8009954:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009958:	f000 82a0 	beq.w	8009e9c <WiFi_Conn_ND+0x66c>
 800995c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009960:	f301 83cc 	bgt.w	800b0fc <WiFi_Conn_ND+0x18cc>
 8009964:	f240 1235 	movw	r2, #309	; 0x135
 8009968:	4293      	cmp	r3, r2
 800996a:	f000 8271 	beq.w	8009e50 <WiFi_Conn_ND+0x620>
 800996e:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009972:	f281 83c3 	bge.w	800b0fc <WiFi_Conn_ND+0x18cc>
 8009976:	f240 1231 	movw	r2, #305	; 0x131
 800997a:	4293      	cmp	r3, r2
 800997c:	f000 8263 	beq.w	8009e46 <WiFi_Conn_ND+0x616>
 8009980:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009984:	f281 83ba 	bge.w	800b0fc <WiFi_Conn_ND+0x18cc>
 8009988:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800998c:	f000 8207 	beq.w	8009d9e <WiFi_Conn_ND+0x56e>
 8009990:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009994:	f301 83b2 	bgt.w	800b0fc <WiFi_Conn_ND+0x18cc>
 8009998:	2bd1      	cmp	r3, #209	; 0xd1
 800999a:	f000 81a0 	beq.w	8009cde <WiFi_Conn_ND+0x4ae>
 800999e:	2bd1      	cmp	r3, #209	; 0xd1
 80099a0:	f301 83ac 	bgt.w	800b0fc <WiFi_Conn_ND+0x18cc>
 80099a4:	2bcd      	cmp	r3, #205	; 0xcd
 80099a6:	f000 8170 	beq.w	8009c8a <WiFi_Conn_ND+0x45a>
 80099aa:	2bcd      	cmp	r3, #205	; 0xcd
 80099ac:	f301 83a6 	bgt.w	800b0fc <WiFi_Conn_ND+0x18cc>
 80099b0:	2bc8      	cmp	r3, #200	; 0xc8
 80099b2:	f000 80f1 	beq.w	8009b98 <WiFi_Conn_ND+0x368>
 80099b6:	2bc8      	cmp	r3, #200	; 0xc8
 80099b8:	f301 83a0 	bgt.w	800b0fc <WiFi_Conn_ND+0x18cc>
 80099bc:	2b6d      	cmp	r3, #109	; 0x6d
 80099be:	f000 80b3 	beq.w	8009b28 <WiFi_Conn_ND+0x2f8>
 80099c2:	2b6d      	cmp	r3, #109	; 0x6d
 80099c4:	f301 839a 	bgt.w	800b0fc <WiFi_Conn_ND+0x18cc>
 80099c8:	2b64      	cmp	r3, #100	; 0x64
 80099ca:	d021      	beq.n	8009a10 <WiFi_Conn_ND+0x1e0>
 80099cc:	2b69      	cmp	r3, #105	; 0x69
 80099ce:	f000 8096 	beq.w	8009afe <WiFi_Conn_ND+0x2ce>
 80099d2:	f001 bb93 	b.w	800b0fc <WiFi_Conn_ND+0x18cc>
 80099d6:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 80099da:	2b09      	cmp	r3, #9
 80099dc:	f201 838e 	bhi.w	800b0fc <WiFi_Conn_ND+0x18cc>
 80099e0:	a201      	add	r2, pc, #4	; (adr r2, 80099e8 <WiFi_Conn_ND+0x1b8>)
 80099e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e6:	bf00      	nop
 80099e8:	0800a88f 	.word	0x0800a88f
 80099ec:	0800b0fd 	.word	0x0800b0fd
 80099f0:	0800b0fd 	.word	0x0800b0fd
 80099f4:	0800b0fd 	.word	0x0800b0fd
 80099f8:	0800b0fd 	.word	0x0800b0fd
 80099fc:	0800a95d 	.word	0x0800a95d
 8009a00:	0800a9fd 	.word	0x0800a9fd
 8009a04:	0800aa9d 	.word	0x0800aa9d
 8009a08:	0800ab3d 	.word	0x0800ab3d
 8009a0c:	0800abdd 	.word	0x0800abdd
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a16:	2b64      	cmp	r3, #100	; 0x64
 8009a18:	d046      	beq.n	8009aa8 <WiFi_Conn_ND+0x278>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d041      	beq.n	8009aa8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a2a:	2b1c      	cmp	r3, #28
 8009a2c:	d03c      	beq.n	8009aa8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d037      	beq.n	8009aa8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a3e:	2b04      	cmp	r3, #4
 8009a40:	d032      	beq.n	8009aa8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a48:	2b13      	cmp	r3, #19
 8009a4a:	d02d      	beq.n	8009aa8 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f7fc fc5f 	bl	8006310 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d14e      	bne.n	8009afa <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f7fc fde7 	bl	8006630 <AT_ESP8266_ND>
 8009a62:	4602      	mov	r2, r0
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d109      	bne.n	8009a90 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009a88:	4619      	mov	r1, r3
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	f7f7 fcb4 	bl	80013f8 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009a9c:	b29a      	uxth	r2, r3
 8009a9e:	2364      	movs	r3, #100	; 0x64
 8009aa0:	68b8      	ldr	r0, [r7, #8]
 8009aa2:	f7fb fb91 	bl	80051c8 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 8009aa6:	e028      	b.n	8009afa <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d004      	beq.n	8009abc <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 8009ab8:	2b1c      	cmp	r3, #28
 8009aba:	d103      	bne.n	8009ac4 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	226d      	movs	r2, #109	; 0x6d
 8009ac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d00f      	beq.n	8009aee <WiFi_Conn_ND+0x2be>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ad4:	2b04      	cmp	r3, #4
 8009ad6:	d00a      	beq.n	8009aee <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ade:	2b0b      	cmp	r3, #11
 8009ae0:	d005      	beq.n	8009aee <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ae8:	2b0c      	cmp	r3, #12
 8009aea:	f041 82d8 	bne.w	800b09e <WiFi_Conn_ND+0x186e>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2269      	movs	r2, #105	; 0x69
 8009af2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 8009af6:	f001 bad2 	b.w	800b09e <WiFi_Conn_ND+0x186e>
 8009afa:	f001 bad0 	b.w	800b09e <WiFi_Conn_ND+0x186e>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f7fc fc06 	bl	8006310 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2264      	movs	r2, #100	; 0x64
 8009b08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 8009b24:	f001 baea 	b.w	800b0fc <WiFi_Conn_ND+0x18cc>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00c      	beq.n	8009b4c <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 8009b32:	68f8      	ldr	r0, [r7, #12]
 8009b34:	f7fc fc18 	bl	8006368 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009b3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009b4a:	e00e      	b.n	8009b6a <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f7fc fbf5 	bl	800633c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	22c8      	movs	r2, #200	; 0xc8
 8009b56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b70:	2b04      	cmp	r3, #4
 8009b72:	f041 8296 	bne.w	800b0a2 <WiFi_Conn_ND+0x1872>
					{
						Cambiar_CWMODE(b);
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f7fc fbca 	bl	8006310 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2264      	movs	r2, #100	; 0x64
 8009b80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009b94:	f001 ba85 	b.w	800b0a2 <WiFi_Conn_ND+0x1872>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b9e:	2bc8      	cmp	r3, #200	; 0xc8
 8009ba0:	d04f      	beq.n	8009c42 <WiFi_Conn_ND+0x412>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d04a      	beq.n	8009c42 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d045      	beq.n	8009c42 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bbc:	2b03      	cmp	r3, #3
 8009bbe:	d040      	beq.n	8009c42 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bc6:	2b04      	cmp	r3, #4
 8009bc8:	d03b      	beq.n	8009c42 <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bd0:	2b0a      	cmp	r3, #10
 8009bd2:	d036      	beq.n	8009c42 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bda:	2b0b      	cmp	r3, #11
 8009bdc:	d031      	beq.n	8009c42 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009be4:	2b0c      	cmp	r3, #12
 8009be6:	d02c      	beq.n	8009c42 <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f7fc fba7 	bl	800633c <ConectarWIFI>
						if(b->_enviaruart==1)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d124      	bne.n	8009c42 <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f7fc fd19 	bl	8006630 <AT_ESP8266_ND>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d109      	bne.n	8009c2c <WiFi_Conn_ND+0x3fc>
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009c24:	4619      	mov	r1, r3
 8009c26:	4610      	mov	r0, r2
 8009c28:	f7f7 fbe6 	bl	80013f8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	2364      	movs	r3, #100	; 0x64
 8009c3c:	68b8      	ldr	r0, [r7, #8]
 8009c3e:	f7fb fac3 	bl	80051c8 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d004      	beq.n	8009c56 <WiFi_Conn_ND+0x426>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c52:	2b0c      	cmp	r3, #12
 8009c54:	d103      	bne.n	8009c5e <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	22d1      	movs	r2, #209	; 0xd1
 8009c5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d00a      	beq.n	8009c7e <WiFi_Conn_ND+0x44e>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	d005      	beq.n	8009c7e <WiFi_Conn_ND+0x44e>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c78:	2b20      	cmp	r3, #32
 8009c7a:	f041 8214 	bne.w	800b0a6 <WiFi_Conn_ND+0x1876>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	22cd      	movs	r2, #205	; 0xcd
 8009c82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009c86:	f001 ba0e 	b.w	800b0a6 <WiFi_Conn_ND+0x1876>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 8009c8a:	f241 3088 	movw	r0, #5000	; 0x1388
 8009c8e:	f7f8 fde7 	bl	8002860 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f7fc fb52 	bl	800633c <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	22c8      	movs	r2, #200	; 0xc8
 8009c9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2200      	movs	r2, #0
 8009cac:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cb6:	2b04      	cmp	r3, #4
 8009cb8:	f041 81f7 	bne.w	800b0aa <WiFi_Conn_ND+0x187a>
					{
						Cambiar_CWMODE(b);
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f7fc fb27 	bl	8006310 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2264      	movs	r2, #100	; 0x64
 8009cc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009cda:	f001 b9e6 	b.w	800b0aa <WiFi_Conn_ND+0x187a>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d108      	bne.n	8009d02 <WiFi_Conn_ND+0x4d2>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f240 3229 	movw	r2, #809	; 0x329
 8009cf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)) //Si me desconecto, me vuelvo a conectar
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d08:	2b0a      	cmp	r3, #10
 8009d0a:	d004      	beq.n	8009d16 <WiFi_Conn_ND+0x4e6>
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d12:	2b0d      	cmp	r3, #13
 8009d14:	d10a      	bne.n	8009d2c <WiFi_Conn_ND+0x4fc>
				{
					ConectarWIFI(b);
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f7fc fb10 	bl	800633c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	22c8      	movs	r2, #200	; 0xc8
 8009d20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d32:	2b04      	cmp	r3, #4
 8009d34:	d10e      	bne.n	8009d54 <WiFi_Conn_ND+0x524>
					{
						Cambiar_CWMODE(b);
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f7fc faea 	bl	8006310 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2264      	movs	r2, #100	; 0x64
 8009d40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d011      	beq.n	8009d82 <WiFi_Conn_ND+0x552>
				{//
					CrearServidorTCP(b);
 8009d5e:	68f8      	ldr	r0, [r7, #12]
 8009d60:	f7fc fb5a 	bl	8006418 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009d6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 8009d7e:	f001 b9bd 	b.w	800b0fc <WiFi_Conn_ND+0x18cc>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f7fc faf0 	bl	8006368 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009d8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8009d9a:	f001 b9af 	b.w	800b0fc <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009da4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009da8:	d03b      	beq.n	8009e22 <WiFi_Conn_ND+0x5f2>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db0:	2b04      	cmp	r3, #4
 8009db2:	d036      	beq.n	8009e22 <WiFi_Conn_ND+0x5f2>
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dba:	2b0a      	cmp	r3, #10
 8009dbc:	d031      	beq.n	8009e22 <WiFi_Conn_ND+0x5f2>
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc4:	2b0d      	cmp	r3, #13
 8009dc6:	d02c      	beq.n	8009e22 <WiFi_Conn_ND+0x5f2>
				{
						DesconectarWIFI(b);
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f7fc faf9 	bl	80063c0 <DesconectarWIFI>
						if(b->_enviaruart==1)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d124      	bne.n	8009e22 <WiFi_Conn_ND+0x5f2>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f7fc fc29 	bl	8006630 <AT_ESP8266_ND>
 8009dde:	4602      	mov	r2, r0
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d109      	bne.n	8009e0c <WiFi_Conn_ND+0x5dc>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009e04:	4619      	mov	r1, r3
 8009e06:	4610      	mov	r0, r2
 8009e08:	f7f7 faf6 	bl	80013f8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009e18:	b29a      	uxth	r2, r3
 8009e1a:	2364      	movs	r3, #100	; 0x64
 8009e1c:	68b8      	ldr	r0, [r7, #8]
 8009e1e:	f7fb f9d3 	bl	80051c8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e28:	2b0a      	cmp	r3, #10
 8009e2a:	d005      	beq.n	8009e38 <WiFi_Conn_ND+0x608>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e32:	2b0d      	cmp	r3, #13
 8009e34:	f041 813b 	bne.w	800b0ae <WiFi_Conn_ND+0x187e>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f240 1235 	movw	r2, #309	; 0x135
 8009e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009e42:	f001 b934 	b.w	800b0ae <WiFi_Conn_ND+0x187e>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f7fc fa4c 	bl	80062e4 <NOP>
			}
			break;
 8009e4c:	f001 b956 	b.w	800b0fc <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f7fc fa6f 	bl	800633c <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	22c8      	movs	r2, #200	; 0xc8
 8009e62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e74:	2b04      	cmp	r3, #4
 8009e76:	f041 811c 	bne.w	800b0b2 <WiFi_Conn_ND+0x1882>
					{
						Cambiar_CWMODE(b);
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f7fc fa48 	bl	8006310 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2264      	movs	r2, #100	; 0x64
 8009e84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009e98:	f001 b90b 	b.w	800b0b2 <WiFi_Conn_ND+0x1882>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ea2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009ea6:	d04f      	beq.n	8009f48 <WiFi_Conn_ND+0x718>
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eae:	2b04      	cmp	r3, #4
 8009eb0:	d04a      	beq.n	8009f48 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_ok)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d045      	beq.n	8009f48 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_error)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d040      	beq.n	8009f48 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_ok)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ecc:	2b07      	cmp	r3, #7
 8009ece:	d03b      	beq.n	8009f48 <WiFi_Conn_ND+0x718>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed6:	2b08      	cmp	r3, #8
 8009ed8:	d036      	beq.n	8009f48 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_err)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee0:	2b1e      	cmp	r3, #30
 8009ee2:	d031      	beq.n	8009f48 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eea:	2b1f      	cmp	r3, #31
 8009eec:	d02c      	beq.n	8009f48 <WiFi_Conn_ND+0x718>
				{
						MUX(b);
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f7fc fa3a 	bl	8006368 <MUX>
						if(b->_enviaruart==1)
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d124      	bne.n	8009f48 <WiFi_Conn_ND+0x718>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f7fc fb96 	bl	8006630 <AT_ESP8266_ND>
 8009f04:	4602      	mov	r2, r0
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d109      	bne.n	8009f32 <WiFi_Conn_ND+0x702>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	f7f7 fa63 	bl	80013f8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	2364      	movs	r3, #100	; 0x64
 8009f42:	68b8      	ldr	r0, [r7, #8]
 8009f44:	f7fb f940 	bl	80051c8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d009      	beq.n	8009f66 <WiFi_Conn_ND+0x736>
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f58:	2b07      	cmp	r3, #7
 8009f5a:	d004      	beq.n	8009f66 <WiFi_Conn_ND+0x736>
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f62:	2b08      	cmp	r3, #8
 8009f64:	d104      	bne.n	8009f70 <WiFi_Conn_ND+0x740>
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f240 1299 	movw	r2, #409	; 0x199
 8009f6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d00a      	beq.n	8009f90 <WiFi_Conn_ND+0x760>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f80:	2b1e      	cmp	r3, #30
 8009f82:	d005      	beq.n	8009f90 <WiFi_Conn_ND+0x760>
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f8a:	2b1f      	cmp	r3, #31
 8009f8c:	f041 8093 	bne.w	800b0b6 <WiFi_Conn_ND+0x1886>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f240 1295 	movw	r2, #405	; 0x195
 8009f96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009f9a:	f001 b88c 	b.w	800b0b6 <WiFi_Conn_ND+0x1886>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f7fc f9a0 	bl	80062e4 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009faa:	2b04      	cmp	r3, #4
 8009fac:	d112      	bne.n	8009fd4 <WiFi_Conn_ND+0x7a4>
				{
					Cambiar_CWMODE(b);
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f7fc f9ae 	bl	8006310 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2264      	movs	r2, #100	; 0x64
 8009fb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fda:	2b0a      	cmp	r3, #10
 8009fdc:	d005      	beq.n	8009fea <WiFi_Conn_ND+0x7ba>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe4:	2b0d      	cmp	r3, #13
 8009fe6:	f041 8068 	bne.w	800b0ba <WiFi_Conn_ND+0x188a>
				{
					ConectarWIFI(b);
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f7fc f9a6 	bl	800633c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	22c8      	movs	r2, #200	; 0xc8
 8009ff4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2200      	movs	r2, #0
 800a004:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a008:	f001 b857 	b.w	800b0ba <WiFi_Conn_ND+0x188a>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f7fc f969 	bl	80062e4 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a020:	2b04      	cmp	r3, #4
 800a022:	d10e      	bne.n	800a042 <WiFi_Conn_ND+0x812>
					{
						Cambiar_CWMODE(b);
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f7fc f973 	bl	8006310 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2264      	movs	r2, #100	; 0x64
 800a02e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a048:	2b0a      	cmp	r3, #10
 800a04a:	d004      	beq.n	800a056 <WiFi_Conn_ND+0x826>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a052:	2b0d      	cmp	r3, #13
 800a054:	d10a      	bne.n	800a06c <WiFi_Conn_ND+0x83c>
					{
						ConectarWIFI(b);
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f7fc f970 	bl	800633c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	22c8      	movs	r2, #200	; 0xc8
 800a060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}

					IPDef(b);
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f7fc f991 	bl	8006394 <IPDef>
					b->_estado_conexion=DEF_IP_EN_CURSO;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2200      	movs	r2, #0
 800a080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 800a084:	f001 b83a 	b.w	800b0fc <WiFi_Conn_ND+0x18cc>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a08e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a092:	d045      	beq.n	800a120 <WiFi_Conn_ND+0x8f0>
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a09a:	2b04      	cmp	r3, #4
 800a09c:	d040      	beq.n	800a120 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_ok)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d03b      	beq.n	800a120 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_error)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	d036      	beq.n	800a120 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_ok)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b8:	2b1b      	cmp	r3, #27
 800a0ba:	d031      	beq.n	800a120 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c2:	2b21      	cmp	r3, #33	; 0x21
 800a0c4:	d02c      	beq.n	800a120 <WiFi_Conn_ND+0x8f0>
				{
						IPDef(b);
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f7fc f964 	bl	8006394 <IPDef>
						if(b->_enviaruart==1)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d124      	bne.n	800a120 <WiFi_Conn_ND+0x8f0>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f7fc faaa 	bl	8006630 <AT_ESP8266_ND>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d109      	bne.n	800a10a <WiFi_Conn_ND+0x8da>
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a102:	4619      	mov	r1, r3
 800a104:	4610      	mov	r0, r2
 800a106:	f7f7 f977 	bl	80013f8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a116:	b29a      	uxth	r2, r3
 800a118:	2364      	movs	r3, #100	; 0x64
 800a11a:	68b8      	ldr	r0, [r7, #8]
 800a11c:	f7fb f854 	bl	80051c8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a126:	2b01      	cmp	r3, #1
 800a128:	d004      	beq.n	800a134 <WiFi_Conn_ND+0x904>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a130:	2b1b      	cmp	r3, #27
 800a132:	d104      	bne.n	800a13e <WiFi_Conn_ND+0x90e>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a13a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a144:	2b02      	cmp	r3, #2
 800a146:	d005      	beq.n	800a154 <WiFi_Conn_ND+0x924>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a14e:	2b21      	cmp	r3, #33	; 0x21
 800a150:	f040 87b5 	bne.w	800b0be <WiFi_Conn_ND+0x188e>
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a15a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a15e:	f000 bfae 	b.w	800b0be <WiFi_Conn_ND+0x188e>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f7fc f8be 	bl	80062e4 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a16e:	2b04      	cmp	r3, #4
 800a170:	d004      	beq.n	800a17c <WiFi_Conn_ND+0x94c>
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d112      	bne.n	800a1a2 <WiFi_Conn_ND+0x972>
				{
					Cambiar_CWMODE(b);
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f7fc f8c7 	bl	8006310 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2264      	movs	r2, #100	; 0x64
 800a186:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a8:	2b0a      	cmp	r3, #10
 800a1aa:	d005      	beq.n	800a1b8 <WiFi_Conn_ND+0x988>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b2:	2b0d      	cmp	r3, #13
 800a1b4:	f040 8785 	bne.w	800b0c2 <WiFi_Conn_ND+0x1892>
				{
					ConectarWIFI(b);
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f7fc f8bf 	bl	800633c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	22c8      	movs	r2, #200	; 0xc8
 800a1c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a1d6:	f000 bf74 	b.w	800b0c2 <WiFi_Conn_ND+0x1892>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f7fc f882 	bl	80062e4 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1e6:	2b04      	cmp	r3, #4
 800a1e8:	d112      	bne.n	800a210 <WiFi_Conn_ND+0x9e0>
					{
						Cambiar_CWMODE(b);
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f7fc f890 	bl	8006310 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2264      	movs	r2, #100	; 0x64
 800a1f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a216:	2b0a      	cmp	r3, #10
 800a218:	d004      	beq.n	800a224 <WiFi_Conn_ND+0x9f4>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a220:	2b0d      	cmp	r3, #13
 800a222:	d10e      	bne.n	800a242 <WiFi_Conn_ND+0xa12>
					{
						ConectarWIFI(b);
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f7fc f889 	bl	800633c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	22c8      	movs	r2, #200	; 0xc8
 800a22e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2200      	movs	r2, #0
 800a236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d111      	bne.n	800a270 <WiFi_Conn_ND+0xa40>
					{
						ConectarTCP(b);
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f7fc f8cd 	bl	80063ec <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2200      	movs	r2, #0
 800a260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						//b->_estado_conexion=TCP_SRVR_EN_CURSO;
						//b->_estado=0;
						//b->_n_orig=0; //Borro el vector RX
					}
			}
			break;
 800a26c:	f000 bf46 	b.w	800b0fc <WiFi_Conn_ND+0x18cc>
						ConectarWIFI(b);//
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f7fc f863 	bl	800633c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	22c8      	movs	r2, #200	; 0xc8
 800a27a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a28e:	f000 bf35 	b.w	800b0fc <WiFi_Conn_ND+0x18cc>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a298:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a29c:	d04a      	beq.n	800a334 <WiFi_Conn_ND+0xb04>
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d045      	beq.n	800a334 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_ok)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d040      	beq.n	800a334 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_wifi_disconnect)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b8:	2b0a      	cmp	r3, #10
 800a2ba:	d03b      	beq.n	800a334 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2c2:	2b0e      	cmp	r3, #14
 800a2c4:	d036      	beq.n	800a334 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_conectado)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2cc:	2b0f      	cmp	r3, #15
 800a2ce:	d031      	beq.n	800a334 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d6:	2b10      	cmp	r3, #16
 800a2d8:	d02c      	beq.n	800a334 <WiFi_Conn_ND+0xb04>
				{
					ConectarTCP(b);
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f7fc f886 	bl	80063ec <ConectarTCP>
						if(b->_enviaruart==1)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d124      	bne.n	800a334 <WiFi_Conn_ND+0xb04>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f7fc f9a0 	bl	8006630 <AT_ESP8266_ND>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a306:	2b01      	cmp	r3, #1
 800a308:	d109      	bne.n	800a31e <WiFi_Conn_ND+0xaee>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a316:	4619      	mov	r1, r3
 800a318:	4610      	mov	r0, r2
 800a31a:	f7f7 f86d 	bl	80013f8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	2364      	movs	r3, #100	; 0x64
 800a32e:	68b8      	ldr	r0, [r7, #8]
 800a330:	f7fa ff4a 	bl	80051c8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d009      	beq.n	800a352 <WiFi_Conn_ND+0xb22>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a344:	2b0e      	cmp	r3, #14
 800a346:	d004      	beq.n	800a352 <WiFi_Conn_ND+0xb22>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a34e:	2b0f      	cmp	r3, #15
 800a350:	d106      	bne.n	800a360 <WiFi_Conn_ND+0xb30>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f240 2261 	movw	r2, #609	; 0x261
 800a358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800a35c:	f000 beb3 	b.w	800b0c6 <WiFi_Conn_ND+0x1896>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a366:	2b02      	cmp	r3, #2
 800a368:	d005      	beq.n	800a376 <WiFi_Conn_ND+0xb46>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a370:	2b10      	cmp	r3, #16
 800a372:	f040 86a8 	bne.w	800b0c6 <WiFi_Conn_ND+0x1896>
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f240 225d 	movw	r2, #605	; 0x25d
 800a37c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800a380:	f000 bea1 	b.w	800b0c6 <WiFi_Conn_ND+0x1896>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f7fb ffad 	bl	80062e4 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a390:	2b04      	cmp	r3, #4
 800a392:	d112      	bne.n	800a3ba <WiFi_Conn_ND+0xb8a>
				{
					Cambiar_CWMODE(b);
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f7fb ffbb 	bl	8006310 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2264      	movs	r2, #100	; 0x64
 800a39e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3c0:	2b0a      	cmp	r3, #10
 800a3c2:	d004      	beq.n	800a3ce <WiFi_Conn_ND+0xb9e>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ca:	2b0d      	cmp	r3, #13
 800a3cc:	d10e      	bne.n	800a3ec <WiFi_Conn_ND+0xbbc>
				{
					ConectarWIFI(b);
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f7fb ffb4 	bl	800633c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	22c8      	movs	r2, #200	; 0xc8
 800a3d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d00a      	beq.n	800a40c <WiFi_Conn_ND+0xbdc>
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3fc:	2b10      	cmp	r3, #16
 800a3fe:	d005      	beq.n	800a40c <WiFi_Conn_ND+0xbdc>
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a406:	2b0e      	cmp	r3, #14
 800a408:	f040 865f 	bne.w	800b0ca <WiFi_Conn_ND+0x189a>
				{
					ConectarTCP(b);
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f7fb ffed 	bl	80063ec <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2200      	movs	r2, #0
 800a420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a42c:	f000 be4d 	b.w	800b0ca <WiFi_Conn_ND+0x189a>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f7fb ff57 	bl	80062e4 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a43c:	2b04      	cmp	r3, #4
 800a43e:	d112      	bne.n	800a466 <WiFi_Conn_ND+0xc36>
					{
						Cambiar_CWMODE(b);
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	f7fb ff65 	bl	8006310 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2264      	movs	r2, #100	; 0x64
 800a44a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2200      	movs	r2, #0
 800a452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a46c:	2b0a      	cmp	r3, #10
 800a46e:	d004      	beq.n	800a47a <WiFi_Conn_ND+0xc4a>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a476:	2b0d      	cmp	r3, #13
 800a478:	d10e      	bne.n	800a498 <WiFi_Conn_ND+0xc68>
					{
						ConectarWIFI(b);
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f7fb ff5e 	bl	800633c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	22c8      	movs	r2, #200	; 0xc8
 800a484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d004      	beq.n	800a4ac <WiFi_Conn_ND+0xc7c>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4a8:	2b10      	cmp	r3, #16
 800a4aa:	d10f      	bne.n	800a4cc <WiFi_Conn_ND+0xc9c>
					{
						ConectarTCP(b);
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	f7fb ff9d 	bl	80063ec <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a4b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4d2:	2b0e      	cmp	r3, #14
 800a4d4:	d005      	beq.n	800a4e2 <WiFi_Conn_ND+0xcb2>
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4dc:	2b0f      	cmp	r3, #15
 800a4de:	f040 85f6 	bne.w	800b0ce <WiFi_Conn_ND+0x189e>
					{
						if(b->_automatizacion >= WF_SEND )
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	f240 85f0 	bls.w	800b0ce <WiFi_Conn_ND+0x189e>
						{
							EnviarDatos(b);
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f7fb ffbe 	bl	8006470 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a4fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2200      	movs	r2, #0
 800a502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2200      	movs	r2, #0
 800a50a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800a50e:	f000 bdde 	b.w	800b0ce <WiFi_Conn_ND+0x189e>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a518:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a51c:	d054      	beq.n	800a5c8 <WiFi_Conn_ND+0xd98>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a524:	2b02      	cmp	r3, #2
 800a526:	d04f      	beq.n	800a5c8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_wifi_disconnect)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a52e:	2b0a      	cmp	r3, #10
 800a530:	d04a      	beq.n	800a5c8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_desconectado)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a538:	2b10      	cmp	r3, #16
 800a53a:	d045      	beq.n	800a5c8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_snd_err)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a542:	2b11      	cmp	r3, #17
 800a544:	d040      	beq.n	800a5c8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_ok_to_send)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a54c:	2b14      	cmp	r3, #20
 800a54e:	d03b      	beq.n	800a5c8 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a556:	2b12      	cmp	r3, #18
 800a558:	d036      	beq.n	800a5c8 <WiFi_Conn_ND+0xd98>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a560:	2b02      	cmp	r3, #2
 800a562:	d907      	bls.n	800a574 <WiFi_Conn_ND+0xd44>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d002      	beq.n	800a574 <WiFi_Conn_ND+0xd44>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f7fb ff7e 	bl	8006470 <EnviarDatos>
							b->_data2SND[9]=0x00;
							b->_data2SND[10]=0x00;
							b->_data2SND[11]=0x0A;
							b->_n_D2SND=12;*/
					}
						if(b->_enviaruart==1)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d124      	bne.n	800a5c8 <WiFi_Conn_ND+0xd98>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7fc f856 	bl	8006630 <AT_ESP8266_ND>
 800a584:	4602      	mov	r2, r0
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d109      	bne.n	800a5b2 <WiFi_Conn_ND+0xd82>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	f7f6 ff23 	bl	80013f8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	2364      	movs	r3, #100	; 0x64
 800a5c2:	68b8      	ldr	r0, [r7, #8]
 800a5c4:	f7fa fe00 	bl	80051c8 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ce:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a5d2:	d13b      	bne.n	800a64c <WiFi_Conn_ND+0xe1c>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d136      	bne.n	800a64c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_error)
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	d031      	beq.n	800a64c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_wifi_disconnect)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ee:	2b0a      	cmp	r3, #10
 800a5f0:	d02c      	beq.n	800a64c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_desconectado)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f8:	2b10      	cmp	r3, #16
 800a5fa:	d027      	beq.n	800a64c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_snd_err)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a602:	2b11      	cmp	r3, #17
 800a604:	d022      	beq.n	800a64c <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_enviado_error))
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a60c:	2b12      	cmp	r3, #18
 800a60e:	d01d      	beq.n	800a64c <WiFi_Conn_ND+0xe1c>
							{
								b->_enviaruart=0;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d109      	bne.n	800a636 <WiFi_Conn_ND+0xe06>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a62e:	4619      	mov	r1, r3
 800a630:	4610      	mov	r0, r2
 800a632:	f7f6 fee1 	bl	80013f8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a642:	b29a      	uxth	r2, r3
 800a644:	2364      	movs	r3, #100	; 0x64
 800a646:	68b8      	ldr	r0, [r7, #8]
 800a648:	f7fa fdbe 	bl	80051c8 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a652:	2b13      	cmp	r3, #19
 800a654:	d104      	bne.n	800a660 <WiFi_Conn_ND+0xe30>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a65c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a666:	2b02      	cmp	r3, #2
 800a668:	d014      	beq.n	800a694 <WiFi_Conn_ND+0xe64>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a670:	2b0a      	cmp	r3, #10
 800a672:	d00f      	beq.n	800a694 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_desconectado)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a67a:	2b10      	cmp	r3, #16
 800a67c:	d00a      	beq.n	800a694 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_snd_err)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a684:	2b11      	cmp	r3, #17
 800a686:	d005      	beq.n	800a694 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_enviado_error))
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a68e:	2b12      	cmp	r3, #18
 800a690:	f040 851f 	bne.w	800b0d2 <WiFi_Conn_ND+0x18a2>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800a69e:	f000 bd18 	b.w	800b0d2 <WiFi_Conn_ND+0x18a2>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800a6a2:	68f8      	ldr	r0, [r7, #12]
 800a6a4:	f7fb fe1e 	bl	80062e4 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	d112      	bne.n	800a6d8 <WiFi_Conn_ND+0xea8>
				{
					Cambiar_CWMODE(b);
 800a6b2:	68f8      	ldr	r0, [r7, #12]
 800a6b4:	f7fb fe2c 	bl	8006310 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2264      	movs	r2, #100	; 0x64
 800a6bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6de:	2b0a      	cmp	r3, #10
 800a6e0:	d004      	beq.n	800a6ec <WiFi_Conn_ND+0xebc>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e8:	2b0d      	cmp	r3, #13
 800a6ea:	d10e      	bne.n	800a70a <WiFi_Conn_ND+0xeda>
				{
					ConectarWIFI(b);
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f7fb fe25 	bl	800633c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	22c8      	movs	r2, #200	; 0xc8
 800a6f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a710:	2b0c      	cmp	r3, #12
 800a712:	d10f      	bne.n	800a734 <WiFi_Conn_ND+0xf04>
				{
					ConectarTCP(b);
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f7fb fe69 	bl	80063ec <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a720:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d00f      	beq.n	800a75e <WiFi_Conn_ND+0xf2e>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a744:	2b10      	cmp	r3, #16
 800a746:	d00a      	beq.n	800a75e <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_snd_err)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a74e:	2b11      	cmp	r3, #17
 800a750:	d005      	beq.n	800a75e <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a758:	2b12      	cmp	r3, #18
 800a75a:	f040 84bc 	bne.w	800b0d6 <WiFi_Conn_ND+0x18a6>
				{
					ConectarTCP(b);
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f7fb fe44 	bl	80063ec <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a76a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2200      	movs	r2, #0
 800a77a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a77e:	f000 bcaa 	b.w	800b0d6 <WiFi_Conn_ND+0x18a6>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f7fb fdae 	bl	80062e4 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a78e:	2b04      	cmp	r3, #4
 800a790:	d112      	bne.n	800a7b8 <WiFi_Conn_ND+0xf88>
					{
						Cambiar_CWMODE(b);
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f7fb fdbc 	bl	8006310 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2264      	movs	r2, #100	; 0x64
 800a79c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7be:	2b0a      	cmp	r3, #10
 800a7c0:	d004      	beq.n	800a7cc <WiFi_Conn_ND+0xf9c>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7c8:	2b0d      	cmp	r3, #13
 800a7ca:	d10e      	bne.n	800a7ea <WiFi_Conn_ND+0xfba>
					{
						ConectarWIFI(b);
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f7fb fdb5 	bl	800633c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	22c8      	movs	r2, #200	; 0xc8
 800a7d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d00e      	beq.n	800a812 <WiFi_Conn_ND+0xfe2>
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7fa:	2b0b      	cmp	r3, #11
 800a7fc:	d009      	beq.n	800a812 <WiFi_Conn_ND+0xfe2>
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a804:	2b0c      	cmp	r3, #12
 800a806:	d004      	beq.n	800a812 <WiFi_Conn_ND+0xfe2>
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a80e:	2b10      	cmp	r3, #16
 800a810:	d10f      	bne.n	800a832 <WiFi_Conn_ND+0x1002>
					{
						ConectarTCP(b);
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	f7fb fdea 	bl	80063ec <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a81e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2200      	movs	r2, #0
 800a826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800a832:	20c8      	movs	r0, #200	; 0xc8
 800a834:	f7f8 f814 	bl	8002860 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d916      	bls.n	800a870 <WiFi_Conn_ND+0x1040>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d011      	beq.n	800a870 <WiFi_Conn_ND+0x1040>
					{
							EnviarDatos(b);
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f7fb fe0f 	bl	8006470 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a858:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800a86c:	f000 bc46 	b.w	800b0fc <WiFi_Conn_ND+0x18cc>
							b->_estado_conexion=TCP_CONN_OK;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f240 2261 	movw	r2, #609	; 0x261
 800a876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2200      	movs	r2, #0
 800a87e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2200      	movs	r2, #0
 800a886:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a88a:	f000 bc37 	b.w	800b0fc <WiFi_Conn_ND+0x18cc>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a894:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800a898:	d045      	beq.n	800a926 <WiFi_Conn_ND+0x10f6>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d040      	beq.n	800a926 <WiFi_Conn_ND+0x10f6>
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8aa:	2b0a      	cmp	r3, #10
 800a8ac:	d03b      	beq.n	800a926 <WiFi_Conn_ND+0x10f6>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b4:	2b15      	cmp	r3, #21
 800a8b6:	d036      	beq.n	800a926 <WiFi_Conn_ND+0x10f6>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8be:	2b16      	cmp	r3, #22
 800a8c0:	d031      	beq.n	800a926 <WiFi_Conn_ND+0x10f6>
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8c8:	2b17      	cmp	r3, #23
 800a8ca:	d02c      	beq.n	800a926 <WiFi_Conn_ND+0x10f6>
							{
								CrearServidorTCP(b);
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	f7fb fda3 	bl	8006418 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d124      	bne.n	800a926 <WiFi_Conn_ND+0x10f6>
										{
											b->_estado=AT_ESP8266_ND(b);
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f7fb fea7 	bl	8006630 <AT_ESP8266_ND>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d109      	bne.n	800a910 <WiFi_Conn_ND+0x10e0>
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a908:	4619      	mov	r1, r3
 800a90a:	4610      	mov	r0, r2
 800a90c:	f7f6 fd74 	bl	80013f8 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	2364      	movs	r3, #100	; 0x64
 800a920:	68b8      	ldr	r0, [r7, #8]
 800a922:	f7fa fc51 	bl	80051c8 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a92c:	2b15      	cmp	r3, #21
 800a92e:	d004      	beq.n	800a93a <WiFi_Conn_ND+0x110a>
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a936:	2b17      	cmp	r3, #23
 800a938:	d104      	bne.n	800a944 <WiFi_Conn_ND+0x1114>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f240 3229 	movw	r2, #809	; 0x329
 800a940:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a94a:	2b16      	cmp	r3, #22
 800a94c:	f040 83c5 	bne.w	800b0da <WiFi_Conn_ND+0x18aa>
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f240 3225 	movw	r2, #805	; 0x325
 800a956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800a95a:	e3be      	b.n	800b0da <WiFi_Conn_ND+0x18aa>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f7fb fcc1 	bl	80062e4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a968:	2b04      	cmp	r3, #4
 800a96a:	d112      	bne.n	800a992 <WiFi_Conn_ND+0x1162>
							{
								Cambiar_CWMODE(b);
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f7fb fccf 	bl	8006310 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2264      	movs	r2, #100	; 0x64
 800a976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a998:	2b0a      	cmp	r3, #10
 800a99a:	d004      	beq.n	800a9a6 <WiFi_Conn_ND+0x1176>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9a2:	2b0d      	cmp	r3, #13
 800a9a4:	d10e      	bne.n	800a9c4 <WiFi_Conn_ND+0x1194>
							{
								ConectarWIFI(b);
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f7fb fcc8 	bl	800633c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	22c8      	movs	r2, #200	; 0xc8
 800a9b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d005      	beq.n	800a9da <WiFi_Conn_ND+0x11aa>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9d4:	2b10      	cmp	r3, #16
 800a9d6:	f040 8382 	bne.w	800b0de <WiFi_Conn_ND+0x18ae>
							{
								ConectarTCP(b);
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f7fb fd06 	bl	80063ec <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a9e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800a9fa:	e370      	b.n	800b0de <WiFi_Conn_ND+0x18ae>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f7fb fc71 	bl	80062e4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa08:	2b04      	cmp	r3, #4
 800aa0a:	d112      	bne.n	800aa32 <WiFi_Conn_ND+0x1202>
							{
								Cambiar_CWMODE(b);
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f7fb fc7f 	bl	8006310 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2264      	movs	r2, #100	; 0x64
 800aa16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa38:	2b0a      	cmp	r3, #10
 800aa3a:	d004      	beq.n	800aa46 <WiFi_Conn_ND+0x1216>
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa42:	2b0d      	cmp	r3, #13
 800aa44:	d10e      	bne.n	800aa64 <WiFi_Conn_ND+0x1234>
							{
								ConectarWIFI(b);
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f7fb fc78 	bl	800633c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	22c8      	movs	r2, #200	; 0xc8
 800aa50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d005      	beq.n	800aa7a <WiFi_Conn_ND+0x124a>
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa74:	2b10      	cmp	r3, #16
 800aa76:	f040 8334 	bne.w	800b0e2 <WiFi_Conn_ND+0x18b2>
							{
								ConectarTCP(b);
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f7fb fcb6 	bl	80063ec <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aa86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800aa9a:	e322      	b.n	800b0e2 <WiFi_Conn_ND+0x18b2>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f7fb fc21 	bl	80062e4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa8:	2b04      	cmp	r3, #4
 800aaaa:	d112      	bne.n	800aad2 <WiFi_Conn_ND+0x12a2>
							{
								Cambiar_CWMODE(b);
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f7fb fc2f 	bl	8006310 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2264      	movs	r2, #100	; 0x64
 800aab6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2200      	movs	r2, #0
 800aac6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aad8:	2b0a      	cmp	r3, #10
 800aada:	d004      	beq.n	800aae6 <WiFi_Conn_ND+0x12b6>
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aae2:	2b0d      	cmp	r3, #13
 800aae4:	d10e      	bne.n	800ab04 <WiFi_Conn_ND+0x12d4>
							{
								ConectarWIFI(b);
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f7fb fc28 	bl	800633c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	22c8      	movs	r2, #200	; 0xc8
 800aaf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d005      	beq.n	800ab1a <WiFi_Conn_ND+0x12ea>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab14:	2b10      	cmp	r3, #16
 800ab16:	f040 82e6 	bne.w	800b0e6 <WiFi_Conn_ND+0x18b6>
							{
								ConectarTCP(b);
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f7fb fc66 	bl	80063ec <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ab26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800ab3a:	e2d4      	b.n	800b0e6 <WiFi_Conn_ND+0x18b6>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f7fb fbd1 	bl	80062e4 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab48:	2b04      	cmp	r3, #4
 800ab4a:	d112      	bne.n	800ab72 <WiFi_Conn_ND+0x1342>
							{
								Cambiar_CWMODE(b);
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f7fb fbdf 	bl	8006310 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2264      	movs	r2, #100	; 0x64
 800ab56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab78:	2b0a      	cmp	r3, #10
 800ab7a:	d004      	beq.n	800ab86 <WiFi_Conn_ND+0x1356>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab82:	2b0d      	cmp	r3, #13
 800ab84:	d10e      	bne.n	800aba4 <WiFi_Conn_ND+0x1374>
							{
								ConectarWIFI(b);
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f7fb fbd8 	bl	800633c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	22c8      	movs	r2, #200	; 0xc8
 800ab90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d005      	beq.n	800abba <WiFi_Conn_ND+0x138a>
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb4:	2b10      	cmp	r3, #16
 800abb6:	f040 8298 	bne.w	800b0ea <WiFi_Conn_ND+0x18ba>
							{
								ConectarTCP(b);
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f7fb fc16 	bl	80063ec <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800abc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800abda:	e286      	b.n	800b0ea <WiFi_Conn_ND+0x18ba>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f7fb fb81 	bl	80062e4 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2201      	movs	r2, #1
 800abe6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf0:	2b04      	cmp	r3, #4
 800abf2:	d112      	bne.n	800ac1a <WiFi_Conn_ND+0x13ea>
								{
									Cambiar_CWMODE(b);
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f7fb fb8b 	bl	8006310 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2264      	movs	r2, #100	; 0x64
 800abfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac20:	2b0a      	cmp	r3, #10
 800ac22:	d004      	beq.n	800ac2e <WiFi_Conn_ND+0x13fe>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac2a:	2b0d      	cmp	r3, #13
 800ac2c:	d10e      	bne.n	800ac4c <WiFi_Conn_ND+0x141c>
								{
									ConectarWIFI(b);
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f7fb fb84 	bl	800633c <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	22c8      	movs	r2, #200	; 0xc8
 800ac38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2200      	movs	r2, #0
 800ac48:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	d004      	beq.n	800ac60 <WiFi_Conn_ND+0x1430>
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac5c:	2b10      	cmp	r3, #16
 800ac5e:	d10f      	bne.n	800ac80 <WiFi_Conn_ND+0x1450>
								{
									ConectarTCP(b);
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f7fb fbc3 	bl	80063ec <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ac6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	f040 8231 	bne.w	800b0ee <WiFi_Conn_ND+0x18be>
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	f000 822b 	beq.w	800b0ee <WiFi_Conn_ND+0x18be>
								{
									EnviarDatosSRVR(b);
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f7fb fbd3 	bl	8006444 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f44f 7261 	mov.w	r2, #900	; 0x384
 800aca4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2200      	movs	r2, #0
 800acac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2200      	movs	r2, #0
 800acb4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800acb8:	e219      	b.n	800b0ee <WiFi_Conn_ND+0x18be>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acc0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800acc4:	d063      	beq.n	800ad8e <WiFi_Conn_ND+0x155e>
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800accc:	2b02      	cmp	r3, #2
 800acce:	d05e      	beq.n	800ad8e <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_disconnect)&&
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800acd6:	2b0a      	cmp	r3, #10
 800acd8:	d059      	beq.n	800ad8e <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_connected)&&
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800ace0:	2b0b      	cmp	r3, #11
 800ace2:	d054      	beq.n	800ad8e <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_gotip)&&
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800acea:	2b0c      	cmp	r3, #12
 800acec:	d04f      	beq.n	800ad8e <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_desconectado)&&
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800acf4:	2b10      	cmp	r3, #16
 800acf6:	d04a      	beq.n	800ad8e <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_snd_err)&&
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800acfe:	2b11      	cmp	r3, #17
 800ad00:	d045      	beq.n	800ad8e <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800ad08:	2b12      	cmp	r3, #18
 800ad0a:	d040      	beq.n	800ad8e <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800ad12:	2b13      	cmp	r3, #19
 800ad14:	d03b      	beq.n	800ad8e <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800ad1c:	2b16      	cmp	r3, #22
 800ad1e:	d036      	beq.n	800ad8e <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad26:	2b19      	cmp	r3, #25
 800ad28:	d031      	beq.n	800ad8e <WiFi_Conn_ND+0x155e>
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d02c      	beq.n	800ad8e <WiFi_Conn_ND+0x155e>
								{
								EnviarDatosSRVR(b);
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	f7fb fb85 	bl	8006444 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d124      	bne.n	800ad8e <WiFi_Conn_ND+0x155e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f7fb fc73 	bl	8006630 <AT_ESP8266_ND>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2200      	movs	r2, #0
 800ad56:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d109      	bne.n	800ad78 <WiFi_Conn_ND+0x1548>
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ad70:	4619      	mov	r1, r3
 800ad72:	4610      	mov	r0, r2
 800ad74:	f7f6 fb40 	bl	80013f8 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ad84:	b29a      	uxth	r2, r3
 800ad86:	2364      	movs	r3, #100	; 0x64
 800ad88:	68b8      	ldr	r0, [r7, #8]
 800ad8a:	f7fa fa1d 	bl	80051c8 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad94:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800ad98:	d154      	bne.n	800ae44 <WiFi_Conn_ND+0x1614>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d14f      	bne.n	800ae44 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_error)&&
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800adaa:	2b02      	cmp	r3, #2
 800adac:	d04a      	beq.n	800ae44 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_disconnect)&&
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800adb4:	2b0a      	cmp	r3, #10
 800adb6:	d045      	beq.n	800ae44 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_connected)&&
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800adbe:	2b0b      	cmp	r3, #11
 800adc0:	d040      	beq.n	800ae44 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_gotip)&&
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800adc8:	2b0c      	cmp	r3, #12
 800adca:	d03b      	beq.n	800ae44 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_desconectado)&&
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800add2:	2b10      	cmp	r3, #16
 800add4:	d036      	beq.n	800ae44 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_snd_err)&&
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800addc:	2b11      	cmp	r3, #17
 800adde:	d031      	beq.n	800ae44 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_error)&&
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800ade6:	2b12      	cmp	r3, #18
 800ade8:	d02c      	beq.n	800ae44 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800adf0:	2b13      	cmp	r3, #19
 800adf2:	d027      	beq.n	800ae44 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800adfa:	2b16      	cmp	r3, #22
 800adfc:	d022      	beq.n	800ae44 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae04:	2b19      	cmp	r3, #25
 800ae06:	d01d      	beq.n	800ae44 <WiFi_Conn_ND+0x1614>
										{
											b->_enviaruart=0;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800ae16:	2b01      	cmp	r3, #1
 800ae18:	d109      	bne.n	800ae2e <WiFi_Conn_ND+0x15fe>
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ae26:	4619      	mov	r1, r3
 800ae28:	4610      	mov	r0, r2
 800ae2a:	f7f6 fae5 	bl	80013f8 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	2364      	movs	r3, #100	; 0x64
 800ae3e:	68b8      	ldr	r0, [r7, #8]
 800ae40:	f7fa f9c2 	bl	80051c8 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae4a:	2b13      	cmp	r3, #19
 800ae4c:	d104      	bne.n	800ae58 <WiFi_Conn_ND+0x1628>
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f240 328d 	movw	r2, #909	; 0x38d
 800ae54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d02d      	beq.n	800aebe <WiFi_Conn_ND+0x168e>
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d028      	beq.n	800aebe <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800ae72:	2b0a      	cmp	r3, #10
 800ae74:	d023      	beq.n	800aebe <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae7c:	2b0b      	cmp	r3, #11
 800ae7e:	d01e      	beq.n	800aebe <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800ae86:	2b0c      	cmp	r3, #12
 800ae88:	d019      	beq.n	800aebe <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae90:	2b10      	cmp	r3, #16
 800ae92:	d014      	beq.n	800aebe <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800ae9a:	2b11      	cmp	r3, #17
 800ae9c:	d00f      	beq.n	800aebe <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aea4:	2b12      	cmp	r3, #18
 800aea6:	d00a      	beq.n	800aebe <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800aeae:	2b16      	cmp	r3, #22
 800aeb0:	d005      	beq.n	800aebe <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb8:	2b19      	cmp	r3, #25
 800aeba:	f040 811a 	bne.w	800b0f2 <WiFi_Conn_ND+0x18c2>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f240 3289 	movw	r2, #905	; 0x389
 800aec4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800aec8:	e113      	b.n	800b0f2 <WiFi_Conn_ND+0x18c2>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f7fb fa0a 	bl	80062e4 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aed6:	2b04      	cmp	r3, #4
 800aed8:	d009      	beq.n	800aeee <WiFi_Conn_ND+0x16be>
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aee0:	2b0b      	cmp	r3, #11
 800aee2:	d004      	beq.n	800aeee <WiFi_Conn_ND+0x16be>
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeea:	2b0c      	cmp	r3, #12
 800aeec:	d112      	bne.n	800af14 <WiFi_Conn_ND+0x16e4>
							{
								Cambiar_CWMODE(b);
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f7fb fa0e 	bl	8006310 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2264      	movs	r2, #100	; 0x64
 800aef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2200      	movs	r2, #0
 800af00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2200      	movs	r2, #0
 800af08:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af1a:	2b0a      	cmp	r3, #10
 800af1c:	d004      	beq.n	800af28 <WiFi_Conn_ND+0x16f8>
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af24:	2b0d      	cmp	r3, #13
 800af26:	d10e      	bne.n	800af46 <WiFi_Conn_ND+0x1716>
							{
								ConectarWIFI(b);
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f7fb fa07 	bl	800633c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	22c8      	movs	r2, #200	; 0xc8
 800af32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2200      	movs	r2, #0
 800af3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2200      	movs	r2, #0
 800af42:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af4c:	2b16      	cmp	r3, #22
 800af4e:	d10c      	bne.n	800af6a <WiFi_Conn_ND+0x173a>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f240 3225 	movw	r2, #805	; 0x325
 800af56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2200      	movs	r2, #0
 800af66:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af70:	2b18      	cmp	r3, #24
 800af72:	d10c      	bne.n	800af8e <WiFi_Conn_ND+0x175e>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f240 3229 	movw	r2, #809	; 0x329
 800af7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2200      	movs	r2, #0
 800af82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af94:	2b19      	cmp	r3, #25
 800af96:	d008      	beq.n	800afaa <WiFi_Conn_ND+0x177a>
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af9e:	2b11      	cmp	r3, #17
 800afa0:	d003      	beq.n	800afaa <WiFi_Conn_ND+0x177a>
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2212      	movs	r2, #18
 800afa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	f040 80a0 	bne.w	800b0f6 <WiFi_Conn_ND+0x18c6>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f44f 7261 	mov.w	r2, #900	; 0x384
 800afbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2200      	movs	r2, #0
 800afcc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800afd0:	e091      	b.n	800b0f6 <WiFi_Conn_ND+0x18c6>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f7fb f986 	bl	80062e4 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afde:	2b04      	cmp	r3, #4
 800afe0:	d009      	beq.n	800aff6 <WiFi_Conn_ND+0x17c6>
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afe8:	2b0b      	cmp	r3, #11
 800afea:	d004      	beq.n	800aff6 <WiFi_Conn_ND+0x17c6>
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aff2:	2b0c      	cmp	r3, #12
 800aff4:	d112      	bne.n	800b01c <WiFi_Conn_ND+0x17ec>
								{
									Cambiar_CWMODE(b);
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f7fb f98a 	bl	8006310 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2264      	movs	r2, #100	; 0x64
 800b000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2200      	movs	r2, #0
 800b008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b022:	2b0a      	cmp	r3, #10
 800b024:	d004      	beq.n	800b030 <WiFi_Conn_ND+0x1800>
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b02c:	2b0d      	cmp	r3, #13
 800b02e:	d10e      	bne.n	800b04e <WiFi_Conn_ND+0x181e>
								{
									ConectarWIFI(b);
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f7fb f983 	bl	800633c <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	22c8      	movs	r2, #200	; 0xc8
 800b03a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2200      	movs	r2, #0
 800b042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b054:	2b01      	cmp	r3, #1
 800b056:	d004      	beq.n	800b062 <WiFi_Conn_ND+0x1832>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d14b      	bne.n	800b0fa <WiFi_Conn_ND+0x18ca>
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d046      	beq.n	800b0fa <WiFi_Conn_ND+0x18ca>
								{
									EnviarDatosSRVR(b);
 800b06c:	68f8      	ldr	r0, [r7, #12]
 800b06e:	f7fb f9e9 	bl	8006444 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2200      	movs	r2, #0
 800b080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2200      	movs	r2, #0
 800b088:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2200      	movs	r2, #0
 800b090:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b09c:	e02d      	b.n	800b0fa <WiFi_Conn_ND+0x18ca>
			break;
 800b09e:	bf00      	nop
 800b0a0:	e02c      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
			break;
 800b0a2:	bf00      	nop
 800b0a4:	e02a      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
			break;
 800b0a6:	bf00      	nop
 800b0a8:	e028      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
			break;
 800b0aa:	bf00      	nop
 800b0ac:	e026      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
			break;
 800b0ae:	bf00      	nop
 800b0b0:	e024      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
			break;
 800b0b2:	bf00      	nop
 800b0b4:	e022      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
			break;
 800b0b6:	bf00      	nop
 800b0b8:	e020      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
			break;
 800b0ba:	bf00      	nop
 800b0bc:	e01e      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
			break;
 800b0be:	bf00      	nop
 800b0c0:	e01c      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
			break;
 800b0c2:	bf00      	nop
 800b0c4:	e01a      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
			break;
 800b0c6:	bf00      	nop
 800b0c8:	e018      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
			break;
 800b0ca:	bf00      	nop
 800b0cc:	e016      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
			break;
 800b0ce:	bf00      	nop
 800b0d0:	e014      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
			break;
 800b0d2:	bf00      	nop
 800b0d4:	e012      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
			break;
 800b0d6:	bf00      	nop
 800b0d8:	e010      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
						break;
 800b0da:	bf00      	nop
 800b0dc:	e00e      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
						break;
 800b0de:	bf00      	nop
 800b0e0:	e00c      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
						break;
 800b0e2:	bf00      	nop
 800b0e4:	e00a      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
						break;
 800b0e6:	bf00      	nop
 800b0e8:	e008      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
						break;
 800b0ea:	bf00      	nop
 800b0ec:	e006      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
						break;
 800b0ee:	bf00      	nop
 800b0f0:	e004      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
						break;
 800b0f2:	bf00      	nop
 800b0f4:	e002      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
						break;
 800b0f6:	bf00      	nop
 800b0f8:	e000      	b.n	800b0fc <WiFi_Conn_ND+0x18cc>
						break;
 800b0fa:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b102:	4618      	mov	r0, r3
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop

0800b10c <httpPOST>:




httpPOST(char * endpoint, char* server_ip, char * port,uint16_t dp_cartucho, uint16_t dp_filtro, uint16_t ciclo_ev1, uint16_t ciclo_ev2,uint16_t ciclo_ev3,uint16_t ciclo_ev4,uint16_t ciclo_ev5,uint16_t ciclo_ev6,uint16_t ciclo_ev7,uint16_t ciclo_ev8, uint16_t devId, char  * post, char * body, int max_char)
{
 800b10c:	b5b0      	push	{r4, r5, r7, lr}
 800b10e:	b09c      	sub	sp, #112	; 0x70
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	607a      	str	r2, [r7, #4]
 800b118:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800b11a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b11e:	2200      	movs	r2, #0
 800b120:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b126:	2200      	movs	r2, #0
 800b128:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b12a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b12e:	f7f5 f861 	bl	80001f4 <strlen>
 800b132:	4603      	mov	r3, r0
 800b134:	461a      	mov	r2, r3
 800b136:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b13a:	4413      	add	r3, r2
 800b13c:	4aeb      	ldr	r2, [pc, #940]	; (800b4ec <httpPOST+0x3e0>)
 800b13e:	6810      	ldr	r0, [r2, #0]
 800b140:	6018      	str	r0, [r3, #0]
 800b142:	8892      	ldrh	r2, [r2, #4]
 800b144:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f7f5 f854 	bl	80001f4 <strlen>
 800b14c:	4603      	mov	r3, r0
 800b14e:	461a      	mov	r2, r3
 800b150:	68f9      	ldr	r1, [r7, #12]
 800b152:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b156:	f003 fecc 	bl	800eef2 <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b15a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b15e:	f7f5 f849 	bl	80001f4 <strlen>
 800b162:	4603      	mov	r3, r0
 800b164:	461a      	mov	r2, r3
 800b166:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b16a:	4413      	add	r3, r2
 800b16c:	49e0      	ldr	r1, [pc, #896]	; (800b4f0 <httpPOST+0x3e4>)
 800b16e:	461a      	mov	r2, r3
 800b170:	460b      	mov	r3, r1
 800b172:	cb03      	ldmia	r3!, {r0, r1}
 800b174:	6010      	str	r0, [r2, #0]
 800b176:	6051      	str	r1, [r2, #4]
 800b178:	8819      	ldrh	r1, [r3, #0]
 800b17a:	789b      	ldrb	r3, [r3, #2]
 800b17c:	8111      	strh	r1, [r2, #8]
 800b17e:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b180:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b184:	f7f5 f836 	bl	80001f4 <strlen>
 800b188:	4603      	mov	r3, r0
 800b18a:	461a      	mov	r2, r3
 800b18c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b190:	4413      	add	r3, r2
 800b192:	4ad8      	ldr	r2, [pc, #864]	; (800b4f4 <httpPOST+0x3e8>)
 800b194:	8811      	ldrh	r1, [r2, #0]
 800b196:	7892      	ldrb	r2, [r2, #2]
 800b198:	8019      	strh	r1, [r3, #0]
 800b19a:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b19c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b1a0:	f7f5 f828 	bl	80001f4 <strlen>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b1ac:	4413      	add	r3, r2
 800b1ae:	4ad2      	ldr	r2, [pc, #840]	; (800b4f8 <httpPOST+0x3ec>)
 800b1b0:	6810      	ldr	r0, [r2, #0]
 800b1b2:	6018      	str	r0, [r3, #0]
 800b1b4:	8891      	ldrh	r1, [r2, #4]
 800b1b6:	7992      	ldrb	r2, [r2, #6]
 800b1b8:	8099      	strh	r1, [r3, #4]
 800b1ba:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b1bc:	68b8      	ldr	r0, [r7, #8]
 800b1be:	f7f5 f819 	bl	80001f4 <strlen>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	68b9      	ldr	r1, [r7, #8]
 800b1c8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b1cc:	f003 fe91 	bl	800eef2 <strncat>
	strncat(post,":",1);
 800b1d0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b1d4:	f7f5 f80e 	bl	80001f4 <strlen>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	461a      	mov	r2, r3
 800b1dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b1e0:	4413      	add	r3, r2
 800b1e2:	49c6      	ldr	r1, [pc, #792]	; (800b4fc <httpPOST+0x3f0>)
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	881b      	ldrh	r3, [r3, #0]
 800b1ea:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f7f5 f801 	bl	80001f4 <strlen>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	461a      	mov	r2, r3
 800b1f6:	6879      	ldr	r1, [r7, #4]
 800b1f8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b1fc:	f003 fe79 	bl	800eef2 <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b200:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b204:	f7f4 fff6 	bl	80001f4 <strlen>
 800b208:	4603      	mov	r3, r0
 800b20a:	461a      	mov	r2, r3
 800b20c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b210:	4413      	add	r3, r2
 800b212:	4ab8      	ldr	r2, [pc, #736]	; (800b4f4 <httpPOST+0x3e8>)
 800b214:	8811      	ldrh	r1, [r2, #0]
 800b216:	7892      	ldrb	r2, [r2, #2]
 800b218:	8019      	strh	r1, [r3, #0]
 800b21a:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b21c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b220:	f7f4 ffe8 	bl	80001f4 <strlen>
 800b224:	4603      	mov	r3, r0
 800b226:	461a      	mov	r2, r3
 800b228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b22c:	4413      	add	r3, r2
 800b22e:	4ab4      	ldr	r2, [pc, #720]	; (800b500 <httpPOST+0x3f4>)
 800b230:	461d      	mov	r5, r3
 800b232:	4614      	mov	r4, r2
 800b234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b236:	6028      	str	r0, [r5, #0]
 800b238:	6069      	str	r1, [r5, #4]
 800b23a:	60aa      	str	r2, [r5, #8]
 800b23c:	60eb      	str	r3, [r5, #12]
 800b23e:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b240:	6128      	str	r0, [r5, #16]
 800b242:	6169      	str	r1, [r5, #20]
 800b244:	61aa      	str	r2, [r5, #24]
 800b246:	8823      	ldrh	r3, [r4, #0]
 800b248:	78a2      	ldrb	r2, [r4, #2]
 800b24a:	83ab      	strh	r3, [r5, #28]
 800b24c:	4613      	mov	r3, r2
 800b24e:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b250:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b254:	f7f4 ffce 	bl	80001f4 <strlen>
 800b258:	4603      	mov	r3, r0
 800b25a:	461a      	mov	r2, r3
 800b25c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b260:	4413      	add	r3, r2
 800b262:	4aa4      	ldr	r2, [pc, #656]	; (800b4f4 <httpPOST+0x3e8>)
 800b264:	8811      	ldrh	r1, [r2, #0]
 800b266:	7892      	ldrb	r2, [r2, #2]
 800b268:	8019      	strh	r1, [r3, #0]
 800b26a:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b26c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b270:	f7f4 ffc0 	bl	80001f4 <strlen>
 800b274:	4603      	mov	r3, r0
 800b276:	461a      	mov	r2, r3
 800b278:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b27c:	4413      	add	r3, r2
 800b27e:	4aa1      	ldr	r2, [pc, #644]	; (800b504 <httpPOST+0x3f8>)
 800b280:	461c      	mov	r4, r3
 800b282:	4615      	mov	r5, r2
 800b284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b286:	6020      	str	r0, [r4, #0]
 800b288:	6061      	str	r1, [r4, #4]
 800b28a:	60a2      	str	r2, [r4, #8]
 800b28c:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _cartucho[8];
	_cartucho[0]='\0';
 800b28e:	2300      	movs	r3, #0
 800b290:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	INTOA( dp_cartucho,_cartucho);
 800b294:	887b      	ldrh	r3, [r7, #2]
 800b296:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800b29a:	4611      	mov	r1, r2
 800b29c:	4618      	mov	r0, r3
 800b29e:	f003 fbfd 	bl	800ea9c <INTOA>
	char _filtro[8];
	_filtro[0]='\0';
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	INTOA( dp_filtro, _filtro);
 800b2a8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800b2ac:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f003 fbf2 	bl	800ea9c <INTOA>
	char _ev1[8];
	_ev1[0]='\0';
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	INTOA( ciclo_ev1, _ev1);
 800b2be:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b2c2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b2c6:	4611      	mov	r1, r2
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f003 fbe7 	bl	800ea9c <INTOA>
	char _ev2[8];
	_ev2[0]='\0';
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	INTOA( ciclo_ev2, _ev2);
 800b2d4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800b2d8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b2dc:	4611      	mov	r1, r2
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f003 fbdc 	bl	800ea9c <INTOA>
	char _ev3[8];
	_ev3[0]='\0';
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	INTOA( ciclo_ev3, _ev3);
 800b2ea:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800b2ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b2f2:	4611      	mov	r1, r2
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f003 fbd1 	bl	800ea9c <INTOA>
	char _ev4[8];
	_ev4[0]='\0';
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( ciclo_ev4, _ev4);
 800b300:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800b304:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b308:	4611      	mov	r1, r2
 800b30a:	4618      	mov	r0, r3
 800b30c:	f003 fbc6 	bl	800ea9c <INTOA>
	char _ev5[8];
	_ev5[0]='\0';
 800b310:	2300      	movs	r3, #0
 800b312:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	INTOA( ciclo_ev5, _ev5);
 800b316:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b31a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b31e:	4611      	mov	r1, r2
 800b320:	4618      	mov	r0, r3
 800b322:	f003 fbbb 	bl	800ea9c <INTOA>
	char _ev6[8];
	_ev6[0]='\0';
 800b326:	2300      	movs	r3, #0
 800b328:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	INTOA( ciclo_ev6, _ev6);
 800b32c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800b330:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800b334:	4611      	mov	r1, r2
 800b336:	4618      	mov	r0, r3
 800b338:	f003 fbb0 	bl	800ea9c <INTOA>
	char _ev7[8];
	_ev7[0]='\0';
 800b33c:	2300      	movs	r3, #0
 800b33e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	INTOA( ciclo_ev7, _ev7);
 800b342:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b346:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b34a:	4611      	mov	r1, r2
 800b34c:	4618      	mov	r0, r3
 800b34e:	f003 fba5 	bl	800ea9c <INTOA>
	char _ev8[8];
	_ev8[0]='\0';
 800b352:	2300      	movs	r3, #0
 800b354:	f887 3020 	strb.w	r3, [r7, #32]
	INTOA( ciclo_ev8, _ev8);
 800b358:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800b35c:	f107 0220 	add.w	r2, r7, #32
 800b360:	4611      	mov	r1, r2
 800b362:	4618      	mov	r0, r3
 800b364:	f003 fb9a 	bl	800ea9c <INTOA>
	char _devId[8];
	_devId[0]='\0';
 800b368:	2300      	movs	r3, #0
 800b36a:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800b36c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800b370:	f107 0218 	add.w	r2, r7, #24
 800b374:	4611      	mov	r1, r2
 800b376:	4618      	mov	r0, r3
 800b378:	f003 fb90 	bl	800ea9c <INTOA>

	strncat(body,cartucho,strlen(cartucho));
 800b37c:	4862      	ldr	r0, [pc, #392]	; (800b508 <httpPOST+0x3fc>)
 800b37e:	f7f4 ff39 	bl	80001f4 <strlen>
 800b382:	4603      	mov	r3, r0
 800b384:	461a      	mov	r2, r3
 800b386:	4960      	ldr	r1, [pc, #384]	; (800b508 <httpPOST+0x3fc>)
 800b388:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b38c:	f003 fdb1 	bl	800eef2 <strncat>
	strncat(body,_cartucho,strlen(_cartucho));
 800b390:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b394:	4618      	mov	r0, r3
 800b396:	f7f4 ff2d 	bl	80001f4 <strlen>
 800b39a:	4602      	mov	r2, r0
 800b39c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b3a6:	f003 fda4 	bl	800eef2 <strncat>
	strncat(body,filtro,strlen(filtro));
 800b3aa:	4858      	ldr	r0, [pc, #352]	; (800b50c <httpPOST+0x400>)
 800b3ac:	f7f4 ff22 	bl	80001f4 <strlen>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	4955      	ldr	r1, [pc, #340]	; (800b50c <httpPOST+0x400>)
 800b3b6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b3ba:	f003 fd9a 	bl	800eef2 <strncat>
	strncat(body,_filtro,strlen(_filtro));
 800b3be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7f4 ff16 	bl	80001f4 <strlen>
 800b3c8:	4602      	mov	r2, r0
 800b3ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b3d4:	f003 fd8d 	bl	800eef2 <strncat>
	strncat(body,ev1,strlen(ev1));
 800b3d8:	484d      	ldr	r0, [pc, #308]	; (800b510 <httpPOST+0x404>)
 800b3da:	f7f4 ff0b 	bl	80001f4 <strlen>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	494b      	ldr	r1, [pc, #300]	; (800b510 <httpPOST+0x404>)
 800b3e4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b3e8:	f003 fd83 	bl	800eef2 <strncat>
	strncat(body,_ev1,strlen(_ev1));
 800b3ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f7f4 feff 	bl	80001f4 <strlen>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b402:	f003 fd76 	bl	800eef2 <strncat>
	strncat(body,ev2,strlen(ev2));
 800b406:	4843      	ldr	r0, [pc, #268]	; (800b514 <httpPOST+0x408>)
 800b408:	f7f4 fef4 	bl	80001f4 <strlen>
 800b40c:	4603      	mov	r3, r0
 800b40e:	461a      	mov	r2, r3
 800b410:	4940      	ldr	r1, [pc, #256]	; (800b514 <httpPOST+0x408>)
 800b412:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b416:	f003 fd6c 	bl	800eef2 <strncat>
	strncat(body,_ev2,strlen(_ev2));
 800b41a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b41e:	4618      	mov	r0, r3
 800b420:	f7f4 fee8 	bl	80001f4 <strlen>
 800b424:	4602      	mov	r2, r0
 800b426:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b42a:	4619      	mov	r1, r3
 800b42c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b430:	f003 fd5f 	bl	800eef2 <strncat>
	strncat(body,ev3,strlen(ev3));
 800b434:	4838      	ldr	r0, [pc, #224]	; (800b518 <httpPOST+0x40c>)
 800b436:	f7f4 fedd 	bl	80001f4 <strlen>
 800b43a:	4603      	mov	r3, r0
 800b43c:	461a      	mov	r2, r3
 800b43e:	4936      	ldr	r1, [pc, #216]	; (800b518 <httpPOST+0x40c>)
 800b440:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b444:	f003 fd55 	bl	800eef2 <strncat>
	strncat(body,_ev3,strlen(_ev3));
 800b448:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7f4 fed1 	bl	80001f4 <strlen>
 800b452:	4602      	mov	r2, r0
 800b454:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b458:	4619      	mov	r1, r3
 800b45a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b45e:	f003 fd48 	bl	800eef2 <strncat>
	strncat(body,ev4,strlen(ev4));
 800b462:	482e      	ldr	r0, [pc, #184]	; (800b51c <httpPOST+0x410>)
 800b464:	f7f4 fec6 	bl	80001f4 <strlen>
 800b468:	4603      	mov	r3, r0
 800b46a:	461a      	mov	r2, r3
 800b46c:	492b      	ldr	r1, [pc, #172]	; (800b51c <httpPOST+0x410>)
 800b46e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b472:	f003 fd3e 	bl	800eef2 <strncat>
	strncat(body,_ev4,strlen(_ev4));
 800b476:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7f4 feba 	bl	80001f4 <strlen>
 800b480:	4602      	mov	r2, r0
 800b482:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b486:	4619      	mov	r1, r3
 800b488:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b48c:	f003 fd31 	bl	800eef2 <strncat>
	strncat(body,ev5,strlen(ev5));
 800b490:	4823      	ldr	r0, [pc, #140]	; (800b520 <httpPOST+0x414>)
 800b492:	f7f4 feaf 	bl	80001f4 <strlen>
 800b496:	4603      	mov	r3, r0
 800b498:	461a      	mov	r2, r3
 800b49a:	4921      	ldr	r1, [pc, #132]	; (800b520 <httpPOST+0x414>)
 800b49c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b4a0:	f003 fd27 	bl	800eef2 <strncat>
	strncat(body,_ev5,strlen(_ev5));
 800b4a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7f4 fea3 	bl	80001f4 <strlen>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b4ba:	f003 fd1a 	bl	800eef2 <strncat>
	strncat(body,ev6,strlen(ev6));
 800b4be:	4819      	ldr	r0, [pc, #100]	; (800b524 <httpPOST+0x418>)
 800b4c0:	f7f4 fe98 	bl	80001f4 <strlen>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	4916      	ldr	r1, [pc, #88]	; (800b524 <httpPOST+0x418>)
 800b4ca:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b4ce:	f003 fd10 	bl	800eef2 <strncat>
	strncat(body,_ev6,strlen(_ev6));
 800b4d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7f4 fe8c 	bl	80001f4 <strlen>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b4e8:	e01e      	b.n	800b528 <httpPOST+0x41c>
 800b4ea:	bf00      	nop
 800b4ec:	080105d8 	.word	0x080105d8
 800b4f0:	080105e0 	.word	0x080105e0
 800b4f4:	080105ec 	.word	0x080105ec
 800b4f8:	080105f0 	.word	0x080105f0
 800b4fc:	080105f8 	.word	0x080105f8
 800b500:	080105fc 	.word	0x080105fc
 800b504:	0801061c 	.word	0x0801061c
 800b508:	20000090 	.word	0x20000090
 800b50c:	200000a0 	.word	0x200000a0
 800b510:	200000b0 	.word	0x200000b0
 800b514:	200000c0 	.word	0x200000c0
 800b518:	200000d0 	.word	0x200000d0
 800b51c:	200000e0 	.word	0x200000e0
 800b520:	200000f0 	.word	0x200000f0
 800b524:	20000100 	.word	0x20000100
 800b528:	f003 fce3 	bl	800eef2 <strncat>
	strncat(body,ev7,strlen(ev7));
 800b52c:	484a      	ldr	r0, [pc, #296]	; (800b658 <httpPOST+0x54c>)
 800b52e:	f7f4 fe61 	bl	80001f4 <strlen>
 800b532:	4603      	mov	r3, r0
 800b534:	461a      	mov	r2, r3
 800b536:	4948      	ldr	r1, [pc, #288]	; (800b658 <httpPOST+0x54c>)
 800b538:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b53c:	f003 fcd9 	bl	800eef2 <strncat>
	strncat(body,_ev7,strlen(_ev7));
 800b540:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b544:	4618      	mov	r0, r3
 800b546:	f7f4 fe55 	bl	80001f4 <strlen>
 800b54a:	4602      	mov	r2, r0
 800b54c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b550:	4619      	mov	r1, r3
 800b552:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b556:	f003 fccc 	bl	800eef2 <strncat>
	strncat(body,ev8,strlen(ev8));
 800b55a:	4840      	ldr	r0, [pc, #256]	; (800b65c <httpPOST+0x550>)
 800b55c:	f7f4 fe4a 	bl	80001f4 <strlen>
 800b560:	4603      	mov	r3, r0
 800b562:	461a      	mov	r2, r3
 800b564:	493d      	ldr	r1, [pc, #244]	; (800b65c <httpPOST+0x550>)
 800b566:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b56a:	f003 fcc2 	bl	800eef2 <strncat>
	strncat(body,_ev8,strlen(_ev8));
 800b56e:	f107 0320 	add.w	r3, r7, #32
 800b572:	4618      	mov	r0, r3
 800b574:	f7f4 fe3e 	bl	80001f4 <strlen>
 800b578:	4602      	mov	r2, r0
 800b57a:	f107 0320 	add.w	r3, r7, #32
 800b57e:	4619      	mov	r1, r3
 800b580:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b584:	f003 fcb5 	bl	800eef2 <strncat>
	strncat(body,deviceId,strlen(deviceId));
 800b588:	4835      	ldr	r0, [pc, #212]	; (800b660 <httpPOST+0x554>)
 800b58a:	f7f4 fe33 	bl	80001f4 <strlen>
 800b58e:	4603      	mov	r3, r0
 800b590:	461a      	mov	r2, r3
 800b592:	4933      	ldr	r1, [pc, #204]	; (800b660 <httpPOST+0x554>)
 800b594:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b598:	f003 fcab 	bl	800eef2 <strncat>
	strncat(body,_devId,strlen(_devId));
 800b59c:	f107 0318 	add.w	r3, r7, #24
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7f4 fe27 	bl	80001f4 <strlen>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	f107 0318 	add.w	r3, r7, #24
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b5b2:	f003 fc9e 	bl	800eef2 <strncat>

	strncat(body,"}",strlen("}"));
 800b5b6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b5ba:	f7f4 fe1b 	bl	80001f4 <strlen>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b5c6:	4413      	add	r3, r2
 800b5c8:	4926      	ldr	r1, [pc, #152]	; (800b664 <httpPOST+0x558>)
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	881b      	ldrh	r3, [r3, #0]
 800b5d0:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800b5d2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b5d6:	f7f4 fe0d 	bl	80001f4 <strlen>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	f107 0310 	add.w	r3, r7, #16
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	f003 fa5a 	bl	800ea9c <INTOA>
	strncat(post,length,strlen(length));
 800b5e8:	f107 0310 	add.w	r3, r7, #16
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7f4 fe01 	bl	80001f4 <strlen>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	f107 0310 	add.w	r3, r7, #16
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b5fe:	f003 fc78 	bl	800eef2 <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800b602:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b606:	f7f4 fdf5 	bl	80001f4 <strlen>
 800b60a:	4603      	mov	r3, r0
 800b60c:	461a      	mov	r2, r3
 800b60e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b612:	4413      	add	r3, r2
 800b614:	4a14      	ldr	r2, [pc, #80]	; (800b668 <httpPOST+0x55c>)
 800b616:	6810      	ldr	r0, [r2, #0]
 800b618:	6018      	str	r0, [r3, #0]
 800b61a:	7912      	ldrb	r2, [r2, #4]
 800b61c:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800b61e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b622:	f7f4 fde7 	bl	80001f4 <strlen>
 800b626:	4602      	mov	r2, r0
 800b628:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d20d      	bcs.n	800b64c <httpPOST+0x540>
	{
		strncat(post,body,strlen(body));
 800b630:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b634:	f7f4 fdde 	bl	80001f4 <strlen>
 800b638:	4603      	mov	r3, r0
 800b63a:	461a      	mov	r2, r3
 800b63c:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800b640:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b644:	f003 fc55 	bl	800eef2 <strncat>
		return 1 ;
 800b648:	2301      	movs	r3, #1
 800b64a:	e000      	b.n	800b64e <httpPOST+0x542>
	}
		else
		{
			return 0;
 800b64c:	2300      	movs	r3, #0
		}
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3770      	adds	r7, #112	; 0x70
 800b652:	46bd      	mov	sp, r7
 800b654:	bdb0      	pop	{r4, r5, r7, pc}
 800b656:	bf00      	nop
 800b658:	20000110 	.word	0x20000110
 800b65c:	20000120 	.word	0x20000120
 800b660:	20000130 	.word	0x20000130
 800b664:	0801062c 	.word	0x0801062c
 800b668:	08010630 	.word	0x08010630

0800b66c <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2201      	movs	r2, #1
 800b678:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	705a      	strb	r2, [r3, #1]
	m->_timeout=5000;						//Timeout para la recepción de respuesta.
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f241 3288 	movw	r2, #5000	; 0x1388
 800b686:	805a      	strh	r2, [r3, #2]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	715a      	strb	r2, [r3, #5]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2220      	movs	r2, #32
 800b692:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
	m->_Coils=0xF0F0AF5A;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4a1c      	ldr	r2, [pc, #112]	; (800b70c <ModBUS_Config+0xa0>)
 800b69a:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	719a      	strb	r2, [r3, #6]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2220      	movs	r2, #32
 800b6a8:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
	m->_Inputs=0xA5FA0F0F;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a18      	ldr	r2, [pc, #96]	; (800b710 <ModBUS_Config+0xa4>)
 800b6b0:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	71da      	strb	r2, [r3, #7]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2210      	movs	r2, #16
 800b6be:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	721a      	strb	r2, [r3, #8]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2210      	movs	r2, #16
 800b6cc:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	725a      	strb	r2, [r3, #9]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2220      	movs	r2, #32
 800b6da:	f883 2534 	strb.w	r2, [r3, #1332]	; 0x534

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	729a      	strb	r2, [r3, #10]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	72da      	strb	r2, [r3, #11]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2220      	movs	r2, #32
 800b6ee:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	731a      	strb	r2, [r3, #12]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2220      	movs	r2, #32
 800b6fc:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
}
 800b700:	bf00      	nop
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	f0f0af5a 	.word	0xf0f0af5a
 800b710:	a5fa0f0f 	.word	0xa5fa0f0f

0800b714 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	3305      	adds	r3, #5
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	3306      	adds	r3, #6
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d10b      	bne.n	800b744 <ModBUS_Check+0x30>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	3302      	adds	r3, #2
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	461a      	mov	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	3303      	adds	r3, #3
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	4413      	add	r3, r2
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d101      	bne.n	800b744 <ModBUS_Check+0x30>
	{
		return(1);
 800b740:	2301      	movs	r3, #1
 800b742:	e000      	b.n	800b746 <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800b744:	2300      	movs	r3, #0
	}
}
 800b746:	4618      	mov	r0, r3
 800b748:	370c      	adds	r7, #12
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr

0800b752 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800b752:	b480      	push	{r7}
 800b754:	b083      	sub	sp, #12
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f893 2194 	ldrb.w	r2, [r3, #404]	; 0x194
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	7b5b      	ldrb	r3, [r3, #13]
 800b764:	429a      	cmp	r2, r3
 800b766:	d11d      	bne.n	800b7a4 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f893 2195 	ldrb.w	r2, [r3, #405]	; 0x195
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	7b9b      	ldrb	r3, [r3, #14]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800b772:	429a      	cmp	r2, r3
 800b774:	d116      	bne.n	800b7a4 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	7bdb      	ldrb	r3, [r3, #15]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800b780:	429a      	cmp	r2, r3
 800b782:	d10f      	bne.n	800b7a4 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 2197 	ldrb.w	r2, [r3, #407]	; 0x197
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	7c1b      	ldrb	r3, [r3, #16]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800b78e:	429a      	cmp	r2, r3
 800b790:	d108      	bne.n	800b7a4 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f893 219b 	ldrb.w	r2, [r3, #411]	; 0x19b
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d101      	bne.n	800b7a4 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	e000      	b.n	800b7a6 <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800b7a4:	2300      	movs	r3, #0
	}
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr

0800b7b2 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t a, uint16_t b)
{
 800b7b2:	b480      	push	{r7}
 800b7b4:	b085      	sub	sp, #20
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	70fb      	strb	r3, [r7, #3]
 800b7be:	4613      	mov	r3, r2
 800b7c0:	803b      	strh	r3, [r7, #0]
	uint8_t c=0;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800b7cc:	78fa      	ldrb	r2, [r7, #3]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d901      	bls.n	800b7d6 <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e015      	b.n	800b802 <ModBUS_F03_Assign+0x50>
	}
	else
	{
		m2->_Holding_Registers[(a*2)+1]=b;
 800b7d6:	78fb      	ldrb	r3, [r7, #3]
 800b7d8:	005b      	lsls	r3, r3, #1
 800b7da:	3301      	adds	r3, #1
 800b7dc:	883a      	ldrh	r2, [r7, #0]
 800b7de:	b2d1      	uxtb	r1, r2
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	460a      	mov	r2, r1
 800b7e6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
		c=b>>8;
 800b7ea:	883b      	ldrh	r3, [r7, #0]
 800b7ec:	0a1b      	lsrs	r3, r3, #8
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(a*2)]=c;
 800b7f2:	78fb      	ldrb	r3, [r7, #3]
 800b7f4:	005b      	lsls	r3, r3, #1
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	4413      	add	r3, r2
 800b7fa:	7bfa      	ldrb	r2, [r7, #15]
 800b7fc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		return(0);
 800b800:	2300      	movs	r3, #0
	}
}
 800b802:	4618      	mov	r0, r3
 800b804:	3714      	adds	r7, #20
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr

0800b80e <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t a)
{
 800b80e:	b480      	push	{r7}
 800b810:	b085      	sub	sp, #20
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
 800b816:	460b      	mov	r3, r1
 800b818:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800b81a:	2300      	movs	r3, #0
 800b81c:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800b81e:	2300      	movs	r3, #0
 800b820:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800b828:	78fa      	ldrb	r2, [r7, #3]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d901      	bls.n	800b832 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800b82e:	2301      	movs	r3, #1
 800b830:	e015      	b.n	800b85e <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(a*2)];
 800b832:	78fb      	ldrb	r3, [r7, #3]
 800b834:	005b      	lsls	r3, r3, #1
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	4413      	add	r3, r2
 800b83a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b83e:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800b840:	89fb      	ldrh	r3, [r7, #14]
 800b842:	021b      	lsls	r3, r3, #8
 800b844:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(a*2)+1];
 800b846:	78fb      	ldrb	r3, [r7, #3]
 800b848:	005b      	lsls	r3, r3, #1
 800b84a:	3301      	adds	r3, #1
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	4413      	add	r3, r2
 800b850:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b854:	b29a      	uxth	r2, r3
 800b856:	89fb      	ldrh	r3, [r7, #14]
 800b858:	4313      	orrs	r3, r2
 800b85a:	81fb      	strh	r3, [r7, #14]

		/*m2->_Holding_Registers[(a*2)+1]=b;
		c=b>>8;
		m2->_Holding_Registers[(a*2)]=c;*/
		return(n);
 800b85c:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800b86a:	b480      	push	{r7}
 800b86c:	b083      	sub	sp, #12
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	460b      	mov	r3, r1
 800b874:	807b      	strh	r3, [r7, #2]
 800b876:	4613      	mov	r3, r2
 800b878:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800b87a:	887b      	ldrh	r3, [r7, #2]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	bf14      	ite	ne
 800b880:	2301      	movne	r3, #1
 800b882:	2300      	moveq	r3, #0
 800b884:	b2db      	uxtb	r3, r3
 800b886:	461a      	mov	r2, r3
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
	addr&=0xF0;
 800b88e:	887b      	ldrh	r3, [r7, #2]
 800b890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b894:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800b896:	887b      	ldrh	r3, [r7, #2]
 800b898:	0a1b      	lsrs	r3, r3, #8
 800b89a:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800b89c:	887b      	ldrh	r3, [r7, #2]
 800b89e:	f003 030f 	and.w	r3, r3, #15
 800b8a2:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	m2->_MBUS_2SND[1]=0x00;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	m2->_MBUS_2SND[2]=0x00;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
	m2->_MBUS_2SND[3]=0x00;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	m2->_MBUS_2SND[4]=0x00;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	m2->_MBUS_2SND[5]=0x06;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2206      	movs	r2, #6
 800b8d0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
	m2->_MBUS_2SND[6]=m2->_address;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	781a      	ldrb	r2, [r3, #0]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
	m2->_MBUS_2SND[7]=0x03;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2203      	movs	r2, #3
 800b8e2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
	m2->_MBUS_2SND[8]=addr;
 800b8e6:	887b      	ldrh	r3, [r7, #2]
 800b8e8:	b2da      	uxtb	r2, r3
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	m2->_MBUS_2SND[10]=0x00;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
	m2->_MBUS_2SND[11]=qty;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	787a      	ldrb	r2, [r7, #1]
 800b8fc:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	220c      	movs	r2, #12
 800b904:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

}
 800b908:	bf00      	nop
 800b90a:	4618      	mov	r0, r3
 800b90c:	370c      	adds	r7, #12
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
	...

0800b918 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b09c      	sub	sp, #112	; 0x70
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	785b      	ldrb	r3, [r3, #1]
 800b924:	2b01      	cmp	r3, #1
 800b926:	f041 813f 	bne.w	800cba8 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f103 020d 	add.w	r2, r3, #13
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800b936:	4619      	mov	r1, r3
 800b938:	4610      	mov	r0, r2
 800b93a:	f7ff feeb 	bl	800b714 <ModBUS_Check>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	f001 812f 	beq.w	800cba4 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	7d1b      	ldrb	r3, [r3, #20]
 800b94a:	3b01      	subs	r3, #1
 800b94c:	2b0f      	cmp	r3, #15
 800b94e:	f201 80f3 	bhi.w	800cb38 <ModBUS+0x1220>
 800b952:	a201      	add	r2, pc, #4	; (adr r2, 800b958 <ModBUS+0x40>)
 800b954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b958:	0800b999 	.word	0x0800b999
 800b95c:	0800bbd9 	.word	0x0800bbd9
 800b960:	0800be19 	.word	0x0800be19
 800b964:	0800c051 	.word	0x0800c051
 800b968:	0800c289 	.word	0x0800c289
 800b96c:	0800c49f 	.word	0x0800c49f
 800b970:	0800cb39 	.word	0x0800cb39
 800b974:	0800cb39 	.word	0x0800cb39
 800b978:	0800cb39 	.word	0x0800cb39
 800b97c:	0800cb39 	.word	0x0800cb39
 800b980:	0800cb39 	.word	0x0800cb39
 800b984:	0800cb39 	.word	0x0800cb39
 800b988:	0800cb39 	.word	0x0800cb39
 800b98c:	0800cb39 	.word	0x0800cb39
 800b990:	0800c65b 	.word	0x0800c65b
 800b994:	0800c8eb 	.word	0x0800c8eb

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	7c5a      	ldrb	r2, [r3, #17]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	7c1a      	ldrb	r2, [r3, #16]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	7bda      	ldrb	r2, [r3, #15]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	7b9a      	ldrb	r2, [r3, #14]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	7b5a      	ldrb	r2, [r3, #13]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	795b      	ldrb	r3, [r3, #5]
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	f040 80e6 	bne.w	800bba4 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	7d5b      	ldrb	r3, [r3, #21]
 800b9dc:	b29a      	uxth	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800b9ea:	021b      	lsls	r3, r3, #8
 800b9ec:	b29a      	uxth	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800b9fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8b3 251e 	ldrh.w	r2, [r3, #1310]	; 0x51e
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	7d9b      	ldrb	r3, [r3, #22]
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	4313      	orrs	r3, r2
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	7ddb      	ldrb	r3, [r3, #23]
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800ba2e:	021b      	lsls	r3, r3, #8
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800ba3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ba42:	b29a      	uxth	r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	7e1b      	ldrb	r3, [r3, #24]
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	4313      	orrs	r3, r2
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d87e      	bhi.n	800bb70 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800ba78:	461a      	mov	r2, r3
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800ba80:	4413      	add	r3, r2
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	f892 251c 	ldrb.w	r2, [r2, #1308]	; 0x51c
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	dc57      	bgt.n	800bb3c <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	613b      	str	r3, [r7, #16]
 800ba90:	2300      	movs	r3, #0
 800ba92:	60fb      	str	r3, [r7, #12]
 800ba94:	2300      	movs	r3, #0
 800ba96:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba98:	2300      	movs	r3, #0
 800ba9a:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	f8b2 251e 	ldrh.w	r2, [r2, #1310]	; 0x51e
 800baac:	40d3      	lsrs	r3, r2
 800baae:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800bab6:	08db      	lsrs	r3, r3, #3
 800bab8:	b29b      	uxth	r3, r3
 800baba:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800bac2:	f003 0307 	and.w	r3, r3, #7
 800bac6:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d102      	bne.n	800bad4 <ModBUS+0x1bc>
									{
										bytes=div;
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bad2:	e002      	b.n	800bada <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	3301      	adds	r3, #1
 800bad8:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800bada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800badc:	b2da      	uxtb	r2, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800bae4:	e00e      	b.n	800bb04 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800bae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bae8:	3308      	adds	r3, #8
 800baea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800baec:	b2d1      	uxtb	r1, r2
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	4413      	add	r3, r2
 800baf2:	460a      	mov	r2, r1
 800baf4:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800baf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bafa:	0a1b      	lsrs	r3, r3, #8
 800bafc:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800bafe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb00:	3b01      	subs	r3, #1
 800bb02:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800bb04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	dced      	bgt.n	800bae6 <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2201      	movs	r2, #1
 800bb16:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800bb20:	3303      	adds	r3, #3
 800bb22:	b2da      	uxtb	r2, r3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bb30:	1d9a      	adds	r2, r3, #6
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bb38:	f001 b8d4 	b.w	800cce4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2202      	movs	r2, #2
 800bb40:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x81;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2281      	movs	r2, #129	; 0x81
 800bb48:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2203      	movs	r2, #3
 800bb58:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bb62:	1d9a      	adds	r2, r3, #6
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800bb6a:	2302      	movs	r3, #2
 800bb6c:	f001 b8ba 	b.w	800cce4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2203      	movs	r2, #3
 800bb74:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x81;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2281      	movs	r2, #129	; 0x81
 800bb7c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2201      	movs	r2, #1
 800bb84:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2203      	movs	r2, #3
 800bb8c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bb96:	1d9a      	adds	r2, r3, #6
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800bb9e:	2303      	movs	r3, #3
 800bba0:	f001 b8a0 	b.w	800cce4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x81;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2281      	movs	r2, #129	; 0x81
 800bbb0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2203      	movs	r2, #3
 800bbc0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bbca:	1d9a      	adds	r2, r3, #6
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	f001 b886 	b.w	800cce4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	7c5a      	ldrb	r2, [r3, #17]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	7c1a      	ldrb	r2, [r3, #16]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	7bda      	ldrb	r2, [r3, #15]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	7b9a      	ldrb	r2, [r3, #14]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	7b5a      	ldrb	r2, [r3, #13]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	799b      	ldrb	r3, [r3, #6]
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	f040 80e6 	bne.w	800bde4 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	7d5b      	ldrb	r3, [r3, #21]
 800bc1c:	b29a      	uxth	r2, r3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800bc2a:	021b      	lsls	r3, r3, #8
 800bc2c:	b29a      	uxth	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800bc3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bc3e:	b29a      	uxth	r2, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8b3 2524 	ldrh.w	r2, [r3, #1316]	; 0x524
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	7d9b      	ldrb	r3, [r3, #22]
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	4313      	orrs	r3, r2
 800bc54:	b29a      	uxth	r2, r3
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	7ddb      	ldrb	r3, [r3, #23]
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bc6e:	021b      	lsls	r3, r3, #8
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bc7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bc82:	b29a      	uxth	r2, r3
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	7e1b      	ldrb	r3, [r3, #24]
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	4313      	orrs	r3, r2
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f893 3522 	ldrb.w	r3, [r3, #1314]	; 0x522
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d87e      	bhi.n	800bdb0 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800bcb8:	461a      	mov	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bcc0:	4413      	add	r3, r2
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	f892 2522 	ldrb.w	r2, [r2, #1314]	; 0x522
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	dc57      	bgt.n	800bd7c <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800bccc:	2300      	movs	r3, #0
 800bcce:	623b      	str	r3, [r7, #32]
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	61fb      	str	r3, [r7, #28]
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	667b      	str	r3, [r7, #100]	; 0x64
 800bcd8:	2300      	movs	r3, #0
 800bcda:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	f8b2 2524 	ldrh.w	r2, [r2, #1316]	; 0x524
 800bcec:	40d3      	lsrs	r3, r2
 800bcee:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bcf6:	08db      	lsrs	r3, r3, #3
 800bcf8:	b29b      	uxth	r3, r3
 800bcfa:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bd02:	f003 0307 	and.w	r3, r3, #7
 800bd06:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d102      	bne.n	800bd14 <ModBUS+0x3fc>
									{
										bytes=div;
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	667b      	str	r3, [r7, #100]	; 0x64
 800bd12:	e002      	b.n	800bd1a <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800bd14:	6a3b      	ldr	r3, [r7, #32]
 800bd16:	3301      	adds	r3, #1
 800bd18:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800bd1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd1c:	b2da      	uxtb	r2, r3
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800bd24:	e00e      	b.n	800bd44 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800bd26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd28:	3308      	adds	r3, #8
 800bd2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bd2c:	b2d1      	uxtb	r1, r2
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	4413      	add	r3, r2
 800bd32:	460a      	mov	r2, r1
 800bd34:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800bd38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd3a:	0a1b      	lsrs	r3, r3, #8
 800bd3c:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800bd3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd40:	3b01      	subs	r3, #1
 800bd42:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800bd44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	dced      	bgt.n	800bd26 <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2202      	movs	r2, #2
 800bd4e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2201      	movs	r2, #1
 800bd56:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800bd60:	3303      	adds	r3, #3
 800bd62:	b2da      	uxtb	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bd70:	1d9a      	adds	r2, r3, #6
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bd78:	f000 bfb4 	b.w	800cce4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2202      	movs	r2, #2
 800bd80:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x82;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2282      	movs	r2, #130	; 0x82
 800bd88:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2203      	movs	r2, #3
 800bd98:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bda2:	1d9a      	adds	r2, r3, #6
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800bdaa:	2302      	movs	r3, #2
 800bdac:	f000 bf9a 	b.w	800cce4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2203      	movs	r2, #3
 800bdb4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x82;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2282      	movs	r2, #130	; 0x82
 800bdbc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2203      	movs	r2, #3
 800bdcc:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bdd6:	1d9a      	adds	r2, r3, #6
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800bdde:	2303      	movs	r3, #3
 800bde0:	f000 bf80 	b.w	800cce4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2201      	movs	r2, #1
 800bde8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x82;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2282      	movs	r2, #130	; 0x82
 800bdf0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2203      	movs	r2, #3
 800be00:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800be0a:	1d9a      	adds	r2, r3, #6
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800be12:	2301      	movs	r3, #1
 800be14:	f000 bf66 	b.w	800cce4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	7c5a      	ldrb	r2, [r3, #17]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	7c1a      	ldrb	r2, [r3, #16]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	7bda      	ldrb	r2, [r3, #15]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	7b9a      	ldrb	r2, [r3, #14]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	7b5a      	ldrb	r2, [r3, #13]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800be4a:	2300      	movs	r3, #0
 800be4c:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	79db      	ldrb	r3, [r3, #7]
 800be52:	2b01      	cmp	r3, #1
 800be54:	f040 80e2 	bne.w	800c01c <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	7d5b      	ldrb	r3, [r3, #21]
 800be5c:	b29a      	uxth	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800be6a:	021b      	lsls	r3, r3, #8
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800be7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800be7e:	b29a      	uxth	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8b3 252a 	ldrh.w	r2, [r3, #1322]	; 0x52a
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	7d9b      	ldrb	r3, [r3, #22]
 800be90:	b29b      	uxth	r3, r3
 800be92:	4313      	orrs	r3, r2
 800be94:	b29a      	uxth	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	7ddb      	ldrb	r3, [r3, #23]
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800beae:	021b      	lsls	r3, r3, #8
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800bebe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bec2:	b29a      	uxth	r2, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	7e1b      	ldrb	r3, [r3, #24]
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	4313      	orrs	r3, r2
 800bed8:	b29a      	uxth	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800beec:	b29b      	uxth	r3, r3
 800beee:	429a      	cmp	r2, r3
 800bef0:	d87a      	bhi.n	800bfe8 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800bef8:	461a      	mov	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800bf00:	4413      	add	r3, r2
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	f892 2528 	ldrb.w	r2, [r2, #1320]	; 0x528
 800bf08:	4293      	cmp	r3, r2
 800bf0a:	dc53      	bgt.n	800bfb4 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800bf0c:	e029      	b.n	800bf62 <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800bf14:	461a      	mov	r2, r3
 800bf16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf18:	4413      	add	r3, r2
 800bf1a:	005a      	lsls	r2, r3, #1
 800bf1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf1e:	005b      	lsls	r3, r3, #1
 800bf20:	3309      	adds	r3, #9
 800bf22:	6879      	ldr	r1, [r7, #4]
 800bf24:	440a      	add	r2, r1
 800bf26:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	460a      	mov	r2, r1
 800bf30:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf3e:	4413      	add	r3, r2
 800bf40:	005b      	lsls	r3, r3, #1
 800bf42:	1c5a      	adds	r2, r3, #1
 800bf44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf46:	3305      	adds	r3, #5
 800bf48:	005b      	lsls	r3, r3, #1
 800bf4a:	6879      	ldr	r1, [r7, #4]
 800bf4c:	440a      	add	r2, r1
 800bf4e:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	4413      	add	r3, r2
 800bf56:	460a      	mov	r2, r1
 800bf58:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800bf5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf5e:	3301      	adds	r3, #1
 800bf60:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800bf68:	461a      	mov	r2, r3
 800bf6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	dbce      	blt.n	800bf0e <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800bf76:	b2db      	uxtb	r3, r3
 800bf78:	005b      	lsls	r3, r3, #1
 800bf7a:	b2da      	uxtb	r2, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x03;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2203      	movs	r2, #3
 800bf86:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800bf98:	3303      	adds	r3, #3
 800bf9a:	b2da      	uxtb	r2, r3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bfa8:	1d9a      	adds	r2, r3, #6
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bfb0:	f000 be98 	b.w	800cce4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2202      	movs	r2, #2
 800bfb8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x83;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2283      	movs	r2, #131	; 0x83
 800bfc0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2203      	movs	r2, #3
 800bfd0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bfda:	1d9a      	adds	r2, r3, #6
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800bfe2:	2302      	movs	r3, #2
 800bfe4:	f000 be7e 	b.w	800cce4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2203      	movs	r2, #3
 800bfec:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x83;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2283      	movs	r2, #131	; 0x83
 800bff4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2203      	movs	r2, #3
 800c004:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c00e:	1d9a      	adds	r2, r3, #6
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800c016:	2303      	movs	r3, #3
 800c018:	f000 be64 	b.w	800cce4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2201      	movs	r2, #1
 800c020:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x83;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2283      	movs	r2, #131	; 0x83
 800c028:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2201      	movs	r2, #1
 800c030:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2203      	movs	r2, #3
 800c038:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c042:	1d9a      	adds	r2, r3, #6
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c04a:	2301      	movs	r3, #1
 800c04c:	f000 be4a 	b.w	800cce4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	7c5a      	ldrb	r2, [r3, #17]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	7c1a      	ldrb	r2, [r3, #16]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	7bda      	ldrb	r2, [r3, #15]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	7b9a      	ldrb	r2, [r3, #14]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	7b5a      	ldrb	r2, [r3, #13]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800c082:	2300      	movs	r3, #0
 800c084:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	7a1b      	ldrb	r3, [r3, #8]
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	f040 80e2 	bne.w	800c254 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	7d5b      	ldrb	r3, [r3, #21]
 800c094:	b29a      	uxth	r2, r3
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c0a2:	021b      	lsls	r3, r3, #8
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c0b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c0b6:	b29a      	uxth	r2, r3
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8b3 2530 	ldrh.w	r2, [r3, #1328]	; 0x530
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	7d9b      	ldrb	r3, [r3, #22]
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	7ddb      	ldrb	r3, [r3, #23]
 800c0d8:	b29a      	uxth	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c0e6:	021b      	lsls	r3, r3, #8
 800c0e8:	b29a      	uxth	r2, r3
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c0f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c0fa:	b29a      	uxth	r2, r3
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	7e1b      	ldrb	r3, [r3, #24]
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	4313      	orrs	r3, r2
 800c110:	b29a      	uxth	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f893 352e 	ldrb.w	r3, [r3, #1326]	; 0x52e
 800c124:	b29b      	uxth	r3, r3
 800c126:	429a      	cmp	r2, r3
 800c128:	d87a      	bhi.n	800c220 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c130:	461a      	mov	r2, r3
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c138:	4413      	add	r3, r2
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	f892 252e 	ldrb.w	r2, [r2, #1326]	; 0x52e
 800c140:	4293      	cmp	r3, r2
 800c142:	dc53      	bgt.n	800c1ec <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c144:	e029      	b.n	800c19a <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c14c:	461a      	mov	r2, r3
 800c14e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c150:	4413      	add	r3, r2
 800c152:	005a      	lsls	r2, r3, #1
 800c154:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c156:	005b      	lsls	r3, r3, #1
 800c158:	3309      	adds	r3, #9
 800c15a:	6879      	ldr	r1, [r7, #4]
 800c15c:	440a      	add	r2, r1
 800c15e:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	4413      	add	r3, r2
 800c166:	460a      	mov	r2, r1
 800c168:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c172:	461a      	mov	r2, r3
 800c174:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c176:	4413      	add	r3, r2
 800c178:	005b      	lsls	r3, r3, #1
 800c17a:	1c5a      	adds	r2, r3, #1
 800c17c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c17e:	3305      	adds	r3, #5
 800c180:	005b      	lsls	r3, r3, #1
 800c182:	6879      	ldr	r1, [r7, #4]
 800c184:	440a      	add	r2, r1
 800c186:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	4413      	add	r3, r2
 800c18e:	460a      	mov	r2, r1
 800c190:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800c194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c196:	3301      	adds	r3, #1
 800c198:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	dbce      	blt.n	800c146 <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	005b      	lsls	r3, r3, #1
 800c1b2:	b2da      	uxtb	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x04;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2204      	movs	r2, #4
 800c1be:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c1d0:	3303      	adds	r3, #3
 800c1d2:	b2da      	uxtb	r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c1e0:	1d9a      	adds	r2, r3, #6
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c1e8:	f000 bd7c 	b.w	800cce4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2202      	movs	r2, #2
 800c1f0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x84;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2284      	movs	r2, #132	; 0x84
 800c1f8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2201      	movs	r2, #1
 800c200:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2203      	movs	r2, #3
 800c208:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c212:	1d9a      	adds	r2, r3, #6
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c21a:	2302      	movs	r3, #2
 800c21c:	f000 bd62 	b.w	800cce4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2203      	movs	r2, #3
 800c224:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x84;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2284      	movs	r2, #132	; 0x84
 800c22c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2203      	movs	r2, #3
 800c23c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c246:	1d9a      	adds	r2, r3, #6
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800c24e:	2303      	movs	r3, #3
 800c250:	f000 bd48 	b.w	800cce4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2201      	movs	r2, #1
 800c258:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x84;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2284      	movs	r2, #132	; 0x84
 800c260:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2201      	movs	r2, #1
 800c268:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2203      	movs	r2, #3
 800c270:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c27a:	1d9a      	adds	r2, r3, #6
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c282:	2301      	movs	r3, #1
 800c284:	f000 bd2e 	b.w	800cce4 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	7c5a      	ldrb	r2, [r3, #17]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	7c1a      	ldrb	r2, [r3, #16]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	7bda      	ldrb	r2, [r3, #15]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	7b9a      	ldrb	r2, [r3, #14]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	7b5a      	ldrb	r2, [r3, #13]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

								int qty_reg=0;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	7a5b      	ldrb	r3, [r3, #9]
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	f040 80d1 	bne.w	800c46a <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	7d5b      	ldrb	r3, [r3, #21]
 800c2cc:	b29a      	uxth	r2, r3
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800c2da:	021b      	lsls	r3, r3, #8
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800c2ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8b3 2536 	ldrh.w	r2, [r3, #1334]	; 0x536
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	7d9b      	ldrb	r3, [r3, #22]
 800c300:	b29b      	uxth	r3, r3
 800c302:	4313      	orrs	r3, r2
 800c304:	b29a      	uxth	r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	7ddb      	ldrb	r3, [r3, #23]
 800c310:	b29a      	uxth	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c31e:	021b      	lsls	r3, r3, #8
 800c320:	b29a      	uxth	r2, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c32e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c332:	b29a      	uxth	r2, r3
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8b3 2538 	ldrh.w	r2, [r3, #1336]	; 0x538
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	7e1b      	ldrb	r3, [r3, #24]
 800c344:	b29b      	uxth	r3, r3
 800c346:	4313      	orrs	r3, r2
 800c348:	b29a      	uxth	r2, r3
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f893 3534 	ldrb.w	r3, [r3, #1332]	; 0x534
 800c356:	461a      	mov	r2, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800c35e:	429a      	cmp	r2, r3
 800c360:	dd69      	ble.n	800c436 <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d005      	beq.n	800c378 <ModBUS+0xa60>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c372:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c376:	d144      	bne.n	800c402 <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c37e:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c382:	d10d      	bne.n	800c3a0 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	f8b2 2536 	ldrh.w	r2, [r2, #1334]	; 0x536
 800c390:	4611      	mov	r1, r2
 800c392:	2201      	movs	r2, #1
 800c394:	408a      	lsls	r2, r1
 800c396:	431a      	orrs	r2, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800c39e:	e003      	b.n	800c3a8 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	7e1a      	ldrb	r2, [r3, #24]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	7dda      	ldrb	r2, [r3, #23]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	7d9a      	ldrb	r2, [r3, #22]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	7d5a      	ldrb	r2, [r3, #21]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x05;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2205      	movs	r2, #5
 800c3d4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c3e6:	3306      	adds	r3, #6
 800c3e8:	b2da      	uxtb	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c3f6:	1d9a      	adds	r2, r3, #6
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800c3fe:	f000 bc71 	b.w	800cce4 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2202      	movs	r2, #2
 800c406:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x85;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2285      	movs	r2, #133	; 0x85
 800c40e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2201      	movs	r2, #1
 800c416:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2203      	movs	r2, #3
 800c41e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c428:	1d9a      	adds	r2, r3, #6
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
												return(2);//Error excepcion 02
 800c430:	2302      	movs	r3, #2
 800c432:	f000 bc57 	b.w	800cce4 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2203      	movs	r2, #3
 800c43a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
											m3->_MBUS_2SND[7]=0x85;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2285      	movs	r2, #133	; 0x85
 800c442:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2201      	movs	r2, #1
 800c44a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2203      	movs	r2, #3
 800c452:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c45c:	1d9a      	adds	r2, r3, #6
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
											return(3);//Erroe excepcion 03
 800c464:	2303      	movs	r3, #3
 800c466:	f000 bc3d 	b.w	800cce4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2201      	movs	r2, #1
 800c46e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x85;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2285      	movs	r2, #133	; 0x85
 800c476:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2201      	movs	r2, #1
 800c47e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2203      	movs	r2, #3
 800c486:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c490:	1d9a      	adds	r2, r3, #6
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(1);//Error excepcion 01
 800c498:	2301      	movs	r3, #1
 800c49a:	f000 bc23 	b.w	800cce4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	7c5a      	ldrb	r2, [r3, #17]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	7c1a      	ldrb	r2, [r3, #16]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	7bda      	ldrb	r2, [r3, #15]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	7b9a      	ldrb	r2, [r3, #14]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	7b5a      	ldrb	r2, [r3, #13]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	7a9b      	ldrb	r3, [r3, #10]
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	f040 80a3 	bne.w	800c628 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	7d5b      	ldrb	r3, [r3, #21]
 800c4e6:	b29a      	uxth	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800c4f4:	021b      	lsls	r3, r3, #8
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800c504:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c508:	b29a      	uxth	r2, r3
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	7d9b      	ldrb	r3, [r3, #22]
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	4313      	orrs	r3, r2
 800c51e:	b29a      	uxth	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542

							start_address=m3->_06_WriteSingleRegister_Addr;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800c52c:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	7ddb      	ldrb	r3, [r3, #23]
 800c532:	b29a      	uxth	r2, r3
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800c540:	021b      	lsls	r3, r3, #8
 800c542:	b29a      	uxth	r2, r3
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800c550:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c554:	b29a      	uxth	r2, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8b3 2544 	ldrh.w	r2, [r3, #1348]	; 0x544
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	7e1b      	ldrb	r3, [r3, #24]
 800c566:	b29b      	uxth	r3, r3
 800c568:	4313      	orrs	r3, r2
 800c56a:	b29a      	uxth	r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f893 3540 	ldrb.w	r3, [r3, #1344]	; 0x540
 800c57e:	b29b      	uxth	r3, r3
 800c580:	429a      	cmp	r2, r3
 800c582:	d838      	bhi.n	800c5f6 <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800c584:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	7dd1      	ldrb	r1, [r2, #23]
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	4413      	add	r3, r2
 800c58e:	460a      	mov	r2, r1
 800c590:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800c594:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c596:	3301      	adds	r3, #1
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	7e11      	ldrb	r1, [r2, #24]
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	4413      	add	r3, r2
 800c5a0:	460a      	mov	r2, r1
 800c5a2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	7e1a      	ldrb	r2, [r3, #24]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	7dda      	ldrb	r2, [r3, #23]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	7d9a      	ldrb	r2, [r3, #22]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	7d5a      	ldrb	r2, [r3, #21]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x06;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2206      	movs	r2, #6
 800c5d2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2201      	movs	r2, #1
 800c5da:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2206      	movs	r2, #6
 800c5e2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c5ec:	1d9a      	adds	r2, r3, #6
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c5f4:	e376      	b.n	800cce4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2202      	movs	r2, #2
 800c5fa:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x86;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2286      	movs	r2, #134	; 0x86
 800c602:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2201      	movs	r2, #1
 800c60a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2203      	movs	r2, #3
 800c612:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c61c:	1d9a      	adds	r2, r3, #6
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c624:	2302      	movs	r3, #2
 800c626:	e35d      	b.n	800cce4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x86;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2286      	movs	r2, #134	; 0x86
 800c634:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2201      	movs	r2, #1
 800c63c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2203      	movs	r2, #3
 800c644:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c64e:	1d9a      	adds	r2, r3, #6
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c656:	2301      	movs	r3, #1
 800c658:	e344      	b.n	800cce4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	7c5a      	ldrb	r2, [r3, #17]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	7c1a      	ldrb	r2, [r3, #16]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	7bda      	ldrb	r2, [r3, #15]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	7b9a      	ldrb	r2, [r3, #14]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	7b5a      	ldrb	r2, [r3, #13]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800c68c:	2300      	movs	r3, #0
 800c68e:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	7adb      	ldrb	r3, [r3, #11]
 800c694:	2b01      	cmp	r3, #1
 800c696:	f040 810f 	bne.w	800c8b8 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	7d5b      	ldrb	r3, [r3, #21]
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c6ac:	021b      	lsls	r3, r3, #8
 800c6ae:	b29a      	uxth	r2, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c6bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c6c0:	b29a      	uxth	r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8b3 253c 	ldrh.w	r2, [r3, #1340]	; 0x53c
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	7d9b      	ldrb	r3, [r3, #22]
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	b29a      	uxth	r2, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	7ddb      	ldrb	r3, [r3, #23]
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800c6f0:	021b      	lsls	r3, r3, #8
 800c6f2:	b29a      	uxth	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800c700:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c704:	b29a      	uxth	r2, r3
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	7e1b      	ldrb	r3, [r3, #24]
 800c716:	b29b      	uxth	r3, r3
 800c718:	4313      	orrs	r3, r2
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f893 353a 	ldrb.w	r3, [r3, #1338]	; 0x53a
 800c72e:	b29b      	uxth	r3, r3
 800c730:	429a      	cmp	r2, r3
 800c732:	f200 80a8 	bhi.w	800c886 <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c73c:	461a      	mov	r2, r3
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800c744:	4413      	add	r3, r2
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	f892 253a 	ldrb.w	r2, [r2, #1338]	; 0x53a
 800c74c:	4293      	cmp	r3, r2
 800c74e:	f300 8081 	bgt.w	800c854 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800c752:	2300      	movs	r3, #0
 800c754:	657b      	str	r3, [r7, #84]	; 0x54
 800c756:	2300      	movs	r3, #0
 800c758:	653b      	str	r3, [r7, #80]	; 0x50
 800c75a:	2300      	movs	r3, #0
 800c75c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c75e:	2300      	movs	r3, #0
 800c760:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	7e5b      	ldrb	r3, [r3, #25]
 800c766:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800c768:	e00e      	b.n	800c788 <ModBUS+0xe70>
									{
										data=data<<8;
 800c76a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c76c:	021b      	lsls	r3, r3, #8
 800c76e:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800c770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c772:	330c      	adds	r3, #12
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	4413      	add	r3, r2
 800c778:	7b5b      	ldrb	r3, [r3, #13]
 800c77a:	461a      	mov	r2, r3
 800c77c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c77e:	4313      	orrs	r3, r2
 800c780:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800c782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c784:	3b01      	subs	r3, #1
 800c786:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800c788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1ed      	bne.n	800c76a <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c794:	461a      	mov	r2, r3
 800c796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c798:	4093      	lsls	r3, r2
 800c79a:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800c79c:	e00f      	b.n	800c7be <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7a8:	4413      	add	r3, r2
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	fa02 f303 	lsl.w	r3, r2, r3
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800c7b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d3e8      	bcc.n	800c79e <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800c7cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7ce:	43db      	mvns	r3, r3
 800c7d0:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800c7d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7da:	401a      	ands	r2, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318


									data &= ~mascara;
 800c7e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7e4:	43db      	mvns	r3, r3
 800c7e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800c7f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c7f4:	431a      	orrs	r2, r3
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	7e1a      	ldrb	r2, [r3, #24]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	7dda      	ldrb	r2, [r3, #23]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	7d9a      	ldrb	r2, [r3, #22]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	7d5a      	ldrb	r2, [r3, #21]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x0F;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	220f      	movs	r2, #15
 800c828:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2201      	movs	r2, #1
 800c830:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c83a:	3306      	adds	r3, #6
 800c83c:	b2da      	uxtb	r2, r3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c84a:	1d9a      	adds	r2, r3, #6
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c852:	e247      	b.n	800cce4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2202      	movs	r2, #2
 800c858:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x8F;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	228f      	movs	r2, #143	; 0x8f
 800c860:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2201      	movs	r2, #1
 800c868:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2203      	movs	r2, #3
 800c870:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c87a:	1d9a      	adds	r2, r3, #6
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c882:	2302      	movs	r3, #2
 800c884:	e22e      	b.n	800cce4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2203      	movs	r2, #3
 800c88a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x8F;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	228f      	movs	r2, #143	; 0x8f
 800c892:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2201      	movs	r2, #1
 800c89a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2203      	movs	r2, #3
 800c8a2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c8ac:	1d9a      	adds	r2, r3, #6
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800c8b4:	2303      	movs	r3, #3
 800c8b6:	e215      	b.n	800cce4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x8F;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	228f      	movs	r2, #143	; 0x8f
 800c8c4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2203      	movs	r2, #3
 800c8d4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c8de:	1d9a      	adds	r2, r3, #6
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	e1fc      	b.n	800cce4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	7c5a      	ldrb	r2, [r3, #17]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	7c1a      	ldrb	r2, [r3, #16]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	7bda      	ldrb	r2, [r3, #15]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	7b9a      	ldrb	r2, [r3, #14]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	7b5a      	ldrb	r2, [r3, #13]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800c91c:	2300      	movs	r3, #0
 800c91e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c922:	2300      	movs	r3, #0
 800c924:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	7b1b      	ldrb	r3, [r3, #12]
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	f040 80eb 	bne.w	800cb06 <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	7d5b      	ldrb	r3, [r3, #21]
 800c934:	b29a      	uxth	r2, r3
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800c942:	021b      	lsls	r3, r3, #8
 800c944:	b29a      	uxth	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800c952:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c956:	b29a      	uxth	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8b3 2548 	ldrh.w	r2, [r3, #1352]	; 0x548
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	7d9b      	ldrb	r3, [r3, #22]
 800c968:	b29b      	uxth	r3, r3
 800c96a:	4313      	orrs	r3, r2
 800c96c:	b29a      	uxth	r2, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800c97a:	005b      	lsls	r3, r3, #1
 800c97c:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	7ddb      	ldrb	r3, [r3, #23]
 800c982:	b29a      	uxth	r2, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800c990:	021b      	lsls	r3, r3, #8
 800c992:	b29a      	uxth	r2, r3
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800c9a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c9a4:	b29a      	uxth	r2, r3
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	7e1b      	ldrb	r3, [r3, #24]
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	b29a      	uxth	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f893 3546 	ldrb.w	r3, [r3, #1350]	; 0x546
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d87f      	bhi.n	800cad4 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800c9da:	461a      	mov	r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800c9e2:	4413      	add	r3, r2
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	f892 2546 	ldrb.w	r2, [r2, #1350]	; 0x546
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	dc59      	bgt.n	800caa2 <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800c9ee:	e029      	b.n	800ca44 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800c9f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c9f4:	f103 020d 	add.w	r2, r3, #13
 800c9f8:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800c9fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c9fe:	440b      	add	r3, r1
 800ca00:	6879      	ldr	r1, [r7, #4]
 800ca02:	440a      	add	r2, r1
 800ca04:	7b51      	ldrb	r1, [r2, #13]
 800ca06:	687a      	ldr	r2, [r7, #4]
 800ca08:	4413      	add	r3, r2
 800ca0a:	460a      	mov	r2, r1
 800ca0c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800ca10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ca14:	3301      	adds	r3, #1
 800ca16:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800ca1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ca1e:	f103 020d 	add.w	r2, r3, #13
 800ca22:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800ca24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ca28:	440b      	add	r3, r1
 800ca2a:	6879      	ldr	r1, [r7, #4]
 800ca2c:	440a      	add	r2, r1
 800ca2e:	7b51      	ldrb	r1, [r2, #13]
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	4413      	add	r3, r2
 800ca34:	460a      	mov	r2, r1
 800ca36:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										qty_reg++;
 800ca3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ca3e:	3301      	adds	r3, #1
 800ca40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	7e5b      	ldrb	r3, [r3, #25]
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d3ce      	bcc.n	800c9f0 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	7e1a      	ldrb	r2, [r3, #24]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	7dda      	ldrb	r2, [r3, #23]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	7d9a      	ldrb	r2, [r3, #22]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	7d5a      	ldrb	r2, [r3, #21]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x10;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2210      	movs	r2, #16
 800ca7e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2201      	movs	r2, #1
 800ca86:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2206      	movs	r2, #6
 800ca8e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800ca98:	1d9a      	adds	r2, r3, #6
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800caa0:	e120      	b.n	800cce4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2202      	movs	r2, #2
 800caa6:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x90;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2290      	movs	r2, #144	; 0x90
 800caae:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2201      	movs	r2, #1
 800cab6:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2203      	movs	r2, #3
 800cabe:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cac8:	1d9a      	adds	r2, r3, #6
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800cad0:	2302      	movs	r3, #2
 800cad2:	e107      	b.n	800cce4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2203      	movs	r2, #3
 800cad8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x90;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2290      	movs	r2, #144	; 0x90
 800cae0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2201      	movs	r2, #1
 800cae8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2203      	movs	r2, #3
 800caf0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cafa:	1d9a      	adds	r2, r3, #6
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800cb02:	2303      	movs	r3, #3
 800cb04:	e0ee      	b.n	800cce4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2201      	movs	r2, #1
 800cb0a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x90;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2290      	movs	r2, #144	; 0x90
 800cb12:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2203      	movs	r2, #3
 800cb22:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb2c:	1d9a      	adds	r2, r3, #6
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800cb34:	2301      	movs	r3, #1
 800cb36:	e0d5      	b.n	800cce4 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	7d1b      	ldrb	r3, [r3, #20]
 800cb44:	3b80      	subs	r3, #128	; 0x80
 800cb46:	b2da      	uxtb	r2, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	7cda      	ldrb	r2, [r3, #19]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
					m3->_MBUS_2SND[5]=0x03;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2203      	movs	r2, #3
 800cb5c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	7c5a      	ldrb	r2, [r3, #17]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	7c1a      	ldrb	r2, [r3, #16]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	7bda      	ldrb	r2, [r3, #15]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	7b9a      	ldrb	r2, [r3, #14]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	7b5a      	ldrb	r2, [r3, #13]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb98:	1d9a      	adds	r2, r3, #6
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
					return(1);
 800cba0:	2301      	movs	r3, #1
 800cba2:	e09f      	b.n	800cce4 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800cba4:	2301      	movs	r3, #1
 800cba6:	e09d      	b.n	800cce4 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	785b      	ldrb	r3, [r3, #1]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f040 8099 	bne.w	800cce4 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f103 020d 	add.w	r2, r3, #13
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	4610      	mov	r0, r2
 800cbc2:	f7fe fda7 	bl	800b714 <ModBUS_Check>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	f000 808b 	beq.w	800cce4 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f7fe fdbf 	bl	800b752 <ModBUS_Check_tid>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d04f      	beq.n	800cc7a <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	7d1b      	ldrb	r3, [r3, #20]
 800cbde:	2b03      	cmp	r3, #3
 800cbe0:	d143      	bne.n	800cc6a <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cbf2:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800cbf4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cbf6:	021b      	lsls	r3, r3, #8
 800cbf8:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800cc00:	b29a      	uxth	r2, r3
 800cc02:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cc04:	4313      	orrs	r3, r2
 800cc06:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800cc0e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800cc12:	2300      	movs	r3, #0
 800cc14:	643b      	str	r3, [r7, #64]	; 0x40
 800cc16:	e022      	b.n	800cc5e <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800cc18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc1a:	005b      	lsls	r3, r3, #1
 800cc1c:	f103 0209 	add.w	r2, r3, #9
 800cc20:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800cc22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc24:	440b      	add	r3, r1
 800cc26:	005b      	lsls	r3, r3, #1
 800cc28:	6879      	ldr	r1, [r7, #4]
 800cc2a:	440a      	add	r2, r1
 800cc2c:	7b51      	ldrb	r1, [r2, #13]
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	4413      	add	r3, r2
 800cc32:	460a      	mov	r2, r1
 800cc34:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800cc38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc3a:	3305      	adds	r3, #5
 800cc3c:	005a      	lsls	r2, r3, #1
 800cc3e:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800cc40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc42:	440b      	add	r3, r1
 800cc44:	005b      	lsls	r3, r3, #1
 800cc46:	3301      	adds	r3, #1
 800cc48:	6879      	ldr	r1, [r7, #4]
 800cc4a:	440a      	add	r2, r1
 800cc4c:	7b51      	ldrb	r1, [r2, #13]
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	4413      	add	r3, r2
 800cc52:	460a      	mov	r2, r1
 800cc54:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
						for (int i=0;i< qty; i++)
 800cc58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	643b      	str	r3, [r7, #64]	; 0x40
 800cc5e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800cc62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc64:	429a      	cmp	r2, r3
 800cc66:	dbd7      	blt.n	800cc18 <ModBUS+0x1300>

						}


					}
					break;
 800cc68:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	7c9b      	ldrb	r3, [r3, #18]
 800cc6e:	461a      	mov	r2, r3
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	7d5b      	ldrb	r3, [r3, #21]
 800cc74:	1ad3      	subs	r3, r2, r3
 800cc76:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc78:	e034      	b.n	800cce4 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	7d1b      	ldrb	r3, [r3, #20]
 800cc7e:	3b81      	subs	r3, #129	; 0x81
 800cc80:	2b15      	cmp	r3, #21
 800cc82:	d82f      	bhi.n	800cce4 <ModBUS+0x13cc>
 800cc84:	a201      	add	r2, pc, #4	; (adr r2, 800cc8c <ModBUS+0x1374>)
 800cc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc8a:	bf00      	nop
 800cc8c:	0800cce5 	.word	0x0800cce5
 800cc90:	0800cce5 	.word	0x0800cce5
 800cc94:	0800cce5 	.word	0x0800cce5
 800cc98:	0800cce5 	.word	0x0800cce5
 800cc9c:	0800cce5 	.word	0x0800cce5
 800cca0:	0800cce5 	.word	0x0800cce5
 800cca4:	0800cce5 	.word	0x0800cce5
 800cca8:	0800cce5 	.word	0x0800cce5
 800ccac:	0800cce5 	.word	0x0800cce5
 800ccb0:	0800cce5 	.word	0x0800cce5
 800ccb4:	0800cce5 	.word	0x0800cce5
 800ccb8:	0800cce5 	.word	0x0800cce5
 800ccbc:	0800cce5 	.word	0x0800cce5
 800ccc0:	0800cce5 	.word	0x0800cce5
 800ccc4:	0800cce5 	.word	0x0800cce5
 800ccc8:	0800cce5 	.word	0x0800cce5
 800cccc:	0800cce5 	.word	0x0800cce5
 800ccd0:	0800cce5 	.word	0x0800cce5
 800ccd4:	0800cce5 	.word	0x0800cce5
 800ccd8:	0800cce5 	.word	0x0800cce5
 800ccdc:	0800cce5 	.word	0x0800cce5
 800cce0:	0800cce5 	.word	0x0800cce5
			}
		}
	}


}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3770      	adds	r7, #112	; 0x70
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <SPI_ETH_RESET>:
 */

#include "ETH_W5500.h"

SPI_ETH_RESET(struct W5500_SPI * x)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->RST_PORT, x->RST_PIN , GPIO_PIN_RESET);		//RST LOW
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	68d8      	ldr	r0, [r3, #12]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	8a1b      	ldrh	r3, [r3, #16]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	4619      	mov	r1, r3
 800cd00:	f7f6 fa10 	bl	8003124 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800cd04:	2001      	movs	r0, #1
 800cd06:	f7f5 fdab 	bl	8002860 <HAL_Delay>
	HAL_GPIO_WritePin(x->RST_PORT, x->RST_PIN , GPIO_PIN_SET);			//RST HIGH
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	68d8      	ldr	r0, [r3, #12]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	8a1b      	ldrh	r3, [r3, #16]
 800cd12:	2201      	movs	r2, #1
 800cd14:	4619      	mov	r1, r3
 800cd16:	f7f6 fa05 	bl	8003124 <HAL_GPIO_WritePin>
}
 800cd1a:	bf00      	nop
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3708      	adds	r7, #8
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <SPI_ETH_PHY_RESET>:

SPI_ETH_PHY_RESET(struct W5500_SPI * x)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
uint8_t a;

	x->TX[0]=0x00;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	771a      	strb	r2, [r3, #28]
	x->TX[1]=0x2E;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	222e      	movs	r2, #46	; 0x2e
 800cd36:	775a      	strb	r2, [r3, #29]
	x->TX[2]=0x00;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	779a      	strb	r2, [r3, #30]
	x->TX[3]=0x00;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	77da      	strb	r2, [r3, #31]
	SPI_ETH(x);			//Realizo la letura de PHYCFGR
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f000 f81c 	bl	800cd82 <SPI_ETH>
	a=x->RX[3];
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800cd50:	73fb      	strb	r3, [r7, #15]
	a=a&0xFE;
 800cd52:	7bfb      	ldrb	r3, [r7, #15]
 800cd54:	f023 0301 	bic.w	r3, r3, #1
 800cd58:	73fb      	strb	r3, [r7, #15]
	x->TX[0]=0x00;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	771a      	strb	r2, [r3, #28]
	x->TX[1]=0x2E;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	222e      	movs	r2, #46	; 0x2e
 800cd64:	775a      	strb	r2, [r3, #29]
	x->TX[2]=0x04;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2204      	movs	r2, #4
 800cd6a:	779a      	strb	r2, [r3, #30]
	x->TX[3]=a;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	7bfa      	ldrb	r2, [r7, #15]
 800cd70:	77da      	strb	r2, [r3, #31]
	SPI_ETH(x);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 f805 	bl	800cd82 <SPI_ETH>
}
 800cd78:	bf00      	nop
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <SPI_ETH>:

uint8_t  SPI_ETH(struct  W5500_SPI * x )
{
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b084      	sub	sp, #16
 800cd86:	af02      	add	r7, sp, #8
 800cd88:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6858      	ldr	r0, [r3, #4]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	891b      	ldrh	r3, [r3, #8]
 800cd92:	2200      	movs	r2, #0
 800cd94:	4619      	mov	r1, r3
 800cd96:	f7f6 f9c5 	bl	8003124 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6818      	ldr	r0, [r3, #0]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f103 011c 	add.w	r1, r3, #28
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f103 0220 	add.w	r2, r3, #32
 800cdaa:	2364      	movs	r3, #100	; 0x64
 800cdac:	9300      	str	r3, [sp, #0]
 800cdae:	2304      	movs	r3, #4
 800cdb0:	f7f6 fecd 	bl	8003b4e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6858      	ldr	r0, [r3, #4]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	891b      	ldrh	r3, [r3, #8]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	f7f6 f9b0 	bl	8003124 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3708      	adds	r7, #8
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}

0800cdd2 <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5500_SPI * x,  uint16_t ph_addr, uint8_t addr,uint8_t op, uint8_t * data, uint8_t lnght)
{
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	b086      	sub	sp, #24
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
 800cdda:	4608      	mov	r0, r1
 800cddc:	4611      	mov	r1, r2
 800cdde:	461a      	mov	r2, r3
 800cde0:	4603      	mov	r3, r0
 800cde2:	807b      	strh	r3, [r7, #2]
 800cde4:	460b      	mov	r3, r1
 800cde6:	707b      	strb	r3, [r7, #1]
 800cde8:	4613      	mov	r3, r2
 800cdea:	703b      	strb	r3, [r7, #0]
 uint16_t res=0;
 800cdec:	2300      	movs	r3, #0
 800cdee:	82fb      	strh	r3, [r7, #22]
 uint8_t  a=op;
 800cdf0:	783b      	ldrb	r3, [r7, #0]
 800cdf2:	72fb      	strb	r3, [r7, #11]

 x->TX[0]= (ph_addr & 0xFF00)>>8; 				//High Address Phase
 800cdf4:	887b      	ldrh	r3, [r7, #2]
 800cdf6:	0a1b      	lsrs	r3, r3, #8
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	b2da      	uxtb	r2, r3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	771a      	strb	r2, [r3, #28]
 x->TX[1]= ph_addr & 0x00FF;					//Low Address Phase
 800ce00:	887b      	ldrh	r3, [r7, #2]
 800ce02:	b2da      	uxtb	r2, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	775a      	strb	r2, [r3, #29]
 x->TX[2]= ((addr)<<3)|((op)<<2);
 800ce08:	787b      	ldrb	r3, [r7, #1]
 800ce0a:	00db      	lsls	r3, r3, #3
 800ce0c:	b25a      	sxtb	r2, r3
 800ce0e:	783b      	ldrb	r3, [r7, #0]
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	b25b      	sxtb	r3, r3
 800ce14:	4313      	orrs	r3, r2
 800ce16:	b25b      	sxtb	r3, r3
 800ce18:	b2da      	uxtb	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	779a      	strb	r2, [r3, #30]
 x->TX[3]=0x00;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	77da      	strb	r2, [r3, #31]
 if(op == 1)								//Write operation
 800ce24:	783b      	ldrb	r3, [r7, #0]
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d11d      	bne.n	800ce66 <SPI_ETH_REG+0x94>
 {
	 for(int i=0; i<(lnght); i++)			//Esto solo incrementa 256 ubicaciones
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	613b      	str	r3, [r7, #16]
 800ce2e:	e013      	b.n	800ce58 <SPI_ETH_REG+0x86>
	 {
		x->TX[3]=data[i];					//Put data to be sent
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	6a3a      	ldr	r2, [r7, #32]
 800ce34:	4413      	add	r3, r2
 800ce36:	781a      	ldrb	r2, [r3, #0]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	77da      	strb	r2, [r3, #31]
		res=SPI_ETH(x);						//Send data to device
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f7ff ffa0 	bl	800cd82 <SPI_ETH>
 800ce42:	4603      	mov	r3, r0
 800ce44:	82fb      	strh	r3, [r7, #22]
		x->TX[1]++;							//Address increased once
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	7f5b      	ldrb	r3, [r3, #29]
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	b2da      	uxtb	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	775a      	strb	r2, [r3, #29]
	 for(int i=0; i<(lnght); i++)			//Esto solo incrementa 256 ubicaciones
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	3301      	adds	r3, #1
 800ce56:	613b      	str	r3, [r7, #16]
 800ce58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ce5c:	693a      	ldr	r2, [r7, #16]
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	dbe6      	blt.n	800ce30 <SPI_ETH_REG+0x5e>
	 }
	 return(res);
 800ce62:	8afb      	ldrh	r3, [r7, #22]
 800ce64:	e037      	b.n	800ced6 <SPI_ETH_REG+0x104>
 }
	 if(op == 0)							//Read operation
 800ce66:	783b      	ldrb	r3, [r7, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d134      	bne.n	800ced6 <SPI_ETH_REG+0x104>
	 {
		 x->TX[3]=0x00;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	77da      	strb	r2, [r3, #31]
		 if (lnght==2)
 800ce72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ce76:	2b02      	cmp	r3, #2
 800ce78:	d120      	bne.n	800cebc <SPI_ETH_REG+0xea>
		{
		for(int i=0; i<(lnght); i++)
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	60fb      	str	r3, [r7, #12]
 800ce7e:	e016      	b.n	800ceae <SPI_ETH_REG+0xdc>
			{
			res|=SPI_ETH(x);
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f7ff ff7e 	bl	800cd82 <SPI_ETH>
 800ce86:	4603      	mov	r3, r0
 800ce88:	b29a      	uxth	r2, r3
 800ce8a:	8afb      	ldrh	r3, [r7, #22]
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	82fb      	strh	r3, [r7, #22]
			x->TX[1]++;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	7f5b      	ldrb	r3, [r3, #29]
 800ce94:	3301      	adds	r3, #1
 800ce96:	b2da      	uxtb	r2, r3
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	775a      	strb	r2, [r3, #29]
			if (i==0)res=res<<8;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d102      	bne.n	800cea8 <SPI_ETH_REG+0xd6>
 800cea2:	8afb      	ldrh	r3, [r7, #22]
 800cea4:	021b      	lsls	r3, r3, #8
 800cea6:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	60fb      	str	r3, [r7, #12]
 800ceae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ceb2:	68fa      	ldr	r2, [r7, #12]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	dbe3      	blt.n	800ce80 <SPI_ETH_REG+0xae>
			}
		 return(res);
 800ceb8:	8afb      	ldrh	r3, [r7, #22]
 800ceba:	e00c      	b.n	800ced6 <SPI_ETH_REG+0x104>
		}else
		{
			res=SPI_ETH(x);
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f7ff ff60 	bl	800cd82 <SPI_ETH>
 800cec2:	4603      	mov	r3, r0
 800cec4:	82fb      	strh	r3, [r7, #22]
			x->TX[1]++;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	7f5b      	ldrb	r3, [r3, #29]
 800ceca:	3301      	adds	r3, #1
 800cecc:	b2da      	uxtb	r2, r3
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	775a      	strb	r2, [r3, #29]
			return(res);
 800ced2:	8afb      	ldrh	r3, [r7, #22]
 800ced4:	e7ff      	b.n	800ced6 <SPI_ETH_REG+0x104>
		}
 	 }
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3718      	adds	r7, #24
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5500_SPI * x, uint16_t addr, uint16_t  data, uint8_t socket)
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b088      	sub	sp, #32
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	60f8      	str	r0, [r7, #12]
 800cee6:	4608      	mov	r0, r1
 800cee8:	4611      	mov	r1, r2
 800ceea:	461a      	mov	r2, r3
 800ceec:	4603      	mov	r3, r0
 800ceee:	817b      	strh	r3, [r7, #10]
 800cef0:	460b      	mov	r3, r1
 800cef2:	813b      	strh	r3, [r7, #8]
 800cef4:	4613      	mov	r3, r2
 800cef6:	71fb      	strb	r3, [r7, #7]
	uint16_t res=0;
 800cef8:	2300      	movs	r3, #0
 800cefa:	83fb      	strh	r3, [r7, #30]
	uint8_t num[2];
			x->TX[2]= ((socket)<<3)|0x04;
 800cefc:	79fb      	ldrb	r3, [r7, #7]
 800cefe:	00db      	lsls	r3, r3, #3
 800cf00:	b25b      	sxtb	r3, r3
 800cf02:	f043 0304 	orr.w	r3, r3, #4
 800cf06:	b25b      	sxtb	r3, r3
 800cf08:	b2da      	uxtb	r2, r3
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	779a      	strb	r2, [r3, #30]
			num[1] = data & 0x00FF ;
 800cf0e:	893b      	ldrh	r3, [r7, #8]
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	757b      	strb	r3, [r7, #21]
			num[0] = (data & 0xFF00)>>8 ;
 800cf14:	893b      	ldrh	r3, [r7, #8]
 800cf16:	0a1b      	lsrs	r3, r3, #8
 800cf18:	b29b      	uxth	r3, r3
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	753b      	strb	r3, [r7, #20]

			 for(int i=0; i<(2); i++)
 800cf1e:	2300      	movs	r3, #0
 800cf20:	61bb      	str	r3, [r7, #24]
 800cf22:	e01b      	b.n	800cf5c <SPI_ETH_WR_REG_16+0x7e>
				 {
				 	x->TX[1]= addr & 0x00FF;//x->TX[2]= addr & 0x00FF;
 800cf24:	897b      	ldrh	r3, [r7, #10]
 800cf26:	b2da      	uxtb	r2, r3
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	775a      	strb	r2, [r3, #29]
				 	x->TX[0]=(addr & 0xFF00)>>8;//x->TX[1]=(addr & 0xFF00)>>8;
 800cf2c:	897b      	ldrh	r3, [r7, #10]
 800cf2e:	0a1b      	lsrs	r3, r3, #8
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	b2da      	uxtb	r2, r3
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	771a      	strb	r2, [r3, #28]
					addr++;
 800cf38:	897b      	ldrh	r3, [r7, #10]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	817b      	strh	r3, [r7, #10]
					x->TX[3]=num[i];
 800cf3e:	f107 0214 	add.w	r2, r7, #20
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	4413      	add	r3, r2
 800cf46:	781a      	ldrb	r2, [r3, #0]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	77da      	strb	r2, [r3, #31]
					res=SPI_ETH(x);
 800cf4c:	68f8      	ldr	r0, [r7, #12]
 800cf4e:	f7ff ff18 	bl	800cd82 <SPI_ETH>
 800cf52:	4603      	mov	r3, r0
 800cf54:	83fb      	strh	r3, [r7, #30]
			 for(int i=0; i<(2); i++)
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	3301      	adds	r3, #1
 800cf5a:	61bb      	str	r3, [r7, #24]
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	dde0      	ble.n	800cf24 <SPI_ETH_WR_REG_16+0x46>
				 }
			 return(res);
 800cf62:	8bfb      	ldrh	r3, [r7, #30]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3720      	adds	r7, #32
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5500_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght, uint8_t socket )
{
 800cf6c:	b590      	push	{r4, r7, lr}
 800cf6e:	b087      	sub	sp, #28
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	607a      	str	r2, [r7, #4]
 800cf76:	461a      	mov	r2, r3
 800cf78:	460b      	mov	r3, r1
 800cf7a:	817b      	strh	r3, [r7, #10]
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	813b      	strh	r3, [r7, #8]
		x->TX[2]= ((socket)<<3)|0x00;
 800cf80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cf84:	00db      	lsls	r3, r3, #3
 800cf86:	b2da      	uxtb	r2, r3
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	779a      	strb	r2, [r3, #30]
	if(lnght < 2048)
 800cf8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cf8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf92:	d226      	bcs.n	800cfe2 <SPI_ETH_RD_RCV_REG_16+0x76>
	{
			x->TX[3]=0x00;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2200      	movs	r2, #0
 800cf98:	77da      	strb	r2, [r3, #31]
			for(int i=0; i<(lnght); i++)
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	617b      	str	r3, [r7, #20]
 800cf9e:	e01a      	b.n	800cfd6 <SPI_ETH_RD_RCV_REG_16+0x6a>
				{
				x->TX[1] = addr & 0x00FF;
 800cfa0:	897b      	ldrh	r3, [r7, #10]
 800cfa2:	b2da      	uxtb	r2, r3
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	775a      	strb	r2, [r3, #29]
				x->TX[0] = (addr & 0xFF00)>>8;
 800cfa8:	897b      	ldrh	r3, [r7, #10]
 800cfaa:	0a1b      	lsrs	r3, r3, #8
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	771a      	strb	r2, [r3, #28]
				data[i+offset]=SPI_ETH(x);
 800cfb4:	893a      	ldrh	r2, [r7, #8]
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	4413      	add	r3, r2
 800cfba:	461a      	mov	r2, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	189c      	adds	r4, r3, r2
 800cfc0:	68f8      	ldr	r0, [r7, #12]
 800cfc2:	f7ff fede 	bl	800cd82 <SPI_ETH>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	7023      	strb	r3, [r4, #0]
				addr++;
 800cfca:	897b      	ldrh	r3, [r7, #10]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	617b      	str	r3, [r7, #20]
 800cfd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cfd8:	697a      	ldr	r2, [r7, #20]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	dbe0      	blt.n	800cfa0 <SPI_ETH_RD_RCV_REG_16+0x34>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800cfde:	2300      	movs	r3, #0
 800cfe0:	e000      	b.n	800cfe4 <SPI_ETH_RD_RCV_REG_16+0x78>
	}
	else
	{
	return(1);
 800cfe2:	2301      	movs	r3, #1
	}
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	371c      	adds	r7, #28
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd90      	pop	{r4, r7, pc}

0800cfec <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5500_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght, uint8_t socket )
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b086      	sub	sp, #24
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	607a      	str	r2, [r7, #4]
 800cff6:	461a      	mov	r2, r3
 800cff8:	460b      	mov	r3, r1
 800cffa:	817b      	strh	r3, [r7, #10]
 800cffc:	4613      	mov	r3, r2
 800cffe:	813b      	strh	r3, [r7, #8]
		x->TX[2]= ((socket)<<3)|0x04;
 800d000:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d004:	00db      	lsls	r3, r3, #3
 800d006:	b25b      	sxtb	r3, r3
 800d008:	f043 0304 	orr.w	r3, r3, #4
 800d00c:	b25b      	sxtb	r3, r3
 800d00e:	b2da      	uxtb	r2, r3
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	779a      	strb	r2, [r3, #30]
	if(lnght < 2048)
 800d014:	8c3b      	ldrh	r3, [r7, #32]
 800d016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d01a:	d224      	bcs.n	800d066 <SPI_ETH_WR_TX_REG_16+0x7a>
	{

			for(int i=0; i<(lnght); i++)
 800d01c:	2300      	movs	r3, #0
 800d01e:	617b      	str	r3, [r7, #20]
 800d020:	e01b      	b.n	800d05a <SPI_ETH_WR_TX_REG_16+0x6e>
				{
				x->TX[1] = addr & 0x00FF;
 800d022:	897b      	ldrh	r3, [r7, #10]
 800d024:	b2da      	uxtb	r2, r3
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	775a      	strb	r2, [r3, #29]
				x->TX[0] = (addr & 0xFF00)>>8;
 800d02a:	897b      	ldrh	r3, [r7, #10]
 800d02c:	0a1b      	lsrs	r3, r3, #8
 800d02e:	b29b      	uxth	r3, r3
 800d030:	b2da      	uxtb	r2, r3
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	771a      	strb	r2, [r3, #28]
				x->TX[3]= x->data[i+offset];
 800d036:	893a      	ldrh	r2, [r7, #8]
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	4413      	add	r3, r2
 800d03c:	68fa      	ldr	r2, [r7, #12]
 800d03e:	4413      	add	r3, r2
 800d040:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	77da      	strb	r2, [r3, #31]
				SPI_ETH(x);
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f7ff fe9a 	bl	800cd82 <SPI_ETH>
				addr++;
 800d04e:	897b      	ldrh	r3, [r7, #10]
 800d050:	3301      	adds	r3, #1
 800d052:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	3301      	adds	r3, #1
 800d058:	617b      	str	r3, [r7, #20]
 800d05a:	8c3b      	ldrh	r3, [r7, #32]
 800d05c:	697a      	ldr	r2, [r7, #20]
 800d05e:	429a      	cmp	r2, r3
 800d060:	dbdf      	blt.n	800d022 <SPI_ETH_WR_TX_REG_16+0x36>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d062:	2300      	movs	r3, #0
 800d064:	e000      	b.n	800d068 <SPI_ETH_WR_TX_REG_16+0x7c>
	}
	else
	{
	return(1);
 800d066:	2301      	movs	r3, #1
	}
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3718      	adds	r7, #24
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5500_SPI * y, uint8_t socket, uint8_t z)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	460b      	mov	r3, r1
 800d07a:	70fb      	strb	r3, [r7, #3]
 800d07c:	4613      	mov	r3, r2
 800d07e:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= 0x00; 				//High Address Phase Hardcoded MR Register
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	771a      	strb	r2, [r3, #28]
	y->TX[1]= 0x01;					//Low Address Phase Command
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2201      	movs	r2, #1
 800d08a:	775a      	strb	r2, [r3, #29]
	y->TX[2]= ((socket<<3)|0x04);	//Control Phase address + R/W + OP Mode
 800d08c:	78fb      	ldrb	r3, [r7, #3]
 800d08e:	00db      	lsls	r3, r3, #3
 800d090:	b25b      	sxtb	r3, r3
 800d092:	f043 0304 	orr.w	r3, r3, #4
 800d096:	b25b      	sxtb	r3, r3
 800d098:	b2da      	uxtb	r2, r3
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	779a      	strb	r2, [r3, #30]
	y->TX[3]= z ;		//Load data to save
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	78ba      	ldrb	r2, [r7, #2]
 800d0a2:	77da      	strb	r2, [r3, #31]
	SPI_ETH(y);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f7ff fe6c 	bl	800cd82 <SPI_ETH>
}
 800d0aa:	bf00      	nop
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3708      	adds	r7, #8
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5500_SPI * y, uint8_t socket, uint8_t z)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	460b      	mov	r3, r1
 800d0be:	70fb      	strb	r3, [r7, #3]
 800d0c0:	4613      	mov	r3, r2
 800d0c2:	70bb      	strb	r3, [r7, #2]
		y->TX[0]= 0x00; 				//High Address Phase Hardcoded MR Register
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	771a      	strb	r2, [r3, #28]
		y->TX[1]= 0x00;					//Low Address Phase Mode
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	775a      	strb	r2, [r3, #29]
		y->TX[2]= ((socket)<<3)|0x04;	//Control Phase address + R/W + OP Mode
 800d0d0:	78fb      	ldrb	r3, [r7, #3]
 800d0d2:	00db      	lsls	r3, r3, #3
 800d0d4:	b25b      	sxtb	r3, r3
 800d0d6:	f043 0304 	orr.w	r3, r3, #4
 800d0da:	b25b      	sxtb	r3, r3
 800d0dc:	b2da      	uxtb	r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	779a      	strb	r2, [r3, #30]
		y->TX[3]= z ;		//Load data to save
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	78ba      	ldrb	r2, [r7, #2]
 800d0e6:	77da      	strb	r2, [r3, #31]

	SPI_ETH(y);
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f7ff fe4a 	bl	800cd82 <SPI_ETH>
}
 800d0ee:	bf00      	nop
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <eth_init>:


uint8_t eth_init(struct W5500_SPI * ETH)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af02      	add	r7, sp, #8
 800d0fe:	6078      	str	r0, [r7, #4]
  	 SPI_ETH_RESET(ETH);	//Reset W5500 por hardware
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f7ff fdf3 	bl	800ccec <SPI_ETH_RESET>
  	 HAL_Delay(800);
 800d106:	f44f 7048 	mov.w	r0, #800	; 0x320
 800d10a:	f7f5 fba9 	bl	8002860 <HAL_Delay>

  	 SPI_ETH_REG(ETH, GAR,COMM_REG,SPI_WRITE, ETH->GAR,4);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d114:	3304      	adds	r3, #4
 800d116:	2204      	movs	r2, #4
 800d118:	9201      	str	r2, [sp, #4]
 800d11a:	9300      	str	r3, [sp, #0]
 800d11c:	2301      	movs	r3, #1
 800d11e:	2200      	movs	r2, #0
 800d120:	2101      	movs	r1, #1
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f7ff fe55 	bl	800cdd2 <SPI_ETH_REG>

	 ETH->T8=0x00;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d12e:	2200      	movs	r2, #0
 800d130:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, IMR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d13a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d13e:	461a      	mov	r2, r3
 800d140:	2301      	movs	r3, #1
 800d142:	9301      	str	r3, [sp, #4]
 800d144:	9200      	str	r2, [sp, #0]
 800d146:	2301      	movs	r3, #1
 800d148:	2200      	movs	r2, #0
 800d14a:	2116      	movs	r1, #22
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f7ff fe40 	bl	800cdd2 <SPI_ETH_REG>

	 ETH->T8=0x0F;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d158:	220f      	movs	r2, #15
 800d15a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RTR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d164:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d168:	461a      	mov	r2, r3
 800d16a:	2301      	movs	r3, #1
 800d16c:	9301      	str	r3, [sp, #4]
 800d16e:	9200      	str	r2, [sp, #0]
 800d170:	2301      	movs	r3, #1
 800d172:	2200      	movs	r2, #0
 800d174:	2119      	movs	r1, #25
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f7ff fe2b 	bl	800cdd2 <SPI_ETH_REG>

	 ETH->T8=0xA0;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d182:	22a0      	movs	r2, #160	; 0xa0
 800d184:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RTR+1,COMM_REG,SPI_WRITE, ETH->T8,1);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d18e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d192:	461a      	mov	r2, r3
 800d194:	2301      	movs	r3, #1
 800d196:	9301      	str	r3, [sp, #4]
 800d198:	9200      	str	r2, [sp, #0]
 800d19a:	2301      	movs	r3, #1
 800d19c:	2200      	movs	r2, #0
 800d19e:	211a      	movs	r1, #26
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f7ff fe16 	bl	800cdd2 <SPI_ETH_REG>

	 ETH->T8=0x07;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1ac:	2207      	movs	r2, #7
 800d1ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RCR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1b8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d1bc:	461a      	mov	r2, r3
 800d1be:	2301      	movs	r3, #1
 800d1c0:	9301      	str	r3, [sp, #4]
 800d1c2:	9200      	str	r2, [sp, #0]
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	211b      	movs	r1, #27
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7ff fe01 	bl	800cdd2 <SPI_ETH_REG>

	 ETH->T8=0x00;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, SIMR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1e2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	9301      	str	r3, [sp, #4]
 800d1ec:	9200      	str	r2, [sp, #0]
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	2118      	movs	r1, #24
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f7ff fdec 	bl	800cdd2 <SPI_ETH_REG>

	 SPI_ETH_REG(ETH, SHAR,COMM_REG,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d200:	330c      	adds	r3, #12
 800d202:	2206      	movs	r2, #6
 800d204:	9201      	str	r2, [sp, #4]
 800d206:	9300      	str	r3, [sp, #0]
 800d208:	2301      	movs	r3, #1
 800d20a:	2200      	movs	r2, #0
 800d20c:	2109      	movs	r1, #9
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f7ff fddf 	bl	800cdd2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-MAC SET\r\n",strlen("\r\nETH-W5500-MAC SET"));
 800d214:	2113      	movs	r1, #19
 800d216:	481d      	ldr	r0, [pc, #116]	; (800d28c <eth_init+0x194>)
 800d218:	f7f4 f8ee 	bl	80013f8 <ITM0_Write>
	 SPI_ETH_REG(ETH, GAR,COMM_REG,SPI_WRITE, ETH->GAR,4);	//SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d222:	3304      	adds	r3, #4
 800d224:	2204      	movs	r2, #4
 800d226:	9201      	str	r2, [sp, #4]
 800d228:	9300      	str	r3, [sp, #0]
 800d22a:	2301      	movs	r3, #1
 800d22c:	2200      	movs	r2, #0
 800d22e:	2101      	movs	r1, #1
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f7ff fdce 	bl	800cdd2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-GATEWAY SET\r\n",strlen("\r\nETH-W5500-GATEWAY SET\r\n"));									//same for server and client
 800d236:	2119      	movs	r1, #25
 800d238:	4815      	ldr	r0, [pc, #84]	; (800d290 <eth_init+0x198>)
 800d23a:	f7f4 f8dd 	bl	80013f8 <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR,COMM_REG,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d244:	3308      	adds	r3, #8
 800d246:	2204      	movs	r2, #4
 800d248:	9201      	str	r2, [sp, #4]
 800d24a:	9300      	str	r3, [sp, #0]
 800d24c:	2301      	movs	r3, #1
 800d24e:	2200      	movs	r2, #0
 800d250:	2105      	movs	r1, #5
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f7ff fdbd 	bl	800cdd2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-SUBNET SET\r\n",strlen("\r\nETH-W5500-SUBNET SET"));											//same for server and client
 800d258:	2116      	movs	r1, #22
 800d25a:	480e      	ldr	r0, [pc, #56]	; (800d294 <eth_init+0x19c>)
 800d25c:	f7f4 f8cc 	bl	80013f8 <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR,COMM_REG,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d266:	3312      	adds	r3, #18
 800d268:	2204      	movs	r2, #4
 800d26a:	9201      	str	r2, [sp, #4]
 800d26c:	9300      	str	r3, [sp, #0]
 800d26e:	2301      	movs	r3, #1
 800d270:	2200      	movs	r2, #0
 800d272:	210f      	movs	r1, #15
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f7ff fdac 	bl	800cdd2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-IP SET\r\n",strlen("\r\nETH-W5500-IP SET"));
 800d27a:	2112      	movs	r1, #18
 800d27c:	4806      	ldr	r0, [pc, #24]	; (800d298 <eth_init+0x1a0>)
 800d27e:	f7f4 f8bb 	bl	80013f8 <ITM0_Write>

}
 800d282:	bf00      	nop
 800d284:	4618      	mov	r0, r3
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	08010638 	.word	0x08010638
 800d290:	08010650 	.word	0x08010650
 800d294:	0801066c 	.word	0x0801066c
 800d298:	08010688 	.word	0x08010688

0800d29c <eth_socket_init>:

uint8_t eth_socket_init(struct W5500_SPI * ETH, uint8_t socket)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b086      	sub	sp, #24
 800d2a0:	af02      	add	r7, sp, #8
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	70fb      	strb	r3, [r7, #3]

	 ETH->T8=0x02;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2ae:	2202      	movs	r2, #2
 800d2b0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S0_REG,SPI_WRITE, ETH->T8,1);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2ba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d2be:	461a      	mov	r2, r3
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	9301      	str	r3, [sp, #4]
 800d2c4:	9200      	str	r2, [sp, #0]
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	211e      	movs	r1, #30
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f7ff fd80 	bl	800cdd2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S0_REG,SPI_WRITE, ETH->T8,1);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2d8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d2dc:	461a      	mov	r2, r3
 800d2de:	2301      	movs	r3, #1
 800d2e0:	9301      	str	r3, [sp, #4]
 800d2e2:	9200      	str	r2, [sp, #0]
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	211f      	movs	r1, #31
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f7ff fd71 	bl	800cdd2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S1_REG,SPI_WRITE, ETH->T8,1);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2f6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	9301      	str	r3, [sp, #4]
 800d300:	9200      	str	r2, [sp, #0]
 800d302:	2301      	movs	r3, #1
 800d304:	2205      	movs	r2, #5
 800d306:	211e      	movs	r1, #30
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f7ff fd62 	bl	800cdd2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S1_REG,SPI_WRITE, ETH->T8,1);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d314:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d318:	461a      	mov	r2, r3
 800d31a:	2301      	movs	r3, #1
 800d31c:	9301      	str	r3, [sp, #4]
 800d31e:	9200      	str	r2, [sp, #0]
 800d320:	2301      	movs	r3, #1
 800d322:	2205      	movs	r2, #5
 800d324:	211f      	movs	r1, #31
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f7ff fd53 	bl	800cdd2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S2_REG,SPI_WRITE, ETH->T8,1);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d332:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d336:	461a      	mov	r2, r3
 800d338:	2301      	movs	r3, #1
 800d33a:	9301      	str	r3, [sp, #4]
 800d33c:	9200      	str	r2, [sp, #0]
 800d33e:	2301      	movs	r3, #1
 800d340:	2209      	movs	r2, #9
 800d342:	211e      	movs	r1, #30
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f7ff fd44 	bl	800cdd2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S2_REG,SPI_WRITE, ETH->T8,1);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d350:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d354:	461a      	mov	r2, r3
 800d356:	2301      	movs	r3, #1
 800d358:	9301      	str	r3, [sp, #4]
 800d35a:	9200      	str	r2, [sp, #0]
 800d35c:	2301      	movs	r3, #1
 800d35e:	2209      	movs	r2, #9
 800d360:	211f      	movs	r1, #31
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f7ff fd35 	bl	800cdd2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S3_REG,SPI_WRITE, ETH->T8,1);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d36e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d372:	461a      	mov	r2, r3
 800d374:	2301      	movs	r3, #1
 800d376:	9301      	str	r3, [sp, #4]
 800d378:	9200      	str	r2, [sp, #0]
 800d37a:	2301      	movs	r3, #1
 800d37c:	220d      	movs	r2, #13
 800d37e:	211e      	movs	r1, #30
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f7ff fd26 	bl	800cdd2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S3_REG,SPI_WRITE, ETH->T8,1);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d38c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d390:	461a      	mov	r2, r3
 800d392:	2301      	movs	r3, #1
 800d394:	9301      	str	r3, [sp, #4]
 800d396:	9200      	str	r2, [sp, #0]
 800d398:	2301      	movs	r3, #1
 800d39a:	220d      	movs	r2, #13
 800d39c:	211f      	movs	r1, #31
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f7ff fd17 	bl	800cdd2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S4_REG,SPI_WRITE, ETH->T8,1);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	9301      	str	r3, [sp, #4]
 800d3b4:	9200      	str	r2, [sp, #0]
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	2211      	movs	r2, #17
 800d3ba:	211e      	movs	r1, #30
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f7ff fd08 	bl	800cdd2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S4_REG,SPI_WRITE, ETH->T8,1);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3c8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	9301      	str	r3, [sp, #4]
 800d3d2:	9200      	str	r2, [sp, #0]
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	2211      	movs	r2, #17
 800d3d8:	211f      	movs	r1, #31
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f7ff fcf9 	bl	800cdd2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S5_REG,SPI_WRITE, ETH->T8,1);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3e6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	9301      	str	r3, [sp, #4]
 800d3f0:	9200      	str	r2, [sp, #0]
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	2215      	movs	r2, #21
 800d3f6:	211e      	movs	r1, #30
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f7ff fcea 	bl	800cdd2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S5_REG,SPI_WRITE, ETH->T8,1);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d404:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d408:	461a      	mov	r2, r3
 800d40a:	2301      	movs	r3, #1
 800d40c:	9301      	str	r3, [sp, #4]
 800d40e:	9200      	str	r2, [sp, #0]
 800d410:	2301      	movs	r3, #1
 800d412:	2215      	movs	r2, #21
 800d414:	211f      	movs	r1, #31
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f7ff fcdb 	bl	800cdd2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S6_REG,SPI_WRITE, ETH->T8,1);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d422:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d426:	461a      	mov	r2, r3
 800d428:	2301      	movs	r3, #1
 800d42a:	9301      	str	r3, [sp, #4]
 800d42c:	9200      	str	r2, [sp, #0]
 800d42e:	2301      	movs	r3, #1
 800d430:	2219      	movs	r2, #25
 800d432:	211e      	movs	r1, #30
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f7ff fccc 	bl	800cdd2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S6_REG,SPI_WRITE, ETH->T8,1);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d440:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d444:	461a      	mov	r2, r3
 800d446:	2301      	movs	r3, #1
 800d448:	9301      	str	r3, [sp, #4]
 800d44a:	9200      	str	r2, [sp, #0]
 800d44c:	2301      	movs	r3, #1
 800d44e:	2219      	movs	r2, #25
 800d450:	211f      	movs	r1, #31
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f7ff fcbd 	bl	800cdd2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S7_REG,SPI_WRITE, ETH->T8,1);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d45e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d462:	461a      	mov	r2, r3
 800d464:	2301      	movs	r3, #1
 800d466:	9301      	str	r3, [sp, #4]
 800d468:	9200      	str	r2, [sp, #0]
 800d46a:	2301      	movs	r3, #1
 800d46c:	221d      	movs	r2, #29
 800d46e:	211e      	movs	r1, #30
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f7ff fcae 	bl	800cdd2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S7_REG,SPI_WRITE, ETH->T8,1);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d47c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d480:	461a      	mov	r2, r3
 800d482:	2301      	movs	r3, #1
 800d484:	9301      	str	r3, [sp, #4]
 800d486:	9200      	str	r2, [sp, #0]
 800d488:	2301      	movs	r3, #1
 800d48a:	221d      	movs	r2, #29
 800d48c:	211f      	movs	r1, #31
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f7ff fc9f 	bl	800cdd2 <SPI_ETH_REG>
	 ETH->T8=0x00;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d49a:	2200      	movs	r2, #0
 800d49c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, S_TX_WR,S0_REG,SPI_WRITE, ETH->T8,1);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4a6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	9301      	str	r3, [sp, #4]
 800d4b0:	9200      	str	r2, [sp, #0]
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	2124      	movs	r1, #36	; 0x24
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f7ff fc8a 	bl	800cdd2 <SPI_ETH_REG>
	 SPI_ETH_REG(ETH, S_TX_WR+1,S0_REG,SPI_WRITE, ETH->T8,1);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4c4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	9301      	str	r3, [sp, #4]
 800d4ce:	9200      	str	r2, [sp, #0]
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	2125      	movs	r1, #37	; 0x25
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f7ff fc7b 	bl	800cdd2 <SPI_ETH_REG>
	 uint16_t b=0;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	81fb      	strh	r3, [r7, #14]
	 uint8_t spi_Data[2];
	 b = SPI_ETH_REG(ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 800d4e0:	2302      	movs	r3, #2
 800d4e2:	9301      	str	r3, [sp, #4]
 800d4e4:	f107 030c 	add.w	r3, r7, #12
 800d4e8:	9300      	str	r3, [sp, #0]
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	2124      	movs	r1, #36	; 0x24
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f7ff fc6e 	bl	800cdd2 <SPI_ETH_REG>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	81fb      	strh	r3, [r7, #14]
	 //ITM0_Write("\r\nETH-W5500-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP SET"));									//same for server and client
	 SPI_ETH_REG(ETH, S_PORT, S0_REG,SPI_WRITE, ETH->S_PORT,2);									//same for server and client
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d500:	3302      	adds	r3, #2
 800d502:	2202      	movs	r2, #2
 800d504:	9201      	str	r2, [sp, #4]
 800d506:	9300      	str	r3, [sp, #0]
 800d508:	2301      	movs	r3, #1
 800d50a:	2201      	movs	r2, #1
 800d50c:	2104      	movs	r1, #4
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f7ff fc5f 	bl	800cdd2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800d514:	212c      	movs	r1, #44	; 0x2c
 800d516:	4804      	ldr	r0, [pc, #16]	; (800d528 <eth_socket_init+0x28c>)
 800d518:	f7f3 ff6e 	bl	80013f8 <ITM0_Write>


}
 800d51c:	bf00      	nop
 800d51e:	4618      	mov	r0, r3
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	080106a0 	.word	0x080106a0

0800d52c <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5500_SPI * y, uint8_t socket)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b082      	sub	sp, #8
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	460b      	mov	r3, r1
 800d536:	70fb      	strb	r3, [r7, #3]
			y->TX[0]= 0x00; 				//High Address Phase Hardcoded Stat Register
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	771a      	strb	r2, [r3, #28]
			y->TX[1]= 0x03;					//Low Address Phase Mode
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2203      	movs	r2, #3
 800d542:	775a      	strb	r2, [r3, #29]
			y->TX[2]= ((socket)<<3)|0x00;	   //Control Phase address + R/W + OP Mode
 800d544:	78fb      	ldrb	r3, [r7, #3]
 800d546:	00db      	lsls	r3, r3, #3
 800d548:	b2da      	uxtb	r2, r3
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	779a      	strb	r2, [r3, #30]
			SPI_ETH(y);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f7ff fc17 	bl	800cd82 <SPI_ETH>
			return(y->RX[3]);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23

}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3708      	adds	r7, #8
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5500_SPI * y, uint8_t socket)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b082      	sub	sp, #8
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
 800d56a:	460b      	mov	r3, r1
 800d56c:	70fb      	strb	r3, [r7, #3]
			y->TX[0]= 0x00; 				//High Address Phase Hardcoded Command Register
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	771a      	strb	r2, [r3, #28]
			y->TX[1]= 0x01;					//Low Address Phase Mode
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2201      	movs	r2, #1
 800d578:	775a      	strb	r2, [r3, #29]
			y->TX[2]= ((socket)<<3)|0x00;	   //Control Phase address + R/W + OP Mode
 800d57a:	78fb      	ldrb	r3, [r7, #3]
 800d57c:	00db      	lsls	r3, r3, #3
 800d57e:	b2da      	uxtb	r2, r3
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	779a      	strb	r2, [r3, #30]
			SPI_ETH(y);
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f7ff fbfc 	bl	800cd82 <SPI_ETH>
			return(y->RX[3]);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23

}
 800d590:	4618      	mov	r0, r3
 800d592:	3708      	adds	r7, #8
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5500_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b08c      	sub	sp, #48	; 0x30
 800d59c:	af02      	add	r7, sp, #8
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	607a      	str	r2, [r7, #4]
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	72fb      	strb	r3, [r7, #11]
 800d5a8:	4613      	mov	r3, r2
 800d5aa:	813b      	strh	r3, [r7, #8]
	uint16_t S_bf_rcv_offset=0,
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	84fb      	strh	r3, [r7, #38]	; 0x26
			 left_size=0,
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	84bb      	strh	r3, [r7, #36]	; 0x24
			 upper_size=0,
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	847b      	strh	r3, [r7, #34]	; 0x22
			 destination_addr=0,
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	843b      	strh	r3, [r7, #32]
			 S_RX_RD=0,
 800d5bc:	2300      	movs	r3, #0
 800d5be:	83fb      	strh	r3, [r7, #30]
			 S_get_offset=0,
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	83bb      	strh	r3, [r7, #28]
			 S_get_start_address=0,
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	837b      	strh	r3, [r7, #26]
			 S_mem_pointer=0,
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	833b      	strh	r3, [r7, #24]
			 RX_MASK=0,
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	82fb      	strh	r3, [r7, #22]
			 RX_BASE=0;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	82bb      	strh	r3, [r7, #20]
			RX_BASE=ETH->gS3_RX_BASE;
		}
		break;*/
		default :
		{
			RX_MASK=ETH->gS_RX_MASK;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d5de:	82fb      	strh	r3, [r7, #22]
			RX_BASE=ETH->gS_RX_BASE;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d5ea:	82bb      	strh	r3, [r7, #20]
		}
		break;
 800d5ec:	bf00      	nop
	}

	S_RX_RD = SPI_ETH_REG(ETH, S_RX_RD0 ,S0_REG ,SPI_READ, spi_Data,2);//S_RX_RD = SPI_ETH_REG(ETH, S_RX_RD_ADDR_BASEHH + socket ,S_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800d5ee:	2302      	movs	r3, #2
 800d5f0:	9301      	str	r3, [sp, #4]
 800d5f2:	f107 0310 	add.w	r3, r7, #16
 800d5f6:	9300      	str	r3, [sp, #0]
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	2128      	movs	r1, #40	; 0x28
 800d5fe:	68f8      	ldr	r0, [r7, #12]
 800d600:	f7ff fbe7 	bl	800cdd2 <SPI_ETH_REG>
 800d604:	4603      	mov	r3, r0
 800d606:	83fb      	strh	r3, [r7, #30]
	S_get_offset = S_RX_RD & RX_MASK;
 800d608:	8bfa      	ldrh	r2, [r7, #30]
 800d60a:	8afb      	ldrh	r3, [r7, #22]
 800d60c:	4013      	ands	r3, r2
 800d60e:	83bb      	strh	r3, [r7, #28]
	S_get_start_address  = RX_BASE + S_get_offset;
 800d610:	8aba      	ldrh	r2, [r7, #20]
 800d612:	8bbb      	ldrh	r3, [r7, #28]
 800d614:	4413      	add	r3, r2
 800d616:	837b      	strh	r3, [r7, #26]
	if((S_get_offset  + sizedata )>(RX_MASK + 1))
 800d618:	8bba      	ldrh	r2, [r7, #28]
 800d61a:	893b      	ldrh	r3, [r7, #8]
 800d61c:	441a      	add	r2, r3
 800d61e:	8afb      	ldrh	r3, [r7, #22]
 800d620:	3301      	adds	r3, #1
 800d622:	429a      	cmp	r2, r3
 800d624:	dd30      	ble.n	800d688 <eth_rd_SOCKET_DATA+0xf0>
		{
			upper_size = (RX_MASK + 1) - S_get_offset ;
 800d626:	8afa      	ldrh	r2, [r7, #22]
 800d628:	8bbb      	ldrh	r3, [r7, #28]
 800d62a:	1ad3      	subs	r3, r2, r3
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	3301      	adds	r3, #1
 800d630:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , S_get_start_address , ETH->data , S_bf_rcv_offset, upper_size, socket);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d638:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800d63a:	8b79      	ldrh	r1, [r7, #26]
 800d63c:	7afb      	ldrb	r3, [r7, #11]
 800d63e:	9301      	str	r3, [sp, #4]
 800d640:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d642:	9300      	str	r3, [sp, #0]
 800d644:	4603      	mov	r3, r0
 800d646:	68f8      	ldr	r0, [r7, #12]
 800d648:	f7ff fc90 	bl	800cf6c <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800d64c:	8c3a      	ldrh	r2, [r7, #32]
 800d64e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d650:	4413      	add	r3, r2
 800d652:	843b      	strh	r3, [r7, #32]
			left_size=sizedata-upper_size;
 800d654:	893a      	ldrh	r2, [r7, #8]
 800d656:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d658:	1ad3      	subs	r3, r2, r3
 800d65a:	84bb      	strh	r3, [r7, #36]	; 0x24
			S_bf_rcv_offset=upper_size;
 800d65c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d65e:	84fb      	strh	r3, [r7, #38]	; 0x26
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S_bf_rcv_offset, left_size, socket);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d666:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800d668:	8ab9      	ldrh	r1, [r7, #20]
 800d66a:	7afb      	ldrb	r3, [r7, #11]
 800d66c:	9301      	str	r3, [sp, #4]
 800d66e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d670:	9300      	str	r3, [sp, #0]
 800d672:	4603      	mov	r3, r0
 800d674:	68f8      	ldr	r0, [r7, #12]
 800d676:	f7ff fc79 	bl	800cf6c <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S_RX_RD + sizedata;
 800d67a:	8bfa      	ldrh	r2, [r7, #30]
 800d67c:	893b      	ldrh	r3, [r7, #8]
 800d67e:	4413      	add	r3, r2
 800d680:	b29a      	uxth	r2, r3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	801a      	strh	r2, [r3, #0]
 800d686:	e012      	b.n	800d6ae <eth_rd_SOCKET_DATA+0x116>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S_get_start_address , ETH->data , S_bf_rcv_offset, sizedata, socket);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d68e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800d690:	8b79      	ldrh	r1, [r7, #26]
 800d692:	7afb      	ldrb	r3, [r7, #11]
 800d694:	9301      	str	r3, [sp, #4]
 800d696:	893b      	ldrh	r3, [r7, #8]
 800d698:	9300      	str	r3, [sp, #0]
 800d69a:	4603      	mov	r3, r0
 800d69c:	68f8      	ldr	r0, [r7, #12]
 800d69e:	f7ff fc65 	bl	800cf6c <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S_RX_RD + sizedata;
 800d6a2:	8bfa      	ldrh	r2, [r7, #30]
 800d6a4:	893b      	ldrh	r3, [r7, #8]
 800d6a6:	4413      	add	r3, r2
 800d6a8:	b29a      	uxth	r2, r3
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	b29b      	uxth	r3, r3
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3728      	adds	r7, #40	; 0x28
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5500_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b08c      	sub	sp, #48	; 0x30
 800d6be:	af02      	add	r7, sp, #8
 800d6c0:	60f8      	str	r0, [r7, #12]
 800d6c2:	607a      	str	r2, [r7, #4]
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	460b      	mov	r3, r1
 800d6c8:	72fb      	strb	r3, [r7, #11]
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	813b      	strh	r3, [r7, #8]
	uint16_t S_bf_rcv_offset=0,
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	84bb      	strh	r3, [r7, #36]	; 0x24
			 left_size=0,
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	847b      	strh	r3, [r7, #34]	; 0x22
			 upper_size=0,
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	843b      	strh	r3, [r7, #32]
			 source_addr=0,
 800d6da:	2300      	movs	r3, #0
 800d6dc:	83fb      	strh	r3, [r7, #30]
			 Sn_TX_WR=0,
 800d6de:	2300      	movs	r3, #0
 800d6e0:	83bb      	strh	r3, [r7, #28]
			 get_offset=0,
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	837b      	strh	r3, [r7, #26]
			 get_free_size=0,
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	833b      	strh	r3, [r7, #24]
			 S_mem_pointer=0,
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	82fb      	strh	r3, [r7, #22]
			 TX_MASK=0,
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	82bb      	strh	r3, [r7, #20]
			 TX_BASE=0;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	827b      	strh	r3, [r7, #18]
			TX_BASE=ETH->gS3_TX_BASE;
		}
		break;*/
		default :
		{
			TX_MASK=ETH->gS_TX_MASK;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d700:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d704:	82bb      	strh	r3, [r7, #20]
			TX_BASE=ETH->gS_TX_BASE;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d70c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d710:	827b      	strh	r3, [r7, #18]
		}
		break;
 800d712:	bf00      	nop
	}

	while(get_free_size<send_size)
 800d714:	e00c      	b.n	800d730 <eth_wr_SOCKET_DATA+0x76>
			{
				get_free_size=SPI_ETH_REG(ETH, S_TX_FSR, S0_REG ,SPI_READ, spi_Data,2);//get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S_TX_FSR	=   0x420,
 800d716:	2302      	movs	r3, #2
 800d718:	9301      	str	r3, [sp, #4]
 800d71a:	f107 0310 	add.w	r3, r7, #16
 800d71e:	9300      	str	r3, [sp, #0]
 800d720:	2300      	movs	r3, #0
 800d722:	2201      	movs	r2, #1
 800d724:	2120      	movs	r1, #32
 800d726:	68f8      	ldr	r0, [r7, #12]
 800d728:	f7ff fb53 	bl	800cdd2 <SPI_ETH_REG>
 800d72c:	4603      	mov	r3, r0
 800d72e:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800d730:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d732:	893b      	ldrh	r3, [r7, #8]
 800d734:	429a      	cmp	r2, r3
 800d736:	d3ee      	bcc.n	800d716 <eth_wr_SOCKET_DATA+0x5c>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2); // S_TX_RD =   0x424,Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S_TX_RD =   0x424,
 800d738:	2302      	movs	r3, #2
 800d73a:	9301      	str	r3, [sp, #4]
 800d73c:	f107 0310 	add.w	r3, r7, #16
 800d740:	9300      	str	r3, [sp, #0]
 800d742:	2300      	movs	r3, #0
 800d744:	2201      	movs	r2, #1
 800d746:	2124      	movs	r1, #36	; 0x24
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	f7ff fb42 	bl	800cdd2 <SPI_ETH_REG>
 800d74e:	4603      	mov	r3, r0
 800d750:	83bb      	strh	r3, [r7, #28]
				get_offset= Sn_TX_WR & TX_MASK;
 800d752:	8bba      	ldrh	r2, [r7, #28]
 800d754:	8abb      	ldrh	r3, [r7, #20]
 800d756:	4013      	ands	r3, r2
 800d758:	837b      	strh	r3, [r7, #26]
				get_start_address=TX_BASE + get_offset;
 800d75a:	8a7a      	ldrh	r2, [r7, #18]
 800d75c:	8b7b      	ldrh	r3, [r7, #26]
 800d75e:	4413      	add	r3, r2
 800d760:	833b      	strh	r3, [r7, #24]

				if((get_offset + send_size)>(TX_MASK + 1))
 800d762:	8b7a      	ldrh	r2, [r7, #26]
 800d764:	893b      	ldrh	r3, [r7, #8]
 800d766:	441a      	add	r2, r3
 800d768:	8abb      	ldrh	r3, [r7, #20]
 800d76a:	3301      	adds	r3, #1
 800d76c:	429a      	cmp	r2, r3
 800d76e:	dd30      	ble.n	800d7d2 <eth_wr_SOCKET_DATA+0x118>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800d770:	8aba      	ldrh	r2, [r7, #20]
 800d772:	8b7b      	ldrh	r3, [r7, #26]
 800d774:	1ad3      	subs	r3, r2, r3
 800d776:	b29b      	uxth	r3, r3
 800d778:	3301      	adds	r3, #1
 800d77a:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S_bf_rcv_offset, upper_size,socket);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d782:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800d784:	8b39      	ldrh	r1, [r7, #24]
 800d786:	7afb      	ldrb	r3, [r7, #11]
 800d788:	9301      	str	r3, [sp, #4]
 800d78a:	8c3b      	ldrh	r3, [r7, #32]
 800d78c:	9300      	str	r3, [sp, #0]
 800d78e:	4603      	mov	r3, r0
 800d790:	68f8      	ldr	r0, [r7, #12]
 800d792:	f7ff fc2b 	bl	800cfec <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800d796:	8bfa      	ldrh	r2, [r7, #30]
 800d798:	8c3b      	ldrh	r3, [r7, #32]
 800d79a:	4413      	add	r3, r2
 800d79c:	83fb      	strh	r3, [r7, #30]
						left_size=send_size-upper_size;
 800d79e:	893a      	ldrh	r2, [r7, #8]
 800d7a0:	8c3b      	ldrh	r3, [r7, #32]
 800d7a2:	1ad3      	subs	r3, r2, r3
 800d7a4:	847b      	strh	r3, [r7, #34]	; 0x22
						S_bf_rcv_offset=upper_size;
 800d7a6:	8c3b      	ldrh	r3, [r7, #32]
 800d7a8:	84bb      	strh	r3, [r7, #36]	; 0x24
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S_bf_rcv_offset, left_size, socket);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d7b0:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800d7b2:	8a79      	ldrh	r1, [r7, #18]
 800d7b4:	7afb      	ldrb	r3, [r7, #11]
 800d7b6:	9301      	str	r3, [sp, #4]
 800d7b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7ba:	9300      	str	r3, [sp, #0]
 800d7bc:	4603      	mov	r3, r0
 800d7be:	68f8      	ldr	r0, [r7, #12]
 800d7c0:	f7ff fc14 	bl	800cfec <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800d7c4:	8bba      	ldrh	r2, [r7, #28]
 800d7c6:	893b      	ldrh	r3, [r7, #8]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	b29a      	uxth	r2, r3
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	801a      	strh	r2, [r3, #0]
 800d7d0:	e012      	b.n	800d7f8 <eth_wr_SOCKET_DATA+0x13e>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S_bf_rcv_offset, send_size, socket);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d7d8:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800d7da:	8b39      	ldrh	r1, [r7, #24]
 800d7dc:	7afb      	ldrb	r3, [r7, #11]
 800d7de:	9301      	str	r3, [sp, #4]
 800d7e0:	893b      	ldrh	r3, [r7, #8]
 800d7e2:	9300      	str	r3, [sp, #0]
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	68f8      	ldr	r0, [r7, #12]
 800d7e8:	f7ff fc00 	bl	800cfec <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800d7ec:	8bba      	ldrh	r2, [r7, #28]
 800d7ee:	893b      	ldrh	r3, [r7, #8]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	b29a      	uxth	r2, r3
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	801a      	strh	r2, [r3, #0]
					}

}
 800d7f8:	bf00      	nop
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3728      	adds	r7, #40	; 0x28
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <SPI_ETH_SNIFF>:

uint8_t SPI_ETH_SNIFF(struct W5500_SPY * Y,struct W5500_SPI * X)
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b084      	sub	sp, #16
 800d806:	af02      	add	r7, sp, #8
 800d808:	6078      	str	r0, [r7, #4]
 800d80a:	6039      	str	r1, [r7, #0]
	Y->MR=SPI_ETH_REG(X, 0 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d812:	3318      	adds	r3, #24
 800d814:	2201      	movs	r2, #1
 800d816:	9201      	str	r2, [sp, #4]
 800d818:	9300      	str	r3, [sp, #0]
 800d81a:	2300      	movs	r3, #0
 800d81c:	2200      	movs	r2, #0
 800d81e:	2100      	movs	r1, #0
 800d820:	6838      	ldr	r0, [r7, #0]
 800d822:	f7ff fad6 	bl	800cdd2 <SPI_ETH_REG>
 800d826:	4603      	mov	r3, r0
 800d828:	b2da      	uxtb	r2, r3
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	701a      	strb	r2, [r3, #0]

	Y->GAR[0]=SPI_ETH_REG(X, 1 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d834:	3318      	adds	r3, #24
 800d836:	2201      	movs	r2, #1
 800d838:	9201      	str	r2, [sp, #4]
 800d83a:	9300      	str	r3, [sp, #0]
 800d83c:	2300      	movs	r3, #0
 800d83e:	2200      	movs	r2, #0
 800d840:	2101      	movs	r1, #1
 800d842:	6838      	ldr	r0, [r7, #0]
 800d844:	f7ff fac5 	bl	800cdd2 <SPI_ETH_REG>
 800d848:	4603      	mov	r3, r0
 800d84a:	b2da      	uxtb	r2, r3
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	705a      	strb	r2, [r3, #1]
	Y->GAR[1]=SPI_ETH_REG(X, 2 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d856:	3318      	adds	r3, #24
 800d858:	2201      	movs	r2, #1
 800d85a:	9201      	str	r2, [sp, #4]
 800d85c:	9300      	str	r3, [sp, #0]
 800d85e:	2300      	movs	r3, #0
 800d860:	2200      	movs	r2, #0
 800d862:	2102      	movs	r1, #2
 800d864:	6838      	ldr	r0, [r7, #0]
 800d866:	f7ff fab4 	bl	800cdd2 <SPI_ETH_REG>
 800d86a:	4603      	mov	r3, r0
 800d86c:	b2da      	uxtb	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	709a      	strb	r2, [r3, #2]
	Y->GAR[2]=SPI_ETH_REG(X, 3 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d878:	3318      	adds	r3, #24
 800d87a:	2201      	movs	r2, #1
 800d87c:	9201      	str	r2, [sp, #4]
 800d87e:	9300      	str	r3, [sp, #0]
 800d880:	2300      	movs	r3, #0
 800d882:	2200      	movs	r2, #0
 800d884:	2103      	movs	r1, #3
 800d886:	6838      	ldr	r0, [r7, #0]
 800d888:	f7ff faa3 	bl	800cdd2 <SPI_ETH_REG>
 800d88c:	4603      	mov	r3, r0
 800d88e:	b2da      	uxtb	r2, r3
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	70da      	strb	r2, [r3, #3]
	Y->GAR[3]=SPI_ETH_REG(X, 4 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d89a:	3318      	adds	r3, #24
 800d89c:	2201      	movs	r2, #1
 800d89e:	9201      	str	r2, [sp, #4]
 800d8a0:	9300      	str	r3, [sp, #0]
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	2104      	movs	r1, #4
 800d8a8:	6838      	ldr	r0, [r7, #0]
 800d8aa:	f7ff fa92 	bl	800cdd2 <SPI_ETH_REG>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	b2da      	uxtb	r2, r3
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	711a      	strb	r2, [r3, #4]

	Y->SUBR[0]=SPI_ETH_REG(X, 5 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d8bc:	3318      	adds	r3, #24
 800d8be:	2201      	movs	r2, #1
 800d8c0:	9201      	str	r2, [sp, #4]
 800d8c2:	9300      	str	r3, [sp, #0]
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	2105      	movs	r1, #5
 800d8ca:	6838      	ldr	r0, [r7, #0]
 800d8cc:	f7ff fa81 	bl	800cdd2 <SPI_ETH_REG>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	b2da      	uxtb	r2, r3
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	715a      	strb	r2, [r3, #5]
	Y->SUBR[1]=SPI_ETH_REG(X, 6 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d8de:	3318      	adds	r3, #24
 800d8e0:	2201      	movs	r2, #1
 800d8e2:	9201      	str	r2, [sp, #4]
 800d8e4:	9300      	str	r3, [sp, #0]
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	2106      	movs	r1, #6
 800d8ec:	6838      	ldr	r0, [r7, #0]
 800d8ee:	f7ff fa70 	bl	800cdd2 <SPI_ETH_REG>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	b2da      	uxtb	r2, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	719a      	strb	r2, [r3, #6]
	Y->SUBR[2]=SPI_ETH_REG(X, 7 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d900:	3318      	adds	r3, #24
 800d902:	2201      	movs	r2, #1
 800d904:	9201      	str	r2, [sp, #4]
 800d906:	9300      	str	r3, [sp, #0]
 800d908:	2300      	movs	r3, #0
 800d90a:	2200      	movs	r2, #0
 800d90c:	2107      	movs	r1, #7
 800d90e:	6838      	ldr	r0, [r7, #0]
 800d910:	f7ff fa5f 	bl	800cdd2 <SPI_ETH_REG>
 800d914:	4603      	mov	r3, r0
 800d916:	b2da      	uxtb	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	71da      	strb	r2, [r3, #7]
	Y->SUBR[3]=SPI_ETH_REG(X, 8 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d922:	3318      	adds	r3, #24
 800d924:	2201      	movs	r2, #1
 800d926:	9201      	str	r2, [sp, #4]
 800d928:	9300      	str	r3, [sp, #0]
 800d92a:	2300      	movs	r3, #0
 800d92c:	2200      	movs	r2, #0
 800d92e:	2108      	movs	r1, #8
 800d930:	6838      	ldr	r0, [r7, #0]
 800d932:	f7ff fa4e 	bl	800cdd2 <SPI_ETH_REG>
 800d936:	4603      	mov	r3, r0
 800d938:	b2da      	uxtb	r2, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	721a      	strb	r2, [r3, #8]

	Y->SHAR[0]=SPI_ETH_REG(X, 9 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d944:	3318      	adds	r3, #24
 800d946:	2201      	movs	r2, #1
 800d948:	9201      	str	r2, [sp, #4]
 800d94a:	9300      	str	r3, [sp, #0]
 800d94c:	2300      	movs	r3, #0
 800d94e:	2200      	movs	r2, #0
 800d950:	2109      	movs	r1, #9
 800d952:	6838      	ldr	r0, [r7, #0]
 800d954:	f7ff fa3d 	bl	800cdd2 <SPI_ETH_REG>
 800d958:	4603      	mov	r3, r0
 800d95a:	b2da      	uxtb	r2, r3
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	725a      	strb	r2, [r3, #9]
	Y->SHAR[1]=SPI_ETH_REG(X, 10 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d966:	3318      	adds	r3, #24
 800d968:	2201      	movs	r2, #1
 800d96a:	9201      	str	r2, [sp, #4]
 800d96c:	9300      	str	r3, [sp, #0]
 800d96e:	2300      	movs	r3, #0
 800d970:	2200      	movs	r2, #0
 800d972:	210a      	movs	r1, #10
 800d974:	6838      	ldr	r0, [r7, #0]
 800d976:	f7ff fa2c 	bl	800cdd2 <SPI_ETH_REG>
 800d97a:	4603      	mov	r3, r0
 800d97c:	b2da      	uxtb	r2, r3
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	729a      	strb	r2, [r3, #10]
	Y->SHAR[2]=SPI_ETH_REG(X, 11 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d988:	3318      	adds	r3, #24
 800d98a:	2201      	movs	r2, #1
 800d98c:	9201      	str	r2, [sp, #4]
 800d98e:	9300      	str	r3, [sp, #0]
 800d990:	2300      	movs	r3, #0
 800d992:	2200      	movs	r2, #0
 800d994:	210b      	movs	r1, #11
 800d996:	6838      	ldr	r0, [r7, #0]
 800d998:	f7ff fa1b 	bl	800cdd2 <SPI_ETH_REG>
 800d99c:	4603      	mov	r3, r0
 800d99e:	b2da      	uxtb	r2, r3
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	72da      	strb	r2, [r3, #11]
	Y->SHAR[3]=SPI_ETH_REG(X, 12 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d9aa:	3318      	adds	r3, #24
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	9201      	str	r2, [sp, #4]
 800d9b0:	9300      	str	r3, [sp, #0]
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	210c      	movs	r1, #12
 800d9b8:	6838      	ldr	r0, [r7, #0]
 800d9ba:	f7ff fa0a 	bl	800cdd2 <SPI_ETH_REG>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	b2da      	uxtb	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	731a      	strb	r2, [r3, #12]
	Y->SHAR[4]=SPI_ETH_REG(X, 13 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d9cc:	3318      	adds	r3, #24
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	9201      	str	r2, [sp, #4]
 800d9d2:	9300      	str	r3, [sp, #0]
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	210d      	movs	r1, #13
 800d9da:	6838      	ldr	r0, [r7, #0]
 800d9dc:	f7ff f9f9 	bl	800cdd2 <SPI_ETH_REG>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	b2da      	uxtb	r2, r3
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	735a      	strb	r2, [r3, #13]
	Y->SHAR[5]=SPI_ETH_REG(X, 14 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d9ee:	3318      	adds	r3, #24
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	9201      	str	r2, [sp, #4]
 800d9f4:	9300      	str	r3, [sp, #0]
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	210e      	movs	r1, #14
 800d9fc:	6838      	ldr	r0, [r7, #0]
 800d9fe:	f7ff f9e8 	bl	800cdd2 <SPI_ETH_REG>
 800da02:	4603      	mov	r3, r0
 800da04:	b2da      	uxtb	r2, r3
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	739a      	strb	r2, [r3, #14]

	Y->SIPR[0]=SPI_ETH_REG(X, 15 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800da10:	3318      	adds	r3, #24
 800da12:	2201      	movs	r2, #1
 800da14:	9201      	str	r2, [sp, #4]
 800da16:	9300      	str	r3, [sp, #0]
 800da18:	2300      	movs	r3, #0
 800da1a:	2200      	movs	r2, #0
 800da1c:	210f      	movs	r1, #15
 800da1e:	6838      	ldr	r0, [r7, #0]
 800da20:	f7ff f9d7 	bl	800cdd2 <SPI_ETH_REG>
 800da24:	4603      	mov	r3, r0
 800da26:	b2da      	uxtb	r2, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	73da      	strb	r2, [r3, #15]
	Y->SIPR[1]=SPI_ETH_REG(X, 16 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800da32:	3318      	adds	r3, #24
 800da34:	2201      	movs	r2, #1
 800da36:	9201      	str	r2, [sp, #4]
 800da38:	9300      	str	r3, [sp, #0]
 800da3a:	2300      	movs	r3, #0
 800da3c:	2200      	movs	r2, #0
 800da3e:	2110      	movs	r1, #16
 800da40:	6838      	ldr	r0, [r7, #0]
 800da42:	f7ff f9c6 	bl	800cdd2 <SPI_ETH_REG>
 800da46:	4603      	mov	r3, r0
 800da48:	b2da      	uxtb	r2, r3
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	741a      	strb	r2, [r3, #16]
	Y->SIPR[2]=SPI_ETH_REG(X, 17 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800da54:	3318      	adds	r3, #24
 800da56:	2201      	movs	r2, #1
 800da58:	9201      	str	r2, [sp, #4]
 800da5a:	9300      	str	r3, [sp, #0]
 800da5c:	2300      	movs	r3, #0
 800da5e:	2200      	movs	r2, #0
 800da60:	2111      	movs	r1, #17
 800da62:	6838      	ldr	r0, [r7, #0]
 800da64:	f7ff f9b5 	bl	800cdd2 <SPI_ETH_REG>
 800da68:	4603      	mov	r3, r0
 800da6a:	b2da      	uxtb	r2, r3
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	745a      	strb	r2, [r3, #17]
	Y->SIPR[3]=SPI_ETH_REG(X, 18 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800da76:	3318      	adds	r3, #24
 800da78:	2201      	movs	r2, #1
 800da7a:	9201      	str	r2, [sp, #4]
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	2300      	movs	r3, #0
 800da80:	2200      	movs	r2, #0
 800da82:	2112      	movs	r1, #18
 800da84:	6838      	ldr	r0, [r7, #0]
 800da86:	f7ff f9a4 	bl	800cdd2 <SPI_ETH_REG>
 800da8a:	4603      	mov	r3, r0
 800da8c:	b2da      	uxtb	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	749a      	strb	r2, [r3, #18]

	Y->INTLEVEL[0]=SPI_ETH_REG(X, 19 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800da98:	3318      	adds	r3, #24
 800da9a:	2201      	movs	r2, #1
 800da9c:	9201      	str	r2, [sp, #4]
 800da9e:	9300      	str	r3, [sp, #0]
 800daa0:	2300      	movs	r3, #0
 800daa2:	2200      	movs	r2, #0
 800daa4:	2113      	movs	r1, #19
 800daa6:	6838      	ldr	r0, [r7, #0]
 800daa8:	f7ff f993 	bl	800cdd2 <SPI_ETH_REG>
 800daac:	4603      	mov	r3, r0
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	74da      	strb	r2, [r3, #19]
	Y->INTLEVEL[1]=SPI_ETH_REG(X, 20 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800daba:	3318      	adds	r3, #24
 800dabc:	2201      	movs	r2, #1
 800dabe:	9201      	str	r2, [sp, #4]
 800dac0:	9300      	str	r3, [sp, #0]
 800dac2:	2300      	movs	r3, #0
 800dac4:	2200      	movs	r2, #0
 800dac6:	2114      	movs	r1, #20
 800dac8:	6838      	ldr	r0, [r7, #0]
 800daca:	f7ff f982 	bl	800cdd2 <SPI_ETH_REG>
 800dace:	4603      	mov	r3, r0
 800dad0:	b2da      	uxtb	r2, r3
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	751a      	strb	r2, [r3, #20]

	Y->IR=SPI_ETH_REG(X, 21 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dadc:	3318      	adds	r3, #24
 800dade:	2201      	movs	r2, #1
 800dae0:	9201      	str	r2, [sp, #4]
 800dae2:	9300      	str	r3, [sp, #0]
 800dae4:	2300      	movs	r3, #0
 800dae6:	2200      	movs	r2, #0
 800dae8:	2115      	movs	r1, #21
 800daea:	6838      	ldr	r0, [r7, #0]
 800daec:	f7ff f971 	bl	800cdd2 <SPI_ETH_REG>
 800daf0:	4603      	mov	r3, r0
 800daf2:	b2da      	uxtb	r2, r3
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	755a      	strb	r2, [r3, #21]

	Y->IMR=SPI_ETH_REG(X, 22 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dafe:	3318      	adds	r3, #24
 800db00:	2201      	movs	r2, #1
 800db02:	9201      	str	r2, [sp, #4]
 800db04:	9300      	str	r3, [sp, #0]
 800db06:	2300      	movs	r3, #0
 800db08:	2200      	movs	r2, #0
 800db0a:	2116      	movs	r1, #22
 800db0c:	6838      	ldr	r0, [r7, #0]
 800db0e:	f7ff f960 	bl	800cdd2 <SPI_ETH_REG>
 800db12:	4603      	mov	r3, r0
 800db14:	b2da      	uxtb	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	759a      	strb	r2, [r3, #22]

	Y->SIR=SPI_ETH_REG(X, 23 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db20:	3318      	adds	r3, #24
 800db22:	2201      	movs	r2, #1
 800db24:	9201      	str	r2, [sp, #4]
 800db26:	9300      	str	r3, [sp, #0]
 800db28:	2300      	movs	r3, #0
 800db2a:	2200      	movs	r2, #0
 800db2c:	2117      	movs	r1, #23
 800db2e:	6838      	ldr	r0, [r7, #0]
 800db30:	f7ff f94f 	bl	800cdd2 <SPI_ETH_REG>
 800db34:	4603      	mov	r3, r0
 800db36:	b2da      	uxtb	r2, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	75da      	strb	r2, [r3, #23]

	Y->SIMR=SPI_ETH_REG(X, 24 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db42:	3318      	adds	r3, #24
 800db44:	2201      	movs	r2, #1
 800db46:	9201      	str	r2, [sp, #4]
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	2300      	movs	r3, #0
 800db4c:	2200      	movs	r2, #0
 800db4e:	2118      	movs	r1, #24
 800db50:	6838      	ldr	r0, [r7, #0]
 800db52:	f7ff f93e 	bl	800cdd2 <SPI_ETH_REG>
 800db56:	4603      	mov	r3, r0
 800db58:	b2da      	uxtb	r2, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	761a      	strb	r2, [r3, #24]

	Y->RTR[0]=SPI_ETH_REG(X, 25 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db64:	3318      	adds	r3, #24
 800db66:	2201      	movs	r2, #1
 800db68:	9201      	str	r2, [sp, #4]
 800db6a:	9300      	str	r3, [sp, #0]
 800db6c:	2300      	movs	r3, #0
 800db6e:	2200      	movs	r2, #0
 800db70:	2119      	movs	r1, #25
 800db72:	6838      	ldr	r0, [r7, #0]
 800db74:	f7ff f92d 	bl	800cdd2 <SPI_ETH_REG>
 800db78:	4603      	mov	r3, r0
 800db7a:	b2da      	uxtb	r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	765a      	strb	r2, [r3, #25]
	Y->RTR[1]=SPI_ETH_REG(X, 26 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db86:	3318      	adds	r3, #24
 800db88:	2201      	movs	r2, #1
 800db8a:	9201      	str	r2, [sp, #4]
 800db8c:	9300      	str	r3, [sp, #0]
 800db8e:	2300      	movs	r3, #0
 800db90:	2200      	movs	r2, #0
 800db92:	211a      	movs	r1, #26
 800db94:	6838      	ldr	r0, [r7, #0]
 800db96:	f7ff f91c 	bl	800cdd2 <SPI_ETH_REG>
 800db9a:	4603      	mov	r3, r0
 800db9c:	b2da      	uxtb	r2, r3
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	769a      	strb	r2, [r3, #26]

	Y->RCR=SPI_ETH_REG(X, 27 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dba8:	3318      	adds	r3, #24
 800dbaa:	2201      	movs	r2, #1
 800dbac:	9201      	str	r2, [sp, #4]
 800dbae:	9300      	str	r3, [sp, #0]
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	211b      	movs	r1, #27
 800dbb6:	6838      	ldr	r0, [r7, #0]
 800dbb8:	f7ff f90b 	bl	800cdd2 <SPI_ETH_REG>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	b2da      	uxtb	r2, r3
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	76da      	strb	r2, [r3, #27]

	Y->PTIMER=SPI_ETH_REG(X, 28 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dbca:	3318      	adds	r3, #24
 800dbcc:	2201      	movs	r2, #1
 800dbce:	9201      	str	r2, [sp, #4]
 800dbd0:	9300      	str	r3, [sp, #0]
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	211c      	movs	r1, #28
 800dbd8:	6838      	ldr	r0, [r7, #0]
 800dbda:	f7ff f8fa 	bl	800cdd2 <SPI_ETH_REG>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	b2da      	uxtb	r2, r3
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	771a      	strb	r2, [r3, #28]

	Y->PMAGIC=SPI_ETH_REG(X, 29 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dbec:	3318      	adds	r3, #24
 800dbee:	2201      	movs	r2, #1
 800dbf0:	9201      	str	r2, [sp, #4]
 800dbf2:	9300      	str	r3, [sp, #0]
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	211d      	movs	r1, #29
 800dbfa:	6838      	ldr	r0, [r7, #0]
 800dbfc:	f7ff f8e9 	bl	800cdd2 <SPI_ETH_REG>
 800dc00:	4603      	mov	r3, r0
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	775a      	strb	r2, [r3, #29]

	Y->PHAR[0]=SPI_ETH_REG(X, 30 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc0e:	3318      	adds	r3, #24
 800dc10:	2201      	movs	r2, #1
 800dc12:	9201      	str	r2, [sp, #4]
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	2300      	movs	r3, #0
 800dc18:	2200      	movs	r2, #0
 800dc1a:	211e      	movs	r1, #30
 800dc1c:	6838      	ldr	r0, [r7, #0]
 800dc1e:	f7ff f8d8 	bl	800cdd2 <SPI_ETH_REG>
 800dc22:	4603      	mov	r3, r0
 800dc24:	b2da      	uxtb	r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	779a      	strb	r2, [r3, #30]
	Y->PHAR[1]=SPI_ETH_REG(X, 31 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc30:	3318      	adds	r3, #24
 800dc32:	2201      	movs	r2, #1
 800dc34:	9201      	str	r2, [sp, #4]
 800dc36:	9300      	str	r3, [sp, #0]
 800dc38:	2300      	movs	r3, #0
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	211f      	movs	r1, #31
 800dc3e:	6838      	ldr	r0, [r7, #0]
 800dc40:	f7ff f8c7 	bl	800cdd2 <SPI_ETH_REG>
 800dc44:	4603      	mov	r3, r0
 800dc46:	b2da      	uxtb	r2, r3
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	77da      	strb	r2, [r3, #31]
	Y->PHAR[2]=SPI_ETH_REG(X, 32 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc52:	3318      	adds	r3, #24
 800dc54:	2201      	movs	r2, #1
 800dc56:	9201      	str	r2, [sp, #4]
 800dc58:	9300      	str	r3, [sp, #0]
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	2120      	movs	r1, #32
 800dc60:	6838      	ldr	r0, [r7, #0]
 800dc62:	f7ff f8b6 	bl	800cdd2 <SPI_ETH_REG>
 800dc66:	4603      	mov	r3, r0
 800dc68:	b2da      	uxtb	r2, r3
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f883 2020 	strb.w	r2, [r3, #32]
	Y->PHAR[3]=SPI_ETH_REG(X, 33 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc76:	3318      	adds	r3, #24
 800dc78:	2201      	movs	r2, #1
 800dc7a:	9201      	str	r2, [sp, #4]
 800dc7c:	9300      	str	r3, [sp, #0]
 800dc7e:	2300      	movs	r3, #0
 800dc80:	2200      	movs	r2, #0
 800dc82:	2121      	movs	r1, #33	; 0x21
 800dc84:	6838      	ldr	r0, [r7, #0]
 800dc86:	f7ff f8a4 	bl	800cdd2 <SPI_ETH_REG>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	b2da      	uxtb	r2, r3
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Y->PHAR[4]=SPI_ETH_REG(X, 34 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc9a:	3318      	adds	r3, #24
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	9201      	str	r2, [sp, #4]
 800dca0:	9300      	str	r3, [sp, #0]
 800dca2:	2300      	movs	r3, #0
 800dca4:	2200      	movs	r2, #0
 800dca6:	2122      	movs	r1, #34	; 0x22
 800dca8:	6838      	ldr	r0, [r7, #0]
 800dcaa:	f7ff f892 	bl	800cdd2 <SPI_ETH_REG>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	b2da      	uxtb	r2, r3
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Y->PHAR[5]=SPI_ETH_REG(X, 35 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dcbe:	3318      	adds	r3, #24
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	9201      	str	r2, [sp, #4]
 800dcc4:	9300      	str	r3, [sp, #0]
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	2200      	movs	r2, #0
 800dcca:	2123      	movs	r1, #35	; 0x23
 800dccc:	6838      	ldr	r0, [r7, #0]
 800dcce:	f7ff f880 	bl	800cdd2 <SPI_ETH_REG>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	b2da      	uxtb	r2, r3
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	Y->PSID[0]=SPI_ETH_REG(X, 36 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dce2:	3318      	adds	r3, #24
 800dce4:	2201      	movs	r2, #1
 800dce6:	9201      	str	r2, [sp, #4]
 800dce8:	9300      	str	r3, [sp, #0]
 800dcea:	2300      	movs	r3, #0
 800dcec:	2200      	movs	r2, #0
 800dcee:	2124      	movs	r1, #36	; 0x24
 800dcf0:	6838      	ldr	r0, [r7, #0]
 800dcf2:	f7ff f86e 	bl	800cdd2 <SPI_ETH_REG>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	b2da      	uxtb	r2, r3
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Y->PSID[1]=SPI_ETH_REG(X, 37 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd06:	3318      	adds	r3, #24
 800dd08:	2201      	movs	r2, #1
 800dd0a:	9201      	str	r2, [sp, #4]
 800dd0c:	9300      	str	r3, [sp, #0]
 800dd0e:	2300      	movs	r3, #0
 800dd10:	2200      	movs	r2, #0
 800dd12:	2125      	movs	r1, #37	; 0x25
 800dd14:	6838      	ldr	r0, [r7, #0]
 800dd16:	f7ff f85c 	bl	800cdd2 <SPI_ETH_REG>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	b2da      	uxtb	r2, r3
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	Y->PMRU[0]=SPI_ETH_REG(X, 38 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd2a:	3318      	adds	r3, #24
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	9201      	str	r2, [sp, #4]
 800dd30:	9300      	str	r3, [sp, #0]
 800dd32:	2300      	movs	r3, #0
 800dd34:	2200      	movs	r2, #0
 800dd36:	2126      	movs	r1, #38	; 0x26
 800dd38:	6838      	ldr	r0, [r7, #0]
 800dd3a:	f7ff f84a 	bl	800cdd2 <SPI_ETH_REG>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	b2da      	uxtb	r2, r3
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Y->PMRU[1]=SPI_ETH_REG(X, 39 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd4e:	3318      	adds	r3, #24
 800dd50:	2201      	movs	r2, #1
 800dd52:	9201      	str	r2, [sp, #4]
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	2300      	movs	r3, #0
 800dd58:	2200      	movs	r2, #0
 800dd5a:	2127      	movs	r1, #39	; 0x27
 800dd5c:	6838      	ldr	r0, [r7, #0]
 800dd5e:	f7ff f838 	bl	800cdd2 <SPI_ETH_REG>
 800dd62:	4603      	mov	r3, r0
 800dd64:	b2da      	uxtb	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	Y->UIPR[0]=SPI_ETH_REG(X, 40 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd72:	3318      	adds	r3, #24
 800dd74:	2201      	movs	r2, #1
 800dd76:	9201      	str	r2, [sp, #4]
 800dd78:	9300      	str	r3, [sp, #0]
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	2128      	movs	r1, #40	; 0x28
 800dd80:	6838      	ldr	r0, [r7, #0]
 800dd82:	f7ff f826 	bl	800cdd2 <SPI_ETH_REG>
 800dd86:	4603      	mov	r3, r0
 800dd88:	b2da      	uxtb	r2, r3
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Y->UIPR[1]=SPI_ETH_REG(X, 41 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd96:	3318      	adds	r3, #24
 800dd98:	2201      	movs	r2, #1
 800dd9a:	9201      	str	r2, [sp, #4]
 800dd9c:	9300      	str	r3, [sp, #0]
 800dd9e:	2300      	movs	r3, #0
 800dda0:	2200      	movs	r2, #0
 800dda2:	2129      	movs	r1, #41	; 0x29
 800dda4:	6838      	ldr	r0, [r7, #0]
 800dda6:	f7ff f814 	bl	800cdd2 <SPI_ETH_REG>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	b2da      	uxtb	r2, r3
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	Y->UIPR[2]=SPI_ETH_REG(X, 42 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddba:	3318      	adds	r3, #24
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	9201      	str	r2, [sp, #4]
 800ddc0:	9300      	str	r3, [sp, #0]
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	212a      	movs	r1, #42	; 0x2a
 800ddc8:	6838      	ldr	r0, [r7, #0]
 800ddca:	f7ff f802 	bl	800cdd2 <SPI_ETH_REG>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	b2da      	uxtb	r2, r3
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Y->UIPR[3]=SPI_ETH_REG(X, 43 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddde:	3318      	adds	r3, #24
 800dde0:	2201      	movs	r2, #1
 800dde2:	9201      	str	r2, [sp, #4]
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	2300      	movs	r3, #0
 800dde8:	2200      	movs	r2, #0
 800ddea:	212b      	movs	r1, #43	; 0x2b
 800ddec:	6838      	ldr	r0, [r7, #0]
 800ddee:	f7fe fff0 	bl	800cdd2 <SPI_ETH_REG>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	b2da      	uxtb	r2, r3
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	Y->UPORT[0]=SPI_ETH_REG(X, 44 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de02:	3318      	adds	r3, #24
 800de04:	2201      	movs	r2, #1
 800de06:	9201      	str	r2, [sp, #4]
 800de08:	9300      	str	r3, [sp, #0]
 800de0a:	2300      	movs	r3, #0
 800de0c:	2200      	movs	r2, #0
 800de0e:	212c      	movs	r1, #44	; 0x2c
 800de10:	6838      	ldr	r0, [r7, #0]
 800de12:	f7fe ffde 	bl	800cdd2 <SPI_ETH_REG>
 800de16:	4603      	mov	r3, r0
 800de18:	b2da      	uxtb	r2, r3
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	Y->UPORT[1]=SPI_ETH_REG(X, 45 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de26:	3318      	adds	r3, #24
 800de28:	2201      	movs	r2, #1
 800de2a:	9201      	str	r2, [sp, #4]
 800de2c:	9300      	str	r3, [sp, #0]
 800de2e:	2300      	movs	r3, #0
 800de30:	2200      	movs	r2, #0
 800de32:	212d      	movs	r1, #45	; 0x2d
 800de34:	6838      	ldr	r0, [r7, #0]
 800de36:	f7fe ffcc 	bl	800cdd2 <SPI_ETH_REG>
 800de3a:	4603      	mov	r3, r0
 800de3c:	b2da      	uxtb	r2, r3
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	Y->PHYCFGR=SPI_ETH_REG(X, 46 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de4a:	3318      	adds	r3, #24
 800de4c:	2201      	movs	r2, #1
 800de4e:	9201      	str	r2, [sp, #4]
 800de50:	9300      	str	r3, [sp, #0]
 800de52:	2300      	movs	r3, #0
 800de54:	2200      	movs	r2, #0
 800de56:	212e      	movs	r1, #46	; 0x2e
 800de58:	6838      	ldr	r0, [r7, #0]
 800de5a:	f7fe ffba 	bl	800cdd2 <SPI_ETH_REG>
 800de5e:	4603      	mov	r3, r0
 800de60:	b2da      	uxtb	r2, r3
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	Y->VERSIONR=SPI_ETH_REG(X, 57 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de6e:	3318      	adds	r3, #24
 800de70:	2201      	movs	r2, #1
 800de72:	9201      	str	r2, [sp, #4]
 800de74:	9300      	str	r3, [sp, #0]
 800de76:	2300      	movs	r3, #0
 800de78:	2200      	movs	r2, #0
 800de7a:	2139      	movs	r1, #57	; 0x39
 800de7c:	6838      	ldr	r0, [r7, #0]
 800de7e:	f7fe ffa8 	bl	800cdd2 <SPI_ETH_REG>
 800de82:	4603      	mov	r3, r0
 800de84:	b2da      	uxtb	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	//---------------------------port -------------------------//
	Y->Sn_MR=SPI_ETH_REG(X, 0x00 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de92:	3318      	adds	r3, #24
 800de94:	2201      	movs	r2, #1
 800de96:	9201      	str	r2, [sp, #4]
 800de98:	9300      	str	r3, [sp, #0]
 800de9a:	2300      	movs	r3, #0
 800de9c:	2201      	movs	r2, #1
 800de9e:	2100      	movs	r1, #0
 800dea0:	6838      	ldr	r0, [r7, #0]
 800dea2:	f7fe ff96 	bl	800cdd2 <SPI_ETH_REG>
 800dea6:	4603      	mov	r3, r0
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	Y->Sn_CR=SPI_ETH_REG(X, 0x01 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800deb6:	3318      	adds	r3, #24
 800deb8:	2201      	movs	r2, #1
 800deba:	9201      	str	r2, [sp, #4]
 800debc:	9300      	str	r3, [sp, #0]
 800debe:	2300      	movs	r3, #0
 800dec0:	2201      	movs	r2, #1
 800dec2:	2101      	movs	r1, #1
 800dec4:	6838      	ldr	r0, [r7, #0]
 800dec6:	f7fe ff84 	bl	800cdd2 <SPI_ETH_REG>
 800deca:	4603      	mov	r3, r0
 800decc:	b2da      	uxtb	r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	Y->Sn_IR=SPI_ETH_REG(X, 0x02 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800deda:	3318      	adds	r3, #24
 800dedc:	2201      	movs	r2, #1
 800dede:	9201      	str	r2, [sp, #4]
 800dee0:	9300      	str	r3, [sp, #0]
 800dee2:	2300      	movs	r3, #0
 800dee4:	2201      	movs	r2, #1
 800dee6:	2102      	movs	r1, #2
 800dee8:	6838      	ldr	r0, [r7, #0]
 800deea:	f7fe ff72 	bl	800cdd2 <SPI_ETH_REG>
 800deee:	4603      	mov	r3, r0
 800def0:	b2da      	uxtb	r2, r3
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	Y->Sn_SR=SPI_ETH_REG(X, 0x03 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800defe:	3318      	adds	r3, #24
 800df00:	2201      	movs	r2, #1
 800df02:	9201      	str	r2, [sp, #4]
 800df04:	9300      	str	r3, [sp, #0]
 800df06:	2300      	movs	r3, #0
 800df08:	2201      	movs	r2, #1
 800df0a:	2103      	movs	r1, #3
 800df0c:	6838      	ldr	r0, [r7, #0]
 800df0e:	f7fe ff60 	bl	800cdd2 <SPI_ETH_REG>
 800df12:	4603      	mov	r3, r0
 800df14:	b2da      	uxtb	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	Y->Sn_PORT[0]=SPI_ETH_REG(X, 0x04 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df22:	3318      	adds	r3, #24
 800df24:	2201      	movs	r2, #1
 800df26:	9201      	str	r2, [sp, #4]
 800df28:	9300      	str	r3, [sp, #0]
 800df2a:	2300      	movs	r3, #0
 800df2c:	2201      	movs	r2, #1
 800df2e:	2104      	movs	r1, #4
 800df30:	6838      	ldr	r0, [r7, #0]
 800df32:	f7fe ff4e 	bl	800cdd2 <SPI_ETH_REG>
 800df36:	4603      	mov	r3, r0
 800df38:	b2da      	uxtb	r2, r3
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Y->Sn_PORT[1]=SPI_ETH_REG(X, 0x05 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df46:	3318      	adds	r3, #24
 800df48:	2201      	movs	r2, #1
 800df4a:	9201      	str	r2, [sp, #4]
 800df4c:	9300      	str	r3, [sp, #0]
 800df4e:	2300      	movs	r3, #0
 800df50:	2201      	movs	r2, #1
 800df52:	2105      	movs	r1, #5
 800df54:	6838      	ldr	r0, [r7, #0]
 800df56:	f7fe ff3c 	bl	800cdd2 <SPI_ETH_REG>
 800df5a:	4603      	mov	r3, r0
 800df5c:	b2da      	uxtb	r2, r3
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	Y->Sn_DHAR[0]=SPI_ETH_REG(X, 0x06 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df6a:	3318      	adds	r3, #24
 800df6c:	2201      	movs	r2, #1
 800df6e:	9201      	str	r2, [sp, #4]
 800df70:	9300      	str	r3, [sp, #0]
 800df72:	2300      	movs	r3, #0
 800df74:	2201      	movs	r2, #1
 800df76:	2106      	movs	r1, #6
 800df78:	6838      	ldr	r0, [r7, #0]
 800df7a:	f7fe ff2a 	bl	800cdd2 <SPI_ETH_REG>
 800df7e:	4603      	mov	r3, r0
 800df80:	b2da      	uxtb	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Y->Sn_DHAR[1]=SPI_ETH_REG(X, 0x07 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df8e:	3318      	adds	r3, #24
 800df90:	2201      	movs	r2, #1
 800df92:	9201      	str	r2, [sp, #4]
 800df94:	9300      	str	r3, [sp, #0]
 800df96:	2300      	movs	r3, #0
 800df98:	2201      	movs	r2, #1
 800df9a:	2107      	movs	r1, #7
 800df9c:	6838      	ldr	r0, [r7, #0]
 800df9e:	f7fe ff18 	bl	800cdd2 <SPI_ETH_REG>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	b2da      	uxtb	r2, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	Y->Sn_DHAR[2]=SPI_ETH_REG(X, 0x08 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dfb2:	3318      	adds	r3, #24
 800dfb4:	2201      	movs	r2, #1
 800dfb6:	9201      	str	r2, [sp, #4]
 800dfb8:	9300      	str	r3, [sp, #0]
 800dfba:	2300      	movs	r3, #0
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	2108      	movs	r1, #8
 800dfc0:	6838      	ldr	r0, [r7, #0]
 800dfc2:	f7fe ff06 	bl	800cdd2 <SPI_ETH_REG>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	b2da      	uxtb	r2, r3
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	Y->Sn_DHAR[3]=SPI_ETH_REG(X, 0x09 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dfd6:	3318      	adds	r3, #24
 800dfd8:	2201      	movs	r2, #1
 800dfda:	9201      	str	r2, [sp, #4]
 800dfdc:	9300      	str	r3, [sp, #0]
 800dfde:	2300      	movs	r3, #0
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	2109      	movs	r1, #9
 800dfe4:	6838      	ldr	r0, [r7, #0]
 800dfe6:	f7fe fef4 	bl	800cdd2 <SPI_ETH_REG>
 800dfea:	4603      	mov	r3, r0
 800dfec:	b2da      	uxtb	r2, r3
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	Y->Sn_DHAR[4]=SPI_ETH_REG(X, 0x0A ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dffa:	3318      	adds	r3, #24
 800dffc:	2201      	movs	r2, #1
 800dffe:	9201      	str	r2, [sp, #4]
 800e000:	9300      	str	r3, [sp, #0]
 800e002:	2300      	movs	r3, #0
 800e004:	2201      	movs	r2, #1
 800e006:	210a      	movs	r1, #10
 800e008:	6838      	ldr	r0, [r7, #0]
 800e00a:	f7fe fee2 	bl	800cdd2 <SPI_ETH_REG>
 800e00e:	4603      	mov	r3, r0
 800e010:	b2da      	uxtb	r2, r3
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Y->Sn_DHAR[5]=SPI_ETH_REG(X, 0x0B ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e01e:	3318      	adds	r3, #24
 800e020:	2201      	movs	r2, #1
 800e022:	9201      	str	r2, [sp, #4]
 800e024:	9300      	str	r3, [sp, #0]
 800e026:	2300      	movs	r3, #0
 800e028:	2201      	movs	r2, #1
 800e02a:	210b      	movs	r1, #11
 800e02c:	6838      	ldr	r0, [r7, #0]
 800e02e:	f7fe fed0 	bl	800cdd2 <SPI_ETH_REG>
 800e032:	4603      	mov	r3, r0
 800e034:	b2da      	uxtb	r2, r3
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	Y->Sn_DIPR[0]=SPI_ETH_REG(X, 0x0C ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e042:	3318      	adds	r3, #24
 800e044:	2201      	movs	r2, #1
 800e046:	9201      	str	r2, [sp, #4]
 800e048:	9300      	str	r3, [sp, #0]
 800e04a:	2300      	movs	r3, #0
 800e04c:	2201      	movs	r2, #1
 800e04e:	210c      	movs	r1, #12
 800e050:	6838      	ldr	r0, [r7, #0]
 800e052:	f7fe febe 	bl	800cdd2 <SPI_ETH_REG>
 800e056:	4603      	mov	r3, r0
 800e058:	b2da      	uxtb	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Y->Sn_DIPR[1]=SPI_ETH_REG(X, 0x0D ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e066:	3318      	adds	r3, #24
 800e068:	2201      	movs	r2, #1
 800e06a:	9201      	str	r2, [sp, #4]
 800e06c:	9300      	str	r3, [sp, #0]
 800e06e:	2300      	movs	r3, #0
 800e070:	2201      	movs	r2, #1
 800e072:	210d      	movs	r1, #13
 800e074:	6838      	ldr	r0, [r7, #0]
 800e076:	f7fe feac 	bl	800cdd2 <SPI_ETH_REG>
 800e07a:	4603      	mov	r3, r0
 800e07c:	b2da      	uxtb	r2, r3
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Y->Sn_DIPR[2]=SPI_ETH_REG(X, 0x0E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e08a:	3318      	adds	r3, #24
 800e08c:	2201      	movs	r2, #1
 800e08e:	9201      	str	r2, [sp, #4]
 800e090:	9300      	str	r3, [sp, #0]
 800e092:	2300      	movs	r3, #0
 800e094:	2201      	movs	r2, #1
 800e096:	210e      	movs	r1, #14
 800e098:	6838      	ldr	r0, [r7, #0]
 800e09a:	f7fe fe9a 	bl	800cdd2 <SPI_ETH_REG>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	b2da      	uxtb	r2, r3
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Y->Sn_DIPR[3]=SPI_ETH_REG(X, 0x0F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0ae:	3318      	adds	r3, #24
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	9201      	str	r2, [sp, #4]
 800e0b4:	9300      	str	r3, [sp, #0]
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	210f      	movs	r1, #15
 800e0bc:	6838      	ldr	r0, [r7, #0]
 800e0be:	f7fe fe88 	bl	800cdd2 <SPI_ETH_REG>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	b2da      	uxtb	r2, r3
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	Y->Sn_DPORT[0]=SPI_ETH_REG(X, 0x10 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0d2:	3318      	adds	r3, #24
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	9201      	str	r2, [sp, #4]
 800e0d8:	9300      	str	r3, [sp, #0]
 800e0da:	2300      	movs	r3, #0
 800e0dc:	2201      	movs	r2, #1
 800e0de:	2110      	movs	r1, #16
 800e0e0:	6838      	ldr	r0, [r7, #0]
 800e0e2:	f7fe fe76 	bl	800cdd2 <SPI_ETH_REG>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	b2da      	uxtb	r2, r3
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	Y->Sn_DPORT[1]=SPI_ETH_REG(X, 0x11 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0f6:	3318      	adds	r3, #24
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	9201      	str	r2, [sp, #4]
 800e0fc:	9300      	str	r3, [sp, #0]
 800e0fe:	2300      	movs	r3, #0
 800e100:	2201      	movs	r2, #1
 800e102:	2111      	movs	r1, #17
 800e104:	6838      	ldr	r0, [r7, #0]
 800e106:	f7fe fe64 	bl	800cdd2 <SPI_ETH_REG>
 800e10a:	4603      	mov	r3, r0
 800e10c:	b2da      	uxtb	r2, r3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	Y->Sn_MSSR[0]=SPI_ETH_REG(X, 0x12 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e11a:	3318      	adds	r3, #24
 800e11c:	2201      	movs	r2, #1
 800e11e:	9201      	str	r2, [sp, #4]
 800e120:	9300      	str	r3, [sp, #0]
 800e122:	2300      	movs	r3, #0
 800e124:	2201      	movs	r2, #1
 800e126:	2112      	movs	r1, #18
 800e128:	6838      	ldr	r0, [r7, #0]
 800e12a:	f7fe fe52 	bl	800cdd2 <SPI_ETH_REG>
 800e12e:	4603      	mov	r3, r0
 800e130:	b2da      	uxtb	r2, r3
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Y->Sn_MSSR[1]=SPI_ETH_REG(X, 0x13 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e13e:	3318      	adds	r3, #24
 800e140:	2201      	movs	r2, #1
 800e142:	9201      	str	r2, [sp, #4]
 800e144:	9300      	str	r3, [sp, #0]
 800e146:	2300      	movs	r3, #0
 800e148:	2201      	movs	r2, #1
 800e14a:	2113      	movs	r1, #19
 800e14c:	6838      	ldr	r0, [r7, #0]
 800e14e:	f7fe fe40 	bl	800cdd2 <SPI_ETH_REG>
 800e152:	4603      	mov	r3, r0
 800e154:	b2da      	uxtb	r2, r3
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	Y->Sn_TOS=SPI_ETH_REG(X, 0x15 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e162:	3318      	adds	r3, #24
 800e164:	2201      	movs	r2, #1
 800e166:	9201      	str	r2, [sp, #4]
 800e168:	9300      	str	r3, [sp, #0]
 800e16a:	2300      	movs	r3, #0
 800e16c:	2201      	movs	r2, #1
 800e16e:	2115      	movs	r1, #21
 800e170:	6838      	ldr	r0, [r7, #0]
 800e172:	f7fe fe2e 	bl	800cdd2 <SPI_ETH_REG>
 800e176:	4603      	mov	r3, r0
 800e178:	b2da      	uxtb	r2, r3
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Y->Sn_TTL=SPI_ETH_REG(X, 0x16 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e186:	3318      	adds	r3, #24
 800e188:	2201      	movs	r2, #1
 800e18a:	9201      	str	r2, [sp, #4]
 800e18c:	9300      	str	r3, [sp, #0]
 800e18e:	2300      	movs	r3, #0
 800e190:	2201      	movs	r2, #1
 800e192:	2116      	movs	r1, #22
 800e194:	6838      	ldr	r0, [r7, #0]
 800e196:	f7fe fe1c 	bl	800cdd2 <SPI_ETH_REG>
 800e19a:	4603      	mov	r3, r0
 800e19c:	b2da      	uxtb	r2, r3
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	Y->Sn_RXBUF_SIZE=SPI_ETH_REG(X, 0x1E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e1aa:	3318      	adds	r3, #24
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	9201      	str	r2, [sp, #4]
 800e1b0:	9300      	str	r3, [sp, #0]
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	211e      	movs	r1, #30
 800e1b8:	6838      	ldr	r0, [r7, #0]
 800e1ba:	f7fe fe0a 	bl	800cdd2 <SPI_ETH_REG>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	b2da      	uxtb	r2, r3
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	Y->Sn_TXBUF_SIZE=SPI_ETH_REG(X, 0x1F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e1ce:	3318      	adds	r3, #24
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	9201      	str	r2, [sp, #4]
 800e1d4:	9300      	str	r3, [sp, #0]
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	2201      	movs	r2, #1
 800e1da:	211f      	movs	r1, #31
 800e1dc:	6838      	ldr	r0, [r7, #0]
 800e1de:	f7fe fdf8 	bl	800cdd2 <SPI_ETH_REG>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	b2da      	uxtb	r2, r3
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	Y->Sn_TX_FSR[0]=SPI_ETH_REG(X, 0x20 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e1f2:	3318      	adds	r3, #24
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	9201      	str	r2, [sp, #4]
 800e1f8:	9300      	str	r3, [sp, #0]
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	2120      	movs	r1, #32
 800e200:	6838      	ldr	r0, [r7, #0]
 800e202:	f7fe fde6 	bl	800cdd2 <SPI_ETH_REG>
 800e206:	4603      	mov	r3, r0
 800e208:	b2da      	uxtb	r2, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Y->Sn_TX_FSR[1]=SPI_ETH_REG(X, 0x21 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e216:	3318      	adds	r3, #24
 800e218:	2201      	movs	r2, #1
 800e21a:	9201      	str	r2, [sp, #4]
 800e21c:	9300      	str	r3, [sp, #0]
 800e21e:	2300      	movs	r3, #0
 800e220:	2201      	movs	r2, #1
 800e222:	2121      	movs	r1, #33	; 0x21
 800e224:	6838      	ldr	r0, [r7, #0]
 800e226:	f7fe fdd4 	bl	800cdd2 <SPI_ETH_REG>
 800e22a:	4603      	mov	r3, r0
 800e22c:	b2da      	uxtb	r2, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	Y->Sn_TX_RD[0]=SPI_ETH_REG(X, 0x22 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e23a:	3318      	adds	r3, #24
 800e23c:	2201      	movs	r2, #1
 800e23e:	9201      	str	r2, [sp, #4]
 800e240:	9300      	str	r3, [sp, #0]
 800e242:	2300      	movs	r3, #0
 800e244:	2201      	movs	r2, #1
 800e246:	2122      	movs	r1, #34	; 0x22
 800e248:	6838      	ldr	r0, [r7, #0]
 800e24a:	f7fe fdc2 	bl	800cdd2 <SPI_ETH_REG>
 800e24e:	4603      	mov	r3, r0
 800e250:	b2da      	uxtb	r2, r3
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Y->Sn_TX_RD[1]=SPI_ETH_REG(X, 0x23 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e25e:	3318      	adds	r3, #24
 800e260:	2201      	movs	r2, #1
 800e262:	9201      	str	r2, [sp, #4]
 800e264:	9300      	str	r3, [sp, #0]
 800e266:	2300      	movs	r3, #0
 800e268:	2201      	movs	r2, #1
 800e26a:	2123      	movs	r1, #35	; 0x23
 800e26c:	6838      	ldr	r0, [r7, #0]
 800e26e:	f7fe fdb0 	bl	800cdd2 <SPI_ETH_REG>
 800e272:	4603      	mov	r3, r0
 800e274:	b2da      	uxtb	r2, r3
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	Y->Sn_TX_WR[0]=SPI_ETH_REG(X, 0x24 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e282:	3318      	adds	r3, #24
 800e284:	2201      	movs	r2, #1
 800e286:	9201      	str	r2, [sp, #4]
 800e288:	9300      	str	r3, [sp, #0]
 800e28a:	2300      	movs	r3, #0
 800e28c:	2201      	movs	r2, #1
 800e28e:	2124      	movs	r1, #36	; 0x24
 800e290:	6838      	ldr	r0, [r7, #0]
 800e292:	f7fe fd9e 	bl	800cdd2 <SPI_ETH_REG>
 800e296:	4603      	mov	r3, r0
 800e298:	b2da      	uxtb	r2, r3
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Y->Sn_TX_WR[1]=SPI_ETH_REG(X, 0x25 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e2a6:	3318      	adds	r3, #24
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	9201      	str	r2, [sp, #4]
 800e2ac:	9300      	str	r3, [sp, #0]
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	2125      	movs	r1, #37	; 0x25
 800e2b4:	6838      	ldr	r0, [r7, #0]
 800e2b6:	f7fe fd8c 	bl	800cdd2 <SPI_ETH_REG>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	b2da      	uxtb	r2, r3
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	Y->Sn_RX_RSR[0]=SPI_ETH_REG(X, 0x26 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e2ca:	3318      	adds	r3, #24
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	9201      	str	r2, [sp, #4]
 800e2d0:	9300      	str	r3, [sp, #0]
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	2126      	movs	r1, #38	; 0x26
 800e2d8:	6838      	ldr	r0, [r7, #0]
 800e2da:	f7fe fd7a 	bl	800cdd2 <SPI_ETH_REG>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	b2da      	uxtb	r2, r3
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Y->Sn_RX_RSR[1]=SPI_ETH_REG(X, 0x27 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e2ee:	3318      	adds	r3, #24
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	9201      	str	r2, [sp, #4]
 800e2f4:	9300      	str	r3, [sp, #0]
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	2127      	movs	r1, #39	; 0x27
 800e2fc:	6838      	ldr	r0, [r7, #0]
 800e2fe:	f7fe fd68 	bl	800cdd2 <SPI_ETH_REG>
 800e302:	4603      	mov	r3, r0
 800e304:	b2da      	uxtb	r2, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

	Y->Sn_RX_RD[0]=SPI_ETH_REG(X, 0x28 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e312:	3318      	adds	r3, #24
 800e314:	2201      	movs	r2, #1
 800e316:	9201      	str	r2, [sp, #4]
 800e318:	9300      	str	r3, [sp, #0]
 800e31a:	2300      	movs	r3, #0
 800e31c:	2201      	movs	r2, #1
 800e31e:	2128      	movs	r1, #40	; 0x28
 800e320:	6838      	ldr	r0, [r7, #0]
 800e322:	f7fe fd56 	bl	800cdd2 <SPI_ETH_REG>
 800e326:	4603      	mov	r3, r0
 800e328:	b2da      	uxtb	r2, r3
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Y->Sn_RX_RD[1]=SPI_ETH_REG(X, 0x29 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e336:	3318      	adds	r3, #24
 800e338:	2201      	movs	r2, #1
 800e33a:	9201      	str	r2, [sp, #4]
 800e33c:	9300      	str	r3, [sp, #0]
 800e33e:	2300      	movs	r3, #0
 800e340:	2201      	movs	r2, #1
 800e342:	2129      	movs	r1, #41	; 0x29
 800e344:	6838      	ldr	r0, [r7, #0]
 800e346:	f7fe fd44 	bl	800cdd2 <SPI_ETH_REG>
 800e34a:	4603      	mov	r3, r0
 800e34c:	b2da      	uxtb	r2, r3
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	Y->Sn_RX_WR[0]=SPI_ETH_REG(X, 0x2A ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e35a:	3318      	adds	r3, #24
 800e35c:	2201      	movs	r2, #1
 800e35e:	9201      	str	r2, [sp, #4]
 800e360:	9300      	str	r3, [sp, #0]
 800e362:	2300      	movs	r3, #0
 800e364:	2201      	movs	r2, #1
 800e366:	212a      	movs	r1, #42	; 0x2a
 800e368:	6838      	ldr	r0, [r7, #0]
 800e36a:	f7fe fd32 	bl	800cdd2 <SPI_ETH_REG>
 800e36e:	4603      	mov	r3, r0
 800e370:	b2da      	uxtb	r2, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Y->Sn_RX_WR[1]=SPI_ETH_REG(X, 0x2B ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e37e:	3318      	adds	r3, #24
 800e380:	2201      	movs	r2, #1
 800e382:	9201      	str	r2, [sp, #4]
 800e384:	9300      	str	r3, [sp, #0]
 800e386:	2300      	movs	r3, #0
 800e388:	2201      	movs	r2, #1
 800e38a:	212b      	movs	r1, #43	; 0x2b
 800e38c:	6838      	ldr	r0, [r7, #0]
 800e38e:	f7fe fd20 	bl	800cdd2 <SPI_ETH_REG>
 800e392:	4603      	mov	r3, r0
 800e394:	b2da      	uxtb	r2, r3
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	Y->Sn_IMR=SPI_ETH_REG(X, 0x2C ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e3a2:	3318      	adds	r3, #24
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	9201      	str	r2, [sp, #4]
 800e3a8:	9300      	str	r3, [sp, #0]
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	212c      	movs	r1, #44	; 0x2c
 800e3b0:	6838      	ldr	r0, [r7, #0]
 800e3b2:	f7fe fd0e 	bl	800cdd2 <SPI_ETH_REG>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	b2da      	uxtb	r2, r3
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	Y->Sn_FRAG[0]=SPI_ETH_REG(X, 0x2D ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e3c6:	3318      	adds	r3, #24
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	9201      	str	r2, [sp, #4]
 800e3cc:	9300      	str	r3, [sp, #0]
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	212d      	movs	r1, #45	; 0x2d
 800e3d4:	6838      	ldr	r0, [r7, #0]
 800e3d6:	f7fe fcfc 	bl	800cdd2 <SPI_ETH_REG>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	b2da      	uxtb	r2, r3
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Y->Sn_FRAG[1]=SPI_ETH_REG(X, 0x2E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e3ea:	3318      	adds	r3, #24
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	9201      	str	r2, [sp, #4]
 800e3f0:	9300      	str	r3, [sp, #0]
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	212e      	movs	r1, #46	; 0x2e
 800e3f8:	6838      	ldr	r0, [r7, #0]
 800e3fa:	f7fe fcea 	bl	800cdd2 <SPI_ETH_REG>
 800e3fe:	4603      	mov	r3, r0
 800e400:	b2da      	uxtb	r2, r3
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56


	Y->Sn_KPALVTR=SPI_ETH_REG(X, 0x2F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e40e:	3318      	adds	r3, #24
 800e410:	2201      	movs	r2, #1
 800e412:	9201      	str	r2, [sp, #4]
 800e414:	9300      	str	r3, [sp, #0]
 800e416:	2300      	movs	r3, #0
 800e418:	2201      	movs	r2, #1
 800e41a:	212f      	movs	r1, #47	; 0x2f
 800e41c:	6838      	ldr	r0, [r7, #0]
 800e41e:	f7fe fcd8 	bl	800cdd2 <SPI_ETH_REG>
 800e422:	4603      	mov	r3, r0
 800e424:	b2da      	uxtb	r2, r3
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
};
 800e42c:	bf00      	nop
 800e42e:	4618      	mov	r0, r3
 800e430:	3708      	adds	r7, #8
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
	...

0800e438 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int tf)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b090      	sub	sp, #64	; 0x40
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	607a      	str	r2, [r7, #4]
 800e444:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e446:	2300      	movs	r3, #0
 800e448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e44a:	2300      	movs	r3, #0
 800e44c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e44e:	2300      	movs	r3, #0
 800e450:	637b      	str	r3, [r7, #52]	; 0x34
 800e452:	2300      	movs	r3, #0
 800e454:	633b      	str	r3, [r7, #48]	; 0x30
 800e456:	2300      	movs	r3, #0
 800e458:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e45a:	2300      	movs	r3, #0
 800e45c:	623b      	str	r3, [r7, #32]
 800e45e:	2300      	movs	r3, #0
 800e460:	61fb      	str	r3, [r7, #28]
 800e462:	2300      	movs	r3, #0
 800e464:	61bb      	str	r3, [r7, #24]
 800e466:	2300      	movs	r3, #0
 800e468:	62bb      	str	r3, [r7, #40]	; 0x28
 800e46a:	2300      	movs	r3, #0
 800e46c:	617b      	str	r3, [r7, #20]
 800e46e:	2300      	movs	r3, #0
 800e470:	627b      	str	r3, [r7, #36]	; 0x24
 800e472:	2300      	movs	r3, #0
 800e474:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	623b      	str	r3, [r7, #32]
	lngb=*bn;
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	61fb      	str	r3, [r7, #28]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800e482:	6a3a      	ldr	r2, [r7, #32]
 800e484:	69fb      	ldr	r3, [r7, #28]
 800e486:	429a      	cmp	r2, r3
 800e488:	f2c0 82fe 	blt.w	800ea88 <FT_String_ND+0x650>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800e48c:	2300      	movs	r3, #0
 800e48e:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800e490:	e00c      	b.n	800e4ac <FT_String_ND+0x74>
							{
								n++;
 800e492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e494:	3301      	adds	r3, #1
 800e496:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800e498:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e49a:	69fb      	ldr	r3, [r7, #28]
 800e49c:	441a      	add	r2, r3
 800e49e:	6a3b      	ldr	r3, [r7, #32]
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	dd02      	ble.n	800e4ac <FT_String_ND+0x74>
								{
									estado=0;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e4aa:	e009      	b.n	800e4c0 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800e4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4ae:	68fa      	ldr	r2, [r7, #12]
 800e4b0:	4413      	add	r3, r2
 800e4b2:	781a      	ldrb	r2, [r3, #0]
 800e4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b6:	6879      	ldr	r1, [r7, #4]
 800e4b8:	440b      	add	r3, r1
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d1e8      	bne.n	800e492 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800e4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800e4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800e4cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4ce:	69fb      	ldr	r3, [r7, #28]
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d108      	bne.n	800e4e6 <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800e4d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	1ad3      	subs	r3, r2, r3
 800e4da:	1c5a      	adds	r2, r3, #1
 800e4dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4de:	601a      	str	r2, [r3, #0]
									estado=1;
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e4e4:	e010      	b.n	800e508 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800e4e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4e8:	69fb      	ldr	r3, [r7, #28]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	dd02      	ble.n	800e4f4 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	627b      	str	r3, [r7, #36]	; 0x24
									 break;
 800e4f2:	e009      	b.n	800e508 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800e4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4f6:	68fa      	ldr	r2, [r7, #12]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	781a      	ldrb	r2, [r3, #0]
 800e4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fe:	6879      	ldr	r1, [r7, #4]
 800e500:	440b      	add	r3, r1
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	429a      	cmp	r2, r3
 800e506:	d0db      	beq.n	800e4c0 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800e508:	69fb      	ldr	r3, [r7, #28]
 800e50a:	1e5a      	subs	r2, r3, #1
 800e50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e50e:	4413      	add	r3, r2
 800e510:	6a3a      	ldr	r2, [r7, #32]
 800e512:	429a      	cmp	r2, r3
 800e514:	dd02      	ble.n	800e51c <FT_String_ND+0xe4>
 800e516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d1b7      	bne.n	800e48c <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800e51c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d101      	bne.n	800e526 <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800e522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e524:	e2b1      	b.n	800ea8a <FT_String_ND+0x652>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800e526:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e528:	2b01      	cmp	r3, #1
 800e52a:	d12c      	bne.n	800e586 <FT_String_ND+0x14e>
 800e52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52e:	2b01      	cmp	r3, #1
 800e530:	d129      	bne.n	800e586 <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800e532:	e014      	b.n	800e55e <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800e534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	69fb      	ldr	r3, [r7, #28]
 800e53a:	441a      	add	r2, r3
 800e53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e53e:	4413      	add	r3, r2
 800e540:	3b01      	subs	r3, #1
 800e542:	68fa      	ldr	r2, [r7, #12]
 800e544:	441a      	add	r2, r3
 800e546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e548:	6819      	ldr	r1, [r3, #0]
 800e54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e54c:	440b      	add	r3, r1
 800e54e:	3b01      	subs	r3, #1
 800e550:	68f9      	ldr	r1, [r7, #12]
 800e552:	440b      	add	r3, r1
 800e554:	7812      	ldrb	r2, [r2, #0]
 800e556:	701a      	strb	r2, [r3, #0]
										n3++;
 800e558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e55a:	3301      	adds	r3, #1
 800e55c:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800e55e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e564:	441a      	add	r2, r3
 800e566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e568:	4413      	add	r3, r2
 800e56a:	6a3a      	ldr	r2, [r7, #32]
 800e56c:	429a      	cmp	r2, r3
 800e56e:	dae1      	bge.n	800e534 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800e570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e576:	4413      	add	r3, r2
 800e578:	1e5a      	subs	r2, r3, #1
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	601a      	str	r2, [r3, #0]
							estado=3;
 800e57e:	2303      	movs	r3, #3
 800e580:	627b      	str	r3, [r7, #36]	; 0x24
							return(estado);
 800e582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e584:	e281      	b.n	800ea8a <FT_String_ND+0x652>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800e586:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e588:	2b02      	cmp	r3, #2
 800e58a:	f040 80b6 	bne.w	800e6fa <FT_String_ND+0x2c2>
 800e58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e590:	2b01      	cmp	r3, #1
 800e592:	f040 80b2 	bne.w	800e6fa <FT_String_ND+0x2c2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e596:	e012      	b.n	800e5be <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e598:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e59a:	69fb      	ldr	r3, [r7, #28]
 800e59c:	1ad2      	subs	r2, r2, r3
 800e59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a0:	4413      	add	r3, r2
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	441a      	add	r2, r3
 800e5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e5ac:	440b      	add	r3, r1
 800e5ae:	7812      	ldrb	r2, [r2, #0]
 800e5b0:	701a      	strb	r2, [r3, #0]
								n4++;
 800e5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b4:	3301      	adds	r3, #1
 800e5b6:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800e5b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5bc:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e5be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e5c0:	69fb      	ldr	r3, [r7, #28]
 800e5c2:	1ad2      	subs	r2, r2, r3
 800e5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c6:	4413      	add	r3, r2
 800e5c8:	6a3a      	ldr	r2, [r7, #32]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	dae4      	bge.n	800e598 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800e5ce:	499e      	ldr	r1, [pc, #632]	; (800e848 <FT_String_ND+0x410>)
 800e5d0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e5d2:	f000 fca1 	bl	800ef18 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800e5d6:	499d      	ldr	r1, [pc, #628]	; (800e84c <FT_String_ND+0x414>)
 800e5d8:	2000      	movs	r0, #0
 800e5da:	f000 fc9d 	bl	800ef18 <strtok>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f000 fada 	bl	800eb9a <atoi>
 800e5e6:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e5e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5ea:	3306      	adds	r3, #6
 800e5ec:	222c      	movs	r2, #44	; 0x2c
 800e5ee:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e5f0:	69bb      	ldr	r3, [r7, #24]
 800e5f2:	2b09      	cmp	r3, #9
 800e5f4:	dc0d      	bgt.n	800e612 <FT_String_ND+0x1da>
											{
												c[8]=':';
 800e5f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5f8:	3308      	adds	r3, #8
 800e5fa:	223a      	movs	r2, #58	; 0x3a
 800e5fc:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800e5fe:	69bb      	ldr	r3, [r7, #24]
 800e600:	3309      	adds	r3, #9
 800e602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e604:	4413      	add	r3, r2
 800e606:	2200      	movs	r2, #0
 800e608:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	3309      	adds	r3, #9
 800e60e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e610:	e021      	b.n	800e656 <FT_String_ND+0x21e>
											}
											else{
														if (lngd< 100)
 800e612:	69bb      	ldr	r3, [r7, #24]
 800e614:	2b63      	cmp	r3, #99	; 0x63
 800e616:	dc0d      	bgt.n	800e634 <FT_String_ND+0x1fc>
														{
															c[9]=':';
 800e618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e61a:	3309      	adds	r3, #9
 800e61c:	223a      	movs	r2, #58	; 0x3a
 800e61e:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	330a      	adds	r3, #10
 800e624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e626:	4413      	add	r3, r2
 800e628:	2200      	movs	r2, #0
 800e62a:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	330a      	adds	r3, #10
 800e630:	62bb      	str	r3, [r7, #40]	; 0x28
 800e632:	e010      	b.n	800e656 <FT_String_ND+0x21e>
														}
														else
														{
														if (lngd < 1000)
 800e634:	69bb      	ldr	r3, [r7, #24]
 800e636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e63a:	da0c      	bge.n	800e656 <FT_String_ND+0x21e>
														{
															c[10]=':';
 800e63c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e63e:	330a      	adds	r3, #10
 800e640:	223a      	movs	r2, #58	; 0x3a
 800e642:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800e644:	69bb      	ldr	r3, [r7, #24]
 800e646:	330b      	adds	r3, #11
 800e648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e64a:	4413      	add	r3, r2
 800e64c:	2200      	movs	r2, #0
 800e64e:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800e650:	69bb      	ldr	r3, [r7, #24]
 800e652:	330b      	adds	r3, #11
 800e654:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800e656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e65a:	601a      	str	r2, [r3, #0]
							n4=0;
 800e65c:	2300      	movs	r3, #0
 800e65e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e660:	e016      	b.n	800e690 <FT_String_ND+0x258>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e662:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	1ad2      	subs	r2, r2, r3
 800e668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66a:	441a      	add	r2, r3
 800e66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e66e:	4413      	add	r3, r2
 800e670:	461a      	mov	r2, r3
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	441a      	add	r2, r3
 800e676:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e678:	69fb      	ldr	r3, [r7, #28]
 800e67a:	1ac9      	subs	r1, r1, r3
 800e67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e67e:	440b      	add	r3, r1
 800e680:	4619      	mov	r1, r3
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	440b      	add	r3, r1
 800e686:	7812      	ldrb	r2, [r2, #0]
 800e688:	701a      	strb	r2, [r3, #0]
								n4++;
 800e68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e68c:	3301      	adds	r3, #1
 800e68e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e690:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e692:	69fb      	ldr	r3, [r7, #28]
 800e694:	1ad2      	subs	r2, r2, r3
 800e696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e698:	441a      	add	r2, r3
 800e69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69c:	4413      	add	r3, r2
 800e69e:	6a3a      	ldr	r2, [r7, #32]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	dade      	bge.n	800e662 <FT_String_ND+0x22a>
							}
							*an=n+n4-lngb-1;
 800e6a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a8:	441a      	add	r2, r3
 800e6aa:	69fb      	ldr	r3, [r7, #28]
 800e6ac:	1ad3      	subs	r3, r2, r3
 800e6ae:	1e5a      	subs	r2, r3, #1
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800e6b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6b6:	69fb      	ldr	r3, [r7, #28]
 800e6b8:	1ad2      	subs	r2, r2, r3
 800e6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6bc:	441a      	add	r2, r3
 800e6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c0:	4413      	add	r3, r2
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	4413      	add	r3, r2
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800e6cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6ce:	69fb      	ldr	r3, [r7, #28]
 800e6d0:	1ad2      	subs	r2, r2, r3
 800e6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d4:	4413      	add	r3, r2
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	4413      	add	r3, r2
 800e6dc:	2200      	movs	r2, #0
 800e6de:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800e6e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6e2:	69fb      	ldr	r3, [r7, #28]
 800e6e4:	1ad2      	subs	r2, r2, r3
 800e6e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ea:	440b      	add	r3, r1
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d102      	bne.n	800e6f6 <FT_String_ND+0x2be>
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	701a      	strb	r2, [r3, #0]
							estado=3;
 800e6f6:	2303      	movs	r3, #3
 800e6f8:	627b      	str	r3, [r7, #36]	; 0x24

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800e6fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e6fc:	2b03      	cmp	r3, #3
 800e6fe:	d146      	bne.n	800e78e <FT_String_ND+0x356>
 800e700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e702:	2b01      	cmp	r3, #1
 800e704:	d143      	bne.n	800e78e <FT_String_ND+0x356>
						{
						n3=0;
 800e706:	2300      	movs	r3, #0
 800e708:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e70a:	e00e      	b.n	800e72a <FT_String_ND+0x2f2>
									{
										c[n3]=a[*ubicacion+n3-1];
 800e70c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e712:	4413      	add	r3, r2
 800e714:	3b01      	subs	r3, #1
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	441a      	add	r2, r3
 800e71a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e71c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e71e:	440b      	add	r3, r1
 800e720:	7812      	ldrb	r2, [r2, #0]
 800e722:	701a      	strb	r2, [r3, #0]
										n3++;
 800e724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e726:	3301      	adds	r3, #1
 800e728:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e72a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	429a      	cmp	r2, r3
 800e730:	dbec      	blt.n	800e70c <FT_String_ND+0x2d4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800e732:	2300      	movs	r3, #0
 800e734:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e736:	e014      	b.n	800e762 <FT_String_ND+0x32a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800e738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	69fb      	ldr	r3, [r7, #28]
 800e73e:	441a      	add	r2, r3
 800e740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e742:	4413      	add	r3, r2
 800e744:	3b01      	subs	r3, #1
 800e746:	68fa      	ldr	r2, [r7, #12]
 800e748:	441a      	add	r2, r3
 800e74a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e74c:	6819      	ldr	r1, [r3, #0]
 800e74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e750:	440b      	add	r3, r1
 800e752:	3b01      	subs	r3, #1
 800e754:	68f9      	ldr	r1, [r7, #12]
 800e756:	440b      	add	r3, r1
 800e758:	7812      	ldrb	r2, [r2, #0]
 800e75a:	701a      	strb	r2, [r3, #0]
										n5++;
 800e75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75e:	3301      	adds	r3, #1
 800e760:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e764:	681a      	ldr	r2, [r3, #0]
 800e766:	69fb      	ldr	r3, [r7, #28]
 800e768:	441a      	add	r2, r3
 800e76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e76c:	441a      	add	r2, r3
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	429a      	cmp	r2, r3
 800e774:	dde0      	ble.n	800e738 <FT_String_ND+0x300>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800e776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e778:	681a      	ldr	r2, [r3, #0]
 800e77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77c:	4413      	add	r3, r2
 800e77e:	1e5a      	subs	r2, r3, #1
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800e784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e788:	601a      	str	r2, [r3, #0]
							estado=3;
 800e78a:	2303      	movs	r3, #3
 800e78c:	627b      	str	r3, [r7, #36]	; 0x24
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800e78e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e790:	2b04      	cmp	r3, #4
 800e792:	f040 80b6 	bne.w	800e902 <FT_String_ND+0x4ca>
 800e796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e798:	2b01      	cmp	r3, #1
 800e79a:	f040 80b2 	bne.w	800e902 <FT_String_ND+0x4ca>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e79e:	e012      	b.n	800e7c6 <FT_String_ND+0x38e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e7a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7a2:	69fb      	ldr	r3, [r7, #28]
 800e7a4:	1ad2      	subs	r2, r2, r3
 800e7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a8:	4413      	add	r3, r2
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	441a      	add	r2, r3
 800e7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e7b4:	440b      	add	r3, r1
 800e7b6:	7812      	ldrb	r2, [r2, #0]
 800e7b8:	701a      	strb	r2, [r3, #0]
								n4++;
 800e7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7bc:	3301      	adds	r3, #1
 800e7be:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800e7c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7c4:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e7c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	1ad2      	subs	r2, r2, r3
 800e7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ce:	4413      	add	r3, r2
 800e7d0:	6a3a      	ldr	r2, [r7, #32]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	dae4      	bge.n	800e7a0 <FT_String_ND+0x368>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e7d6:	491c      	ldr	r1, [pc, #112]	; (800e848 <FT_String_ND+0x410>)
 800e7d8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e7da:	f000 fb9d 	bl	800ef18 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e7de:	491b      	ldr	r1, [pc, #108]	; (800e84c <FT_String_ND+0x414>)
 800e7e0:	2000      	movs	r0, #0
 800e7e2:	f000 fb99 	bl	800ef18 <strtok>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f000 f9d6 	bl	800eb9a <atoi>
 800e7ee:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e7f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7f2:	3306      	adds	r3, #6
 800e7f4:	222c      	movs	r2, #44	; 0x2c
 800e7f6:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	2b09      	cmp	r3, #9
 800e7fc:	dc07      	bgt.n	800e80e <FT_String_ND+0x3d6>
											{
												c[8]=':';
 800e7fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e800:	3308      	adds	r3, #8
 800e802:	223a      	movs	r2, #58	; 0x3a
 800e804:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800e806:	69bb      	ldr	r3, [r7, #24]
 800e808:	3309      	adds	r3, #9
 800e80a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e80c:	e015      	b.n	800e83a <FT_String_ND+0x402>
											}
											else{
														if (lngd< 100)
 800e80e:	69bb      	ldr	r3, [r7, #24]
 800e810:	2b63      	cmp	r3, #99	; 0x63
 800e812:	dc07      	bgt.n	800e824 <FT_String_ND+0x3ec>
														{
															c[9]=':';
 800e814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e816:	3309      	adds	r3, #9
 800e818:	223a      	movs	r2, #58	; 0x3a
 800e81a:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800e81c:	69bb      	ldr	r3, [r7, #24]
 800e81e:	330a      	adds	r3, #10
 800e820:	62bb      	str	r3, [r7, #40]	; 0x28
 800e822:	e00a      	b.n	800e83a <FT_String_ND+0x402>
														}
														else
														{
														if (lngd < 1000)
 800e824:	69bb      	ldr	r3, [r7, #24]
 800e826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e82a:	da06      	bge.n	800e83a <FT_String_ND+0x402>
														{
															c[10]=':';
 800e82c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e82e:	330a      	adds	r3, #10
 800e830:	223a      	movs	r2, #58	; 0x3a
 800e832:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	330b      	adds	r3, #11
 800e838:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800e83a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e83c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e83e:	601a      	str	r2, [r3, #0]
							n4=0;
 800e840:	2300      	movs	r3, #0
 800e842:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e844:	e01b      	b.n	800e87e <FT_String_ND+0x446>
 800e846:	bf00      	nop
 800e848:	080106d0 	.word	0x080106d0
 800e84c:	080106d4 	.word	0x080106d4
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e850:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e852:	69fb      	ldr	r3, [r7, #28]
 800e854:	1ad2      	subs	r2, r2, r3
 800e856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e858:	441a      	add	r2, r3
 800e85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e85c:	4413      	add	r3, r2
 800e85e:	461a      	mov	r2, r3
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	441a      	add	r2, r3
 800e864:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e866:	69fb      	ldr	r3, [r7, #28]
 800e868:	1ac9      	subs	r1, r1, r3
 800e86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e86c:	440b      	add	r3, r1
 800e86e:	4619      	mov	r1, r3
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	440b      	add	r3, r1
 800e874:	7812      	ldrb	r2, [r2, #0]
 800e876:	701a      	strb	r2, [r3, #0]
								n4++;
 800e878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e87a:	3301      	adds	r3, #1
 800e87c:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e87e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e880:	69fb      	ldr	r3, [r7, #28]
 800e882:	1ad2      	subs	r2, r2, r3
 800e884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e886:	441a      	add	r2, r3
 800e888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e88a:	4413      	add	r3, r2
 800e88c:	6a3a      	ldr	r2, [r7, #32]
 800e88e:	429a      	cmp	r2, r3
 800e890:	dade      	bge.n	800e850 <FT_String_ND+0x418>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800e892:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e896:	441a      	add	r2, r3
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	1ad3      	subs	r3, r2, r3
 800e89c:	1e5a      	subs	r2, r3, #1
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	601a      	str	r2, [r3, #0]
							n5=0;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e8a6:	e00f      	b.n	800e8c8 <FT_String_ND+0x490>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800e8a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8aa:	69bb      	ldr	r3, [r7, #24]
 800e8ac:	1ad2      	subs	r2, r2, r3
 800e8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b0:	4413      	add	r3, r2
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8b6:	441a      	add	r2, r3
 800e8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e8bc:	440b      	add	r3, r1
 800e8be:	7812      	ldrb	r2, [r2, #0]
 800e8c0:	701a      	strb	r2, [r3, #0]
								n5++;
 800e8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c4:	3301      	adds	r3, #1
 800e8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e8c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8ca:	69bb      	ldr	r3, [r7, #24]
 800e8cc:	1ad2      	subs	r2, r2, r3
 800e8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d0:	441a      	add	r2, r3
 800e8d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	dbe6      	blt.n	800e8a8 <FT_String_ND+0x470>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800e8da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8de:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800e8e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8e2:	681a      	ldr	r2, [r3, #0]
 800e8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e6:	441a      	add	r2, r3
 800e8e8:	69bb      	ldr	r3, [r7, #24]
 800e8ea:	1ad2      	subs	r2, r2, r3
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4413      	add	r3, r2
 800e8f2:	6a3a      	ldr	r2, [r7, #32]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d102      	bne.n	800e8fe <FT_String_ND+0x4c6>
							{
								estado=4;
 800e8f8:	2304      	movs	r3, #4
 800e8fa:	627b      	str	r3, [r7, #36]	; 0x24
 800e8fc:	e001      	b.n	800e902 <FT_String_ND+0x4ca>

							}
							else
							{
								estado=5;
 800e8fe:	2305      	movs	r3, #5
 800e900:	627b      	str	r3, [r7, #36]	; 0x24
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800e902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e904:	2b05      	cmp	r3, #5
 800e906:	f040 80bd 	bne.w	800ea84 <FT_String_ND+0x64c>
 800e90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	f040 80b9 	bne.w	800ea84 <FT_String_ND+0x64c>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e912:	e012      	b.n	800e93a <FT_String_ND+0x502>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e914:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	1ad2      	subs	r2, r2, r3
 800e91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e91c:	4413      	add	r3, r2
 800e91e:	461a      	mov	r2, r3
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	441a      	add	r2, r3
 800e924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e926:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e928:	440b      	add	r3, r1
 800e92a:	7812      	ldrb	r2, [r2, #0]
 800e92c:	701a      	strb	r2, [r3, #0]
								n4++;
 800e92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e930:	3301      	adds	r3, #1
 800e932:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800e934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e938:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e93a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e93c:	69fb      	ldr	r3, [r7, #28]
 800e93e:	1ad2      	subs	r2, r2, r3
 800e940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e942:	4413      	add	r3, r2
 800e944:	6a3a      	ldr	r2, [r7, #32]
 800e946:	429a      	cmp	r2, r3
 800e948:	dae4      	bge.n	800e914 <FT_String_ND+0x4dc>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e94a:	4952      	ldr	r1, [pc, #328]	; (800ea94 <FT_String_ND+0x65c>)
 800e94c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e94e:	f000 fae3 	bl	800ef18 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800e952:	4951      	ldr	r1, [pc, #324]	; (800ea98 <FT_String_ND+0x660>)
 800e954:	2000      	movs	r0, #0
 800e956:	f000 fadf 	bl	800ef18 <strtok>
 800e95a:	4603      	mov	r3, r0
 800e95c:	4618      	mov	r0, r3
 800e95e:	f000 f91c 	bl	800eb9a <atoi>
 800e962:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e964:	494c      	ldr	r1, [pc, #304]	; (800ea98 <FT_String_ND+0x660>)
 800e966:	2000      	movs	r0, #0
 800e968:	f000 fad6 	bl	800ef18 <strtok>
 800e96c:	4603      	mov	r3, r0
 800e96e:	4618      	mov	r0, r3
 800e970:	f000 f913 	bl	800eb9a <atoi>
 800e974:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e978:	3306      	adds	r3, #6
 800e97a:	222c      	movs	r2, #44	; 0x2c
 800e97c:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e97e:	69bb      	ldr	r3, [r7, #24]
 800e980:	2b09      	cmp	r3, #9
 800e982:	dc07      	bgt.n	800e994 <FT_String_ND+0x55c>
											{
												c[10]=':';
 800e984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e986:	330a      	adds	r3, #10
 800e988:	223a      	movs	r2, #58	; 0x3a
 800e98a:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800e98c:	69bb      	ldr	r3, [r7, #24]
 800e98e:	330b      	adds	r3, #11
 800e990:	62bb      	str	r3, [r7, #40]	; 0x28
 800e992:	e015      	b.n	800e9c0 <FT_String_ND+0x588>
											}
											else{
														if (lngd< 100)
 800e994:	69bb      	ldr	r3, [r7, #24]
 800e996:	2b63      	cmp	r3, #99	; 0x63
 800e998:	dc07      	bgt.n	800e9aa <FT_String_ND+0x572>
														{
															c[11]=':';
 800e99a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e99c:	330b      	adds	r3, #11
 800e99e:	223a      	movs	r2, #58	; 0x3a
 800e9a0:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800e9a2:	69bb      	ldr	r3, [r7, #24]
 800e9a4:	330c      	adds	r3, #12
 800e9a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9a8:	e00a      	b.n	800e9c0 <FT_String_ND+0x588>
														}
														else
														{
														if (lngd < 1000)
 800e9aa:	69bb      	ldr	r3, [r7, #24]
 800e9ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e9b0:	da06      	bge.n	800e9c0 <FT_String_ND+0x588>
														{
															c[12]=':';
 800e9b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9b4:	330c      	adds	r3, #12
 800e9b6:	223a      	movs	r2, #58	; 0x3a
 800e9b8:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800e9ba:	69bb      	ldr	r3, [r7, #24]
 800e9bc:	330d      	adds	r3, #13
 800e9be:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800e9c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9c4:	601a      	str	r2, [r3, #0]
							n4=0;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e9ca:	e016      	b.n	800e9fa <FT_String_ND+0x5c2>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e9cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9ce:	69fb      	ldr	r3, [r7, #28]
 800e9d0:	1ad2      	subs	r2, r2, r3
 800e9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9d4:	441a      	add	r2, r3
 800e9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d8:	4413      	add	r3, r2
 800e9da:	461a      	mov	r2, r3
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	441a      	add	r2, r3
 800e9e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e9e2:	69fb      	ldr	r3, [r7, #28]
 800e9e4:	1ac9      	subs	r1, r1, r3
 800e9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e8:	440b      	add	r3, r1
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	440b      	add	r3, r1
 800e9f0:	7812      	ldrb	r2, [r2, #0]
 800e9f2:	701a      	strb	r2, [r3, #0]
								n4++;
 800e9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e9fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9fc:	69fb      	ldr	r3, [r7, #28]
 800e9fe:	1ad2      	subs	r2, r2, r3
 800ea00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea02:	441a      	add	r2, r3
 800ea04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea06:	4413      	add	r3, r2
 800ea08:	6a3a      	ldr	r2, [r7, #32]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	dade      	bge.n	800e9cc <FT_String_ND+0x594>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800ea0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea12:	441a      	add	r2, r3
 800ea14:	69fb      	ldr	r3, [r7, #28]
 800ea16:	1ad3      	subs	r3, r2, r3
 800ea18:	1e5a      	subs	r2, r3, #1
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	601a      	str	r2, [r3, #0]
							n5=0;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ea22:	e00f      	b.n	800ea44 <FT_String_ND+0x60c>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ea24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea26:	69bb      	ldr	r3, [r7, #24]
 800ea28:	1ad2      	subs	r2, r2, r3
 800ea2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2c:	4413      	add	r3, r2
 800ea2e:	461a      	mov	r2, r3
 800ea30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea32:	441a      	add	r2, r3
 800ea34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea36:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ea38:	440b      	add	r3, r1
 800ea3a:	7812      	ldrb	r2, [r2, #0]
 800ea3c:	701a      	strb	r2, [r3, #0]
								n5++;
 800ea3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea40:	3301      	adds	r3, #1
 800ea42:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ea44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea46:	69bb      	ldr	r3, [r7, #24]
 800ea48:	1ad2      	subs	r2, r2, r3
 800ea4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4c:	441a      	add	r2, r3
 800ea4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	dbe6      	blt.n	800ea24 <FT_String_ND+0x5ec>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ea56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea5a:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ea5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea62:	441a      	add	r2, r3
 800ea64:	69bb      	ldr	r3, [r7, #24]
 800ea66:	1ad2      	subs	r2, r2, r3
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	6a3a      	ldr	r2, [r7, #32]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d105      	bne.n	800ea80 <FT_String_ND+0x648>
							{
								estado=4;
 800ea74:	2304      	movs	r3, #4
 800ea76:	627b      	str	r3, [r7, #36]	; 0x24
								*idcom=cliente;
 800ea78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea7a:	693a      	ldr	r2, [r7, #16]
 800ea7c:	601a      	str	r2, [r3, #0]
 800ea7e:	e001      	b.n	800ea84 <FT_String_ND+0x64c>
							}
							else
							{
								estado=5;
 800ea80:	2305      	movs	r3, #5
 800ea82:	627b      	str	r3, [r7, #36]	; 0x24
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800ea84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea86:	e000      	b.n	800ea8a <FT_String_ND+0x652>
					}
			}
			else
			{
				return(2);
 800ea88:	2302      	movs	r3, #2
			}
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3740      	adds	r7, #64	; 0x40
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	bf00      	nop
 800ea94:	080106d0 	.word	0x080106d0
 800ea98:	080106d4 	.word	0x080106d4

0800ea9c <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b088      	sub	sp, #32
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800eaa6:	2330      	movs	r3, #48	; 0x30
 800eaa8:	60bb      	str	r3, [r7, #8]
 800eaaa:	f107 030c 	add.w	r3, r7, #12
 800eaae:	2200      	movs	r2, #0
 800eab0:	601a      	str	r2, [r3, #0]
 800eab2:	605a      	str	r2, [r3, #4]
 800eab4:	609a      	str	r2, [r3, #8]
 800eab6:	60da      	str	r2, [r3, #12]
int i=0;	
 800eab8:	2300      	movs	r3, #0
 800eaba:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800eabc:	f107 0308 	add.w	r3, r7, #8
 800eac0:	687a      	ldr	r2, [r7, #4]
 800eac2:	490f      	ldr	r1, [pc, #60]	; (800eb00 <INTOA+0x64>)
 800eac4:	4618      	mov	r0, r3
 800eac6:	f000 f9a9 	bl	800ee1c <siprintf>
		while(i<=strlen(origbuff))
 800eaca:	e00b      	b.n	800eae4 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	1c5a      	adds	r2, r3, #1
 800ead0:	603a      	str	r2, [r7, #0]
 800ead2:	f107 0108 	add.w	r1, r7, #8
 800ead6:	69fa      	ldr	r2, [r7, #28]
 800ead8:	440a      	add	r2, r1
 800eada:	7812      	ldrb	r2, [r2, #0]
 800eadc:	701a      	strb	r2, [r3, #0]
		i++;
 800eade:	69fb      	ldr	r3, [r7, #28]
 800eae0:	3301      	adds	r3, #1
 800eae2:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800eae4:	f107 0308 	add.w	r3, r7, #8
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7f1 fb83 	bl	80001f4 <strlen>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d2ea      	bcs.n	800eacc <INTOA+0x30>
		}
		return(i);
 800eaf6:	69fb      	ldr	r3, [r7, #28]
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3720      	adds	r7, #32
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}
 800eb00:	080106d8 	.word	0x080106d8

0800eb04 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b088      	sub	sp, #32
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	607a      	str	r2, [r7, #4]
 800eb10:	603b      	str	r3, [r7, #0]
int x =0;
 800eb12:	2300      	movs	r3, #0
 800eb14:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800eb16:	2300      	movs	r3, #0
 800eb18:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800eb1a:	f107 0310 	add.w	r3, r7, #16
 800eb1e:	617b      	str	r3, [r7, #20]
if (c==0)
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d105      	bne.n	800eb32 <CopiaVector+0x2e>
{
	x=strlen(b);
 800eb26:	68b8      	ldr	r0, [r7, #8]
 800eb28:	f7f1 fb64 	bl	80001f4 <strlen>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	61bb      	str	r3, [r7, #24]
 800eb30:	e02e      	b.n	800eb90 <CopiaVector+0x8c>
}
else
	{
		x=c;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800eb36:	69bb      	ldr	r3, [r7, #24]
 800eb38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb3c:	dd01      	ble.n	800eb42 <CopiaVector+0x3e>
			{
				return(1);
 800eb3e:	2301      	movs	r3, #1
 800eb40:	e027      	b.n	800eb92 <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800eb42:	2300      	movs	r3, #0
 800eb44:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800eb46:	e00a      	b.n	800eb5e <CopiaVector+0x5a>
				{
					*a++=*b++;
 800eb48:	68ba      	ldr	r2, [r7, #8]
 800eb4a:	1c53      	adds	r3, r2, #1
 800eb4c:	60bb      	str	r3, [r7, #8]
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	1c59      	adds	r1, r3, #1
 800eb52:	60f9      	str	r1, [r7, #12]
 800eb54:	7812      	ldrb	r2, [r2, #0]
 800eb56:	701a      	strb	r2, [r3, #0]
					p++;
 800eb58:	69fb      	ldr	r3, [r7, #28]
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800eb5e:	69fa      	ldr	r2, [r7, #28]
 800eb60:	69bb      	ldr	r3, [r7, #24]
 800eb62:	429a      	cmp	r2, r3
 800eb64:	dbf0      	blt.n	800eb48 <CopiaVector+0x44>
				}


			if (d==1)
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d111      	bne.n	800eb90 <CopiaVector+0x8c>
			{
			  p=c;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800eb70:	e008      	b.n	800eb84 <CopiaVector+0x80>
			  {

				  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	1c5a      	adds	r2, r3, #1
 800eb76:	60fa      	str	r2, [r7, #12]
 800eb78:	697a      	ldr	r2, [r7, #20]
 800eb7a:	7812      	ldrb	r2, [r2, #0]
 800eb7c:	701a      	strb	r2, [r3, #0]
				  p++;
 800eb7e:	69fb      	ldr	r3, [r7, #28]
 800eb80:	3301      	adds	r3, #1
 800eb82:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800eb84:	69fb      	ldr	r3, [r7, #28]
 800eb86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb8a:	dbf2      	blt.n	800eb72 <CopiaVector+0x6e>
				  //&a[p]="/0";

			  }
			return (0);
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	e000      	b.n	800eb92 <CopiaVector+0x8e>
			}

			}
	}
return (1);
 800eb90:	2301      	movs	r3, #1
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3720      	adds	r7, #32
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}

0800eb9a <atoi>:
 800eb9a:	220a      	movs	r2, #10
 800eb9c:	2100      	movs	r1, #0
 800eb9e:	f000 b883 	b.w	800eca8 <strtol>
	...

0800eba4 <_strtol_l.constprop.0>:
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebaa:	d001      	beq.n	800ebb0 <_strtol_l.constprop.0+0xc>
 800ebac:	2b24      	cmp	r3, #36	; 0x24
 800ebae:	d906      	bls.n	800ebbe <_strtol_l.constprop.0+0x1a>
 800ebb0:	f000 fa54 	bl	800f05c <__errno>
 800ebb4:	2316      	movs	r3, #22
 800ebb6:	6003      	str	r3, [r0, #0]
 800ebb8:	2000      	movs	r0, #0
 800ebba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebbe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800eca4 <_strtol_l.constprop.0+0x100>
 800ebc2:	460d      	mov	r5, r1
 800ebc4:	462e      	mov	r6, r5
 800ebc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ebca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ebce:	f017 0708 	ands.w	r7, r7, #8
 800ebd2:	d1f7      	bne.n	800ebc4 <_strtol_l.constprop.0+0x20>
 800ebd4:	2c2d      	cmp	r4, #45	; 0x2d
 800ebd6:	d132      	bne.n	800ec3e <_strtol_l.constprop.0+0x9a>
 800ebd8:	782c      	ldrb	r4, [r5, #0]
 800ebda:	2701      	movs	r7, #1
 800ebdc:	1cb5      	adds	r5, r6, #2
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d05b      	beq.n	800ec9a <_strtol_l.constprop.0+0xf6>
 800ebe2:	2b10      	cmp	r3, #16
 800ebe4:	d109      	bne.n	800ebfa <_strtol_l.constprop.0+0x56>
 800ebe6:	2c30      	cmp	r4, #48	; 0x30
 800ebe8:	d107      	bne.n	800ebfa <_strtol_l.constprop.0+0x56>
 800ebea:	782c      	ldrb	r4, [r5, #0]
 800ebec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ebf0:	2c58      	cmp	r4, #88	; 0x58
 800ebf2:	d14d      	bne.n	800ec90 <_strtol_l.constprop.0+0xec>
 800ebf4:	786c      	ldrb	r4, [r5, #1]
 800ebf6:	2310      	movs	r3, #16
 800ebf8:	3502      	adds	r5, #2
 800ebfa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ebfe:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec02:	f04f 0e00 	mov.w	lr, #0
 800ec06:	fbb8 f9f3 	udiv	r9, r8, r3
 800ec0a:	4676      	mov	r6, lr
 800ec0c:	fb03 8a19 	mls	sl, r3, r9, r8
 800ec10:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ec14:	f1bc 0f09 	cmp.w	ip, #9
 800ec18:	d816      	bhi.n	800ec48 <_strtol_l.constprop.0+0xa4>
 800ec1a:	4664      	mov	r4, ip
 800ec1c:	42a3      	cmp	r3, r4
 800ec1e:	dd24      	ble.n	800ec6a <_strtol_l.constprop.0+0xc6>
 800ec20:	f1be 3fff 	cmp.w	lr, #4294967295
 800ec24:	d008      	beq.n	800ec38 <_strtol_l.constprop.0+0x94>
 800ec26:	45b1      	cmp	r9, r6
 800ec28:	d31c      	bcc.n	800ec64 <_strtol_l.constprop.0+0xc0>
 800ec2a:	d101      	bne.n	800ec30 <_strtol_l.constprop.0+0x8c>
 800ec2c:	45a2      	cmp	sl, r4
 800ec2e:	db19      	blt.n	800ec64 <_strtol_l.constprop.0+0xc0>
 800ec30:	fb06 4603 	mla	r6, r6, r3, r4
 800ec34:	f04f 0e01 	mov.w	lr, #1
 800ec38:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec3c:	e7e8      	b.n	800ec10 <_strtol_l.constprop.0+0x6c>
 800ec3e:	2c2b      	cmp	r4, #43	; 0x2b
 800ec40:	bf04      	itt	eq
 800ec42:	782c      	ldrbeq	r4, [r5, #0]
 800ec44:	1cb5      	addeq	r5, r6, #2
 800ec46:	e7ca      	b.n	800ebde <_strtol_l.constprop.0+0x3a>
 800ec48:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ec4c:	f1bc 0f19 	cmp.w	ip, #25
 800ec50:	d801      	bhi.n	800ec56 <_strtol_l.constprop.0+0xb2>
 800ec52:	3c37      	subs	r4, #55	; 0x37
 800ec54:	e7e2      	b.n	800ec1c <_strtol_l.constprop.0+0x78>
 800ec56:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ec5a:	f1bc 0f19 	cmp.w	ip, #25
 800ec5e:	d804      	bhi.n	800ec6a <_strtol_l.constprop.0+0xc6>
 800ec60:	3c57      	subs	r4, #87	; 0x57
 800ec62:	e7db      	b.n	800ec1c <_strtol_l.constprop.0+0x78>
 800ec64:	f04f 3eff 	mov.w	lr, #4294967295
 800ec68:	e7e6      	b.n	800ec38 <_strtol_l.constprop.0+0x94>
 800ec6a:	f1be 3fff 	cmp.w	lr, #4294967295
 800ec6e:	d105      	bne.n	800ec7c <_strtol_l.constprop.0+0xd8>
 800ec70:	2322      	movs	r3, #34	; 0x22
 800ec72:	6003      	str	r3, [r0, #0]
 800ec74:	4646      	mov	r6, r8
 800ec76:	b942      	cbnz	r2, 800ec8a <_strtol_l.constprop.0+0xe6>
 800ec78:	4630      	mov	r0, r6
 800ec7a:	e79e      	b.n	800ebba <_strtol_l.constprop.0+0x16>
 800ec7c:	b107      	cbz	r7, 800ec80 <_strtol_l.constprop.0+0xdc>
 800ec7e:	4276      	negs	r6, r6
 800ec80:	2a00      	cmp	r2, #0
 800ec82:	d0f9      	beq.n	800ec78 <_strtol_l.constprop.0+0xd4>
 800ec84:	f1be 0f00 	cmp.w	lr, #0
 800ec88:	d000      	beq.n	800ec8c <_strtol_l.constprop.0+0xe8>
 800ec8a:	1e69      	subs	r1, r5, #1
 800ec8c:	6011      	str	r1, [r2, #0]
 800ec8e:	e7f3      	b.n	800ec78 <_strtol_l.constprop.0+0xd4>
 800ec90:	2430      	movs	r4, #48	; 0x30
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d1b1      	bne.n	800ebfa <_strtol_l.constprop.0+0x56>
 800ec96:	2308      	movs	r3, #8
 800ec98:	e7af      	b.n	800ebfa <_strtol_l.constprop.0+0x56>
 800ec9a:	2c30      	cmp	r4, #48	; 0x30
 800ec9c:	d0a5      	beq.n	800ebea <_strtol_l.constprop.0+0x46>
 800ec9e:	230a      	movs	r3, #10
 800eca0:	e7ab      	b.n	800ebfa <_strtol_l.constprop.0+0x56>
 800eca2:	bf00      	nop
 800eca4:	080106f5 	.word	0x080106f5

0800eca8 <strtol>:
 800eca8:	4613      	mov	r3, r2
 800ecaa:	460a      	mov	r2, r1
 800ecac:	4601      	mov	r1, r0
 800ecae:	4802      	ldr	r0, [pc, #8]	; (800ecb8 <strtol+0x10>)
 800ecb0:	6800      	ldr	r0, [r0, #0]
 800ecb2:	f7ff bf77 	b.w	800eba4 <_strtol_l.constprop.0>
 800ecb6:	bf00      	nop
 800ecb8:	20000194 	.word	0x20000194

0800ecbc <std>:
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	b510      	push	{r4, lr}
 800ecc0:	4604      	mov	r4, r0
 800ecc2:	e9c0 3300 	strd	r3, r3, [r0]
 800ecc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ecca:	6083      	str	r3, [r0, #8]
 800eccc:	8181      	strh	r1, [r0, #12]
 800ecce:	6643      	str	r3, [r0, #100]	; 0x64
 800ecd0:	81c2      	strh	r2, [r0, #14]
 800ecd2:	6183      	str	r3, [r0, #24]
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	2208      	movs	r2, #8
 800ecd8:	305c      	adds	r0, #92	; 0x5c
 800ecda:	f000 f902 	bl	800eee2 <memset>
 800ecde:	4b05      	ldr	r3, [pc, #20]	; (800ecf4 <std+0x38>)
 800ece0:	6263      	str	r3, [r4, #36]	; 0x24
 800ece2:	4b05      	ldr	r3, [pc, #20]	; (800ecf8 <std+0x3c>)
 800ece4:	62a3      	str	r3, [r4, #40]	; 0x28
 800ece6:	4b05      	ldr	r3, [pc, #20]	; (800ecfc <std+0x40>)
 800ece8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ecea:	4b05      	ldr	r3, [pc, #20]	; (800ed00 <std+0x44>)
 800ecec:	6224      	str	r4, [r4, #32]
 800ecee:	6323      	str	r3, [r4, #48]	; 0x30
 800ecf0:	bd10      	pop	{r4, pc}
 800ecf2:	bf00      	nop
 800ecf4:	0800ee5d 	.word	0x0800ee5d
 800ecf8:	0800ee7f 	.word	0x0800ee7f
 800ecfc:	0800eeb7 	.word	0x0800eeb7
 800ed00:	0800eedb 	.word	0x0800eedb

0800ed04 <stdio_exit_handler>:
 800ed04:	4a02      	ldr	r2, [pc, #8]	; (800ed10 <stdio_exit_handler+0xc>)
 800ed06:	4903      	ldr	r1, [pc, #12]	; (800ed14 <stdio_exit_handler+0x10>)
 800ed08:	4803      	ldr	r0, [pc, #12]	; (800ed18 <stdio_exit_handler+0x14>)
 800ed0a:	f000 b869 	b.w	800ede0 <_fwalk_sglue>
 800ed0e:	bf00      	nop
 800ed10:	2000013c 	.word	0x2000013c
 800ed14:	0800f9dd 	.word	0x0800f9dd
 800ed18:	20000148 	.word	0x20000148

0800ed1c <cleanup_stdio>:
 800ed1c:	6841      	ldr	r1, [r0, #4]
 800ed1e:	4b0c      	ldr	r3, [pc, #48]	; (800ed50 <cleanup_stdio+0x34>)
 800ed20:	4299      	cmp	r1, r3
 800ed22:	b510      	push	{r4, lr}
 800ed24:	4604      	mov	r4, r0
 800ed26:	d001      	beq.n	800ed2c <cleanup_stdio+0x10>
 800ed28:	f000 fe58 	bl	800f9dc <_fflush_r>
 800ed2c:	68a1      	ldr	r1, [r4, #8]
 800ed2e:	4b09      	ldr	r3, [pc, #36]	; (800ed54 <cleanup_stdio+0x38>)
 800ed30:	4299      	cmp	r1, r3
 800ed32:	d002      	beq.n	800ed3a <cleanup_stdio+0x1e>
 800ed34:	4620      	mov	r0, r4
 800ed36:	f000 fe51 	bl	800f9dc <_fflush_r>
 800ed3a:	68e1      	ldr	r1, [r4, #12]
 800ed3c:	4b06      	ldr	r3, [pc, #24]	; (800ed58 <cleanup_stdio+0x3c>)
 800ed3e:	4299      	cmp	r1, r3
 800ed40:	d004      	beq.n	800ed4c <cleanup_stdio+0x30>
 800ed42:	4620      	mov	r0, r4
 800ed44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed48:	f000 be48 	b.w	800f9dc <_fflush_r>
 800ed4c:	bd10      	pop	{r4, pc}
 800ed4e:	bf00      	nop
 800ed50:	20004440 	.word	0x20004440
 800ed54:	200044a8 	.word	0x200044a8
 800ed58:	20004510 	.word	0x20004510

0800ed5c <global_stdio_init.part.0>:
 800ed5c:	b510      	push	{r4, lr}
 800ed5e:	4b0b      	ldr	r3, [pc, #44]	; (800ed8c <global_stdio_init.part.0+0x30>)
 800ed60:	4c0b      	ldr	r4, [pc, #44]	; (800ed90 <global_stdio_init.part.0+0x34>)
 800ed62:	4a0c      	ldr	r2, [pc, #48]	; (800ed94 <global_stdio_init.part.0+0x38>)
 800ed64:	601a      	str	r2, [r3, #0]
 800ed66:	4620      	mov	r0, r4
 800ed68:	2200      	movs	r2, #0
 800ed6a:	2104      	movs	r1, #4
 800ed6c:	f7ff ffa6 	bl	800ecbc <std>
 800ed70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ed74:	2201      	movs	r2, #1
 800ed76:	2109      	movs	r1, #9
 800ed78:	f7ff ffa0 	bl	800ecbc <std>
 800ed7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ed80:	2202      	movs	r2, #2
 800ed82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed86:	2112      	movs	r1, #18
 800ed88:	f7ff bf98 	b.w	800ecbc <std>
 800ed8c:	20004578 	.word	0x20004578
 800ed90:	20004440 	.word	0x20004440
 800ed94:	0800ed05 	.word	0x0800ed05

0800ed98 <__sfp_lock_acquire>:
 800ed98:	4801      	ldr	r0, [pc, #4]	; (800eda0 <__sfp_lock_acquire+0x8>)
 800ed9a:	f000 b989 	b.w	800f0b0 <__retarget_lock_acquire_recursive>
 800ed9e:	bf00      	nop
 800eda0:	20004581 	.word	0x20004581

0800eda4 <__sfp_lock_release>:
 800eda4:	4801      	ldr	r0, [pc, #4]	; (800edac <__sfp_lock_release+0x8>)
 800eda6:	f000 b984 	b.w	800f0b2 <__retarget_lock_release_recursive>
 800edaa:	bf00      	nop
 800edac:	20004581 	.word	0x20004581

0800edb0 <__sinit>:
 800edb0:	b510      	push	{r4, lr}
 800edb2:	4604      	mov	r4, r0
 800edb4:	f7ff fff0 	bl	800ed98 <__sfp_lock_acquire>
 800edb8:	6a23      	ldr	r3, [r4, #32]
 800edba:	b11b      	cbz	r3, 800edc4 <__sinit+0x14>
 800edbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edc0:	f7ff bff0 	b.w	800eda4 <__sfp_lock_release>
 800edc4:	4b04      	ldr	r3, [pc, #16]	; (800edd8 <__sinit+0x28>)
 800edc6:	6223      	str	r3, [r4, #32]
 800edc8:	4b04      	ldr	r3, [pc, #16]	; (800eddc <__sinit+0x2c>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d1f5      	bne.n	800edbc <__sinit+0xc>
 800edd0:	f7ff ffc4 	bl	800ed5c <global_stdio_init.part.0>
 800edd4:	e7f2      	b.n	800edbc <__sinit+0xc>
 800edd6:	bf00      	nop
 800edd8:	0800ed1d 	.word	0x0800ed1d
 800eddc:	20004578 	.word	0x20004578

0800ede0 <_fwalk_sglue>:
 800ede0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ede4:	4607      	mov	r7, r0
 800ede6:	4688      	mov	r8, r1
 800ede8:	4614      	mov	r4, r2
 800edea:	2600      	movs	r6, #0
 800edec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800edf0:	f1b9 0901 	subs.w	r9, r9, #1
 800edf4:	d505      	bpl.n	800ee02 <_fwalk_sglue+0x22>
 800edf6:	6824      	ldr	r4, [r4, #0]
 800edf8:	2c00      	cmp	r4, #0
 800edfa:	d1f7      	bne.n	800edec <_fwalk_sglue+0xc>
 800edfc:	4630      	mov	r0, r6
 800edfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee02:	89ab      	ldrh	r3, [r5, #12]
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	d907      	bls.n	800ee18 <_fwalk_sglue+0x38>
 800ee08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	d003      	beq.n	800ee18 <_fwalk_sglue+0x38>
 800ee10:	4629      	mov	r1, r5
 800ee12:	4638      	mov	r0, r7
 800ee14:	47c0      	blx	r8
 800ee16:	4306      	orrs	r6, r0
 800ee18:	3568      	adds	r5, #104	; 0x68
 800ee1a:	e7e9      	b.n	800edf0 <_fwalk_sglue+0x10>

0800ee1c <siprintf>:
 800ee1c:	b40e      	push	{r1, r2, r3}
 800ee1e:	b500      	push	{lr}
 800ee20:	b09c      	sub	sp, #112	; 0x70
 800ee22:	ab1d      	add	r3, sp, #116	; 0x74
 800ee24:	9002      	str	r0, [sp, #8]
 800ee26:	9006      	str	r0, [sp, #24]
 800ee28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee2c:	4809      	ldr	r0, [pc, #36]	; (800ee54 <siprintf+0x38>)
 800ee2e:	9107      	str	r1, [sp, #28]
 800ee30:	9104      	str	r1, [sp, #16]
 800ee32:	4909      	ldr	r1, [pc, #36]	; (800ee58 <siprintf+0x3c>)
 800ee34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee38:	9105      	str	r1, [sp, #20]
 800ee3a:	6800      	ldr	r0, [r0, #0]
 800ee3c:	9301      	str	r3, [sp, #4]
 800ee3e:	a902      	add	r1, sp, #8
 800ee40:	f000 fab8 	bl	800f3b4 <_svfiprintf_r>
 800ee44:	9b02      	ldr	r3, [sp, #8]
 800ee46:	2200      	movs	r2, #0
 800ee48:	701a      	strb	r2, [r3, #0]
 800ee4a:	b01c      	add	sp, #112	; 0x70
 800ee4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee50:	b003      	add	sp, #12
 800ee52:	4770      	bx	lr
 800ee54:	20000194 	.word	0x20000194
 800ee58:	ffff0208 	.word	0xffff0208

0800ee5c <__sread>:
 800ee5c:	b510      	push	{r4, lr}
 800ee5e:	460c      	mov	r4, r1
 800ee60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee64:	f000 f8d6 	bl	800f014 <_read_r>
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	bfab      	itete	ge
 800ee6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee6e:	89a3      	ldrhlt	r3, [r4, #12]
 800ee70:	181b      	addge	r3, r3, r0
 800ee72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee76:	bfac      	ite	ge
 800ee78:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee7a:	81a3      	strhlt	r3, [r4, #12]
 800ee7c:	bd10      	pop	{r4, pc}

0800ee7e <__swrite>:
 800ee7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee82:	461f      	mov	r7, r3
 800ee84:	898b      	ldrh	r3, [r1, #12]
 800ee86:	05db      	lsls	r3, r3, #23
 800ee88:	4605      	mov	r5, r0
 800ee8a:	460c      	mov	r4, r1
 800ee8c:	4616      	mov	r6, r2
 800ee8e:	d505      	bpl.n	800ee9c <__swrite+0x1e>
 800ee90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee94:	2302      	movs	r3, #2
 800ee96:	2200      	movs	r2, #0
 800ee98:	f000 f8aa 	bl	800eff0 <_lseek_r>
 800ee9c:	89a3      	ldrh	r3, [r4, #12]
 800ee9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eea6:	81a3      	strh	r3, [r4, #12]
 800eea8:	4632      	mov	r2, r6
 800eeaa:	463b      	mov	r3, r7
 800eeac:	4628      	mov	r0, r5
 800eeae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eeb2:	f000 b8c1 	b.w	800f038 <_write_r>

0800eeb6 <__sseek>:
 800eeb6:	b510      	push	{r4, lr}
 800eeb8:	460c      	mov	r4, r1
 800eeba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eebe:	f000 f897 	bl	800eff0 <_lseek_r>
 800eec2:	1c43      	adds	r3, r0, #1
 800eec4:	89a3      	ldrh	r3, [r4, #12]
 800eec6:	bf15      	itete	ne
 800eec8:	6560      	strne	r0, [r4, #84]	; 0x54
 800eeca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eed2:	81a3      	strheq	r3, [r4, #12]
 800eed4:	bf18      	it	ne
 800eed6:	81a3      	strhne	r3, [r4, #12]
 800eed8:	bd10      	pop	{r4, pc}

0800eeda <__sclose>:
 800eeda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eede:	f000 b877 	b.w	800efd0 <_close_r>

0800eee2 <memset>:
 800eee2:	4402      	add	r2, r0
 800eee4:	4603      	mov	r3, r0
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d100      	bne.n	800eeec <memset+0xa>
 800eeea:	4770      	bx	lr
 800eeec:	f803 1b01 	strb.w	r1, [r3], #1
 800eef0:	e7f9      	b.n	800eee6 <memset+0x4>

0800eef2 <strncat>:
 800eef2:	b530      	push	{r4, r5, lr}
 800eef4:	4604      	mov	r4, r0
 800eef6:	7825      	ldrb	r5, [r4, #0]
 800eef8:	4623      	mov	r3, r4
 800eefa:	3401      	adds	r4, #1
 800eefc:	2d00      	cmp	r5, #0
 800eefe:	d1fa      	bne.n	800eef6 <strncat+0x4>
 800ef00:	3a01      	subs	r2, #1
 800ef02:	d304      	bcc.n	800ef0e <strncat+0x1c>
 800ef04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef08:	f803 4b01 	strb.w	r4, [r3], #1
 800ef0c:	b904      	cbnz	r4, 800ef10 <strncat+0x1e>
 800ef0e:	bd30      	pop	{r4, r5, pc}
 800ef10:	2a00      	cmp	r2, #0
 800ef12:	d1f5      	bne.n	800ef00 <strncat+0xe>
 800ef14:	701a      	strb	r2, [r3, #0]
 800ef16:	e7f3      	b.n	800ef00 <strncat+0xe>

0800ef18 <strtok>:
 800ef18:	4b16      	ldr	r3, [pc, #88]	; (800ef74 <strtok+0x5c>)
 800ef1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef1c:	681e      	ldr	r6, [r3, #0]
 800ef1e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800ef20:	4605      	mov	r5, r0
 800ef22:	b9fc      	cbnz	r4, 800ef64 <strtok+0x4c>
 800ef24:	2050      	movs	r0, #80	; 0x50
 800ef26:	9101      	str	r1, [sp, #4]
 800ef28:	f000 f936 	bl	800f198 <malloc>
 800ef2c:	9901      	ldr	r1, [sp, #4]
 800ef2e:	6470      	str	r0, [r6, #68]	; 0x44
 800ef30:	4602      	mov	r2, r0
 800ef32:	b920      	cbnz	r0, 800ef3e <strtok+0x26>
 800ef34:	4b10      	ldr	r3, [pc, #64]	; (800ef78 <strtok+0x60>)
 800ef36:	4811      	ldr	r0, [pc, #68]	; (800ef7c <strtok+0x64>)
 800ef38:	215b      	movs	r1, #91	; 0x5b
 800ef3a:	f000 f8c3 	bl	800f0c4 <__assert_func>
 800ef3e:	e9c0 4400 	strd	r4, r4, [r0]
 800ef42:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ef46:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ef4a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ef4e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ef52:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ef56:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ef5a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ef5e:	6184      	str	r4, [r0, #24]
 800ef60:	7704      	strb	r4, [r0, #28]
 800ef62:	6244      	str	r4, [r0, #36]	; 0x24
 800ef64:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800ef66:	2301      	movs	r3, #1
 800ef68:	4628      	mov	r0, r5
 800ef6a:	b002      	add	sp, #8
 800ef6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef70:	f000 b806 	b.w	800ef80 <__strtok_r>
 800ef74:	20000194 	.word	0x20000194
 800ef78:	080107f5 	.word	0x080107f5
 800ef7c:	0801080c 	.word	0x0801080c

0800ef80 <__strtok_r>:
 800ef80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef82:	b908      	cbnz	r0, 800ef88 <__strtok_r+0x8>
 800ef84:	6810      	ldr	r0, [r2, #0]
 800ef86:	b188      	cbz	r0, 800efac <__strtok_r+0x2c>
 800ef88:	4604      	mov	r4, r0
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ef90:	460f      	mov	r7, r1
 800ef92:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ef96:	b91e      	cbnz	r6, 800efa0 <__strtok_r+0x20>
 800ef98:	b965      	cbnz	r5, 800efb4 <__strtok_r+0x34>
 800ef9a:	6015      	str	r5, [r2, #0]
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	e005      	b.n	800efac <__strtok_r+0x2c>
 800efa0:	42b5      	cmp	r5, r6
 800efa2:	d1f6      	bne.n	800ef92 <__strtok_r+0x12>
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d1f0      	bne.n	800ef8a <__strtok_r+0xa>
 800efa8:	6014      	str	r4, [r2, #0]
 800efaa:	7003      	strb	r3, [r0, #0]
 800efac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efae:	461c      	mov	r4, r3
 800efb0:	e00c      	b.n	800efcc <__strtok_r+0x4c>
 800efb2:	b915      	cbnz	r5, 800efba <__strtok_r+0x3a>
 800efb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800efb8:	460e      	mov	r6, r1
 800efba:	f816 5b01 	ldrb.w	r5, [r6], #1
 800efbe:	42ab      	cmp	r3, r5
 800efc0:	d1f7      	bne.n	800efb2 <__strtok_r+0x32>
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d0f3      	beq.n	800efae <__strtok_r+0x2e>
 800efc6:	2300      	movs	r3, #0
 800efc8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800efcc:	6014      	str	r4, [r2, #0]
 800efce:	e7ed      	b.n	800efac <__strtok_r+0x2c>

0800efd0 <_close_r>:
 800efd0:	b538      	push	{r3, r4, r5, lr}
 800efd2:	4d06      	ldr	r5, [pc, #24]	; (800efec <_close_r+0x1c>)
 800efd4:	2300      	movs	r3, #0
 800efd6:	4604      	mov	r4, r0
 800efd8:	4608      	mov	r0, r1
 800efda:	602b      	str	r3, [r5, #0]
 800efdc:	f7f3 fb27 	bl	800262e <_close>
 800efe0:	1c43      	adds	r3, r0, #1
 800efe2:	d102      	bne.n	800efea <_close_r+0x1a>
 800efe4:	682b      	ldr	r3, [r5, #0]
 800efe6:	b103      	cbz	r3, 800efea <_close_r+0x1a>
 800efe8:	6023      	str	r3, [r4, #0]
 800efea:	bd38      	pop	{r3, r4, r5, pc}
 800efec:	2000457c 	.word	0x2000457c

0800eff0 <_lseek_r>:
 800eff0:	b538      	push	{r3, r4, r5, lr}
 800eff2:	4d07      	ldr	r5, [pc, #28]	; (800f010 <_lseek_r+0x20>)
 800eff4:	4604      	mov	r4, r0
 800eff6:	4608      	mov	r0, r1
 800eff8:	4611      	mov	r1, r2
 800effa:	2200      	movs	r2, #0
 800effc:	602a      	str	r2, [r5, #0]
 800effe:	461a      	mov	r2, r3
 800f000:	f7f3 fb3c 	bl	800267c <_lseek>
 800f004:	1c43      	adds	r3, r0, #1
 800f006:	d102      	bne.n	800f00e <_lseek_r+0x1e>
 800f008:	682b      	ldr	r3, [r5, #0]
 800f00a:	b103      	cbz	r3, 800f00e <_lseek_r+0x1e>
 800f00c:	6023      	str	r3, [r4, #0]
 800f00e:	bd38      	pop	{r3, r4, r5, pc}
 800f010:	2000457c 	.word	0x2000457c

0800f014 <_read_r>:
 800f014:	b538      	push	{r3, r4, r5, lr}
 800f016:	4d07      	ldr	r5, [pc, #28]	; (800f034 <_read_r+0x20>)
 800f018:	4604      	mov	r4, r0
 800f01a:	4608      	mov	r0, r1
 800f01c:	4611      	mov	r1, r2
 800f01e:	2200      	movs	r2, #0
 800f020:	602a      	str	r2, [r5, #0]
 800f022:	461a      	mov	r2, r3
 800f024:	f7f3 faca 	bl	80025bc <_read>
 800f028:	1c43      	adds	r3, r0, #1
 800f02a:	d102      	bne.n	800f032 <_read_r+0x1e>
 800f02c:	682b      	ldr	r3, [r5, #0]
 800f02e:	b103      	cbz	r3, 800f032 <_read_r+0x1e>
 800f030:	6023      	str	r3, [r4, #0]
 800f032:	bd38      	pop	{r3, r4, r5, pc}
 800f034:	2000457c 	.word	0x2000457c

0800f038 <_write_r>:
 800f038:	b538      	push	{r3, r4, r5, lr}
 800f03a:	4d07      	ldr	r5, [pc, #28]	; (800f058 <_write_r+0x20>)
 800f03c:	4604      	mov	r4, r0
 800f03e:	4608      	mov	r0, r1
 800f040:	4611      	mov	r1, r2
 800f042:	2200      	movs	r2, #0
 800f044:	602a      	str	r2, [r5, #0]
 800f046:	461a      	mov	r2, r3
 800f048:	f7f3 fad5 	bl	80025f6 <_write>
 800f04c:	1c43      	adds	r3, r0, #1
 800f04e:	d102      	bne.n	800f056 <_write_r+0x1e>
 800f050:	682b      	ldr	r3, [r5, #0]
 800f052:	b103      	cbz	r3, 800f056 <_write_r+0x1e>
 800f054:	6023      	str	r3, [r4, #0]
 800f056:	bd38      	pop	{r3, r4, r5, pc}
 800f058:	2000457c 	.word	0x2000457c

0800f05c <__errno>:
 800f05c:	4b01      	ldr	r3, [pc, #4]	; (800f064 <__errno+0x8>)
 800f05e:	6818      	ldr	r0, [r3, #0]
 800f060:	4770      	bx	lr
 800f062:	bf00      	nop
 800f064:	20000194 	.word	0x20000194

0800f068 <__libc_init_array>:
 800f068:	b570      	push	{r4, r5, r6, lr}
 800f06a:	4d0d      	ldr	r5, [pc, #52]	; (800f0a0 <__libc_init_array+0x38>)
 800f06c:	4c0d      	ldr	r4, [pc, #52]	; (800f0a4 <__libc_init_array+0x3c>)
 800f06e:	1b64      	subs	r4, r4, r5
 800f070:	10a4      	asrs	r4, r4, #2
 800f072:	2600      	movs	r6, #0
 800f074:	42a6      	cmp	r6, r4
 800f076:	d109      	bne.n	800f08c <__libc_init_array+0x24>
 800f078:	4d0b      	ldr	r5, [pc, #44]	; (800f0a8 <__libc_init_array+0x40>)
 800f07a:	4c0c      	ldr	r4, [pc, #48]	; (800f0ac <__libc_init_array+0x44>)
 800f07c:	f001 f800 	bl	8010080 <_init>
 800f080:	1b64      	subs	r4, r4, r5
 800f082:	10a4      	asrs	r4, r4, #2
 800f084:	2600      	movs	r6, #0
 800f086:	42a6      	cmp	r6, r4
 800f088:	d105      	bne.n	800f096 <__libc_init_array+0x2e>
 800f08a:	bd70      	pop	{r4, r5, r6, pc}
 800f08c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f090:	4798      	blx	r3
 800f092:	3601      	adds	r6, #1
 800f094:	e7ee      	b.n	800f074 <__libc_init_array+0xc>
 800f096:	f855 3b04 	ldr.w	r3, [r5], #4
 800f09a:	4798      	blx	r3
 800f09c:	3601      	adds	r6, #1
 800f09e:	e7f2      	b.n	800f086 <__libc_init_array+0x1e>
 800f0a0:	080108e0 	.word	0x080108e0
 800f0a4:	080108e0 	.word	0x080108e0
 800f0a8:	080108e0 	.word	0x080108e0
 800f0ac:	080108e4 	.word	0x080108e4

0800f0b0 <__retarget_lock_acquire_recursive>:
 800f0b0:	4770      	bx	lr

0800f0b2 <__retarget_lock_release_recursive>:
 800f0b2:	4770      	bx	lr

0800f0b4 <strcpy>:
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0ba:	f803 2b01 	strb.w	r2, [r3], #1
 800f0be:	2a00      	cmp	r2, #0
 800f0c0:	d1f9      	bne.n	800f0b6 <strcpy+0x2>
 800f0c2:	4770      	bx	lr

0800f0c4 <__assert_func>:
 800f0c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0c6:	4614      	mov	r4, r2
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	4b09      	ldr	r3, [pc, #36]	; (800f0f0 <__assert_func+0x2c>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	4605      	mov	r5, r0
 800f0d0:	68d8      	ldr	r0, [r3, #12]
 800f0d2:	b14c      	cbz	r4, 800f0e8 <__assert_func+0x24>
 800f0d4:	4b07      	ldr	r3, [pc, #28]	; (800f0f4 <__assert_func+0x30>)
 800f0d6:	9100      	str	r1, [sp, #0]
 800f0d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f0dc:	4906      	ldr	r1, [pc, #24]	; (800f0f8 <__assert_func+0x34>)
 800f0de:	462b      	mov	r3, r5
 800f0e0:	f000 fca4 	bl	800fa2c <fiprintf>
 800f0e4:	f000 fcec 	bl	800fac0 <abort>
 800f0e8:	4b04      	ldr	r3, [pc, #16]	; (800f0fc <__assert_func+0x38>)
 800f0ea:	461c      	mov	r4, r3
 800f0ec:	e7f3      	b.n	800f0d6 <__assert_func+0x12>
 800f0ee:	bf00      	nop
 800f0f0:	20000194 	.word	0x20000194
 800f0f4:	08010866 	.word	0x08010866
 800f0f8:	08010873 	.word	0x08010873
 800f0fc:	080108a1 	.word	0x080108a1

0800f100 <_free_r>:
 800f100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f102:	2900      	cmp	r1, #0
 800f104:	d044      	beq.n	800f190 <_free_r+0x90>
 800f106:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f10a:	9001      	str	r0, [sp, #4]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	f1a1 0404 	sub.w	r4, r1, #4
 800f112:	bfb8      	it	lt
 800f114:	18e4      	addlt	r4, r4, r3
 800f116:	f000 f8e7 	bl	800f2e8 <__malloc_lock>
 800f11a:	4a1e      	ldr	r2, [pc, #120]	; (800f194 <_free_r+0x94>)
 800f11c:	9801      	ldr	r0, [sp, #4]
 800f11e:	6813      	ldr	r3, [r2, #0]
 800f120:	b933      	cbnz	r3, 800f130 <_free_r+0x30>
 800f122:	6063      	str	r3, [r4, #4]
 800f124:	6014      	str	r4, [r2, #0]
 800f126:	b003      	add	sp, #12
 800f128:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f12c:	f000 b8e2 	b.w	800f2f4 <__malloc_unlock>
 800f130:	42a3      	cmp	r3, r4
 800f132:	d908      	bls.n	800f146 <_free_r+0x46>
 800f134:	6825      	ldr	r5, [r4, #0]
 800f136:	1961      	adds	r1, r4, r5
 800f138:	428b      	cmp	r3, r1
 800f13a:	bf01      	itttt	eq
 800f13c:	6819      	ldreq	r1, [r3, #0]
 800f13e:	685b      	ldreq	r3, [r3, #4]
 800f140:	1949      	addeq	r1, r1, r5
 800f142:	6021      	streq	r1, [r4, #0]
 800f144:	e7ed      	b.n	800f122 <_free_r+0x22>
 800f146:	461a      	mov	r2, r3
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	b10b      	cbz	r3, 800f150 <_free_r+0x50>
 800f14c:	42a3      	cmp	r3, r4
 800f14e:	d9fa      	bls.n	800f146 <_free_r+0x46>
 800f150:	6811      	ldr	r1, [r2, #0]
 800f152:	1855      	adds	r5, r2, r1
 800f154:	42a5      	cmp	r5, r4
 800f156:	d10b      	bne.n	800f170 <_free_r+0x70>
 800f158:	6824      	ldr	r4, [r4, #0]
 800f15a:	4421      	add	r1, r4
 800f15c:	1854      	adds	r4, r2, r1
 800f15e:	42a3      	cmp	r3, r4
 800f160:	6011      	str	r1, [r2, #0]
 800f162:	d1e0      	bne.n	800f126 <_free_r+0x26>
 800f164:	681c      	ldr	r4, [r3, #0]
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	6053      	str	r3, [r2, #4]
 800f16a:	440c      	add	r4, r1
 800f16c:	6014      	str	r4, [r2, #0]
 800f16e:	e7da      	b.n	800f126 <_free_r+0x26>
 800f170:	d902      	bls.n	800f178 <_free_r+0x78>
 800f172:	230c      	movs	r3, #12
 800f174:	6003      	str	r3, [r0, #0]
 800f176:	e7d6      	b.n	800f126 <_free_r+0x26>
 800f178:	6825      	ldr	r5, [r4, #0]
 800f17a:	1961      	adds	r1, r4, r5
 800f17c:	428b      	cmp	r3, r1
 800f17e:	bf04      	itt	eq
 800f180:	6819      	ldreq	r1, [r3, #0]
 800f182:	685b      	ldreq	r3, [r3, #4]
 800f184:	6063      	str	r3, [r4, #4]
 800f186:	bf04      	itt	eq
 800f188:	1949      	addeq	r1, r1, r5
 800f18a:	6021      	streq	r1, [r4, #0]
 800f18c:	6054      	str	r4, [r2, #4]
 800f18e:	e7ca      	b.n	800f126 <_free_r+0x26>
 800f190:	b003      	add	sp, #12
 800f192:	bd30      	pop	{r4, r5, pc}
 800f194:	20004584 	.word	0x20004584

0800f198 <malloc>:
 800f198:	4b02      	ldr	r3, [pc, #8]	; (800f1a4 <malloc+0xc>)
 800f19a:	4601      	mov	r1, r0
 800f19c:	6818      	ldr	r0, [r3, #0]
 800f19e:	f000 b823 	b.w	800f1e8 <_malloc_r>
 800f1a2:	bf00      	nop
 800f1a4:	20000194 	.word	0x20000194

0800f1a8 <sbrk_aligned>:
 800f1a8:	b570      	push	{r4, r5, r6, lr}
 800f1aa:	4e0e      	ldr	r6, [pc, #56]	; (800f1e4 <sbrk_aligned+0x3c>)
 800f1ac:	460c      	mov	r4, r1
 800f1ae:	6831      	ldr	r1, [r6, #0]
 800f1b0:	4605      	mov	r5, r0
 800f1b2:	b911      	cbnz	r1, 800f1ba <sbrk_aligned+0x12>
 800f1b4:	f000 fc66 	bl	800fa84 <_sbrk_r>
 800f1b8:	6030      	str	r0, [r6, #0]
 800f1ba:	4621      	mov	r1, r4
 800f1bc:	4628      	mov	r0, r5
 800f1be:	f000 fc61 	bl	800fa84 <_sbrk_r>
 800f1c2:	1c43      	adds	r3, r0, #1
 800f1c4:	d00a      	beq.n	800f1dc <sbrk_aligned+0x34>
 800f1c6:	1cc4      	adds	r4, r0, #3
 800f1c8:	f024 0403 	bic.w	r4, r4, #3
 800f1cc:	42a0      	cmp	r0, r4
 800f1ce:	d007      	beq.n	800f1e0 <sbrk_aligned+0x38>
 800f1d0:	1a21      	subs	r1, r4, r0
 800f1d2:	4628      	mov	r0, r5
 800f1d4:	f000 fc56 	bl	800fa84 <_sbrk_r>
 800f1d8:	3001      	adds	r0, #1
 800f1da:	d101      	bne.n	800f1e0 <sbrk_aligned+0x38>
 800f1dc:	f04f 34ff 	mov.w	r4, #4294967295
 800f1e0:	4620      	mov	r0, r4
 800f1e2:	bd70      	pop	{r4, r5, r6, pc}
 800f1e4:	20004588 	.word	0x20004588

0800f1e8 <_malloc_r>:
 800f1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1ec:	1ccd      	adds	r5, r1, #3
 800f1ee:	f025 0503 	bic.w	r5, r5, #3
 800f1f2:	3508      	adds	r5, #8
 800f1f4:	2d0c      	cmp	r5, #12
 800f1f6:	bf38      	it	cc
 800f1f8:	250c      	movcc	r5, #12
 800f1fa:	2d00      	cmp	r5, #0
 800f1fc:	4607      	mov	r7, r0
 800f1fe:	db01      	blt.n	800f204 <_malloc_r+0x1c>
 800f200:	42a9      	cmp	r1, r5
 800f202:	d905      	bls.n	800f210 <_malloc_r+0x28>
 800f204:	230c      	movs	r3, #12
 800f206:	603b      	str	r3, [r7, #0]
 800f208:	2600      	movs	r6, #0
 800f20a:	4630      	mov	r0, r6
 800f20c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f210:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f2e4 <_malloc_r+0xfc>
 800f214:	f000 f868 	bl	800f2e8 <__malloc_lock>
 800f218:	f8d8 3000 	ldr.w	r3, [r8]
 800f21c:	461c      	mov	r4, r3
 800f21e:	bb5c      	cbnz	r4, 800f278 <_malloc_r+0x90>
 800f220:	4629      	mov	r1, r5
 800f222:	4638      	mov	r0, r7
 800f224:	f7ff ffc0 	bl	800f1a8 <sbrk_aligned>
 800f228:	1c43      	adds	r3, r0, #1
 800f22a:	4604      	mov	r4, r0
 800f22c:	d155      	bne.n	800f2da <_malloc_r+0xf2>
 800f22e:	f8d8 4000 	ldr.w	r4, [r8]
 800f232:	4626      	mov	r6, r4
 800f234:	2e00      	cmp	r6, #0
 800f236:	d145      	bne.n	800f2c4 <_malloc_r+0xdc>
 800f238:	2c00      	cmp	r4, #0
 800f23a:	d048      	beq.n	800f2ce <_malloc_r+0xe6>
 800f23c:	6823      	ldr	r3, [r4, #0]
 800f23e:	4631      	mov	r1, r6
 800f240:	4638      	mov	r0, r7
 800f242:	eb04 0903 	add.w	r9, r4, r3
 800f246:	f000 fc1d 	bl	800fa84 <_sbrk_r>
 800f24a:	4581      	cmp	r9, r0
 800f24c:	d13f      	bne.n	800f2ce <_malloc_r+0xe6>
 800f24e:	6821      	ldr	r1, [r4, #0]
 800f250:	1a6d      	subs	r5, r5, r1
 800f252:	4629      	mov	r1, r5
 800f254:	4638      	mov	r0, r7
 800f256:	f7ff ffa7 	bl	800f1a8 <sbrk_aligned>
 800f25a:	3001      	adds	r0, #1
 800f25c:	d037      	beq.n	800f2ce <_malloc_r+0xe6>
 800f25e:	6823      	ldr	r3, [r4, #0]
 800f260:	442b      	add	r3, r5
 800f262:	6023      	str	r3, [r4, #0]
 800f264:	f8d8 3000 	ldr.w	r3, [r8]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d038      	beq.n	800f2de <_malloc_r+0xf6>
 800f26c:	685a      	ldr	r2, [r3, #4]
 800f26e:	42a2      	cmp	r2, r4
 800f270:	d12b      	bne.n	800f2ca <_malloc_r+0xe2>
 800f272:	2200      	movs	r2, #0
 800f274:	605a      	str	r2, [r3, #4]
 800f276:	e00f      	b.n	800f298 <_malloc_r+0xb0>
 800f278:	6822      	ldr	r2, [r4, #0]
 800f27a:	1b52      	subs	r2, r2, r5
 800f27c:	d41f      	bmi.n	800f2be <_malloc_r+0xd6>
 800f27e:	2a0b      	cmp	r2, #11
 800f280:	d917      	bls.n	800f2b2 <_malloc_r+0xca>
 800f282:	1961      	adds	r1, r4, r5
 800f284:	42a3      	cmp	r3, r4
 800f286:	6025      	str	r5, [r4, #0]
 800f288:	bf18      	it	ne
 800f28a:	6059      	strne	r1, [r3, #4]
 800f28c:	6863      	ldr	r3, [r4, #4]
 800f28e:	bf08      	it	eq
 800f290:	f8c8 1000 	streq.w	r1, [r8]
 800f294:	5162      	str	r2, [r4, r5]
 800f296:	604b      	str	r3, [r1, #4]
 800f298:	4638      	mov	r0, r7
 800f29a:	f104 060b 	add.w	r6, r4, #11
 800f29e:	f000 f829 	bl	800f2f4 <__malloc_unlock>
 800f2a2:	f026 0607 	bic.w	r6, r6, #7
 800f2a6:	1d23      	adds	r3, r4, #4
 800f2a8:	1af2      	subs	r2, r6, r3
 800f2aa:	d0ae      	beq.n	800f20a <_malloc_r+0x22>
 800f2ac:	1b9b      	subs	r3, r3, r6
 800f2ae:	50a3      	str	r3, [r4, r2]
 800f2b0:	e7ab      	b.n	800f20a <_malloc_r+0x22>
 800f2b2:	42a3      	cmp	r3, r4
 800f2b4:	6862      	ldr	r2, [r4, #4]
 800f2b6:	d1dd      	bne.n	800f274 <_malloc_r+0x8c>
 800f2b8:	f8c8 2000 	str.w	r2, [r8]
 800f2bc:	e7ec      	b.n	800f298 <_malloc_r+0xb0>
 800f2be:	4623      	mov	r3, r4
 800f2c0:	6864      	ldr	r4, [r4, #4]
 800f2c2:	e7ac      	b.n	800f21e <_malloc_r+0x36>
 800f2c4:	4634      	mov	r4, r6
 800f2c6:	6876      	ldr	r6, [r6, #4]
 800f2c8:	e7b4      	b.n	800f234 <_malloc_r+0x4c>
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	e7cc      	b.n	800f268 <_malloc_r+0x80>
 800f2ce:	230c      	movs	r3, #12
 800f2d0:	603b      	str	r3, [r7, #0]
 800f2d2:	4638      	mov	r0, r7
 800f2d4:	f000 f80e 	bl	800f2f4 <__malloc_unlock>
 800f2d8:	e797      	b.n	800f20a <_malloc_r+0x22>
 800f2da:	6025      	str	r5, [r4, #0]
 800f2dc:	e7dc      	b.n	800f298 <_malloc_r+0xb0>
 800f2de:	605b      	str	r3, [r3, #4]
 800f2e0:	deff      	udf	#255	; 0xff
 800f2e2:	bf00      	nop
 800f2e4:	20004584 	.word	0x20004584

0800f2e8 <__malloc_lock>:
 800f2e8:	4801      	ldr	r0, [pc, #4]	; (800f2f0 <__malloc_lock+0x8>)
 800f2ea:	f7ff bee1 	b.w	800f0b0 <__retarget_lock_acquire_recursive>
 800f2ee:	bf00      	nop
 800f2f0:	20004580 	.word	0x20004580

0800f2f4 <__malloc_unlock>:
 800f2f4:	4801      	ldr	r0, [pc, #4]	; (800f2fc <__malloc_unlock+0x8>)
 800f2f6:	f7ff bedc 	b.w	800f0b2 <__retarget_lock_release_recursive>
 800f2fa:	bf00      	nop
 800f2fc:	20004580 	.word	0x20004580

0800f300 <__ssputs_r>:
 800f300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f304:	688e      	ldr	r6, [r1, #8]
 800f306:	461f      	mov	r7, r3
 800f308:	42be      	cmp	r6, r7
 800f30a:	680b      	ldr	r3, [r1, #0]
 800f30c:	4682      	mov	sl, r0
 800f30e:	460c      	mov	r4, r1
 800f310:	4690      	mov	r8, r2
 800f312:	d82c      	bhi.n	800f36e <__ssputs_r+0x6e>
 800f314:	898a      	ldrh	r2, [r1, #12]
 800f316:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f31a:	d026      	beq.n	800f36a <__ssputs_r+0x6a>
 800f31c:	6965      	ldr	r5, [r4, #20]
 800f31e:	6909      	ldr	r1, [r1, #16]
 800f320:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f324:	eba3 0901 	sub.w	r9, r3, r1
 800f328:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f32c:	1c7b      	adds	r3, r7, #1
 800f32e:	444b      	add	r3, r9
 800f330:	106d      	asrs	r5, r5, #1
 800f332:	429d      	cmp	r5, r3
 800f334:	bf38      	it	cc
 800f336:	461d      	movcc	r5, r3
 800f338:	0553      	lsls	r3, r2, #21
 800f33a:	d527      	bpl.n	800f38c <__ssputs_r+0x8c>
 800f33c:	4629      	mov	r1, r5
 800f33e:	f7ff ff53 	bl	800f1e8 <_malloc_r>
 800f342:	4606      	mov	r6, r0
 800f344:	b360      	cbz	r0, 800f3a0 <__ssputs_r+0xa0>
 800f346:	6921      	ldr	r1, [r4, #16]
 800f348:	464a      	mov	r2, r9
 800f34a:	f000 fbab 	bl	800faa4 <memcpy>
 800f34e:	89a3      	ldrh	r3, [r4, #12]
 800f350:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f358:	81a3      	strh	r3, [r4, #12]
 800f35a:	6126      	str	r6, [r4, #16]
 800f35c:	6165      	str	r5, [r4, #20]
 800f35e:	444e      	add	r6, r9
 800f360:	eba5 0509 	sub.w	r5, r5, r9
 800f364:	6026      	str	r6, [r4, #0]
 800f366:	60a5      	str	r5, [r4, #8]
 800f368:	463e      	mov	r6, r7
 800f36a:	42be      	cmp	r6, r7
 800f36c:	d900      	bls.n	800f370 <__ssputs_r+0x70>
 800f36e:	463e      	mov	r6, r7
 800f370:	6820      	ldr	r0, [r4, #0]
 800f372:	4632      	mov	r2, r6
 800f374:	4641      	mov	r1, r8
 800f376:	f000 fb6b 	bl	800fa50 <memmove>
 800f37a:	68a3      	ldr	r3, [r4, #8]
 800f37c:	1b9b      	subs	r3, r3, r6
 800f37e:	60a3      	str	r3, [r4, #8]
 800f380:	6823      	ldr	r3, [r4, #0]
 800f382:	4433      	add	r3, r6
 800f384:	6023      	str	r3, [r4, #0]
 800f386:	2000      	movs	r0, #0
 800f388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f38c:	462a      	mov	r2, r5
 800f38e:	f000 fb9e 	bl	800face <_realloc_r>
 800f392:	4606      	mov	r6, r0
 800f394:	2800      	cmp	r0, #0
 800f396:	d1e0      	bne.n	800f35a <__ssputs_r+0x5a>
 800f398:	6921      	ldr	r1, [r4, #16]
 800f39a:	4650      	mov	r0, sl
 800f39c:	f7ff feb0 	bl	800f100 <_free_r>
 800f3a0:	230c      	movs	r3, #12
 800f3a2:	f8ca 3000 	str.w	r3, [sl]
 800f3a6:	89a3      	ldrh	r3, [r4, #12]
 800f3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3ac:	81a3      	strh	r3, [r4, #12]
 800f3ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f3b2:	e7e9      	b.n	800f388 <__ssputs_r+0x88>

0800f3b4 <_svfiprintf_r>:
 800f3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b8:	4698      	mov	r8, r3
 800f3ba:	898b      	ldrh	r3, [r1, #12]
 800f3bc:	061b      	lsls	r3, r3, #24
 800f3be:	b09d      	sub	sp, #116	; 0x74
 800f3c0:	4607      	mov	r7, r0
 800f3c2:	460d      	mov	r5, r1
 800f3c4:	4614      	mov	r4, r2
 800f3c6:	d50e      	bpl.n	800f3e6 <_svfiprintf_r+0x32>
 800f3c8:	690b      	ldr	r3, [r1, #16]
 800f3ca:	b963      	cbnz	r3, 800f3e6 <_svfiprintf_r+0x32>
 800f3cc:	2140      	movs	r1, #64	; 0x40
 800f3ce:	f7ff ff0b 	bl	800f1e8 <_malloc_r>
 800f3d2:	6028      	str	r0, [r5, #0]
 800f3d4:	6128      	str	r0, [r5, #16]
 800f3d6:	b920      	cbnz	r0, 800f3e2 <_svfiprintf_r+0x2e>
 800f3d8:	230c      	movs	r3, #12
 800f3da:	603b      	str	r3, [r7, #0]
 800f3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f3e0:	e0d0      	b.n	800f584 <_svfiprintf_r+0x1d0>
 800f3e2:	2340      	movs	r3, #64	; 0x40
 800f3e4:	616b      	str	r3, [r5, #20]
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	9309      	str	r3, [sp, #36]	; 0x24
 800f3ea:	2320      	movs	r3, #32
 800f3ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3f4:	2330      	movs	r3, #48	; 0x30
 800f3f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f59c <_svfiprintf_r+0x1e8>
 800f3fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3fe:	f04f 0901 	mov.w	r9, #1
 800f402:	4623      	mov	r3, r4
 800f404:	469a      	mov	sl, r3
 800f406:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f40a:	b10a      	cbz	r2, 800f410 <_svfiprintf_r+0x5c>
 800f40c:	2a25      	cmp	r2, #37	; 0x25
 800f40e:	d1f9      	bne.n	800f404 <_svfiprintf_r+0x50>
 800f410:	ebba 0b04 	subs.w	fp, sl, r4
 800f414:	d00b      	beq.n	800f42e <_svfiprintf_r+0x7a>
 800f416:	465b      	mov	r3, fp
 800f418:	4622      	mov	r2, r4
 800f41a:	4629      	mov	r1, r5
 800f41c:	4638      	mov	r0, r7
 800f41e:	f7ff ff6f 	bl	800f300 <__ssputs_r>
 800f422:	3001      	adds	r0, #1
 800f424:	f000 80a9 	beq.w	800f57a <_svfiprintf_r+0x1c6>
 800f428:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f42a:	445a      	add	r2, fp
 800f42c:	9209      	str	r2, [sp, #36]	; 0x24
 800f42e:	f89a 3000 	ldrb.w	r3, [sl]
 800f432:	2b00      	cmp	r3, #0
 800f434:	f000 80a1 	beq.w	800f57a <_svfiprintf_r+0x1c6>
 800f438:	2300      	movs	r3, #0
 800f43a:	f04f 32ff 	mov.w	r2, #4294967295
 800f43e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f442:	f10a 0a01 	add.w	sl, sl, #1
 800f446:	9304      	str	r3, [sp, #16]
 800f448:	9307      	str	r3, [sp, #28]
 800f44a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f44e:	931a      	str	r3, [sp, #104]	; 0x68
 800f450:	4654      	mov	r4, sl
 800f452:	2205      	movs	r2, #5
 800f454:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f458:	4850      	ldr	r0, [pc, #320]	; (800f59c <_svfiprintf_r+0x1e8>)
 800f45a:	f7f0 fed9 	bl	8000210 <memchr>
 800f45e:	9a04      	ldr	r2, [sp, #16]
 800f460:	b9d8      	cbnz	r0, 800f49a <_svfiprintf_r+0xe6>
 800f462:	06d0      	lsls	r0, r2, #27
 800f464:	bf44      	itt	mi
 800f466:	2320      	movmi	r3, #32
 800f468:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f46c:	0711      	lsls	r1, r2, #28
 800f46e:	bf44      	itt	mi
 800f470:	232b      	movmi	r3, #43	; 0x2b
 800f472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f476:	f89a 3000 	ldrb.w	r3, [sl]
 800f47a:	2b2a      	cmp	r3, #42	; 0x2a
 800f47c:	d015      	beq.n	800f4aa <_svfiprintf_r+0xf6>
 800f47e:	9a07      	ldr	r2, [sp, #28]
 800f480:	4654      	mov	r4, sl
 800f482:	2000      	movs	r0, #0
 800f484:	f04f 0c0a 	mov.w	ip, #10
 800f488:	4621      	mov	r1, r4
 800f48a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f48e:	3b30      	subs	r3, #48	; 0x30
 800f490:	2b09      	cmp	r3, #9
 800f492:	d94d      	bls.n	800f530 <_svfiprintf_r+0x17c>
 800f494:	b1b0      	cbz	r0, 800f4c4 <_svfiprintf_r+0x110>
 800f496:	9207      	str	r2, [sp, #28]
 800f498:	e014      	b.n	800f4c4 <_svfiprintf_r+0x110>
 800f49a:	eba0 0308 	sub.w	r3, r0, r8
 800f49e:	fa09 f303 	lsl.w	r3, r9, r3
 800f4a2:	4313      	orrs	r3, r2
 800f4a4:	9304      	str	r3, [sp, #16]
 800f4a6:	46a2      	mov	sl, r4
 800f4a8:	e7d2      	b.n	800f450 <_svfiprintf_r+0x9c>
 800f4aa:	9b03      	ldr	r3, [sp, #12]
 800f4ac:	1d19      	adds	r1, r3, #4
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	9103      	str	r1, [sp, #12]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	bfbb      	ittet	lt
 800f4b6:	425b      	neglt	r3, r3
 800f4b8:	f042 0202 	orrlt.w	r2, r2, #2
 800f4bc:	9307      	strge	r3, [sp, #28]
 800f4be:	9307      	strlt	r3, [sp, #28]
 800f4c0:	bfb8      	it	lt
 800f4c2:	9204      	strlt	r2, [sp, #16]
 800f4c4:	7823      	ldrb	r3, [r4, #0]
 800f4c6:	2b2e      	cmp	r3, #46	; 0x2e
 800f4c8:	d10c      	bne.n	800f4e4 <_svfiprintf_r+0x130>
 800f4ca:	7863      	ldrb	r3, [r4, #1]
 800f4cc:	2b2a      	cmp	r3, #42	; 0x2a
 800f4ce:	d134      	bne.n	800f53a <_svfiprintf_r+0x186>
 800f4d0:	9b03      	ldr	r3, [sp, #12]
 800f4d2:	1d1a      	adds	r2, r3, #4
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	9203      	str	r2, [sp, #12]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	bfb8      	it	lt
 800f4dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4e0:	3402      	adds	r4, #2
 800f4e2:	9305      	str	r3, [sp, #20]
 800f4e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f5ac <_svfiprintf_r+0x1f8>
 800f4e8:	7821      	ldrb	r1, [r4, #0]
 800f4ea:	2203      	movs	r2, #3
 800f4ec:	4650      	mov	r0, sl
 800f4ee:	f7f0 fe8f 	bl	8000210 <memchr>
 800f4f2:	b138      	cbz	r0, 800f504 <_svfiprintf_r+0x150>
 800f4f4:	9b04      	ldr	r3, [sp, #16]
 800f4f6:	eba0 000a 	sub.w	r0, r0, sl
 800f4fa:	2240      	movs	r2, #64	; 0x40
 800f4fc:	4082      	lsls	r2, r0
 800f4fe:	4313      	orrs	r3, r2
 800f500:	3401      	adds	r4, #1
 800f502:	9304      	str	r3, [sp, #16]
 800f504:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f508:	4825      	ldr	r0, [pc, #148]	; (800f5a0 <_svfiprintf_r+0x1ec>)
 800f50a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f50e:	2206      	movs	r2, #6
 800f510:	f7f0 fe7e 	bl	8000210 <memchr>
 800f514:	2800      	cmp	r0, #0
 800f516:	d038      	beq.n	800f58a <_svfiprintf_r+0x1d6>
 800f518:	4b22      	ldr	r3, [pc, #136]	; (800f5a4 <_svfiprintf_r+0x1f0>)
 800f51a:	bb1b      	cbnz	r3, 800f564 <_svfiprintf_r+0x1b0>
 800f51c:	9b03      	ldr	r3, [sp, #12]
 800f51e:	3307      	adds	r3, #7
 800f520:	f023 0307 	bic.w	r3, r3, #7
 800f524:	3308      	adds	r3, #8
 800f526:	9303      	str	r3, [sp, #12]
 800f528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f52a:	4433      	add	r3, r6
 800f52c:	9309      	str	r3, [sp, #36]	; 0x24
 800f52e:	e768      	b.n	800f402 <_svfiprintf_r+0x4e>
 800f530:	fb0c 3202 	mla	r2, ip, r2, r3
 800f534:	460c      	mov	r4, r1
 800f536:	2001      	movs	r0, #1
 800f538:	e7a6      	b.n	800f488 <_svfiprintf_r+0xd4>
 800f53a:	2300      	movs	r3, #0
 800f53c:	3401      	adds	r4, #1
 800f53e:	9305      	str	r3, [sp, #20]
 800f540:	4619      	mov	r1, r3
 800f542:	f04f 0c0a 	mov.w	ip, #10
 800f546:	4620      	mov	r0, r4
 800f548:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f54c:	3a30      	subs	r2, #48	; 0x30
 800f54e:	2a09      	cmp	r2, #9
 800f550:	d903      	bls.n	800f55a <_svfiprintf_r+0x1a6>
 800f552:	2b00      	cmp	r3, #0
 800f554:	d0c6      	beq.n	800f4e4 <_svfiprintf_r+0x130>
 800f556:	9105      	str	r1, [sp, #20]
 800f558:	e7c4      	b.n	800f4e4 <_svfiprintf_r+0x130>
 800f55a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f55e:	4604      	mov	r4, r0
 800f560:	2301      	movs	r3, #1
 800f562:	e7f0      	b.n	800f546 <_svfiprintf_r+0x192>
 800f564:	ab03      	add	r3, sp, #12
 800f566:	9300      	str	r3, [sp, #0]
 800f568:	462a      	mov	r2, r5
 800f56a:	4b0f      	ldr	r3, [pc, #60]	; (800f5a8 <_svfiprintf_r+0x1f4>)
 800f56c:	a904      	add	r1, sp, #16
 800f56e:	4638      	mov	r0, r7
 800f570:	f3af 8000 	nop.w
 800f574:	1c42      	adds	r2, r0, #1
 800f576:	4606      	mov	r6, r0
 800f578:	d1d6      	bne.n	800f528 <_svfiprintf_r+0x174>
 800f57a:	89ab      	ldrh	r3, [r5, #12]
 800f57c:	065b      	lsls	r3, r3, #25
 800f57e:	f53f af2d 	bmi.w	800f3dc <_svfiprintf_r+0x28>
 800f582:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f584:	b01d      	add	sp, #116	; 0x74
 800f586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f58a:	ab03      	add	r3, sp, #12
 800f58c:	9300      	str	r3, [sp, #0]
 800f58e:	462a      	mov	r2, r5
 800f590:	4b05      	ldr	r3, [pc, #20]	; (800f5a8 <_svfiprintf_r+0x1f4>)
 800f592:	a904      	add	r1, sp, #16
 800f594:	4638      	mov	r0, r7
 800f596:	f000 f879 	bl	800f68c <_printf_i>
 800f59a:	e7eb      	b.n	800f574 <_svfiprintf_r+0x1c0>
 800f59c:	080108a2 	.word	0x080108a2
 800f5a0:	080108ac 	.word	0x080108ac
 800f5a4:	00000000 	.word	0x00000000
 800f5a8:	0800f301 	.word	0x0800f301
 800f5ac:	080108a8 	.word	0x080108a8

0800f5b0 <_printf_common>:
 800f5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5b4:	4616      	mov	r6, r2
 800f5b6:	4699      	mov	r9, r3
 800f5b8:	688a      	ldr	r2, [r1, #8]
 800f5ba:	690b      	ldr	r3, [r1, #16]
 800f5bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	bfb8      	it	lt
 800f5c4:	4613      	movlt	r3, r2
 800f5c6:	6033      	str	r3, [r6, #0]
 800f5c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f5cc:	4607      	mov	r7, r0
 800f5ce:	460c      	mov	r4, r1
 800f5d0:	b10a      	cbz	r2, 800f5d6 <_printf_common+0x26>
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	6033      	str	r3, [r6, #0]
 800f5d6:	6823      	ldr	r3, [r4, #0]
 800f5d8:	0699      	lsls	r1, r3, #26
 800f5da:	bf42      	ittt	mi
 800f5dc:	6833      	ldrmi	r3, [r6, #0]
 800f5de:	3302      	addmi	r3, #2
 800f5e0:	6033      	strmi	r3, [r6, #0]
 800f5e2:	6825      	ldr	r5, [r4, #0]
 800f5e4:	f015 0506 	ands.w	r5, r5, #6
 800f5e8:	d106      	bne.n	800f5f8 <_printf_common+0x48>
 800f5ea:	f104 0a19 	add.w	sl, r4, #25
 800f5ee:	68e3      	ldr	r3, [r4, #12]
 800f5f0:	6832      	ldr	r2, [r6, #0]
 800f5f2:	1a9b      	subs	r3, r3, r2
 800f5f4:	42ab      	cmp	r3, r5
 800f5f6:	dc26      	bgt.n	800f646 <_printf_common+0x96>
 800f5f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f5fc:	1e13      	subs	r3, r2, #0
 800f5fe:	6822      	ldr	r2, [r4, #0]
 800f600:	bf18      	it	ne
 800f602:	2301      	movne	r3, #1
 800f604:	0692      	lsls	r2, r2, #26
 800f606:	d42b      	bmi.n	800f660 <_printf_common+0xb0>
 800f608:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f60c:	4649      	mov	r1, r9
 800f60e:	4638      	mov	r0, r7
 800f610:	47c0      	blx	r8
 800f612:	3001      	adds	r0, #1
 800f614:	d01e      	beq.n	800f654 <_printf_common+0xa4>
 800f616:	6823      	ldr	r3, [r4, #0]
 800f618:	6922      	ldr	r2, [r4, #16]
 800f61a:	f003 0306 	and.w	r3, r3, #6
 800f61e:	2b04      	cmp	r3, #4
 800f620:	bf02      	ittt	eq
 800f622:	68e5      	ldreq	r5, [r4, #12]
 800f624:	6833      	ldreq	r3, [r6, #0]
 800f626:	1aed      	subeq	r5, r5, r3
 800f628:	68a3      	ldr	r3, [r4, #8]
 800f62a:	bf0c      	ite	eq
 800f62c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f630:	2500      	movne	r5, #0
 800f632:	4293      	cmp	r3, r2
 800f634:	bfc4      	itt	gt
 800f636:	1a9b      	subgt	r3, r3, r2
 800f638:	18ed      	addgt	r5, r5, r3
 800f63a:	2600      	movs	r6, #0
 800f63c:	341a      	adds	r4, #26
 800f63e:	42b5      	cmp	r5, r6
 800f640:	d11a      	bne.n	800f678 <_printf_common+0xc8>
 800f642:	2000      	movs	r0, #0
 800f644:	e008      	b.n	800f658 <_printf_common+0xa8>
 800f646:	2301      	movs	r3, #1
 800f648:	4652      	mov	r2, sl
 800f64a:	4649      	mov	r1, r9
 800f64c:	4638      	mov	r0, r7
 800f64e:	47c0      	blx	r8
 800f650:	3001      	adds	r0, #1
 800f652:	d103      	bne.n	800f65c <_printf_common+0xac>
 800f654:	f04f 30ff 	mov.w	r0, #4294967295
 800f658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f65c:	3501      	adds	r5, #1
 800f65e:	e7c6      	b.n	800f5ee <_printf_common+0x3e>
 800f660:	18e1      	adds	r1, r4, r3
 800f662:	1c5a      	adds	r2, r3, #1
 800f664:	2030      	movs	r0, #48	; 0x30
 800f666:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f66a:	4422      	add	r2, r4
 800f66c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f670:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f674:	3302      	adds	r3, #2
 800f676:	e7c7      	b.n	800f608 <_printf_common+0x58>
 800f678:	2301      	movs	r3, #1
 800f67a:	4622      	mov	r2, r4
 800f67c:	4649      	mov	r1, r9
 800f67e:	4638      	mov	r0, r7
 800f680:	47c0      	blx	r8
 800f682:	3001      	adds	r0, #1
 800f684:	d0e6      	beq.n	800f654 <_printf_common+0xa4>
 800f686:	3601      	adds	r6, #1
 800f688:	e7d9      	b.n	800f63e <_printf_common+0x8e>
	...

0800f68c <_printf_i>:
 800f68c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f690:	7e0f      	ldrb	r7, [r1, #24]
 800f692:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f694:	2f78      	cmp	r7, #120	; 0x78
 800f696:	4691      	mov	r9, r2
 800f698:	4680      	mov	r8, r0
 800f69a:	460c      	mov	r4, r1
 800f69c:	469a      	mov	sl, r3
 800f69e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f6a2:	d807      	bhi.n	800f6b4 <_printf_i+0x28>
 800f6a4:	2f62      	cmp	r7, #98	; 0x62
 800f6a6:	d80a      	bhi.n	800f6be <_printf_i+0x32>
 800f6a8:	2f00      	cmp	r7, #0
 800f6aa:	f000 80d4 	beq.w	800f856 <_printf_i+0x1ca>
 800f6ae:	2f58      	cmp	r7, #88	; 0x58
 800f6b0:	f000 80c0 	beq.w	800f834 <_printf_i+0x1a8>
 800f6b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f6bc:	e03a      	b.n	800f734 <_printf_i+0xa8>
 800f6be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f6c2:	2b15      	cmp	r3, #21
 800f6c4:	d8f6      	bhi.n	800f6b4 <_printf_i+0x28>
 800f6c6:	a101      	add	r1, pc, #4	; (adr r1, 800f6cc <_printf_i+0x40>)
 800f6c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f6cc:	0800f725 	.word	0x0800f725
 800f6d0:	0800f739 	.word	0x0800f739
 800f6d4:	0800f6b5 	.word	0x0800f6b5
 800f6d8:	0800f6b5 	.word	0x0800f6b5
 800f6dc:	0800f6b5 	.word	0x0800f6b5
 800f6e0:	0800f6b5 	.word	0x0800f6b5
 800f6e4:	0800f739 	.word	0x0800f739
 800f6e8:	0800f6b5 	.word	0x0800f6b5
 800f6ec:	0800f6b5 	.word	0x0800f6b5
 800f6f0:	0800f6b5 	.word	0x0800f6b5
 800f6f4:	0800f6b5 	.word	0x0800f6b5
 800f6f8:	0800f83d 	.word	0x0800f83d
 800f6fc:	0800f765 	.word	0x0800f765
 800f700:	0800f7f7 	.word	0x0800f7f7
 800f704:	0800f6b5 	.word	0x0800f6b5
 800f708:	0800f6b5 	.word	0x0800f6b5
 800f70c:	0800f85f 	.word	0x0800f85f
 800f710:	0800f6b5 	.word	0x0800f6b5
 800f714:	0800f765 	.word	0x0800f765
 800f718:	0800f6b5 	.word	0x0800f6b5
 800f71c:	0800f6b5 	.word	0x0800f6b5
 800f720:	0800f7ff 	.word	0x0800f7ff
 800f724:	682b      	ldr	r3, [r5, #0]
 800f726:	1d1a      	adds	r2, r3, #4
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	602a      	str	r2, [r5, #0]
 800f72c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f734:	2301      	movs	r3, #1
 800f736:	e09f      	b.n	800f878 <_printf_i+0x1ec>
 800f738:	6820      	ldr	r0, [r4, #0]
 800f73a:	682b      	ldr	r3, [r5, #0]
 800f73c:	0607      	lsls	r7, r0, #24
 800f73e:	f103 0104 	add.w	r1, r3, #4
 800f742:	6029      	str	r1, [r5, #0]
 800f744:	d501      	bpl.n	800f74a <_printf_i+0xbe>
 800f746:	681e      	ldr	r6, [r3, #0]
 800f748:	e003      	b.n	800f752 <_printf_i+0xc6>
 800f74a:	0646      	lsls	r6, r0, #25
 800f74c:	d5fb      	bpl.n	800f746 <_printf_i+0xba>
 800f74e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f752:	2e00      	cmp	r6, #0
 800f754:	da03      	bge.n	800f75e <_printf_i+0xd2>
 800f756:	232d      	movs	r3, #45	; 0x2d
 800f758:	4276      	negs	r6, r6
 800f75a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f75e:	485a      	ldr	r0, [pc, #360]	; (800f8c8 <_printf_i+0x23c>)
 800f760:	230a      	movs	r3, #10
 800f762:	e012      	b.n	800f78a <_printf_i+0xfe>
 800f764:	682b      	ldr	r3, [r5, #0]
 800f766:	6820      	ldr	r0, [r4, #0]
 800f768:	1d19      	adds	r1, r3, #4
 800f76a:	6029      	str	r1, [r5, #0]
 800f76c:	0605      	lsls	r5, r0, #24
 800f76e:	d501      	bpl.n	800f774 <_printf_i+0xe8>
 800f770:	681e      	ldr	r6, [r3, #0]
 800f772:	e002      	b.n	800f77a <_printf_i+0xee>
 800f774:	0641      	lsls	r1, r0, #25
 800f776:	d5fb      	bpl.n	800f770 <_printf_i+0xe4>
 800f778:	881e      	ldrh	r6, [r3, #0]
 800f77a:	4853      	ldr	r0, [pc, #332]	; (800f8c8 <_printf_i+0x23c>)
 800f77c:	2f6f      	cmp	r7, #111	; 0x6f
 800f77e:	bf0c      	ite	eq
 800f780:	2308      	moveq	r3, #8
 800f782:	230a      	movne	r3, #10
 800f784:	2100      	movs	r1, #0
 800f786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f78a:	6865      	ldr	r5, [r4, #4]
 800f78c:	60a5      	str	r5, [r4, #8]
 800f78e:	2d00      	cmp	r5, #0
 800f790:	bfa2      	ittt	ge
 800f792:	6821      	ldrge	r1, [r4, #0]
 800f794:	f021 0104 	bicge.w	r1, r1, #4
 800f798:	6021      	strge	r1, [r4, #0]
 800f79a:	b90e      	cbnz	r6, 800f7a0 <_printf_i+0x114>
 800f79c:	2d00      	cmp	r5, #0
 800f79e:	d04b      	beq.n	800f838 <_printf_i+0x1ac>
 800f7a0:	4615      	mov	r5, r2
 800f7a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800f7a6:	fb03 6711 	mls	r7, r3, r1, r6
 800f7aa:	5dc7      	ldrb	r7, [r0, r7]
 800f7ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f7b0:	4637      	mov	r7, r6
 800f7b2:	42bb      	cmp	r3, r7
 800f7b4:	460e      	mov	r6, r1
 800f7b6:	d9f4      	bls.n	800f7a2 <_printf_i+0x116>
 800f7b8:	2b08      	cmp	r3, #8
 800f7ba:	d10b      	bne.n	800f7d4 <_printf_i+0x148>
 800f7bc:	6823      	ldr	r3, [r4, #0]
 800f7be:	07de      	lsls	r6, r3, #31
 800f7c0:	d508      	bpl.n	800f7d4 <_printf_i+0x148>
 800f7c2:	6923      	ldr	r3, [r4, #16]
 800f7c4:	6861      	ldr	r1, [r4, #4]
 800f7c6:	4299      	cmp	r1, r3
 800f7c8:	bfde      	ittt	le
 800f7ca:	2330      	movle	r3, #48	; 0x30
 800f7cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f7d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f7d4:	1b52      	subs	r2, r2, r5
 800f7d6:	6122      	str	r2, [r4, #16]
 800f7d8:	f8cd a000 	str.w	sl, [sp]
 800f7dc:	464b      	mov	r3, r9
 800f7de:	aa03      	add	r2, sp, #12
 800f7e0:	4621      	mov	r1, r4
 800f7e2:	4640      	mov	r0, r8
 800f7e4:	f7ff fee4 	bl	800f5b0 <_printf_common>
 800f7e8:	3001      	adds	r0, #1
 800f7ea:	d14a      	bne.n	800f882 <_printf_i+0x1f6>
 800f7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f0:	b004      	add	sp, #16
 800f7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7f6:	6823      	ldr	r3, [r4, #0]
 800f7f8:	f043 0320 	orr.w	r3, r3, #32
 800f7fc:	6023      	str	r3, [r4, #0]
 800f7fe:	4833      	ldr	r0, [pc, #204]	; (800f8cc <_printf_i+0x240>)
 800f800:	2778      	movs	r7, #120	; 0x78
 800f802:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f806:	6823      	ldr	r3, [r4, #0]
 800f808:	6829      	ldr	r1, [r5, #0]
 800f80a:	061f      	lsls	r7, r3, #24
 800f80c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f810:	d402      	bmi.n	800f818 <_printf_i+0x18c>
 800f812:	065f      	lsls	r7, r3, #25
 800f814:	bf48      	it	mi
 800f816:	b2b6      	uxthmi	r6, r6
 800f818:	07df      	lsls	r7, r3, #31
 800f81a:	bf48      	it	mi
 800f81c:	f043 0320 	orrmi.w	r3, r3, #32
 800f820:	6029      	str	r1, [r5, #0]
 800f822:	bf48      	it	mi
 800f824:	6023      	strmi	r3, [r4, #0]
 800f826:	b91e      	cbnz	r6, 800f830 <_printf_i+0x1a4>
 800f828:	6823      	ldr	r3, [r4, #0]
 800f82a:	f023 0320 	bic.w	r3, r3, #32
 800f82e:	6023      	str	r3, [r4, #0]
 800f830:	2310      	movs	r3, #16
 800f832:	e7a7      	b.n	800f784 <_printf_i+0xf8>
 800f834:	4824      	ldr	r0, [pc, #144]	; (800f8c8 <_printf_i+0x23c>)
 800f836:	e7e4      	b.n	800f802 <_printf_i+0x176>
 800f838:	4615      	mov	r5, r2
 800f83a:	e7bd      	b.n	800f7b8 <_printf_i+0x12c>
 800f83c:	682b      	ldr	r3, [r5, #0]
 800f83e:	6826      	ldr	r6, [r4, #0]
 800f840:	6961      	ldr	r1, [r4, #20]
 800f842:	1d18      	adds	r0, r3, #4
 800f844:	6028      	str	r0, [r5, #0]
 800f846:	0635      	lsls	r5, r6, #24
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	d501      	bpl.n	800f850 <_printf_i+0x1c4>
 800f84c:	6019      	str	r1, [r3, #0]
 800f84e:	e002      	b.n	800f856 <_printf_i+0x1ca>
 800f850:	0670      	lsls	r0, r6, #25
 800f852:	d5fb      	bpl.n	800f84c <_printf_i+0x1c0>
 800f854:	8019      	strh	r1, [r3, #0]
 800f856:	2300      	movs	r3, #0
 800f858:	6123      	str	r3, [r4, #16]
 800f85a:	4615      	mov	r5, r2
 800f85c:	e7bc      	b.n	800f7d8 <_printf_i+0x14c>
 800f85e:	682b      	ldr	r3, [r5, #0]
 800f860:	1d1a      	adds	r2, r3, #4
 800f862:	602a      	str	r2, [r5, #0]
 800f864:	681d      	ldr	r5, [r3, #0]
 800f866:	6862      	ldr	r2, [r4, #4]
 800f868:	2100      	movs	r1, #0
 800f86a:	4628      	mov	r0, r5
 800f86c:	f7f0 fcd0 	bl	8000210 <memchr>
 800f870:	b108      	cbz	r0, 800f876 <_printf_i+0x1ea>
 800f872:	1b40      	subs	r0, r0, r5
 800f874:	6060      	str	r0, [r4, #4]
 800f876:	6863      	ldr	r3, [r4, #4]
 800f878:	6123      	str	r3, [r4, #16]
 800f87a:	2300      	movs	r3, #0
 800f87c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f880:	e7aa      	b.n	800f7d8 <_printf_i+0x14c>
 800f882:	6923      	ldr	r3, [r4, #16]
 800f884:	462a      	mov	r2, r5
 800f886:	4649      	mov	r1, r9
 800f888:	4640      	mov	r0, r8
 800f88a:	47d0      	blx	sl
 800f88c:	3001      	adds	r0, #1
 800f88e:	d0ad      	beq.n	800f7ec <_printf_i+0x160>
 800f890:	6823      	ldr	r3, [r4, #0]
 800f892:	079b      	lsls	r3, r3, #30
 800f894:	d413      	bmi.n	800f8be <_printf_i+0x232>
 800f896:	68e0      	ldr	r0, [r4, #12]
 800f898:	9b03      	ldr	r3, [sp, #12]
 800f89a:	4298      	cmp	r0, r3
 800f89c:	bfb8      	it	lt
 800f89e:	4618      	movlt	r0, r3
 800f8a0:	e7a6      	b.n	800f7f0 <_printf_i+0x164>
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	4632      	mov	r2, r6
 800f8a6:	4649      	mov	r1, r9
 800f8a8:	4640      	mov	r0, r8
 800f8aa:	47d0      	blx	sl
 800f8ac:	3001      	adds	r0, #1
 800f8ae:	d09d      	beq.n	800f7ec <_printf_i+0x160>
 800f8b0:	3501      	adds	r5, #1
 800f8b2:	68e3      	ldr	r3, [r4, #12]
 800f8b4:	9903      	ldr	r1, [sp, #12]
 800f8b6:	1a5b      	subs	r3, r3, r1
 800f8b8:	42ab      	cmp	r3, r5
 800f8ba:	dcf2      	bgt.n	800f8a2 <_printf_i+0x216>
 800f8bc:	e7eb      	b.n	800f896 <_printf_i+0x20a>
 800f8be:	2500      	movs	r5, #0
 800f8c0:	f104 0619 	add.w	r6, r4, #25
 800f8c4:	e7f5      	b.n	800f8b2 <_printf_i+0x226>
 800f8c6:	bf00      	nop
 800f8c8:	080108b3 	.word	0x080108b3
 800f8cc:	080108c4 	.word	0x080108c4

0800f8d0 <__sflush_r>:
 800f8d0:	898a      	ldrh	r2, [r1, #12]
 800f8d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8d6:	4605      	mov	r5, r0
 800f8d8:	0710      	lsls	r0, r2, #28
 800f8da:	460c      	mov	r4, r1
 800f8dc:	d458      	bmi.n	800f990 <__sflush_r+0xc0>
 800f8de:	684b      	ldr	r3, [r1, #4]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	dc05      	bgt.n	800f8f0 <__sflush_r+0x20>
 800f8e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	dc02      	bgt.n	800f8f0 <__sflush_r+0x20>
 800f8ea:	2000      	movs	r0, #0
 800f8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8f2:	2e00      	cmp	r6, #0
 800f8f4:	d0f9      	beq.n	800f8ea <__sflush_r+0x1a>
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f8fc:	682f      	ldr	r7, [r5, #0]
 800f8fe:	6a21      	ldr	r1, [r4, #32]
 800f900:	602b      	str	r3, [r5, #0]
 800f902:	d032      	beq.n	800f96a <__sflush_r+0x9a>
 800f904:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f906:	89a3      	ldrh	r3, [r4, #12]
 800f908:	075a      	lsls	r2, r3, #29
 800f90a:	d505      	bpl.n	800f918 <__sflush_r+0x48>
 800f90c:	6863      	ldr	r3, [r4, #4]
 800f90e:	1ac0      	subs	r0, r0, r3
 800f910:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f912:	b10b      	cbz	r3, 800f918 <__sflush_r+0x48>
 800f914:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f916:	1ac0      	subs	r0, r0, r3
 800f918:	2300      	movs	r3, #0
 800f91a:	4602      	mov	r2, r0
 800f91c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f91e:	6a21      	ldr	r1, [r4, #32]
 800f920:	4628      	mov	r0, r5
 800f922:	47b0      	blx	r6
 800f924:	1c43      	adds	r3, r0, #1
 800f926:	89a3      	ldrh	r3, [r4, #12]
 800f928:	d106      	bne.n	800f938 <__sflush_r+0x68>
 800f92a:	6829      	ldr	r1, [r5, #0]
 800f92c:	291d      	cmp	r1, #29
 800f92e:	d82b      	bhi.n	800f988 <__sflush_r+0xb8>
 800f930:	4a29      	ldr	r2, [pc, #164]	; (800f9d8 <__sflush_r+0x108>)
 800f932:	410a      	asrs	r2, r1
 800f934:	07d6      	lsls	r6, r2, #31
 800f936:	d427      	bmi.n	800f988 <__sflush_r+0xb8>
 800f938:	2200      	movs	r2, #0
 800f93a:	6062      	str	r2, [r4, #4]
 800f93c:	04d9      	lsls	r1, r3, #19
 800f93e:	6922      	ldr	r2, [r4, #16]
 800f940:	6022      	str	r2, [r4, #0]
 800f942:	d504      	bpl.n	800f94e <__sflush_r+0x7e>
 800f944:	1c42      	adds	r2, r0, #1
 800f946:	d101      	bne.n	800f94c <__sflush_r+0x7c>
 800f948:	682b      	ldr	r3, [r5, #0]
 800f94a:	b903      	cbnz	r3, 800f94e <__sflush_r+0x7e>
 800f94c:	6560      	str	r0, [r4, #84]	; 0x54
 800f94e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f950:	602f      	str	r7, [r5, #0]
 800f952:	2900      	cmp	r1, #0
 800f954:	d0c9      	beq.n	800f8ea <__sflush_r+0x1a>
 800f956:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f95a:	4299      	cmp	r1, r3
 800f95c:	d002      	beq.n	800f964 <__sflush_r+0x94>
 800f95e:	4628      	mov	r0, r5
 800f960:	f7ff fbce 	bl	800f100 <_free_r>
 800f964:	2000      	movs	r0, #0
 800f966:	6360      	str	r0, [r4, #52]	; 0x34
 800f968:	e7c0      	b.n	800f8ec <__sflush_r+0x1c>
 800f96a:	2301      	movs	r3, #1
 800f96c:	4628      	mov	r0, r5
 800f96e:	47b0      	blx	r6
 800f970:	1c41      	adds	r1, r0, #1
 800f972:	d1c8      	bne.n	800f906 <__sflush_r+0x36>
 800f974:	682b      	ldr	r3, [r5, #0]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d0c5      	beq.n	800f906 <__sflush_r+0x36>
 800f97a:	2b1d      	cmp	r3, #29
 800f97c:	d001      	beq.n	800f982 <__sflush_r+0xb2>
 800f97e:	2b16      	cmp	r3, #22
 800f980:	d101      	bne.n	800f986 <__sflush_r+0xb6>
 800f982:	602f      	str	r7, [r5, #0]
 800f984:	e7b1      	b.n	800f8ea <__sflush_r+0x1a>
 800f986:	89a3      	ldrh	r3, [r4, #12]
 800f988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f98c:	81a3      	strh	r3, [r4, #12]
 800f98e:	e7ad      	b.n	800f8ec <__sflush_r+0x1c>
 800f990:	690f      	ldr	r7, [r1, #16]
 800f992:	2f00      	cmp	r7, #0
 800f994:	d0a9      	beq.n	800f8ea <__sflush_r+0x1a>
 800f996:	0793      	lsls	r3, r2, #30
 800f998:	680e      	ldr	r6, [r1, #0]
 800f99a:	bf08      	it	eq
 800f99c:	694b      	ldreq	r3, [r1, #20]
 800f99e:	600f      	str	r7, [r1, #0]
 800f9a0:	bf18      	it	ne
 800f9a2:	2300      	movne	r3, #0
 800f9a4:	eba6 0807 	sub.w	r8, r6, r7
 800f9a8:	608b      	str	r3, [r1, #8]
 800f9aa:	f1b8 0f00 	cmp.w	r8, #0
 800f9ae:	dd9c      	ble.n	800f8ea <__sflush_r+0x1a>
 800f9b0:	6a21      	ldr	r1, [r4, #32]
 800f9b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f9b4:	4643      	mov	r3, r8
 800f9b6:	463a      	mov	r2, r7
 800f9b8:	4628      	mov	r0, r5
 800f9ba:	47b0      	blx	r6
 800f9bc:	2800      	cmp	r0, #0
 800f9be:	dc06      	bgt.n	800f9ce <__sflush_r+0xfe>
 800f9c0:	89a3      	ldrh	r3, [r4, #12]
 800f9c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9c6:	81a3      	strh	r3, [r4, #12]
 800f9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9cc:	e78e      	b.n	800f8ec <__sflush_r+0x1c>
 800f9ce:	4407      	add	r7, r0
 800f9d0:	eba8 0800 	sub.w	r8, r8, r0
 800f9d4:	e7e9      	b.n	800f9aa <__sflush_r+0xda>
 800f9d6:	bf00      	nop
 800f9d8:	dfbffffe 	.word	0xdfbffffe

0800f9dc <_fflush_r>:
 800f9dc:	b538      	push	{r3, r4, r5, lr}
 800f9de:	690b      	ldr	r3, [r1, #16]
 800f9e0:	4605      	mov	r5, r0
 800f9e2:	460c      	mov	r4, r1
 800f9e4:	b913      	cbnz	r3, 800f9ec <_fflush_r+0x10>
 800f9e6:	2500      	movs	r5, #0
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	bd38      	pop	{r3, r4, r5, pc}
 800f9ec:	b118      	cbz	r0, 800f9f6 <_fflush_r+0x1a>
 800f9ee:	6a03      	ldr	r3, [r0, #32]
 800f9f0:	b90b      	cbnz	r3, 800f9f6 <_fflush_r+0x1a>
 800f9f2:	f7ff f9dd 	bl	800edb0 <__sinit>
 800f9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d0f3      	beq.n	800f9e6 <_fflush_r+0xa>
 800f9fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fa00:	07d0      	lsls	r0, r2, #31
 800fa02:	d404      	bmi.n	800fa0e <_fflush_r+0x32>
 800fa04:	0599      	lsls	r1, r3, #22
 800fa06:	d402      	bmi.n	800fa0e <_fflush_r+0x32>
 800fa08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa0a:	f7ff fb51 	bl	800f0b0 <__retarget_lock_acquire_recursive>
 800fa0e:	4628      	mov	r0, r5
 800fa10:	4621      	mov	r1, r4
 800fa12:	f7ff ff5d 	bl	800f8d0 <__sflush_r>
 800fa16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa18:	07da      	lsls	r2, r3, #31
 800fa1a:	4605      	mov	r5, r0
 800fa1c:	d4e4      	bmi.n	800f9e8 <_fflush_r+0xc>
 800fa1e:	89a3      	ldrh	r3, [r4, #12]
 800fa20:	059b      	lsls	r3, r3, #22
 800fa22:	d4e1      	bmi.n	800f9e8 <_fflush_r+0xc>
 800fa24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa26:	f7ff fb44 	bl	800f0b2 <__retarget_lock_release_recursive>
 800fa2a:	e7dd      	b.n	800f9e8 <_fflush_r+0xc>

0800fa2c <fiprintf>:
 800fa2c:	b40e      	push	{r1, r2, r3}
 800fa2e:	b503      	push	{r0, r1, lr}
 800fa30:	4601      	mov	r1, r0
 800fa32:	ab03      	add	r3, sp, #12
 800fa34:	4805      	ldr	r0, [pc, #20]	; (800fa4c <fiprintf+0x20>)
 800fa36:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa3a:	6800      	ldr	r0, [r0, #0]
 800fa3c:	9301      	str	r3, [sp, #4]
 800fa3e:	f000 f89f 	bl	800fb80 <_vfiprintf_r>
 800fa42:	b002      	add	sp, #8
 800fa44:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa48:	b003      	add	sp, #12
 800fa4a:	4770      	bx	lr
 800fa4c:	20000194 	.word	0x20000194

0800fa50 <memmove>:
 800fa50:	4288      	cmp	r0, r1
 800fa52:	b510      	push	{r4, lr}
 800fa54:	eb01 0402 	add.w	r4, r1, r2
 800fa58:	d902      	bls.n	800fa60 <memmove+0x10>
 800fa5a:	4284      	cmp	r4, r0
 800fa5c:	4623      	mov	r3, r4
 800fa5e:	d807      	bhi.n	800fa70 <memmove+0x20>
 800fa60:	1e43      	subs	r3, r0, #1
 800fa62:	42a1      	cmp	r1, r4
 800fa64:	d008      	beq.n	800fa78 <memmove+0x28>
 800fa66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa6e:	e7f8      	b.n	800fa62 <memmove+0x12>
 800fa70:	4402      	add	r2, r0
 800fa72:	4601      	mov	r1, r0
 800fa74:	428a      	cmp	r2, r1
 800fa76:	d100      	bne.n	800fa7a <memmove+0x2a>
 800fa78:	bd10      	pop	{r4, pc}
 800fa7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fa82:	e7f7      	b.n	800fa74 <memmove+0x24>

0800fa84 <_sbrk_r>:
 800fa84:	b538      	push	{r3, r4, r5, lr}
 800fa86:	4d06      	ldr	r5, [pc, #24]	; (800faa0 <_sbrk_r+0x1c>)
 800fa88:	2300      	movs	r3, #0
 800fa8a:	4604      	mov	r4, r0
 800fa8c:	4608      	mov	r0, r1
 800fa8e:	602b      	str	r3, [r5, #0]
 800fa90:	f7f2 fe02 	bl	8002698 <_sbrk>
 800fa94:	1c43      	adds	r3, r0, #1
 800fa96:	d102      	bne.n	800fa9e <_sbrk_r+0x1a>
 800fa98:	682b      	ldr	r3, [r5, #0]
 800fa9a:	b103      	cbz	r3, 800fa9e <_sbrk_r+0x1a>
 800fa9c:	6023      	str	r3, [r4, #0]
 800fa9e:	bd38      	pop	{r3, r4, r5, pc}
 800faa0:	2000457c 	.word	0x2000457c

0800faa4 <memcpy>:
 800faa4:	440a      	add	r2, r1
 800faa6:	4291      	cmp	r1, r2
 800faa8:	f100 33ff 	add.w	r3, r0, #4294967295
 800faac:	d100      	bne.n	800fab0 <memcpy+0xc>
 800faae:	4770      	bx	lr
 800fab0:	b510      	push	{r4, lr}
 800fab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800faba:	4291      	cmp	r1, r2
 800fabc:	d1f9      	bne.n	800fab2 <memcpy+0xe>
 800fabe:	bd10      	pop	{r4, pc}

0800fac0 <abort>:
 800fac0:	b508      	push	{r3, lr}
 800fac2:	2006      	movs	r0, #6
 800fac4:	f000 fa34 	bl	800ff30 <raise>
 800fac8:	2001      	movs	r0, #1
 800faca:	f7f2 fd6d 	bl	80025a8 <_exit>

0800face <_realloc_r>:
 800face:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fad2:	4680      	mov	r8, r0
 800fad4:	4614      	mov	r4, r2
 800fad6:	460e      	mov	r6, r1
 800fad8:	b921      	cbnz	r1, 800fae4 <_realloc_r+0x16>
 800fada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fade:	4611      	mov	r1, r2
 800fae0:	f7ff bb82 	b.w	800f1e8 <_malloc_r>
 800fae4:	b92a      	cbnz	r2, 800faf2 <_realloc_r+0x24>
 800fae6:	f7ff fb0b 	bl	800f100 <_free_r>
 800faea:	4625      	mov	r5, r4
 800faec:	4628      	mov	r0, r5
 800faee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faf2:	f000 fa39 	bl	800ff68 <_malloc_usable_size_r>
 800faf6:	4284      	cmp	r4, r0
 800faf8:	4607      	mov	r7, r0
 800fafa:	d802      	bhi.n	800fb02 <_realloc_r+0x34>
 800fafc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fb00:	d812      	bhi.n	800fb28 <_realloc_r+0x5a>
 800fb02:	4621      	mov	r1, r4
 800fb04:	4640      	mov	r0, r8
 800fb06:	f7ff fb6f 	bl	800f1e8 <_malloc_r>
 800fb0a:	4605      	mov	r5, r0
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	d0ed      	beq.n	800faec <_realloc_r+0x1e>
 800fb10:	42bc      	cmp	r4, r7
 800fb12:	4622      	mov	r2, r4
 800fb14:	4631      	mov	r1, r6
 800fb16:	bf28      	it	cs
 800fb18:	463a      	movcs	r2, r7
 800fb1a:	f7ff ffc3 	bl	800faa4 <memcpy>
 800fb1e:	4631      	mov	r1, r6
 800fb20:	4640      	mov	r0, r8
 800fb22:	f7ff faed 	bl	800f100 <_free_r>
 800fb26:	e7e1      	b.n	800faec <_realloc_r+0x1e>
 800fb28:	4635      	mov	r5, r6
 800fb2a:	e7df      	b.n	800faec <_realloc_r+0x1e>

0800fb2c <__sfputc_r>:
 800fb2c:	6893      	ldr	r3, [r2, #8]
 800fb2e:	3b01      	subs	r3, #1
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	b410      	push	{r4}
 800fb34:	6093      	str	r3, [r2, #8]
 800fb36:	da08      	bge.n	800fb4a <__sfputc_r+0x1e>
 800fb38:	6994      	ldr	r4, [r2, #24]
 800fb3a:	42a3      	cmp	r3, r4
 800fb3c:	db01      	blt.n	800fb42 <__sfputc_r+0x16>
 800fb3e:	290a      	cmp	r1, #10
 800fb40:	d103      	bne.n	800fb4a <__sfputc_r+0x1e>
 800fb42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb46:	f000 b935 	b.w	800fdb4 <__swbuf_r>
 800fb4a:	6813      	ldr	r3, [r2, #0]
 800fb4c:	1c58      	adds	r0, r3, #1
 800fb4e:	6010      	str	r0, [r2, #0]
 800fb50:	7019      	strb	r1, [r3, #0]
 800fb52:	4608      	mov	r0, r1
 800fb54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb58:	4770      	bx	lr

0800fb5a <__sfputs_r>:
 800fb5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb5c:	4606      	mov	r6, r0
 800fb5e:	460f      	mov	r7, r1
 800fb60:	4614      	mov	r4, r2
 800fb62:	18d5      	adds	r5, r2, r3
 800fb64:	42ac      	cmp	r4, r5
 800fb66:	d101      	bne.n	800fb6c <__sfputs_r+0x12>
 800fb68:	2000      	movs	r0, #0
 800fb6a:	e007      	b.n	800fb7c <__sfputs_r+0x22>
 800fb6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb70:	463a      	mov	r2, r7
 800fb72:	4630      	mov	r0, r6
 800fb74:	f7ff ffda 	bl	800fb2c <__sfputc_r>
 800fb78:	1c43      	adds	r3, r0, #1
 800fb7a:	d1f3      	bne.n	800fb64 <__sfputs_r+0xa>
 800fb7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb80 <_vfiprintf_r>:
 800fb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb84:	460d      	mov	r5, r1
 800fb86:	b09d      	sub	sp, #116	; 0x74
 800fb88:	4614      	mov	r4, r2
 800fb8a:	4698      	mov	r8, r3
 800fb8c:	4606      	mov	r6, r0
 800fb8e:	b118      	cbz	r0, 800fb98 <_vfiprintf_r+0x18>
 800fb90:	6a03      	ldr	r3, [r0, #32]
 800fb92:	b90b      	cbnz	r3, 800fb98 <_vfiprintf_r+0x18>
 800fb94:	f7ff f90c 	bl	800edb0 <__sinit>
 800fb98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb9a:	07d9      	lsls	r1, r3, #31
 800fb9c:	d405      	bmi.n	800fbaa <_vfiprintf_r+0x2a>
 800fb9e:	89ab      	ldrh	r3, [r5, #12]
 800fba0:	059a      	lsls	r2, r3, #22
 800fba2:	d402      	bmi.n	800fbaa <_vfiprintf_r+0x2a>
 800fba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fba6:	f7ff fa83 	bl	800f0b0 <__retarget_lock_acquire_recursive>
 800fbaa:	89ab      	ldrh	r3, [r5, #12]
 800fbac:	071b      	lsls	r3, r3, #28
 800fbae:	d501      	bpl.n	800fbb4 <_vfiprintf_r+0x34>
 800fbb0:	692b      	ldr	r3, [r5, #16]
 800fbb2:	b99b      	cbnz	r3, 800fbdc <_vfiprintf_r+0x5c>
 800fbb4:	4629      	mov	r1, r5
 800fbb6:	4630      	mov	r0, r6
 800fbb8:	f000 f93a 	bl	800fe30 <__swsetup_r>
 800fbbc:	b170      	cbz	r0, 800fbdc <_vfiprintf_r+0x5c>
 800fbbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fbc0:	07dc      	lsls	r4, r3, #31
 800fbc2:	d504      	bpl.n	800fbce <_vfiprintf_r+0x4e>
 800fbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800fbc8:	b01d      	add	sp, #116	; 0x74
 800fbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbce:	89ab      	ldrh	r3, [r5, #12]
 800fbd0:	0598      	lsls	r0, r3, #22
 800fbd2:	d4f7      	bmi.n	800fbc4 <_vfiprintf_r+0x44>
 800fbd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbd6:	f7ff fa6c 	bl	800f0b2 <__retarget_lock_release_recursive>
 800fbda:	e7f3      	b.n	800fbc4 <_vfiprintf_r+0x44>
 800fbdc:	2300      	movs	r3, #0
 800fbde:	9309      	str	r3, [sp, #36]	; 0x24
 800fbe0:	2320      	movs	r3, #32
 800fbe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fbe6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbea:	2330      	movs	r3, #48	; 0x30
 800fbec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fda0 <_vfiprintf_r+0x220>
 800fbf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fbf4:	f04f 0901 	mov.w	r9, #1
 800fbf8:	4623      	mov	r3, r4
 800fbfa:	469a      	mov	sl, r3
 800fbfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc00:	b10a      	cbz	r2, 800fc06 <_vfiprintf_r+0x86>
 800fc02:	2a25      	cmp	r2, #37	; 0x25
 800fc04:	d1f9      	bne.n	800fbfa <_vfiprintf_r+0x7a>
 800fc06:	ebba 0b04 	subs.w	fp, sl, r4
 800fc0a:	d00b      	beq.n	800fc24 <_vfiprintf_r+0xa4>
 800fc0c:	465b      	mov	r3, fp
 800fc0e:	4622      	mov	r2, r4
 800fc10:	4629      	mov	r1, r5
 800fc12:	4630      	mov	r0, r6
 800fc14:	f7ff ffa1 	bl	800fb5a <__sfputs_r>
 800fc18:	3001      	adds	r0, #1
 800fc1a:	f000 80a9 	beq.w	800fd70 <_vfiprintf_r+0x1f0>
 800fc1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc20:	445a      	add	r2, fp
 800fc22:	9209      	str	r2, [sp, #36]	; 0x24
 800fc24:	f89a 3000 	ldrb.w	r3, [sl]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	f000 80a1 	beq.w	800fd70 <_vfiprintf_r+0x1f0>
 800fc2e:	2300      	movs	r3, #0
 800fc30:	f04f 32ff 	mov.w	r2, #4294967295
 800fc34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc38:	f10a 0a01 	add.w	sl, sl, #1
 800fc3c:	9304      	str	r3, [sp, #16]
 800fc3e:	9307      	str	r3, [sp, #28]
 800fc40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc44:	931a      	str	r3, [sp, #104]	; 0x68
 800fc46:	4654      	mov	r4, sl
 800fc48:	2205      	movs	r2, #5
 800fc4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc4e:	4854      	ldr	r0, [pc, #336]	; (800fda0 <_vfiprintf_r+0x220>)
 800fc50:	f7f0 fade 	bl	8000210 <memchr>
 800fc54:	9a04      	ldr	r2, [sp, #16]
 800fc56:	b9d8      	cbnz	r0, 800fc90 <_vfiprintf_r+0x110>
 800fc58:	06d1      	lsls	r1, r2, #27
 800fc5a:	bf44      	itt	mi
 800fc5c:	2320      	movmi	r3, #32
 800fc5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc62:	0713      	lsls	r3, r2, #28
 800fc64:	bf44      	itt	mi
 800fc66:	232b      	movmi	r3, #43	; 0x2b
 800fc68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc6c:	f89a 3000 	ldrb.w	r3, [sl]
 800fc70:	2b2a      	cmp	r3, #42	; 0x2a
 800fc72:	d015      	beq.n	800fca0 <_vfiprintf_r+0x120>
 800fc74:	9a07      	ldr	r2, [sp, #28]
 800fc76:	4654      	mov	r4, sl
 800fc78:	2000      	movs	r0, #0
 800fc7a:	f04f 0c0a 	mov.w	ip, #10
 800fc7e:	4621      	mov	r1, r4
 800fc80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc84:	3b30      	subs	r3, #48	; 0x30
 800fc86:	2b09      	cmp	r3, #9
 800fc88:	d94d      	bls.n	800fd26 <_vfiprintf_r+0x1a6>
 800fc8a:	b1b0      	cbz	r0, 800fcba <_vfiprintf_r+0x13a>
 800fc8c:	9207      	str	r2, [sp, #28]
 800fc8e:	e014      	b.n	800fcba <_vfiprintf_r+0x13a>
 800fc90:	eba0 0308 	sub.w	r3, r0, r8
 800fc94:	fa09 f303 	lsl.w	r3, r9, r3
 800fc98:	4313      	orrs	r3, r2
 800fc9a:	9304      	str	r3, [sp, #16]
 800fc9c:	46a2      	mov	sl, r4
 800fc9e:	e7d2      	b.n	800fc46 <_vfiprintf_r+0xc6>
 800fca0:	9b03      	ldr	r3, [sp, #12]
 800fca2:	1d19      	adds	r1, r3, #4
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	9103      	str	r1, [sp, #12]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	bfbb      	ittet	lt
 800fcac:	425b      	neglt	r3, r3
 800fcae:	f042 0202 	orrlt.w	r2, r2, #2
 800fcb2:	9307      	strge	r3, [sp, #28]
 800fcb4:	9307      	strlt	r3, [sp, #28]
 800fcb6:	bfb8      	it	lt
 800fcb8:	9204      	strlt	r2, [sp, #16]
 800fcba:	7823      	ldrb	r3, [r4, #0]
 800fcbc:	2b2e      	cmp	r3, #46	; 0x2e
 800fcbe:	d10c      	bne.n	800fcda <_vfiprintf_r+0x15a>
 800fcc0:	7863      	ldrb	r3, [r4, #1]
 800fcc2:	2b2a      	cmp	r3, #42	; 0x2a
 800fcc4:	d134      	bne.n	800fd30 <_vfiprintf_r+0x1b0>
 800fcc6:	9b03      	ldr	r3, [sp, #12]
 800fcc8:	1d1a      	adds	r2, r3, #4
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	9203      	str	r2, [sp, #12]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	bfb8      	it	lt
 800fcd2:	f04f 33ff 	movlt.w	r3, #4294967295
 800fcd6:	3402      	adds	r4, #2
 800fcd8:	9305      	str	r3, [sp, #20]
 800fcda:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fdb0 <_vfiprintf_r+0x230>
 800fcde:	7821      	ldrb	r1, [r4, #0]
 800fce0:	2203      	movs	r2, #3
 800fce2:	4650      	mov	r0, sl
 800fce4:	f7f0 fa94 	bl	8000210 <memchr>
 800fce8:	b138      	cbz	r0, 800fcfa <_vfiprintf_r+0x17a>
 800fcea:	9b04      	ldr	r3, [sp, #16]
 800fcec:	eba0 000a 	sub.w	r0, r0, sl
 800fcf0:	2240      	movs	r2, #64	; 0x40
 800fcf2:	4082      	lsls	r2, r0
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	3401      	adds	r4, #1
 800fcf8:	9304      	str	r3, [sp, #16]
 800fcfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcfe:	4829      	ldr	r0, [pc, #164]	; (800fda4 <_vfiprintf_r+0x224>)
 800fd00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd04:	2206      	movs	r2, #6
 800fd06:	f7f0 fa83 	bl	8000210 <memchr>
 800fd0a:	2800      	cmp	r0, #0
 800fd0c:	d03f      	beq.n	800fd8e <_vfiprintf_r+0x20e>
 800fd0e:	4b26      	ldr	r3, [pc, #152]	; (800fda8 <_vfiprintf_r+0x228>)
 800fd10:	bb1b      	cbnz	r3, 800fd5a <_vfiprintf_r+0x1da>
 800fd12:	9b03      	ldr	r3, [sp, #12]
 800fd14:	3307      	adds	r3, #7
 800fd16:	f023 0307 	bic.w	r3, r3, #7
 800fd1a:	3308      	adds	r3, #8
 800fd1c:	9303      	str	r3, [sp, #12]
 800fd1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd20:	443b      	add	r3, r7
 800fd22:	9309      	str	r3, [sp, #36]	; 0x24
 800fd24:	e768      	b.n	800fbf8 <_vfiprintf_r+0x78>
 800fd26:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd2a:	460c      	mov	r4, r1
 800fd2c:	2001      	movs	r0, #1
 800fd2e:	e7a6      	b.n	800fc7e <_vfiprintf_r+0xfe>
 800fd30:	2300      	movs	r3, #0
 800fd32:	3401      	adds	r4, #1
 800fd34:	9305      	str	r3, [sp, #20]
 800fd36:	4619      	mov	r1, r3
 800fd38:	f04f 0c0a 	mov.w	ip, #10
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd42:	3a30      	subs	r2, #48	; 0x30
 800fd44:	2a09      	cmp	r2, #9
 800fd46:	d903      	bls.n	800fd50 <_vfiprintf_r+0x1d0>
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d0c6      	beq.n	800fcda <_vfiprintf_r+0x15a>
 800fd4c:	9105      	str	r1, [sp, #20]
 800fd4e:	e7c4      	b.n	800fcda <_vfiprintf_r+0x15a>
 800fd50:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd54:	4604      	mov	r4, r0
 800fd56:	2301      	movs	r3, #1
 800fd58:	e7f0      	b.n	800fd3c <_vfiprintf_r+0x1bc>
 800fd5a:	ab03      	add	r3, sp, #12
 800fd5c:	9300      	str	r3, [sp, #0]
 800fd5e:	462a      	mov	r2, r5
 800fd60:	4b12      	ldr	r3, [pc, #72]	; (800fdac <_vfiprintf_r+0x22c>)
 800fd62:	a904      	add	r1, sp, #16
 800fd64:	4630      	mov	r0, r6
 800fd66:	f3af 8000 	nop.w
 800fd6a:	4607      	mov	r7, r0
 800fd6c:	1c78      	adds	r0, r7, #1
 800fd6e:	d1d6      	bne.n	800fd1e <_vfiprintf_r+0x19e>
 800fd70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd72:	07d9      	lsls	r1, r3, #31
 800fd74:	d405      	bmi.n	800fd82 <_vfiprintf_r+0x202>
 800fd76:	89ab      	ldrh	r3, [r5, #12]
 800fd78:	059a      	lsls	r2, r3, #22
 800fd7a:	d402      	bmi.n	800fd82 <_vfiprintf_r+0x202>
 800fd7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd7e:	f7ff f998 	bl	800f0b2 <__retarget_lock_release_recursive>
 800fd82:	89ab      	ldrh	r3, [r5, #12]
 800fd84:	065b      	lsls	r3, r3, #25
 800fd86:	f53f af1d 	bmi.w	800fbc4 <_vfiprintf_r+0x44>
 800fd8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd8c:	e71c      	b.n	800fbc8 <_vfiprintf_r+0x48>
 800fd8e:	ab03      	add	r3, sp, #12
 800fd90:	9300      	str	r3, [sp, #0]
 800fd92:	462a      	mov	r2, r5
 800fd94:	4b05      	ldr	r3, [pc, #20]	; (800fdac <_vfiprintf_r+0x22c>)
 800fd96:	a904      	add	r1, sp, #16
 800fd98:	4630      	mov	r0, r6
 800fd9a:	f7ff fc77 	bl	800f68c <_printf_i>
 800fd9e:	e7e4      	b.n	800fd6a <_vfiprintf_r+0x1ea>
 800fda0:	080108a2 	.word	0x080108a2
 800fda4:	080108ac 	.word	0x080108ac
 800fda8:	00000000 	.word	0x00000000
 800fdac:	0800fb5b 	.word	0x0800fb5b
 800fdb0:	080108a8 	.word	0x080108a8

0800fdb4 <__swbuf_r>:
 800fdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdb6:	460e      	mov	r6, r1
 800fdb8:	4614      	mov	r4, r2
 800fdba:	4605      	mov	r5, r0
 800fdbc:	b118      	cbz	r0, 800fdc6 <__swbuf_r+0x12>
 800fdbe:	6a03      	ldr	r3, [r0, #32]
 800fdc0:	b90b      	cbnz	r3, 800fdc6 <__swbuf_r+0x12>
 800fdc2:	f7fe fff5 	bl	800edb0 <__sinit>
 800fdc6:	69a3      	ldr	r3, [r4, #24]
 800fdc8:	60a3      	str	r3, [r4, #8]
 800fdca:	89a3      	ldrh	r3, [r4, #12]
 800fdcc:	071a      	lsls	r2, r3, #28
 800fdce:	d525      	bpl.n	800fe1c <__swbuf_r+0x68>
 800fdd0:	6923      	ldr	r3, [r4, #16]
 800fdd2:	b31b      	cbz	r3, 800fe1c <__swbuf_r+0x68>
 800fdd4:	6823      	ldr	r3, [r4, #0]
 800fdd6:	6922      	ldr	r2, [r4, #16]
 800fdd8:	1a98      	subs	r0, r3, r2
 800fdda:	6963      	ldr	r3, [r4, #20]
 800fddc:	b2f6      	uxtb	r6, r6
 800fdde:	4283      	cmp	r3, r0
 800fde0:	4637      	mov	r7, r6
 800fde2:	dc04      	bgt.n	800fdee <__swbuf_r+0x3a>
 800fde4:	4621      	mov	r1, r4
 800fde6:	4628      	mov	r0, r5
 800fde8:	f7ff fdf8 	bl	800f9dc <_fflush_r>
 800fdec:	b9e0      	cbnz	r0, 800fe28 <__swbuf_r+0x74>
 800fdee:	68a3      	ldr	r3, [r4, #8]
 800fdf0:	3b01      	subs	r3, #1
 800fdf2:	60a3      	str	r3, [r4, #8]
 800fdf4:	6823      	ldr	r3, [r4, #0]
 800fdf6:	1c5a      	adds	r2, r3, #1
 800fdf8:	6022      	str	r2, [r4, #0]
 800fdfa:	701e      	strb	r6, [r3, #0]
 800fdfc:	6962      	ldr	r2, [r4, #20]
 800fdfe:	1c43      	adds	r3, r0, #1
 800fe00:	429a      	cmp	r2, r3
 800fe02:	d004      	beq.n	800fe0e <__swbuf_r+0x5a>
 800fe04:	89a3      	ldrh	r3, [r4, #12]
 800fe06:	07db      	lsls	r3, r3, #31
 800fe08:	d506      	bpl.n	800fe18 <__swbuf_r+0x64>
 800fe0a:	2e0a      	cmp	r6, #10
 800fe0c:	d104      	bne.n	800fe18 <__swbuf_r+0x64>
 800fe0e:	4621      	mov	r1, r4
 800fe10:	4628      	mov	r0, r5
 800fe12:	f7ff fde3 	bl	800f9dc <_fflush_r>
 800fe16:	b938      	cbnz	r0, 800fe28 <__swbuf_r+0x74>
 800fe18:	4638      	mov	r0, r7
 800fe1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe1c:	4621      	mov	r1, r4
 800fe1e:	4628      	mov	r0, r5
 800fe20:	f000 f806 	bl	800fe30 <__swsetup_r>
 800fe24:	2800      	cmp	r0, #0
 800fe26:	d0d5      	beq.n	800fdd4 <__swbuf_r+0x20>
 800fe28:	f04f 37ff 	mov.w	r7, #4294967295
 800fe2c:	e7f4      	b.n	800fe18 <__swbuf_r+0x64>
	...

0800fe30 <__swsetup_r>:
 800fe30:	b538      	push	{r3, r4, r5, lr}
 800fe32:	4b2a      	ldr	r3, [pc, #168]	; (800fedc <__swsetup_r+0xac>)
 800fe34:	4605      	mov	r5, r0
 800fe36:	6818      	ldr	r0, [r3, #0]
 800fe38:	460c      	mov	r4, r1
 800fe3a:	b118      	cbz	r0, 800fe44 <__swsetup_r+0x14>
 800fe3c:	6a03      	ldr	r3, [r0, #32]
 800fe3e:	b90b      	cbnz	r3, 800fe44 <__swsetup_r+0x14>
 800fe40:	f7fe ffb6 	bl	800edb0 <__sinit>
 800fe44:	89a3      	ldrh	r3, [r4, #12]
 800fe46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fe4a:	0718      	lsls	r0, r3, #28
 800fe4c:	d422      	bmi.n	800fe94 <__swsetup_r+0x64>
 800fe4e:	06d9      	lsls	r1, r3, #27
 800fe50:	d407      	bmi.n	800fe62 <__swsetup_r+0x32>
 800fe52:	2309      	movs	r3, #9
 800fe54:	602b      	str	r3, [r5, #0]
 800fe56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fe5a:	81a3      	strh	r3, [r4, #12]
 800fe5c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe60:	e034      	b.n	800fecc <__swsetup_r+0x9c>
 800fe62:	0758      	lsls	r0, r3, #29
 800fe64:	d512      	bpl.n	800fe8c <__swsetup_r+0x5c>
 800fe66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe68:	b141      	cbz	r1, 800fe7c <__swsetup_r+0x4c>
 800fe6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe6e:	4299      	cmp	r1, r3
 800fe70:	d002      	beq.n	800fe78 <__swsetup_r+0x48>
 800fe72:	4628      	mov	r0, r5
 800fe74:	f7ff f944 	bl	800f100 <_free_r>
 800fe78:	2300      	movs	r3, #0
 800fe7a:	6363      	str	r3, [r4, #52]	; 0x34
 800fe7c:	89a3      	ldrh	r3, [r4, #12]
 800fe7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fe82:	81a3      	strh	r3, [r4, #12]
 800fe84:	2300      	movs	r3, #0
 800fe86:	6063      	str	r3, [r4, #4]
 800fe88:	6923      	ldr	r3, [r4, #16]
 800fe8a:	6023      	str	r3, [r4, #0]
 800fe8c:	89a3      	ldrh	r3, [r4, #12]
 800fe8e:	f043 0308 	orr.w	r3, r3, #8
 800fe92:	81a3      	strh	r3, [r4, #12]
 800fe94:	6923      	ldr	r3, [r4, #16]
 800fe96:	b94b      	cbnz	r3, 800feac <__swsetup_r+0x7c>
 800fe98:	89a3      	ldrh	r3, [r4, #12]
 800fe9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fe9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fea2:	d003      	beq.n	800feac <__swsetup_r+0x7c>
 800fea4:	4621      	mov	r1, r4
 800fea6:	4628      	mov	r0, r5
 800fea8:	f000 f88c 	bl	800ffc4 <__smakebuf_r>
 800feac:	89a0      	ldrh	r0, [r4, #12]
 800feae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800feb2:	f010 0301 	ands.w	r3, r0, #1
 800feb6:	d00a      	beq.n	800fece <__swsetup_r+0x9e>
 800feb8:	2300      	movs	r3, #0
 800feba:	60a3      	str	r3, [r4, #8]
 800febc:	6963      	ldr	r3, [r4, #20]
 800febe:	425b      	negs	r3, r3
 800fec0:	61a3      	str	r3, [r4, #24]
 800fec2:	6923      	ldr	r3, [r4, #16]
 800fec4:	b943      	cbnz	r3, 800fed8 <__swsetup_r+0xa8>
 800fec6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800feca:	d1c4      	bne.n	800fe56 <__swsetup_r+0x26>
 800fecc:	bd38      	pop	{r3, r4, r5, pc}
 800fece:	0781      	lsls	r1, r0, #30
 800fed0:	bf58      	it	pl
 800fed2:	6963      	ldrpl	r3, [r4, #20]
 800fed4:	60a3      	str	r3, [r4, #8]
 800fed6:	e7f4      	b.n	800fec2 <__swsetup_r+0x92>
 800fed8:	2000      	movs	r0, #0
 800feda:	e7f7      	b.n	800fecc <__swsetup_r+0x9c>
 800fedc:	20000194 	.word	0x20000194

0800fee0 <_raise_r>:
 800fee0:	291f      	cmp	r1, #31
 800fee2:	b538      	push	{r3, r4, r5, lr}
 800fee4:	4604      	mov	r4, r0
 800fee6:	460d      	mov	r5, r1
 800fee8:	d904      	bls.n	800fef4 <_raise_r+0x14>
 800feea:	2316      	movs	r3, #22
 800feec:	6003      	str	r3, [r0, #0]
 800feee:	f04f 30ff 	mov.w	r0, #4294967295
 800fef2:	bd38      	pop	{r3, r4, r5, pc}
 800fef4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fef6:	b112      	cbz	r2, 800fefe <_raise_r+0x1e>
 800fef8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fefc:	b94b      	cbnz	r3, 800ff12 <_raise_r+0x32>
 800fefe:	4620      	mov	r0, r4
 800ff00:	f000 f830 	bl	800ff64 <_getpid_r>
 800ff04:	462a      	mov	r2, r5
 800ff06:	4601      	mov	r1, r0
 800ff08:	4620      	mov	r0, r4
 800ff0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff0e:	f000 b817 	b.w	800ff40 <_kill_r>
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	d00a      	beq.n	800ff2c <_raise_r+0x4c>
 800ff16:	1c59      	adds	r1, r3, #1
 800ff18:	d103      	bne.n	800ff22 <_raise_r+0x42>
 800ff1a:	2316      	movs	r3, #22
 800ff1c:	6003      	str	r3, [r0, #0]
 800ff1e:	2001      	movs	r0, #1
 800ff20:	e7e7      	b.n	800fef2 <_raise_r+0x12>
 800ff22:	2400      	movs	r4, #0
 800ff24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff28:	4628      	mov	r0, r5
 800ff2a:	4798      	blx	r3
 800ff2c:	2000      	movs	r0, #0
 800ff2e:	e7e0      	b.n	800fef2 <_raise_r+0x12>

0800ff30 <raise>:
 800ff30:	4b02      	ldr	r3, [pc, #8]	; (800ff3c <raise+0xc>)
 800ff32:	4601      	mov	r1, r0
 800ff34:	6818      	ldr	r0, [r3, #0]
 800ff36:	f7ff bfd3 	b.w	800fee0 <_raise_r>
 800ff3a:	bf00      	nop
 800ff3c:	20000194 	.word	0x20000194

0800ff40 <_kill_r>:
 800ff40:	b538      	push	{r3, r4, r5, lr}
 800ff42:	4d07      	ldr	r5, [pc, #28]	; (800ff60 <_kill_r+0x20>)
 800ff44:	2300      	movs	r3, #0
 800ff46:	4604      	mov	r4, r0
 800ff48:	4608      	mov	r0, r1
 800ff4a:	4611      	mov	r1, r2
 800ff4c:	602b      	str	r3, [r5, #0]
 800ff4e:	f7f2 fb1b 	bl	8002588 <_kill>
 800ff52:	1c43      	adds	r3, r0, #1
 800ff54:	d102      	bne.n	800ff5c <_kill_r+0x1c>
 800ff56:	682b      	ldr	r3, [r5, #0]
 800ff58:	b103      	cbz	r3, 800ff5c <_kill_r+0x1c>
 800ff5a:	6023      	str	r3, [r4, #0]
 800ff5c:	bd38      	pop	{r3, r4, r5, pc}
 800ff5e:	bf00      	nop
 800ff60:	2000457c 	.word	0x2000457c

0800ff64 <_getpid_r>:
 800ff64:	f7f2 bb08 	b.w	8002578 <_getpid>

0800ff68 <_malloc_usable_size_r>:
 800ff68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff6c:	1f18      	subs	r0, r3, #4
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	bfbc      	itt	lt
 800ff72:	580b      	ldrlt	r3, [r1, r0]
 800ff74:	18c0      	addlt	r0, r0, r3
 800ff76:	4770      	bx	lr

0800ff78 <__swhatbuf_r>:
 800ff78:	b570      	push	{r4, r5, r6, lr}
 800ff7a:	460c      	mov	r4, r1
 800ff7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff80:	2900      	cmp	r1, #0
 800ff82:	b096      	sub	sp, #88	; 0x58
 800ff84:	4615      	mov	r5, r2
 800ff86:	461e      	mov	r6, r3
 800ff88:	da0d      	bge.n	800ffa6 <__swhatbuf_r+0x2e>
 800ff8a:	89a3      	ldrh	r3, [r4, #12]
 800ff8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ff90:	f04f 0100 	mov.w	r1, #0
 800ff94:	bf0c      	ite	eq
 800ff96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ff9a:	2340      	movne	r3, #64	; 0x40
 800ff9c:	2000      	movs	r0, #0
 800ff9e:	6031      	str	r1, [r6, #0]
 800ffa0:	602b      	str	r3, [r5, #0]
 800ffa2:	b016      	add	sp, #88	; 0x58
 800ffa4:	bd70      	pop	{r4, r5, r6, pc}
 800ffa6:	466a      	mov	r2, sp
 800ffa8:	f000 f848 	bl	801003c <_fstat_r>
 800ffac:	2800      	cmp	r0, #0
 800ffae:	dbec      	blt.n	800ff8a <__swhatbuf_r+0x12>
 800ffb0:	9901      	ldr	r1, [sp, #4]
 800ffb2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ffb6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ffba:	4259      	negs	r1, r3
 800ffbc:	4159      	adcs	r1, r3
 800ffbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ffc2:	e7eb      	b.n	800ff9c <__swhatbuf_r+0x24>

0800ffc4 <__smakebuf_r>:
 800ffc4:	898b      	ldrh	r3, [r1, #12]
 800ffc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ffc8:	079d      	lsls	r5, r3, #30
 800ffca:	4606      	mov	r6, r0
 800ffcc:	460c      	mov	r4, r1
 800ffce:	d507      	bpl.n	800ffe0 <__smakebuf_r+0x1c>
 800ffd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ffd4:	6023      	str	r3, [r4, #0]
 800ffd6:	6123      	str	r3, [r4, #16]
 800ffd8:	2301      	movs	r3, #1
 800ffda:	6163      	str	r3, [r4, #20]
 800ffdc:	b002      	add	sp, #8
 800ffde:	bd70      	pop	{r4, r5, r6, pc}
 800ffe0:	ab01      	add	r3, sp, #4
 800ffe2:	466a      	mov	r2, sp
 800ffe4:	f7ff ffc8 	bl	800ff78 <__swhatbuf_r>
 800ffe8:	9900      	ldr	r1, [sp, #0]
 800ffea:	4605      	mov	r5, r0
 800ffec:	4630      	mov	r0, r6
 800ffee:	f7ff f8fb 	bl	800f1e8 <_malloc_r>
 800fff2:	b948      	cbnz	r0, 8010008 <__smakebuf_r+0x44>
 800fff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fff8:	059a      	lsls	r2, r3, #22
 800fffa:	d4ef      	bmi.n	800ffdc <__smakebuf_r+0x18>
 800fffc:	f023 0303 	bic.w	r3, r3, #3
 8010000:	f043 0302 	orr.w	r3, r3, #2
 8010004:	81a3      	strh	r3, [r4, #12]
 8010006:	e7e3      	b.n	800ffd0 <__smakebuf_r+0xc>
 8010008:	89a3      	ldrh	r3, [r4, #12]
 801000a:	6020      	str	r0, [r4, #0]
 801000c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010010:	81a3      	strh	r3, [r4, #12]
 8010012:	9b00      	ldr	r3, [sp, #0]
 8010014:	6163      	str	r3, [r4, #20]
 8010016:	9b01      	ldr	r3, [sp, #4]
 8010018:	6120      	str	r0, [r4, #16]
 801001a:	b15b      	cbz	r3, 8010034 <__smakebuf_r+0x70>
 801001c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010020:	4630      	mov	r0, r6
 8010022:	f000 f81d 	bl	8010060 <_isatty_r>
 8010026:	b128      	cbz	r0, 8010034 <__smakebuf_r+0x70>
 8010028:	89a3      	ldrh	r3, [r4, #12]
 801002a:	f023 0303 	bic.w	r3, r3, #3
 801002e:	f043 0301 	orr.w	r3, r3, #1
 8010032:	81a3      	strh	r3, [r4, #12]
 8010034:	89a3      	ldrh	r3, [r4, #12]
 8010036:	431d      	orrs	r5, r3
 8010038:	81a5      	strh	r5, [r4, #12]
 801003a:	e7cf      	b.n	800ffdc <__smakebuf_r+0x18>

0801003c <_fstat_r>:
 801003c:	b538      	push	{r3, r4, r5, lr}
 801003e:	4d07      	ldr	r5, [pc, #28]	; (801005c <_fstat_r+0x20>)
 8010040:	2300      	movs	r3, #0
 8010042:	4604      	mov	r4, r0
 8010044:	4608      	mov	r0, r1
 8010046:	4611      	mov	r1, r2
 8010048:	602b      	str	r3, [r5, #0]
 801004a:	f7f2 fafc 	bl	8002646 <_fstat>
 801004e:	1c43      	adds	r3, r0, #1
 8010050:	d102      	bne.n	8010058 <_fstat_r+0x1c>
 8010052:	682b      	ldr	r3, [r5, #0]
 8010054:	b103      	cbz	r3, 8010058 <_fstat_r+0x1c>
 8010056:	6023      	str	r3, [r4, #0]
 8010058:	bd38      	pop	{r3, r4, r5, pc}
 801005a:	bf00      	nop
 801005c:	2000457c 	.word	0x2000457c

08010060 <_isatty_r>:
 8010060:	b538      	push	{r3, r4, r5, lr}
 8010062:	4d06      	ldr	r5, [pc, #24]	; (801007c <_isatty_r+0x1c>)
 8010064:	2300      	movs	r3, #0
 8010066:	4604      	mov	r4, r0
 8010068:	4608      	mov	r0, r1
 801006a:	602b      	str	r3, [r5, #0]
 801006c:	f7f2 fafb 	bl	8002666 <_isatty>
 8010070:	1c43      	adds	r3, r0, #1
 8010072:	d102      	bne.n	801007a <_isatty_r+0x1a>
 8010074:	682b      	ldr	r3, [r5, #0]
 8010076:	b103      	cbz	r3, 801007a <_isatty_r+0x1a>
 8010078:	6023      	str	r3, [r4, #0]
 801007a:	bd38      	pop	{r3, r4, r5, pc}
 801007c:	2000457c 	.word	0x2000457c

08010080 <_init>:
 8010080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010082:	bf00      	nop
 8010084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010086:	bc08      	pop	{r3}
 8010088:	469e      	mov	lr, r3
 801008a:	4770      	bx	lr

0801008c <_fini>:
 801008c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801008e:	bf00      	nop
 8010090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010092:	bc08      	pop	{r3}
 8010094:	469e      	mov	lr, r3
 8010096:	4770      	bx	lr
