
F411-Tepelco-W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  080100f4  080100f4  000200f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a5c  08010a5c  000301b8  2**0
                  CONTENTS
  4 .ARM          00000008  08010a5c  08010a5c  00020a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a64  08010a64  000301b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a64  08010a64  00020a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a68  08010a68  00020a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  08010a6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043f4  200001b8  08010c24  000301b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045ac  08010c24  000345ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d7a  00000000  00000000  0003022b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cef  00000000  00000000  00044fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001120  00000000  00000000  00047c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de7  00000000  00000000  00048db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018521  00000000  00000000  00049b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017518  00000000  00000000  000620c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009366c  00000000  00000000  000795d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005430  00000000  00000000  0010cc44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00112074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001b8 	.word	0x200001b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080100dc 	.word	0x080100dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001bc 	.word	0x200001bc
 80001dc:	080100dc 	.word	0x080100dc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b08b      	sub	sp, #44	; 0x2c
 8000698:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5500 Environment-------------------------//
	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069a:	4bcf      	ldr	r3, [pc, #828]	; (80009d8 <main+0x344>)
 800069c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a0:	22c0      	movs	r2, #192	; 0xc0
 80006a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.GAR[1]=168;
 80006a6:	4bcc      	ldr	r3, [pc, #816]	; (80009d8 <main+0x344>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	22a8      	movs	r2, #168	; 0xa8
 80006ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.GAR[2]=0;
 80006b2:	4bc9      	ldr	r3, [pc, #804]	; (80009d8 <main+0x344>)
 80006b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.GAR[3]=1;
 80006be:	4bc6      	ldr	r3, [pc, #792]	; (80009d8 <main+0x344>)
 80006c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c4:	2201      	movs	r2, #1
 80006c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006ca:	4bc3      	ldr	r3, [pc, #780]	; (80009d8 <main+0x344>)
 80006cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d0:	22ff      	movs	r2, #255	; 0xff
 80006d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SUBR[1]=255;
 80006d6:	4bc0      	ldr	r3, [pc, #768]	; (80009d8 <main+0x344>)
 80006d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006dc:	22ff      	movs	r2, #255	; 0xff
 80006de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		ETH.SUBR[2]=255;
 80006e2:	4bbd      	ldr	r3, [pc, #756]	; (80009d8 <main+0x344>)
 80006e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e8:	22ff      	movs	r2, #255	; 0xff
 80006ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SUBR[3]=0;
 80006ee:	4bba      	ldr	r3, [pc, #744]	; (80009d8 <main+0x344>)
 80006f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006fa:	4bb7      	ldr	r3, [pc, #732]	; (80009d8 <main+0x344>)
 80006fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000700:	2200      	movs	r2, #0
 8000702:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SHAR[1]=0x08;
 8000706:	4bb4      	ldr	r3, [pc, #720]	; (80009d8 <main+0x344>)
 8000708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800070c:	2208      	movs	r2, #8
 800070e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		ETH.SHAR[2]=0xDC;
 8000712:	4bb1      	ldr	r3, [pc, #708]	; (80009d8 <main+0x344>)
 8000714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000718:	22dc      	movs	r2, #220	; 0xdc
 800071a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		ETH.SHAR[3]=0x00;
 800071e:	4bae      	ldr	r3, [pc, #696]	; (80009d8 <main+0x344>)
 8000720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000724:	2200      	movs	r2, #0
 8000726:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		ETH.SHAR[4]=0xC0;
 800072a:	4bab      	ldr	r3, [pc, #684]	; (80009d8 <main+0x344>)
 800072c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000730:	22c0      	movs	r2, #192	; 0xc0
 8000732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		ETH.SHAR[5]=0x03;
 8000736:	4ba8      	ldr	r3, [pc, #672]	; (80009d8 <main+0x344>)
 8000738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800073c:	2203      	movs	r2, #3
 800073e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 8000742:	4ba5      	ldr	r3, [pc, #660]	; (80009d8 <main+0x344>)
 8000744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000748:	22c0      	movs	r2, #192	; 0xc0
 800074a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		ETH.SIPR[1]=168;
 800074e:	4ba2      	ldr	r3, [pc, #648]	; (80009d8 <main+0x344>)
 8000750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000754:	22a8      	movs	r2, #168	; 0xa8
 8000756:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		ETH.SIPR[2]=0;
 800075a:	4b9f      	ldr	r3, [pc, #636]	; (80009d8 <main+0x344>)
 800075c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		ETH.SIPR[3]=34,//ETH.SIPR[3]=34,
 8000766:	4b9c      	ldr	r3, [pc, #624]	; (80009d8 <main+0x344>)
 8000768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800076c:	2222      	movs	r2, #34	; 0x22
 800076e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	//  Socket RX memory
		ETH.RMSR=0x55;
 8000772:	4b99      	ldr	r3, [pc, #612]	; (80009d8 <main+0x344>)
 8000774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000778:	2255      	movs	r2, #85	; 0x55
 800077a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	//  Socket TX memory
		ETH.TMSR=0x55;
 800077e:	4b96      	ldr	r3, [pc, #600]	; (80009d8 <main+0x344>)
 8000780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000784:	2255      	movs	r2, #85	; 0x55
 8000786:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	//  S0 Port Number
		ETH.S_PORT[0]=0x01; //01
 800078a:	4b93      	ldr	r3, [pc, #588]	; (80009d8 <main+0x344>)
 800078c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000790:	2201      	movs	r2, #1
 8000792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		ETH.S_PORT[1]=0xF6; //f6
 8000796:	4b90      	ldr	r3, [pc, #576]	; (80009d8 <main+0x344>)
 8000798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800079c:	22f6      	movs	r2, #246	; 0xf6
 800079e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	//	S0 Client IP ADDRESS
		ETH.S_DIPR[0]=192;
 80007a2:	4b8d      	ldr	r3, [pc, #564]	; (80009d8 <main+0x344>)
 80007a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a8:	22c0      	movs	r2, #192	; 0xc0
 80007aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		ETH.S_DIPR[1]=168;
 80007ae:	4b8a      	ldr	r3, [pc, #552]	; (80009d8 <main+0x344>)
 80007b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007b4:	22a8      	movs	r2, #168	; 0xa8
 80007b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		ETH.S_DIPR[2]=0;
 80007ba:	4b87      	ldr	r3, [pc, #540]	; (80009d8 <main+0x344>)
 80007bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		ETH.S_DIPR[3]=3;
 80007c6:	4b84      	ldr	r3, [pc, #528]	; (80009d8 <main+0x344>)
 80007c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007cc:	2203      	movs	r2, #3
 80007ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	//	S0 Client IP ADDRESS
		ETH.S_DPORT[0]=0x01;
 80007d2:	4b81      	ldr	r3, [pc, #516]	; (80009d8 <main+0x344>)
 80007d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d8:	2201      	movs	r2, #1
 80007da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		ETH.S_DPORT[1]=0xF6;
 80007de:	4b7e      	ldr	r3, [pc, #504]	; (80009d8 <main+0x344>)
 80007e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007e4:	22f6      	movs	r2, #246	; 0xf6
 80007e6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

		ETH.gS_RX_BASE = 0x0000;
 80007ea:	4b7b      	ldr	r3, [pc, #492]	; (80009d8 <main+0x344>)
 80007ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f0:	2200      	movs	r2, #0
 80007f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS_RX_MASK = 0x07FF;
 80007f6:	4b78      	ldr	r3, [pc, #480]	; (80009d8 <main+0x344>)
 80007f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007fc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000800:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS1_RX_BASE = 0x6800;
 8000804:	4b74      	ldr	r3, [pc, #464]	; (80009d8 <main+0x344>)
 8000806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800080a:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800080e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS1_RX_MASK = 0x07FF;
 8000812:	4b71      	ldr	r3, [pc, #452]	; (80009d8 <main+0x344>)
 8000814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000818:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800081c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS2_RX_BASE = 0x7000;
 8000820:	4b6d      	ldr	r3, [pc, #436]	; (80009d8 <main+0x344>)
 8000822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000826:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800082a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS2_RX_MASK = 0x07FF;
 800082e:	4b6a      	ldr	r3, [pc, #424]	; (80009d8 <main+0x344>)
 8000830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000834:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000838:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS3_RX_BASE = 0x7800;
 800083c:	4b66      	ldr	r3, [pc, #408]	; (80009d8 <main+0x344>)
 800083e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000842:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000846:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS3_RX_MASK = 0x07FF;
 800084a:	4b63      	ldr	r3, [pc, #396]	; (80009d8 <main+0x344>)
 800084c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000850:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000854:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS_TX_BASE = 0x0000;
 8000858:	4b5f      	ldr	r3, [pc, #380]	; (80009d8 <main+0x344>)
 800085a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085e:	2200      	movs	r2, #0
 8000860:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS_TX_MASK = 0x07FF;
 8000864:	4b5c      	ldr	r3, [pc, #368]	; (80009d8 <main+0x344>)
 8000866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800086a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS1_TX_BASE = 0x4800;
 8000872:	4b59      	ldr	r3, [pc, #356]	; (80009d8 <main+0x344>)
 8000874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000878:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		ETH.gS1_TX_MASK = 0x07FF;
 8000880:	4b55      	ldr	r3, [pc, #340]	; (80009d8 <main+0x344>)
 8000882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000886:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800088a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		ETH.gS2_TX_BASE = 0x5000;
 800088e:	4b52      	ldr	r3, [pc, #328]	; (80009d8 <main+0x344>)
 8000890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000894:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000898:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		ETH.gS2_TX_MASK = 0x07FF;
 800089c:	4b4e      	ldr	r3, [pc, #312]	; (80009d8 <main+0x344>)
 800089e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		ETH.gS3_TX_BASE = 0x5800;
 80008aa:	4b4b      	ldr	r3, [pc, #300]	; (80009d8 <main+0x344>)
 80008ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b0:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b4:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		ETH.gS3_TX_MASK = 0x07FF;
 80008b8:	4b47      	ldr	r3, [pc, #284]	; (80009d8 <main+0x344>)
 80008ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

		ETH.S_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c6:	4b44      	ldr	r3, [pc, #272]	; (80009d8 <main+0x344>)
 80008c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

		spi_no_debug=1;
 80008d2:	4b42      	ldr	r3, [pc, #264]	; (80009dc <main+0x348>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80008d8:	4b3f      	ldr	r3, [pc, #252]	; (80009d8 <main+0x344>)
 80008da:	4a41      	ldr	r2, [pc, #260]	; (80009e0 <main+0x34c>)
 80008dc:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80008de:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <main+0x344>)
 80008e0:	2210      	movs	r2, #16
 80008e2:	811a      	strh	r2, [r3, #8]
		ETH.RST_PORT=GPIOB;
 80008e4:	4b3c      	ldr	r3, [pc, #240]	; (80009d8 <main+0x344>)
 80008e6:	4a3f      	ldr	r2, [pc, #252]	; (80009e4 <main+0x350>)
 80008e8:	60da      	str	r2, [r3, #12]
		ETH.RST_PIN=GPIO_PIN_0;
 80008ea:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <main+0x344>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	821a      	strh	r2, [r3, #16]
		ETH.SPI= &hspi1;
 80008f0:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <main+0x344>)
 80008f2:	4a3d      	ldr	r2, [pc, #244]	; (80009e8 <main+0x354>)
 80008f4:	601a      	str	r2, [r3, #0]
	  //----------------------- ETHERNET W5500 Environment-------------------------//
	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008f6:	483d      	ldr	r0, [pc, #244]	; (80009ec <main+0x358>)
 80008f8:	f005 fef2 	bl	80066e0 <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008fc:	493c      	ldr	r1, [pc, #240]	; (80009f0 <main+0x35c>)
 80008fe:	483d      	ldr	r0, [pc, #244]	; (80009f4 <main+0x360>)
 8000900:	f00e fc06 	bl	800f110 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 8000904:	493c      	ldr	r1, [pc, #240]	; (80009f8 <main+0x364>)
 8000906:	483d      	ldr	r0, [pc, #244]	; (80009fc <main+0x368>)
 8000908:	f00e fc02 	bl	800f110 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 800090c:	493c      	ldr	r1, [pc, #240]	; (8000a00 <main+0x36c>)
 800090e:	483d      	ldr	r0, [pc, #244]	; (8000a04 <main+0x370>)
 8000910:	f00e fbfe 	bl	800f110 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 8000914:	493c      	ldr	r1, [pc, #240]	; (8000a08 <main+0x374>)
 8000916:	483d      	ldr	r0, [pc, #244]	; (8000a0c <main+0x378>)
 8000918:	f00e fbfa 	bl	800f110 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 800091c:	493c      	ldr	r1, [pc, #240]	; (8000a10 <main+0x37c>)
 800091e:	483d      	ldr	r0, [pc, #244]	; (8000a14 <main+0x380>)
 8000920:	f00e fbf6 	bl	800f110 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 8000924:	493c      	ldr	r1, [pc, #240]	; (8000a18 <main+0x384>)
 8000926:	483d      	ldr	r0, [pc, #244]	; (8000a1c <main+0x388>)
 8000928:	f00e fbf2 	bl	800f110 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 800092c:	493c      	ldr	r1, [pc, #240]	; (8000a20 <main+0x38c>)
 800092e:	483d      	ldr	r0, [pc, #244]	; (8000a24 <main+0x390>)
 8000930:	f00e fbee 	bl	800f110 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 8000934:	493c      	ldr	r1, [pc, #240]	; (8000a28 <main+0x394>)
 8000936:	483d      	ldr	r0, [pc, #244]	; (8000a2c <main+0x398>)
 8000938:	f00e fbea 	bl	800f110 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 800093c:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <main+0x358>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000944:	4b29      	ldr	r3, [pc, #164]	; (80009ec <main+0x358>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <main+0x358>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 8000954:	4b25      	ldr	r3, [pc, #148]	; (80009ec <main+0x358>)
 8000956:	2200      	movs	r2, #0
 8000958:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 800095c:	4b23      	ldr	r3, [pc, #140]	; (80009ec <main+0x358>)
 800095e:	2200      	movs	r2, #0
 8000960:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <main+0x358>)
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <main+0x358>)
 800096e:	2206      	movs	r2, #6
 8000970:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <main+0x358>)
 8000976:	2201      	movs	r2, #1
 8000978:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <main+0x358>)
 800097e:	2203      	movs	r2, #3
 8000980:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <main+0x358>)
 8000986:	2200      	movs	r2, #0
 8000988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <main+0x358>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <main+0x358>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <main+0x358>)
 800099e:	220a      	movs	r2, #10
 80009a0:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <main+0x358>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <main+0x358>)
 80009ae:	2233      	movs	r2, #51	; 0x33
 80009b0:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <main+0x358>)
 80009b6:	2234      	movs	r2, #52	; 0x34
 80009b8:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <main+0x358>)
 80009be:	2235      	movs	r2, #53	; 0x35
 80009c0:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <main+0x358>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <main+0x358>)
 80009ce:	2264      	movs	r2, #100	; 0x64
 80009d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80009d4:	e02c      	b.n	8000a30 <main+0x39c>
 80009d6:	bf00      	nop
 80009d8:	20000304 	.word	0x20000304
 80009dc:	20004008 	.word	0x20004008
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020400 	.word	0x40020400
 80009e8:	200001d4 	.word	0x200001d4
 80009ec:	200023d4 	.word	0x200023d4
 80009f0:	20000044 	.word	0x20000044
 80009f4:	200023da 	.word	0x200023da
 80009f8:	2000004c 	.word	0x2000004c
 80009fc:	200023fa 	.word	0x200023fa
 8000a00:	20000058 	.word	0x20000058
 8000a04:	2000240a 	.word	0x2000240a
 8000a08:	20000068 	.word	0x20000068
 8000a0c:	2000241a 	.word	0x2000241a
 8000a10:	20000070 	.word	0x20000070
 8000a14:	20002420 	.word	0x20002420
 8000a18:	20000080 	.word	0x20000080
 8000a1c:	20002436 	.word	0x20002436
 8000a20:	20000090 	.word	0x20000090
 8000a24:	20002446 	.word	0x20002446
 8000a28:	200000a0 	.word	0x200000a0
 8000a2c:	20002430 	.word	0x20002430
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 8000a30:	4b9c      	ldr	r3, [pc, #624]	; (8000ca4 <main+0x610>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._DBG_EN=1;
 8000a38:	4b9a      	ldr	r3, [pc, #616]	; (8000ca4 <main+0x610>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
		wf.RESET_PORT=GPIOA;
 8000a40:	4b98      	ldr	r3, [pc, #608]	; (8000ca4 <main+0x610>)
 8000a42:	4a99      	ldr	r2, [pc, #612]	; (8000ca8 <main+0x614>)
 8000a44:	601a      	str	r2, [r3, #0]
		wf.RESET_PIN=GPIO_PIN_8;
 8000a46:	4b97      	ldr	r3, [pc, #604]	; (8000ca4 <main+0x610>)
 8000a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a4c:	809a      	strh	r2, [r3, #4]
	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//
		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a4e:	4897      	ldr	r0, [pc, #604]	; (8000cac <main+0x618>)
 8000a50:	f00a fddc 	bl	800b60c <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a54:	4b95      	ldr	r3, [pc, #596]	; (8000cac <main+0x618>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	705a      	strb	r2, [r3, #1]
		ModBUS_Config(&mb_wf);		//WIFI como servidor TCP, recibe comadno ModBUS
 8000a5a:	4895      	ldr	r0, [pc, #596]	; (8000cb0 <main+0x61c>)
 8000a5c:	f00a fdd6 	bl	800b60c <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a60:	4b93      	ldr	r3, [pc, #588]	; (8000cb0 <main+0x61c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	705a      	strb	r2, [r3, #1]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a66:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a6a:	2103      	movs	r1, #3
 8000a6c:	4890      	ldr	r0, [pc, #576]	; (8000cb0 <main+0x61c>)
 8000a6e:	f00a fe70 	bl	800b752 <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a72:	f001 ffa5 	bl	80029c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a76:	f000 faf3 	bl	8001060 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a7a:	4b8e      	ldr	r3, [pc, #568]	; (8000cb4 <main+0x620>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a8e      	ldr	r2, [pc, #568]	; (8000cb8 <main+0x624>)
 8000a80:	fba2 2303 	umull	r2, r3, r2, r3
 8000a84:	099b      	lsrs	r3, r3, #6
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fdba 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8c:	f000 fc54 	bl	8001338 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a90:	f000 fb4e 	bl	8001130 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000a94:	f000 fb82 	bl	800119c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a98:	f000 fbfa 	bl	8001290 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a9c:	f000 fc22 	bl	80012e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

     ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000aa0:	210e      	movs	r1, #14
 8000aa2:	4886      	ldr	r0, [pc, #536]	; (8000cbc <main+0x628>)
 8000aa4:	f000 fcee 	bl	8001484 <ITM0_Write>
     HAL_UART_Transmit_IT(&huart2,"\r\n INICIO OK \r\n",strlen("\r\n INICIO OK \r\n"));
 8000aa8:	220f      	movs	r2, #15
 8000aaa:	4985      	ldr	r1, [pc, #532]	; (8000cc0 <main+0x62c>)
 8000aac:	4885      	ldr	r0, [pc, #532]	; (8000cc4 <main+0x630>)
 8000aae:	f004 fd3f 	bl	8005530 <HAL_UART_Transmit_IT>
	 HW_RESET(&wf);
 8000ab2:	487c      	ldr	r0, [pc, #496]	; (8000ca4 <main+0x610>)
 8000ab4:	f005 fd10 	bl	80064d8 <HW_RESET>
	 if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000ab8:	4b7a      	ldr	r3, [pc, #488]	; (8000ca4 <main+0x610>)
 8000aba:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <main+0x436>
 8000ac2:	2113      	movs	r1, #19
 8000ac4:	4880      	ldr	r0, [pc, #512]	; (8000cc8 <main+0x634>)
 8000ac6:	f000 fcdd 	bl	8001484 <ITM0_Write>
	 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000aca:	2201      	movs	r2, #1
 8000acc:	497f      	ldr	r1, [pc, #508]	; (8000ccc <main+0x638>)
 8000ace:	4880      	ldr	r0, [pc, #512]	; (8000cd0 <main+0x63c>)
 8000ad0:	f004 fd73 	bl	80055ba <HAL_UART_Receive_IT>
	 if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5500 \r\n",strlen("\r\n SET-UP W5500 \r\n"));
 8000ad4:	4b7f      	ldr	r3, [pc, #508]	; (8000cd4 <main+0x640>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <main+0x450>
 8000adc:	2112      	movs	r1, #18
 8000ade:	487e      	ldr	r0, [pc, #504]	; (8000cd8 <main+0x644>)
 8000ae0:	f000 fcd0 	bl	8001484 <ITM0_Write>


     SPI_ETH_PHY_RESET(&ETH);
 8000ae4:	487d      	ldr	r0, [pc, #500]	; (8000cdc <main+0x648>)
 8000ae6:	f00c f8ed 	bl	800ccc4 <SPI_ETH_PHY_RESET>
     HAL_Delay(800);
 8000aea:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000aee:	f001 ffd9 	bl	8002aa4 <HAL_Delay>
     eth_init(&ETH);
 8000af2:	487a      	ldr	r0, [pc, #488]	; (8000cdc <main+0x648>)
 8000af4:	f00c fad0 	bl	800d098 <eth_init>
     SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000af8:	4978      	ldr	r1, [pc, #480]	; (8000cdc <main+0x648>)
 8000afa:	4879      	ldr	r0, [pc, #484]	; (8000ce0 <main+0x64c>)
 8000afc:	f00c fe51 	bl	800d7a2 <SPI_ETH_SNIFF>
     HAL_Delay(800);
 8000b00:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000b04:	f001 ffce 	bl	8002aa4 <HAL_Delay>
   	 eth_socket_init(&ETH,S0_REG);
 8000b08:	2101      	movs	r1, #1
 8000b0a:	4874      	ldr	r0, [pc, #464]	; (8000cdc <main+0x648>)
 8000b0c:	f00c fb96 	bl	800d23c <eth_socket_init>
   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b10:	4972      	ldr	r1, [pc, #456]	; (8000cdc <main+0x648>)
 8000b12:	4873      	ldr	r0, [pc, #460]	; (8000ce0 <main+0x64c>)
 8000b14:	f00c fe45 	bl	800d7a2 <SPI_ETH_SNIFF>
	 uint16_t b=0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	81bb      	strh	r3, [r7, #12]
	 uint8_t spi_Data[2];
	 b = SPI_ETH_REG(&ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2300      	movs	r3, #0
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2124      	movs	r1, #36	; 0x24
 8000b2c:	486b      	ldr	r0, [pc, #428]	; (8000cdc <main+0x648>)
 8000b2e:	f00c f920 	bl	800cd72 <SPI_ETH_REG>
 8000b32:	4603      	mov	r3, r0
 8000b34:	81bb      	strh	r3, [r7, #12]
	 eth_wr_SOCKET_MODE(&ETH,S0_REG,MODE_TCP);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4868      	ldr	r0, [pc, #416]	; (8000cdc <main+0x648>)
 8000b3c:	f00c fa8a 	bl	800d054 <eth_wr_SOCKET_MODE>
   	 SPI_ETH_REG(&ETH, S_DIPR, S0_REG,SPI_WRITE, ETH.S_DIPR,4);									// client
 8000b40:	2304      	movs	r3, #4
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	4b67      	ldr	r3, [pc, #412]	; (8000ce4 <main+0x650>)
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	210c      	movs	r1, #12
 8000b4e:	4863      	ldr	r0, [pc, #396]	; (8000cdc <main+0x648>)
 8000b50:	f00c f90f 	bl	800cd72 <SPI_ETH_REG>
   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 8000b54:	212e      	movs	r1, #46	; 0x2e
 8000b56:	4864      	ldr	r0, [pc, #400]	; (8000ce8 <main+0x654>)
 8000b58:	f000 fc94 	bl	8001484 <ITM0_Write>
   	 SPI_ETH_REG(&ETH, S_DPORT, S0_REG,SPI_WRITE, ETH.S_DPORT,2);									// client
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	9301      	str	r3, [sp, #4]
 8000b60:	4b62      	ldr	r3, [pc, #392]	; (8000cec <main+0x658>)
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	2301      	movs	r3, #1
 8000b66:	2201      	movs	r2, #1
 8000b68:	2110      	movs	r1, #16
 8000b6a:	485c      	ldr	r0, [pc, #368]	; (8000cdc <main+0x648>)
 8000b6c:	f00c f901 	bl	800cd72 <SPI_ETH_REG>
   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 8000b70:	2120      	movs	r1, #32
 8000b72:	485f      	ldr	r0, [pc, #380]	; (8000cf0 <main+0x65c>)
 8000b74:	f000 fc86 	bl	8001484 <ITM0_Write>
   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b78:	4958      	ldr	r1, [pc, #352]	; (8000cdc <main+0x648>)
 8000b7a:	4859      	ldr	r0, [pc, #356]	; (8000ce0 <main+0x64c>)
 8000b7c:	f00c fe11 	bl	800d7a2 <SPI_ETH_SNIFF>
   	 eth_wr_SOCKET_CMD(&ETH, S0_REG,OPEN );
 8000b80:	2201      	movs	r2, #1
 8000b82:	2101      	movs	r1, #1
 8000b84:	4855      	ldr	r0, [pc, #340]	; (8000cdc <main+0x648>)
 8000b86:	f00c fa43 	bl	800d010 <eth_wr_SOCKET_CMD>

   	 HAL_Delay(1000);
 8000b8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b8e:	f001 ff89 	bl	8002aa4 <HAL_Delay>
   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b92:	4952      	ldr	r1, [pc, #328]	; (8000cdc <main+0x648>)
 8000b94:	4852      	ldr	r0, [pc, #328]	; (8000ce0 <main+0x64c>)
 8000b96:	f00c fe04 	bl	800d7a2 <SPI_ETH_SNIFF>

	 //SPI_READ_EN=1;
   	 //------------------------ RUN ESP -----------------------------------//
     if(ESP8266_HW_Init(&huart1)==1)
 8000b9a:	484d      	ldr	r0, [pc, #308]	; (8000cd0 <main+0x63c>)
 8000b9c:	f001 fbc4 	bl	8002328 <ESP8266_HW_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d111      	bne.n	8000bca <main+0x536>
     {
		  ESP_HW_Init=1;
 8000ba6:	4b53      	ldr	r3, [pc, #332]	; (8000cf4 <main+0x660>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000bac:	4b3d      	ldr	r3, [pc, #244]	; (8000ca4 <main+0x610>)
 8000bae:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <main+0x52a>
 8000bb6:	2113      	movs	r1, #19
 8000bb8:	484f      	ldr	r0, [pc, #316]	; (8000cf8 <main+0x664>)
 8000bba:	f000 fc63 	bl	8001484 <ITM0_Write>
		  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000bbe:	2213      	movs	r2, #19
 8000bc0:	494d      	ldr	r1, [pc, #308]	; (8000cf8 <main+0x664>)
 8000bc2:	4840      	ldr	r0, [pc, #256]	; (8000cc4 <main+0x630>)
 8000bc4:	f004 fcb4 	bl	8005530 <HAL_UART_Transmit_IT>
 8000bc8:	e02e      	b.n	8000c28 <main+0x594>
     }
     else
     {

    	 HW_RESET(&wf);
 8000bca:	4836      	ldr	r0, [pc, #216]	; (8000ca4 <main+0x610>)
 8000bcc:	f005 fc84 	bl	80064d8 <HW_RESET>
		 ESP_REinit=0;
 8000bd0:	4b4a      	ldr	r3, [pc, #296]	; (8000cfc <main+0x668>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
			  if(ESP8266_HW_Init(&huart1)==1)
 8000bd6:	483e      	ldr	r0, [pc, #248]	; (8000cd0 <main+0x63c>)
 8000bd8:	f001 fba6 	bl	8002328 <ESP8266_HW_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d111      	bne.n	8000c06 <main+0x572>
				  {
					  ESP_HW_Init=1;
 8000be2:	4b44      	ldr	r3, [pc, #272]	; (8000cf4 <main+0x660>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	701a      	strb	r2, [r3, #0]
					  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <main+0x610>)
 8000bea:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <main+0x566>
 8000bf2:	2113      	movs	r1, #19
 8000bf4:	4840      	ldr	r0, [pc, #256]	; (8000cf8 <main+0x664>)
 8000bf6:	f000 fc45 	bl	8001484 <ITM0_Write>
					  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init2 OK\r\n",strlen("\r\n ESP HW Init2 OK\r\n"));
 8000bfa:	2214      	movs	r2, #20
 8000bfc:	4940      	ldr	r1, [pc, #256]	; (8000d00 <main+0x66c>)
 8000bfe:	4831      	ldr	r0, [pc, #196]	; (8000cc4 <main+0x630>)
 8000c00:	f004 fc96 	bl	8005530 <HAL_UART_Transmit_IT>
 8000c04:	e010      	b.n	8000c28 <main+0x594>
				  }
				  else
				  {
					  ESP_HW_Init=0;
 8000c06:	4b3b      	ldr	r3, [pc, #236]	; (8000cf4 <main+0x660>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
					  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000c0c:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <main+0x610>)
 8000c0e:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <main+0x58a>
 8000c16:	2115      	movs	r1, #21
 8000c18:	483a      	ldr	r0, [pc, #232]	; (8000d04 <main+0x670>)
 8000c1a:	f000 fc33 	bl	8001484 <ITM0_Write>
					  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Fail\r\n",strlen("\r\n ESP HW Fail\r\n"));
 8000c1e:	2210      	movs	r2, #16
 8000c20:	4939      	ldr	r1, [pc, #228]	; (8000d08 <main+0x674>)
 8000c22:	4828      	ldr	r0, [pc, #160]	; (8000cc4 <main+0x630>)
 8000c24:	f004 fc84 	bl	8005530 <HAL_UART_Transmit_IT>
				  }
     }
     //------------------------ RUN ESP -----------------------------------//

     HAL_Delay(1000);
 8000c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c2c:	f001 ff3a 	bl	8002aa4 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 SPI_READ_EN=1;
 8000c30:	4b36      	ldr	r3, [pc, #216]	; (8000d0c <main+0x678>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	601a      	str	r2, [r3, #0]





		  	  if (ESP_HW_Init==1)
 8000c36:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <main+0x660>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	f040 80b8 	bne.w	8000db0 <main+0x71c>
		  	  {
		  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S_data_available))
 8000c40:	4b33      	ldr	r3, [pc, #204]	; (8000d10 <main+0x67c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	f040 80b3 	bne.w	8000db0 <main+0x71c>
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <main+0x610>)
 8000c4c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f040 80ad 	bne.w	8000db0 <main+0x71c>
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <main+0x610>)
 8000c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c5c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000c60:	f340 80a6 	ble.w	8000db0 <main+0x71c>
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <main+0x648>)
 8000c66:	7e9b      	ldrb	r3, [r3, #26]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f000 80a1 	beq.w	8000db0 <main+0x71c>
		  			{	ETH.S_data_available=0;
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <main+0x648>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	769a      	strb	r2, [r3, #26]
		  				wf_snd_flag_ticks=0;
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <main+0x680>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
		  				WF_SND_FLAG=0;
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <main+0x67c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
		  				HAL_UART_Transmit_IT(&huart2,"\r\n ENTER TO SEND DATA \r\n",strlen("\r\n ENTER TO SEND DATA \r\n"));
 8000c80:	2218      	movs	r2, #24
 8000c82:	4925      	ldr	r1, [pc, #148]	; (8000d18 <main+0x684>)
 8000c84:	480f      	ldr	r0, [pc, #60]	; (8000cc4 <main+0x630>)
 8000c86:	f004 fc53 	bl	8005530 <HAL_UART_Transmit_IT>
		  				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8e:	4823      	ldr	r0, [pc, #140]	; (8000d1c <main+0x688>)
 8000c90:	f002 fb83 	bl	800339a <HAL_GPIO_TogglePin>
		  				ITM0_Write("\r\n#RED#WF-SE GENERA INFO Y ENVIA\r\n",strlen("\r\n#RED#WF-SE GENERA INFO Y ENVIA\r\n"));
 8000c94:	2122      	movs	r1, #34	; 0x22
 8000c96:	4822      	ldr	r0, [pc, #136]	; (8000d20 <main+0x68c>)
 8000c98:	f000 fbf4 	bl	8001484 <ITM0_Write>

		  				for(uint8_t i=0;i<=16;i++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e04e      	b.n	8000d40 <main+0x6ac>
 8000ca2:	bf00      	nop
 8000ca4:	200023d4 	.word	0x200023d4
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	20003120 	.word	0x20003120
 8000cb0:	2000366c 	.word	0x2000366c
 8000cb4:	200000a4 	.word	0x200000a4
 8000cb8:	10624dd3 	.word	0x10624dd3
 8000cbc:	080100f4 	.word	0x080100f4
 8000cc0:	08010104 	.word	0x08010104
 8000cc4:	200002b8 	.word	0x200002b8
 8000cc8:	08010114 	.word	0x08010114
 8000ccc:	20004420 	.word	0x20004420
 8000cd0:	20000274 	.word	0x20000274
 8000cd4:	20003fb8 	.word	0x20003fb8
 8000cd8:	08010128 	.word	0x08010128
 8000cdc:	20000304 	.word	0x20000304
 8000ce0:	20001378 	.word	0x20001378
 8000ce4:	20001348 	.word	0x20001348
 8000ce8:	0801013c 	.word	0x0801013c
 8000cec:	2000134c 	.word	0x2000134c
 8000cf0:	0801016c 	.word	0x0801016c
 8000cf4:	2000400b 	.word	0x2000400b
 8000cf8:	08010190 	.word	0x08010190
 8000cfc:	20004009 	.word	0x20004009
 8000d00:	080101a4 	.word	0x080101a4
 8000d04:	080101bc 	.word	0x080101bc
 8000d08:	080101d4 	.word	0x080101d4
 8000d0c:	20004018 	.word	0x20004018
 8000d10:	20003fb9 	.word	0x20003fb9
 8000d14:	20003fbc 	.word	0x20003fbc
 8000d18:	080101e8 	.word	0x080101e8
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	08010204 	.word	0x08010204
		  				{
		  					datos[i]=ModBUS_F03_Read(&mb_eth,i);
 8000d24:	7bfc      	ldrb	r4, [r7, #15]
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	48a7      	ldr	r0, [pc, #668]	; (8000fc8 <main+0x934>)
 8000d2c:	f00a fd3f 	bl	800b7ae <ModBUS_F03_Read>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	4ba5      	ldr	r3, [pc, #660]	; (8000fcc <main+0x938>)
 8000d36:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		  				for(uint8_t i=0;i<=16;i++)
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	2b10      	cmp	r3, #16
 8000d44:	d9ee      	bls.n	8000d24 <main+0x690>
		  				}

		  				if(httpPOST2(ENDPOINT, SERVER_IP,PORT,&datos,16,TEST_2,post, body, 512))
 8000d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d4a:	9304      	str	r3, [sp, #16]
 8000d4c:	4ba0      	ldr	r3, [pc, #640]	; (8000fd0 <main+0x93c>)
 8000d4e:	9303      	str	r3, [sp, #12]
 8000d50:	4ba0      	ldr	r3, [pc, #640]	; (8000fd4 <main+0x940>)
 8000d52:	9302      	str	r3, [sp, #8]
 8000d54:	2302      	movs	r3, #2
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	2310      	movs	r3, #16
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	4b9b      	ldr	r3, [pc, #620]	; (8000fcc <main+0x938>)
 8000d5e:	4a9e      	ldr	r2, [pc, #632]	; (8000fd8 <main+0x944>)
 8000d60:	499e      	ldr	r1, [pc, #632]	; (8000fdc <main+0x948>)
 8000d62:	489f      	ldr	r0, [pc, #636]	; (8000fe0 <main+0x94c>)
 8000d64:	f00a faf4 	bl	800b350 <httpPOST2>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d020      	beq.n	8000db0 <main+0x71c>
		  				{
  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000d6e:	4899      	ldr	r0, [pc, #612]	; (8000fd4 <main+0x940>)
 8000d70:	f7ff fa40 	bl	80001f4 <strlen>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	2341      	movs	r3, #65	; 0x41
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4995      	ldr	r1, [pc, #596]	; (8000fd4 <main+0x940>)
 8000d80:	4898      	ldr	r0, [pc, #608]	; (8000fe4 <main+0x950>)
 8000d82:	f00d feed 	bl	800eb60 <CopiaVector>
  							wf._n_D2SND=strlen(post);
 8000d86:	4893      	ldr	r0, [pc, #588]	; (8000fd4 <main+0x940>)
 8000d88:	f7ff fa34 	bl	80001f4 <strlen>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b95      	ldr	r3, [pc, #596]	; (8000fe8 <main+0x954>)
 8000d92:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d96:	4b94      	ldr	r3, [pc, #592]	; (8000fe8 <main+0x954>)
 8000d98:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d807      	bhi.n	8000db0 <main+0x71c>
  							{
  								EnviarDatos(&wf);
 8000da0:	4891      	ldr	r0, [pc, #580]	; (8000fe8 <main+0x954>)
 8000da2:	f005 fc87 	bl	80066b4 <EnviarDatos>
  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000da6:	4b90      	ldr	r3, [pc, #576]	; (8000fe8 <main+0x954>)
 8000da8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000dac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		  				}*/
		  			}
		  	  }
		  /**************[ FIN PIDO ENVIAR DATOS ]**************/

		  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000db0:	4b8e      	ldr	r3, [pc, #568]	; (8000fec <main+0x958>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d003      	beq.n	8000dc0 <main+0x72c>
 8000db8:	4b8d      	ldr	r3, [pc, #564]	; (8000ff0 <main+0x95c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d175      	bne.n	8000eac <main+0x818>
		  		{
		  			if(FLAG_UART1==1)
 8000dc0:	4b8a      	ldr	r3, [pc, #552]	; (8000fec <main+0x958>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d11c      	bne.n	8000e02 <main+0x76e>
		  				{
		  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000dc8:	4b8a      	ldr	r3, [pc, #552]	; (8000ff4 <main+0x960>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b8a      	ldr	r3, [pc, #552]	; (8000ff8 <main+0x964>)
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	498a      	ldr	r1, [pc, #552]	; (8000ffc <main+0x968>)
 8000dd4:	488a      	ldr	r0, [pc, #552]	; (8001000 <main+0x96c>)
 8000dd6:	f00d fec3 	bl	800eb60 <CopiaVector>
		  					FLAG_UART1=0;
 8000dda:	4b84      	ldr	r3, [pc, #528]	; (8000fec <main+0x958>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]

		  						if (error_rxdata==3)
 8000de0:	4b88      	ldr	r3, [pc, #544]	; (8001004 <main+0x970>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	d102      	bne.n	8000dee <main+0x75a>
		  						{
		  							error_rxdata=0;
 8000de8:	4b86      	ldr	r3, [pc, #536]	; (8001004 <main+0x970>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
		  						}
		  						if (error_rxdata==1)
 8000dee:	4b85      	ldr	r3, [pc, #532]	; (8001004 <main+0x970>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d105      	bne.n	8000e02 <main+0x76e>
		  						{
		  							error_rxdata=5;
 8000df6:	4b83      	ldr	r3, [pc, #524]	; (8001004 <main+0x970>)
 8000df8:	2205      	movs	r2, #5
 8000dfa:	701a      	strb	r2, [r3, #0]
		  							error_rxdata=0;
 8000dfc:	4b81      	ldr	r3, [pc, #516]	; (8001004 <main+0x970>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
		  						}
		  				}
		  			if(FLAG_TIMEOUT==1)
 8000e02:	4b7b      	ldr	r3, [pc, #492]	; (8000ff0 <main+0x95c>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d102      	bne.n	8000e10 <main+0x77c>
		  					{
		  						FLAG_TIMEOUT=0;
 8000e0a:	4b79      	ldr	r3, [pc, #484]	; (8000ff0 <main+0x95c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
		  					}

		  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000e10:	4b7d      	ldr	r3, [pc, #500]	; (8001008 <main+0x974>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d149      	bne.n	8000eac <main+0x818>
		  				{
		  					/*************** Copio y proceso info recibida ***************/
		  					wf._n_orig=UART_RX_items;
 8000e18:	4b76      	ldr	r3, [pc, #472]	; (8000ff4 <main+0x960>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a72      	ldr	r2, [pc, #456]	; (8000fe8 <main+0x954>)
 8000e1e:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
		  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000e22:	4b74      	ldr	r3, [pc, #464]	; (8000ff4 <main+0x960>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4b74      	ldr	r3, [pc, #464]	; (8000ff8 <main+0x964>)
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	4973      	ldr	r1, [pc, #460]	; (8000ffc <main+0x968>)
 8000e2e:	4874      	ldr	r0, [pc, #464]	; (8001000 <main+0x96c>)
 8000e30:	f00d fe96 	bl	800eb60 <CopiaVector>
		  					resultado=AT_ESP8266_ND(&wf);
 8000e34:	486c      	ldr	r0, [pc, #432]	; (8000fe8 <main+0x954>)
 8000e36:	f005 fd1d 	bl	8006874 <AT_ESP8266_ND>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b73      	ldr	r3, [pc, #460]	; (800100c <main+0x978>)
 8000e40:	701a      	strb	r2, [r3, #0]

		  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

		  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000e42:	4b69      	ldr	r3, [pc, #420]	; (8000fe8 <main+0x954>)
 8000e44:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d12f      	bne.n	8000eac <main+0x818>
 8000e4c:	4b66      	ldr	r3, [pc, #408]	; (8000fe8 <main+0x954>)
 8000e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e52:	2b63      	cmp	r3, #99	; 0x63
 8000e54:	d12a      	bne.n	8000eac <main+0x818>
		  					{

		  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000e56:	4b64      	ldr	r3, [pc, #400]	; (8000fe8 <main+0x954>)
 8000e58:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000e5c:	2341      	movs	r3, #65	; 0x41
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2300      	movs	r3, #0
 8000e62:	496b      	ldr	r1, [pc, #428]	; (8001010 <main+0x97c>)
 8000e64:	486b      	ldr	r0, [pc, #428]	; (8001014 <main+0x980>)
 8000e66:	f00d fe7b 	bl	800eb60 <CopiaVector>
		  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000e6a:	4b5f      	ldr	r3, [pc, #380]	; (8000fe8 <main+0x954>)
 8000e6c:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000e70:	4a69      	ldr	r2, [pc, #420]	; (8001018 <main+0x984>)
 8000e72:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190

		  						ModBUS(&mb_wf);
 8000e76:	4868      	ldr	r0, [pc, #416]	; (8001018 <main+0x984>)
 8000e78:	f00a fd1e 	bl	800b8b8 <ModBUS>

		  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000e7c:	4b66      	ldr	r3, [pc, #408]	; (8001018 <main+0x984>)
 8000e7e:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8000e82:	2341      	movs	r3, #65	; 0x41
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2300      	movs	r3, #0
 8000e88:	4964      	ldr	r1, [pc, #400]	; (800101c <main+0x988>)
 8000e8a:	4856      	ldr	r0, [pc, #344]	; (8000fe4 <main+0x950>)
 8000e8c:	f00d fe68 	bl	800eb60 <CopiaVector>
		  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000e90:	4b61      	ldr	r3, [pc, #388]	; (8001018 <main+0x984>)
 8000e92:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8000e96:	4a54      	ldr	r2, [pc, #336]	; (8000fe8 <main+0x954>)
 8000e98:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
		  						wf._new_data_rcv=0;//
 8000e9c:	4b52      	ldr	r3, [pc, #328]	; (8000fe8 <main+0x954>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
		  						wf._send_data=1;
 8000ea4:	4b50      	ldr	r3, [pc, #320]	; (8000fe8 <main+0x954>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
		  						}
		  					}

		  		}

		  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000eac:	4b56      	ldr	r3, [pc, #344]	; (8001008 <main+0x974>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d108      	bne.n	8000ec6 <main+0x832>
		  			{
		  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	495a      	ldr	r1, [pc, #360]	; (8001020 <main+0x98c>)
 8000eb8:	484b      	ldr	r0, [pc, #300]	; (8000fe8 <main+0x954>)
 8000eba:	f008 fddb 	bl	8009a74 <WiFi_Conn_ND>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b58      	ldr	r3, [pc, #352]	; (8001024 <main+0x990>)
 8000ec4:	701a      	strb	r2, [r3, #0]

		  			}
		  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000ec6:	4b58      	ldr	r3, [pc, #352]	; (8001028 <main+0x994>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d10e      	bne.n	8000eec <main+0x858>
		  			{

		  				HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Resetting \r\n",strlen("\r\n ESP HW Resetting \r\n"));
 8000ece:	2216      	movs	r2, #22
 8000ed0:	4956      	ldr	r1, [pc, #344]	; (800102c <main+0x998>)
 8000ed2:	4857      	ldr	r0, [pc, #348]	; (8001030 <main+0x99c>)
 8000ed4:	f004 fb2c 	bl	8005530 <HAL_UART_Transmit_IT>
		  				HW_RESET(&wf);
 8000ed8:	4843      	ldr	r0, [pc, #268]	; (8000fe8 <main+0x954>)
 8000eda:	f005 fafd 	bl	80064d8 <HW_RESET>
		  				HAL_Delay(5000);//210419
 8000ede:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ee2:	f001 fddf 	bl	8002aa4 <HAL_Delay>
		  				esp_restart=0;
 8000ee6:	4b50      	ldr	r3, [pc, #320]	; (8001028 <main+0x994>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
		  			}
		  		if(eth_reset==1)
 8000eec:	4b51      	ldr	r3, [pc, #324]	; (8001034 <main+0x9a0>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	f47f ae9d 	bne.w	8000c30 <main+0x59c>
		  		{

		  		  SPI_ETH_PHY_RESET(&ETH);
 8000ef6:	4850      	ldr	r0, [pc, #320]	; (8001038 <main+0x9a4>)
 8000ef8:	f00b fee4 	bl	800ccc4 <SPI_ETH_PHY_RESET>
		  		  HAL_UART_Transmit_IT(&huart2,"\r\n PHY RESET \r\n",strlen("\r\n PHY RESET \r\n"));
 8000efc:	220f      	movs	r2, #15
 8000efe:	494f      	ldr	r1, [pc, #316]	; (800103c <main+0x9a8>)
 8000f00:	484b      	ldr	r0, [pc, #300]	; (8001030 <main+0x99c>)
 8000f02:	f004 fb15 	bl	8005530 <HAL_UART_Transmit_IT>
		  	      HAL_Delay(800);
 8000f06:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000f0a:	f001 fdcb 	bl	8002aa4 <HAL_Delay>
		  	      eth_init(&ETH);
 8000f0e:	484a      	ldr	r0, [pc, #296]	; (8001038 <main+0x9a4>)
 8000f10:	f00c f8c2 	bl	800d098 <eth_init>
		  	      HAL_UART_Transmit_IT(&huart2,"\r\n ETH INIT \r\n",strlen("\r\n ETH INIT \r\n"));
 8000f14:	220e      	movs	r2, #14
 8000f16:	494a      	ldr	r1, [pc, #296]	; (8001040 <main+0x9ac>)
 8000f18:	4845      	ldr	r0, [pc, #276]	; (8001030 <main+0x99c>)
 8000f1a:	f004 fb09 	bl	8005530 <HAL_UART_Transmit_IT>
		  	      SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000f1e:	4946      	ldr	r1, [pc, #280]	; (8001038 <main+0x9a4>)
 8000f20:	4848      	ldr	r0, [pc, #288]	; (8001044 <main+0x9b0>)
 8000f22:	f00c fc3e 	bl	800d7a2 <SPI_ETH_SNIFF>
		  	      HAL_Delay(800);
 8000f26:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000f2a:	f001 fdbb 	bl	8002aa4 <HAL_Delay>
		  	   	  eth_socket_init(&ETH,S0_REG);
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4841      	ldr	r0, [pc, #260]	; (8001038 <main+0x9a4>)
 8000f32:	f00c f983 	bl	800d23c <eth_socket_init>
		  	   	  HAL_UART_Transmit_IT(&huart2,"\r\n ETH SOCKET INIT \r\n",strlen("\r\n ETH SOCKET INIT \r\n"));
 8000f36:	2215      	movs	r2, #21
 8000f38:	4943      	ldr	r1, [pc, #268]	; (8001048 <main+0x9b4>)
 8000f3a:	483d      	ldr	r0, [pc, #244]	; (8001030 <main+0x99c>)
 8000f3c:	f004 faf8 	bl	8005530 <HAL_UART_Transmit_IT>

		  		 uint16_t b=0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	817b      	strh	r3, [r7, #10]
		  		 uint8_t spi_Data[2];
		  		 b = SPI_ETH_REG(&ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 8000f44:	2302      	movs	r3, #2
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2124      	movs	r1, #36	; 0x24
 8000f52:	4839      	ldr	r0, [pc, #228]	; (8001038 <main+0x9a4>)
 8000f54:	f00b ff0d 	bl	800cd72 <SPI_ETH_REG>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	817b      	strh	r3, [r7, #10]

		  		 eth_wr_SOCKET_MODE(&ETH,S0_REG,MODE_TCP);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2101      	movs	r1, #1
 8000f60:	4835      	ldr	r0, [pc, #212]	; (8001038 <main+0x9a4>)
 8000f62:	f00c f877 	bl	800d054 <eth_wr_SOCKET_MODE>
		  	   	 SPI_ETH_REG(&ETH, S_DIPR, S0_REG,SPI_WRITE, ETH.S_DIPR,4);									// client
 8000f66:	2304      	movs	r3, #4
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	4b38      	ldr	r3, [pc, #224]	; (800104c <main+0x9b8>)
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	2201      	movs	r2, #1
 8000f72:	210c      	movs	r1, #12
 8000f74:	4830      	ldr	r0, [pc, #192]	; (8001038 <main+0x9a4>)
 8000f76:	f00b fefc 	bl	800cd72 <SPI_ETH_REG>
		  	   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 8000f7a:	212e      	movs	r1, #46	; 0x2e
 8000f7c:	4834      	ldr	r0, [pc, #208]	; (8001050 <main+0x9bc>)
 8000f7e:	f000 fa81 	bl	8001484 <ITM0_Write>
		  	   	 SPI_ETH_REG(&ETH, S_DPORT, S0_REG,SPI_WRITE, ETH.S_DPORT,2);									// client
 8000f82:	2302      	movs	r3, #2
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	4b33      	ldr	r3, [pc, #204]	; (8001054 <main+0x9c0>)
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2110      	movs	r1, #16
 8000f90:	4829      	ldr	r0, [pc, #164]	; (8001038 <main+0x9a4>)
 8000f92:	f00b feee 	bl	800cd72 <SPI_ETH_REG>
		  	   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 8000f96:	2120      	movs	r1, #32
 8000f98:	482f      	ldr	r0, [pc, #188]	; (8001058 <main+0x9c4>)
 8000f9a:	f000 fa73 	bl	8001484 <ITM0_Write>

		  	   	 HAL_Delay(800);
 8000f9e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000fa2:	f001 fd7f 	bl	8002aa4 <HAL_Delay>
		  	   	  eth_wr_SOCKET_CMD(&ETH, S0_REG ,OPEN );
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4823      	ldr	r0, [pc, #140]	; (8001038 <main+0x9a4>)
 8000fac:	f00c f830 	bl	800d010 <eth_wr_SOCKET_CMD>
		  	   	  HAL_UART_Transmit_IT(&huart2,"\r\n ETH OPEN \r\n",strlen("\r\n ETH OPEN \r\n"));
 8000fb0:	220e      	movs	r2, #14
 8000fb2:	492a      	ldr	r1, [pc, #168]	; (800105c <main+0x9c8>)
 8000fb4:	481e      	ldr	r0, [pc, #120]	; (8001030 <main+0x99c>)
 8000fb6:	f004 fabb 	bl	8005530 <HAL_UART_Transmit_IT>
		  	   	  ETH.ETH_WDG=0;
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <main+0x9a4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	829a      	strh	r2, [r3, #20]
		  	   	  eth_reset=0;
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <main+0x9a0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
		 SPI_READ_EN=1;
 8000fc6:	e633      	b.n	8000c30 <main+0x59c>
 8000fc8:	20003120 	.word	0x20003120
 8000fcc:	20000024 	.word	0x20000024
 8000fd0:	20003db8 	.word	0x20003db8
 8000fd4:	20003bb8 	.word	0x20003bb8
 8000fd8:	2000001c 	.word	0x2000001c
 8000fdc:	2000000c 	.word	0x2000000c
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20002668 	.word	0x20002668
 8000fe8:	200023d4 	.word	0x200023d4
 8000fec:	2000400f 	.word	0x2000400f
 8000ff0:	2000400e 	.word	0x2000400e
 8000ff4:	20004424 	.word	0x20004424
 8000ff8:	2000441c 	.word	0x2000441c
 8000ffc:	2000421c 	.word	0x2000421c
 8001000:	20002a68 	.word	0x20002a68
 8001004:	20004012 	.word	0x20004012
 8001008:	2000400b 	.word	0x2000400b
 800100c:	20004011 	.word	0x20004011
 8001010:	20002468 	.word	0x20002468
 8001014:	20003679 	.word	0x20003679
 8001018:	2000366c 	.word	0x2000366c
 800101c:	20003800 	.word	0x20003800
 8001020:	20000274 	.word	0x20000274
 8001024:	20004014 	.word	0x20004014
 8001028:	20004013 	.word	0x20004013
 800102c:	08010228 	.word	0x08010228
 8001030:	200002b8 	.word	0x200002b8
 8001034:	20004010 	.word	0x20004010
 8001038:	20000304 	.word	0x20000304
 800103c:	08010240 	.word	0x08010240
 8001040:	08010250 	.word	0x08010250
 8001044:	20001378 	.word	0x20001378
 8001048:	08010260 	.word	0x08010260
 800104c:	20001348 	.word	0x20001348
 8001050:	0801013c 	.word	0x0801013c
 8001054:	2000134c 	.word	0x2000134c
 8001058:	0801016c 	.word	0x0801016c
 800105c:	08010278 	.word	0x08010278

08001060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b094      	sub	sp, #80	; 0x50
 8001064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	2230      	movs	r2, #48	; 0x30
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f00d ff65 	bl	800ef3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	4b27      	ldr	r3, [pc, #156]	; (8001128 <SystemClock_Config+0xc8>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	4a26      	ldr	r2, [pc, #152]	; (8001128 <SystemClock_Config+0xc8>)
 800108e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001092:	6413      	str	r3, [r2, #64]	; 0x40
 8001094:	4b24      	ldr	r3, [pc, #144]	; (8001128 <SystemClock_Config+0xc8>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	4b21      	ldr	r3, [pc, #132]	; (800112c <SystemClock_Config+0xcc>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a20      	ldr	r2, [pc, #128]	; (800112c <SystemClock_Config+0xcc>)
 80010aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	4b1e      	ldr	r3, [pc, #120]	; (800112c <SystemClock_Config+0xcc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010bc:	2301      	movs	r3, #1
 80010be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c6:	2302      	movs	r3, #2
 80010c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80010d0:	230c      	movs	r3, #12
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80010d4:	2360      	movs	r3, #96	; 0x60
 80010d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d8:	2302      	movs	r3, #2
 80010da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010dc:	2304      	movs	r3, #4
 80010de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e0:	f107 0320 	add.w	r3, r7, #32
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 f973 	bl	80033d0 <HAL_RCC_OscConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f0:	f001 f9c4 	bl	800247c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f4:	230f      	movs	r3, #15
 80010f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f8:	2302      	movs	r3, #2
 80010fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001104:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	2103      	movs	r1, #3
 8001110:	4618      	mov	r0, r3
 8001112:	f002 fbd5 	bl	80038c0 <HAL_RCC_ClockConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800111c:	f001 f9ae 	bl	800247c <Error_Handler>
  }
}
 8001120:	bf00      	nop
 8001122:	3750      	adds	r7, #80	; 0x50
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40007000 	.word	0x40007000

08001130 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_SPI1_Init+0x64>)
 8001136:	4a18      	ldr	r2, [pc, #96]	; (8001198 <MX_SPI1_Init+0x68>)
 8001138:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_SPI1_Init+0x64>)
 800113c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001140:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_SPI1_Init+0x64>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_SPI1_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_SPI1_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_SPI1_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_SPI1_Init+0x64>)
 800115c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001160:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_SPI1_Init+0x64>)
 8001164:	2208      	movs	r2, #8
 8001166:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <MX_SPI1_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_SPI1_Init+0x64>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <MX_SPI1_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_SPI1_Init+0x64>)
 800117c:	220a      	movs	r2, #10
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_SPI1_Init+0x64>)
 8001182:	f002 fd7d 	bl	8003c80 <HAL_SPI_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800118c:	f001 f976 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200001d4 	.word	0x200001d4
 8001198:	40013000 	.word	0x40013000

0800119c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08e      	sub	sp, #56	; 0x38
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	f107 0320 	add.w	r3, r7, #32
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	615a      	str	r2, [r3, #20]
 80011ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011cc:	4b2f      	ldr	r3, [pc, #188]	; (800128c <MX_TIM2_Init+0xf0>)
 80011ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <MX_TIM2_Init+0xf0>)
 80011d6:	2264      	movs	r2, #100	; 0x64
 80011d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b2c      	ldr	r3, [pc, #176]	; (800128c <MX_TIM2_Init+0xf0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80011e0:	4b2a      	ldr	r3, [pc, #168]	; (800128c <MX_TIM2_Init+0xf0>)
 80011e2:	2264      	movs	r2, #100	; 0x64
 80011e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	4b29      	ldr	r3, [pc, #164]	; (800128c <MX_TIM2_Init+0xf0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ec:	4b27      	ldr	r3, [pc, #156]	; (800128c <MX_TIM2_Init+0xf0>)
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011f2:	4826      	ldr	r0, [pc, #152]	; (800128c <MX_TIM2_Init+0xf0>)
 80011f4:	f003 f83a 	bl	800426c <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80011fe:	f001 f93d 	bl	800247c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001208:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120c:	4619      	mov	r1, r3
 800120e:	481f      	ldr	r0, [pc, #124]	; (800128c <MX_TIM2_Init+0xf0>)
 8001210:	f003 fc42 	bl	8004a98 <HAL_TIM_ConfigClockSource>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800121a:	f001 f92f 	bl	800247c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800121e:	481b      	ldr	r0, [pc, #108]	; (800128c <MX_TIM2_Init+0xf0>)
 8001220:	f003 f873 	bl	800430a <HAL_TIM_OC_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800122a:	f001 f927 	bl	800247c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 800122e:	2108      	movs	r1, #8
 8001230:	4816      	ldr	r0, [pc, #88]	; (800128c <MX_TIM2_Init+0xf0>)
 8001232:	f003 fa73 	bl	800471c <HAL_TIM_OnePulse_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 800123c:	f001 f91e 	bl	800247c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001248:	f107 0320 	add.w	r3, r7, #32
 800124c:	4619      	mov	r1, r3
 800124e:	480f      	ldr	r0, [pc, #60]	; (800128c <MX_TIM2_Init+0xf0>)
 8001250:	f003 ffde 	bl	8005210 <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 800125a:	f001 f90f 	bl	800247c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 800125e:	2320      	movs	r3, #32
 8001260:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2200      	movs	r2, #0
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_TIM2_Init+0xf0>)
 8001276:	f003 fbb3 	bl	80049e0 <HAL_TIM_OC_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001280:	f001 f8fc 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	3738      	adds	r7, #56	; 0x38
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2000022c 	.word	0x2000022c

08001290 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <MX_USART1_UART_Init+0x50>)
 8001298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 800129c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012b6:	220c      	movs	r2, #12
 80012b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012c8:	f004 f824 	bl	8005314 <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012d2:	f001 f8d3 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000274 	.word	0x20000274
 80012e0:	40011000 	.word	0x40011000

080012e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <MX_USART2_UART_Init+0x50>)
 80012ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 800130a:	220c      	movs	r2, #12
 800130c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 800131c:	f003 fffa 	bl	8005314 <HAL_UART_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001326:	f001 f8a9 	bl	800247c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200002b8 	.word	0x200002b8
 8001334:	40004400 	.word	0x40004400

08001338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b48      	ldr	r3, [pc, #288]	; (8001474 <MX_GPIO_Init+0x13c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a47      	ldr	r2, [pc, #284]	; (8001474 <MX_GPIO_Init+0x13c>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b45      	ldr	r3, [pc, #276]	; (8001474 <MX_GPIO_Init+0x13c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b41      	ldr	r3, [pc, #260]	; (8001474 <MX_GPIO_Init+0x13c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a40      	ldr	r2, [pc, #256]	; (8001474 <MX_GPIO_Init+0x13c>)
 8001374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b3e      	ldr	r3, [pc, #248]	; (8001474 <MX_GPIO_Init+0x13c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <MX_GPIO_Init+0x13c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a39      	ldr	r2, [pc, #228]	; (8001474 <MX_GPIO_Init+0x13c>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b37      	ldr	r3, [pc, #220]	; (8001474 <MX_GPIO_Init+0x13c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b33      	ldr	r3, [pc, #204]	; (8001474 <MX_GPIO_Init+0x13c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a32      	ldr	r2, [pc, #200]	; (8001474 <MX_GPIO_Init+0x13c>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b30      	ldr	r3, [pc, #192]	; (8001474 <MX_GPIO_Init+0x13c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c4:	482c      	ldr	r0, [pc, #176]	; (8001478 <MX_GPIO_Init+0x140>)
 80013c6:	f001 ffcf 	bl	8003368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|WiFi_EN_Pin, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	f44f 7188 	mov.w	r1, #272	; 0x110
 80013d0:	482a      	ldr	r0, [pc, #168]	; (800147c <MX_GPIO_Init+0x144>)
 80013d2:	f001 ffc9 	bl	8003368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	2101      	movs	r1, #1
 80013da:	4829      	ldr	r0, [pc, #164]	; (8001480 <MX_GPIO_Init+0x148>)
 80013dc:	f001 ffc4 	bl	8003368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80013e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	481f      	ldr	r0, [pc, #124]	; (8001478 <MX_GPIO_Init+0x140>)
 80013fa:	f001 fd4d 	bl	8002e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 80013fe:	2301      	movs	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	481a      	ldr	r0, [pc, #104]	; (800147c <MX_GPIO_Init+0x144>)
 8001412:	f001 fd41 	bl	8002e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8001416:	2310      	movs	r3, #16
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4813      	ldr	r0, [pc, #76]	; (800147c <MX_GPIO_Init+0x144>)
 800142e:	f001 fd33 	bl	8002e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_RST_Pin */
  GPIO_InitStruct.Pin = SPI_RST_Pin;
 8001432:	2301      	movs	r3, #1
 8001434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_RST_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	480d      	ldr	r0, [pc, #52]	; (8001480 <MX_GPIO_Init+0x148>)
 800144a:	f001 fd25 	bl	8002e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : WiFi_EN_Pin */
  GPIO_InitStruct.Pin = WiFi_EN_Pin;
 800144e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WiFi_EN_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_GPIO_Init+0x144>)
 8001468:	f001 fd16 	bl	8002e98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	; 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	40020800 	.word	0x40020800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400

08001484 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	e009      	b.n	80014a8 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f8d1 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbf1      	blt.n	8001494 <ITM0_Write+0x10>
  }
  return len;
 80014b0:	683b      	ldr	r3, [r7, #0]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <SysTick_Handler>:

void SysTick_Handler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80014c2:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */
	unsigned char text[512];
	int ns=0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	ms_ticks++;	//100 ms
 80014ca:	4b68      	ldr	r3, [pc, #416]	; (800166c <SysTick_Handler+0x1b0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	4a66      	ldr	r2, [pc, #408]	; (800166c <SysTick_Handler+0x1b0>)
 80014d2:	6013      	str	r3, [r2, #0]

	if(wf._estado_conexion!=ESPstate)
 80014d4:	4b66      	ldr	r3, [pc, #408]	; (8001670 <SysTick_Handler+0x1b4>)
 80014d6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80014da:	4b66      	ldr	r3, [pc, #408]	; (8001674 <SysTick_Handler+0x1b8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d015      	beq.n	800150e <SysTick_Handler+0x52>
	{
		ESPstate=wf._estado_conexion;
 80014e2:	4b63      	ldr	r3, [pc, #396]	; (8001670 <SysTick_Handler+0x1b4>)
 80014e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014e8:	4a62      	ldr	r2, [pc, #392]	; (8001674 <SysTick_Handler+0x1b8>)
 80014ea:	6013      	str	r3, [r2, #0]
		ns=INTOA(ESPstate,text);
 80014ec:	4b61      	ldr	r3, [pc, #388]	; (8001674 <SysTick_Handler+0x1b8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	463a      	mov	r2, r7
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00d faa1 	bl	800ea3c <INTOA>
 80014fa:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
		HAL_UART_Transmit_IT(&huart2,&text,ns);
 80014fe:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001502:	b29a      	uxth	r2, r3
 8001504:	463b      	mov	r3, r7
 8001506:	4619      	mov	r1, r3
 8001508:	485b      	ldr	r0, [pc, #364]	; (8001678 <SysTick_Handler+0x1bc>)
 800150a:	f004 f811 	bl	8005530 <HAL_UART_Transmit_IT>

	}

	ESP_ticks++;
 800150e:	4b5b      	ldr	r3, [pc, #364]	; (800167c <SysTick_Handler+0x1c0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	4a59      	ldr	r2, [pc, #356]	; (800167c <SysTick_Handler+0x1c0>)
 8001516:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 8001518:	4b59      	ldr	r3, [pc, #356]	; (8001680 <SysTick_Handler+0x1c4>)
 800151a:	791b      	ldrb	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d004      	beq.n	800152a <SysTick_Handler+0x6e>
 8001520:	4b58      	ldr	r3, [pc, #352]	; (8001684 <SysTick_Handler+0x1c8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3301      	adds	r3, #1
 8001526:	4a57      	ldr	r2, [pc, #348]	; (8001684 <SysTick_Handler+0x1c8>)
 8001528:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 800152a:	4b55      	ldr	r3, [pc, #340]	; (8001680 <SysTick_Handler+0x1c4>)
 800152c:	791b      	ldrb	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00c      	beq.n	800154c <SysTick_Handler+0x90>
 8001532:	4b53      	ldr	r3, [pc, #332]	; (8001680 <SysTick_Handler+0x1c4>)
 8001534:	885b      	ldrh	r3, [r3, #2]
 8001536:	461a      	mov	r2, r3
 8001538:	4b52      	ldr	r3, [pc, #328]	; (8001684 <SysTick_Handler+0x1c8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	da05      	bge.n	800154c <SysTick_Handler+0x90>
		{
			mb_eth._w_answer=0;
 8001540:	4b4f      	ldr	r3, [pc, #316]	; (8001680 <SysTick_Handler+0x1c4>)
 8001542:	2200      	movs	r2, #0
 8001544:	711a      	strb	r2, [r3, #4]
			MB_TOUT_ticks=0;
 8001546:	4b4f      	ldr	r3, [pc, #316]	; (8001684 <SysTick_Handler+0x1c8>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
		}
	}*/
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 800154c:	4b48      	ldr	r3, [pc, #288]	; (8001670 <SysTick_Handler+0x1b4>)
 800154e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001552:	f240 2261 	movw	r2, #609	; 0x261
 8001556:	4293      	cmp	r3, r2
 8001558:	d005      	beq.n	8001566 <SysTick_Handler+0xaa>
 800155a:	4b45      	ldr	r3, [pc, #276]	; (8001670 <SysTick_Handler+0x1b4>)
 800155c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001560:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001564:	d109      	bne.n	800157a <SysTick_Handler+0xbe>
 8001566:	4b42      	ldr	r3, [pc, #264]	; (8001670 <SysTick_Handler+0x1b4>)
 8001568:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800156c:	2b00      	cmp	r3, #0
 800156e:	d104      	bne.n	800157a <SysTick_Handler+0xbe>
 8001570:	4b45      	ldr	r3, [pc, #276]	; (8001688 <SysTick_Handler+0x1cc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	3301      	adds	r3, #1
 8001576:	4a44      	ldr	r2, [pc, #272]	; (8001688 <SysTick_Handler+0x1cc>)
 8001578:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 5000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;					//230517 wf_snd_flag_ticks>= 2000
 800157a:	4b43      	ldr	r3, [pc, #268]	; (8001688 <SysTick_Handler+0x1cc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001582:	4293      	cmp	r3, r2
 8001584:	dd0c      	ble.n	80015a0 <SysTick_Handler+0xe4>
 8001586:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <SysTick_Handler+0x1b4>)
 8001588:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 800158c:	2b01      	cmp	r3, #1
 800158e:	d007      	beq.n	80015a0 <SysTick_Handler+0xe4>
 8001590:	4b37      	ldr	r3, [pc, #220]	; (8001670 <SysTick_Handler+0x1b4>)
 8001592:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <SysTick_Handler+0xe4>
 800159a:	4b3c      	ldr	r3, [pc, #240]	; (800168c <SysTick_Handler+0x1d0>)
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S_status == 0)
 80015a0:	4b3b      	ldr	r3, [pc, #236]	; (8001690 <SysTick_Handler+0x1d4>)
 80015a2:	7d9b      	ldrb	r3, [r3, #22]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d111      	bne.n	80015cc <SysTick_Handler+0x110>
	{
		ETH.ETH_WDG++;
 80015a8:	4b39      	ldr	r3, [pc, #228]	; (8001690 <SysTick_Handler+0x1d4>)
 80015aa:	8a9b      	ldrh	r3, [r3, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	4b37      	ldr	r3, [pc, #220]	; (8001690 <SysTick_Handler+0x1d4>)
 80015b2:	829a      	strh	r2, [r3, #20]
		if (ETH.ETH_WDG>=64000)
 80015b4:	4b36      	ldr	r3, [pc, #216]	; (8001690 <SysTick_Handler+0x1d4>)
 80015b6:	8a9b      	ldrh	r3, [r3, #20]
 80015b8:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80015bc:	d306      	bcc.n	80015cc <SysTick_Handler+0x110>
		{
			eth_reset=1;
 80015be:	4b35      	ldr	r3, [pc, #212]	; (8001694 <SysTick_Handler+0x1d8>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
			ETH.ETH_WDG=64000;
 80015c4:	4b32      	ldr	r3, [pc, #200]	; (8001690 <SysTick_Handler+0x1d4>)
 80015c6:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80015ca:	829a      	strh	r2, [r3, #20]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <SysTick_Handler+0x1b0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b64      	cmp	r3, #100	; 0x64
 80015d2:	f040 84f0 	bne.w	8001fb6 <SysTick_Handler+0xafa>
  {
	  dbgn++;
 80015d6:	4b30      	ldr	r3, [pc, #192]	; (8001698 <SysTick_Handler+0x1dc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	4a2e      	ldr	r2, [pc, #184]	; (8001698 <SysTick_Handler+0x1dc>)
 80015de:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 80015e0:	4b22      	ldr	r3, [pc, #136]	; (800166c <SysTick_Handler+0x1b0>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 80015e6:	4b2d      	ldr	r3, [pc, #180]	; (800169c <SysTick_Handler+0x1e0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	4a2b      	ldr	r2, [pc, #172]	; (800169c <SysTick_Handler+0x1e0>)
 80015ee:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 80015f0:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <SysTick_Handler+0x1e4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80015f8:	d102      	bne.n	8001600 <SysTick_Handler+0x144>
 80015fa:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <SysTick_Handler+0x1e4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <SysTick_Handler+0x1e8>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d104      	bne.n	8001612 <SysTick_Handler+0x156>
 8001608:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <SysTick_Handler+0x1e4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	4a24      	ldr	r2, [pc, #144]	; (80016a0 <SysTick_Handler+0x1e4>)
 8001610:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <SysTick_Handler+0x1e4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b64      	cmp	r3, #100	; 0x64
 8001618:	d102      	bne.n	8001620 <SysTick_Handler+0x164>
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <SysTick_Handler+0x1e8>)
 800161c:	2201      	movs	r2, #1
 800161e:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 8001620:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <SysTick_Handler+0x1e8>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d104      	bne.n	8001632 <SysTick_Handler+0x176>
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <SysTick_Handler+0x1e4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	3b01      	subs	r3, #1
 800162e:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <SysTick_Handler+0x1e4>)
 8001630:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <SysTick_Handler+0x1e4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <SysTick_Handler+0x184>
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <SysTick_Handler+0x1e8>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]


	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  if(spi_no_debug)
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <SysTick_Handler+0x1ec>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 84a6 	beq.w	8001f96 <SysTick_Handler+0xada>
	  	  {
	  if(SPI_READ_EN)
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <SysTick_Handler+0x1f0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 84a5 	beq.w	8001f9e <SysTick_Handler+0xae2>
	  {
	     ETH.S_status=eth_rd_SOCKET_STAT(&ETH,S0_REG);  //este era el bardo
 8001654:	2101      	movs	r1, #1
 8001656:	480e      	ldr	r0, [pc, #56]	; (8001690 <SysTick_Handler+0x1d4>)
 8001658:	f00b ff38 	bl	800d4cc <eth_rd_SOCKET_STAT>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <SysTick_Handler+0x1d4>)
 8001662:	759a      	strb	r2, [r3, #22]

		  switch(ETH.S_status)	//Check Socket status
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <SysTick_Handler+0x1d4>)
 8001666:	7d9b      	ldrb	r3, [r3, #22]
 8001668:	e022      	b.n	80016b0 <SysTick_Handler+0x1f4>
 800166a:	bf00      	nop
 800166c:	200002fc 	.word	0x200002fc
 8001670:	200023d4 	.word	0x200023d4
 8001674:	2000444c 	.word	0x2000444c
 8001678:	200002b8 	.word	0x200002b8
 800167c:	20004428 	.word	0x20004428
 8001680:	20003120 	.word	0x20003120
 8001684:	20004430 	.word	0x20004430
 8001688:	20003fbc 	.word	0x20003fbc
 800168c:	20003fb9 	.word	0x20003fb9
 8001690:	20000304 	.word	0x20000304
 8001694:	20004010 	.word	0x20004010
 8001698:	20004454 	.word	0x20004454
 800169c:	20000300 	.word	0x20000300
 80016a0:	2000442c 	.word	0x2000442c
 80016a4:	20004015 	.word	0x20004015
 80016a8:	20004008 	.word	0x20004008
 80016ac:	20004018 	.word	0x20004018
 80016b0:	2b5f      	cmp	r3, #95	; 0x5f
 80016b2:	f200 8479 	bhi.w	8001fa8 <SysTick_Handler+0xaec>
 80016b6:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <SysTick_Handler+0x200>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	0800183d 	.word	0x0800183d
 80016c0:	08001fa9 	.word	0x08001fa9
 80016c4:	08001fa9 	.word	0x08001fa9
 80016c8:	08001fa9 	.word	0x08001fa9
 80016cc:	08001fa9 	.word	0x08001fa9
 80016d0:	08001fa9 	.word	0x08001fa9
 80016d4:	08001fa9 	.word	0x08001fa9
 80016d8:	08001fa9 	.word	0x08001fa9
 80016dc:	08001fa9 	.word	0x08001fa9
 80016e0:	08001fa9 	.word	0x08001fa9
 80016e4:	08001fa9 	.word	0x08001fa9
 80016e8:	08001fa9 	.word	0x08001fa9
 80016ec:	08001fa9 	.word	0x08001fa9
 80016f0:	08001fa9 	.word	0x08001fa9
 80016f4:	08001fa9 	.word	0x08001fa9
 80016f8:	08001fa9 	.word	0x08001fa9
 80016fc:	08001fa9 	.word	0x08001fa9
 8001700:	08001fa9 	.word	0x08001fa9
 8001704:	08001fa9 	.word	0x08001fa9
 8001708:	08001863 	.word	0x08001863
 800170c:	080018e9 	.word	0x080018e9
 8001710:	08001913 	.word	0x08001913
 8001714:	0800193d 	.word	0x0800193d
 8001718:	08001967 	.word	0x08001967
 800171c:	08001d65 	.word	0x08001d65
 8001720:	08001fa9 	.word	0x08001fa9
 8001724:	08001d8f 	.word	0x08001d8f
 8001728:	08001e25 	.word	0x08001e25
 800172c:	08001e75 	.word	0x08001e75
 8001730:	08001ec5 	.word	0x08001ec5
 8001734:	08001fa9 	.word	0x08001fa9
 8001738:	08001fa9 	.word	0x08001fa9
 800173c:	08001fa9 	.word	0x08001fa9
 8001740:	08001fa9 	.word	0x08001fa9
 8001744:	08001eef 	.word	0x08001eef
 8001748:	08001fa9 	.word	0x08001fa9
 800174c:	08001fa9 	.word	0x08001fa9
 8001750:	08001fa9 	.word	0x08001fa9
 8001754:	08001fa9 	.word	0x08001fa9
 8001758:	08001fa9 	.word	0x08001fa9
 800175c:	08001fa9 	.word	0x08001fa9
 8001760:	08001fa9 	.word	0x08001fa9
 8001764:	08001fa9 	.word	0x08001fa9
 8001768:	08001fa9 	.word	0x08001fa9
 800176c:	08001fa9 	.word	0x08001fa9
 8001770:	08001fa9 	.word	0x08001fa9
 8001774:	08001fa9 	.word	0x08001fa9
 8001778:	08001fa9 	.word	0x08001fa9
 800177c:	08001fa9 	.word	0x08001fa9
 8001780:	08001fa9 	.word	0x08001fa9
 8001784:	08001f19 	.word	0x08001f19
 8001788:	08001fa9 	.word	0x08001fa9
 800178c:	08001fa9 	.word	0x08001fa9
 8001790:	08001fa9 	.word	0x08001fa9
 8001794:	08001fa9 	.word	0x08001fa9
 8001798:	08001fa9 	.word	0x08001fa9
 800179c:	08001fa9 	.word	0x08001fa9
 80017a0:	08001fa9 	.word	0x08001fa9
 80017a4:	08001fa9 	.word	0x08001fa9
 80017a8:	08001fa9 	.word	0x08001fa9
 80017ac:	08001fa9 	.word	0x08001fa9
 80017b0:	08001fa9 	.word	0x08001fa9
 80017b4:	08001fa9 	.word	0x08001fa9
 80017b8:	08001fa9 	.word	0x08001fa9
 80017bc:	08001fa9 	.word	0x08001fa9
 80017c0:	08001fa9 	.word	0x08001fa9
 80017c4:	08001f43 	.word	0x08001f43
 80017c8:	08001fa9 	.word	0x08001fa9
 80017cc:	08001fa9 	.word	0x08001fa9
 80017d0:	08001fa9 	.word	0x08001fa9
 80017d4:	08001fa9 	.word	0x08001fa9
 80017d8:	08001fa9 	.word	0x08001fa9
 80017dc:	08001fa9 	.word	0x08001fa9
 80017e0:	08001fa9 	.word	0x08001fa9
 80017e4:	08001fa9 	.word	0x08001fa9
 80017e8:	08001fa9 	.word	0x08001fa9
 80017ec:	08001fa9 	.word	0x08001fa9
 80017f0:	08001fa9 	.word	0x08001fa9
 80017f4:	08001fa9 	.word	0x08001fa9
 80017f8:	08001fa9 	.word	0x08001fa9
 80017fc:	08001fa9 	.word	0x08001fa9
 8001800:	08001fa9 	.word	0x08001fa9
 8001804:	08001fa9 	.word	0x08001fa9
 8001808:	08001fa9 	.word	0x08001fa9
 800180c:	08001fa9 	.word	0x08001fa9
 8001810:	08001fa9 	.word	0x08001fa9
 8001814:	08001fa9 	.word	0x08001fa9
 8001818:	08001fa9 	.word	0x08001fa9
 800181c:	08001fa9 	.word	0x08001fa9
 8001820:	08001fa9 	.word	0x08001fa9
 8001824:	08001fa9 	.word	0x08001fa9
 8001828:	08001fa9 	.word	0x08001fa9
 800182c:	08001fa9 	.word	0x08001fa9
 8001830:	08001fa9 	.word	0x08001fa9
 8001834:	08001fa9 	.word	0x08001fa9
 8001838:	08001f6d 	.word	0x08001f6d
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 800183c:	4b9b      	ldr	r3, [pc, #620]	; (8001aac <SysTick_Handler+0x5f0>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <SysTick_Handler+0x390>
 8001844:	2113      	movs	r1, #19
 8001846:	489a      	ldr	r0, [pc, #616]	; (8001ab0 <SysTick_Handler+0x5f4>)
 8001848:	f7ff fe1c 	bl	8001484 <ITM0_Write>
					 //if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_CLOSED \r\n",strlen("\r\n S0_SOCK_CLOSED \r\n"));
					 //eth_wr_SOCKET_CMD(&ETH, S0_REG ,OPEN );
					 if(ETH.ETH_WDG >= 15000)
 800184c:	4b99      	ldr	r3, [pc, #612]	; (8001ab4 <SysTick_Handler+0x5f8>)
 800184e:	8a9b      	ldrh	r3, [r3, #20]
 8001850:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001854:	4293      	cmp	r3, r2
 8001856:	f240 83a4 	bls.w	8001fa2 <SysTick_Handler+0xae6>
					 {
						  eth_reset=1;
 800185a:	4b97      	ldr	r3, [pc, #604]	; (8001ab8 <SysTick_Handler+0x5fc>)
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
					 }



				 }
			 break;
 8001860:	e39f      	b.n	8001fa2 <SysTick_Handler+0xae6>
			 case  SOCK_INIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 8001862:	4b92      	ldr	r3, [pc, #584]	; (8001aac <SysTick_Handler+0x5f0>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <SysTick_Handler+0x3b6>
 800186a:	2111      	movs	r1, #17
 800186c:	4893      	ldr	r0, [pc, #588]	; (8001abc <SysTick_Handler+0x600>)
 800186e:	f7ff fe09 	bl	8001484 <ITM0_Write>
					 if(ETH.S_ENserver == 1)
 8001872:	4b90      	ldr	r3, [pc, #576]	; (8001ab4 <SysTick_Handler+0x5f8>)
 8001874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001878:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800187c:	2b01      	cmp	r3, #1
 800187e:	d119      	bne.n	80018b4 <SysTick_Handler+0x3f8>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 8001880:	4b8a      	ldr	r3, [pc, #552]	; (8001aac <SysTick_Handler+0x5f0>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <SysTick_Handler+0x3d4>
 8001888:	2111      	movs	r1, #17
 800188a:	488c      	ldr	r0, [pc, #560]	; (8001abc <SysTick_Handler+0x600>)
 800188c:	f7ff fdfa 	bl	8001484 <ITM0_Write>
						 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_INIT \r\n",strlen("\r\n S0_SOCK_INIT \r\n"));
 8001890:	4b8b      	ldr	r3, [pc, #556]	; (8001ac0 <SysTick_Handler+0x604>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <SysTick_Handler+0x3e6>
 8001898:	2212      	movs	r2, #18
 800189a:	498a      	ldr	r1, [pc, #552]	; (8001ac4 <SysTick_Handler+0x608>)
 800189c:	488a      	ldr	r0, [pc, #552]	; (8001ac8 <SysTick_Handler+0x60c>)
 800189e:	f003 fe47 	bl	8005530 <HAL_UART_Transmit_IT>
							eth_wr_SOCKET_CMD(&ETH, S0_REG, LISTEN );
 80018a2:	2202      	movs	r2, #2
 80018a4:	2101      	movs	r1, #1
 80018a6:	4883      	ldr	r0, [pc, #524]	; (8001ab4 <SysTick_Handler+0x5f8>)
 80018a8:	f00b fbb2 	bl	800d010 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 80018ac:	4b81      	ldr	r3, [pc, #516]	; (8001ab4 <SysTick_Handler+0x5f8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	829a      	strh	r2, [r3, #20]
						 	if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n ETH-W5500-CONNECT \r\n",strlen("\r\n ETH-W5500-CONNECT \r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 80018b2:	e379      	b.n	8001fa8 <SysTick_Handler+0xaec>
						    eth_wr_SOCKET_CMD(&ETH,S0_REG, CONNECT);																				//only for server
 80018b4:	2204      	movs	r2, #4
 80018b6:	2101      	movs	r1, #1
 80018b8:	487e      	ldr	r0, [pc, #504]	; (8001ab4 <SysTick_Handler+0x5f8>)
 80018ba:	f00b fba9 	bl	800d010 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5500-CONNECT\r\n",strlen("\r\nETH-W5500-CONNECT\r\n"));
 80018be:	4b7b      	ldr	r3, [pc, #492]	; (8001aac <SysTick_Handler+0x5f0>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <SysTick_Handler+0x412>
 80018c6:	2115      	movs	r1, #21
 80018c8:	4880      	ldr	r0, [pc, #512]	; (8001acc <SysTick_Handler+0x610>)
 80018ca:	f7ff fddb 	bl	8001484 <ITM0_Write>
						 	if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n ETH-W5500-CONNECT \r\n",strlen("\r\n ETH-W5500-CONNECT \r\n"));
 80018ce:	4b7c      	ldr	r3, [pc, #496]	; (8001ac0 <SysTick_Handler+0x604>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d004      	beq.n	80018e0 <SysTick_Handler+0x424>
 80018d6:	2217      	movs	r2, #23
 80018d8:	497d      	ldr	r1, [pc, #500]	; (8001ad0 <SysTick_Handler+0x614>)
 80018da:	487b      	ldr	r0, [pc, #492]	; (8001ac8 <SysTick_Handler+0x60c>)
 80018dc:	f003 fe28 	bl	8005530 <HAL_UART_Transmit_IT>
						 	ETH.ETH_WDG=0;
 80018e0:	4b74      	ldr	r3, [pc, #464]	; (8001ab4 <SysTick_Handler+0x5f8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	829a      	strh	r2, [r3, #20]
			 break;
 80018e6:	e35f      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 80018e8:	4b70      	ldr	r3, [pc, #448]	; (8001aac <SysTick_Handler+0x5f0>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <SysTick_Handler+0x43c>
 80018f0:	2113      	movs	r1, #19
 80018f2:	4878      	ldr	r0, [pc, #480]	; (8001ad4 <SysTick_Handler+0x618>)
 80018f4:	f7ff fdc6 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_LISTEN \r\n",strlen("\r\n S0_SOCK_LISTEN \r\n"));
 80018f8:	4b71      	ldr	r3, [pc, #452]	; (8001ac0 <SysTick_Handler+0x604>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d004      	beq.n	800190a <SysTick_Handler+0x44e>
 8001900:	2214      	movs	r2, #20
 8001902:	4975      	ldr	r1, [pc, #468]	; (8001ad8 <SysTick_Handler+0x61c>)
 8001904:	4870      	ldr	r0, [pc, #448]	; (8001ac8 <SysTick_Handler+0x60c>)
 8001906:	f003 fe13 	bl	8005530 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 800190a:	4b6a      	ldr	r3, [pc, #424]	; (8001ab4 <SysTick_Handler+0x5f8>)
 800190c:	2200      	movs	r2, #0
 800190e:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001910:	e34a      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 8001912:	4b66      	ldr	r3, [pc, #408]	; (8001aac <SysTick_Handler+0x5f0>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <SysTick_Handler+0x466>
 800191a:	2114      	movs	r1, #20
 800191c:	486f      	ldr	r0, [pc, #444]	; (8001adc <SysTick_Handler+0x620>)
 800191e:	f7ff fdb1 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_SYNSENT \r\n",strlen("\r\n S0_SOCK_SYNSENT \r\n"));
 8001922:	4b67      	ldr	r3, [pc, #412]	; (8001ac0 <SysTick_Handler+0x604>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d004      	beq.n	8001934 <SysTick_Handler+0x478>
 800192a:	2215      	movs	r2, #21
 800192c:	496c      	ldr	r1, [pc, #432]	; (8001ae0 <SysTick_Handler+0x624>)
 800192e:	4866      	ldr	r0, [pc, #408]	; (8001ac8 <SysTick_Handler+0x60c>)
 8001930:	f003 fdfe 	bl	8005530 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001934:	4b5f      	ldr	r3, [pc, #380]	; (8001ab4 <SysTick_Handler+0x5f8>)
 8001936:	2200      	movs	r2, #0
 8001938:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 800193a:	e335      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 800193c:	4b5b      	ldr	r3, [pc, #364]	; (8001aac <SysTick_Handler+0x5f0>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <SysTick_Handler+0x490>
 8001944:	2114      	movs	r1, #20
 8001946:	4867      	ldr	r0, [pc, #412]	; (8001ae4 <SysTick_Handler+0x628>)
 8001948:	f7ff fd9c 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_SYNRECV \r\n",strlen("\r\n S0_SOCK_SYNRECV \r\n"));
 800194c:	4b5c      	ldr	r3, [pc, #368]	; (8001ac0 <SysTick_Handler+0x604>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d004      	beq.n	800195e <SysTick_Handler+0x4a2>
 8001954:	2215      	movs	r2, #21
 8001956:	4964      	ldr	r1, [pc, #400]	; (8001ae8 <SysTick_Handler+0x62c>)
 8001958:	485b      	ldr	r0, [pc, #364]	; (8001ac8 <SysTick_Handler+0x60c>)
 800195a:	f003 fde9 	bl	8005530 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 800195e:	4b55      	ldr	r3, [pc, #340]	; (8001ab4 <SysTick_Handler+0x5f8>)
 8001960:	2200      	movs	r2, #0
 8001962:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001964:	e320      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 8001966:	4b51      	ldr	r3, [pc, #324]	; (8001aac <SysTick_Handler+0x5f0>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <SysTick_Handler+0x4ba>
 800196e:	2118      	movs	r1, #24
 8001970:	485e      	ldr	r0, [pc, #376]	; (8001aec <SysTick_Handler+0x630>)
 8001972:	f7ff fd87 	bl	8001484 <ITM0_Write>
					 //if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_ESTABLISHED \r\n",strlen("\r\n S0_SOCK_ESTABLISHED \r\n"));
					 ETH.ETH_WDG=0;
 8001976:	4b4f      	ldr	r3, [pc, #316]	; (8001ab4 <SysTick_Handler+0x5f8>)
 8001978:	2200      	movs	r2, #0
 800197a:	829a      	strh	r2, [r3, #20]

					if (ETH.S_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 800197c:	4b4d      	ldr	r3, [pc, #308]	; (8001ab4 <SysTick_Handler+0x5f8>)
 800197e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001982:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001986:	2b01      	cmp	r3, #1
 8001988:	f040 80c6 	bne.w	8001b18 <SysTick_Handler+0x65c>
					{

						S0_get_size = SPI_ETH_REG(&ETH, S_RX_RSR ,S0_REG, SPI_READ, spi_Data,2);//S0_get_size = SPI_ETH_REG(&ETH, S_RX_SZ_ADDR_BASEHH,S_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800198c:	2302      	movs	r3, #2
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	4b57      	ldr	r3, [pc, #348]	; (8001af0 <SysTick_Handler+0x634>)
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2300      	movs	r3, #0
 8001996:	2201      	movs	r2, #1
 8001998:	2126      	movs	r1, #38	; 0x26
 800199a:	4846      	ldr	r0, [pc, #280]	; (8001ab4 <SysTick_Handler+0x5f8>)
 800199c:	f00b f9e9 	bl	800cd72 <SPI_ETH_REG>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <SysTick_Handler+0x638>)
 80019a6:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 80019a8:	4b52      	ldr	r3, [pc, #328]	; (8001af4 <SysTick_Handler+0x638>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 82fa 	beq.w	8001fa6 <SysTick_Handler+0xaea>
							{
								eth_rd_SOCKET_DATA(&ETH,S0_RX_BUFF,&rx_mem_pointer,S0_get_size); // read socket data
 80019b2:	4b50      	ldr	r3, [pc, #320]	; (8001af4 <SysTick_Handler+0x638>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	4a50      	ldr	r2, [pc, #320]	; (8001af8 <SysTick_Handler+0x63c>)
 80019b8:	2103      	movs	r1, #3
 80019ba:	483e      	ldr	r0, [pc, #248]	; (8001ab4 <SysTick_Handler+0x5f8>)
 80019bc:	f00b fdbc 	bl	800d538 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S_RX_RD0,rx_mem_pointer,S0_REG );		// write rx memory pointer
 80019c0:	4b4d      	ldr	r3, [pc, #308]	; (8001af8 <SysTick_Handler+0x63c>)
 80019c2:	881a      	ldrh	r2, [r3, #0]
 80019c4:	2301      	movs	r3, #1
 80019c6:	2128      	movs	r1, #40	; 0x28
 80019c8:	483a      	ldr	r0, [pc, #232]	; (8001ab4 <SysTick_Handler+0x5f8>)
 80019ca:	f00b fa58 	bl	800ce7e <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,RECV);							// write command to execute
 80019ce:	2240      	movs	r2, #64	; 0x40
 80019d0:	2101      	movs	r1, #1
 80019d2:	4838      	ldr	r0, [pc, #224]	; (8001ab4 <SysTick_Handler+0x5f8>)
 80019d4:	f00b fb1c 	bl	800d010 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,S0_REG))						// wait until end of command execution
 80019d8:	bf00      	nop
 80019da:	2101      	movs	r1, #1
 80019dc:	4835      	ldr	r0, [pc, #212]	; (8001ab4 <SysTick_Handler+0x5f8>)
 80019de:	f00b fd90 	bl	800d502 <eth_rd_SOCKET_CMD>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f8      	bne.n	80019da <SysTick_Handler+0x51e>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 80019e8:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <SysTick_Handler+0x638>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	2300      	movs	r3, #0
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2300      	movs	r3, #0
 80019f4:	4941      	ldr	r1, [pc, #260]	; (8001afc <SysTick_Handler+0x640>)
 80019f6:	4842      	ldr	r0, [pc, #264]	; (8001b00 <SysTick_Handler+0x644>)
 80019f8:	f00d f8b2 	bl	800eb60 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 80019fc:	4b3d      	ldr	r3, [pc, #244]	; (8001af4 <SysTick_Handler+0x638>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <SysTick_Handler+0x648>)
 8001a04:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

								if(S0_get_size > 0)	{ ETH.S_data_available=1;}					//Flag data received
 8001a08:	4b3a      	ldr	r3, [pc, #232]	; (8001af4 <SysTick_Handler+0x638>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d002      	beq.n	8001a16 <SysTick_Handler+0x55a>
 8001a10:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <SysTick_Handler+0x5f8>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	769a      	strb	r2, [r3, #26]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001a16:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <SysTick_Handler+0x648>)
 8001a18:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4838      	ldr	r0, [pc, #224]	; (8001b00 <SysTick_Handler+0x644>)
 8001a20:	f009 fe48 	bl	800b6b4 <ModBUS_Check>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00d      	beq.n	8001a46 <SysTick_Handler+0x58a>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001a2a:	4836      	ldr	r0, [pc, #216]	; (8001b04 <SysTick_Handler+0x648>)
 8001a2c:	f009 ff44 	bl	800b8b8 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001a30:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <SysTick_Handler+0x648>)
 8001a32:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8001a36:	2300      	movs	r3, #0
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	4932      	ldr	r1, [pc, #200]	; (8001b08 <SysTick_Handler+0x64c>)
 8001a3e:	482f      	ldr	r0, [pc, #188]	; (8001afc <SysTick_Handler+0x640>)
 8001a40:	f00d f88e 	bl	800eb60 <CopiaVector>
 8001a44:	e010      	b.n	8001a68 <SysTick_Handler+0x5ac>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <SysTick_Handler+0x5f0>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <SysTick_Handler+0x59a>
 8001a4e:	2111      	movs	r1, #17
 8001a50:	482e      	ldr	r0, [pc, #184]	; (8001b0c <SysTick_Handler+0x650>)
 8001a52:	f7ff fd17 	bl	8001484 <ITM0_Write>
									if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n NO MBUS \r\n",strlen("\r\n NO MBUS \r\n"));
 8001a56:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <SysTick_Handler+0x604>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d004      	beq.n	8001a68 <SysTick_Handler+0x5ac>
 8001a5e:	220d      	movs	r2, #13
 8001a60:	492a      	ldr	r1, [pc, #168]	; (8001b0c <SysTick_Handler+0x650>)
 8001a62:	4819      	ldr	r0, [pc, #100]	; (8001ac8 <SysTick_Handler+0x60c>)
 8001a64:	f003 fd64 	bl	8005530 <HAL_UART_Transmit_IT>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001a68:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <SysTick_Handler+0x648>)
 8001a6a:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <SysTick_Handler+0x654>)
 8001a72:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,S0_RX_BUFF, &tx_mem_pointer, send_size);	// write socket data
 8001a74:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <SysTick_Handler+0x654>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	4a26      	ldr	r2, [pc, #152]	; (8001b14 <SysTick_Handler+0x658>)
 8001a7a:	2103      	movs	r1, #3
 8001a7c:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <SysTick_Handler+0x5f8>)
 8001a7e:	f00b fdec 	bl	800d65a <eth_wr_SOCKET_DATA>

								SPI_ETH_WR_REG_16(&ETH,S_TX_WR,tx_mem_pointer,S0_REG);			// write tx memory pointer//SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer,0);			// write tx memory pointer
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <SysTick_Handler+0x658>)
 8001a84:	881a      	ldrh	r2, [r3, #0]
 8001a86:	2301      	movs	r3, #1
 8001a88:	2124      	movs	r1, #36	; 0x24
 8001a8a:	480a      	ldr	r0, [pc, #40]	; (8001ab4 <SysTick_Handler+0x5f8>)
 8001a8c:	f00b f9f7 	bl	800ce7e <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,SEND);							// write command to execute
 8001a90:	2220      	movs	r2, #32
 8001a92:	2101      	movs	r1, #1
 8001a94:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <SysTick_Handler+0x5f8>)
 8001a96:	f00b fabb 	bl	800d010 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,S0_REG))						// wait until end of command execution
 8001a9a:	bf00      	nop
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <SysTick_Handler+0x5f8>)
 8001aa0:	f00b fd2f 	bl	800d502 <eth_rd_SOCKET_CMD>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f8      	bne.n	8001a9c <SysTick_Handler+0x5e0>

							}
						}
					}
				 }
			 break;
 8001aaa:	e27c      	b.n	8001fa6 <SysTick_Handler+0xaea>
 8001aac:	20003fb8 	.word	0x20003fb8
 8001ab0:	08010288 	.word	0x08010288
 8001ab4:	20000304 	.word	0x20000304
 8001ab8:	20004010 	.word	0x20004010
 8001abc:	0801029c 	.word	0x0801029c
 8001ac0:	20000021 	.word	0x20000021
 8001ac4:	080102b0 	.word	0x080102b0
 8001ac8:	200002b8 	.word	0x200002b8
 8001acc:	080102c4 	.word	0x080102c4
 8001ad0:	080102dc 	.word	0x080102dc
 8001ad4:	080102f4 	.word	0x080102f4
 8001ad8:	08010308 	.word	0x08010308
 8001adc:	08010320 	.word	0x08010320
 8001ae0:	08010338 	.word	0x08010338
 8001ae4:	08010350 	.word	0x08010350
 8001ae8:	08010368 	.word	0x08010368
 8001aec:	08010380 	.word	0x08010380
 8001af0:	20003fc8 	.word	0x20003fc8
 8001af4:	20003fc0 	.word	0x20003fc0
 8001af8:	20003fc4 	.word	0x20003fc4
 8001afc:	20000328 	.word	0x20000328
 8001b00:	2000312d 	.word	0x2000312d
 8001b04:	20003120 	.word	0x20003120
 8001b08:	200032b4 	.word	0x200032b4
 8001b0c:	0801039c 	.word	0x0801039c
 8001b10:	20003fc6 	.word	0x20003fc6
 8001b14:	20003fc2 	.word	0x20003fc2
						if (mb_eth._w_answer==0)
 8001b18:	4ba7      	ldr	r3, [pc, #668]	; (8001db8 <SysTick_Handler+0x8fc>)
 8001b1a:	791b      	ldrb	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f040 8088 	bne.w	8001c32 <SysTick_Handler+0x776>
							ETH.data[0]=0x00;
 8001b22:	4ba6      	ldr	r3, [pc, #664]	; (8001dbc <SysTick_Handler+0x900>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[1]=0x00;
 8001b2a:	4ba4      	ldr	r3, [pc, #656]	; (8001dbc <SysTick_Handler+0x900>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[2]=0x00;
 8001b32:	4ba2      	ldr	r3, [pc, #648]	; (8001dbc <SysTick_Handler+0x900>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[3]=0x00;
 8001b3a:	4ba0      	ldr	r3, [pc, #640]	; (8001dbc <SysTick_Handler+0x900>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							ETH.data[4]=0x00;
 8001b42:	4b9e      	ldr	r3, [pc, #632]	; (8001dbc <SysTick_Handler+0x900>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
							ETH.data[5]=0x06;
 8001b4a:	4b9c      	ldr	r3, [pc, #624]	; (8001dbc <SysTick_Handler+0x900>)
 8001b4c:	2206      	movs	r2, #6
 8001b4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
							ETH.data[6]=0x01;
 8001b52:	4b9a      	ldr	r3, [pc, #616]	; (8001dbc <SysTick_Handler+0x900>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
							ETH.data[7]=0x03;
 8001b5a:	4b98      	ldr	r3, [pc, #608]	; (8001dbc <SysTick_Handler+0x900>)
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
							ETH.data[8]=0x00;
 8001b62:	4b96      	ldr	r3, [pc, #600]	; (8001dbc <SysTick_Handler+0x900>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
							ETH.data[9]=0x00;
 8001b6a:	4b94      	ldr	r3, [pc, #592]	; (8001dbc <SysTick_Handler+0x900>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
							ETH.data[10]=0x00;
 8001b72:	4b92      	ldr	r3, [pc, #584]	; (8001dbc <SysTick_Handler+0x900>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
							ETH.data[11]=0x0A;
 8001b7a:	4b90      	ldr	r3, [pc, #576]	; (8001dbc <SysTick_Handler+0x900>)
 8001b7c:	220a      	movs	r2, #10
 8001b7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
							send_size=12;
 8001b82:	4b8f      	ldr	r3, [pc, #572]	; (8001dc0 <SysTick_Handler+0x904>)
 8001b84:	220c      	movs	r2, #12
 8001b86:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,16);
 8001b88:	2210      	movs	r2, #16
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	488a      	ldr	r0, [pc, #552]	; (8001db8 <SysTick_Handler+0x8fc>)
 8001b8e:	f009 fe3c 	bl	800b80a <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001b92:	2300      	movs	r3, #0
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2300      	movs	r3, #0
 8001b98:	220c      	movs	r2, #12
 8001b9a:	498a      	ldr	r1, [pc, #552]	; (8001dc4 <SysTick_Handler+0x908>)
 8001b9c:	488a      	ldr	r0, [pc, #552]	; (8001dc8 <SysTick_Handler+0x90c>)
 8001b9e:	f00c ffdf 	bl	800eb60 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,S0_TX_BUFF, &tx_mem_pointer, send_size);	// write socket data
 8001ba2:	4b87      	ldr	r3, [pc, #540]	; (8001dc0 <SysTick_Handler+0x904>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	4a89      	ldr	r2, [pc, #548]	; (8001dcc <SysTick_Handler+0x910>)
 8001ba8:	2102      	movs	r1, #2
 8001baa:	4884      	ldr	r0, [pc, #528]	; (8001dbc <SysTick_Handler+0x900>)
 8001bac:	f00b fd55 	bl	800d65a <eth_wr_SOCKET_DATA>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001bb0:	4982      	ldr	r1, [pc, #520]	; (8001dbc <SysTick_Handler+0x900>)
 8001bb2:	4887      	ldr	r0, [pc, #540]	; (8001dd0 <SysTick_Handler+0x914>)
 8001bb4:	f00b fdf5 	bl	800d7a2 <SPI_ETH_SNIFF>
							SPI_ETH_WR_REG_16(&ETH,S_TX_WR,tx_mem_pointer,S0_REG);			// write tx memory pointer
 8001bb8:	4b84      	ldr	r3, [pc, #528]	; (8001dcc <SysTick_Handler+0x910>)
 8001bba:	881a      	ldrh	r2, [r3, #0]
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	2124      	movs	r1, #36	; 0x24
 8001bc0:	487e      	ldr	r0, [pc, #504]	; (8001dbc <SysTick_Handler+0x900>)
 8001bc2:	f00b f95c 	bl	800ce7e <SPI_ETH_WR_REG_16>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001bc6:	497d      	ldr	r1, [pc, #500]	; (8001dbc <SysTick_Handler+0x900>)
 8001bc8:	4881      	ldr	r0, [pc, #516]	; (8001dd0 <SysTick_Handler+0x914>)
 8001bca:	f00b fdea 	bl	800d7a2 <SPI_ETH_SNIFF>
							eth_wr_SOCKET_CMD(&ETH,S0_REG,SEND);							// write command to execute
 8001bce:	2220      	movs	r2, #32
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	487a      	ldr	r0, [pc, #488]	; (8001dbc <SysTick_Handler+0x900>)
 8001bd4:	f00b fa1c 	bl	800d010 <eth_wr_SOCKET_CMD>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001bd8:	4978      	ldr	r1, [pc, #480]	; (8001dbc <SysTick_Handler+0x900>)
 8001bda:	487d      	ldr	r0, [pc, #500]	; (8001dd0 <SysTick_Handler+0x914>)
 8001bdc:	f00b fde1 	bl	800d7a2 <SPI_ETH_SNIFF>
							uint16_t read=0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
								read=SPI_ETH_REG(&ETH, S_IR,S0_REG,SPI_READ, ETH.GAR,1);
 8001be6:	2301      	movs	r3, #1
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	4b7a      	ldr	r3, [pc, #488]	; (8001dd4 <SysTick_Handler+0x918>)
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	4871      	ldr	r0, [pc, #452]	; (8001dbc <SysTick_Handler+0x900>)
 8001bf6:	f00b f8bc 	bl	800cd72 <SPI_ETH_REG>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
							mb_eth._w_answer=1;	// Waiting answer flag_w_answer=1;	// Waiting answer flag
 8001c00:	4b6d      	ldr	r3, [pc, #436]	; (8001db8 <SysTick_Handler+0x8fc>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	711a      	strb	r2, [r3, #4]
							MB_TOUT_ticks=0;	// restart counting
 8001c06:	4b74      	ldr	r3, [pc, #464]	; (8001dd8 <SysTick_Handler+0x91c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001c0c:	4b73      	ldr	r3, [pc, #460]	; (8001ddc <SysTick_Handler+0x920>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <SysTick_Handler+0x760>
 8001c14:	2117      	movs	r1, #23
 8001c16:	4872      	ldr	r0, [pc, #456]	; (8001de0 <SysTick_Handler+0x924>)
 8001c18:	f7ff fc34 	bl	8001484 <ITM0_Write>
							if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n SENT MBUS REQ \r\n",strlen("\r\n SENT MBUS REQ \r\n"));
 8001c1c:	4b71      	ldr	r3, [pc, #452]	; (8001de4 <SysTick_Handler+0x928>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 81c0 	beq.w	8001fa6 <SysTick_Handler+0xaea>
 8001c26:	2213      	movs	r2, #19
 8001c28:	496d      	ldr	r1, [pc, #436]	; (8001de0 <SysTick_Handler+0x924>)
 8001c2a:	486f      	ldr	r0, [pc, #444]	; (8001de8 <SysTick_Handler+0x92c>)
 8001c2c:	f003 fc80 	bl	8005530 <HAL_UART_Transmit_IT>
			 break;
 8001c30:	e1b9      	b.n	8001fa6 <SysTick_Handler+0xaea>
						S0_get_size = SPI_ETH_REG(&ETH, S_RX_RSR ,S0_REG ,SPI_READ, spi_Data,2);
 8001c32:	2302      	movs	r3, #2
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	4b6d      	ldr	r3, [pc, #436]	; (8001dec <SysTick_Handler+0x930>)
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	2126      	movs	r1, #38	; 0x26
 8001c40:	485e      	ldr	r0, [pc, #376]	; (8001dbc <SysTick_Handler+0x900>)
 8001c42:	f00b f896 	bl	800cd72 <SPI_ETH_REG>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b69      	ldr	r3, [pc, #420]	; (8001df0 <SysTick_Handler+0x934>)
 8001c4c:	801a      	strh	r2, [r3, #0]
						if(S0_get_size != 0x00)
 8001c4e:	4b68      	ldr	r3, [pc, #416]	; (8001df0 <SysTick_Handler+0x934>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 81a7 	beq.w	8001fa6 <SysTick_Handler+0xaea>
								eth_rd_SOCKET_DATA(&ETH,S0_RX_BUFF,&rx_mem_pointer,S0_get_size); // read socket data
 8001c58:	4b65      	ldr	r3, [pc, #404]	; (8001df0 <SysTick_Handler+0x934>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	4a65      	ldr	r2, [pc, #404]	; (8001df4 <SysTick_Handler+0x938>)
 8001c5e:	2103      	movs	r1, #3
 8001c60:	4856      	ldr	r0, [pc, #344]	; (8001dbc <SysTick_Handler+0x900>)
 8001c62:	f00b fc69 	bl	800d538 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S_RX_RD0,rx_mem_pointer,S0_REG);		// write rx memory pointer
 8001c66:	4b63      	ldr	r3, [pc, #396]	; (8001df4 <SysTick_Handler+0x938>)
 8001c68:	881a      	ldrh	r2, [r3, #0]
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	2128      	movs	r1, #40	; 0x28
 8001c6e:	4853      	ldr	r0, [pc, #332]	; (8001dbc <SysTick_Handler+0x900>)
 8001c70:	f00b f905 	bl	800ce7e <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,RECV);							// write command to execute
 8001c74:	2240      	movs	r2, #64	; 0x40
 8001c76:	2101      	movs	r1, #1
 8001c78:	4850      	ldr	r0, [pc, #320]	; (8001dbc <SysTick_Handler+0x900>)
 8001c7a:	f00b f9c9 	bl	800d010 <eth_wr_SOCKET_CMD>
								if (ETH_DBG_EN) ITM0_Write("\r\n RCVD DATA \r\n",strlen("\r\n RCVD DATA \r\n"));
 8001c7e:	4b57      	ldr	r3, [pc, #348]	; (8001ddc <SysTick_Handler+0x920>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <SysTick_Handler+0x7d2>
 8001c86:	210f      	movs	r1, #15
 8001c88:	485b      	ldr	r0, [pc, #364]	; (8001df8 <SysTick_Handler+0x93c>)
 8001c8a:	f7ff fbfb 	bl	8001484 <ITM0_Write>
								if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n RCVD DATA \r\n",strlen("\r\n RCVD DATA \r\n"));
 8001c8e:	4b55      	ldr	r3, [pc, #340]	; (8001de4 <SysTick_Handler+0x928>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d004      	beq.n	8001ca0 <SysTick_Handler+0x7e4>
 8001c96:	220f      	movs	r2, #15
 8001c98:	4957      	ldr	r1, [pc, #348]	; (8001df8 <SysTick_Handler+0x93c>)
 8001c9a:	4853      	ldr	r0, [pc, #332]	; (8001de8 <SysTick_Handler+0x92c>)
 8001c9c:	f003 fc48 	bl	8005530 <HAL_UART_Transmit_IT>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001ca0:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <SysTick_Handler+0x934>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2300      	movs	r3, #0
 8001cac:	4946      	ldr	r1, [pc, #280]	; (8001dc8 <SysTick_Handler+0x90c>)
 8001cae:	4853      	ldr	r0, [pc, #332]	; (8001dfc <SysTick_Handler+0x940>)
 8001cb0:	f00c ff56 	bl	800eb60 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001cb4:	4b4e      	ldr	r3, [pc, #312]	; (8001df0 <SysTick_Handler+0x934>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <SysTick_Handler+0x8fc>)
 8001cbc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
								if(S0_get_size > 0)	{ ETH.S_data_available=1;}
 8001cc0:	4b4b      	ldr	r3, [pc, #300]	; (8001df0 <SysTick_Handler+0x934>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <SysTick_Handler+0x812>
 8001cc8:	4b3c      	ldr	r3, [pc, #240]	; (8001dbc <SysTick_Handler+0x900>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	769a      	strb	r2, [r3, #26]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001cce:	4b3a      	ldr	r3, [pc, #232]	; (8001db8 <SysTick_Handler+0x8fc>)
 8001cd0:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4849      	ldr	r0, [pc, #292]	; (8001dfc <SysTick_Handler+0x940>)
 8001cd8:	f009 fcec 	bl	800b6b4 <ModBUS_Check>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d02d      	beq.n	8001d3e <SysTick_Handler+0x882>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001ce2:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <SysTick_Handler+0x8fc>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	711a      	strb	r2, [r3, #4]
										MB_TOUT_ticks=0;
 8001ce8:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <SysTick_Handler+0x91c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001cee:	4832      	ldr	r0, [pc, #200]	; (8001db8 <SysTick_Handler+0x8fc>)
 8001cf0:	f009 fde2 	bl	800b8b8 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001cf4:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <SysTick_Handler+0x8fc>)
 8001cf6:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	493e      	ldr	r1, [pc, #248]	; (8001dfc <SysTick_Handler+0x940>)
 8001d02:	483f      	ldr	r0, [pc, #252]	; (8001e00 <SysTick_Handler+0x944>)
 8001d04:	f00c ff2c 	bl	800eb60 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	2240      	movs	r2, #64	; 0x40
 8001d10:	493c      	ldr	r1, [pc, #240]	; (8001e04 <SysTick_Handler+0x948>)
 8001d12:	483d      	ldr	r0, [pc, #244]	; (8001e08 <SysTick_Handler+0x94c>)
 8001d14:	f00c ff24 	bl	800eb60 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\ RCVD MBUS REQ \r\n"));
 8001d18:	4b30      	ldr	r3, [pc, #192]	; (8001ddc <SysTick_Handler+0x920>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <SysTick_Handler+0x86c>
 8001d20:	2113      	movs	r1, #19
 8001d22:	483a      	ldr	r0, [pc, #232]	; (8001e0c <SysTick_Handler+0x950>)
 8001d24:	f7ff fbae 	bl	8001484 <ITM0_Write>
										if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n RCVD MBUS REQ \r\n",strlen("\r\n RCVD MBUS REQ \r\n"));
 8001d28:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <SysTick_Handler+0x928>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 813a 	beq.w	8001fa6 <SysTick_Handler+0xaea>
 8001d32:	2213      	movs	r2, #19
 8001d34:	4935      	ldr	r1, [pc, #212]	; (8001e0c <SysTick_Handler+0x950>)
 8001d36:	482c      	ldr	r0, [pc, #176]	; (8001de8 <SysTick_Handler+0x92c>)
 8001d38:	f003 fbfa 	bl	8005530 <HAL_UART_Transmit_IT>
			 break;
 8001d3c:	e133      	b.n	8001fa6 <SysTick_Handler+0xaea>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n NO MBUS \r\n"));
 8001d3e:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <SysTick_Handler+0x920>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <SysTick_Handler+0x892>
 8001d46:	210d      	movs	r1, #13
 8001d48:	4831      	ldr	r0, [pc, #196]	; (8001e10 <SysTick_Handler+0x954>)
 8001d4a:	f7ff fb9b 	bl	8001484 <ITM0_Write>
										if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n NO MBUS \r\n",strlen("\r\n NO MBUS \r\n"));
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <SysTick_Handler+0x928>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8127 	beq.w	8001fa6 <SysTick_Handler+0xaea>
 8001d58:	220d      	movs	r2, #13
 8001d5a:	492d      	ldr	r1, [pc, #180]	; (8001e10 <SysTick_Handler+0x954>)
 8001d5c:	4822      	ldr	r0, [pc, #136]	; (8001de8 <SysTick_Handler+0x92c>)
 8001d5e:	f003 fbe7 	bl	8005530 <HAL_UART_Transmit_IT>
			 break;
 8001d62:	e120      	b.n	8001fa6 <SysTick_Handler+0xaea>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001d64:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <SysTick_Handler+0x920>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <SysTick_Handler+0x8b8>
 8001d6c:	2115      	movs	r1, #21
 8001d6e:	4829      	ldr	r0, [pc, #164]	; (8001e14 <SysTick_Handler+0x958>)
 8001d70:	f7ff fb88 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_FIN_WAIT \r\n",strlen("\r\n S0_SOCK_FIN_WAIT \r\n"));
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <SysTick_Handler+0x928>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <SysTick_Handler+0x8ca>
 8001d7c:	2216      	movs	r2, #22
 8001d7e:	4926      	ldr	r1, [pc, #152]	; (8001e18 <SysTick_Handler+0x95c>)
 8001d80:	4819      	ldr	r0, [pc, #100]	; (8001de8 <SysTick_Handler+0x92c>)
 8001d82:	f003 fbd5 	bl	8005530 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <SysTick_Handler+0x900>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001d8c:	e10c      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001d8e:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <SysTick_Handler+0x920>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <SysTick_Handler+0x8e2>
 8001d96:	2114      	movs	r1, #20
 8001d98:	4820      	ldr	r0, [pc, #128]	; (8001e1c <SysTick_Handler+0x960>)
 8001d9a:	f7ff fb73 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_CLOSING \r\n",strlen("\r\n S0_SOCK_CLOSING \r\n"));
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <SysTick_Handler+0x928>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d004      	beq.n	8001db0 <SysTick_Handler+0x8f4>
 8001da6:	2215      	movs	r2, #21
 8001da8:	491d      	ldr	r1, [pc, #116]	; (8001e20 <SysTick_Handler+0x964>)
 8001daa:	480f      	ldr	r0, [pc, #60]	; (8001de8 <SysTick_Handler+0x92c>)
 8001dac:	f003 fbc0 	bl	8005530 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001db0:	4b02      	ldr	r3, [pc, #8]	; (8001dbc <SysTick_Handler+0x900>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001db6:	e0f7      	b.n	8001fa8 <SysTick_Handler+0xaec>
 8001db8:	20003120 	.word	0x20003120
 8001dbc:	20000304 	.word	0x20000304
 8001dc0:	20003fc6 	.word	0x20003fc6
 8001dc4:	200032b4 	.word	0x200032b4
 8001dc8:	20000328 	.word	0x20000328
 8001dcc:	20003fc2 	.word	0x20003fc2
 8001dd0:	20001378 	.word	0x20001378
 8001dd4:	20001328 	.word	0x20001328
 8001dd8:	20004430 	.word	0x20004430
 8001ddc:	20003fb8 	.word	0x20003fb8
 8001de0:	080103ac 	.word	0x080103ac
 8001de4:	20000021 	.word	0x20000021
 8001de8:	200002b8 	.word	0x200002b8
 8001dec:	20003fc8 	.word	0x20003fc8
 8001df0:	20003fc0 	.word	0x20003fc0
 8001df4:	20003fc4 	.word	0x20003fc4
 8001df8:	080103c0 	.word	0x080103c0
 8001dfc:	2000312d 	.word	0x2000312d
 8001e00:	20000b28 	.word	0x20000b28
 8001e04:	20003440 	.word	0x20003440
 8001e08:	2000398c 	.word	0x2000398c
 8001e0c:	080103d0 	.word	0x080103d0
 8001e10:	0801039c 	.word	0x0801039c
 8001e14:	080103e4 	.word	0x080103e4
 8001e18:	080103fc 	.word	0x080103fc
 8001e1c:	08010414 	.word	0x08010414
 8001e20:	0801042c 	.word	0x0801042c
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001e24:	4b79      	ldr	r3, [pc, #484]	; (800200c <SysTick_Handler+0xb50>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <SysTick_Handler+0x978>
 8001e2c:	2116      	movs	r1, #22
 8001e2e:	4878      	ldr	r0, [pc, #480]	; (8002010 <SysTick_Handler+0xb54>)
 8001e30:	f7ff fb28 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n nS0_SOCK_TIME_WAIT \r\n",strlen("\r\n nS0_SOCK_TIME_WAIT \r\n"));
 8001e34:	4b77      	ldr	r3, [pc, #476]	; (8002014 <SysTick_Handler+0xb58>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d004      	beq.n	8001e46 <SysTick_Handler+0x98a>
 8001e3c:	2218      	movs	r2, #24
 8001e3e:	4976      	ldr	r1, [pc, #472]	; (8002018 <SysTick_Handler+0xb5c>)
 8001e40:	4876      	ldr	r0, [pc, #472]	; (800201c <SysTick_Handler+0xb60>)
 8001e42:	f003 fb75 	bl	8005530 <HAL_UART_Transmit_IT>
					eth_wr_SOCKET_CMD(&ETH,S0_REG, DISCON );
 8001e46:	2208      	movs	r2, #8
 8001e48:	2101      	movs	r1, #1
 8001e4a:	4875      	ldr	r0, [pc, #468]	; (8002020 <SysTick_Handler+0xb64>)
 8001e4c:	f00b f8e0 	bl	800d010 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH,S_CR ,S0_REG,SPI_READ, spi_Data,1))//while( SPI_ETH_REG(&ETH, S_CR_ADDR_BASEH,S_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001e50:	bf00      	nop
 8001e52:	2301      	movs	r3, #1
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	4b73      	ldr	r3, [pc, #460]	; (8002024 <SysTick_Handler+0xb68>)
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2101      	movs	r1, #1
 8001e60:	486f      	ldr	r0, [pc, #444]	; (8002020 <SysTick_Handler+0xb64>)
 8001e62:	f00a ff86 	bl	800cd72 <SPI_ETH_REG>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f2      	bne.n	8001e52 <SysTick_Handler+0x996>
					{}
					ETH.ETH_WDG=0;
 8001e6c:	4b6c      	ldr	r3, [pc, #432]	; (8002020 <SysTick_Handler+0xb64>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001e72:	e099      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001e74:	4b65      	ldr	r3, [pc, #404]	; (800200c <SysTick_Handler+0xb50>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <SysTick_Handler+0x9c8>
 8001e7c:	2117      	movs	r1, #23
 8001e7e:	486a      	ldr	r0, [pc, #424]	; (8002028 <SysTick_Handler+0xb6c>)
 8001e80:	f7ff fb00 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_CLOSE_WAIT \r\n",strlen("\r\n S0_SOCK_CLOSE_WAIT \r\n"));
 8001e84:	4b63      	ldr	r3, [pc, #396]	; (8002014 <SysTick_Handler+0xb58>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d004      	beq.n	8001e96 <SysTick_Handler+0x9da>
 8001e8c:	2218      	movs	r2, #24
 8001e8e:	4967      	ldr	r1, [pc, #412]	; (800202c <SysTick_Handler+0xb70>)
 8001e90:	4862      	ldr	r0, [pc, #392]	; (800201c <SysTick_Handler+0xb60>)
 8001e92:	f003 fb4d 	bl	8005530 <HAL_UART_Transmit_IT>
					eth_wr_SOCKET_CMD(&ETH,S0_REG,DISCON );
 8001e96:	2208      	movs	r2, #8
 8001e98:	2101      	movs	r1, #1
 8001e9a:	4861      	ldr	r0, [pc, #388]	; (8002020 <SysTick_Handler+0xb64>)
 8001e9c:	f00b f8b8 	bl	800d010 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH,S_CR,S0_REG,SPI_READ, spi_Data,1))
 8001ea0:	bf00      	nop
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	9301      	str	r3, [sp, #4]
 8001ea6:	4b5f      	ldr	r3, [pc, #380]	; (8002024 <SysTick_Handler+0xb68>)
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	2201      	movs	r2, #1
 8001eae:	2101      	movs	r1, #1
 8001eb0:	485b      	ldr	r0, [pc, #364]	; (8002020 <SysTick_Handler+0xb64>)
 8001eb2:	f00a ff5e 	bl	800cd72 <SPI_ETH_REG>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f2      	bne.n	8001ea2 <SysTick_Handler+0x9e6>
					{}
					ETH.ETH_WDG=0;
 8001ebc:	4b58      	ldr	r3, [pc, #352]	; (8002020 <SysTick_Handler+0xb64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001ec2:	e071      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_LAST_ACK \r\n",strlen("\r\n S0_SOCK_LAST_ACK \r\n"));
 8001ec4:	4b51      	ldr	r3, [pc, #324]	; (800200c <SysTick_Handler+0xb50>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <SysTick_Handler+0xa18>
 8001ecc:	2116      	movs	r1, #22
 8001ece:	4858      	ldr	r0, [pc, #352]	; (8002030 <SysTick_Handler+0xb74>)
 8001ed0:	f7ff fad8 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_LAST_ACK \r\n",strlen("\r\n S0_SOCK_LAST_ACK \r\n"));
 8001ed4:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <SysTick_Handler+0xb58>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d004      	beq.n	8001ee6 <SysTick_Handler+0xa2a>
 8001edc:	2216      	movs	r2, #22
 8001ede:	4954      	ldr	r1, [pc, #336]	; (8002030 <SysTick_Handler+0xb74>)
 8001ee0:	484e      	ldr	r0, [pc, #312]	; (800201c <SysTick_Handler+0xb60>)
 8001ee2:	f003 fb25 	bl	8005530 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001ee6:	4b4e      	ldr	r3, [pc, #312]	; (8002020 <SysTick_Handler+0xb64>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001eec:	e05c      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_UDP \r\n",strlen("\r\n S0_SOCK_UDP \r\n"));
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <SysTick_Handler+0xb50>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <SysTick_Handler+0xa42>
 8001ef6:	2111      	movs	r1, #17
 8001ef8:	484e      	ldr	r0, [pc, #312]	; (8002034 <SysTick_Handler+0xb78>)
 8001efa:	f7ff fac3 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_UDP \r\n",strlen("\r\n S0_SOCK_UDP \r\n"));
 8001efe:	4b45      	ldr	r3, [pc, #276]	; (8002014 <SysTick_Handler+0xb58>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d004      	beq.n	8001f10 <SysTick_Handler+0xa54>
 8001f06:	2211      	movs	r2, #17
 8001f08:	494a      	ldr	r1, [pc, #296]	; (8002034 <SysTick_Handler+0xb78>)
 8001f0a:	4844      	ldr	r0, [pc, #272]	; (800201c <SysTick_Handler+0xb60>)
 8001f0c:	f003 fb10 	bl	8005530 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001f10:	4b43      	ldr	r3, [pc, #268]	; (8002020 <SysTick_Handler+0xb64>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f16:	e047      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_IPRAW \r\n",strlen("\r\n S0_SOCK_IPRAW \r\n"));
 8001f18:	4b3c      	ldr	r3, [pc, #240]	; (800200c <SysTick_Handler+0xb50>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <SysTick_Handler+0xa6c>
 8001f20:	2113      	movs	r1, #19
 8001f22:	4845      	ldr	r0, [pc, #276]	; (8002038 <SysTick_Handler+0xb7c>)
 8001f24:	f7ff faae 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_IPRAW \r\n",strlen("\r\n S0_SOCK_IPRAW \r\n"));
 8001f28:	4b3a      	ldr	r3, [pc, #232]	; (8002014 <SysTick_Handler+0xb58>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d004      	beq.n	8001f3a <SysTick_Handler+0xa7e>
 8001f30:	2213      	movs	r2, #19
 8001f32:	4941      	ldr	r1, [pc, #260]	; (8002038 <SysTick_Handler+0xb7c>)
 8001f34:	4839      	ldr	r0, [pc, #228]	; (800201c <SysTick_Handler+0xb60>)
 8001f36:	f003 fafb 	bl	8005530 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001f3a:	4b39      	ldr	r3, [pc, #228]	; (8002020 <SysTick_Handler+0xb64>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f40:	e032      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_MACRAW \r\n",strlen("\r\n S0_SOCK_MACRAW \r\n"));
 8001f42:	4b32      	ldr	r3, [pc, #200]	; (800200c <SysTick_Handler+0xb50>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <SysTick_Handler+0xa96>
 8001f4a:	2114      	movs	r1, #20
 8001f4c:	483b      	ldr	r0, [pc, #236]	; (800203c <SysTick_Handler+0xb80>)
 8001f4e:	f7ff fa99 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_MACRAW \r\n",strlen("\r\n S0_SOCK_MACRAW \r\n"));
 8001f52:	4b30      	ldr	r3, [pc, #192]	; (8002014 <SysTick_Handler+0xb58>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d004      	beq.n	8001f64 <SysTick_Handler+0xaa8>
 8001f5a:	2214      	movs	r2, #20
 8001f5c:	4937      	ldr	r1, [pc, #220]	; (800203c <SysTick_Handler+0xb80>)
 8001f5e:	482f      	ldr	r0, [pc, #188]	; (800201c <SysTick_Handler+0xb60>)
 8001f60:	f003 fae6 	bl	8005530 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001f64:	4b2e      	ldr	r3, [pc, #184]	; (8002020 <SysTick_Handler+0xb64>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f6a:	e01d      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_PPOE \r\n",strlen("\r\n S0_SOCK_PPOE \r\n"));
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <SysTick_Handler+0xb50>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <SysTick_Handler+0xac0>
 8001f74:	2112      	movs	r1, #18
 8001f76:	4832      	ldr	r0, [pc, #200]	; (8002040 <SysTick_Handler+0xb84>)
 8001f78:	f7ff fa84 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_PPOE \r\n",strlen("\r\n S0_SOCK_UDP \r\n"));
 8001f7c:	4b25      	ldr	r3, [pc, #148]	; (8002014 <SysTick_Handler+0xb58>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <SysTick_Handler+0xad2>
 8001f84:	2211      	movs	r2, #17
 8001f86:	492e      	ldr	r1, [pc, #184]	; (8002040 <SysTick_Handler+0xb84>)
 8001f88:	4824      	ldr	r0, [pc, #144]	; (800201c <SysTick_Handler+0xb60>)
 8001f8a:	f003 fad1 	bl	8005530 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001f8e:	4b24      	ldr	r3, [pc, #144]	; (8002020 <SysTick_Handler+0xb64>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f94:	e008      	b.n	8001fa8 <SysTick_Handler+0xaec>
	  }
	  }else
	  	  {
		  //ETH.operacion=SPI_READ;
		  //ETH.TX[3]=0x00;
		  SPI_ETH(&ETH);
 8001f96:	4822      	ldr	r0, [pc, #136]	; (8002020 <SysTick_Handler+0xb64>)
 8001f98:	f00a fec3 	bl	800cd22 <SPI_ETH>
 8001f9c:	e004      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 default:
 8001f9e:	bf00      	nop
 8001fa0:	e002      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 break;
 8001fa2:	bf00      	nop
 8001fa4:	e000      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 break;
 8001fa6:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001fa8:	4b26      	ldr	r3, [pc, #152]	; (8002044 <SysTick_Handler+0xb88>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d102      	bne.n	8001fb6 <SysTick_Handler+0xafa>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001fb0:	4b24      	ldr	r3, [pc, #144]	; (8002044 <SysTick_Handler+0xb88>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
		  }
  }

if(EN_USART1_TMR==1) USART1_ticks++;
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <SysTick_Handler+0xb8c>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d104      	bne.n	8001fc8 <SysTick_Handler+0xb0c>
 8001fbe:	4b23      	ldr	r3, [pc, #140]	; (800204c <SysTick_Handler+0xb90>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	4a21      	ldr	r2, [pc, #132]	; (800204c <SysTick_Handler+0xb90>)
 8001fc6:	6013      	str	r3, [r2, #0]

if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001fc8:	4b20      	ldr	r3, [pc, #128]	; (800204c <SysTick_Handler+0xb90>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	dd0f      	ble.n	8001ff0 <SysTick_Handler+0xb34>
{
	USART1_ticks=0;
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	; (800204c <SysTick_Handler+0xb90>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
	FLAG_USART1=1;
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <SysTick_Handler+0xb94>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
	EN_USART1_TMR=0;
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <SysTick_Handler+0xb8c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
	items_rx=uart1pass;
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <SysTick_Handler+0xb98>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <SysTick_Handler+0xb9c>)
 8001fe8:	6013      	str	r3, [r2, #0]
	uart1pass=0;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <SysTick_Handler+0xb98>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff0:	f000 fd38 	bl	8002a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <SysTick_Handler+0xba0>)
 8001ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d132      	bne.n	8002064 <SysTick_Handler+0xba8>
	{
		ticks++;
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <SysTick_Handler+0xba4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	4a16      	ldr	r2, [pc, #88]	; (8002060 <SysTick_Handler+0xba4>)
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e02f      	b.n	800206a <SysTick_Handler+0xbae>
 800200a:	bf00      	nop
 800200c:	20003fb8 	.word	0x20003fb8
 8002010:	08010444 	.word	0x08010444
 8002014:	20000021 	.word	0x20000021
 8002018:	0801045c 	.word	0x0801045c
 800201c:	200002b8 	.word	0x200002b8
 8002020:	20000304 	.word	0x20000304
 8002024:	20003fc8 	.word	0x20003fc8
 8002028:	08010478 	.word	0x08010478
 800202c:	08010490 	.word	0x08010490
 8002030:	080104ac 	.word	0x080104ac
 8002034:	080104c4 	.word	0x080104c4
 8002038:	080104d8 	.word	0x080104d8
 800203c:	080104ec 	.word	0x080104ec
 8002040:	08010504 	.word	0x08010504
 8002044:	20000300 	.word	0x20000300
 8002048:	2000400d 	.word	0x2000400d
 800204c:	20004440 	.word	0x20004440
 8002050:	20004444 	.word	0x20004444
 8002054:	2000443c 	.word	0x2000443c
 8002058:	20004448 	.word	0x20004448
 800205c:	200023d4 	.word	0x200023d4
 8002060:	20004434 	.word	0x20004434
	}
	else
	{
		ticks=0;
 8002064:	4b34      	ldr	r3, [pc, #208]	; (8002138 <SysTick_Handler+0xc7c>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
	}

	if(wf._ejecucion==1)
 800206a:	4b34      	ldr	r3, [pc, #208]	; (800213c <SysTick_Handler+0xc80>)
 800206c:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8002070:	2b01      	cmp	r3, #1
 8002072:	d158      	bne.n	8002126 <SysTick_Handler+0xc6a>
		{
			if (FLAG_TIMEOUT!=1)
 8002074:	4b32      	ldr	r3, [pc, #200]	; (8002140 <SysTick_Handler+0xc84>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d017      	beq.n	80020ac <SysTick_Handler+0xbf0>
			{
				if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 800207c:	4b2f      	ldr	r3, [pc, #188]	; (800213c <SysTick_Handler+0xc80>)
 800207e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8002082:	2b02      	cmp	r3, #2
 8002084:	d006      	beq.n	8002094 <SysTick_Handler+0xbd8>
 8002086:	4b2d      	ldr	r3, [pc, #180]	; (800213c <SysTick_Handler+0xc80>)
 8002088:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800208c:	3301      	adds	r3, #1
 800208e:	4a2b      	ldr	r2, [pc, #172]	; (800213c <SysTick_Handler+0xc80>)
 8002090:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
				if(wf._instruccion==2) wf._ticks2++;
 8002094:	4b29      	ldr	r3, [pc, #164]	; (800213c <SysTick_Handler+0xc80>)
 8002096:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800209a:	2b02      	cmp	r3, #2
 800209c:	d106      	bne.n	80020ac <SysTick_Handler+0xbf0>
 800209e:	4b27      	ldr	r3, [pc, #156]	; (800213c <SysTick_Handler+0xc80>)
 80020a0:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a25      	ldr	r2, [pc, #148]	; (800213c <SysTick_Handler+0xc80>)
 80020a8:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
			}


			if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 80020ac:	4b23      	ldr	r3, [pc, #140]	; (800213c <SysTick_Handler+0xc80>)
 80020ae:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d018      	beq.n	80020e8 <SysTick_Handler+0xc2c>
 80020b6:	4b21      	ldr	r3, [pc, #132]	; (800213c <SysTick_Handler+0xc80>)
 80020b8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80020bc:	f241 527c 	movw	r2, #5500	; 0x157c
 80020c0:	4293      	cmp	r3, r2
 80020c2:	dd11      	ble.n	80020e8 <SysTick_Handler+0xc2c>
			{
				FLAG_TIMEOUT=1;
 80020c4:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <SysTick_Handler+0xc84>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
				if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <SysTick_Handler+0xc88>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f242 020c 	movw	r2, #8204	; 0x200c
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d107      	bne.n	80020e8 <SysTick_Handler+0xc2c>
				{
					HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 80020d8:	2201      	movs	r2, #1
 80020da:	491b      	ldr	r1, [pc, #108]	; (8002148 <SysTick_Handler+0xc8c>)
 80020dc:	4819      	ldr	r0, [pc, #100]	; (8002144 <SysTick_Handler+0xc88>)
 80020de:	f003 fa6c 	bl	80055ba <HAL_UART_Receive_IT>
					EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <SysTick_Handler+0xc90>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
				}
				//wf._ticks=0;
			}
			if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <SysTick_Handler+0xc80>)
 80020ea:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d11d      	bne.n	800212e <SysTick_Handler+0xc72>
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <SysTick_Handler+0xc80>)
 80020f4:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80020f8:	f245 0214 	movw	r2, #20500	; 0x5014
 80020fc:	4293      	cmp	r3, r2
 80020fe:	dd16      	ble.n	800212e <SysTick_Handler+0xc72>
			{
				FLAG_TIMEOUT=1;
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <SysTick_Handler+0xc84>)
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
				if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <SysTick_Handler+0xc88>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f242 020c 	movw	r2, #8204	; 0x200c
 8002110:	4293      	cmp	r3, r2
 8002112:	d10c      	bne.n	800212e <SysTick_Handler+0xc72>
				{
					HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8002114:	2201      	movs	r2, #1
 8002116:	490c      	ldr	r1, [pc, #48]	; (8002148 <SysTick_Handler+0xc8c>)
 8002118:	480a      	ldr	r0, [pc, #40]	; (8002144 <SysTick_Handler+0xc88>)
 800211a:	f003 fa4e 	bl	80055ba <HAL_UART_Receive_IT>
					EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <SysTick_Handler+0xc90>)
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
		else
		{
			wf._ticks=0;
		}
  /* USER CODE END SysTick_IRQn 1 */
}
 8002124:	e003      	b.n	800212e <SysTick_Handler+0xc72>
			wf._ticks=0;
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <SysTick_Handler+0xc80>)
 8002128:	2200      	movs	r2, #0
 800212a:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 800212e:	bf00      	nop
 8002130:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20004434 	.word	0x20004434
 800213c:	200023d4 	.word	0x200023d4
 8002140:	2000400e 	.word	0x2000400e
 8002144:	20000274 	.word	0x20000274
 8002148:	20004420 	.word	0x20004420
 800214c:	2000400c 	.word	0x2000400c

08002150 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a25      	ldr	r2, [pc, #148]	; (80021f4 <HAL_UART_ErrorCallback+0xa4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d121      	bne.n	80021a6 <HAL_UART_ErrorCallback+0x56>
	{
		 volatile int aore=0;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 800216a:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <HAL_UART_ErrorCallback+0xa8>)
 800216c:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8002170:	3301      	adds	r3, #1
 8002172:	4a21      	ldr	r2, [pc, #132]	; (80021f8 <HAL_UART_ErrorCallback+0xa8>)
 8002174:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	613b      	str	r3, [r7, #16]


		 HAL_UART_Transmit_IT(&huart2,"\r\n ERROR HW UARRT1 \r\n",strlen("\r\n ERROR HW UARRT1 \r\n"));
 8002188:	2215      	movs	r2, #21
 800218a:	491c      	ldr	r1, [pc, #112]	; (80021fc <HAL_UART_ErrorCallback+0xac>)
 800218c:	481c      	ldr	r0, [pc, #112]	; (8002200 <HAL_UART_ErrorCallback+0xb0>)
 800218e:	f003 f9cf 	bl	8005530 <HAL_UART_Transmit_IT>
		 HAL_UART_DeInit(ERRUART);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f003 f90b 	bl	80053ae <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8002198:	f7ff f87a 	bl	8001290 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 800219c:	2201      	movs	r2, #1
 800219e:	4919      	ldr	r1, [pc, #100]	; (8002204 <HAL_UART_ErrorCallback+0xb4>)
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f003 fa0a 	bl	80055ba <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a17      	ldr	r2, [pc, #92]	; (8002208 <HAL_UART_ErrorCallback+0xb8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d11c      	bne.n	80021ea <HAL_UART_ErrorCallback+0x9a>
	{
		 volatile int aore=0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <HAL_UART_ErrorCallback+0xa8>)
 80021ba:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 80021be:	3301      	adds	r3, #1
 80021c0:	4a0d      	ldr	r2, [pc, #52]	; (80021f8 <HAL_UART_ErrorCallback+0xa8>)
 80021c2:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f003 f8e9 	bl	80053ae <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 80021dc:	f7ff f882 	bl	80012e4 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 80021e0:	2201      	movs	r2, #1
 80021e2:	4908      	ldr	r1, [pc, #32]	; (8002204 <HAL_UART_ErrorCallback+0xb4>)
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f003 f9e8 	bl	80055ba <HAL_UART_Receive_IT>
	}
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40011000 	.word	0x40011000
 80021f8:	200023d4 	.word	0x200023d4
 80021fc:	08010518 	.word	0x08010518
 8002200:	200002b8 	.word	0x200002b8
 8002204:	20004420 	.word	0x20004420
 8002208:	40004400 	.word	0x40004400

0800220c <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a15      	ldr	r2, [pc, #84]	; (8002270 <HAL_UART_RxCpltCallback+0x64>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d123      	bne.n	8002266 <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <HAL_UART_RxCpltCallback+0x68>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a15      	ldr	r2, [pc, #84]	; (8002278 <HAL_UART_RxCpltCallback+0x6c>)
 8002224:	7811      	ldrb	r1, [r2, #0]
 8002226:	4a15      	ldr	r2, [pc, #84]	; (800227c <HAL_UART_RxCpltCallback+0x70>)
 8002228:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 800222a:	4b12      	ldr	r3, [pc, #72]	; (8002274 <HAL_UART_RxCpltCallback+0x68>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	4a10      	ldr	r2, [pc, #64]	; (8002274 <HAL_UART_RxCpltCallback+0x68>)
 8002232:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 8002234:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <HAL_UART_RxCpltCallback+0x68>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800223c:	db03      	blt.n	8002246 <HAL_UART_RxCpltCallback+0x3a>
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_UART_RxCpltCallback+0x68>)
 8002240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002244:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8002246:	2100      	movs	r1, #0
 8002248:	480d      	ldr	r0, [pc, #52]	; (8002280 <HAL_UART_RxCpltCallback+0x74>)
 800224a:	f002 f8b7 	bl	80043bc <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 800224e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002252:	2201      	movs	r2, #1
 8002254:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_UART_RxCpltCallback+0x78>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 800225c:	2201      	movs	r2, #1
 800225e:	4906      	ldr	r1, [pc, #24]	; (8002278 <HAL_UART_RxCpltCallback+0x6c>)
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f003 f9aa 	bl	80055ba <HAL_UART_Receive_IT>
		 }
 }
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40011000 	.word	0x40011000
 8002274:	20004450 	.word	0x20004450
 8002278:	20004420 	.word	0x20004420
 800227c:	2000401c 	.word	0x2000401c
 8002280:	2000022c 	.word	0x2000022c
 8002284:	2000400c 	.word	0x2000400c

08002288 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af02      	add	r7, sp, #8
 800228e:	6078      	str	r0, [r7, #4]

		if(TIMER->Instance==TIM2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002298:	d12d      	bne.n	80022f6 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 800229a:	2100      	movs	r1, #0
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f002 f98b 	bl	80045b8 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 80022a2:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a16      	ldr	r2, [pc, #88]	; (800230c <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80022b4:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 80022b6:	4b14      	ldr	r3, [pc, #80]	; (8002308 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	2301      	movs	r3, #1
 80022ce:	4910      	ldr	r1, [pc, #64]	; (8002310 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80022d0:	4811      	ldr	r0, [pc, #68]	; (8002318 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 80022d2:	f00c fc45 	bl	800eb60 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 80022d6:	2201      	movs	r2, #1
 80022d8:	4910      	ldr	r1, [pc, #64]	; (800231c <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 80022da:	4811      	ldr	r0, [pc, #68]	; (8002320 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80022dc:	f003 f96d 	bl	80055ba <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 80022e0:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 80022e2:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d105      	bne.n	80022f6 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 80022ea:	4b08      	ldr	r3, [pc, #32]	; (800230c <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4619      	mov	r1, r3
 80022f0:	4809      	ldr	r0, [pc, #36]	; (8002318 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 80022f2:	f7ff f8c7 	bl	8001484 <ITM0_Write>
				 }
		}
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	2000400f 	.word	0x2000400f
 8002304:	2000400c 	.word	0x2000400c
 8002308:	20004450 	.word	0x20004450
 800230c:	20004424 	.word	0x20004424
 8002310:	2000401c 	.word	0x2000401c
 8002314:	2000441c 	.word	0x2000441c
 8002318:	2000421c 	.word	0x2000421c
 800231c:	20004420 	.word	0x20004420
 8002320:	20000274 	.word	0x20000274
 8002324:	200023d4 	.word	0x200023d4

08002328 <ESP8266_HW_Init>:

uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af06      	add	r7, sp, #24
 800232e:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 8002330:	2364      	movs	r3, #100	; 0x64
 8002332:	220c      	movs	r2, #12
 8002334:	4943      	ldr	r1, [pc, #268]	; (8002444 <ESP8266_HW_Init+0x11c>)
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f003 f868 	bl	800540c <HAL_UART_Transmit>
		  HAL_Delay(500);
 800233c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002340:	f000 fbb0 	bl	8002aa4 <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 8002344:	4b40      	ldr	r3, [pc, #256]	; (8002448 <ESP8266_HW_Init+0x120>)
 8002346:	2205      	movs	r2, #5
 8002348:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART_RX_items;
 800234c:	4b3f      	ldr	r3, [pc, #252]	; (800244c <ESP8266_HW_Init+0x124>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a3d      	ldr	r2, [pc, #244]	; (8002448 <ESP8266_HW_Init+0x120>)
 8002352:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 8002356:	e00e      	b.n	8002376 <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 8002358:	4b3c      	ldr	r3, [pc, #240]	; (800244c <ESP8266_HW_Init+0x124>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a3a      	ldr	r2, [pc, #232]	; (8002448 <ESP8266_HW_Init+0x120>)
 800235e:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  	  if (ESP_ticks>=5000)
 8002362:	4b3b      	ldr	r3, [pc, #236]	; (8002450 <ESP8266_HW_Init+0x128>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f241 3287 	movw	r2, #4999	; 0x1387
 800236a:	4293      	cmp	r3, r2
 800236c:	dd03      	ble.n	8002376 <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 800236e:	4b39      	ldr	r3, [pc, #228]	; (8002454 <ESP8266_HW_Init+0x12c>)
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
			  		 break;
 8002374:	e012      	b.n	800239c <ESP8266_HW_Init+0x74>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 8002376:	2300      	movs	r3, #0
 8002378:	9304      	str	r3, [sp, #16]
 800237a:	4b37      	ldr	r3, [pc, #220]	; (8002458 <ESP8266_HW_Init+0x130>)
 800237c:	9303      	str	r3, [sp, #12]
 800237e:	4b37      	ldr	r3, [pc, #220]	; (800245c <ESP8266_HW_Init+0x134>)
 8002380:	9302      	str	r3, [sp, #8]
 8002382:	4b37      	ldr	r3, [pc, #220]	; (8002460 <ESP8266_HW_Init+0x138>)
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	4b37      	ldr	r3, [pc, #220]	; (8002464 <ESP8266_HW_Init+0x13c>)
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	4b37      	ldr	r3, [pc, #220]	; (8002468 <ESP8266_HW_Init+0x140>)
 800238c:	4a37      	ldr	r2, [pc, #220]	; (800246c <ESP8266_HW_Init+0x144>)
 800238e:	4938      	ldr	r1, [pc, #224]	; (8002470 <ESP8266_HW_Init+0x148>)
 8002390:	4838      	ldr	r0, [pc, #224]	; (8002474 <ESP8266_HW_Init+0x14c>)
 8002392:	f00c f821 	bl	800e3d8 <FT_String_ND>
 8002396:	4603      	mov	r3, r0
 8002398:	2b01      	cmp	r3, #1
 800239a:	d1dd      	bne.n	8002358 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 800239c:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <ESP8266_HW_Init+0x12c>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d129      	bne.n	80023f8 <ESP8266_HW_Init+0xd0>
		  {
			  wf._n_fcomp=strlen("ready");
 80023a4:	4b28      	ldr	r3, [pc, #160]	; (8002448 <ESP8266_HW_Init+0x120>)
 80023a6:	2205      	movs	r2, #5
 80023a8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			  wf._n_orig=UART_RX_items;
 80023ac:	4b27      	ldr	r3, [pc, #156]	; (800244c <ESP8266_HW_Init+0x124>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a25      	ldr	r2, [pc, #148]	; (8002448 <ESP8266_HW_Init+0x120>)
 80023b2:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 80023b6:	e00a      	b.n	80023ce <ESP8266_HW_Init+0xa6>
			  {
				  wf._n_orig=UART_RX_items;
 80023b8:	4b24      	ldr	r3, [pc, #144]	; (800244c <ESP8266_HW_Init+0x124>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a22      	ldr	r2, [pc, #136]	; (8002448 <ESP8266_HW_Init+0x120>)
 80023be:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 80023c2:	4b23      	ldr	r3, [pc, #140]	; (8002450 <ESP8266_HW_Init+0x128>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f241 3287 	movw	r2, #4999	; 0x1387
 80023ca:	4293      	cmp	r3, r2
 80023cc:	dc13      	bgt.n	80023f6 <ESP8266_HW_Init+0xce>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 80023ce:	2300      	movs	r3, #0
 80023d0:	9304      	str	r3, [sp, #16]
 80023d2:	4b21      	ldr	r3, [pc, #132]	; (8002458 <ESP8266_HW_Init+0x130>)
 80023d4:	9303      	str	r3, [sp, #12]
 80023d6:	4b21      	ldr	r3, [pc, #132]	; (800245c <ESP8266_HW_Init+0x134>)
 80023d8:	9302      	str	r3, [sp, #8]
 80023da:	4b21      	ldr	r3, [pc, #132]	; (8002460 <ESP8266_HW_Init+0x138>)
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	4b21      	ldr	r3, [pc, #132]	; (8002464 <ESP8266_HW_Init+0x13c>)
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	4b21      	ldr	r3, [pc, #132]	; (8002468 <ESP8266_HW_Init+0x140>)
 80023e4:	4a21      	ldr	r2, [pc, #132]	; (800246c <ESP8266_HW_Init+0x144>)
 80023e6:	4922      	ldr	r1, [pc, #136]	; (8002470 <ESP8266_HW_Init+0x148>)
 80023e8:	4822      	ldr	r0, [pc, #136]	; (8002474 <ESP8266_HW_Init+0x14c>)
 80023ea:	f00b fff5 	bl	800e3d8 <FT_String_ND>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d1e1      	bne.n	80023b8 <ESP8266_HW_Init+0x90>
 80023f4:	e000      	b.n	80023f8 <ESP8266_HW_Init+0xd0>
					 {
					 break;
 80023f6:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 80023f8:	4b15      	ldr	r3, [pc, #84]	; (8002450 <ESP8266_HW_Init+0x128>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f241 3287 	movw	r2, #4999	; 0x1387
 8002400:	4293      	cmp	r3, r2
 8002402:	dc06      	bgt.n	8002412 <ESP8266_HW_Init+0xea>
		  {
			  ESP_REinit=10;
 8002404:	4b1c      	ldr	r3, [pc, #112]	; (8002478 <ESP8266_HW_Init+0x150>)
 8002406:	220a      	movs	r2, #10
 8002408:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800240a:	4b11      	ldr	r3, [pc, #68]	; (8002450 <ESP8266_HW_Init+0x128>)
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	e008      	b.n	8002424 <ESP8266_HW_Init+0xfc>
		  }
		  else
		  {
			  ESP_REinit++;
 8002412:	4b19      	ldr	r3, [pc, #100]	; (8002478 <ESP8266_HW_Init+0x150>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	3301      	adds	r3, #1
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b17      	ldr	r3, [pc, #92]	; (8002478 <ESP8266_HW_Init+0x150>)
 800241c:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <ESP8266_HW_Init+0x128>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <ESP8266_HW_Init+0x150>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b05      	cmp	r3, #5
 800242a:	d981      	bls.n	8002330 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 800242c:	4b12      	ldr	r3, [pc, #72]	; (8002478 <ESP8266_HW_Init+0x150>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b0a      	cmp	r3, #10
 8002432:	d101      	bne.n	8002438 <ESP8266_HW_Init+0x110>
	  {
		  return(1);
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <ESP8266_HW_Init+0x112>
	  }
	  else
	  {
		  return(0);
 8002438:	2300      	movs	r3, #0
	  }
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	08010530 	.word	0x08010530
 8002448:	200023d4 	.word	0x200023d4
 800244c:	20004424 	.word	0x20004424
 8002450:	20004428 	.word	0x20004428
 8002454:	2000400a 	.word	0x2000400a
 8002458:	20002e68 	.word	0x20002e68
 800245c:	20004438 	.word	0x20004438
 8002460:	200030b4 	.word	0x200030b4
 8002464:	20002c68 	.word	0x20002c68
 8002468:	200030c0 	.word	0x200030c0
 800246c:	08010540 	.word	0x08010540
 8002470:	200030ac 	.word	0x200030ac
 8002474:	2000421c 	.word	0x2000421c
 8002478:	20004009 	.word	0x20004009

0800247c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002480:	b672      	cpsid	i
}
 8002482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002484:	e7fe      	b.n	8002484 <Error_Handler+0x8>
	...

08002488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <HAL_MspInit+0x4c>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <HAL_MspInit+0x4c>)
 8002498:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800249c:	6453      	str	r3, [r2, #68]	; 0x44
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <HAL_MspInit+0x4c>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_MspInit+0x4c>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	4a08      	ldr	r2, [pc, #32]	; (80024d4 <HAL_MspInit+0x4c>)
 80024b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_MspInit+0x4c>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800

080024d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	; 0x28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a19      	ldr	r2, [pc, #100]	; (800255c <HAL_SPI_MspInit+0x84>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d12b      	bne.n	8002552 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <HAL_SPI_MspInit+0x88>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <HAL_SPI_MspInit+0x88>)
 8002504:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002508:	6453      	str	r3, [r2, #68]	; 0x44
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <HAL_SPI_MspInit+0x88>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <HAL_SPI_MspInit+0x88>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	4a10      	ldr	r2, [pc, #64]	; (8002560 <HAL_SPI_MspInit+0x88>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	6313      	str	r3, [r2, #48]	; 0x30
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <HAL_SPI_MspInit+0x88>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002532:	23e0      	movs	r3, #224	; 0xe0
 8002534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002542:	2305      	movs	r3, #5
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4619      	mov	r1, r3
 800254c:	4805      	ldr	r0, [pc, #20]	; (8002564 <HAL_SPI_MspInit+0x8c>)
 800254e:	f000 fca3 	bl	8002e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002552:	bf00      	nop
 8002554:	3728      	adds	r7, #40	; 0x28
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40013000 	.word	0x40013000
 8002560:	40023800 	.word	0x40023800
 8002564:	40020000 	.word	0x40020000

08002568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002578:	d115      	bne.n	80025a6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <HAL_TIM_Base_MspInit+0x48>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <HAL_TIM_Base_MspInit+0x48>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_TIM_Base_MspInit+0x48>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	201c      	movs	r0, #28
 800259c:	f000 fba5 	bl	8002cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025a0:	201c      	movs	r0, #28
 80025a2:	f000 fbbe 	bl	8002d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08c      	sub	sp, #48	; 0x30
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 031c 	add.w	r3, r7, #28
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a3a      	ldr	r2, [pc, #232]	; (80026bc <HAL_UART_MspInit+0x108>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d135      	bne.n	8002642 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <HAL_UART_MspInit+0x10c>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	4a38      	ldr	r2, [pc, #224]	; (80026c0 <HAL_UART_MspInit+0x10c>)
 80025e0:	f043 0310 	orr.w	r3, r3, #16
 80025e4:	6453      	str	r3, [r2, #68]	; 0x44
 80025e6:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <HAL_UART_MspInit+0x10c>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	61bb      	str	r3, [r7, #24]
 80025f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <HAL_UART_MspInit+0x10c>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	4a31      	ldr	r2, [pc, #196]	; (80026c0 <HAL_UART_MspInit+0x10c>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6313      	str	r3, [r2, #48]	; 0x30
 8002602:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <HAL_UART_MspInit+0x10c>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = WF_TX_Pin|WF_RX_Pin;
 800260e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002614:	2302      	movs	r3, #2
 8002616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261c:	2303      	movs	r3, #3
 800261e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002620:	2307      	movs	r3, #7
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002624:	f107 031c 	add.w	r3, r7, #28
 8002628:	4619      	mov	r1, r3
 800262a:	4826      	ldr	r0, [pc, #152]	; (80026c4 <HAL_UART_MspInit+0x110>)
 800262c:	f000 fc34 	bl	8002e98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002630:	2200      	movs	r2, #0
 8002632:	2100      	movs	r1, #0
 8002634:	2025      	movs	r0, #37	; 0x25
 8002636:	f000 fb58 	bl	8002cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800263a:	2025      	movs	r0, #37	; 0x25
 800263c:	f000 fb71 	bl	8002d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002640:	e038      	b.n	80026b4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a20      	ldr	r2, [pc, #128]	; (80026c8 <HAL_UART_MspInit+0x114>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d133      	bne.n	80026b4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <HAL_UART_MspInit+0x10c>)
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	4a1a      	ldr	r2, [pc, #104]	; (80026c0 <HAL_UART_MspInit+0x10c>)
 8002656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800265a:	6413      	str	r3, [r2, #64]	; 0x40
 800265c:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <HAL_UART_MspInit+0x10c>)
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <HAL_UART_MspInit+0x10c>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	4a13      	ldr	r2, [pc, #76]	; (80026c0 <HAL_UART_MspInit+0x10c>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6313      	str	r3, [r2, #48]	; 0x30
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <HAL_UART_MspInit+0x10c>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PORT2TX_Pin|PORT2_RX_Pin;
 8002684:	230c      	movs	r3, #12
 8002686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002690:	2303      	movs	r3, #3
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002694:	2307      	movs	r3, #7
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002698:	f107 031c 	add.w	r3, r7, #28
 800269c:	4619      	mov	r1, r3
 800269e:	4809      	ldr	r0, [pc, #36]	; (80026c4 <HAL_UART_MspInit+0x110>)
 80026a0:	f000 fbfa 	bl	8002e98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026a4:	2200      	movs	r2, #0
 80026a6:	2100      	movs	r1, #0
 80026a8:	2026      	movs	r0, #38	; 0x26
 80026aa:	f000 fb1e 	bl	8002cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026ae:	2026      	movs	r0, #38	; 0x26
 80026b0:	f000 fb37 	bl	8002d22 <HAL_NVIC_EnableIRQ>
}
 80026b4:	bf00      	nop
 80026b6:	3730      	adds	r7, #48	; 0x30
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40011000 	.word	0x40011000
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40020000 	.word	0x40020000
 80026c8:	40004400 	.word	0x40004400

080026cc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a13      	ldr	r2, [pc, #76]	; (8002728 <HAL_UART_MspDeInit+0x5c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10e      	bne.n	80026fc <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <HAL_UART_MspDeInit+0x60>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <HAL_UART_MspDeInit+0x60>)
 80026e4:	f023 0310 	bic.w	r3, r3, #16
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, WF_TX_Pin|WF_RX_Pin);
 80026ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80026ee:	4810      	ldr	r0, [pc, #64]	; (8002730 <HAL_UART_MspDeInit+0x64>)
 80026f0:	f000 fd56 	bl	80031a0 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80026f4:	2025      	movs	r0, #37	; 0x25
 80026f6:	f000 fb22 	bl	8002d3e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80026fa:	e011      	b.n	8002720 <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART2)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a0c      	ldr	r2, [pc, #48]	; (8002734 <HAL_UART_MspDeInit+0x68>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10c      	bne.n	8002720 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <HAL_UART_MspDeInit+0x60>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4a08      	ldr	r2, [pc, #32]	; (800272c <HAL_UART_MspDeInit+0x60>)
 800270c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002710:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PORT2TX_Pin|PORT2_RX_Pin);
 8002712:	210c      	movs	r1, #12
 8002714:	4806      	ldr	r0, [pc, #24]	; (8002730 <HAL_UART_MspDeInit+0x64>)
 8002716:	f000 fd43 	bl	80031a0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800271a:	2026      	movs	r0, #38	; 0x26
 800271c:	f000 fb0f 	bl	8002d3e <HAL_NVIC_DisableIRQ>
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40011000 	.word	0x40011000
 800272c:	40023800 	.word	0x40023800
 8002730:	40020000 	.word	0x40020000
 8002734:	40004400 	.word	0x40004400

08002738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800273c:	e7fe      	b.n	800273c <NMI_Handler+0x4>

0800273e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002742:	e7fe      	b.n	8002742 <HardFault_Handler+0x4>

08002744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002748:	e7fe      	b.n	8002748 <MemManage_Handler+0x4>

0800274a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800274e:	e7fe      	b.n	800274e <BusFault_Handler+0x4>

08002750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <UsageFault_Handler+0x4>

08002756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <TIM2_IRQHandler+0x10>)
 8002786:	f002 f823 	bl	80047d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	2000022c 	.word	0x2000022c

08002794 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <USART1_IRQHandler+0x10>)
 800279a:	f002 ff3f 	bl	800561c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000274 	.word	0x20000274

080027a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <USART2_IRQHandler+0x10>)
 80027ae:	f002 ff35 	bl	800561c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200002b8 	.word	0x200002b8

080027bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
	return 1;
 80027c0:	2301      	movs	r3, #1
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <_kill>:

int _kill(int pid, int sig)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027d6:	f00c fc6f 	bl	800f0b8 <__errno>
 80027da:	4603      	mov	r3, r0
 80027dc:	2216      	movs	r2, #22
 80027de:	601a      	str	r2, [r3, #0]
	return -1;
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <_exit>:

void _exit (int status)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027f4:	f04f 31ff 	mov.w	r1, #4294967295
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ffe7 	bl	80027cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80027fe:	e7fe      	b.n	80027fe <_exit+0x12>

08002800 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	e00a      	b.n	8002828 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002812:	f3af 8000 	nop.w
 8002816:	4601      	mov	r1, r0
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	60ba      	str	r2, [r7, #8]
 800281e:	b2ca      	uxtb	r2, r1
 8002820:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3301      	adds	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	429a      	cmp	r2, r3
 800282e:	dbf0      	blt.n	8002812 <_read+0x12>
	}

return len;
 8002830:	687b      	ldr	r3, [r7, #4]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e009      	b.n	8002860 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	60ba      	str	r2, [r7, #8]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3301      	adds	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	429a      	cmp	r2, r3
 8002866:	dbf1      	blt.n	800284c <_write+0x12>
	}
	return len;
 8002868:	687b      	ldr	r3, [r7, #4]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <_close>:

int _close(int file)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
	return -1;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800289a:	605a      	str	r2, [r3, #4]
	return 0;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <_isatty>:

int _isatty(int file)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
	return 1;
 80028b2:	2301      	movs	r3, #1
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
	return 0;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
	...

080028dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028e4:	4a14      	ldr	r2, [pc, #80]	; (8002938 <_sbrk+0x5c>)
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <_sbrk+0x60>)
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028f0:	4b13      	ldr	r3, [pc, #76]	; (8002940 <_sbrk+0x64>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <_sbrk+0x64>)
 80028fa:	4a12      	ldr	r2, [pc, #72]	; (8002944 <_sbrk+0x68>)
 80028fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <_sbrk+0x64>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	429a      	cmp	r2, r3
 800290a:	d207      	bcs.n	800291c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800290c:	f00c fbd4 	bl	800f0b8 <__errno>
 8002910:	4603      	mov	r3, r0
 8002912:	220c      	movs	r2, #12
 8002914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002916:	f04f 33ff 	mov.w	r3, #4294967295
 800291a:	e009      	b.n	8002930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <_sbrk+0x64>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002922:	4b07      	ldr	r3, [pc, #28]	; (8002940 <_sbrk+0x64>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	4a05      	ldr	r2, [pc, #20]	; (8002940 <_sbrk+0x64>)
 800292c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800292e:	68fb      	ldr	r3, [r7, #12]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20020000 	.word	0x20020000
 800293c:	00000400 	.word	0x00000400
 8002940:	20004458 	.word	0x20004458
 8002944:	200045b0 	.word	0x200045b0

08002948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <SystemInit+0x20>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	4a05      	ldr	r2, [pc, #20]	; (8002968 <SystemInit+0x20>)
 8002954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800296c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002970:	480d      	ldr	r0, [pc, #52]	; (80029a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002972:	490e      	ldr	r1, [pc, #56]	; (80029ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002974:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002978:	e002      	b.n	8002980 <LoopCopyDataInit>

0800297a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800297c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297e:	3304      	adds	r3, #4

08002980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002984:	d3f9      	bcc.n	800297a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002986:	4a0b      	ldr	r2, [pc, #44]	; (80029b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002988:	4c0b      	ldr	r4, [pc, #44]	; (80029b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800298c:	e001      	b.n	8002992 <LoopFillZerobss>

0800298e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002990:	3204      	adds	r2, #4

08002992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002994:	d3fb      	bcc.n	800298e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002996:	f7ff ffd7 	bl	8002948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800299a:	f00c fb93 	bl	800f0c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800299e:	f7fd fe79 	bl	8000694 <main>
  bx  lr    
 80029a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029ac:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 80029b0:	08010a6c 	.word	0x08010a6c
  ldr r2, =_sbss
 80029b4:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 80029b8:	200045ac 	.word	0x200045ac

080029bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029bc:	e7fe      	b.n	80029bc <ADC_IRQHandler>
	...

080029c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029c4:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <HAL_Init+0x40>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <HAL_Init+0x40>)
 80029ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_Init+0x40>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <HAL_Init+0x40>)
 80029d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029dc:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <HAL_Init+0x40>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a07      	ldr	r2, [pc, #28]	; (8002a00 <HAL_Init+0x40>)
 80029e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e8:	2003      	movs	r0, #3
 80029ea:	f000 f973 	bl	8002cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ee:	200f      	movs	r0, #15
 80029f0:	f000 f808 	bl	8002a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f4:	f7ff fd48 	bl	8002488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023c00 	.word	0x40023c00

08002a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a0c:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_InitTick+0x54>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_InitTick+0x58>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	4619      	mov	r1, r3
 8002a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 f999 	bl	8002d5a <HAL_SYSTICK_Config>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00e      	b.n	8002a50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b0f      	cmp	r3, #15
 8002a36:	d80a      	bhi.n	8002a4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	f000 f953 	bl	8002cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a44:	4a06      	ldr	r2, [pc, #24]	; (8002a60 <HAL_InitTick+0x5c>)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e000      	b.n	8002a50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	200000a4 	.word	0x200000a4
 8002a5c:	200000ac 	.word	0x200000ac
 8002a60:	200000a8 	.word	0x200000a8

08002a64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_IncTick+0x20>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_IncTick+0x24>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	4a04      	ldr	r2, [pc, #16]	; (8002a88 <HAL_IncTick+0x24>)
 8002a76:	6013      	str	r3, [r2, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	200000ac 	.word	0x200000ac
 8002a88:	2000445c 	.word	0x2000445c

08002a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <HAL_GetTick+0x14>)
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	2000445c 	.word	0x2000445c

08002aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aac:	f7ff ffee 	bl	8002a8c <HAL_GetTick>
 8002ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d005      	beq.n	8002aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <HAL_Delay+0x44>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aca:	bf00      	nop
 8002acc:	f7ff ffde 	bl	8002a8c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d8f7      	bhi.n	8002acc <HAL_Delay+0x28>
  {
  }
}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	200000ac 	.word	0x200000ac

08002aec <__NVIC_SetPriorityGrouping>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1e:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <__NVIC_SetPriorityGrouping+0x44>)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	60d3      	str	r3, [r2, #12]
}
 8002b24:	bf00      	nop
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <__NVIC_GetPriorityGrouping>:
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b38:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <__NVIC_GetPriorityGrouping+0x18>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	0a1b      	lsrs	r3, r3, #8
 8002b3e:	f003 0307 	and.w	r3, r3, #7
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_EnableIRQ>:
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	db0b      	blt.n	8002b7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	f003 021f 	and.w	r2, r3, #31
 8002b68:	4907      	ldr	r1, [pc, #28]	; (8002b88 <__NVIC_EnableIRQ+0x38>)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	2001      	movs	r0, #1
 8002b72:	fa00 f202 	lsl.w	r2, r0, r2
 8002b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	e000e100 	.word	0xe000e100

08002b8c <__NVIC_DisableIRQ>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	db12      	blt.n	8002bc4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	f003 021f 	and.w	r2, r3, #31
 8002ba4:	490a      	ldr	r1, [pc, #40]	; (8002bd0 <__NVIC_DisableIRQ+0x44>)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	2001      	movs	r0, #1
 8002bae:	fa00 f202 	lsl.w	r2, r0, r2
 8002bb2:	3320      	adds	r3, #32
 8002bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002bb8:	f3bf 8f4f 	dsb	sy
}
 8002bbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002bbe:	f3bf 8f6f 	isb	sy
}
 8002bc2:	bf00      	nop
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	e000e100 	.word	0xe000e100

08002bd4 <__NVIC_SetPriority>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	6039      	str	r1, [r7, #0]
 8002bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	db0a      	blt.n	8002bfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	490c      	ldr	r1, [pc, #48]	; (8002c20 <__NVIC_SetPriority+0x4c>)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	0112      	lsls	r2, r2, #4
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002bfc:	e00a      	b.n	8002c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	4908      	ldr	r1, [pc, #32]	; (8002c24 <__NVIC_SetPriority+0x50>)
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	3b04      	subs	r3, #4
 8002c0c:	0112      	lsls	r2, r2, #4
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	440b      	add	r3, r1
 8002c12:	761a      	strb	r2, [r3, #24]
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000e100 	.word	0xe000e100
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <NVIC_EncodePriority>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b089      	sub	sp, #36	; 0x24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f1c3 0307 	rsb	r3, r3, #7
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	bf28      	it	cs
 8002c46:	2304      	movcs	r3, #4
 8002c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	2b06      	cmp	r3, #6
 8002c50:	d902      	bls.n	8002c58 <NVIC_EncodePriority+0x30>
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3b03      	subs	r3, #3
 8002c56:	e000      	b.n	8002c5a <NVIC_EncodePriority+0x32>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43da      	mvns	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c70:	f04f 31ff 	mov.w	r1, #4294967295
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7a:	43d9      	mvns	r1, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c80:	4313      	orrs	r3, r2
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3724      	adds	r7, #36	; 0x24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
	...

08002c90 <SysTick_Config>:
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca0:	d301      	bcc.n	8002ca6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e00f      	b.n	8002cc6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ca6:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <SysTick_Config+0x40>)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cae:	210f      	movs	r1, #15
 8002cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb4:	f7ff ff8e 	bl	8002bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <SysTick_Config+0x40>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cbe:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <SysTick_Config+0x40>)
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	e000e010 	.word	0xe000e010

08002cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff ff05 	bl	8002aec <__NVIC_SetPriorityGrouping>
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cfc:	f7ff ff1a 	bl	8002b34 <__NVIC_GetPriorityGrouping>
 8002d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	6978      	ldr	r0, [r7, #20]
 8002d08:	f7ff ff8e 	bl	8002c28 <NVIC_EncodePriority>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff ff5d 	bl	8002bd4 <__NVIC_SetPriority>
}
 8002d1a:	bf00      	nop
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	4603      	mov	r3, r0
 8002d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff ff0d 	bl	8002b50 <__NVIC_EnableIRQ>
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	4603      	mov	r3, r0
 8002d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff1d 	bl	8002b8c <__NVIC_DisableIRQ>
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff ff94 	bl	8002c90 <SysTick_Config>
 8002d68:	4603      	mov	r3, r0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d80:	f7ff fe84 	bl	8002a8c <HAL_GetTick>
 8002d84:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d008      	beq.n	8002da4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2280      	movs	r2, #128	; 0x80
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e052      	b.n	8002e4a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0216 	bic.w	r2, r2, #22
 8002db2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dc2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d103      	bne.n	8002dd4 <HAL_DMA_Abort+0x62>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d007      	beq.n	8002de4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0208 	bic.w	r2, r2, #8
 8002de2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002df4:	e013      	b.n	8002e1e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002df6:	f7ff fe49 	bl	8002a8c <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b05      	cmp	r3, #5
 8002e02:	d90c      	bls.n	8002e1e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e015      	b.n	8002e4a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e4      	bne.n	8002df6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e30:	223f      	movs	r2, #63	; 0x3f
 8002e32:	409a      	lsls	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d004      	beq.n	8002e70 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2280      	movs	r2, #128	; 0x80
 8002e6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e00c      	b.n	8002e8a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2205      	movs	r2, #5
 8002e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
	...

08002e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b089      	sub	sp, #36	; 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
 8002eb2:	e159      	b.n	8003168 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	f040 8148 	bne.w	8003162 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d005      	beq.n	8002eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d130      	bne.n	8002f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f20:	2201      	movs	r2, #1
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	091b      	lsrs	r3, r3, #4
 8002f36:	f003 0201 	and.w	r2, r3, #1
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d017      	beq.n	8002f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	2203      	movs	r2, #3
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0303 	and.w	r3, r3, #3
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d123      	bne.n	8002fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	08da      	lsrs	r2, r3, #3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3208      	adds	r2, #8
 8002f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	220f      	movs	r2, #15
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	08da      	lsrs	r2, r3, #3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3208      	adds	r2, #8
 8002fd6:	69b9      	ldr	r1, [r7, #24]
 8002fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0203 	and.w	r2, r3, #3
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80a2 	beq.w	8003162 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	4b57      	ldr	r3, [pc, #348]	; (8003180 <HAL_GPIO_Init+0x2e8>)
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	4a56      	ldr	r2, [pc, #344]	; (8003180 <HAL_GPIO_Init+0x2e8>)
 8003028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800302c:	6453      	str	r3, [r2, #68]	; 0x44
 800302e:	4b54      	ldr	r3, [pc, #336]	; (8003180 <HAL_GPIO_Init+0x2e8>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800303a:	4a52      	ldr	r2, [pc, #328]	; (8003184 <HAL_GPIO_Init+0x2ec>)
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	089b      	lsrs	r3, r3, #2
 8003040:	3302      	adds	r3, #2
 8003042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	220f      	movs	r2, #15
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a49      	ldr	r2, [pc, #292]	; (8003188 <HAL_GPIO_Init+0x2f0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d019      	beq.n	800309a <HAL_GPIO_Init+0x202>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a48      	ldr	r2, [pc, #288]	; (800318c <HAL_GPIO_Init+0x2f4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <HAL_GPIO_Init+0x1fe>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a47      	ldr	r2, [pc, #284]	; (8003190 <HAL_GPIO_Init+0x2f8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00d      	beq.n	8003092 <HAL_GPIO_Init+0x1fa>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a46      	ldr	r2, [pc, #280]	; (8003194 <HAL_GPIO_Init+0x2fc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d007      	beq.n	800308e <HAL_GPIO_Init+0x1f6>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a45      	ldr	r2, [pc, #276]	; (8003198 <HAL_GPIO_Init+0x300>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d101      	bne.n	800308a <HAL_GPIO_Init+0x1f2>
 8003086:	2304      	movs	r3, #4
 8003088:	e008      	b.n	800309c <HAL_GPIO_Init+0x204>
 800308a:	2307      	movs	r3, #7
 800308c:	e006      	b.n	800309c <HAL_GPIO_Init+0x204>
 800308e:	2303      	movs	r3, #3
 8003090:	e004      	b.n	800309c <HAL_GPIO_Init+0x204>
 8003092:	2302      	movs	r3, #2
 8003094:	e002      	b.n	800309c <HAL_GPIO_Init+0x204>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <HAL_GPIO_Init+0x204>
 800309a:	2300      	movs	r3, #0
 800309c:	69fa      	ldr	r2, [r7, #28]
 800309e:	f002 0203 	and.w	r2, r2, #3
 80030a2:	0092      	lsls	r2, r2, #2
 80030a4:	4093      	lsls	r3, r2
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030ac:	4935      	ldr	r1, [pc, #212]	; (8003184 <HAL_GPIO_Init+0x2ec>)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	089b      	lsrs	r3, r3, #2
 80030b2:	3302      	adds	r3, #2
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ba:	4b38      	ldr	r3, [pc, #224]	; (800319c <HAL_GPIO_Init+0x304>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030de:	4a2f      	ldr	r2, [pc, #188]	; (800319c <HAL_GPIO_Init+0x304>)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030e4:	4b2d      	ldr	r3, [pc, #180]	; (800319c <HAL_GPIO_Init+0x304>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003108:	4a24      	ldr	r2, [pc, #144]	; (800319c <HAL_GPIO_Init+0x304>)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800310e:	4b23      	ldr	r3, [pc, #140]	; (800319c <HAL_GPIO_Init+0x304>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003132:	4a1a      	ldr	r2, [pc, #104]	; (800319c <HAL_GPIO_Init+0x304>)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003138:	4b18      	ldr	r3, [pc, #96]	; (800319c <HAL_GPIO_Init+0x304>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800315c:	4a0f      	ldr	r2, [pc, #60]	; (800319c <HAL_GPIO_Init+0x304>)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3301      	adds	r3, #1
 8003166:	61fb      	str	r3, [r7, #28]
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	2b0f      	cmp	r3, #15
 800316c:	f67f aea2 	bls.w	8002eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	3724      	adds	r7, #36	; 0x24
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800
 8003184:	40013800 	.word	0x40013800
 8003188:	40020000 	.word	0x40020000
 800318c:	40020400 	.word	0x40020400
 8003190:	40020800 	.word	0x40020800
 8003194:	40020c00 	.word	0x40020c00
 8003198:	40021000 	.word	0x40021000
 800319c:	40013c00 	.word	0x40013c00

080031a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	e0bb      	b.n	8003334 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031bc:	2201      	movs	r2, #1
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4013      	ands	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	f040 80ab 	bne.w	800332e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80031d8:	4a5c      	ldr	r2, [pc, #368]	; (800334c <HAL_GPIO_DeInit+0x1ac>)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	089b      	lsrs	r3, r3, #2
 80031de:	3302      	adds	r3, #2
 80031e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	220f      	movs	r2, #15
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	4013      	ands	r3, r2
 80031f8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a54      	ldr	r2, [pc, #336]	; (8003350 <HAL_GPIO_DeInit+0x1b0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d019      	beq.n	8003236 <HAL_GPIO_DeInit+0x96>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a53      	ldr	r2, [pc, #332]	; (8003354 <HAL_GPIO_DeInit+0x1b4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d013      	beq.n	8003232 <HAL_GPIO_DeInit+0x92>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a52      	ldr	r2, [pc, #328]	; (8003358 <HAL_GPIO_DeInit+0x1b8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00d      	beq.n	800322e <HAL_GPIO_DeInit+0x8e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a51      	ldr	r2, [pc, #324]	; (800335c <HAL_GPIO_DeInit+0x1bc>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d007      	beq.n	800322a <HAL_GPIO_DeInit+0x8a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a50      	ldr	r2, [pc, #320]	; (8003360 <HAL_GPIO_DeInit+0x1c0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d101      	bne.n	8003226 <HAL_GPIO_DeInit+0x86>
 8003222:	2304      	movs	r3, #4
 8003224:	e008      	b.n	8003238 <HAL_GPIO_DeInit+0x98>
 8003226:	2307      	movs	r3, #7
 8003228:	e006      	b.n	8003238 <HAL_GPIO_DeInit+0x98>
 800322a:	2303      	movs	r3, #3
 800322c:	e004      	b.n	8003238 <HAL_GPIO_DeInit+0x98>
 800322e:	2302      	movs	r3, #2
 8003230:	e002      	b.n	8003238 <HAL_GPIO_DeInit+0x98>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_GPIO_DeInit+0x98>
 8003236:	2300      	movs	r3, #0
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	f002 0203 	and.w	r2, r2, #3
 800323e:	0092      	lsls	r2, r2, #2
 8003240:	4093      	lsls	r3, r2
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	429a      	cmp	r2, r3
 8003246:	d132      	bne.n	80032ae <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003248:	4b46      	ldr	r3, [pc, #280]	; (8003364 <HAL_GPIO_DeInit+0x1c4>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	43db      	mvns	r3, r3
 8003250:	4944      	ldr	r1, [pc, #272]	; (8003364 <HAL_GPIO_DeInit+0x1c4>)
 8003252:	4013      	ands	r3, r2
 8003254:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003256:	4b43      	ldr	r3, [pc, #268]	; (8003364 <HAL_GPIO_DeInit+0x1c4>)
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	43db      	mvns	r3, r3
 800325e:	4941      	ldr	r1, [pc, #260]	; (8003364 <HAL_GPIO_DeInit+0x1c4>)
 8003260:	4013      	ands	r3, r2
 8003262:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003264:	4b3f      	ldr	r3, [pc, #252]	; (8003364 <HAL_GPIO_DeInit+0x1c4>)
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	43db      	mvns	r3, r3
 800326c:	493d      	ldr	r1, [pc, #244]	; (8003364 <HAL_GPIO_DeInit+0x1c4>)
 800326e:	4013      	ands	r3, r2
 8003270:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003272:	4b3c      	ldr	r3, [pc, #240]	; (8003364 <HAL_GPIO_DeInit+0x1c4>)
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	43db      	mvns	r3, r3
 800327a:	493a      	ldr	r1, [pc, #232]	; (8003364 <HAL_GPIO_DeInit+0x1c4>)
 800327c:	4013      	ands	r3, r2
 800327e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	220f      	movs	r2, #15
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003290:	4a2e      	ldr	r2, [pc, #184]	; (800334c <HAL_GPIO_DeInit+0x1ac>)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	089b      	lsrs	r3, r3, #2
 8003296:	3302      	adds	r3, #2
 8003298:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	43da      	mvns	r2, r3
 80032a0:	482a      	ldr	r0, [pc, #168]	; (800334c <HAL_GPIO_DeInit+0x1ac>)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	089b      	lsrs	r3, r3, #2
 80032a6:	400a      	ands	r2, r1
 80032a8:	3302      	adds	r3, #2
 80032aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2103      	movs	r1, #3
 80032b8:	fa01 f303 	lsl.w	r3, r1, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	401a      	ands	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	08da      	lsrs	r2, r3, #3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3208      	adds	r2, #8
 80032cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	220f      	movs	r2, #15
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	08d2      	lsrs	r2, r2, #3
 80032e4:	4019      	ands	r1, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	3208      	adds	r2, #8
 80032ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	2103      	movs	r1, #3
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	401a      	ands	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	2101      	movs	r1, #1
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	fa01 f303 	lsl.w	r3, r1, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	401a      	ands	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	2103      	movs	r1, #3
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	401a      	ands	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	3301      	adds	r3, #1
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2b0f      	cmp	r3, #15
 8003338:	f67f af40 	bls.w	80031bc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40013800 	.word	0x40013800
 8003350:	40020000 	.word	0x40020000
 8003354:	40020400 	.word	0x40020400
 8003358:	40020800 	.word	0x40020800
 800335c:	40020c00 	.word	0x40020c00
 8003360:	40021000 	.word	0x40021000
 8003364:	40013c00 	.word	0x40013c00

08003368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	807b      	strh	r3, [r7, #2]
 8003374:	4613      	mov	r3, r2
 8003376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003378:	787b      	ldrb	r3, [r7, #1]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800337e:	887a      	ldrh	r2, [r7, #2]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003384:	e003      	b.n	800338e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003386:	887b      	ldrh	r3, [r7, #2]
 8003388:	041a      	lsls	r2, r3, #16
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	619a      	str	r2, [r3, #24]
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800339a:	b480      	push	{r7}
 800339c:	b085      	sub	sp, #20
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033ac:	887a      	ldrh	r2, [r7, #2]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4013      	ands	r3, r2
 80033b2:	041a      	lsls	r2, r3, #16
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	43d9      	mvns	r1, r3
 80033b8:	887b      	ldrh	r3, [r7, #2]
 80033ba:	400b      	ands	r3, r1
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	619a      	str	r2, [r3, #24]
}
 80033c2:	bf00      	nop
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e267      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d075      	beq.n	80034da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ee:	4b88      	ldr	r3, [pc, #544]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d00c      	beq.n	8003414 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033fa:	4b85      	ldr	r3, [pc, #532]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003402:	2b08      	cmp	r3, #8
 8003404:	d112      	bne.n	800342c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003406:	4b82      	ldr	r3, [pc, #520]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003412:	d10b      	bne.n	800342c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003414:	4b7e      	ldr	r3, [pc, #504]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d05b      	beq.n	80034d8 <HAL_RCC_OscConfig+0x108>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d157      	bne.n	80034d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e242      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003434:	d106      	bne.n	8003444 <HAL_RCC_OscConfig+0x74>
 8003436:	4b76      	ldr	r3, [pc, #472]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a75      	ldr	r2, [pc, #468]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e01d      	b.n	8003480 <HAL_RCC_OscConfig+0xb0>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x98>
 800344e:	4b70      	ldr	r3, [pc, #448]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a6f      	ldr	r2, [pc, #444]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	4b6d      	ldr	r3, [pc, #436]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a6c      	ldr	r2, [pc, #432]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e00b      	b.n	8003480 <HAL_RCC_OscConfig+0xb0>
 8003468:	4b69      	ldr	r3, [pc, #420]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a68      	ldr	r2, [pc, #416]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800346e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b66      	ldr	r3, [pc, #408]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a65      	ldr	r2, [pc, #404]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800347a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800347e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d013      	beq.n	80034b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7ff fb00 	bl	8002a8c <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003490:	f7ff fafc 	bl	8002a8c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e207      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	4b5b      	ldr	r3, [pc, #364]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0xc0>
 80034ae:	e014      	b.n	80034da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7ff faec 	bl	8002a8c <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b8:	f7ff fae8 	bl	8002a8c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	; 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e1f3      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	4b51      	ldr	r3, [pc, #324]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0xe8>
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d063      	beq.n	80035ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034e6:	4b4a      	ldr	r3, [pc, #296]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f2:	4b47      	ldr	r3, [pc, #284]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d11c      	bne.n	8003538 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fe:	4b44      	ldr	r3, [pc, #272]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d116      	bne.n	8003538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350a:	4b41      	ldr	r3, [pc, #260]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_RCC_OscConfig+0x152>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e1c7      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003522:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4937      	ldr	r1, [pc, #220]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003536:	e03a      	b.n	80035ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d020      	beq.n	8003582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003540:	4b34      	ldr	r3, [pc, #208]	; (8003614 <HAL_RCC_OscConfig+0x244>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003546:	f7ff faa1 	bl	8002a8c <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354e:	f7ff fa9d 	bl	8002a8c <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e1a8      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003560:	4b2b      	ldr	r3, [pc, #172]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356c:	4b28      	ldr	r3, [pc, #160]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4925      	ldr	r1, [pc, #148]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800357c:	4313      	orrs	r3, r2
 800357e:	600b      	str	r3, [r1, #0]
 8003580:	e015      	b.n	80035ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003582:	4b24      	ldr	r3, [pc, #144]	; (8003614 <HAL_RCC_OscConfig+0x244>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7ff fa80 	bl	8002a8c <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003590:	f7ff fa7c 	bl	8002a8c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e187      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a2:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d036      	beq.n	8003628 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d016      	beq.n	80035f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <HAL_RCC_OscConfig+0x248>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7ff fa60 	bl	8002a8c <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d0:	f7ff fa5c 	bl	8002a8c <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e167      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e2:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80035e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x200>
 80035ee:	e01b      	b.n	8003628 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f0:	4b09      	ldr	r3, [pc, #36]	; (8003618 <HAL_RCC_OscConfig+0x248>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f6:	f7ff fa49 	bl	8002a8c <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035fc:	e00e      	b.n	800361c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035fe:	f7ff fa45 	bl	8002a8c <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d907      	bls.n	800361c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e150      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
 8003610:	40023800 	.word	0x40023800
 8003614:	42470000 	.word	0x42470000
 8003618:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800361c:	4b88      	ldr	r3, [pc, #544]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 800361e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1ea      	bne.n	80035fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8097 	beq.w	8003764 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003636:	2300      	movs	r3, #0
 8003638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800363a:	4b81      	ldr	r3, [pc, #516]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	4b7d      	ldr	r3, [pc, #500]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	4a7c      	ldr	r2, [pc, #496]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 8003650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003654:	6413      	str	r3, [r2, #64]	; 0x40
 8003656:	4b7a      	ldr	r3, [pc, #488]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003662:	2301      	movs	r3, #1
 8003664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003666:	4b77      	ldr	r3, [pc, #476]	; (8003844 <HAL_RCC_OscConfig+0x474>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d118      	bne.n	80036a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003672:	4b74      	ldr	r3, [pc, #464]	; (8003844 <HAL_RCC_OscConfig+0x474>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a73      	ldr	r2, [pc, #460]	; (8003844 <HAL_RCC_OscConfig+0x474>)
 8003678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367e:	f7ff fa05 	bl	8002a8c <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003686:	f7ff fa01 	bl	8002a8c <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e10c      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003698:	4b6a      	ldr	r3, [pc, #424]	; (8003844 <HAL_RCC_OscConfig+0x474>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d106      	bne.n	80036ba <HAL_RCC_OscConfig+0x2ea>
 80036ac:	4b64      	ldr	r3, [pc, #400]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b0:	4a63      	ldr	r2, [pc, #396]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6713      	str	r3, [r2, #112]	; 0x70
 80036b8:	e01c      	b.n	80036f4 <HAL_RCC_OscConfig+0x324>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b05      	cmp	r3, #5
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0x30c>
 80036c2:	4b5f      	ldr	r3, [pc, #380]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	4a5e      	ldr	r2, [pc, #376]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036c8:	f043 0304 	orr.w	r3, r3, #4
 80036cc:	6713      	str	r3, [r2, #112]	; 0x70
 80036ce:	4b5c      	ldr	r3, [pc, #368]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	4a5b      	ldr	r2, [pc, #364]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6713      	str	r3, [r2, #112]	; 0x70
 80036da:	e00b      	b.n	80036f4 <HAL_RCC_OscConfig+0x324>
 80036dc:	4b58      	ldr	r3, [pc, #352]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	4a57      	ldr	r2, [pc, #348]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	6713      	str	r3, [r2, #112]	; 0x70
 80036e8:	4b55      	ldr	r3, [pc, #340]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	4a54      	ldr	r2, [pc, #336]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036ee:	f023 0304 	bic.w	r3, r3, #4
 80036f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d015      	beq.n	8003728 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7ff f9c6 	bl	8002a8c <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003702:	e00a      	b.n	800371a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003704:	f7ff f9c2 	bl	8002a8c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e0cb      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371a:	4b49      	ldr	r3, [pc, #292]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0ee      	beq.n	8003704 <HAL_RCC_OscConfig+0x334>
 8003726:	e014      	b.n	8003752 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003728:	f7ff f9b0 	bl	8002a8c <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372e:	e00a      	b.n	8003746 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003730:	f7ff f9ac 	bl	8002a8c <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	; 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e0b5      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003746:	4b3e      	ldr	r3, [pc, #248]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1ee      	bne.n	8003730 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003752:	7dfb      	ldrb	r3, [r7, #23]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d105      	bne.n	8003764 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003758:	4b39      	ldr	r3, [pc, #228]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	4a38      	ldr	r2, [pc, #224]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 800375e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003762:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 80a1 	beq.w	80038b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800376e:	4b34      	ldr	r3, [pc, #208]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	2b08      	cmp	r3, #8
 8003778:	d05c      	beq.n	8003834 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d141      	bne.n	8003806 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003782:	4b31      	ldr	r3, [pc, #196]	; (8003848 <HAL_RCC_OscConfig+0x478>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7ff f980 	bl	8002a8c <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003790:	f7ff f97c 	bl	8002a8c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e087      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	4b27      	ldr	r3, [pc, #156]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	019b      	lsls	r3, r3, #6
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	085b      	lsrs	r3, r3, #1
 80037c6:	3b01      	subs	r3, #1
 80037c8:	041b      	lsls	r3, r3, #16
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	061b      	lsls	r3, r3, #24
 80037d2:	491b      	ldr	r1, [pc, #108]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d8:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <HAL_RCC_OscConfig+0x478>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7ff f955 	bl	8002a8c <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e6:	f7ff f951 	bl	8002a8c <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e05c      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f8:	4b11      	ldr	r3, [pc, #68]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x416>
 8003804:	e054      	b.n	80038b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003806:	4b10      	ldr	r3, [pc, #64]	; (8003848 <HAL_RCC_OscConfig+0x478>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7ff f93e 	bl	8002a8c <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003814:	f7ff f93a 	bl	8002a8c <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e045      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x444>
 8003832:	e03d      	b.n	80038b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d107      	bne.n	800384c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e038      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
 8003840:	40023800 	.word	0x40023800
 8003844:	40007000 	.word	0x40007000
 8003848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800384c:	4b1b      	ldr	r3, [pc, #108]	; (80038bc <HAL_RCC_OscConfig+0x4ec>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d028      	beq.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003864:	429a      	cmp	r2, r3
 8003866:	d121      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003872:	429a      	cmp	r2, r3
 8003874:	d11a      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800387c:	4013      	ands	r3, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003884:	4293      	cmp	r3, r2
 8003886:	d111      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003892:	085b      	lsrs	r3, r3, #1
 8003894:	3b01      	subs	r3, #1
 8003896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003898:	429a      	cmp	r2, r3
 800389a:	d107      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800

080038c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0cc      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d4:	4b68      	ldr	r3, [pc, #416]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d90c      	bls.n	80038fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b65      	ldr	r3, [pc, #404]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b63      	ldr	r3, [pc, #396]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0b8      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d020      	beq.n	800394a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003914:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a58      	ldr	r2, [pc, #352]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800391e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800392c:	4b53      	ldr	r3, [pc, #332]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a52      	ldr	r2, [pc, #328]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003938:	4b50      	ldr	r3, [pc, #320]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	494d      	ldr	r1, [pc, #308]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d044      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b47      	ldr	r3, [pc, #284]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d119      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e07f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d003      	beq.n	800397e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397a:	2b03      	cmp	r3, #3
 800397c:	d107      	bne.n	800398e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397e:	4b3f      	ldr	r3, [pc, #252]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e06f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398e:	4b3b      	ldr	r3, [pc, #236]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e067      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800399e:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f023 0203 	bic.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4934      	ldr	r1, [pc, #208]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b0:	f7ff f86c 	bl	8002a8c <HAL_GetTick>
 80039b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	e00a      	b.n	80039ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b8:	f7ff f868 	bl	8002a8c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e04f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	4b2b      	ldr	r3, [pc, #172]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 020c 	and.w	r2, r3, #12
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	429a      	cmp	r2, r3
 80039de:	d1eb      	bne.n	80039b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e0:	4b25      	ldr	r3, [pc, #148]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d20c      	bcs.n	8003a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b22      	ldr	r3, [pc, #136]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e032      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4916      	ldr	r1, [pc, #88]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a32:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	490e      	ldr	r1, [pc, #56]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a46:	f000 f821 	bl	8003a8c <HAL_RCC_GetSysClockFreq>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	490a      	ldr	r1, [pc, #40]	; (8003a80 <HAL_RCC_ClockConfig+0x1c0>)
 8003a58:	5ccb      	ldrb	r3, [r1, r3]
 8003a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5e:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe ffcc 	bl	8002a04 <HAL_InitTick>

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40023c00 	.word	0x40023c00
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	08010860 	.word	0x08010860
 8003a84:	200000a4 	.word	0x200000a4
 8003a88:	200000a8 	.word	0x200000a8

08003a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a90:	b090      	sub	sp, #64	; 0x40
 8003a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	637b      	str	r3, [r7, #52]	; 0x34
 8003a98:	2300      	movs	r3, #0
 8003a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aa4:	4b59      	ldr	r3, [pc, #356]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d00d      	beq.n	8003acc <HAL_RCC_GetSysClockFreq+0x40>
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	f200 80a1 	bhi.w	8003bf8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003abe:	e09b      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac0:	4b53      	ldr	r3, [pc, #332]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ac2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003ac4:	e09b      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ac6:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ac8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aca:	e098      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003acc:	4b4f      	ldr	r3, [pc, #316]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ad4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ad6:	4b4d      	ldr	r3, [pc, #308]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d028      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae2:	4b4a      	ldr	r3, [pc, #296]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	099b      	lsrs	r3, r3, #6
 8003ae8:	2200      	movs	r2, #0
 8003aea:	623b      	str	r3, [r7, #32]
 8003aec:	627a      	str	r2, [r7, #36]	; 0x24
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003af4:	2100      	movs	r1, #0
 8003af6:	4b47      	ldr	r3, [pc, #284]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003af8:	fb03 f201 	mul.w	r2, r3, r1
 8003afc:	2300      	movs	r3, #0
 8003afe:	fb00 f303 	mul.w	r3, r0, r3
 8003b02:	4413      	add	r3, r2
 8003b04:	4a43      	ldr	r2, [pc, #268]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b06:	fba0 1202 	umull	r1, r2, r0, r2
 8003b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b0c:	460a      	mov	r2, r1
 8003b0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b12:	4413      	add	r3, r2
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b18:	2200      	movs	r2, #0
 8003b1a:	61bb      	str	r3, [r7, #24]
 8003b1c:	61fa      	str	r2, [r7, #28]
 8003b1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b26:	f7fc fbc3 	bl	80002b0 <__aeabi_uldivmod>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4613      	mov	r3, r2
 8003b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b32:	e053      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b34:	4b35      	ldr	r3, [pc, #212]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	099b      	lsrs	r3, r3, #6
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	617a      	str	r2, [r7, #20]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b46:	f04f 0b00 	mov.w	fp, #0
 8003b4a:	4652      	mov	r2, sl
 8003b4c:	465b      	mov	r3, fp
 8003b4e:	f04f 0000 	mov.w	r0, #0
 8003b52:	f04f 0100 	mov.w	r1, #0
 8003b56:	0159      	lsls	r1, r3, #5
 8003b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b5c:	0150      	lsls	r0, r2, #5
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	ebb2 080a 	subs.w	r8, r2, sl
 8003b66:	eb63 090b 	sbc.w	r9, r3, fp
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b7e:	ebb2 0408 	subs.w	r4, r2, r8
 8003b82:	eb63 0509 	sbc.w	r5, r3, r9
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	00eb      	lsls	r3, r5, #3
 8003b90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b94:	00e2      	lsls	r2, r4, #3
 8003b96:	4614      	mov	r4, r2
 8003b98:	461d      	mov	r5, r3
 8003b9a:	eb14 030a 	adds.w	r3, r4, sl
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	eb45 030b 	adc.w	r3, r5, fp
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	028b      	lsls	r3, r1, #10
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	028a      	lsls	r2, r1, #10
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	60fa      	str	r2, [r7, #12]
 8003bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bd0:	f7fc fb6e 	bl	80002b0 <__aeabi_uldivmod>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4613      	mov	r3, r2
 8003bda:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	3301      	adds	r3, #1
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bf6:	e002      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bfa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3740      	adds	r7, #64	; 0x40
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	00f42400 	.word	0x00f42400
 8003c14:	017d7840 	.word	0x017d7840

08003c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	200000a4 	.word	0x200000a4

08003c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c34:	f7ff fff0 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	0a9b      	lsrs	r3, r3, #10
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	4903      	ldr	r1, [pc, #12]	; (8003c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c46:	5ccb      	ldrb	r3, [r1, r3]
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40023800 	.word	0x40023800
 8003c54:	08010870 	.word	0x08010870

08003c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c5c:	f7ff ffdc 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0b5b      	lsrs	r3, r3, #13
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4903      	ldr	r1, [pc, #12]	; (8003c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c6e:	5ccb      	ldrb	r3, [r1, r3]
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	08010870 	.word	0x08010870

08003c80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e07b      	b.n	8003d8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d108      	bne.n	8003cac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ca2:	d009      	beq.n	8003cb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	61da      	str	r2, [r3, #28]
 8003caa:	e005      	b.n	8003cb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d106      	bne.n	8003cd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fe fc00 	bl	80024d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3c:	ea42 0103 	orr.w	r1, r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	0c1b      	lsrs	r3, r3, #16
 8003d56:	f003 0104 	and.w	r1, r3, #4
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	f003 0210 	and.w	r2, r3, #16
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b08c      	sub	sp, #48	; 0x30
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003da0:	2301      	movs	r3, #1
 8003da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_SPI_TransmitReceive+0x26>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e18a      	b.n	80040ce <HAL_SPI_TransmitReceive+0x33c>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dc0:	f7fe fe64 	bl	8002a8c <HAL_GetTick>
 8003dc4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003dd6:	887b      	ldrh	r3, [r7, #2]
 8003dd8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003dda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d00f      	beq.n	8003e02 <HAL_SPI_TransmitReceive+0x70>
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003de8:	d107      	bne.n	8003dfa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d103      	bne.n	8003dfa <HAL_SPI_TransmitReceive+0x68>
 8003df2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d003      	beq.n	8003e02 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e00:	e15b      	b.n	80040ba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_SPI_TransmitReceive+0x82>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_SPI_TransmitReceive+0x82>
 8003e0e:	887b      	ldrh	r3, [r7, #2]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d103      	bne.n	8003e1c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e1a:	e14e      	b.n	80040ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d003      	beq.n	8003e30 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2205      	movs	r2, #5
 8003e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	887a      	ldrh	r2, [r7, #2]
 8003e40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	887a      	ldrh	r2, [r7, #2]
 8003e46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	887a      	ldrh	r2, [r7, #2]
 8003e52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	887a      	ldrh	r2, [r7, #2]
 8003e58:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e70:	2b40      	cmp	r3, #64	; 0x40
 8003e72:	d007      	beq.n	8003e84 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e8c:	d178      	bne.n	8003f80 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_SPI_TransmitReceive+0x10a>
 8003e96:	8b7b      	ldrh	r3, [r7, #26]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d166      	bne.n	8003f6a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	881a      	ldrh	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	1c9a      	adds	r2, r3, #2
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ec0:	e053      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d11b      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0x176>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d016      	beq.n	8003f08 <HAL_SPI_TransmitReceive+0x176>
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d113      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	881a      	ldrh	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	1c9a      	adds	r2, r3, #2
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d119      	bne.n	8003f4a <HAL_SPI_TransmitReceive+0x1b8>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d014      	beq.n	8003f4a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	b292      	uxth	r2, r2
 8003f2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	1c9a      	adds	r2, r3, #2
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f46:	2301      	movs	r3, #1
 8003f48:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f4a:	f7fe fd9f 	bl	8002a8c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d807      	bhi.n	8003f6a <HAL_SPI_TransmitReceive+0x1d8>
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d003      	beq.n	8003f6a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f68:	e0a7      	b.n	80040ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1a6      	bne.n	8003ec2 <HAL_SPI_TransmitReceive+0x130>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1a1      	bne.n	8003ec2 <HAL_SPI_TransmitReceive+0x130>
 8003f7e:	e07c      	b.n	800407a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <HAL_SPI_TransmitReceive+0x1fc>
 8003f88:	8b7b      	ldrh	r3, [r7, #26]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d16b      	bne.n	8004066 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	330c      	adds	r3, #12
 8003f98:	7812      	ldrb	r2, [r2, #0]
 8003f9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fb4:	e057      	b.n	8004066 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d11c      	bne.n	8003ffe <HAL_SPI_TransmitReceive+0x26c>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d017      	beq.n	8003ffe <HAL_SPI_TransmitReceive+0x26c>
 8003fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d114      	bne.n	8003ffe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	330c      	adds	r3, #12
 8003fde:	7812      	ldrb	r2, [r2, #0]
 8003fe0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b01      	cmp	r3, #1
 800400a:	d119      	bne.n	8004040 <HAL_SPI_TransmitReceive+0x2ae>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d014      	beq.n	8004040 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800403c:	2301      	movs	r3, #1
 800403e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004040:	f7fe fd24 	bl	8002a8c <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800404c:	429a      	cmp	r2, r3
 800404e:	d803      	bhi.n	8004058 <HAL_SPI_TransmitReceive+0x2c6>
 8004050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d102      	bne.n	800405e <HAL_SPI_TransmitReceive+0x2cc>
 8004058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004064:	e029      	b.n	80040ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1a2      	bne.n	8003fb6 <HAL_SPI_TransmitReceive+0x224>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d19d      	bne.n	8003fb6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 f8b2 	bl	80041e8 <SPI_EndRxTxTransaction>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d006      	beq.n	8004098 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004096:	e010      	b.n	80040ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10b      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	e000      	b.n	80040ba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80040b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3730      	adds	r7, #48	; 0x30
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	4613      	mov	r3, r2
 80040e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040e8:	f7fe fcd0 	bl	8002a8c <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	1a9b      	subs	r3, r3, r2
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	4413      	add	r3, r2
 80040f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040f8:	f7fe fcc8 	bl	8002a8c <HAL_GetTick>
 80040fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040fe:	4b39      	ldr	r3, [pc, #228]	; (80041e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	015b      	lsls	r3, r3, #5
 8004104:	0d1b      	lsrs	r3, r3, #20
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	fb02 f303 	mul.w	r3, r2, r3
 800410c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800410e:	e054      	b.n	80041ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004116:	d050      	beq.n	80041ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004118:	f7fe fcb8 	bl	8002a8c <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	429a      	cmp	r2, r3
 8004126:	d902      	bls.n	800412e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d13d      	bne.n	80041aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800413c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004146:	d111      	bne.n	800416c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004150:	d004      	beq.n	800415c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415a:	d107      	bne.n	800416c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800416a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004174:	d10f      	bne.n	8004196 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004194:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e017      	b.n	80041da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4013      	ands	r3, r2
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	bf0c      	ite	eq
 80041ca:	2301      	moveq	r3, #1
 80041cc:	2300      	movne	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	461a      	mov	r2, r3
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d19b      	bne.n	8004110 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	200000a4 	.word	0x200000a4

080041e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041f4:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <SPI_EndRxTxTransaction+0x7c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1b      	ldr	r2, [pc, #108]	; (8004268 <SPI_EndRxTxTransaction+0x80>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	0d5b      	lsrs	r3, r3, #21
 8004200:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004204:	fb02 f303 	mul.w	r3, r2, r3
 8004208:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004212:	d112      	bne.n	800423a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2200      	movs	r2, #0
 800421c:	2180      	movs	r1, #128	; 0x80
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7ff ff5a 	bl	80040d8 <SPI_WaitFlagStateUntilTimeout>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d016      	beq.n	8004258 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	f043 0220 	orr.w	r2, r3, #32
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e00f      	b.n	800425a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	3b01      	subs	r3, #1
 8004244:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004250:	2b80      	cmp	r3, #128	; 0x80
 8004252:	d0f2      	beq.n	800423a <SPI_EndRxTxTransaction+0x52>
 8004254:	e000      	b.n	8004258 <SPI_EndRxTxTransaction+0x70>
        break;
 8004256:	bf00      	nop
  }

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	200000a4 	.word	0x200000a4
 8004268:	165e9f81 	.word	0x165e9f81

0800426c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e041      	b.n	8004302 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fe f968 	bl	8002568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3304      	adds	r3, #4
 80042a8:	4619      	mov	r1, r3
 80042aa:	4610      	mov	r0, r2
 80042ac:	f000 fce4 	bl	8004c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e041      	b.n	80043a0 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d106      	bne.n	8004336 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f839 	bl	80043a8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3304      	adds	r3, #4
 8004346:	4619      	mov	r1, r3
 8004348:	4610      	mov	r0, r2
 800434a:	f000 fc95 	bl	8004c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d109      	bne.n	80043e4 <HAL_TIM_OC_Start_IT+0x28>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	bf14      	ite	ne
 80043dc:	2301      	movne	r3, #1
 80043de:	2300      	moveq	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	e022      	b.n	800442a <HAL_TIM_OC_Start_IT+0x6e>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d109      	bne.n	80043fe <HAL_TIM_OC_Start_IT+0x42>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	bf14      	ite	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	2300      	moveq	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	e015      	b.n	800442a <HAL_TIM_OC_Start_IT+0x6e>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b08      	cmp	r3, #8
 8004402:	d109      	bne.n	8004418 <HAL_TIM_OC_Start_IT+0x5c>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	bf14      	ite	ne
 8004410:	2301      	movne	r3, #1
 8004412:	2300      	moveq	r3, #0
 8004414:	b2db      	uxtb	r3, r3
 8004416:	e008      	b.n	800442a <HAL_TIM_OC_Start_IT+0x6e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b01      	cmp	r3, #1
 8004422:	bf14      	ite	ne
 8004424:	2301      	movne	r3, #1
 8004426:	2300      	moveq	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e0b3      	b.n	800459a <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d104      	bne.n	8004442 <HAL_TIM_OC_Start_IT+0x86>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004440:	e013      	b.n	800446a <HAL_TIM_OC_Start_IT+0xae>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b04      	cmp	r3, #4
 8004446:	d104      	bne.n	8004452 <HAL_TIM_OC_Start_IT+0x96>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004450:	e00b      	b.n	800446a <HAL_TIM_OC_Start_IT+0xae>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b08      	cmp	r3, #8
 8004456:	d104      	bne.n	8004462 <HAL_TIM_OC_Start_IT+0xa6>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004460:	e003      	b.n	800446a <HAL_TIM_OC_Start_IT+0xae>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2202      	movs	r2, #2
 8004466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b0c      	cmp	r3, #12
 800446e:	d841      	bhi.n	80044f4 <HAL_TIM_OC_Start_IT+0x138>
 8004470:	a201      	add	r2, pc, #4	; (adr r2, 8004478 <HAL_TIM_OC_Start_IT+0xbc>)
 8004472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004476:	bf00      	nop
 8004478:	080044ad 	.word	0x080044ad
 800447c:	080044f5 	.word	0x080044f5
 8004480:	080044f5 	.word	0x080044f5
 8004484:	080044f5 	.word	0x080044f5
 8004488:	080044bf 	.word	0x080044bf
 800448c:	080044f5 	.word	0x080044f5
 8004490:	080044f5 	.word	0x080044f5
 8004494:	080044f5 	.word	0x080044f5
 8004498:	080044d1 	.word	0x080044d1
 800449c:	080044f5 	.word	0x080044f5
 80044a0:	080044f5 	.word	0x080044f5
 80044a4:	080044f5 	.word	0x080044f5
 80044a8:	080044e3 	.word	0x080044e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0202 	orr.w	r2, r2, #2
 80044ba:	60da      	str	r2, [r3, #12]
      break;
 80044bc:	e01d      	b.n	80044fa <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0204 	orr.w	r2, r2, #4
 80044cc:	60da      	str	r2, [r3, #12]
      break;
 80044ce:	e014      	b.n	80044fa <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0208 	orr.w	r2, r2, #8
 80044de:	60da      	str	r2, [r3, #12]
      break;
 80044e0:	e00b      	b.n	80044fa <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0210 	orr.w	r2, r2, #16
 80044f0:	60da      	str	r2, [r3, #12]
      break;
 80044f2:	e002      	b.n	80044fa <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
      break;
 80044f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d14b      	bne.n	8004598 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2201      	movs	r2, #1
 8004506:	6839      	ldr	r1, [r7, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fe5b 	bl	80051c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a24      	ldr	r2, [pc, #144]	; (80045a4 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d107      	bne.n	8004528 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004526:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a1d      	ldr	r2, [pc, #116]	; (80045a4 <HAL_TIM_OC_Start_IT+0x1e8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d018      	beq.n	8004564 <HAL_TIM_OC_Start_IT+0x1a8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453a:	d013      	beq.n	8004564 <HAL_TIM_OC_Start_IT+0x1a8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a19      	ldr	r2, [pc, #100]	; (80045a8 <HAL_TIM_OC_Start_IT+0x1ec>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00e      	beq.n	8004564 <HAL_TIM_OC_Start_IT+0x1a8>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a18      	ldr	r2, [pc, #96]	; (80045ac <HAL_TIM_OC_Start_IT+0x1f0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d009      	beq.n	8004564 <HAL_TIM_OC_Start_IT+0x1a8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a16      	ldr	r2, [pc, #88]	; (80045b0 <HAL_TIM_OC_Start_IT+0x1f4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d004      	beq.n	8004564 <HAL_TIM_OC_Start_IT+0x1a8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a15      	ldr	r2, [pc, #84]	; (80045b4 <HAL_TIM_OC_Start_IT+0x1f8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d111      	bne.n	8004588 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b06      	cmp	r3, #6
 8004574:	d010      	beq.n	8004598 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0201 	orr.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004586:	e007      	b.n	8004598 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40010000 	.word	0x40010000
 80045a8:	40000400 	.word	0x40000400
 80045ac:	40000800 	.word	0x40000800
 80045b0:	40000c00 	.word	0x40000c00
 80045b4:	40014000 	.word	0x40014000

080045b8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b0c      	cmp	r3, #12
 80045ca:	d841      	bhi.n	8004650 <HAL_TIM_OC_Stop_IT+0x98>
 80045cc:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <HAL_TIM_OC_Stop_IT+0x1c>)
 80045ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d2:	bf00      	nop
 80045d4:	08004609 	.word	0x08004609
 80045d8:	08004651 	.word	0x08004651
 80045dc:	08004651 	.word	0x08004651
 80045e0:	08004651 	.word	0x08004651
 80045e4:	0800461b 	.word	0x0800461b
 80045e8:	08004651 	.word	0x08004651
 80045ec:	08004651 	.word	0x08004651
 80045f0:	08004651 	.word	0x08004651
 80045f4:	0800462d 	.word	0x0800462d
 80045f8:	08004651 	.word	0x08004651
 80045fc:	08004651 	.word	0x08004651
 8004600:	08004651 	.word	0x08004651
 8004604:	0800463f 	.word	0x0800463f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0202 	bic.w	r2, r2, #2
 8004616:	60da      	str	r2, [r3, #12]
      break;
 8004618:	e01d      	b.n	8004656 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0204 	bic.w	r2, r2, #4
 8004628:	60da      	str	r2, [r3, #12]
      break;
 800462a:	e014      	b.n	8004656 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0208 	bic.w	r2, r2, #8
 800463a:	60da      	str	r2, [r3, #12]
      break;
 800463c:	e00b      	b.n	8004656 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0210 	bic.w	r2, r2, #16
 800464c:	60da      	str	r2, [r3, #12]
      break;
 800464e:	e002      	b.n	8004656 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
      break;
 8004654:	bf00      	nop
  }

  if (status == HAL_OK)
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d157      	bne.n	800470c <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2200      	movs	r2, #0
 8004662:	6839      	ldr	r1, [r7, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fdad 	bl	80051c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a2a      	ldr	r2, [pc, #168]	; (8004718 <HAL_TIM_OC_Stop_IT+0x160>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d117      	bne.n	80046a4 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6a1a      	ldr	r2, [r3, #32]
 800467a:	f241 1311 	movw	r3, #4369	; 0x1111
 800467e:	4013      	ands	r3, r2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10f      	bne.n	80046a4 <HAL_TIM_OC_Stop_IT+0xec>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6a1a      	ldr	r2, [r3, #32]
 800468a:	f240 4344 	movw	r3, #1092	; 0x444
 800468e:	4013      	ands	r3, r2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d107      	bne.n	80046a4 <HAL_TIM_OC_Stop_IT+0xec>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046a2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6a1a      	ldr	r2, [r3, #32]
 80046aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10f      	bne.n	80046d4 <HAL_TIM_OC_Stop_IT+0x11c>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6a1a      	ldr	r2, [r3, #32]
 80046ba:	f240 4344 	movw	r3, #1092	; 0x444
 80046be:	4013      	ands	r3, r2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d107      	bne.n	80046d4 <HAL_TIM_OC_Stop_IT+0x11c>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0201 	bic.w	r2, r2, #1
 80046d2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d104      	bne.n	80046e4 <HAL_TIM_OC_Stop_IT+0x12c>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046e2:	e013      	b.n	800470c <HAL_TIM_OC_Stop_IT+0x154>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d104      	bne.n	80046f4 <HAL_TIM_OC_Stop_IT+0x13c>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f2:	e00b      	b.n	800470c <HAL_TIM_OC_Stop_IT+0x154>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b08      	cmp	r3, #8
 80046f8:	d104      	bne.n	8004704 <HAL_TIM_OC_Stop_IT+0x14c>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004702:	e003      	b.n	800470c <HAL_TIM_OC_Stop_IT+0x154>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800470c:	7bfb      	ldrb	r3, [r7, #15]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	40010000 	.word	0x40010000

0800471c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e041      	b.n	80047b4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d106      	bne.n	800474a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f839 	bl	80047bc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2202      	movs	r2, #2
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	3304      	adds	r3, #4
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f000 fa8b 	bl	8004c78 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0208 	bic.w	r2, r2, #8
 8004770:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6819      	ldr	r1, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d122      	bne.n	800482c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d11b      	bne.n	800482c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0202 	mvn.w	r2, #2
 80047fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fa11 	bl	8004c3a <HAL_TIM_IC_CaptureCallback>
 8004818:	e005      	b.n	8004826 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fd fd34 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fa14 	bl	8004c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	2b04      	cmp	r3, #4
 8004838:	d122      	bne.n	8004880 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b04      	cmp	r3, #4
 8004846:	d11b      	bne.n	8004880 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0204 	mvn.w	r2, #4
 8004850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2202      	movs	r2, #2
 8004856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f9e7 	bl	8004c3a <HAL_TIM_IC_CaptureCallback>
 800486c:	e005      	b.n	800487a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fd fd0a 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f9ea 	bl	8004c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b08      	cmp	r3, #8
 800488c:	d122      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b08      	cmp	r3, #8
 800489a:	d11b      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0208 	mvn.w	r2, #8
 80048a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2204      	movs	r2, #4
 80048aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f9bd 	bl	8004c3a <HAL_TIM_IC_CaptureCallback>
 80048c0:	e005      	b.n	80048ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fd fce0 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f9c0 	bl	8004c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0310 	and.w	r3, r3, #16
 80048de:	2b10      	cmp	r3, #16
 80048e0:	d122      	bne.n	8004928 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d11b      	bne.n	8004928 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0210 	mvn.w	r2, #16
 80048f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2208      	movs	r2, #8
 80048fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f993 	bl	8004c3a <HAL_TIM_IC_CaptureCallback>
 8004914:	e005      	b.n	8004922 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fd fcb6 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f996 	bl	8004c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b01      	cmp	r3, #1
 8004934:	d10e      	bne.n	8004954 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b01      	cmp	r3, #1
 8004942:	d107      	bne.n	8004954 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0201 	mvn.w	r2, #1
 800494c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f969 	bl	8004c26 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495e:	2b80      	cmp	r3, #128	; 0x80
 8004960:	d10e      	bne.n	8004980 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496c:	2b80      	cmp	r3, #128	; 0x80
 800496e:	d107      	bne.n	8004980 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fcc0 	bl	8005300 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498a:	2b40      	cmp	r3, #64	; 0x40
 800498c:	d10e      	bne.n	80049ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004998:	2b40      	cmp	r3, #64	; 0x40
 800499a:	d107      	bne.n	80049ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f95b 	bl	8004c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	2b20      	cmp	r3, #32
 80049b8:	d10e      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d107      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0220 	mvn.w	r2, #32
 80049d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fc8a 	bl	80052ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049d8:	bf00      	nop
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d101      	bne.n	80049fe <HAL_TIM_OC_ConfigChannel+0x1e>
 80049fa:	2302      	movs	r3, #2
 80049fc:	e048      	b.n	8004a90 <HAL_TIM_OC_ConfigChannel+0xb0>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b0c      	cmp	r3, #12
 8004a0a:	d839      	bhi.n	8004a80 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004a0c:	a201      	add	r2, pc, #4	; (adr r2, 8004a14 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a12:	bf00      	nop
 8004a14:	08004a49 	.word	0x08004a49
 8004a18:	08004a81 	.word	0x08004a81
 8004a1c:	08004a81 	.word	0x08004a81
 8004a20:	08004a81 	.word	0x08004a81
 8004a24:	08004a57 	.word	0x08004a57
 8004a28:	08004a81 	.word	0x08004a81
 8004a2c:	08004a81 	.word	0x08004a81
 8004a30:	08004a81 	.word	0x08004a81
 8004a34:	08004a65 	.word	0x08004a65
 8004a38:	08004a81 	.word	0x08004a81
 8004a3c:	08004a81 	.word	0x08004a81
 8004a40:	08004a81 	.word	0x08004a81
 8004a44:	08004a73 	.word	0x08004a73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f992 	bl	8004d78 <TIM_OC1_SetConfig>
      break;
 8004a54:	e017      	b.n	8004a86 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 f9f1 	bl	8004e44 <TIM_OC2_SetConfig>
      break;
 8004a62:	e010      	b.n	8004a86 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fa56 	bl	8004f1c <TIM_OC3_SetConfig>
      break;
 8004a70:	e009      	b.n	8004a86 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fab9 	bl	8004ff0 <TIM_OC4_SetConfig>
      break;
 8004a7e:	e002      	b.n	8004a86 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	75fb      	strb	r3, [r7, #23]
      break;
 8004a84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e0b4      	b.n	8004c1e <HAL_TIM_ConfigClockSource+0x186>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aec:	d03e      	beq.n	8004b6c <HAL_TIM_ConfigClockSource+0xd4>
 8004aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af2:	f200 8087 	bhi.w	8004c04 <HAL_TIM_ConfigClockSource+0x16c>
 8004af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afa:	f000 8086 	beq.w	8004c0a <HAL_TIM_ConfigClockSource+0x172>
 8004afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b02:	d87f      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x16c>
 8004b04:	2b70      	cmp	r3, #112	; 0x70
 8004b06:	d01a      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0xa6>
 8004b08:	2b70      	cmp	r3, #112	; 0x70
 8004b0a:	d87b      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x16c>
 8004b0c:	2b60      	cmp	r3, #96	; 0x60
 8004b0e:	d050      	beq.n	8004bb2 <HAL_TIM_ConfigClockSource+0x11a>
 8004b10:	2b60      	cmp	r3, #96	; 0x60
 8004b12:	d877      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x16c>
 8004b14:	2b50      	cmp	r3, #80	; 0x50
 8004b16:	d03c      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0xfa>
 8004b18:	2b50      	cmp	r3, #80	; 0x50
 8004b1a:	d873      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x16c>
 8004b1c:	2b40      	cmp	r3, #64	; 0x40
 8004b1e:	d058      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0x13a>
 8004b20:	2b40      	cmp	r3, #64	; 0x40
 8004b22:	d86f      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x16c>
 8004b24:	2b30      	cmp	r3, #48	; 0x30
 8004b26:	d064      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8004b28:	2b30      	cmp	r3, #48	; 0x30
 8004b2a:	d86b      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x16c>
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d060      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d867      	bhi.n	8004c04 <HAL_TIM_ConfigClockSource+0x16c>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d05c      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d05a      	beq.n	8004bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8004b3c:	e062      	b.n	8004c04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	6899      	ldr	r1, [r3, #8]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f000 fb19 	bl	8005184 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	609a      	str	r2, [r3, #8]
      break;
 8004b6a:	e04f      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	6899      	ldr	r1, [r3, #8]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f000 fb02 	bl	8005184 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b8e:	609a      	str	r2, [r3, #8]
      break;
 8004b90:	e03c      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6859      	ldr	r1, [r3, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f000 fa76 	bl	8005090 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2150      	movs	r1, #80	; 0x50
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 facf 	bl	800514e <TIM_ITRx_SetConfig>
      break;
 8004bb0:	e02c      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6859      	ldr	r1, [r3, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f000 fa95 	bl	80050ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2160      	movs	r1, #96	; 0x60
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fabf 	bl	800514e <TIM_ITRx_SetConfig>
      break;
 8004bd0:	e01c      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6859      	ldr	r1, [r3, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	461a      	mov	r2, r3
 8004be0:	f000 fa56 	bl	8005090 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2140      	movs	r1, #64	; 0x40
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 faaf 	bl	800514e <TIM_ITRx_SetConfig>
      break;
 8004bf0:	e00c      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	f000 faa6 	bl	800514e <TIM_ITRx_SetConfig>
      break;
 8004c02:	e003      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
      break;
 8004c08:	e000      	b.n	8004c0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c42:	bf00      	nop
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
	...

08004c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a34      	ldr	r2, [pc, #208]	; (8004d5c <TIM_Base_SetConfig+0xe4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00f      	beq.n	8004cb0 <TIM_Base_SetConfig+0x38>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c96:	d00b      	beq.n	8004cb0 <TIM_Base_SetConfig+0x38>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a31      	ldr	r2, [pc, #196]	; (8004d60 <TIM_Base_SetConfig+0xe8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d007      	beq.n	8004cb0 <TIM_Base_SetConfig+0x38>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a30      	ldr	r2, [pc, #192]	; (8004d64 <TIM_Base_SetConfig+0xec>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_Base_SetConfig+0x38>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a2f      	ldr	r2, [pc, #188]	; (8004d68 <TIM_Base_SetConfig+0xf0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d108      	bne.n	8004cc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a25      	ldr	r2, [pc, #148]	; (8004d5c <TIM_Base_SetConfig+0xe4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d01b      	beq.n	8004d02 <TIM_Base_SetConfig+0x8a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd0:	d017      	beq.n	8004d02 <TIM_Base_SetConfig+0x8a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a22      	ldr	r2, [pc, #136]	; (8004d60 <TIM_Base_SetConfig+0xe8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d013      	beq.n	8004d02 <TIM_Base_SetConfig+0x8a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a21      	ldr	r2, [pc, #132]	; (8004d64 <TIM_Base_SetConfig+0xec>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00f      	beq.n	8004d02 <TIM_Base_SetConfig+0x8a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a20      	ldr	r2, [pc, #128]	; (8004d68 <TIM_Base_SetConfig+0xf0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00b      	beq.n	8004d02 <TIM_Base_SetConfig+0x8a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a1f      	ldr	r2, [pc, #124]	; (8004d6c <TIM_Base_SetConfig+0xf4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d007      	beq.n	8004d02 <TIM_Base_SetConfig+0x8a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <TIM_Base_SetConfig+0xf8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d003      	beq.n	8004d02 <TIM_Base_SetConfig+0x8a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a1d      	ldr	r2, [pc, #116]	; (8004d74 <TIM_Base_SetConfig+0xfc>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d108      	bne.n	8004d14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a08      	ldr	r2, [pc, #32]	; (8004d5c <TIM_Base_SetConfig+0xe4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d103      	bne.n	8004d48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	615a      	str	r2, [r3, #20]
}
 8004d4e:	bf00      	nop
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40010000 	.word	0x40010000
 8004d60:	40000400 	.word	0x40000400
 8004d64:	40000800 	.word	0x40000800
 8004d68:	40000c00 	.word	0x40000c00
 8004d6c:	40014000 	.word	0x40014000
 8004d70:	40014400 	.word	0x40014400
 8004d74:	40014800 	.word	0x40014800

08004d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	f023 0201 	bic.w	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0303 	bic.w	r3, r3, #3
 8004dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f023 0302 	bic.w	r3, r3, #2
 8004dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a1c      	ldr	r2, [pc, #112]	; (8004e40 <TIM_OC1_SetConfig+0xc8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d10c      	bne.n	8004dee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f023 0308 	bic.w	r3, r3, #8
 8004dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f023 0304 	bic.w	r3, r3, #4
 8004dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a13      	ldr	r2, [pc, #76]	; (8004e40 <TIM_OC1_SetConfig+0xc8>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d111      	bne.n	8004e1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	621a      	str	r2, [r3, #32]
}
 8004e34:	bf00      	nop
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	40010000 	.word	0x40010000

08004e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f023 0210 	bic.w	r2, r3, #16
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f023 0320 	bic.w	r3, r3, #32
 8004e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <TIM_OC2_SetConfig+0xd4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d10d      	bne.n	8004ec0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ebe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a15      	ldr	r2, [pc, #84]	; (8004f18 <TIM_OC2_SetConfig+0xd4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d113      	bne.n	8004ef0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ece:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	621a      	str	r2, [r3, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40010000 	.word	0x40010000

08004f1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0303 	bic.w	r3, r3, #3
 8004f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a1d      	ldr	r2, [pc, #116]	; (8004fec <TIM_OC3_SetConfig+0xd0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d10d      	bne.n	8004f96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a14      	ldr	r2, [pc, #80]	; (8004fec <TIM_OC3_SetConfig+0xd0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d113      	bne.n	8004fc6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	621a      	str	r2, [r3, #32]
}
 8004fe0:	bf00      	nop
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	40010000 	.word	0x40010000

08004ff0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800503a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	031b      	lsls	r3, r3, #12
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a10      	ldr	r2, [pc, #64]	; (800508c <TIM_OC4_SetConfig+0x9c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d109      	bne.n	8005064 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005056:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	019b      	lsls	r3, r3, #6
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	621a      	str	r2, [r3, #32]
}
 800507e:	bf00      	nop
 8005080:	371c      	adds	r7, #28
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40010000 	.word	0x40010000

08005090 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a1b      	ldr	r3, [r3, #32]
 80050a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	f023 0201 	bic.w	r2, r3, #1
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f023 030a 	bic.w	r3, r3, #10
 80050cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	621a      	str	r2, [r3, #32]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b087      	sub	sp, #28
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	60f8      	str	r0, [r7, #12]
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f023 0210 	bic.w	r2, r3, #16
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005118:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	031b      	lsls	r3, r3, #12
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	4313      	orrs	r3, r2
 8005122:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800512a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	621a      	str	r2, [r3, #32]
}
 8005142:	bf00      	nop
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005164:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	f043 0307 	orr.w	r3, r3, #7
 8005170:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	609a      	str	r2, [r3, #8]
}
 8005178:	bf00      	nop
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800519e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	021a      	lsls	r2, r3, #8
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	431a      	orrs	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	609a      	str	r2, [r3, #8]
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f003 031f 	and.w	r3, r3, #31
 80051d6:	2201      	movs	r2, #1
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6a1a      	ldr	r2, [r3, #32]
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	43db      	mvns	r3, r3
 80051e6:	401a      	ands	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a1a      	ldr	r2, [r3, #32]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f003 031f 	and.w	r3, r3, #31
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	fa01 f303 	lsl.w	r3, r1, r3
 80051fc:	431a      	orrs	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	621a      	str	r2, [r3, #32]
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
	...

08005210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005220:	2b01      	cmp	r3, #1
 8005222:	d101      	bne.n	8005228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005224:	2302      	movs	r3, #2
 8005226:	e050      	b.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1c      	ldr	r2, [pc, #112]	; (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d018      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005274:	d013      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a18      	ldr	r2, [pc, #96]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00e      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a16      	ldr	r2, [pc, #88]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d009      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a15      	ldr	r2, [pc, #84]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d004      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a13      	ldr	r2, [pc, #76]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d10c      	bne.n	80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	40010000 	.word	0x40010000
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800
 80052e4:	40000c00 	.word	0x40000c00
 80052e8:	40014000 	.word	0x40014000

080052ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e03f      	b.n	80053a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fd f93a 	bl	80025b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2224      	movs	r2, #36	; 0x24
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005356:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fe49 	bl	8005ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800536c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695a      	ldr	r2, [r3, #20]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800537c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800538c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e021      	b.n	8005404 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2224      	movs	r2, #36	; 0x24
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053d6:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7fd f977 	bl	80026cc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08a      	sub	sp, #40	; 0x28
 8005410:	af02      	add	r7, sp, #8
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	603b      	str	r3, [r7, #0]
 8005418:	4613      	mov	r3, r2
 800541a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b20      	cmp	r3, #32
 800542a:	d17c      	bne.n	8005526 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <HAL_UART_Transmit+0x2c>
 8005432:	88fb      	ldrh	r3, [r7, #6]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e075      	b.n	8005528 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005442:	2b01      	cmp	r3, #1
 8005444:	d101      	bne.n	800544a <HAL_UART_Transmit+0x3e>
 8005446:	2302      	movs	r3, #2
 8005448:	e06e      	b.n	8005528 <HAL_UART_Transmit+0x11c>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2221      	movs	r2, #33	; 0x21
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005460:	f7fd fb14 	bl	8002a8c <HAL_GetTick>
 8005464:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	88fa      	ldrh	r2, [r7, #6]
 800546a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	88fa      	ldrh	r2, [r7, #6]
 8005470:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800547a:	d108      	bne.n	800548e <HAL_UART_Transmit+0x82>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d104      	bne.n	800548e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005484:	2300      	movs	r3, #0
 8005486:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	61bb      	str	r3, [r7, #24]
 800548c:	e003      	b.n	8005496 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005492:	2300      	movs	r3, #0
 8005494:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800549e:	e02a      	b.n	80054f6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2200      	movs	r2, #0
 80054a8:	2180      	movs	r1, #128	; 0x80
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 fb5a 	bl	8005b64 <UART_WaitOnFlagUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e036      	b.n	8005528 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10b      	bne.n	80054d8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054ce:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	3302      	adds	r3, #2
 80054d4:	61bb      	str	r3, [r7, #24]
 80054d6:	e007      	b.n	80054e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	781a      	ldrb	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	3301      	adds	r3, #1
 80054e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1cf      	bne.n	80054a0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2200      	movs	r2, #0
 8005508:	2140      	movs	r1, #64	; 0x40
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 fb2a 	bl	8005b64 <UART_WaitOnFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e006      	b.n	8005528 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	e000      	b.n	8005528 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005526:	2302      	movs	r3, #2
  }
}
 8005528:	4618      	mov	r0, r3
 800552a:	3720      	adds	r7, #32
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	4613      	mov	r3, r2
 800553c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b20      	cmp	r3, #32
 8005548:	d130      	bne.n	80055ac <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <HAL_UART_Transmit_IT+0x26>
 8005550:	88fb      	ldrh	r3, [r7, #6]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e029      	b.n	80055ae <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_UART_Transmit_IT+0x38>
 8005564:	2302      	movs	r3, #2
 8005566:	e022      	b.n	80055ae <HAL_UART_Transmit_IT+0x7e>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	88fa      	ldrh	r2, [r7, #6]
 800557a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	88fa      	ldrh	r2, [r7, #6]
 8005580:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2221      	movs	r2, #33	; 0x21
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055a6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80055a8:	2300      	movs	r3, #0
 80055aa:	e000      	b.n	80055ae <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80055ac:	2302      	movs	r3, #2
  }
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b084      	sub	sp, #16
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	4613      	mov	r3, r2
 80055c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d11d      	bne.n	8005610 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_UART_Receive_IT+0x26>
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e016      	b.n	8005612 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_UART_Receive_IT+0x38>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e00f      	b.n	8005612 <HAL_UART_Receive_IT+0x58>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005600:	88fb      	ldrh	r3, [r7, #6]
 8005602:	461a      	mov	r2, r3
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 fb1a 	bl	8005c40 <UART_Start_Receive_IT>
 800560c:	4603      	mov	r3, r0
 800560e:	e000      	b.n	8005612 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005610:	2302      	movs	r3, #2
  }
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
	...

0800561c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b0ba      	sub	sp, #232	; 0xe8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005642:	2300      	movs	r3, #0
 8005644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005648:	2300      	movs	r3, #0
 800564a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800564e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800565a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10f      	bne.n	8005682 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <HAL_UART_IRQHandler+0x66>
 800566e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fbfd 	bl	8005e7a <UART_Receive_IT>
      return;
 8005680:	e256      	b.n	8005b30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 80de 	beq.w	8005848 <HAL_UART_IRQHandler+0x22c>
 800568c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d106      	bne.n	80056a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800569c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 80d1 	beq.w	8005848 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00b      	beq.n	80056ca <HAL_UART_IRQHandler+0xae>
 80056b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	f043 0201 	orr.w	r2, r3, #1
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ce:	f003 0304 	and.w	r3, r3, #4
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00b      	beq.n	80056ee <HAL_UART_IRQHandler+0xd2>
 80056d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d005      	beq.n	80056ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	f043 0202 	orr.w	r2, r3, #2
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00b      	beq.n	8005712 <HAL_UART_IRQHandler+0xf6>
 80056fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	f043 0204 	orr.w	r2, r3, #4
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d011      	beq.n	8005742 <HAL_UART_IRQHandler+0x126>
 800571e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005722:	f003 0320 	and.w	r3, r3, #32
 8005726:	2b00      	cmp	r3, #0
 8005728:	d105      	bne.n	8005736 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800572a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f043 0208 	orr.w	r2, r3, #8
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 81ed 	beq.w	8005b26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800574c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005750:	f003 0320 	and.w	r3, r3, #32
 8005754:	2b00      	cmp	r3, #0
 8005756:	d008      	beq.n	800576a <HAL_UART_IRQHandler+0x14e>
 8005758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fb88 	bl	8005e7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005774:	2b40      	cmp	r3, #64	; 0x40
 8005776:	bf0c      	ite	eq
 8005778:	2301      	moveq	r3, #1
 800577a:	2300      	movne	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <HAL_UART_IRQHandler+0x17a>
 800578e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005792:	2b00      	cmp	r3, #0
 8005794:	d04f      	beq.n	8005836 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fa90 	bl	8005cbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a6:	2b40      	cmp	r3, #64	; 0x40
 80057a8:	d141      	bne.n	800582e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3314      	adds	r3, #20
 80057b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057b8:	e853 3f00 	ldrex	r3, [r3]
 80057bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3314      	adds	r3, #20
 80057d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057e6:	e841 2300 	strex	r3, r2, [r1]
 80057ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1d9      	bne.n	80057aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d013      	beq.n	8005826 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	4a7d      	ldr	r2, [pc, #500]	; (80059f8 <HAL_UART_IRQHandler+0x3dc>)
 8005804:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	4618      	mov	r0, r3
 800580c:	f7fd fb21 	bl	8002e52 <HAL_DMA_Abort_IT>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d016      	beq.n	8005844 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005820:	4610      	mov	r0, r2
 8005822:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005824:	e00e      	b.n	8005844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fc fc92 	bl	8002150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800582c:	e00a      	b.n	8005844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fc fc8e 	bl	8002150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005834:	e006      	b.n	8005844 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fc fc8a 	bl	8002150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005842:	e170      	b.n	8005b26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005844:	bf00      	nop
    return;
 8005846:	e16e      	b.n	8005b26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584c:	2b01      	cmp	r3, #1
 800584e:	f040 814a 	bne.w	8005ae6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005856:	f003 0310 	and.w	r3, r3, #16
 800585a:	2b00      	cmp	r3, #0
 800585c:	f000 8143 	beq.w	8005ae6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 813c 	beq.w	8005ae6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800586e:	2300      	movs	r3, #0
 8005870:	60bb      	str	r3, [r7, #8]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	60bb      	str	r3, [r7, #8]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	60bb      	str	r3, [r7, #8]
 8005882:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588e:	2b40      	cmp	r3, #64	; 0x40
 8005890:	f040 80b4 	bne.w	80059fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f000 8140 	beq.w	8005b2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058b2:	429a      	cmp	r2, r3
 80058b4:	f080 8139 	bcs.w	8005b2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ca:	f000 8088 	beq.w	80059de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	330c      	adds	r3, #12
 80058d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	330c      	adds	r3, #12
 80058f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80058fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005906:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005912:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1d9      	bne.n	80058ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3314      	adds	r3, #20
 8005920:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800592a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800592c:	f023 0301 	bic.w	r3, r3, #1
 8005930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3314      	adds	r3, #20
 800593a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800593e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005942:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005944:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005946:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e1      	bne.n	800591a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3314      	adds	r3, #20
 800595c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005960:	e853 3f00 	ldrex	r3, [r3]
 8005964:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005968:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800596c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	3314      	adds	r3, #20
 8005976:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800597a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800597c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005980:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1e3      	bne.n	8005956 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2220      	movs	r2, #32
 8005992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	330c      	adds	r3, #12
 80059a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a6:	e853 3f00 	ldrex	r3, [r3]
 80059aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ae:	f023 0310 	bic.w	r3, r3, #16
 80059b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	330c      	adds	r3, #12
 80059bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80059c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059c8:	e841 2300 	strex	r3, r2, [r1]
 80059cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e3      	bne.n	800599c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fd f9ca 	bl	8002d72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	4619      	mov	r1, r3
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f8ac 	bl	8005b4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059f4:	e099      	b.n	8005b2a <HAL_UART_IRQHandler+0x50e>
 80059f6:	bf00      	nop
 80059f8:	08005d83 	.word	0x08005d83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 808b 	beq.w	8005b2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8086 	beq.w	8005b2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	330c      	adds	r3, #12
 8005a28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	330c      	adds	r3, #12
 8005a42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a46:	647a      	str	r2, [r7, #68]	; 0x44
 8005a48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e3      	bne.n	8005a22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3314      	adds	r3, #20
 8005a60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	e853 3f00 	ldrex	r3, [r3]
 8005a68:	623b      	str	r3, [r7, #32]
   return(result);
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	f023 0301 	bic.w	r3, r3, #1
 8005a70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3314      	adds	r3, #20
 8005a7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a7e:	633a      	str	r2, [r7, #48]	; 0x30
 8005a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e3      	bne.n	8005a5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	330c      	adds	r3, #12
 8005aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	e853 3f00 	ldrex	r3, [r3]
 8005aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0310 	bic.w	r3, r3, #16
 8005ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	330c      	adds	r3, #12
 8005ac0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ac4:	61fa      	str	r2, [r7, #28]
 8005ac6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	69b9      	ldr	r1, [r7, #24]
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e3      	bne.n	8005aa0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ad8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f834 	bl	8005b4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ae4:	e023      	b.n	8005b2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d009      	beq.n	8005b06 <HAL_UART_IRQHandler+0x4ea>
 8005af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f953 	bl	8005daa <UART_Transmit_IT>
    return;
 8005b04:	e014      	b.n	8005b30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00e      	beq.n	8005b30 <HAL_UART_IRQHandler+0x514>
 8005b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d008      	beq.n	8005b30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f993 	bl	8005e4a <UART_EndTransmit_IT>
    return;
 8005b24:	e004      	b.n	8005b30 <HAL_UART_IRQHandler+0x514>
    return;
 8005b26:	bf00      	nop
 8005b28:	e002      	b.n	8005b30 <HAL_UART_IRQHandler+0x514>
      return;
 8005b2a:	bf00      	nop
 8005b2c:	e000      	b.n	8005b30 <HAL_UART_IRQHandler+0x514>
      return;
 8005b2e:	bf00      	nop
  }
}
 8005b30:	37e8      	adds	r7, #232	; 0xe8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop

08005b38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b090      	sub	sp, #64	; 0x40
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	603b      	str	r3, [r7, #0]
 8005b70:	4613      	mov	r3, r2
 8005b72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b74:	e050      	b.n	8005c18 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7c:	d04c      	beq.n	8005c18 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d007      	beq.n	8005b94 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b84:	f7fc ff82 	bl	8002a8c <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d241      	bcs.n	8005c18 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	330c      	adds	r3, #12
 8005b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	e853 3f00 	ldrex	r3, [r3]
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	330c      	adds	r3, #12
 8005bb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bb4:	637a      	str	r2, [r7, #52]	; 0x34
 8005bb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bbc:	e841 2300 	strex	r3, r2, [r1]
 8005bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1e5      	bne.n	8005b94 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3314      	adds	r3, #20
 8005bce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	e853 3f00 	ldrex	r3, [r3]
 8005bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	f023 0301 	bic.w	r3, r3, #1
 8005bde:	63bb      	str	r3, [r7, #56]	; 0x38
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3314      	adds	r3, #20
 8005be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be8:	623a      	str	r2, [r7, #32]
 8005bea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bec:	69f9      	ldr	r1, [r7, #28]
 8005bee:	6a3a      	ldr	r2, [r7, #32]
 8005bf0:	e841 2300 	strex	r3, r2, [r1]
 8005bf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1e5      	bne.n	8005bc8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2220      	movs	r2, #32
 8005c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e00f      	b.n	8005c38 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	4013      	ands	r3, r2
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	bf0c      	ite	eq
 8005c28:	2301      	moveq	r3, #1
 8005c2a:	2300      	movne	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	461a      	mov	r2, r3
 8005c30:	79fb      	ldrb	r3, [r7, #7]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d09f      	beq.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3740      	adds	r7, #64	; 0x40
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	88fa      	ldrh	r2, [r7, #6]
 8005c58:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	88fa      	ldrh	r2, [r7, #6]
 8005c5e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2222      	movs	r2, #34	; 0x22
 8005c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d007      	beq.n	8005c8e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c8c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695a      	ldr	r2, [r3, #20]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0201 	orr.w	r2, r2, #1
 8005c9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68da      	ldr	r2, [r3, #12]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 0220 	orr.w	r2, r2, #32
 8005cac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b095      	sub	sp, #84	; 0x54
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	330c      	adds	r3, #12
 8005cca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cce:	e853 3f00 	ldrex	r3, [r3]
 8005cd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ce4:	643a      	str	r2, [r7, #64]	; 0x40
 8005ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cec:	e841 2300 	strex	r3, r2, [r1]
 8005cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1e5      	bne.n	8005cc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3314      	adds	r3, #20
 8005cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	e853 3f00 	ldrex	r3, [r3]
 8005d06:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
 8005d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3314      	adds	r3, #20
 8005d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e5      	bne.n	8005cf8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d119      	bne.n	8005d68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	330c      	adds	r3, #12
 8005d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	e853 3f00 	ldrex	r3, [r3]
 8005d42:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	f023 0310 	bic.w	r3, r3, #16
 8005d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	330c      	adds	r3, #12
 8005d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d54:	61ba      	str	r2, [r7, #24]
 8005d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	6979      	ldr	r1, [r7, #20]
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	e841 2300 	strex	r3, r2, [r1]
 8005d60:	613b      	str	r3, [r7, #16]
   return(result);
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e5      	bne.n	8005d34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d76:	bf00      	nop
 8005d78:	3754      	adds	r7, #84	; 0x54
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f7fc f9d7 	bl	8002150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005da2:	bf00      	nop
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b21      	cmp	r3, #33	; 0x21
 8005dbc:	d13e      	bne.n	8005e3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc6:	d114      	bne.n	8005df2 <UART_Transmit_IT+0x48>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d110      	bne.n	8005df2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005de4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	1c9a      	adds	r2, r3, #2
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	621a      	str	r2, [r3, #32]
 8005df0:	e008      	b.n	8005e04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	1c59      	adds	r1, r3, #1
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6211      	str	r1, [r2, #32]
 8005dfc:	781a      	ldrb	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	4619      	mov	r1, r3
 8005e12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10f      	bne.n	8005e38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	e000      	b.n	8005e3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e3c:	2302      	movs	r3, #2
  }
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b082      	sub	sp, #8
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7ff fe64 	bl	8005b38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b08c      	sub	sp, #48	; 0x30
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b22      	cmp	r3, #34	; 0x22
 8005e8c:	f040 80ab 	bne.w	8005fe6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e98:	d117      	bne.n	8005eca <UART_Receive_IT+0x50>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d113      	bne.n	8005eca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eaa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ebc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec2:	1c9a      	adds	r2, r3, #2
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ec8:	e026      	b.n	8005f18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ece:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005edc:	d007      	beq.n	8005eee <UART_Receive_IT+0x74>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10a      	bne.n	8005efc <UART_Receive_IT+0x82>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	e008      	b.n	8005f0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	4619      	mov	r1, r3
 8005f26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d15a      	bne.n	8005fe2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0220 	bic.w	r2, r2, #32
 8005f3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695a      	ldr	r2, [r3, #20]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0201 	bic.w	r2, r2, #1
 8005f5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d135      	bne.n	8005fd8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	330c      	adds	r3, #12
 8005f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	613b      	str	r3, [r7, #16]
   return(result);
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f023 0310 	bic.w	r3, r3, #16
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	330c      	adds	r3, #12
 8005f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f92:	623a      	str	r2, [r7, #32]
 8005f94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	69f9      	ldr	r1, [r7, #28]
 8005f98:	6a3a      	ldr	r2, [r7, #32]
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e5      	bne.n	8005f72 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0310 	and.w	r3, r3, #16
 8005fb0:	2b10      	cmp	r3, #16
 8005fb2:	d10a      	bne.n	8005fca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fce:	4619      	mov	r1, r3
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff fdbb 	bl	8005b4c <HAL_UARTEx_RxEventCallback>
 8005fd6:	e002      	b.n	8005fde <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7fc f917 	bl	800220c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e002      	b.n	8005fe8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e000      	b.n	8005fe8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005fe6:	2302      	movs	r3, #2
  }
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3730      	adds	r7, #48	; 0x30
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ff4:	b0c0      	sub	sp, #256	; 0x100
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600c:	68d9      	ldr	r1, [r3, #12]
 800600e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	ea40 0301 	orr.w	r3, r0, r1
 8006018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800601a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	431a      	orrs	r2, r3
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	431a      	orrs	r2, r3
 8006030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	4313      	orrs	r3, r2
 8006038:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800603c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006048:	f021 010c 	bic.w	r1, r1, #12
 800604c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006056:	430b      	orrs	r3, r1
 8006058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606a:	6999      	ldr	r1, [r3, #24]
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	ea40 0301 	orr.w	r3, r0, r1
 8006076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4b8f      	ldr	r3, [pc, #572]	; (80062bc <UART_SetConfig+0x2cc>)
 8006080:	429a      	cmp	r2, r3
 8006082:	d005      	beq.n	8006090 <UART_SetConfig+0xa0>
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	4b8d      	ldr	r3, [pc, #564]	; (80062c0 <UART_SetConfig+0x2d0>)
 800608c:	429a      	cmp	r2, r3
 800608e:	d104      	bne.n	800609a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006090:	f7fd fde2 	bl	8003c58 <HAL_RCC_GetPCLK2Freq>
 8006094:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006098:	e003      	b.n	80060a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800609a:	f7fd fdc9 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 800609e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ac:	f040 810c 	bne.w	80062c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060b4:	2200      	movs	r2, #0
 80060b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060c2:	4622      	mov	r2, r4
 80060c4:	462b      	mov	r3, r5
 80060c6:	1891      	adds	r1, r2, r2
 80060c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80060ca:	415b      	adcs	r3, r3
 80060cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060d2:	4621      	mov	r1, r4
 80060d4:	eb12 0801 	adds.w	r8, r2, r1
 80060d8:	4629      	mov	r1, r5
 80060da:	eb43 0901 	adc.w	r9, r3, r1
 80060de:	f04f 0200 	mov.w	r2, #0
 80060e2:	f04f 0300 	mov.w	r3, #0
 80060e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060f2:	4690      	mov	r8, r2
 80060f4:	4699      	mov	r9, r3
 80060f6:	4623      	mov	r3, r4
 80060f8:	eb18 0303 	adds.w	r3, r8, r3
 80060fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006100:	462b      	mov	r3, r5
 8006102:	eb49 0303 	adc.w	r3, r9, r3
 8006106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800610a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006116:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800611a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800611e:	460b      	mov	r3, r1
 8006120:	18db      	adds	r3, r3, r3
 8006122:	653b      	str	r3, [r7, #80]	; 0x50
 8006124:	4613      	mov	r3, r2
 8006126:	eb42 0303 	adc.w	r3, r2, r3
 800612a:	657b      	str	r3, [r7, #84]	; 0x54
 800612c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006130:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006134:	f7fa f8bc 	bl	80002b0 <__aeabi_uldivmod>
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4b61      	ldr	r3, [pc, #388]	; (80062c4 <UART_SetConfig+0x2d4>)
 800613e:	fba3 2302 	umull	r2, r3, r3, r2
 8006142:	095b      	lsrs	r3, r3, #5
 8006144:	011c      	lsls	r4, r3, #4
 8006146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800614a:	2200      	movs	r2, #0
 800614c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006150:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006154:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006158:	4642      	mov	r2, r8
 800615a:	464b      	mov	r3, r9
 800615c:	1891      	adds	r1, r2, r2
 800615e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006160:	415b      	adcs	r3, r3
 8006162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006168:	4641      	mov	r1, r8
 800616a:	eb12 0a01 	adds.w	sl, r2, r1
 800616e:	4649      	mov	r1, r9
 8006170:	eb43 0b01 	adc.w	fp, r3, r1
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006180:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006188:	4692      	mov	sl, r2
 800618a:	469b      	mov	fp, r3
 800618c:	4643      	mov	r3, r8
 800618e:	eb1a 0303 	adds.w	r3, sl, r3
 8006192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006196:	464b      	mov	r3, r9
 8006198:	eb4b 0303 	adc.w	r3, fp, r3
 800619c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061b4:	460b      	mov	r3, r1
 80061b6:	18db      	adds	r3, r3, r3
 80061b8:	643b      	str	r3, [r7, #64]	; 0x40
 80061ba:	4613      	mov	r3, r2
 80061bc:	eb42 0303 	adc.w	r3, r2, r3
 80061c0:	647b      	str	r3, [r7, #68]	; 0x44
 80061c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061ca:	f7fa f871 	bl	80002b0 <__aeabi_uldivmod>
 80061ce:	4602      	mov	r2, r0
 80061d0:	460b      	mov	r3, r1
 80061d2:	4611      	mov	r1, r2
 80061d4:	4b3b      	ldr	r3, [pc, #236]	; (80062c4 <UART_SetConfig+0x2d4>)
 80061d6:	fba3 2301 	umull	r2, r3, r3, r1
 80061da:	095b      	lsrs	r3, r3, #5
 80061dc:	2264      	movs	r2, #100	; 0x64
 80061de:	fb02 f303 	mul.w	r3, r2, r3
 80061e2:	1acb      	subs	r3, r1, r3
 80061e4:	00db      	lsls	r3, r3, #3
 80061e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061ea:	4b36      	ldr	r3, [pc, #216]	; (80062c4 <UART_SetConfig+0x2d4>)
 80061ec:	fba3 2302 	umull	r2, r3, r3, r2
 80061f0:	095b      	lsrs	r3, r3, #5
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061f8:	441c      	add	r4, r3
 80061fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006204:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006208:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800620c:	4642      	mov	r2, r8
 800620e:	464b      	mov	r3, r9
 8006210:	1891      	adds	r1, r2, r2
 8006212:	63b9      	str	r1, [r7, #56]	; 0x38
 8006214:	415b      	adcs	r3, r3
 8006216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800621c:	4641      	mov	r1, r8
 800621e:	1851      	adds	r1, r2, r1
 8006220:	6339      	str	r1, [r7, #48]	; 0x30
 8006222:	4649      	mov	r1, r9
 8006224:	414b      	adcs	r3, r1
 8006226:	637b      	str	r3, [r7, #52]	; 0x34
 8006228:	f04f 0200 	mov.w	r2, #0
 800622c:	f04f 0300 	mov.w	r3, #0
 8006230:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006234:	4659      	mov	r1, fp
 8006236:	00cb      	lsls	r3, r1, #3
 8006238:	4651      	mov	r1, sl
 800623a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800623e:	4651      	mov	r1, sl
 8006240:	00ca      	lsls	r2, r1, #3
 8006242:	4610      	mov	r0, r2
 8006244:	4619      	mov	r1, r3
 8006246:	4603      	mov	r3, r0
 8006248:	4642      	mov	r2, r8
 800624a:	189b      	adds	r3, r3, r2
 800624c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006250:	464b      	mov	r3, r9
 8006252:	460a      	mov	r2, r1
 8006254:	eb42 0303 	adc.w	r3, r2, r3
 8006258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006268:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800626c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006270:	460b      	mov	r3, r1
 8006272:	18db      	adds	r3, r3, r3
 8006274:	62bb      	str	r3, [r7, #40]	; 0x28
 8006276:	4613      	mov	r3, r2
 8006278:	eb42 0303 	adc.w	r3, r2, r3
 800627c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800627e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006282:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006286:	f7fa f813 	bl	80002b0 <__aeabi_uldivmod>
 800628a:	4602      	mov	r2, r0
 800628c:	460b      	mov	r3, r1
 800628e:	4b0d      	ldr	r3, [pc, #52]	; (80062c4 <UART_SetConfig+0x2d4>)
 8006290:	fba3 1302 	umull	r1, r3, r3, r2
 8006294:	095b      	lsrs	r3, r3, #5
 8006296:	2164      	movs	r1, #100	; 0x64
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	3332      	adds	r3, #50	; 0x32
 80062a2:	4a08      	ldr	r2, [pc, #32]	; (80062c4 <UART_SetConfig+0x2d4>)
 80062a4:	fba2 2303 	umull	r2, r3, r2, r3
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	f003 0207 	and.w	r2, r3, #7
 80062ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4422      	add	r2, r4
 80062b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062b8:	e106      	b.n	80064c8 <UART_SetConfig+0x4d8>
 80062ba:	bf00      	nop
 80062bc:	40011000 	.word	0x40011000
 80062c0:	40011400 	.word	0x40011400
 80062c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062cc:	2200      	movs	r2, #0
 80062ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062da:	4642      	mov	r2, r8
 80062dc:	464b      	mov	r3, r9
 80062de:	1891      	adds	r1, r2, r2
 80062e0:	6239      	str	r1, [r7, #32]
 80062e2:	415b      	adcs	r3, r3
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
 80062e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062ea:	4641      	mov	r1, r8
 80062ec:	1854      	adds	r4, r2, r1
 80062ee:	4649      	mov	r1, r9
 80062f0:	eb43 0501 	adc.w	r5, r3, r1
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	00eb      	lsls	r3, r5, #3
 80062fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006302:	00e2      	lsls	r2, r4, #3
 8006304:	4614      	mov	r4, r2
 8006306:	461d      	mov	r5, r3
 8006308:	4643      	mov	r3, r8
 800630a:	18e3      	adds	r3, r4, r3
 800630c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006310:	464b      	mov	r3, r9
 8006312:	eb45 0303 	adc.w	r3, r5, r3
 8006316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800631a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800632a:	f04f 0200 	mov.w	r2, #0
 800632e:	f04f 0300 	mov.w	r3, #0
 8006332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006336:	4629      	mov	r1, r5
 8006338:	008b      	lsls	r3, r1, #2
 800633a:	4621      	mov	r1, r4
 800633c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006340:	4621      	mov	r1, r4
 8006342:	008a      	lsls	r2, r1, #2
 8006344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006348:	f7f9 ffb2 	bl	80002b0 <__aeabi_uldivmod>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4b60      	ldr	r3, [pc, #384]	; (80064d4 <UART_SetConfig+0x4e4>)
 8006352:	fba3 2302 	umull	r2, r3, r3, r2
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	011c      	lsls	r4, r3, #4
 800635a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800635e:	2200      	movs	r2, #0
 8006360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006364:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800636c:	4642      	mov	r2, r8
 800636e:	464b      	mov	r3, r9
 8006370:	1891      	adds	r1, r2, r2
 8006372:	61b9      	str	r1, [r7, #24]
 8006374:	415b      	adcs	r3, r3
 8006376:	61fb      	str	r3, [r7, #28]
 8006378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800637c:	4641      	mov	r1, r8
 800637e:	1851      	adds	r1, r2, r1
 8006380:	6139      	str	r1, [r7, #16]
 8006382:	4649      	mov	r1, r9
 8006384:	414b      	adcs	r3, r1
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	f04f 0200 	mov.w	r2, #0
 800638c:	f04f 0300 	mov.w	r3, #0
 8006390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006394:	4659      	mov	r1, fp
 8006396:	00cb      	lsls	r3, r1, #3
 8006398:	4651      	mov	r1, sl
 800639a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800639e:	4651      	mov	r1, sl
 80063a0:	00ca      	lsls	r2, r1, #3
 80063a2:	4610      	mov	r0, r2
 80063a4:	4619      	mov	r1, r3
 80063a6:	4603      	mov	r3, r0
 80063a8:	4642      	mov	r2, r8
 80063aa:	189b      	adds	r3, r3, r2
 80063ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063b0:	464b      	mov	r3, r9
 80063b2:	460a      	mov	r2, r1
 80063b4:	eb42 0303 	adc.w	r3, r2, r3
 80063b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80063c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063c8:	f04f 0200 	mov.w	r2, #0
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063d4:	4649      	mov	r1, r9
 80063d6:	008b      	lsls	r3, r1, #2
 80063d8:	4641      	mov	r1, r8
 80063da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063de:	4641      	mov	r1, r8
 80063e0:	008a      	lsls	r2, r1, #2
 80063e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063e6:	f7f9 ff63 	bl	80002b0 <__aeabi_uldivmod>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	4611      	mov	r1, r2
 80063f0:	4b38      	ldr	r3, [pc, #224]	; (80064d4 <UART_SetConfig+0x4e4>)
 80063f2:	fba3 2301 	umull	r2, r3, r3, r1
 80063f6:	095b      	lsrs	r3, r3, #5
 80063f8:	2264      	movs	r2, #100	; 0x64
 80063fa:	fb02 f303 	mul.w	r3, r2, r3
 80063fe:	1acb      	subs	r3, r1, r3
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	3332      	adds	r3, #50	; 0x32
 8006404:	4a33      	ldr	r2, [pc, #204]	; (80064d4 <UART_SetConfig+0x4e4>)
 8006406:	fba2 2303 	umull	r2, r3, r2, r3
 800640a:	095b      	lsrs	r3, r3, #5
 800640c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006410:	441c      	add	r4, r3
 8006412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006416:	2200      	movs	r2, #0
 8006418:	673b      	str	r3, [r7, #112]	; 0x70
 800641a:	677a      	str	r2, [r7, #116]	; 0x74
 800641c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006420:	4642      	mov	r2, r8
 8006422:	464b      	mov	r3, r9
 8006424:	1891      	adds	r1, r2, r2
 8006426:	60b9      	str	r1, [r7, #8]
 8006428:	415b      	adcs	r3, r3
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006430:	4641      	mov	r1, r8
 8006432:	1851      	adds	r1, r2, r1
 8006434:	6039      	str	r1, [r7, #0]
 8006436:	4649      	mov	r1, r9
 8006438:	414b      	adcs	r3, r1
 800643a:	607b      	str	r3, [r7, #4]
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006448:	4659      	mov	r1, fp
 800644a:	00cb      	lsls	r3, r1, #3
 800644c:	4651      	mov	r1, sl
 800644e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006452:	4651      	mov	r1, sl
 8006454:	00ca      	lsls	r2, r1, #3
 8006456:	4610      	mov	r0, r2
 8006458:	4619      	mov	r1, r3
 800645a:	4603      	mov	r3, r0
 800645c:	4642      	mov	r2, r8
 800645e:	189b      	adds	r3, r3, r2
 8006460:	66bb      	str	r3, [r7, #104]	; 0x68
 8006462:	464b      	mov	r3, r9
 8006464:	460a      	mov	r2, r1
 8006466:	eb42 0303 	adc.w	r3, r2, r3
 800646a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800646c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	663b      	str	r3, [r7, #96]	; 0x60
 8006476:	667a      	str	r2, [r7, #100]	; 0x64
 8006478:	f04f 0200 	mov.w	r2, #0
 800647c:	f04f 0300 	mov.w	r3, #0
 8006480:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006484:	4649      	mov	r1, r9
 8006486:	008b      	lsls	r3, r1, #2
 8006488:	4641      	mov	r1, r8
 800648a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800648e:	4641      	mov	r1, r8
 8006490:	008a      	lsls	r2, r1, #2
 8006492:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006496:	f7f9 ff0b 	bl	80002b0 <__aeabi_uldivmod>
 800649a:	4602      	mov	r2, r0
 800649c:	460b      	mov	r3, r1
 800649e:	4b0d      	ldr	r3, [pc, #52]	; (80064d4 <UART_SetConfig+0x4e4>)
 80064a0:	fba3 1302 	umull	r1, r3, r3, r2
 80064a4:	095b      	lsrs	r3, r3, #5
 80064a6:	2164      	movs	r1, #100	; 0x64
 80064a8:	fb01 f303 	mul.w	r3, r1, r3
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	011b      	lsls	r3, r3, #4
 80064b0:	3332      	adds	r3, #50	; 0x32
 80064b2:	4a08      	ldr	r2, [pc, #32]	; (80064d4 <UART_SetConfig+0x4e4>)
 80064b4:	fba2 2303 	umull	r2, r3, r2, r3
 80064b8:	095b      	lsrs	r3, r3, #5
 80064ba:	f003 020f 	and.w	r2, r3, #15
 80064be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4422      	add	r2, r4
 80064c6:	609a      	str	r2, [r3, #8]
}
 80064c8:	bf00      	nop
 80064ca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064ce:	46bd      	mov	sp, r7
 80064d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064d4:	51eb851f 	.word	0x51eb851f

080064d8 <HW_RESET>:


//No se puede quedar esperano en las funciones, hay que detectar a situaci�n y salir del bucle.
//pensar que solo entra cuando recibe datos, si no vuelve a entrar queda ah� eternamentes.
void HW_RESET(struct WIFI *a)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_RESET);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6818      	ldr	r0, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	889b      	ldrh	r3, [r3, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	4619      	mov	r1, r3
 80064ec:	f7fc ff3c 	bl	8003368 <HAL_GPIO_WritePin>
    ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 80064f0:	2115      	movs	r1, #21
 80064f2:	480b      	ldr	r0, [pc, #44]	; (8006520 <HW_RESET+0x48>)
 80064f4:	f7fa ffc6 	bl	8001484 <ITM0_Write>
    HAL_Delay(2000);											//Tiempo de reset del módulo
 80064f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80064fc:	f7fc fad2 	bl	8002aa4 <HAL_Delay>
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
 8006500:	210e      	movs	r1, #14
 8006502:	4808      	ldr	r0, [pc, #32]	; (8006524 <HW_RESET+0x4c>)
 8006504:	f7fa ffbe 	bl	8001484 <ITM0_Write>
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	889b      	ldrh	r3, [r3, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	4619      	mov	r1, r3
 8006514:	f7fc ff28 	bl	8003368 <HAL_GPIO_WritePin>
}
 8006518:	bf00      	nop
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	08010548 	.word	0x08010548
 8006524:	08010560 	.word	0x08010560

08006528 <NOP>:
void NOP(struct WIFI *a)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <MUX>:
void MUX(struct WIFI *a)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2204      	movs	r2, #4
 80065b8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <IPDef>:
void IPDef(struct WIFI *a)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2205      	movs	r2, #5
 80065e4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2206      	movs	r2, #6
 800663c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2208      	movs	r2, #8
 8006668:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2209      	movs	r2, #9
 8006694:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2207      	movs	r2, #7
 80066c0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <Inicializar>:
void Inicializar(struct WIFI *a)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 8006874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006876:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800687a:	af06      	add	r7, sp, #24
 800687c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006880:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006884:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 8006886:	2300      	movs	r3, #0
 8006888:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800688c:	2300      	movs	r3, #0
 800688e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006892:	2300      	movs	r3, #0
 8006894:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8006898:	2300      	movs	r3, #0
 800689a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800689e:	2300      	movs	r3, #0
 80068a0:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 80068a4:	2320      	movs	r3, #32
 80068a6:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 80068aa:	2322      	movs	r3, #34	; 0x22
 80068ac:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 80068b0:	4b71      	ldr	r3, [pc, #452]	; (8006a78 <AT_ESP8266_ND+0x204>)
 80068b2:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 80068b6:	4a71      	ldr	r2, [pc, #452]	; (8006a7c <AT_ESP8266_ND+0x208>)
 80068b8:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80068bc:	6812      	ldr	r2, [r2, #0]
 80068be:	4611      	mov	r1, r2
 80068c0:	8019      	strh	r1, [r3, #0]
 80068c2:	3302      	adds	r3, #2
 80068c4:	0c12      	lsrs	r2, r2, #16
 80068c6:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 80068c8:	f642 4322 	movw	r3, #11298	; 0x2c22
 80068cc:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 80068d0:	f640 230d 	movw	r3, #2573	; 0xa0d
 80068d4:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 80068d8:	2300      	movs	r3, #0
 80068da:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80068de:	2300      	movs	r3, #0
 80068e0:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 80068e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 80068f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006902:	4618      	mov	r0, r3
 8006904:	f7f9 fc76 	bl	80001f4 <strlen>
 8006908:	4603      	mov	r3, r0
 800690a:	461a      	mov	r2, r3
 800690c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006910:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 800691a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800691e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2200      	movs	r2, #0
 8006926:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 800692a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800692e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006938:	4618      	mov	r0, r3
 800693a:	f7f9 fc5b 	bl	80001f4 <strlen>
 800693e:	4603      	mov	r3, r0
 8006940:	461a      	mov	r2, r3
 8006942:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006946:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8006950:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006954:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2206      	movs	r2, #6
 800695c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006960:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006964:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800696e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006972:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800697c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006980:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800698a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800698e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006998:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800699c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80069a0:	6812      	ldr	r2, [r2, #0]
 80069a2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80069a6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80069aa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80069ae:	6809      	ldr	r1, [r1, #0]
 80069b0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80069b4:	2600      	movs	r6, #0
 80069b6:	9604      	str	r6, [sp, #16]
 80069b8:	9103      	str	r1, [sp, #12]
 80069ba:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80069be:	9102      	str	r1, [sp, #8]
 80069c0:	9201      	str	r2, [sp, #4]
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	462b      	mov	r3, r5
 80069c6:	4a2e      	ldr	r2, [pc, #184]	; (8006a80 <AT_ESP8266_ND+0x20c>)
 80069c8:	4621      	mov	r1, r4
 80069ca:	f007 fd05 	bl	800e3d8 <FT_String_ND>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	f040 812a 	bne.w	8006c2a <AT_ESP8266_ND+0x3b6>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 80069d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2206      	movs	r2, #6
 80069e2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 80069e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d145      	bne.n	8006a84 <AT_ESP8266_ND+0x210>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATA);
 80069f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006a06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006a14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006a22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006a30:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a34:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006a38:	6812      	ldr	r2, [r2, #0]
 8006a3a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006a3e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006a42:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006a46:	6809      	ldr	r1, [r1, #0]
 8006a48:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006a4c:	2604      	movs	r6, #4
 8006a4e:	9604      	str	r6, [sp, #16]
 8006a50:	9103      	str	r1, [sp, #12]
 8006a52:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006a56:	9102      	str	r1, [sp, #8]
 8006a58:	9201      	str	r2, [sp, #4]
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	462b      	mov	r3, r5
 8006a5e:	4a08      	ldr	r2, [pc, #32]	; (8006a80 <AT_ESP8266_ND+0x20c>)
 8006a60:	4621      	mov	r1, r4
 8006a62:	f007 fcb9 	bl	800e3d8 <FT_String_ND>
 8006a66:	4602      	mov	r2, r0
 8006a68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 8006a76:	e044      	b.n	8006b02 <AT_ESP8266_ND+0x28e>
 8006a78:	00222c22 	.word	0x00222c22
 8006a7c:	08010748 	.word	0x08010748
 8006a80:	08010570 	.word	0x08010570
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATASRVR);
 8006a84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006a92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006aa0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aa4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006aae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ab2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006abc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ac0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ac4:	6812      	ldr	r2, [r2, #0]
 8006ac6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006aca:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ace:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ad2:	6809      	ldr	r1, [r1, #0]
 8006ad4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ad8:	2605      	movs	r6, #5
 8006ada:	9604      	str	r6, [sp, #16]
 8006adc:	9103      	str	r1, [sp, #12]
 8006ade:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ae2:	9102      	str	r1, [sp, #8]
 8006ae4:	9201      	str	r2, [sp, #4]
 8006ae6:	9300      	str	r3, [sp, #0]
 8006ae8:	462b      	mov	r3, r5
 8006aea:	4ac1      	ldr	r2, [pc, #772]	; (8006df0 <AT_ESP8266_ND+0x57c>)
 8006aec:	4621      	mov	r1, r4
 8006aee:	f007 fc73 	bl	800e3d8 <FT_String_ND>
 8006af2:	4602      	mov	r2, r0
 8006af4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006af8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 8006b02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d15a      	bne.n	8006bca <AT_ESP8266_ND+0x356>
	 	{
	 		a->_estado_rcv_data=99;
 8006b14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	2263      	movs	r2, #99	; 0x63
 8006b20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 8006b24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006b32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006b40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8006b4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006b5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006b6a:	2341      	movs	r3, #65	; 0x41
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f007 fff6 	bl	800eb60 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006b74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8006b82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006b90:	2341      	movs	r3, #65	; 0x41
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	2300      	movs	r3, #0
 8006b96:	2205      	movs	r2, #5
 8006b98:	f007 ffe2 	bl	800eb60 <CopiaVector>

	 		a->_debug_rx_ok++;
 8006b9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ba0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006baa:	1c5a      	adds	r2, r3, #1
 8006bac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 8006bba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 8006bca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006bd8:	2b05      	cmp	r3, #5
 8006bda:	d126      	bne.n	8006c2a <AT_ESP8266_ND+0x3b6>
	 	{
	 		a->_estado_rcv_data=55;
 8006bdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006be0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2237      	movs	r2, #55	; 0x37
 8006be8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 8006bec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 8006bfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 8006c1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006c2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2204      	movs	r2, #4
 8006c36:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006c3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006c48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006c56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006c64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006c72:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006c76:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c7a:	6812      	ldr	r2, [r2, #0]
 8006c7c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006c80:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006c84:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c88:	6809      	ldr	r1, [r1, #0]
 8006c8a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006c8e:	2600      	movs	r6, #0
 8006c90:	9604      	str	r6, [sp, #16]
 8006c92:	9103      	str	r1, [sp, #12]
 8006c94:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c98:	9102      	str	r1, [sp, #8]
 8006c9a:	9201      	str	r2, [sp, #4]
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	462b      	mov	r3, r5
 8006ca0:	4a54      	ldr	r2, [pc, #336]	; (8006df4 <AT_ESP8266_ND+0x580>)
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	f007 fb98 	bl	800e3d8 <FT_String_ND>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	f040 8334 	bne.w	8007318 <AT_ESP8266_ND+0xaa4>
	{

		AT_decode=at_ok;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 8006cb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2206      	movs	r2, #6
 8006cc2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Transmision ok
 8006cc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006cd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006ce2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ce6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006cf0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cf4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006cfe:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d02:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d06:	6812      	ldr	r2, [r2, #0]
 8006d08:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006d0c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d10:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d14:	6809      	ldr	r1, [r1, #0]
 8006d16:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006d1a:	2600      	movs	r6, #0
 8006d1c:	9604      	str	r6, [sp, #16]
 8006d1e:	9103      	str	r1, [sp, #12]
 8006d20:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d24:	9102      	str	r1, [sp, #8]
 8006d26:	9201      	str	r2, [sp, #4]
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	462b      	mov	r3, r5
 8006d2c:	4a32      	ldr	r2, [pc, #200]	; (8006df8 <AT_ESP8266_ND+0x584>)
 8006d2e:	4621      	mov	r1, r4
 8006d30:	f007 fb52 	bl	800e3d8 <FT_String_ND>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d113      	bne.n	8006d62 <AT_ESP8266_ND+0x4ee>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8006d3a:	2313      	movs	r3, #19
 8006d3c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8006d40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 8006d5e:	f001 b981 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 8006d62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2208      	movs	r2, #8
 8006d6e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006d72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006d80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006d8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006d9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006da0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006daa:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006dae:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006db2:	6812      	ldr	r2, [r2, #0]
 8006db4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006db8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006dbc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006dc0:	6809      	ldr	r1, [r1, #0]
 8006dc2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006dc6:	2600      	movs	r6, #0
 8006dc8:	9604      	str	r6, [sp, #16]
 8006dca:	9103      	str	r1, [sp, #12]
 8006dcc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006dd0:	9102      	str	r1, [sp, #8]
 8006dd2:	9201      	str	r2, [sp, #4]
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	462b      	mov	r3, r5
 8006dd8:	4a08      	ldr	r2, [pc, #32]	; (8006dfc <AT_ESP8266_ND+0x588>)
 8006dda:	4621      	mov	r1, r4
 8006ddc:	f007 fafc 	bl	800e3d8 <FT_String_ND>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d10c      	bne.n	8006e00 <AT_ESP8266_ND+0x58c>
			{
			AT_decode=at_deconectar_ok;
 8006de6:	230d      	movs	r3, #13
 8006de8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006dec:	f001 b93a 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
 8006df0:	08010570 	.word	0x08010570
 8006df4:	08010578 	.word	0x08010578
 8006df8:	08010580 	.word	0x08010580
 8006dfc:	08010588 	.word	0x08010588
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006e00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	220a      	movs	r2, #10
 8006e0c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8006e10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006e1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006e2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006e3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006e48:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e4c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e50:	6812      	ldr	r2, [r2, #0]
 8006e52:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006e56:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e5a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e5e:	6809      	ldr	r1, [r1, #0]
 8006e60:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006e64:	2600      	movs	r6, #0
 8006e66:	9604      	str	r6, [sp, #16]
 8006e68:	9103      	str	r1, [sp, #12]
 8006e6a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e6e:	9102      	str	r1, [sp, #8]
 8006e70:	9201      	str	r2, [sp, #4]
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	462b      	mov	r3, r5
 8006e76:	4ab7      	ldr	r2, [pc, #732]	; (8007154 <AT_ESP8266_ND+0x8e0>)
 8006e78:	4621      	mov	r1, r4
 8006e7a:	f007 faad 	bl	800e3d8 <FT_String_ND>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d104      	bne.n	8006e8e <AT_ESP8266_ND+0x61a>
			{
				AT_decode=at_cambiar_modo_ok;
 8006e84:	231c      	movs	r3, #28
 8006e86:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006e8a:	f001 b8eb 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8006e8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	220f      	movs	r2, #15
 8006e9a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8006e9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ea2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006eac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006eba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ebe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006ec8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ecc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ed6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006eda:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ede:	6812      	ldr	r2, [r2, #0]
 8006ee0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ee4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ee8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006eec:	6809      	ldr	r1, [r1, #0]
 8006eee:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ef2:	2600      	movs	r6, #0
 8006ef4:	9604      	str	r6, [sp, #16]
 8006ef6:	9103      	str	r1, [sp, #12]
 8006ef8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006efc:	9102      	str	r1, [sp, #8]
 8006efe:	9201      	str	r2, [sp, #4]
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	462b      	mov	r3, r5
 8006f04:	4a94      	ldr	r2, [pc, #592]	; (8007158 <AT_ESP8266_ND+0x8e4>)
 8006f06:	4621      	mov	r1, r4
 8006f08:	f007 fa66 	bl	800e3d8 <FT_String_ND>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d104      	bne.n	8006f1c <AT_ESP8266_ND+0x6a8>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 8006f12:	2317      	movs	r3, #23
 8006f14:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f18:	f001 b8a4 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 8006f1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2203      	movs	r2, #3
 8006f28:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8006f2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006f3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006f48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006f56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f64:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f68:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f6c:	6812      	ldr	r2, [r2, #0]
 8006f6e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f72:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f76:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f7a:	6809      	ldr	r1, [r1, #0]
 8006f7c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f80:	2600      	movs	r6, #0
 8006f82:	9604      	str	r6, [sp, #16]
 8006f84:	9103      	str	r1, [sp, #12]
 8006f86:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f8a:	9102      	str	r1, [sp, #8]
 8006f8c:	9201      	str	r2, [sp, #4]
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	462b      	mov	r3, r5
 8006f92:	4a72      	ldr	r2, [pc, #456]	; (800715c <AT_ESP8266_ND+0x8e8>)
 8006f94:	4621      	mov	r1, r4
 8006f96:	f007 fa1f 	bl	800e3d8 <FT_String_ND>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d104      	bne.n	8006faa <AT_ESP8266_ND+0x736>
			{
				AT_decode=at_tcp_ok_to_send;
 8006fa0:	2314      	movs	r3, #20
 8006fa2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006fa6:	f001 b85d 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 8006faa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	220c      	movs	r2, #12
 8006fb6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006fba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006fc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006fd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006fe4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fe8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ff2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ff6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ffa:	6812      	ldr	r2, [r2, #0]
 8006ffc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007000:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007004:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007008:	6809      	ldr	r1, [r1, #0]
 800700a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800700e:	2600      	movs	r6, #0
 8007010:	9604      	str	r6, [sp, #16]
 8007012:	9103      	str	r1, [sp, #12]
 8007014:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007018:	9102      	str	r1, [sp, #8]
 800701a:	9201      	str	r2, [sp, #4]
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	462b      	mov	r3, r5
 8007020:	4a4f      	ldr	r2, [pc, #316]	; (8007160 <AT_ESP8266_ND+0x8ec>)
 8007022:	4621      	mov	r1, r4
 8007024:	f007 f9d8 	bl	800e3d8 <FT_String_ND>
 8007028:	4603      	mov	r3, r0
 800702a:	2b01      	cmp	r3, #1
 800702c:	d104      	bne.n	8007038 <AT_ESP8266_ND+0x7c4>
		{
			AT_decode=at_tcp_srvr_ok;
 800702e:	2315      	movs	r3, #21
 8007030:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007034:	f001 b816 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007038:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800703c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	220b      	movs	r2, #11
 8007044:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007048:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800704c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007056:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800705a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007064:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007068:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007072:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007076:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007080:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007084:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007088:	6812      	ldr	r2, [r2, #0]
 800708a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800708e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007092:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007096:	6809      	ldr	r1, [r1, #0]
 8007098:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800709c:	2600      	movs	r6, #0
 800709e:	9604      	str	r6, [sp, #16]
 80070a0:	9103      	str	r1, [sp, #12]
 80070a2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80070a6:	9102      	str	r1, [sp, #8]
 80070a8:	9201      	str	r2, [sp, #4]
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	462b      	mov	r3, r5
 80070ae:	4a2d      	ldr	r2, [pc, #180]	; (8007164 <AT_ESP8266_ND+0x8f0>)
 80070b0:	4621      	mov	r1, r4
 80070b2:	f007 f991 	bl	800e3d8 <FT_String_ND>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d104      	bne.n	80070c6 <AT_ESP8266_ND+0x852>
			{
				AT_decode=at_tcp_closed_ok;
 80070bc:	2309      	movs	r3, #9
 80070be:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80070c2:	f000 bfcf 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 80070c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	220b      	movs	r2, #11
 80070d2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80070d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80070e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80070f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007100:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007104:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800710e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007112:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007116:	6812      	ldr	r2, [r2, #0]
 8007118:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800711c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007120:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007124:	6809      	ldr	r1, [r1, #0]
 8007126:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800712a:	2600      	movs	r6, #0
 800712c:	9604      	str	r6, [sp, #16]
 800712e:	9103      	str	r1, [sp, #12]
 8007130:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007134:	9102      	str	r1, [sp, #8]
 8007136:	9201      	str	r2, [sp, #4]
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	462b      	mov	r3, r5
 800713c:	4a0a      	ldr	r2, [pc, #40]	; (8007168 <AT_ESP8266_ND+0x8f4>)
 800713e:	4621      	mov	r1, r4
 8007140:	f007 f94a 	bl	800e3d8 <FT_String_ND>
 8007144:	4603      	mov	r3, r0
 8007146:	2b01      	cmp	r3, #1
 8007148:	d110      	bne.n	800716c <AT_ESP8266_ND+0x8f8>
			{
				AT_decode=at_multiple_conn_ok;
 800714a:	2307      	movs	r3, #7
 800714c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007150:	f000 bf88 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
 8007154:	08010594 	.word	0x08010594
 8007158:	080105a0 	.word	0x080105a0
 800715c:	080105b0 	.word	0x080105b0
 8007160:	080105b4 	.word	0x080105b4
 8007164:	080105c4 	.word	0x080105c4
 8007168:	080105d0 	.word	0x080105d0
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 800716c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007170:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	220b      	movs	r2, #11
 8007178:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800717c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007180:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800718a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800718e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007198:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800719c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80071a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80071b4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80071b8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80071bc:	6812      	ldr	r2, [r2, #0]
 80071be:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80071c2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80071c6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80071ca:	6809      	ldr	r1, [r1, #0]
 80071cc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80071d0:	2600      	movs	r6, #0
 80071d2:	9604      	str	r6, [sp, #16]
 80071d4:	9103      	str	r1, [sp, #12]
 80071d6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80071da:	9102      	str	r1, [sp, #8]
 80071dc:	9201      	str	r2, [sp, #4]
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	462b      	mov	r3, r5
 80071e2:	4ab7      	ldr	r2, [pc, #732]	; (80074c0 <AT_ESP8266_ND+0xc4c>)
 80071e4:	4621      	mov	r1, r4
 80071e6:	f007 f8f7 	bl	800e3d8 <FT_String_ND>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d104      	bne.n	80071fa <AT_ESP8266_ND+0x986>
			{
				AT_decode=at_no_multiple_conn_ok;
 80071f0:	2308      	movs	r3, #8
 80071f2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80071f6:	f000 bf35 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 80071fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	220a      	movs	r2, #10
 8007206:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800720a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800720e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007218:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800721c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007226:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800722a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007234:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007238:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007242:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007246:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800724a:	6812      	ldr	r2, [r2, #0]
 800724c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007250:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007254:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007258:	6809      	ldr	r1, [r1, #0]
 800725a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800725e:	2600      	movs	r6, #0
 8007260:	9604      	str	r6, [sp, #16]
 8007262:	9103      	str	r1, [sp, #12]
 8007264:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007268:	9102      	str	r1, [sp, #8]
 800726a:	9201      	str	r2, [sp, #4]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	462b      	mov	r3, r5
 8007270:	4a94      	ldr	r2, [pc, #592]	; (80074c4 <AT_ESP8266_ND+0xc50>)
 8007272:	4621      	mov	r1, r4
 8007274:	f007 f8b0 	bl	800e3d8 <FT_String_ND>
 8007278:	4603      	mov	r3, r0
 800727a:	2b01      	cmp	r3, #1
 800727c:	d104      	bne.n	8007288 <AT_ESP8266_ND+0xa14>
			{
				AT_decode=at_def_ip_ok;
 800727e:	231b      	movs	r3, #27
 8007280:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007284:	f000 beee 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 8007288:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800728c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2207      	movs	r2, #7
 8007294:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007298:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800729c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80072a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80072b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80072c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80072d0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80072d4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80072d8:	6812      	ldr	r2, [r2, #0]
 80072da:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80072de:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80072e2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80072e6:	6809      	ldr	r1, [r1, #0]
 80072e8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80072ec:	2600      	movs	r6, #0
 80072ee:	9604      	str	r6, [sp, #16]
 80072f0:	9103      	str	r1, [sp, #12]
 80072f2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80072f6:	9102      	str	r1, [sp, #8]
 80072f8:	9201      	str	r2, [sp, #4]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	462b      	mov	r3, r5
 80072fe:	4a72      	ldr	r2, [pc, #456]	; (80074c8 <AT_ESP8266_ND+0xc54>)
 8007300:	4621      	mov	r1, r4
 8007302:	f007 f869 	bl	800e3d8 <FT_String_ND>
 8007306:	4603      	mov	r3, r0
 8007308:	2b01      	cmp	r3, #1
 800730a:	f040 86ab 	bne.w	8008064 <AT_ESP8266_ND+0x17f0>
			{
			AT_decode=at_tcp_conectado;
 800730e:	230f      	movs	r3, #15
 8007310:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007314:	f000 bea6 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 8007318:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800731c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2207      	movs	r2, #7
 8007324:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007328:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800732c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007336:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800733a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007344:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007348:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007352:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007356:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007360:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007364:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007368:	6812      	ldr	r2, [r2, #0]
 800736a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800736e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007372:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007376:	6809      	ldr	r1, [r1, #0]
 8007378:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800737c:	2600      	movs	r6, #0
 800737e:	9604      	str	r6, [sp, #16]
 8007380:	9103      	str	r1, [sp, #12]
 8007382:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007386:	9102      	str	r1, [sp, #8]
 8007388:	9201      	str	r2, [sp, #4]
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	462b      	mov	r3, r5
 800738e:	4a4f      	ldr	r2, [pc, #316]	; (80074cc <AT_ESP8266_ND+0xc58>)
 8007390:	4621      	mov	r1, r4
 8007392:	f007 f821 	bl	800e3d8 <FT_String_ND>
 8007396:	4603      	mov	r3, r0
 8007398:	2b01      	cmp	r3, #1
 800739a:	f040 8326 	bne.w	80079ea <AT_ESP8266_ND+0x1176>
		{
				AT_decode=at_error;
 800739e:	2302      	movs	r3, #2
 80073a0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 80073a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2208      	movs	r2, #8
 80073b0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Intentando conectar con servidor TCP caido
 80073b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80073c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80073d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80073de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80073ec:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073f0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80073f4:	6812      	ldr	r2, [r2, #0]
 80073f6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80073fa:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80073fe:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007402:	6809      	ldr	r1, [r1, #0]
 8007404:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007408:	2600      	movs	r6, #0
 800740a:	9604      	str	r6, [sp, #16]
 800740c:	9103      	str	r1, [sp, #12]
 800740e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007412:	9102      	str	r1, [sp, #8]
 8007414:	9201      	str	r2, [sp, #4]
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	462b      	mov	r3, r5
 800741a:	4a2d      	ldr	r2, [pc, #180]	; (80074d0 <AT_ESP8266_ND+0xc5c>)
 800741c:	4621      	mov	r1, r4
 800741e:	f006 ffdb 	bl	800e3d8 <FT_String_ND>
 8007422:	4603      	mov	r3, r0
 8007424:	2b01      	cmp	r3, #1
 8007426:	d104      	bne.n	8007432 <AT_ESP8266_ND+0xbbe>
				{
						AT_decode=at_tcp_conn_err;
 8007428:	2306      	movs	r3, #6
 800742a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800742e:	f000 be19 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 8007432:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007436:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2215      	movs	r2, #21
 800743e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8007442:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007446:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007450:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007454:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800745e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007462:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800746c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007470:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800747a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800747e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007482:	6812      	ldr	r2, [r2, #0]
 8007484:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007488:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800748c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007490:	6809      	ldr	r1, [r1, #0]
 8007492:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007496:	2600      	movs	r6, #0
 8007498:	9604      	str	r6, [sp, #16]
 800749a:	9103      	str	r1, [sp, #12]
 800749c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80074a0:	9102      	str	r1, [sp, #8]
 80074a2:	9201      	str	r2, [sp, #4]
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	462b      	mov	r3, r5
 80074a8:	4a0a      	ldr	r2, [pc, #40]	; (80074d4 <AT_ESP8266_ND+0xc60>)
 80074aa:	4621      	mov	r1, r4
 80074ac:	f006 ff94 	bl	800e3d8 <FT_String_ND>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d110      	bne.n	80074d8 <AT_ESP8266_ND+0xc64>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 80074b6:	230e      	movs	r3, #14
 80074b8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80074bc:	f000 bdd2 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
 80074c0:	080105dc 	.word	0x080105dc
 80074c4:	080105e8 	.word	0x080105e8
 80074c8:	080105f4 	.word	0x080105f4
 80074cc:	080105fc 	.word	0x080105fc
 80074d0:	08010604 	.word	0x08010604
 80074d4:	08010610 	.word	0x08010610
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 80074d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	220c      	movs	r2, #12
 80074e4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80074e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80074f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007504:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007508:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007512:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007516:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007520:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007524:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007528:	6812      	ldr	r2, [r2, #0]
 800752a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800752e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007532:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007536:	6809      	ldr	r1, [r1, #0]
 8007538:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800753c:	2600      	movs	r6, #0
 800753e:	9604      	str	r6, [sp, #16]
 8007540:	9103      	str	r1, [sp, #12]
 8007542:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007546:	9102      	str	r1, [sp, #8]
 8007548:	9201      	str	r2, [sp, #4]
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	462b      	mov	r3, r5
 800754e:	4ab7      	ldr	r2, [pc, #732]	; (800782c <AT_ESP8266_ND+0xfb8>)
 8007550:	4621      	mov	r1, r4
 8007552:	f006 ff41 	bl	800e3d8 <FT_String_ND>
 8007556:	4603      	mov	r3, r0
 8007558:	2b01      	cmp	r3, #1
 800755a:	d104      	bne.n	8007566 <AT_ESP8266_ND+0xcf2>
				{
					AT_decode=at_tcp_srvr_err;
 800755c:	2316      	movs	r3, #22
 800755e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007562:	f000 bd7f 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007566:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800756a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	220b      	movs	r2, #11
 8007572:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8007576:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800757a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007584:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007588:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007592:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007596:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80075a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80075ae:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80075b2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80075b6:	6812      	ldr	r2, [r2, #0]
 80075b8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80075bc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80075c0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80075c4:	6809      	ldr	r1, [r1, #0]
 80075c6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80075ca:	2600      	movs	r6, #0
 80075cc:	9604      	str	r6, [sp, #16]
 80075ce:	9103      	str	r1, [sp, #12]
 80075d0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80075d4:	9102      	str	r1, [sp, #8]
 80075d6:	9201      	str	r2, [sp, #4]
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	462b      	mov	r3, r5
 80075dc:	4a94      	ldr	r2, [pc, #592]	; (8007830 <AT_ESP8266_ND+0xfbc>)
 80075de:	4621      	mov	r1, r4
 80075e0:	f006 fefa 	bl	800e3d8 <FT_String_ND>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d104      	bne.n	80075f4 <AT_ESP8266_ND+0xd80>
					{
						AT_decode=at_tcp_close_err;
 80075ea:	231a      	movs	r3, #26
 80075ec:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80075f0:	f000 bd38 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 80075f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2211      	movs	r2, #17
 8007600:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007604:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007608:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007612:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007616:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007620:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007624:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800762e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007632:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800763c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007640:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007644:	6812      	ldr	r2, [r2, #0]
 8007646:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800764a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800764e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007652:	6809      	ldr	r1, [r1, #0]
 8007654:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007658:	2600      	movs	r6, #0
 800765a:	9604      	str	r6, [sp, #16]
 800765c:	9103      	str	r1, [sp, #12]
 800765e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007662:	9102      	str	r1, [sp, #8]
 8007664:	9201      	str	r2, [sp, #4]
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	462b      	mov	r3, r5
 800766a:	4a72      	ldr	r2, [pc, #456]	; (8007834 <AT_ESP8266_ND+0xfc0>)
 800766c:	4621      	mov	r1, r4
 800766e:	f006 feb3 	bl	800e3d8 <FT_String_ND>
 8007672:	4603      	mov	r3, r0
 8007674:	2b01      	cmp	r3, #1
 8007676:	d104      	bne.n	8007682 <AT_ESP8266_ND+0xe0e>
					{
						AT_decode=at_tcp_snd_err;
 8007678:	2311      	movs	r3, #17
 800767a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800767e:	f000 bcf1 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 8007682:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007686:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	220a      	movs	r2, #10
 800768e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8007692:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007696:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80076a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80076ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80076bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80076ca:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80076ce:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80076d2:	6812      	ldr	r2, [r2, #0]
 80076d4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80076d8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80076dc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80076e0:	6809      	ldr	r1, [r1, #0]
 80076e2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80076e6:	2600      	movs	r6, #0
 80076e8:	9604      	str	r6, [sp, #16]
 80076ea:	9103      	str	r1, [sp, #12]
 80076ec:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076f0:	9102      	str	r1, [sp, #8]
 80076f2:	9201      	str	r2, [sp, #4]
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	462b      	mov	r3, r5
 80076f8:	4a4f      	ldr	r2, [pc, #316]	; (8007838 <AT_ESP8266_ND+0xfc4>)
 80076fa:	4621      	mov	r1, r4
 80076fc:	f006 fe6c 	bl	800e3d8 <FT_String_ND>
 8007700:	4603      	mov	r3, r0
 8007702:	2b01      	cmp	r3, #1
 8007704:	d104      	bne.n	8007710 <AT_ESP8266_ND+0xe9c>
					{
						AT_decode=at_cambiar_modo_err;
 8007706:	231d      	movs	r3, #29
 8007708:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800770c:	f000 bcaa 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007710:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007714:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	220b      	movs	r2, #11
 800771c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007720:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007724:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800772e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007732:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800773c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007740:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800774a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800774e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007758:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800775c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007760:	6812      	ldr	r2, [r2, #0]
 8007762:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007766:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800776a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800776e:	6809      	ldr	r1, [r1, #0]
 8007770:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007774:	2600      	movs	r6, #0
 8007776:	9604      	str	r6, [sp, #16]
 8007778:	9103      	str	r1, [sp, #12]
 800777a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800777e:	9102      	str	r1, [sp, #8]
 8007780:	9201      	str	r2, [sp, #4]
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	462b      	mov	r3, r5
 8007786:	4a2d      	ldr	r2, [pc, #180]	; (800783c <AT_ESP8266_ND+0xfc8>)
 8007788:	4621      	mov	r1, r4
 800778a:	f006 fe25 	bl	800e3d8 <FT_String_ND>
 800778e:	4603      	mov	r3, r0
 8007790:	2b01      	cmp	r3, #1
 8007792:	d104      	bne.n	800779e <AT_ESP8266_ND+0xf2a>
					{
						AT_decode=at_multiple_conn_err;
 8007794:	231e      	movs	r3, #30
 8007796:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800779a:	f000 bc63 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 800779e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	220b      	movs	r2, #11
 80077aa:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80077ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80077bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80077ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80077d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80077e6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80077ea:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80077ee:	6812      	ldr	r2, [r2, #0]
 80077f0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80077f4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80077f8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80077fc:	6809      	ldr	r1, [r1, #0]
 80077fe:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007802:	2600      	movs	r6, #0
 8007804:	9604      	str	r6, [sp, #16]
 8007806:	9103      	str	r1, [sp, #12]
 8007808:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800780c:	9102      	str	r1, [sp, #8]
 800780e:	9201      	str	r2, [sp, #4]
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	462b      	mov	r3, r5
 8007814:	4a0a      	ldr	r2, [pc, #40]	; (8007840 <AT_ESP8266_ND+0xfcc>)
 8007816:	4621      	mov	r1, r4
 8007818:	f006 fdde 	bl	800e3d8 <FT_String_ND>
 800781c:	4603      	mov	r3, r0
 800781e:	2b01      	cmp	r3, #1
 8007820:	d110      	bne.n	8007844 <AT_ESP8266_ND+0xfd0>
					{
						AT_decode=at_no_multiple_conn_err;
 8007822:	231f      	movs	r3, #31
 8007824:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007828:	f000 bc1c 	b.w	8008064 <AT_ESP8266_ND+0x17f0>
 800782c:	080105b4 	.word	0x080105b4
 8007830:	080105c4 	.word	0x080105c4
 8007834:	08010628 	.word	0x08010628
 8007838:	08010594 	.word	0x08010594
 800783c:	080105d0 	.word	0x080105d0
 8007840:	080105dc 	.word	0x080105dc
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 8007844:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007848:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2208      	movs	r2, #8
 8007850:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007854:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007858:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007862:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007866:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007870:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007874:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800787e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007882:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800788c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007890:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007894:	6812      	ldr	r2, [r2, #0]
 8007896:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800789a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800789e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80078a2:	6809      	ldr	r1, [r1, #0]
 80078a4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80078a8:	2600      	movs	r6, #0
 80078aa:	9604      	str	r6, [sp, #16]
 80078ac:	9103      	str	r1, [sp, #12]
 80078ae:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078b2:	9102      	str	r1, [sp, #8]
 80078b4:	9201      	str	r2, [sp, #4]
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	462b      	mov	r3, r5
 80078ba:	4ac4      	ldr	r2, [pc, #784]	; (8007bcc <AT_ESP8266_ND+0x1358>)
 80078bc:	4621      	mov	r1, r4
 80078be:	f006 fd8b 	bl	800e3d8 <FT_String_ND>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d103      	bne.n	80078d0 <AT_ESP8266_ND+0x105c>
					{
						AT_decode=at_conn_wifi_err;
 80078c8:	2320      	movs	r3, #32
 80078ca:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80078ce:	e3c9      	b.n	8008064 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 80078d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	220a      	movs	r2, #10
 80078dc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80078e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80078ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80078fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007900:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800790a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800790e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007918:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800791c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007920:	6812      	ldr	r2, [r2, #0]
 8007922:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007926:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800792a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800792e:	6809      	ldr	r1, [r1, #0]
 8007930:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007934:	2600      	movs	r6, #0
 8007936:	9604      	str	r6, [sp, #16]
 8007938:	9103      	str	r1, [sp, #12]
 800793a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800793e:	9102      	str	r1, [sp, #8]
 8007940:	9201      	str	r2, [sp, #4]
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	462b      	mov	r3, r5
 8007946:	4aa2      	ldr	r2, [pc, #648]	; (8007bd0 <AT_ESP8266_ND+0x135c>)
 8007948:	4621      	mov	r1, r4
 800794a:	f006 fd45 	bl	800e3d8 <FT_String_ND>
 800794e:	4603      	mov	r3, r0
 8007950:	2b01      	cmp	r3, #1
 8007952:	d103      	bne.n	800795c <AT_ESP8266_ND+0x10e8>
					{
						AT_decode=at_def_ip_err;
 8007954:	2321      	movs	r3, #33	; 0x21
 8007956:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800795a:	e383      	b.n	8008064 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 800795c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007960:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2205      	movs	r2, #5
 8007968:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800796c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007970:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800797a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800797e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007988:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800798c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007996:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800799a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80079a4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80079a8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80079ac:	6812      	ldr	r2, [r2, #0]
 80079ae:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80079b2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80079b6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80079ba:	6809      	ldr	r1, [r1, #0]
 80079bc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80079c0:	2600      	movs	r6, #0
 80079c2:	9604      	str	r6, [sp, #16]
 80079c4:	9103      	str	r1, [sp, #12]
 80079c6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80079ca:	9102      	str	r1, [sp, #8]
 80079cc:	9201      	str	r2, [sp, #4]
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	462b      	mov	r3, r5
 80079d2:	4a80      	ldr	r2, [pc, #512]	; (8007bd4 <AT_ESP8266_ND+0x1360>)
 80079d4:	4621      	mov	r1, r4
 80079d6:	f006 fcff 	bl	800e3d8 <FT_String_ND>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b01      	cmp	r3, #1
 80079de:	f040 8341 	bne.w	8008064 <AT_ESP8266_ND+0x17f0>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 80079e2:	2322      	movs	r3, #34	; 0x22
 80079e4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80079e8:	e33c      	b.n	8008064 <AT_ESP8266_ND+0x17f0>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 80079ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	220f      	movs	r2, #15
 80079f6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 80079fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007a08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007a16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007a24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a32:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a36:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a3a:	6812      	ldr	r2, [r2, #0]
 8007a3c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007a40:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a44:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a48:	6809      	ldr	r1, [r1, #0]
 8007a4a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a4e:	2600      	movs	r6, #0
 8007a50:	9604      	str	r6, [sp, #16]
 8007a52:	9103      	str	r1, [sp, #12]
 8007a54:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a58:	9102      	str	r1, [sp, #8]
 8007a5a:	9201      	str	r2, [sp, #4]
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	462b      	mov	r3, r5
 8007a60:	4a5d      	ldr	r2, [pc, #372]	; (8007bd8 <AT_ESP8266_ND+0x1364>)
 8007a62:	4621      	mov	r1, r4
 8007a64:	f006 fcb8 	bl	800e3d8 <FT_String_ND>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d112      	bne.n	8007a94 <AT_ESP8266_ND+0x1220>
				{
					 AT_decode=at_wifi_disconnect;
 8007a6e:	230a      	movs	r3, #10
 8007a70:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 8007a74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8007a92:	e2e7      	b.n	8008064 <AT_ESP8266_ND+0x17f0>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 8007a94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2209      	movs	r2, #9
 8007aa0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007aa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aa8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007ab2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ab6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007ac0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ac4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007ace:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ad2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007adc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ae0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ae4:	6812      	ldr	r2, [r2, #0]
 8007ae6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007aea:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007aee:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007af2:	6809      	ldr	r1, [r1, #0]
 8007af4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007af8:	2600      	movs	r6, #0
 8007afa:	9604      	str	r6, [sp, #16]
 8007afc:	9103      	str	r1, [sp, #12]
 8007afe:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b02:	9102      	str	r1, [sp, #8]
 8007b04:	9201      	str	r2, [sp, #4]
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	462b      	mov	r3, r5
 8007b0a:	4a34      	ldr	r2, [pc, #208]	; (8007bdc <AT_ESP8266_ND+0x1368>)
 8007b0c:	4621      	mov	r1, r4
 8007b0e:	f006 fc63 	bl	800e3d8 <FT_String_ND>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d112      	bne.n	8007b3e <AT_ESP8266_ND+0x12ca>
				{
					AT_decode=at_tcp_client_desc;
 8007b18:	2319      	movs	r3, #25
 8007b1a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 8007b1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 8007b3c:	e292      	b.n	8008064 <AT_ESP8266_ND+0x17f0>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 8007b3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2208      	movs	r2, #8
 8007b4a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007b4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007b5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007b6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007b78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b86:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b8a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b8e:	6812      	ldr	r2, [r2, #0]
 8007b90:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b94:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b98:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b9c:	6809      	ldr	r1, [r1, #0]
 8007b9e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007ba2:	2600      	movs	r6, #0
 8007ba4:	9604      	str	r6, [sp, #16]
 8007ba6:	9103      	str	r1, [sp, #12]
 8007ba8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007bac:	9102      	str	r1, [sp, #8]
 8007bae:	9201      	str	r2, [sp, #4]
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	462b      	mov	r3, r5
 8007bb4:	4a0a      	ldr	r2, [pc, #40]	; (8007be0 <AT_ESP8266_ND+0x136c>)
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	f006 fc0e 	bl	800e3d8 <FT_String_ND>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d110      	bne.n	8007be4 <AT_ESP8266_ND+0x1370>
				{
					AT_decode=at_tcp_desconectado;
 8007bc2:	2310      	movs	r3, #16
 8007bc4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007bc8:	e24c      	b.n	8008064 <AT_ESP8266_ND+0x17f0>
 8007bca:	bf00      	nop
 8007bcc:	0801063c 	.word	0x0801063c
 8007bd0:	080105e8 	.word	0x080105e8
 8007bd4:	08010648 	.word	0x08010648
 8007bd8:	08010650 	.word	0x08010650
 8007bdc:	08010660 	.word	0x08010660
 8007be0:	08010604 	.word	0x08010604
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007be4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007be8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007bf2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bf6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007c00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f203 4594 	addw	r5, r3, #1172	; 0x494
 8007c0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f603 46dc 	addw	r6, r3, #3292	; 0xcdc
 8007c1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007c2a:	603b      	str	r3, [r7, #0]
 8007c2c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c30:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c34:	6812      	ldr	r2, [r2, #0]
 8007c36:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007c3a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c3e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c42:	6809      	ldr	r1, [r1, #0]
 8007c44:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007c48:	2300      	movs	r3, #0
 8007c4a:	9304      	str	r3, [sp, #16]
 8007c4c:	9103      	str	r1, [sp, #12]
 8007c4e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c52:	9102      	str	r1, [sp, #8]
 8007c54:	9201      	str	r2, [sp, #4]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	4633      	mov	r3, r6
 8007c5c:	462a      	mov	r2, r5
 8007c5e:	4621      	mov	r1, r4
 8007c60:	f006 fbba 	bl	800e3d8 <FT_String_ND>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d112      	bne.n	8007c90 <AT_ESP8266_ND+0x141c>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8007c6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 81f3 	beq.w	8008064 <AT_ESP8266_ND+0x17f0>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8007c7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 8007c8e:	e1e9      	b.n	8008064 <AT_ESP8266_ND+0x17f0>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007c90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	220d      	movs	r2, #13
 8007c9c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8007ca0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ca4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007cae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007cbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007cca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007cd8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007cdc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ce0:	6812      	ldr	r2, [r2, #0]
 8007ce2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ce6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007cea:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007cee:	6809      	ldr	r1, [r1, #0]
 8007cf0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007cf4:	2600      	movs	r6, #0
 8007cf6:	9604      	str	r6, [sp, #16]
 8007cf8:	9103      	str	r1, [sp, #12]
 8007cfa:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007cfe:	9102      	str	r1, [sp, #8]
 8007d00:	9201      	str	r2, [sp, #4]
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	462b      	mov	r3, r5
 8007d06:	4aaf      	ldr	r2, [pc, #700]	; (8007fc4 <AT_ESP8266_ND+0x1750>)
 8007d08:	4621      	mov	r1, r4
 8007d0a:	f006 fb65 	bl	800e3d8 <FT_String_ND>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d112      	bne.n	8007d3a <AT_ESP8266_ND+0x14c6>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8007d14:	2312      	movs	r3, #18
 8007d16:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 8007d1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8007d28:	1c5a      	adds	r2, r3, #1
 8007d2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8007d38:	e194      	b.n	8008064 <AT_ESP8266_ND+0x17f0>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8007d3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	220d      	movs	r2, #13
 8007d46:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Obtiene IP
 8007d4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007d58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007d66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007d74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007d82:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d86:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d8a:	6812      	ldr	r2, [r2, #0]
 8007d8c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007d90:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d94:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d98:	6809      	ldr	r1, [r1, #0]
 8007d9a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007d9e:	2600      	movs	r6, #0
 8007da0:	9604      	str	r6, [sp, #16]
 8007da2:	9103      	str	r1, [sp, #12]
 8007da4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007da8:	9102      	str	r1, [sp, #8]
 8007daa:	9201      	str	r2, [sp, #4]
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	462b      	mov	r3, r5
 8007db0:	4a85      	ldr	r2, [pc, #532]	; (8007fc8 <AT_ESP8266_ND+0x1754>)
 8007db2:	4621      	mov	r1, r4
 8007db4:	f006 fb10 	bl	800e3d8 <FT_String_ND>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d112      	bne.n	8007de4 <AT_ESP8266_ND+0x1570>
				{
					a->_debug_WF_GOTIP++;
 8007dbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 8007ddc:	230c      	movs	r3, #12
 8007dde:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007de2:	e13f      	b.n	8008064 <AT_ESP8266_ND+0x17f0>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 8007de4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007de8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	220e      	movs	r2, #14
 8007df0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//WIFI CONECTADA
 8007df4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007df8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007e02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007e10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007e1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007e2c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e30:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e34:	6812      	ldr	r2, [r2, #0]
 8007e36:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007e3a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007e3e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007e42:	6809      	ldr	r1, [r1, #0]
 8007e44:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007e48:	2600      	movs	r6, #0
 8007e4a:	9604      	str	r6, [sp, #16]
 8007e4c:	9103      	str	r1, [sp, #12]
 8007e4e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e52:	9102      	str	r1, [sp, #8]
 8007e54:	9201      	str	r2, [sp, #4]
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	462b      	mov	r3, r5
 8007e5a:	4a5c      	ldr	r2, [pc, #368]	; (8007fcc <AT_ESP8266_ND+0x1758>)
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	f006 fabb 	bl	800e3d8 <FT_String_ND>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d112      	bne.n	8007e8e <AT_ESP8266_ND+0x161a>
				{
					a->_debug_WF_CNNCTD++;
 8007e68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 8007e76:	1c5a      	adds	r2, r3, #1
 8007e78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 8007e86:	230b      	movs	r3, #11
 8007e88:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007e8c:	e0ea      	b.n	8008064 <AT_ESP8266_ND+0x17f0>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 8007e8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	220a      	movs	r2, #10
 8007e9a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007e9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ea2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007eac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007eba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ebe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007ec8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ecc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007ed6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007eda:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ede:	6812      	ldr	r2, [r2, #0]
 8007ee0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ee4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007ee8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007eec:	6809      	ldr	r1, [r1, #0]
 8007eee:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007ef2:	2600      	movs	r6, #0
 8007ef4:	9604      	str	r6, [sp, #16]
 8007ef6:	9103      	str	r1, [sp, #12]
 8007ef8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007efc:	9102      	str	r1, [sp, #8]
 8007efe:	9201      	str	r2, [sp, #4]
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	462b      	mov	r3, r5
 8007f04:	4a32      	ldr	r2, [pc, #200]	; (8007fd0 <AT_ESP8266_ND+0x175c>)
 8007f06:	4621      	mov	r1, r4
 8007f08:	f006 fa66 	bl	800e3d8 <FT_String_ND>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d112      	bne.n	8007f38 <AT_ESP8266_ND+0x16c4>
				  {
					  AT_decode=at_tcp_client_conectado;
 8007f12:	2318      	movs	r3, #24
 8007f14:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8007f18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8007f36:	e095      	b.n	8008064 <AT_ESP8266_ND+0x17f0>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8007f38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2208      	movs	r2, #8
 8007f44:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007f48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007f56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007f64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007f72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007f80:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f84:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f88:	6812      	ldr	r2, [r2, #0]
 8007f8a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007f8e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007f92:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007f96:	6809      	ldr	r1, [r1, #0]
 8007f98:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007f9c:	2600      	movs	r6, #0
 8007f9e:	9604      	str	r6, [sp, #16]
 8007fa0:	9103      	str	r1, [sp, #12]
 8007fa2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007fa6:	9102      	str	r1, [sp, #8]
 8007fa8:	9201      	str	r2, [sp, #4]
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	462b      	mov	r3, r5
 8007fae:	4a09      	ldr	r2, [pc, #36]	; (8007fd4 <AT_ESP8266_ND+0x1760>)
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	f006 fa11 	bl	800e3d8 <FT_String_ND>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d10d      	bne.n	8007fd8 <AT_ESP8266_ND+0x1764>
				{
					AT_decode=at_fail;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007fc2:	e04f      	b.n	8008064 <AT_ESP8266_ND+0x17f0>
 8007fc4:	0801066c 	.word	0x0801066c
 8007fc8:	0801067c 	.word	0x0801067c
 8007fcc:	0801068c 	.word	0x0801068c
 8007fd0:	0801069c 	.word	0x0801069c
 8007fd4:	080106a8 	.word	0x080106a8
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 8007fd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2209      	movs	r2, #9
 8007fe4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007fe8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007ff6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ffa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8008004:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008008:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8008012:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008016:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008020:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008024:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008028:	6812      	ldr	r2, [r2, #0]
 800802a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800802e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008032:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008036:	6809      	ldr	r1, [r1, #0]
 8008038:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800803c:	2600      	movs	r6, #0
 800803e:	9604      	str	r6, [sp, #16]
 8008040:	9103      	str	r1, [sp, #12]
 8008042:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008046:	9102      	str	r1, [sp, #8]
 8008048:	9201      	str	r2, [sp, #4]
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	462b      	mov	r3, r5
 800804e:	4a77      	ldr	r2, [pc, #476]	; (800822c <AT_ESP8266_ND+0x19b8>)
 8008050:	4621      	mov	r1, r4
 8008052:	f006 f9c1 	bl	800e3d8 <FT_String_ND>
 8008056:	4603      	mov	r3, r0
 8008058:	2b01      	cmp	r3, #1
 800805a:	d103      	bne.n	8008064 <AT_ESP8266_ND+0x17f0>
					{
					AT_decode=at_busy_p;
 800805c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008060:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 8008064:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008068:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008072:	3b01      	subs	r3, #1
 8008074:	2b08      	cmp	r3, #8
 8008076:	f201 84c6 	bhi.w	8009a06 <AT_ESP8266_ND+0x3192>
 800807a:	a201      	add	r2, pc, #4	; (adr r2, 8008080 <AT_ESP8266_ND+0x180c>)
 800807c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008080:	080080a5 	.word	0x080080a5
 8008084:	08008235 	.word	0x08008235
 8008088:	080084b7 	.word	0x080084b7
 800808c:	08008635 	.word	0x08008635
 8008090:	0800880d 	.word	0x0800880d
 8008094:	08008ae1 	.word	0x08008ae1
 8008098:	08008d99 	.word	0x08008d99
 800809c:	080092b1 	.word	0x080092b1
 80080a0:	08009487 	.word	0x08009487
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80080a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80080b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d14f      	bne.n	8008166 <AT_ESP8266_ND+0x18f2>
 80080c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d04b      	beq.n	8008166 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_error)
 80080ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d047      	beq.n	8008166 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_restart)
 80080d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080da:	2b04      	cmp	r3, #4
 80080dc:	d043      	beq.n	8008166 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_tcp_enviado_ok))
 80080de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080e2:	2b13      	cmp	r3, #19
 80080e4:	d03f      	beq.n	8008166 <AT_ESP8266_ND+0x18f2>
						{
						a->_pasos=0;
 80080e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80080f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2201      	movs	r2, #1
 8008102:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 8008106:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800810a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008114:	4620      	mov	r0, r4
 8008116:	f7f8 f86d 	bl	80001f4 <strlen>
 800811a:	4603      	mov	r3, r0
 800811c:	4423      	add	r3, r4
 800811e:	4a44      	ldr	r2, [pc, #272]	; (8008230 <AT_ESP8266_ND+0x19bc>)
 8008120:	461c      	mov	r4, r3
 8008122:	4613      	mov	r3, r2
 8008124:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008126:	6020      	str	r0, [r4, #0]
 8008128:	6061      	str	r1, [r4, #4]
 800812a:	60a2      	str	r2, [r4, #8]
 800812c:	881b      	ldrh	r3, [r3, #0]
 800812e:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008130:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008134:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800813e:	4618      	mov	r0, r3
 8008140:	f7f8 f858 	bl	80001f4 <strlen>
 8008144:	4603      	mov	r3, r0
 8008146:	461a      	mov	r2, r3
 8008148:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800814c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 8008156:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800815a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2264      	movs	r2, #100	; 0x64
 8008162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 8008166:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800816a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008174:	1c5a      	adds	r2, r3, #1
 8008176:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800817a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 8008184:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008188:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008192:	2b00      	cmp	r3, #0
 8008194:	d11b      	bne.n	80081ce <AT_ESP8266_ND+0x195a>
 8008196:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800819a:	2b01      	cmp	r3, #1
 800819c:	d023      	beq.n	80081e6 <AT_ESP8266_ND+0x1972>
 800819e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081a2:	2b1c      	cmp	r3, #28
 80081a4:	d01f      	beq.n	80081e6 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_error)
 80081a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d01b      	beq.n	80081e6 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_restart)
 80081ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081b2:	2b04      	cmp	r3, #4
 80081b4:	d017      	beq.n	80081e6 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_connected)
 80081b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081ba:	2b0b      	cmp	r3, #11
 80081bc:	d013      	beq.n	80081e6 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_gotip)
 80081be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081c2:	2b0c      	cmp	r3, #12
 80081c4:	d00f      	beq.n	80081e6 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_tcp_enviado_ok)))
 80081c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081ca:	2b13      	cmp	r3, #19
 80081cc:	d00b      	beq.n	80081e6 <AT_ESP8266_ND+0x1972>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 80081ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80081dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80081e0:	4293      	cmp	r3, r2
 80081e2:	f341 841a 	ble.w	8009a1a <AT_ESP8266_ND+0x31a6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80081e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80081f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80081f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2200      	movs	r2, #0
 8008204:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008208:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800820c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2200      	movs	r2, #0
 8008214:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008218:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800821c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2200      	movs	r2, #0
 8008224:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 8008228:	f001 bbf7 	b.w	8009a1a <AT_ESP8266_ND+0x31a6>
 800822c:	080106b4 	.word	0x080106b4
 8008230:	080106c0 	.word	0x080106c0
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008234:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008238:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008244:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008248:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008252:	2b01      	cmp	r3, #1
 8008254:	f040 80c8 	bne.w	80083e8 <AT_ESP8266_ND+0x1b74>
 8008258:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800825c:	2b01      	cmp	r3, #1
 800825e:	f000 80c3 	beq.w	80083e8 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_error)
 8008262:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008266:	2b02      	cmp	r3, #2
 8008268:	f000 80be 	beq.w	80083e8 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_fail)
 800826c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008270:	2b03      	cmp	r3, #3
 8008272:	f000 80b9 	beq.w	80083e8 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_restart)
 8008276:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800827a:	2b04      	cmp	r3, #4
 800827c:	f000 80b4 	beq.w	80083e8 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_disconnect)
 8008280:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008284:	2b0a      	cmp	r3, #10
 8008286:	f000 80af 	beq.w	80083e8 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_connected)
 800828a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800828e:	2b0b      	cmp	r3, #11
 8008290:	f000 80aa 	beq.w	80083e8 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_gotip))
 8008294:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008298:	2b0c      	cmp	r3, #12
 800829a:	f000 80a5 	beq.w	80083e8 <AT_ESP8266_ND+0x1b74>
						{
						a->_pasos=0;
 800829e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80082ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 80082be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80082cc:	4620      	mov	r0, r4
 80082ce:	f7f7 ff91 	bl	80001f4 <strlen>
 80082d2:	4603      	mov	r3, r0
 80082d4:	4423      	add	r3, r4
 80082d6:	49d5      	ldr	r1, [pc, #852]	; (800862c <AT_ESP8266_ND+0x1db8>)
 80082d8:	461a      	mov	r2, r3
 80082da:	460b      	mov	r3, r1
 80082dc:	cb03      	ldmia	r3!, {r0, r1}
 80082de:	6010      	str	r0, [r2, #0]
 80082e0:	6051      	str	r1, [r2, #4]
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 80082e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80082f4:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80082f8:	2201      	movs	r2, #1
 80082fa:	4618      	mov	r0, r3
 80082fc:	f006 fe27 	bl	800ef4e <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 8008300:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008304:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800830e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008312:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	1d9d      	adds	r5, r3, #6
 800831a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800831e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3306      	adds	r3, #6
 8008326:	4618      	mov	r0, r3
 8008328:	f7f7 ff64 	bl	80001f4 <strlen>
 800832c:	4603      	mov	r3, r0
 800832e:	461a      	mov	r2, r3
 8008330:	4629      	mov	r1, r5
 8008332:	4620      	mov	r0, r4
 8008334:	f006 fe0b 	bl	800ef4e <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 8008338:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800833c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008346:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800834a:	4618      	mov	r0, r3
 800834c:	f7f7 ff52 	bl	80001f4 <strlen>
 8008350:	4602      	mov	r2, r0
 8008352:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008356:	4619      	mov	r1, r3
 8008358:	4620      	mov	r0, r4
 800835a:	f006 fdf8 	bl	800ef4e <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 800835e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008362:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800836c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008370:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800837a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800837e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3326      	adds	r3, #38	; 0x26
 8008386:	4618      	mov	r0, r3
 8008388:	f7f7 ff34 	bl	80001f4 <strlen>
 800838c:	4603      	mov	r3, r0
 800838e:	461a      	mov	r2, r3
 8008390:	4629      	mov	r1, r5
 8008392:	4620      	mov	r0, r4
 8008394:	f006 fddb 	bl	800ef4e <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 8008398:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800839c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80083a6:	f507 7109 	add.w	r1, r7, #548	; 0x224
 80083aa:	2203      	movs	r2, #3
 80083ac:	4618      	mov	r0, r3
 80083ae:	f006 fdce 	bl	800ef4e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 80083b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7f7 ff17 	bl	80001f4 <strlen>
 80083c6:	4603      	mov	r3, r0
 80083c8:	461a      	mov	r2, r3
 80083ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 80083d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	22c8      	movs	r2, #200	; 0xc8
 80083e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 80083e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 8008406:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800840a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008414:	2b00      	cmp	r3, #0
 8008416:	d11b      	bne.n	8008450 <AT_ESP8266_ND+0x1bdc>
 8008418:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800841c:	2b01      	cmp	r3, #1
 800841e:	d023      	beq.n	8008468 <AT_ESP8266_ND+0x1bf4>
 8008420:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008424:	2b02      	cmp	r3, #2
 8008426:	d01f      	beq.n	8008468 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_fail)
 8008428:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800842c:	2b03      	cmp	r3, #3
 800842e:	d01b      	beq.n	8008468 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_restart)
 8008430:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008434:	2b04      	cmp	r3, #4
 8008436:	d017      	beq.n	8008468 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_disconnect)
 8008438:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800843c:	2b0a      	cmp	r3, #10
 800843e:	d013      	beq.n	8008468 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_connected)
 8008440:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008444:	2b0b      	cmp	r3, #11
 8008446:	d00f      	beq.n	8008468 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_gotip)))
 8008448:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800844c:	2b0c      	cmp	r3, #12
 800844e:	d00b      	beq.n	8008468 <AT_ESP8266_ND+0x1bf4>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 8008450:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008454:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 800845e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008462:	4293      	cmp	r3, r2
 8008464:	f341 82db 	ble.w	8009a1e <AT_ESP8266_ND+0x31aa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008468:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800846c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 800847a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800847e:	2b0a      	cmp	r3, #10
 8008480:	d00f      	beq.n	80084a2 <AT_ESP8266_ND+0x1c2e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 8008482:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008486:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2200      	movs	r2, #0
 800848e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 8008492:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008496:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2200      	movs	r2, #0
 800849e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 80084a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 80084b2:	f001 bab4 	b.w	8009a1e <AT_ESP8266_ND+0x31aa>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80084b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 80084c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d14d      	bne.n	8008574 <AT_ESP8266_ND+0x1d00>
 80084d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084dc:	2b04      	cmp	r3, #4
 80084de:	d049      	beq.n	8008574 <AT_ESP8266_ND+0x1d00>
 80084e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084e4:	2b0a      	cmp	r3, #10
 80084e6:	d045      	beq.n	8008574 <AT_ESP8266_ND+0x1d00>
 80084e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084ec:	2b0d      	cmp	r3, #13
 80084ee:	d041      	beq.n	8008574 <AT_ESP8266_ND+0x1d00>
						{
						a->_pasos=0;
 80084f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2200      	movs	r2, #0
 80084fc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008500:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008504:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2201      	movs	r2, #1
 800850c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"));
 8008510:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008514:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800851e:	4620      	mov	r0, r4
 8008520:	f7f7 fe68 	bl	80001f4 <strlen>
 8008524:	4603      	mov	r3, r0
 8008526:	4423      	add	r3, r4
 8008528:	4941      	ldr	r1, [pc, #260]	; (8008630 <AT_ESP8266_ND+0x1dbc>)
 800852a:	461a      	mov	r2, r3
 800852c:	460b      	mov	r3, r1
 800852e:	cb03      	ldmia	r3!, {r0, r1}
 8008530:	6010      	str	r0, [r2, #0]
 8008532:	6051      	str	r1, [r2, #4]
 8008534:	8819      	ldrh	r1, [r3, #0]
 8008536:	789b      	ldrb	r3, [r3, #2]
 8008538:	8111      	strh	r1, [r2, #8]
 800853a:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 800853c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008540:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800854a:	4618      	mov	r0, r3
 800854c:	f7f7 fe52 	bl	80001f4 <strlen>
 8008550:	4603      	mov	r3, r0
 8008552:	461a      	mov	r2, r3
 8008554:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008558:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 8008562:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008566:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008574:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008578:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008588:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008592:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008596:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d113      	bne.n	80085cc <AT_ESP8266_ND+0x1d58>
 80085a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085a8:	2b0a      	cmp	r3, #10
 80085aa:	d01b      	beq.n	80085e4 <AT_ESP8266_ND+0x1d70>
 80085ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085b0:	2b0b      	cmp	r3, #11
 80085b2:	d017      	beq.n	80085e4 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_wifi_gotip)
 80085b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085b8:	2b0c      	cmp	r3, #12
 80085ba:	d013      	beq.n	80085e4 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_restart	)
 80085bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d00f      	beq.n	80085e4 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_deconectar_ok )))
 80085c4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085c8:	2b0d      	cmp	r3, #13
 80085ca:	d00b      	beq.n	80085e4 <AT_ESP8266_ND+0x1d70>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80085cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80085da:	f241 3288 	movw	r2, #5000	; 0x1388
 80085de:	4293      	cmp	r3, r2
 80085e0:	f341 821f 	ble.w	8009a22 <AT_ESP8266_ND+0x31ae>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80085e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80085f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80085f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2200      	movs	r2, #0
 8008602:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008606:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800860a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2200      	movs	r2, #0
 8008612:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008616:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800861a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2200      	movs	r2, #0
 8008622:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008626:	f001 b9fc 	b.w	8009a22 <AT_ESP8266_ND+0x31ae>
 800862a:	bf00      	nop
 800862c:	080106d0 	.word	0x080106d0
 8008630:	080106dc 	.word	0x080106dc
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008634:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008638:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 8008644:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008648:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008652:	2b01      	cmp	r3, #1
 8008654:	d16b      	bne.n	800872e <AT_ESP8266_ND+0x1eba>
 8008656:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800865a:	2b04      	cmp	r3, #4
 800865c:	d067      	beq.n	800872e <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_ok)
 800865e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008662:	2b01      	cmp	r3, #1
 8008664:	d063      	beq.n	800872e <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_error))
 8008666:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800866a:	2b02      	cmp	r3, #2
 800866c:	d05f      	beq.n	800872e <AT_ESP8266_ND+0x1eba>
						{
						a->_pasos=0;
 800866e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008672:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2200      	movs	r2, #0
 800867a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800867e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008682:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2201      	movs	r2, #1
 800868a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 800868e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008692:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800869c:	2b01      	cmp	r3, #1
 800869e:	d115      	bne.n	80086cc <AT_ESP8266_ND+0x1e58>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 80086a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80086ae:	4620      	mov	r0, r4
 80086b0:	f7f7 fda0 	bl	80001f4 <strlen>
 80086b4:	4603      	mov	r3, r0
 80086b6:	4423      	add	r3, r4
 80086b8:	4a52      	ldr	r2, [pc, #328]	; (8008804 <AT_ESP8266_ND+0x1f90>)
 80086ba:	461c      	mov	r4, r3
 80086bc:	4613      	mov	r3, r2
 80086be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80086c0:	6020      	str	r0, [r4, #0]
 80086c2:	6061      	str	r1, [r4, #4]
 80086c4:	60a2      	str	r2, [r4, #8]
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	81a3      	strh	r3, [r4, #12]
 80086ca:	e014      	b.n	80086f6 <AT_ESP8266_ND+0x1e82>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 80086cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80086da:	4620      	mov	r0, r4
 80086dc:	f7f7 fd8a 	bl	80001f4 <strlen>
 80086e0:	4603      	mov	r3, r0
 80086e2:	4423      	add	r3, r4
 80086e4:	4a48      	ldr	r2, [pc, #288]	; (8008808 <AT_ESP8266_ND+0x1f94>)
 80086e6:	461c      	mov	r4, r3
 80086e8:	4613      	mov	r3, r2
 80086ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80086ec:	6020      	str	r0, [r4, #0]
 80086ee:	6061      	str	r1, [r4, #4]
 80086f0:	60a2      	str	r2, [r4, #8]
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 80086f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008704:	4618      	mov	r0, r3
 8008706:	f7f7 fd75 	bl	80001f4 <strlen>
 800870a:	4603      	mov	r3, r0
 800870c:	461a      	mov	r2, r3
 800870e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008712:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 800871c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008720:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800872a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 800872e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008732:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800873c:	1c5a      	adds	r2, r3, #1
 800873e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008742:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 800874c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008750:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800875a:	2b00      	cmp	r3, #0
 800875c:	d123      	bne.n	80087a6 <AT_ESP8266_ND+0x1f32>
 800875e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008762:	2b01      	cmp	r3, #1
 8008764:	d02b      	beq.n	80087be <AT_ESP8266_ND+0x1f4a>
 8008766:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800876a:	2b0b      	cmp	r3, #11
 800876c:	d027      	beq.n	80087be <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_wifi_gotip)
 800876e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008772:	2b0c      	cmp	r3, #12
 8008774:	d023      	beq.n	80087be <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_restart)
 8008776:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800877a:	2b04      	cmp	r3, #4
 800877c:	d01f      	beq.n	80087be <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_error)
 800877e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008782:	2b02      	cmp	r3, #2
 8008784:	d01b      	beq.n	80087be <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_ok)
 8008786:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800878a:	2b07      	cmp	r3, #7
 800878c:	d017      	beq.n	80087be <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_ok)
 800878e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008792:	2b08      	cmp	r3, #8
 8008794:	d013      	beq.n	80087be <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_err)
 8008796:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800879a:	2b1e      	cmp	r3, #30
 800879c:	d00f      	beq.n	80087be <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_err)))
 800879e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087a2:	2b1f      	cmp	r3, #31
 80087a4:	d00b      	beq.n	80087be <AT_ESP8266_ND+0x1f4a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80087a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80087b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087b8:	4293      	cmp	r3, r2
 80087ba:	f341 8134 	ble.w	8009a26 <AT_ESP8266_ND+0x31b2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80087be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80087cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80087d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2200      	movs	r2, #0
 80087dc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80087e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80087f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008800:	f001 b911 	b.w	8009a26 <AT_ESP8266_ND+0x31b2>
 8008804:	080106e8 	.word	0x080106e8
 8008808:	080106f8 	.word	0x080106f8
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800880c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008810:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2200      	movs	r2, #0
 8008818:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 800881c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008820:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800882a:	2b01      	cmp	r3, #1
 800882c:	f040 80f3 	bne.w	8008a16 <AT_ESP8266_ND+0x21a2>
 8008830:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008834:	2b04      	cmp	r3, #4
 8008836:	f000 80ee 	beq.w	8008a16 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_ok)
 800883a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800883e:	2b01      	cmp	r3, #1
 8008840:	f000 80e9 	beq.w	8008a16 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_error)
 8008844:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008848:	2b02      	cmp	r3, #2
 800884a:	f000 80e4 	beq.w	8008a16 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_err)
 800884e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008852:	2b21      	cmp	r3, #33	; 0x21
 8008854:	f000 80df 	beq.w	8008a16 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_ok))
 8008858:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800885c:	2b1b      	cmp	r3, #27
 800885e:	f000 80da 	beq.w	8008a16 <AT_ESP8266_ND+0x21a2>
						{
						a->_pasos=0;
 8008862:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008866:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2200      	movs	r2, #0
 800886e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008872:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008876:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2201      	movs	r2, #1
 800887e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8008882:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008886:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008890:	4620      	mov	r0, r4
 8008892:	f7f7 fcaf 	bl	80001f4 <strlen>
 8008896:	4603      	mov	r3, r0
 8008898:	4423      	add	r3, r4
 800889a:	4990      	ldr	r1, [pc, #576]	; (8008adc <AT_ESP8266_ND+0x2268>)
 800889c:	461a      	mov	r2, r3
 800889e:	460b      	mov	r3, r1
 80088a0:	cb03      	ldmia	r3!, {r0, r1}
 80088a2:	6010      	str	r0, [r2, #0]
 80088a4:	6051      	str	r1, [r2, #4]
 80088a6:	8819      	ldrh	r1, [r3, #0]
 80088a8:	789b      	ldrb	r3, [r3, #2]
 80088aa:	8111      	strh	r1, [r2, #8]
 80088ac:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 80088ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80088bc:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80088c0:	2201      	movs	r2, #1
 80088c2:	4618      	mov	r0, r3
 80088c4:	f006 fb43 	bl	800ef4e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 80088c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80088d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 80088e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	334c      	adds	r3, #76	; 0x4c
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7f7 fc7f 	bl	80001f4 <strlen>
 80088f6:	4603      	mov	r3, r0
 80088f8:	461a      	mov	r2, r3
 80088fa:	4629      	mov	r1, r5
 80088fc:	4620      	mov	r0, r4
 80088fe:	f006 fb26 	bl	800ef4e <strncat>
						strncat(a->_uart2snd,separador,3);
 8008902:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008906:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008910:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008914:	2203      	movs	r2, #3
 8008916:	4618      	mov	r0, r3
 8008918:	f006 fb19 	bl	800ef4e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 800891c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008920:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800892a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800892e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8008938:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800893c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3362      	adds	r3, #98	; 0x62
 8008944:	4618      	mov	r0, r3
 8008946:	f7f7 fc55 	bl	80001f4 <strlen>
 800894a:	4603      	mov	r3, r0
 800894c:	461a      	mov	r2, r3
 800894e:	4629      	mov	r1, r5
 8008950:	4620      	mov	r0, r4
 8008952:	f006 fafc 	bl	800ef4e <strncat>
						strncat(a->_uart2snd,separador,3);
 8008956:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800895a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008964:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008968:	2203      	movs	r2, #3
 800896a:	4618      	mov	r0, r3
 800896c:	f006 faef 	bl	800ef4e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008970:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008974:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800897e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008982:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f103 0572 	add.w	r5, r3, #114	; 0x72
 800898c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008990:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	3372      	adds	r3, #114	; 0x72
 8008998:	4618      	mov	r0, r3
 800899a:	f7f7 fc2b 	bl	80001f4 <strlen>
 800899e:	4603      	mov	r3, r0
 80089a0:	461a      	mov	r2, r3
 80089a2:	4629      	mov	r1, r5
 80089a4:	4620      	mov	r0, r4
 80089a6:	f006 fad2 	bl	800ef4e <strncat>
						strncat(a->_uart2snd,&comillas,1);
 80089aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80089b8:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80089bc:	2201      	movs	r2, #1
 80089be:	4618      	mov	r0, r3
 80089c0:	f006 fac5 	bl	800ef4e <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80089c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80089d2:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80089d6:	2202      	movs	r2, #2
 80089d8:	4618      	mov	r0, r3
 80089da:	f006 fab8 	bl	800ef4e <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 80089de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7f7 fc01 	bl	80001f4 <strlen>
 80089f2:	4603      	mov	r3, r0
 80089f4:	461a      	mov	r2, r3
 80089f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008a04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008a12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008a16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008a24:	1c5a      	adds	r2, r3, #1
 8008a26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008a34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d11b      	bne.n	8008a7e <AT_ESP8266_ND+0x220a>
 8008a46:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d023      	beq.n	8008a96 <AT_ESP8266_ND+0x2222>
 8008a4e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a52:	2b0b      	cmp	r3, #11
 8008a54:	d01f      	beq.n	8008a96 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_wifi_gotip)
 8008a56:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a5a:	2b0c      	cmp	r3, #12
 8008a5c:	d01b      	beq.n	8008a96 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_restart)
 8008a5e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a62:	2b04      	cmp	r3, #4
 8008a64:	d017      	beq.n	8008a96 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_error)
 8008a66:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d013      	beq.n	8008a96 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_err)
 8008a6e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a72:	2b21      	cmp	r3, #33	; 0x21
 8008a74:	d00f      	beq.n	8008a96 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_ok)))
 8008a76:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a7a:	2b1b      	cmp	r3, #27
 8008a7c:	d00b      	beq.n	8008a96 <AT_ESP8266_ND+0x2222>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008a7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a90:	4293      	cmp	r3, r2
 8008a92:	f340 87ca 	ble.w	8009a2a <AT_ESP8266_ND+0x31b6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008a96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008aa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008aa8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008ab8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008abc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008ac8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008acc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008ad8:	f000 bfa7 	b.w	8009a2a <AT_ESP8266_ND+0x31b6>
 8008adc:	080105e8 	.word	0x080105e8
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008ae0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ae4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008af0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008af4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	f040 80e2 	bne.w	8008cc8 <AT_ESP8266_ND+0x2454>
 8008b04:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b08:	2b0b      	cmp	r3, #11
 8008b0a:	f000 80dd 	beq.w	8008cc8 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_wifi_gotip)
 8008b0e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b12:	2b0c      	cmp	r3, #12
 8008b14:	f000 80d8 	beq.w	8008cc8 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008b18:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b1c:	2b0e      	cmp	r3, #14
 8008b1e:	f000 80d3 	beq.w	8008cc8 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_conectado)
 8008b22:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b26:	2b0f      	cmp	r3, #15
 8008b28:	f000 80ce 	beq.w	8008cc8 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_desconectado)
 8008b2c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b30:	2b10      	cmp	r3, #16
 8008b32:	f000 80c9 	beq.w	8008cc8 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_error))
 8008b36:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	f000 80c4 	beq.w	8008cc8 <AT_ESP8266_ND+0x2454>
						{
						a->_pasos=0;
 8008b40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008b50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008b60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f7f7 fb40 	bl	80001f4 <strlen>
 8008b74:	4603      	mov	r3, r0
 8008b76:	4423      	add	r3, r4
 8008b78:	4aa1      	ldr	r2, [pc, #644]	; (8008e00 <AT_ESP8266_ND+0x258c>)
 8008b7a:	461c      	mov	r4, r3
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b80:	6020      	str	r0, [r4, #0]
 8008b82:	6061      	str	r1, [r4, #4]
 8008b84:	60a2      	str	r2, [r4, #8]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008b8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008b98:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f006 f9d5 	bl	800ef4e <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008ba4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ba8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f7f7 fb1e 	bl	80001f4 <strlen>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	4423      	add	r3, r4
 8008bbc:	4a91      	ldr	r2, [pc, #580]	; (8008e04 <AT_ESP8266_ND+0x2590>)
 8008bbe:	6810      	ldr	r0, [r2, #0]
 8008bc0:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008bc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008bd0:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008bd4:	2203      	movs	r2, #3
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f006 f9b9 	bl	800ef4e <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008bdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008be0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008bea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8008bf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	3336      	adds	r3, #54	; 0x36
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7f7 faf5 	bl	80001f4 <strlen>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4620      	mov	r0, r4
 8008c12:	f006 f99c 	bl	800ef4e <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008c16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008c24:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008c28:	2202      	movs	r2, #2
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f006 f98f 	bl	800ef4e <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8008c30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008c3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8008c4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3346      	adds	r3, #70	; 0x46
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7f7 facb 	bl	80001f4 <strlen>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	461a      	mov	r2, r3
 8008c62:	4629      	mov	r1, r5
 8008c64:	4620      	mov	r0, r4
 8008c66:	f006 f972 	bl	800ef4e <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008c6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008c78:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7f7 fab9 	bl	80001f4 <strlen>
 8008c82:	4602      	mov	r2, r0
 8008c84:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008c88:	4619      	mov	r1, r3
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f006 f95f 	bl	800ef4e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008c90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7f7 faa8 	bl	80001f4 <strlen>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 8008cb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8008cc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ccc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008ce6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d120      	bne.n	8008d3a <AT_ESP8266_ND+0x24c6>
 8008cf8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cfc:	2b0a      	cmp	r3, #10
 8008cfe:	d028      	beq.n	8008d52 <AT_ESP8266_ND+0x24de>
 8008d00:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d04:	2b0b      	cmp	r3, #11
 8008d06:	d024      	beq.n	8008d52 <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_wifi_gotip)
 8008d08:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d0c:	2b0c      	cmp	r3, #12
 8008d0e:	d020      	beq.n	8008d52 <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8008d10:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d14:	2b0e      	cmp	r3, #14
 8008d16:	d01c      	beq.n	8008d52 <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_conectado)
 8008d18:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d1c:	2b0f      	cmp	r3, #15
 8008d1e:	d018      	beq.n	8008d52 <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_desconectado)
 8008d20:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d24:	2b10      	cmp	r3, #16
 8008d26:	d014      	beq.n	8008d52 <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_error)
 8008d28:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d010      	beq.n	8008d52 <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_busy_p)))
 8008d30:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d38:	d00b      	beq.n	8008d52 <AT_ESP8266_ND+0x24de>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008d3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	f340 866e 	ble.w	8009a2e <AT_ESP8266_ND+0x31ba>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008d52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008d64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008d74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008d84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008d94:	f000 be4b 	b.w	8009a2e <AT_ESP8266_ND+0x31ba>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 8008d98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d9c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8008da0:	2200      	movs	r2, #0
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	2200      	movs	r2, #0
 8008da6:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8008da8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dac:	2b10      	cmp	r3, #16
 8008dae:	d003      	beq.n	8008db8 <AT_ESP8266_ND+0x2544>
 8008db0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008db4:	2b0a      	cmp	r3, #10
 8008db6:	d127      	bne.n	8008e08 <AT_ESP8266_ND+0x2594>
				{
					a->_estado=AT_decode;
 8008db8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8008dca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8008dda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8008dea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8008dfa:	f000 be1a 	b.w	8009a32 <AT_ESP8266_ND+0x31be>
 8008dfe:	bf00      	nop
 8008e00:	08010708 	.word	0x08010708
 8008e04:	08010718 	.word	0x08010718
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008e08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	f040 80d1 	bne.w	8008fbe <AT_ESP8266_ND+0x274a>
 8008e1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f040 80c7 	bne.w	8008fbe <AT_ESP8266_ND+0x274a>
										a->_ejecucion=1;
 8008e30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8008e40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2218      	movs	r2, #24
 8008e4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008e50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8008e60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008e6e:	1c5a      	adds	r2, r3, #1
 8008e70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8008e7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8008e8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 8008e9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ea2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008eac:	4620      	mov	r0, r4
 8008eae:	f7f7 f9a1 	bl	80001f4 <strlen>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	4423      	add	r3, r4
 8008eb6:	4abe      	ldr	r2, [pc, #760]	; (80091b0 <AT_ESP8266_ND+0x293c>)
 8008eb8:	461c      	mov	r4, r3
 8008eba:	4613      	mov	r3, r2
 8008ebc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ebe:	6020      	str	r0, [r4, #0]
 8008ec0:	6061      	str	r1, [r4, #4]
 8008ec2:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8008ec4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ec8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8008ed2:	f107 0214 	add.w	r2, r7, #20
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f005 fdaf 	bl	800ea3c <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8008ede:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ee2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008eec:	f107 0314 	add.w	r3, r7, #20
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7f7 f97f 	bl	80001f4 <strlen>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	f107 0314 	add.w	r3, r7, #20
 8008efc:	4619      	mov	r1, r3
 8008efe:	4620      	mov	r0, r4
 8008f00:	f006 f825 	bl	800ef4e <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008f04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8008f12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008f20:	4619      	mov	r1, r3
 8008f22:	4610      	mov	r0, r2
 8008f24:	f006 f8f4 	bl	800f110 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008f28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008f36:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f006 f806 	bl	800ef4e <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8008f42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7f7 f94f 	bl	80001f4 <strlen>
 8008f56:	4603      	mov	r3, r0
 8008f58:	461a      	mov	r2, r3
 8008f5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8008f68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8008f76:	4620      	mov	r0, r4
 8008f78:	f7f7 f93c 	bl	80001f4 <strlen>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	4423      	add	r3, r4
 8008f80:	4a8c      	ldr	r2, [pc, #560]	; (80091b4 <AT_ESP8266_ND+0x2940>)
 8008f82:	461c      	mov	r4, r3
 8008f84:	4613      	mov	r3, r2
 8008f86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f88:	6020      	str	r0, [r4, #0]
 8008f8a:	6061      	str	r1, [r4, #4]
 8008f8c:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8008f8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8008f9c:	1c5a      	adds	r2, r3, #1
 8008f9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fa2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 8008fac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8008fba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8008fbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008fcc:	1c5a      	adds	r2, r3, #1
 8008fce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 8008fdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fe0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f040 80a6 	bne.w	800913c <AT_ESP8266_ND+0x28c8>
 8008ff0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ff4:	2b13      	cmp	r3, #19
 8008ff6:	f000 80a1 	beq.w	800913c <AT_ESP8266_ND+0x28c8>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 8008ffa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ffe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009008:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800900c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009016:	4619      	mov	r1, r3
 8009018:	4610      	mov	r0, r2
 800901a:	f7f7 f8e1 	bl	80001e0 <strcmp>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d01b      	beq.n	800905c <AT_ESP8266_ND+0x27e8>
 8009024:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009028:	2b01      	cmp	r3, #1
 800902a:	d017      	beq.n	800905c <AT_ESP8266_ND+0x27e8>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 800902c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009030:	2b14      	cmp	r3, #20
 8009032:	d013      	beq.n	800905c <AT_ESP8266_ND+0x27e8>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009034:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009038:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009042:	f241 3288 	movw	r2, #5000	; 0x1388
 8009046:	4293      	cmp	r3, r2
 8009048:	dd78      	ble.n	800913c <AT_ESP8266_ND+0x28c8>
 800904a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800904e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009058:	2b01      	cmp	r3, #1
 800905a:	d16f      	bne.n	800913c <AT_ESP8266_ND+0x28c8>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 800905c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009060:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800906a:	f241 3288 	movw	r2, #5000	; 0x1388
 800906e:	4293      	cmp	r3, r2
 8009070:	dd0e      	ble.n	8009090 <AT_ESP8266_ND+0x281c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009072:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009076:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8009080:	1c5a      	adds	r2, r3, #1
 8009082:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009086:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8009090:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009094:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 80090ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80090bc:	1c5a      	adds	r2, r3, #1
 80090be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 80090cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 80090dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f203 4094 	addw	r0, r3, #1172	; 0x494
 80090ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f503 7125 	add.w	r1, r3, #660	; 0x294
 80090f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009106:	2361      	movs	r3, #97	; 0x61
 8009108:	9300      	str	r3, [sp, #0]
 800910a:	2301      	movs	r3, #1
 800910c:	f005 fd28 	bl	800eb60 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009110:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009114:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 800911e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009122:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 800912c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009130:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2200      	movs	r2, #0
 8009138:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 800913c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009140:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800914a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800914e:	f040 8470 	bne.w	8009a32 <AT_ESP8266_ND+0x31be>
 8009152:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009156:	2b13      	cmp	r3, #19
 8009158:	d02e      	beq.n	80091b8 <AT_ESP8266_ND+0x2944>
 800915a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800915e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009168:	f241 3288 	movw	r2, #5000	; 0x1388
 800916c:	4293      	cmp	r3, r2
 800916e:	dc23      	bgt.n	80091b8 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_disconnect)
 8009170:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009174:	2b0a      	cmp	r3, #10
 8009176:	d01f      	beq.n	80091b8 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_connected)
 8009178:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800917c:	2b0b      	cmp	r3, #11
 800917e:	d01b      	beq.n	80091b8 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_gotip)
 8009180:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009184:	2b0c      	cmp	r3, #12
 8009186:	d017      	beq.n	80091b8 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_desconectado)
 8009188:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800918c:	2b10      	cmp	r3, #16
 800918e:	d013      	beq.n	80091b8 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_snd_err)
 8009190:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009194:	2b11      	cmp	r3, #17
 8009196:	d00f      	beq.n	80091b8 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_enviado_error)
 8009198:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800919c:	2b12      	cmp	r3, #18
 800919e:	d00b      	beq.n	80091b8 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_busy_p)))
 80091a0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80091a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091a8:	f040 8443 	bne.w	8009a32 <AT_ESP8266_ND+0x31be>
 80091ac:	e004      	b.n	80091b8 <AT_ESP8266_ND+0x2944>
 80091ae:	bf00      	nop
 80091b0:	0801071c 	.word	0x0801071c
 80091b4:	08010728 	.word	0x08010728
									a->_debug_count5++;
 80091b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80091c6:	1c5a      	adds	r2, r3, #1
 80091c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 80091d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80091e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e8:	4293      	cmp	r3, r2
 80091ea:	dd25      	ble.n	8009238 <AT_ESP8266_ND+0x29c4>
										a->_debug_count8++;
 80091ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 80091fa:	1c5a      	adds	r2, r3, #1
 80091fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009200:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 800920a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800920e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009218:	1c5a      	adds	r2, r3, #1
 800921a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800921e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009228:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800922c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2200      	movs	r2, #0
 8009234:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009238:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800923c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009246:	2b02      	cmp	r3, #2
 8009248:	dd10      	ble.n	800926c <AT_ESP8266_ND+0x29f8>
 800924a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800924e:	2b10      	cmp	r3, #16
 8009250:	d00c      	beq.n	800926c <AT_ESP8266_ND+0x29f8>
 8009252:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009256:	2b0a      	cmp	r3, #10
 8009258:	d008      	beq.n	800926c <AT_ESP8266_ND+0x29f8>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 800925a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800925e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	220f      	movs	r2, #15
 8009266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800926a:	e008      	b.n	800927e <AT_ESP8266_ND+0x2a0a>
										a->_estado=AT_decode;	//Devuelvo el estado
 800926c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009270:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800927a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 800927e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009282:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2200      	movs	r2, #0
 800928a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 800928e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009292:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2200      	movs	r2, #0
 800929a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 800929e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 80092ae:	e3c0      	b.n	8009a32 <AT_ESP8266_ND+0x31be>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80092b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 80092c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d16f      	bne.n	80093b2 <AT_ESP8266_ND+0x2b3e>
						{
						a->_pasos=0;
 80092d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2200      	movs	r2, #0
 80092de:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80092e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 80092f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009300:	4620      	mov	r0, r4
 8009302:	f7f6 ff77 	bl	80001f4 <strlen>
 8009306:	4603      	mov	r3, r0
 8009308:	4423      	add	r3, r4
 800930a:	4a78      	ldr	r2, [pc, #480]	; (80094ec <AT_ESP8266_ND+0x2c78>)
 800930c:	461c      	mov	r4, r3
 800930e:	4615      	mov	r5, r2
 8009310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009312:	6020      	str	r0, [r4, #0]
 8009314:	6061      	str	r1, [r4, #4]
 8009316:	60a2      	str	r2, [r4, #8]
 8009318:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 800931a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800931e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009328:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800932c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 8009336:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800933a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	335c      	adds	r3, #92	; 0x5c
 8009342:	4618      	mov	r0, r3
 8009344:	f7f6 ff56 	bl	80001f4 <strlen>
 8009348:	4603      	mov	r3, r0
 800934a:	461a      	mov	r2, r3
 800934c:	4629      	mov	r1, r5
 800934e:	4620      	mov	r0, r4
 8009350:	f005 fdfd 	bl	800ef4e <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009354:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009358:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009362:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009366:	4618      	mov	r0, r3
 8009368:	f7f6 ff44 	bl	80001f4 <strlen>
 800936c:	4602      	mov	r2, r0
 800936e:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009372:	4619      	mov	r1, r3
 8009374:	4620      	mov	r0, r4
 8009376:	f005 fdea 	bl	800ef4e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 800937a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800937e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009388:	4618      	mov	r0, r3
 800938a:	f7f6 ff33 	bl	80001f4 <strlen>
 800938e:	4603      	mov	r3, r0
 8009390:	461a      	mov	r2, r3
 8009392:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009396:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 80093a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80093ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 80093b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80093c0:	1c5a      	adds	r2, r3, #1
 80093c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80093d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d123      	bne.n	800942a <AT_ESP8266_ND+0x2bb6>
 80093e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093e6:	2b0a      	cmp	r3, #10
 80093e8:	d02b      	beq.n	8009442 <AT_ESP8266_ND+0x2bce>
 80093ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093ee:	2b0b      	cmp	r3, #11
 80093f0:	d027      	beq.n	8009442 <AT_ESP8266_ND+0x2bce>
 80093f2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093f6:	2b0c      	cmp	r3, #12
 80093f8:	d023      	beq.n	8009442 <AT_ESP8266_ND+0x2bce>
 80093fa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093fe:	2b0e      	cmp	r3, #14
 8009400:	d01f      	beq.n	8009442 <AT_ESP8266_ND+0x2bce>
 8009402:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009406:	2b0f      	cmp	r3, #15
 8009408:	d01b      	beq.n	8009442 <AT_ESP8266_ND+0x2bce>
 800940a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800940e:	2b10      	cmp	r3, #16
 8009410:	d017      	beq.n	8009442 <AT_ESP8266_ND+0x2bce>
 8009412:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009416:	2b15      	cmp	r3, #21
 8009418:	d013      	beq.n	8009442 <AT_ESP8266_ND+0x2bce>
 800941a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800941e:	2b16      	cmp	r3, #22
 8009420:	d00f      	beq.n	8009442 <AT_ESP8266_ND+0x2bce>
 8009422:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009426:	2b17      	cmp	r3, #23
 8009428:	d00b      	beq.n	8009442 <AT_ESP8266_ND+0x2bce>
 800942a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800942e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009438:	f241 3288 	movw	r2, #5000	; 0x1388
 800943c:	4293      	cmp	r3, r2
 800943e:	f340 82fa 	ble.w	8009a36 <AT_ESP8266_ND+0x31c2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8009442:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009446:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009454:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009458:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2200      	movs	r2, #0
 8009460:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8009464:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009468:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	2200      	movs	r2, #0
 8009470:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8009474:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009478:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2200      	movs	r2, #0
 8009480:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 8009484:	e2d7      	b.n	8009a36 <AT_ESP8266_ND+0x31c2>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 8009486:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800948a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800948e:	2200      	movs	r2, #0
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	2200      	movs	r2, #0
 8009494:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8009496:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800949a:	2b10      	cmp	r3, #16
 800949c:	d003      	beq.n	80094a6 <AT_ESP8266_ND+0x2c32>
 800949e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094a2:	2b0a      	cmp	r3, #10
 80094a4:	d124      	bne.n	80094f0 <AT_ESP8266_ND+0x2c7c>
				{
					a->_estado=AT_decode;
 80094a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80094b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 80094b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 80094c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 80094d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2200      	movs	r2, #0
 80094e4:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80094e8:	e2a7      	b.n	8009a3a <AT_ESP8266_ND+0x31c6>
 80094ea:	bf00      	nop
 80094ec:	08010734 	.word	0x08010734
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80094f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80094fe:	2b01      	cmp	r3, #1
 8009500:	f040 8102 	bne.w	8009708 <AT_ESP8266_ND+0x2e94>
 8009504:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009508:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009512:	2b00      	cmp	r3, #0
 8009514:	f040 80f8 	bne.w	8009708 <AT_ESP8266_ND+0x2e94>
										a->_ejecucion=1;
 8009518:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800951c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2201      	movs	r2, #1
 8009524:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8009528:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800952c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2218      	movs	r2, #24
 8009534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009538:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800953c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009548:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800954c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009556:	1c5a      	adds	r2, r3, #1
 8009558:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800955c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8009566:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800956a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2200      	movs	r2, #0
 8009572:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8009576:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800957a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 8009586:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800958a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009594:	4620      	mov	r0, r4
 8009596:	f7f6 fe2d 	bl	80001f4 <strlen>
 800959a:	4603      	mov	r3, r0
 800959c:	4423      	add	r3, r4
 800959e:	4a83      	ldr	r2, [pc, #524]	; (80097ac <AT_ESP8266_ND+0x2f38>)
 80095a0:	461c      	mov	r4, r3
 80095a2:	4613      	mov	r3, r2
 80095a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80095a6:	6020      	str	r0, [r4, #0]
 80095a8:	6061      	str	r1, [r4, #4]
 80095aa:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 80095ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 80095ba:	f107 020c 	add.w	r2, r7, #12
 80095be:	4611      	mov	r1, r2
 80095c0:	4618      	mov	r0, r3
 80095c2:	f005 fa3b 	bl	800ea3c <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 80095c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80095d4:	f107 030c 	add.w	r3, r7, #12
 80095d8:	4618      	mov	r0, r3
 80095da:	f7f6 fe0b 	bl	80001f4 <strlen>
 80095de:	4602      	mov	r2, r0
 80095e0:	f107 030c 	add.w	r3, r7, #12
 80095e4:	4619      	mov	r1, r3
 80095e6:	4620      	mov	r0, r4
 80095e8:	f005 fcb1 	bl	800ef4e <strncat>
										strncat(a->_uart2snd,",",1);
 80095ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80095fa:	4620      	mov	r0, r4
 80095fc:	f7f6 fdfa 	bl	80001f4 <strlen>
 8009600:	4603      	mov	r3, r0
 8009602:	4423      	add	r3, r4
 8009604:	496a      	ldr	r1, [pc, #424]	; (80097b0 <AT_ESP8266_ND+0x2f3c>)
 8009606:	461a      	mov	r2, r3
 8009608:	460b      	mov	r3, r1
 800960a:	881b      	ldrh	r3, [r3, #0]
 800960c:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 800960e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009612:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800961c:	f107 020c 	add.w	r2, r7, #12
 8009620:	4611      	mov	r1, r2
 8009622:	4618      	mov	r0, r3
 8009624:	f005 fa0a 	bl	800ea3c <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009628:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800962c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009636:	f107 030c 	add.w	r3, r7, #12
 800963a:	4618      	mov	r0, r3
 800963c:	f7f6 fdda 	bl	80001f4 <strlen>
 8009640:	4602      	mov	r2, r0
 8009642:	f107 030c 	add.w	r3, r7, #12
 8009646:	4619      	mov	r1, r3
 8009648:	4620      	mov	r0, r4
 800964a:	f005 fc80 	bl	800ef4e <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 800964e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009652:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 800965c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009660:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800966a:	4619      	mov	r1, r3
 800966c:	4610      	mov	r0, r2
 800966e:	f005 fd4f 	bl	800f110 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009672:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009676:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009680:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009684:	2202      	movs	r2, #2
 8009686:	4618      	mov	r0, r3
 8009688:	f005 fc61 	bl	800ef4e <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 800968c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009690:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800969a:	4618      	mov	r0, r3
 800969c:	f7f6 fdaa 	bl	80001f4 <strlen>
 80096a0:	4603      	mov	r3, r0
 80096a2:	461a      	mov	r2, r3
 80096a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 80096b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 80096c0:	4620      	mov	r0, r4
 80096c2:	f7f6 fd97 	bl	80001f4 <strlen>
 80096c6:	4603      	mov	r3, r0
 80096c8:	4423      	add	r3, r4
 80096ca:	4a3a      	ldr	r2, [pc, #232]	; (80097b4 <AT_ESP8266_ND+0x2f40>)
 80096cc:	461c      	mov	r4, r3
 80096ce:	4613      	mov	r3, r2
 80096d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80096d2:	6020      	str	r0, [r4, #0]
 80096d4:	6061      	str	r1, [r4, #4]
 80096d6:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 80096d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80096e6:	1c5a      	adds	r2, r3, #1
 80096e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 80096f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009708:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800970c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009716:	1c5a      	adds	r2, r3, #1
 8009718:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800971c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009726:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800972a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009734:	2b00      	cmp	r3, #0
 8009736:	f040 80b8 	bne.w	80098aa <AT_ESP8266_ND+0x3036>
 800973a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800973e:	2b13      	cmp	r3, #19
 8009740:	f000 80b3 	beq.w	80098aa <AT_ESP8266_ND+0x3036>
 8009744:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009748:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009752:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009756:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009760:	4619      	mov	r1, r3
 8009762:	4610      	mov	r0, r2
 8009764:	f7f6 fd3c 	bl	80001e0 <strcmp>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d024      	beq.n	80097b8 <AT_ESP8266_ND+0x2f44>
 800976e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009772:	2b01      	cmp	r3, #1
 8009774:	d020      	beq.n	80097b8 <AT_ESP8266_ND+0x2f44>
 8009776:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800977a:	2b14      	cmp	r3, #20
 800977c:	d01c      	beq.n	80097b8 <AT_ESP8266_ND+0x2f44>
 800977e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009782:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800978c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009790:	4293      	cmp	r3, r2
 8009792:	f340 808a 	ble.w	80098aa <AT_ESP8266_ND+0x3036>
 8009796:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800979a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	f040 8080 	bne.w	80098aa <AT_ESP8266_ND+0x3036>
 80097aa:	e005      	b.n	80097b8 <AT_ESP8266_ND+0x2f44>
 80097ac:	0801071c 	.word	0x0801071c
 80097b0:	08010744 	.word	0x08010744
 80097b4:	08010728 	.word	0x08010728
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 80097b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80097c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80097ca:	4293      	cmp	r3, r2
 80097cc:	dd17      	ble.n	80097fe <AT_ESP8266_ND+0x2f8a>
 80097ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d10e      	bne.n	80097fe <AT_ESP8266_ND+0x2f8a>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 80097e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 80097fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009802:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 800980c:	1c5a      	adds	r2, r3, #1
 800980e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009812:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 800981c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009820:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800982a:	1c5a      	adds	r2, r3, #1
 800982c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009830:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 800983a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800983e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2201      	movs	r2, #1
 8009846:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 800984a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800984e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009858:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800985c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009866:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800986a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009874:	2361      	movs	r3, #97	; 0x61
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	2301      	movs	r3, #1
 800987a:	f005 f971 	bl	800eb60 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 800987e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009882:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 800988c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009890:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 800989a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800989e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 80098aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098b8:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80098bc:	f040 80bd 	bne.w	8009a3a <AT_ESP8266_ND+0x31c6>
 80098c0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098c4:	2b13      	cmp	r3, #19
 80098c6:	d02b      	beq.n	8009920 <AT_ESP8266_ND+0x30ac>
 80098c8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098cc:	2b0b      	cmp	r3, #11
 80098ce:	d027      	beq.n	8009920 <AT_ESP8266_ND+0x30ac>
 80098d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098d4:	2b0c      	cmp	r3, #12
 80098d6:	d023      	beq.n	8009920 <AT_ESP8266_ND+0x30ac>
 80098d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80098e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80098ea:	4293      	cmp	r3, r2
 80098ec:	dc18      	bgt.n	8009920 <AT_ESP8266_ND+0x30ac>
 80098ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098f2:	2b0a      	cmp	r3, #10
 80098f4:	d014      	beq.n	8009920 <AT_ESP8266_ND+0x30ac>
 80098f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80098fa:	2b10      	cmp	r3, #16
 80098fc:	d010      	beq.n	8009920 <AT_ESP8266_ND+0x30ac>
 80098fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009902:	2b11      	cmp	r3, #17
 8009904:	d00c      	beq.n	8009920 <AT_ESP8266_ND+0x30ac>
 8009906:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800990a:	2b12      	cmp	r3, #18
 800990c:	d008      	beq.n	8009920 <AT_ESP8266_ND+0x30ac>
 800990e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009912:	2b16      	cmp	r3, #22
 8009914:	d004      	beq.n	8009920 <AT_ESP8266_ND+0x30ac>
 8009916:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800991a:	2b19      	cmp	r3, #25
 800991c:	f040 808d 	bne.w	8009a3a <AT_ESP8266_ND+0x31c6>
									a->_debug_count5++;
 8009920:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009924:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800992e:	1c5a      	adds	r2, r3, #1
 8009930:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009934:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 800993e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009942:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800994c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009950:	4293      	cmp	r3, r2
 8009952:	dd25      	ble.n	80099a0 <AT_ESP8266_ND+0x312c>
										a->_debug_count8++;
 8009954:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009958:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009962:	1c5a      	adds	r2, r3, #1
 8009964:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009968:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009972:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009976:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009980:	1c5a      	adds	r2, r3, #1
 8009982:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009986:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009990:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009994:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2200      	movs	r2, #0
 800999c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 80099a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80099ae:	2b02      	cmp	r3, #2
 80099b0:	dd07      	ble.n	80099c2 <AT_ESP8266_ND+0x314e>
 80099b2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099b6:	2b10      	cmp	r3, #16
 80099b8:	d003      	beq.n	80099c2 <AT_ESP8266_ND+0x314e>
 80099ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80099be:	2b0a      	cmp	r3, #10
 80099c0:	d108      	bne.n	80099d4 <AT_ESP8266_ND+0x3160>
										a->_estado=AT_decode;	//Devuelvo el estado
 80099c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80099d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 80099d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2200      	movs	r2, #0
 80099e0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 80099e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 80099f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009a04:	e019      	b.n	8009a3a <AT_ESP8266_ND+0x31c6>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009a06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009a14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009a18:	e010      	b.n	8009a3c <AT_ESP8266_ND+0x31c8>
			break;
 8009a1a:	bf00      	nop
 8009a1c:	e00e      	b.n	8009a3c <AT_ESP8266_ND+0x31c8>
			break;
 8009a1e:	bf00      	nop
 8009a20:	e00c      	b.n	8009a3c <AT_ESP8266_ND+0x31c8>
			break;
 8009a22:	bf00      	nop
 8009a24:	e00a      	b.n	8009a3c <AT_ESP8266_ND+0x31c8>
			break;
 8009a26:	bf00      	nop
 8009a28:	e008      	b.n	8009a3c <AT_ESP8266_ND+0x31c8>
			break;
 8009a2a:	bf00      	nop
 8009a2c:	e006      	b.n	8009a3c <AT_ESP8266_ND+0x31c8>
			break;
 8009a2e:	bf00      	nop
 8009a30:	e004      	b.n	8009a3c <AT_ESP8266_ND+0x31c8>
			break;
 8009a32:	bf00      	nop
 8009a34:	e002      	b.n	8009a3c <AT_ESP8266_ND+0x31c8>
			break;
 8009a36:	bf00      	nop
 8009a38:	e000      	b.n	8009a3c <AT_ESP8266_ND+0x31c8>
			break;
 8009a3a:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009a3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 8009a4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 8009a5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a74 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a86:	f240 328d 	movw	r2, #909	; 0x38d
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	f001 83c3 	beq.w	800b216 <WiFi_Conn_ND+0x17a2>
 8009a90:	f240 328d 	movw	r2, #909	; 0x38d
 8009a94:	4293      	cmp	r3, r2
 8009a96:	f301 8453 	bgt.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009a9a:	f240 3289 	movw	r2, #905	; 0x389
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	f001 8335 	beq.w	800b10e <WiFi_Conn_ND+0x169a>
 8009aa4:	f240 3289 	movw	r2, #905	; 0x389
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	f301 8449 	bgt.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009aae:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009ab2:	f001 8224 	beq.w	800aefe <WiFi_Conn_ND+0x148a>
 8009ab6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009aba:	f301 8441 	bgt.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009abe:	f240 3229 	movw	r2, #809	; 0x329
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	f301 843c 	bgt.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009ac8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009acc:	f280 80a5 	bge.w	8009c1a <WiFi_Conn_ND+0x1a6>
 8009ad0:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	f000 8776 	beq.w	800a9c6 <WiFi_Conn_ND+0xf52>
 8009ada:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	f301 842e 	bgt.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009ae4:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	f000 86fc 	beq.w	800a8e6 <WiFi_Conn_ND+0xe72>
 8009aee:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009af2:	4293      	cmp	r3, r2
 8009af4:	f301 8424 	bgt.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009af8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009afc:	f000 862b 	beq.w	800a756 <WiFi_Conn_ND+0xce2>
 8009b00:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009b04:	f301 841c 	bgt.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009b08:	f240 2261 	movw	r2, #609	; 0x261
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	f000 85b1 	beq.w	800a674 <WiFi_Conn_ND+0xc00>
 8009b12:	f240 2261 	movw	r2, #609	; 0x261
 8009b16:	4293      	cmp	r3, r2
 8009b18:	f301 8412 	bgt.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009b1c:	f240 225d 	movw	r2, #605	; 0x25d
 8009b20:	4293      	cmp	r3, r2
 8009b22:	f000 8551 	beq.w	800a5c8 <WiFi_Conn_ND+0xb54>
 8009b26:	f240 225d 	movw	r2, #605	; 0x25d
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	f301 8408 	bgt.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009b30:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009b34:	f000 84cf 	beq.w	800a4d6 <WiFi_Conn_ND+0xa62>
 8009b38:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009b3c:	f301 8400 	bgt.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009b40:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009b44:	4293      	cmp	r3, r2
 8009b46:	f000 846a 	beq.w	800a41e <WiFi_Conn_ND+0x9aa>
 8009b4a:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009b4e:	f281 83f7 	bge.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009b52:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009b56:	4293      	cmp	r3, r2
 8009b58:	f000 8425 	beq.w	800a3a6 <WiFi_Conn_ND+0x932>
 8009b5c:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009b60:	f281 83ee 	bge.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009b64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009b68:	f000 83b0 	beq.w	800a2cc <WiFi_Conn_ND+0x858>
 8009b6c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009b70:	f301 83e6 	bgt.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009b74:	f240 1299 	movw	r2, #409	; 0x199
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	f000 8369 	beq.w	800a250 <WiFi_Conn_ND+0x7dc>
 8009b7e:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8009b82:	f281 83dd 	bge.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009b86:	f240 1295 	movw	r2, #405	; 0x195
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	f000 8329 	beq.w	800a1e2 <WiFi_Conn_ND+0x76e>
 8009b90:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009b94:	f281 83d4 	bge.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009b98:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009b9c:	f000 82a0 	beq.w	800a0e0 <WiFi_Conn_ND+0x66c>
 8009ba0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009ba4:	f301 83cc 	bgt.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009ba8:	f240 1235 	movw	r2, #309	; 0x135
 8009bac:	4293      	cmp	r3, r2
 8009bae:	f000 8271 	beq.w	800a094 <WiFi_Conn_ND+0x620>
 8009bb2:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009bb6:	f281 83c3 	bge.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009bba:	f240 1231 	movw	r2, #305	; 0x131
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	f000 8263 	beq.w	800a08a <WiFi_Conn_ND+0x616>
 8009bc4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009bc8:	f281 83ba 	bge.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009bcc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009bd0:	f000 8207 	beq.w	8009fe2 <WiFi_Conn_ND+0x56e>
 8009bd4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009bd8:	f301 83b2 	bgt.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009bdc:	2bd1      	cmp	r3, #209	; 0xd1
 8009bde:	f000 81a0 	beq.w	8009f22 <WiFi_Conn_ND+0x4ae>
 8009be2:	2bd1      	cmp	r3, #209	; 0xd1
 8009be4:	f301 83ac 	bgt.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009be8:	2bcd      	cmp	r3, #205	; 0xcd
 8009bea:	f000 8170 	beq.w	8009ece <WiFi_Conn_ND+0x45a>
 8009bee:	2bcd      	cmp	r3, #205	; 0xcd
 8009bf0:	f301 83a6 	bgt.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009bf4:	2bc8      	cmp	r3, #200	; 0xc8
 8009bf6:	f000 80f1 	beq.w	8009ddc <WiFi_Conn_ND+0x368>
 8009bfa:	2bc8      	cmp	r3, #200	; 0xc8
 8009bfc:	f301 83a0 	bgt.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009c00:	2b6d      	cmp	r3, #109	; 0x6d
 8009c02:	f000 80b3 	beq.w	8009d6c <WiFi_Conn_ND+0x2f8>
 8009c06:	2b6d      	cmp	r3, #109	; 0x6d
 8009c08:	f301 839a 	bgt.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009c0c:	2b64      	cmp	r3, #100	; 0x64
 8009c0e:	d021      	beq.n	8009c54 <WiFi_Conn_ND+0x1e0>
 8009c10:	2b69      	cmp	r3, #105	; 0x69
 8009c12:	f000 8096 	beq.w	8009d42 <WiFi_Conn_ND+0x2ce>
 8009c16:	f001 bb93 	b.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009c1a:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009c1e:	2b09      	cmp	r3, #9
 8009c20:	f201 838e 	bhi.w	800b340 <WiFi_Conn_ND+0x18cc>
 8009c24:	a201      	add	r2, pc, #4	; (adr r2, 8009c2c <WiFi_Conn_ND+0x1b8>)
 8009c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c2a:	bf00      	nop
 8009c2c:	0800aad3 	.word	0x0800aad3
 8009c30:	0800b341 	.word	0x0800b341
 8009c34:	0800b341 	.word	0x0800b341
 8009c38:	0800b341 	.word	0x0800b341
 8009c3c:	0800b341 	.word	0x0800b341
 8009c40:	0800aba1 	.word	0x0800aba1
 8009c44:	0800ac41 	.word	0x0800ac41
 8009c48:	0800ace1 	.word	0x0800ace1
 8009c4c:	0800ad81 	.word	0x0800ad81
 8009c50:	0800ae21 	.word	0x0800ae21
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c5a:	2b64      	cmp	r3, #100	; 0x64
 8009c5c:	d046      	beq.n	8009cec <WiFi_Conn_ND+0x278>
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d041      	beq.n	8009cec <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c6e:	2b1c      	cmp	r3, #28
 8009c70:	d03c      	beq.n	8009cec <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d037      	beq.n	8009cec <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c82:	2b04      	cmp	r3, #4
 8009c84:	d032      	beq.n	8009cec <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c8c:	2b13      	cmp	r3, #19
 8009c8e:	d02d      	beq.n	8009cec <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f7fc fc5f 	bl	8006554 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d14e      	bne.n	8009d3e <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f7fc fde7 	bl	8006874 <AT_ESP8266_ND>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d109      	bne.n	8009cd4 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4610      	mov	r0, r2
 8009cd0:	f7f7 fbd8 	bl	8001484 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009ce0:	b29a      	uxth	r2, r3
 8009ce2:	2364      	movs	r3, #100	; 0x64
 8009ce4:	68b8      	ldr	r0, [r7, #8]
 8009ce6:	f7fb fb91 	bl	800540c <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 8009cea:	e028      	b.n	8009d3e <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d004      	beq.n	8009d00 <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 8009cfc:	2b1c      	cmp	r3, #28
 8009cfe:	d103      	bne.n	8009d08 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	226d      	movs	r2, #109	; 0x6d
 8009d04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	d00f      	beq.n	8009d32 <WiFi_Conn_ND+0x2be>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d18:	2b04      	cmp	r3, #4
 8009d1a:	d00a      	beq.n	8009d32 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d22:	2b0b      	cmp	r3, #11
 8009d24:	d005      	beq.n	8009d32 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d2c:	2b0c      	cmp	r3, #12
 8009d2e:	f041 82d8 	bne.w	800b2e2 <WiFi_Conn_ND+0x186e>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2269      	movs	r2, #105	; 0x69
 8009d36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 8009d3a:	f001 bad2 	b.w	800b2e2 <WiFi_Conn_ND+0x186e>
 8009d3e:	f001 bad0 	b.w	800b2e2 <WiFi_Conn_ND+0x186e>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f7fc fc06 	bl	8006554 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2264      	movs	r2, #100	; 0x64
 8009d4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 8009d68:	f001 baea 	b.w	800b340 <WiFi_Conn_ND+0x18cc>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00c      	beq.n	8009d90 <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f7fc fc18 	bl	80065ac <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009d82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8009d8e:	e00e      	b.n	8009dae <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f7fc fbf5 	bl	8006580 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	22c8      	movs	r2, #200	; 0xc8
 8009d9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db4:	2b04      	cmp	r3, #4
 8009db6:	f041 8296 	bne.w	800b2e6 <WiFi_Conn_ND+0x1872>
					{
						Cambiar_CWMODE(b);
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f7fc fbca 	bl	8006554 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2264      	movs	r2, #100	; 0x64
 8009dc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009dd8:	f001 ba85 	b.w	800b2e6 <WiFi_Conn_ND+0x1872>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de2:	2bc8      	cmp	r3, #200	; 0xc8
 8009de4:	d04f      	beq.n	8009e86 <WiFi_Conn_ND+0x412>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d04a      	beq.n	8009e86 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d045      	beq.n	8009e86 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e00:	2b03      	cmp	r3, #3
 8009e02:	d040      	beq.n	8009e86 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e0a:	2b04      	cmp	r3, #4
 8009e0c:	d03b      	beq.n	8009e86 <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e14:	2b0a      	cmp	r3, #10
 8009e16:	d036      	beq.n	8009e86 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e1e:	2b0b      	cmp	r3, #11
 8009e20:	d031      	beq.n	8009e86 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e28:	2b0c      	cmp	r3, #12
 8009e2a:	d02c      	beq.n	8009e86 <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f7fc fba7 	bl	8006580 <ConectarWIFI>
						if(b->_enviaruart==1)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d124      	bne.n	8009e86 <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f7fc fd19 	bl	8006874 <AT_ESP8266_ND>
 8009e42:	4602      	mov	r2, r0
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d109      	bne.n	8009e70 <WiFi_Conn_ND+0x3fc>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009e68:	4619      	mov	r1, r3
 8009e6a:	4610      	mov	r0, r2
 8009e6c:	f7f7 fb0a 	bl	8001484 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	2364      	movs	r3, #100	; 0x64
 8009e80:	68b8      	ldr	r0, [r7, #8]
 8009e82:	f7fb fac3 	bl	800540c <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d004      	beq.n	8009e9a <WiFi_Conn_ND+0x426>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e96:	2b0c      	cmp	r3, #12
 8009e98:	d103      	bne.n	8009ea2 <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	22d1      	movs	r2, #209	; 0xd1
 8009e9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d00a      	beq.n	8009ec2 <WiFi_Conn_ND+0x44e>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eb2:	2b03      	cmp	r3, #3
 8009eb4:	d005      	beq.n	8009ec2 <WiFi_Conn_ND+0x44e>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ebc:	2b20      	cmp	r3, #32
 8009ebe:	f041 8214 	bne.w	800b2ea <WiFi_Conn_ND+0x1876>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	22cd      	movs	r2, #205	; 0xcd
 8009ec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009eca:	f001 ba0e 	b.w	800b2ea <WiFi_Conn_ND+0x1876>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 8009ece:	f241 3088 	movw	r0, #5000	; 0x1388
 8009ed2:	f7f8 fde7 	bl	8002aa4 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f7fc fb52 	bl	8006580 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	22c8      	movs	r2, #200	; 0xc8
 8009ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009efa:	2b04      	cmp	r3, #4
 8009efc:	f041 81f7 	bne.w	800b2ee <WiFi_Conn_ND+0x187a>
					{
						Cambiar_CWMODE(b);
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f7fc fb27 	bl	8006554 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2264      	movs	r2, #100	; 0x64
 8009f0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009f1e:	f001 b9e6 	b.w	800b2ee <WiFi_Conn_ND+0x187a>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d108      	bne.n	8009f46 <WiFi_Conn_ND+0x4d2>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f240 3229 	movw	r2, #809	; 0x329
 8009f3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)) //Si me desconecto, me vuelvo a conectar
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f4c:	2b0a      	cmp	r3, #10
 8009f4e:	d004      	beq.n	8009f5a <WiFi_Conn_ND+0x4e6>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f56:	2b0d      	cmp	r3, #13
 8009f58:	d10a      	bne.n	8009f70 <WiFi_Conn_ND+0x4fc>
				{
					ConectarWIFI(b);
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f7fc fb10 	bl	8006580 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	22c8      	movs	r2, #200	; 0xc8
 8009f64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f76:	2b04      	cmp	r3, #4
 8009f78:	d10e      	bne.n	8009f98 <WiFi_Conn_ND+0x524>
					{
						Cambiar_CWMODE(b);
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f7fc faea 	bl	8006554 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2264      	movs	r2, #100	; 0x64
 8009f84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d011      	beq.n	8009fc6 <WiFi_Conn_ND+0x552>
				{//
					CrearServidorTCP(b);
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f7fc fb5a 	bl	800665c <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009fae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 8009fc2:	f001 b9bd 	b.w	800b340 <WiFi_Conn_ND+0x18cc>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	f7fc faf0 	bl	80065ac <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8009fde:	f001 b9af 	b.w	800b340 <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fe8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009fec:	d03b      	beq.n	800a066 <WiFi_Conn_ND+0x5f2>
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ff4:	2b04      	cmp	r3, #4
 8009ff6:	d036      	beq.n	800a066 <WiFi_Conn_ND+0x5f2>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ffe:	2b0a      	cmp	r3, #10
 800a000:	d031      	beq.n	800a066 <WiFi_Conn_ND+0x5f2>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a008:	2b0d      	cmp	r3, #13
 800a00a:	d02c      	beq.n	800a066 <WiFi_Conn_ND+0x5f2>
				{
						DesconectarWIFI(b);
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f7fc faf9 	bl	8006604 <DesconectarWIFI>
						if(b->_enviaruart==1)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d124      	bne.n	800a066 <WiFi_Conn_ND+0x5f2>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f7fc fc29 	bl	8006874 <AT_ESP8266_ND>
 800a022:	4602      	mov	r2, r0
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d109      	bne.n	800a050 <WiFi_Conn_ND+0x5dc>
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a048:	4619      	mov	r1, r3
 800a04a:	4610      	mov	r0, r2
 800a04c:	f7f7 fa1a 	bl	8001484 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	2364      	movs	r3, #100	; 0x64
 800a060:	68b8      	ldr	r0, [r7, #8]
 800a062:	f7fb f9d3 	bl	800540c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a06c:	2b0a      	cmp	r3, #10
 800a06e:	d005      	beq.n	800a07c <WiFi_Conn_ND+0x608>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a076:	2b0d      	cmp	r3, #13
 800a078:	f041 813b 	bne.w	800b2f2 <WiFi_Conn_ND+0x187e>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f240 1235 	movw	r2, #309	; 0x135
 800a082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a086:	f001 b934 	b.w	800b2f2 <WiFi_Conn_ND+0x187e>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f7fc fa4c 	bl	8006528 <NOP>
			}
			break;
 800a090:	f001 b956 	b.w	800b340 <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2200      	movs	r2, #0
 800a098:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	f7fc fa6f 	bl	8006580 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	22c8      	movs	r2, #200	; 0xc8
 800a0a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b8:	2b04      	cmp	r3, #4
 800a0ba:	f041 811c 	bne.w	800b2f6 <WiFi_Conn_ND+0x1882>
					{
						Cambiar_CWMODE(b);
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f7fc fa48 	bl	8006554 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2264      	movs	r2, #100	; 0x64
 800a0c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a0dc:	f001 b90b 	b.w	800b2f6 <WiFi_Conn_ND+0x1882>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a0ea:	d04f      	beq.n	800a18c <WiFi_Conn_ND+0x718>
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0f2:	2b04      	cmp	r3, #4
 800a0f4:	d04a      	beq.n	800a18c <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_ok)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d045      	beq.n	800a18c <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_error)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a106:	2b02      	cmp	r3, #2
 800a108:	d040      	beq.n	800a18c <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_ok)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a110:	2b07      	cmp	r3, #7
 800a112:	d03b      	beq.n	800a18c <WiFi_Conn_ND+0x718>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a11a:	2b08      	cmp	r3, #8
 800a11c:	d036      	beq.n	800a18c <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_err)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a124:	2b1e      	cmp	r3, #30
 800a126:	d031      	beq.n	800a18c <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a12e:	2b1f      	cmp	r3, #31
 800a130:	d02c      	beq.n	800a18c <WiFi_Conn_ND+0x718>
				{
						MUX(b);
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f7fc fa3a 	bl	80065ac <MUX>
						if(b->_enviaruart==1)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d124      	bne.n	800a18c <WiFi_Conn_ND+0x718>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f7fc fb96 	bl	8006874 <AT_ESP8266_ND>
 800a148:	4602      	mov	r2, r0
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d109      	bne.n	800a176 <WiFi_Conn_ND+0x702>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a16e:	4619      	mov	r1, r3
 800a170:	4610      	mov	r0, r2
 800a172:	f7f7 f987 	bl	8001484 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a182:	b29a      	uxth	r2, r3
 800a184:	2364      	movs	r3, #100	; 0x64
 800a186:	68b8      	ldr	r0, [r7, #8]
 800a188:	f7fb f940 	bl	800540c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a192:	2b01      	cmp	r3, #1
 800a194:	d009      	beq.n	800a1aa <WiFi_Conn_ND+0x736>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a19c:	2b07      	cmp	r3, #7
 800a19e:	d004      	beq.n	800a1aa <WiFi_Conn_ND+0x736>
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a6:	2b08      	cmp	r3, #8
 800a1a8:	d104      	bne.n	800a1b4 <WiFi_Conn_ND+0x740>
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f240 1299 	movw	r2, #409	; 0x199
 800a1b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d00a      	beq.n	800a1d4 <WiFi_Conn_ND+0x760>
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c4:	2b1e      	cmp	r3, #30
 800a1c6:	d005      	beq.n	800a1d4 <WiFi_Conn_ND+0x760>
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ce:	2b1f      	cmp	r3, #31
 800a1d0:	f041 8093 	bne.w	800b2fa <WiFi_Conn_ND+0x1886>
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f240 1295 	movw	r2, #405	; 0x195
 800a1da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a1de:	f001 b88c 	b.w	800b2fa <WiFi_Conn_ND+0x1886>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f7fc f9a0 	bl	8006528 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ee:	2b04      	cmp	r3, #4
 800a1f0:	d112      	bne.n	800a218 <WiFi_Conn_ND+0x7a4>
				{
					Cambiar_CWMODE(b);
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f7fc f9ae 	bl	8006554 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2264      	movs	r2, #100	; 0x64
 800a1fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2200      	movs	r2, #0
 800a20c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2200      	movs	r2, #0
 800a214:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a21e:	2b0a      	cmp	r3, #10
 800a220:	d005      	beq.n	800a22e <WiFi_Conn_ND+0x7ba>
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a228:	2b0d      	cmp	r3, #13
 800a22a:	f041 8068 	bne.w	800b2fe <WiFi_Conn_ND+0x188a>
				{
					ConectarWIFI(b);
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f7fc f9a6 	bl	8006580 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	22c8      	movs	r2, #200	; 0xc8
 800a238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a24c:	f001 b857 	b.w	800b2fe <WiFi_Conn_ND+0x188a>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f7fc f969 	bl	8006528 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2200      	movs	r2, #0
 800a25a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a264:	2b04      	cmp	r3, #4
 800a266:	d10e      	bne.n	800a286 <WiFi_Conn_ND+0x812>
					{
						Cambiar_CWMODE(b);
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f7fc f973 	bl	8006554 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2264      	movs	r2, #100	; 0x64
 800a272:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2200      	movs	r2, #0
 800a27a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a28c:	2b0a      	cmp	r3, #10
 800a28e:	d004      	beq.n	800a29a <WiFi_Conn_ND+0x826>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a296:	2b0d      	cmp	r3, #13
 800a298:	d10a      	bne.n	800a2b0 <WiFi_Conn_ND+0x83c>
					{
						ConectarWIFI(b);
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f7fc f970 	bl	8006580 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	22c8      	movs	r2, #200	; 0xc8
 800a2a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}

					IPDef(b);
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f7fc f991 	bl	80065d8 <IPDef>
					b->_estado_conexion=DEF_IP_EN_CURSO;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a2bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 800a2c8:	f001 b83a 	b.w	800b340 <WiFi_Conn_ND+0x18cc>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a2d6:	d045      	beq.n	800a364 <WiFi_Conn_ND+0x8f0>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2de:	2b04      	cmp	r3, #4
 800a2e0:	d040      	beq.n	800a364 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_ok)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d03b      	beq.n	800a364 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_error)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d036      	beq.n	800a364 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_ok)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2fc:	2b1b      	cmp	r3, #27
 800a2fe:	d031      	beq.n	800a364 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a306:	2b21      	cmp	r3, #33	; 0x21
 800a308:	d02c      	beq.n	800a364 <WiFi_Conn_ND+0x8f0>
				{
						IPDef(b);
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f7fc f964 	bl	80065d8 <IPDef>
						if(b->_enviaruart==1)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a316:	2b01      	cmp	r3, #1
 800a318:	d124      	bne.n	800a364 <WiFi_Conn_ND+0x8f0>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f7fc faaa 	bl	8006874 <AT_ESP8266_ND>
 800a320:	4602      	mov	r2, r0
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a336:	2b01      	cmp	r3, #1
 800a338:	d109      	bne.n	800a34e <WiFi_Conn_ND+0x8da>
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a346:	4619      	mov	r1, r3
 800a348:	4610      	mov	r0, r2
 800a34a:	f7f7 f89b 	bl	8001484 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	2364      	movs	r3, #100	; 0x64
 800a35e:	68b8      	ldr	r0, [r7, #8]
 800a360:	f7fb f854 	bl	800540c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d004      	beq.n	800a378 <WiFi_Conn_ND+0x904>
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a374:	2b1b      	cmp	r3, #27
 800a376:	d104      	bne.n	800a382 <WiFi_Conn_ND+0x90e>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a37e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d005      	beq.n	800a398 <WiFi_Conn_ND+0x924>
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a392:	2b21      	cmp	r3, #33	; 0x21
 800a394:	f040 87b5 	bne.w	800b302 <WiFi_Conn_ND+0x188e>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a39e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a3a2:	f000 bfae 	b.w	800b302 <WiFi_Conn_ND+0x188e>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f7fc f8be 	bl	8006528 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b2:	2b04      	cmp	r3, #4
 800a3b4:	d004      	beq.n	800a3c0 <WiFi_Conn_ND+0x94c>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d112      	bne.n	800a3e6 <WiFi_Conn_ND+0x972>
				{
					Cambiar_CWMODE(b);
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f7fc f8c7 	bl	8006554 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2264      	movs	r2, #100	; 0x64
 800a3ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ec:	2b0a      	cmp	r3, #10
 800a3ee:	d005      	beq.n	800a3fc <WiFi_Conn_ND+0x988>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3f6:	2b0d      	cmp	r3, #13
 800a3f8:	f040 8785 	bne.w	800b306 <WiFi_Conn_ND+0x1892>
				{
					ConectarWIFI(b);
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f7fc f8bf 	bl	8006580 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	22c8      	movs	r2, #200	; 0xc8
 800a406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a41a:	f000 bf74 	b.w	800b306 <WiFi_Conn_ND+0x1892>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	f7fc f882 	bl	8006528 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a42a:	2b04      	cmp	r3, #4
 800a42c:	d112      	bne.n	800a454 <WiFi_Conn_ND+0x9e0>
					{
						Cambiar_CWMODE(b);
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f7fc f890 	bl	8006554 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2264      	movs	r2, #100	; 0x64
 800a438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a45a:	2b0a      	cmp	r3, #10
 800a45c:	d004      	beq.n	800a468 <WiFi_Conn_ND+0x9f4>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a464:	2b0d      	cmp	r3, #13
 800a466:	d10e      	bne.n	800a486 <WiFi_Conn_ND+0xa12>
					{
						ConectarWIFI(b);
 800a468:	68f8      	ldr	r0, [r7, #12]
 800a46a:	f7fc f889 	bl	8006580 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	22c8      	movs	r2, #200	; 0xc8
 800a472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d111      	bne.n	800a4b4 <WiFi_Conn_ND+0xa40>
					{
						ConectarTCP(b);
 800a490:	68f8      	ldr	r0, [r7, #12]
 800a492:	f7fc f8cd 	bl	8006630 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a49c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						//b->_estado_conexion=TCP_SRVR_EN_CURSO;
						//b->_estado=0;
						//b->_n_orig=0; //Borro el vector RX
					}
			}
			break;
 800a4b0:	f000 bf46 	b.w	800b340 <WiFi_Conn_ND+0x18cc>
						ConectarWIFI(b);//
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f7fc f863 	bl	8006580 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	22c8      	movs	r2, #200	; 0xc8
 800a4be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a4d2:	f000 bf35 	b.w	800b340 <WiFi_Conn_ND+0x18cc>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4dc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a4e0:	d04a      	beq.n	800a578 <WiFi_Conn_ND+0xb04>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d045      	beq.n	800a578 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_ok)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d040      	beq.n	800a578 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_wifi_disconnect)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4fc:	2b0a      	cmp	r3, #10
 800a4fe:	d03b      	beq.n	800a578 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a506:	2b0e      	cmp	r3, #14
 800a508:	d036      	beq.n	800a578 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_conectado)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a510:	2b0f      	cmp	r3, #15
 800a512:	d031      	beq.n	800a578 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a51a:	2b10      	cmp	r3, #16
 800a51c:	d02c      	beq.n	800a578 <WiFi_Conn_ND+0xb04>
				{
					ConectarTCP(b);
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f7fc f886 	bl	8006630 <ConectarTCP>
						if(b->_enviaruart==1)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d124      	bne.n	800a578 <WiFi_Conn_ND+0xb04>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f7fc f9a0 	bl	8006874 <AT_ESP8266_ND>
 800a534:	4602      	mov	r2, r0
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d109      	bne.n	800a562 <WiFi_Conn_ND+0xaee>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a55a:	4619      	mov	r1, r3
 800a55c:	4610      	mov	r0, r2
 800a55e:	f7f6 ff91 	bl	8001484 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a56e:	b29a      	uxth	r2, r3
 800a570:	2364      	movs	r3, #100	; 0x64
 800a572:	68b8      	ldr	r0, [r7, #8]
 800a574:	f7fa ff4a 	bl	800540c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d009      	beq.n	800a596 <WiFi_Conn_ND+0xb22>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a588:	2b0e      	cmp	r3, #14
 800a58a:	d004      	beq.n	800a596 <WiFi_Conn_ND+0xb22>
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a592:	2b0f      	cmp	r3, #15
 800a594:	d106      	bne.n	800a5a4 <WiFi_Conn_ND+0xb30>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f240 2261 	movw	r2, #609	; 0x261
 800a59c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800a5a0:	f000 beb3 	b.w	800b30a <WiFi_Conn_ND+0x1896>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d005      	beq.n	800a5ba <WiFi_Conn_ND+0xb46>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b4:	2b10      	cmp	r3, #16
 800a5b6:	f040 86a8 	bne.w	800b30a <WiFi_Conn_ND+0x1896>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f240 225d 	movw	r2, #605	; 0x25d
 800a5c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800a5c4:	f000 bea1 	b.w	800b30a <WiFi_Conn_ND+0x1896>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f7fb ffad 	bl	8006528 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d4:	2b04      	cmp	r3, #4
 800a5d6:	d112      	bne.n	800a5fe <WiFi_Conn_ND+0xb8a>
				{
					Cambiar_CWMODE(b);
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f7fb ffbb 	bl	8006554 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2264      	movs	r2, #100	; 0x64
 800a5e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a604:	2b0a      	cmp	r3, #10
 800a606:	d004      	beq.n	800a612 <WiFi_Conn_ND+0xb9e>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a60e:	2b0d      	cmp	r3, #13
 800a610:	d10e      	bne.n	800a630 <WiFi_Conn_ND+0xbbc>
				{
					ConectarWIFI(b);
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f7fb ffb4 	bl	8006580 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	22c8      	movs	r2, #200	; 0xc8
 800a61c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a636:	2b02      	cmp	r3, #2
 800a638:	d00a      	beq.n	800a650 <WiFi_Conn_ND+0xbdc>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a640:	2b10      	cmp	r3, #16
 800a642:	d005      	beq.n	800a650 <WiFi_Conn_ND+0xbdc>
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a64a:	2b0e      	cmp	r3, #14
 800a64c:	f040 865f 	bne.w	800b30e <WiFi_Conn_ND+0x189a>
				{
					ConectarTCP(b);
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f7fb ffed 	bl	8006630 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a65c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2200      	movs	r2, #0
 800a664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a670:	f000 be4d 	b.w	800b30e <WiFi_Conn_ND+0x189a>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f7fb ff57 	bl	8006528 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a680:	2b04      	cmp	r3, #4
 800a682:	d112      	bne.n	800a6aa <WiFi_Conn_ND+0xc36>
					{
						Cambiar_CWMODE(b);
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f7fb ff65 	bl	8006554 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2264      	movs	r2, #100	; 0x64
 800a68e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6b0:	2b0a      	cmp	r3, #10
 800a6b2:	d004      	beq.n	800a6be <WiFi_Conn_ND+0xc4a>
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ba:	2b0d      	cmp	r3, #13
 800a6bc:	d10e      	bne.n	800a6dc <WiFi_Conn_ND+0xc68>
					{
						ConectarWIFI(b);
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f7fb ff5e 	bl	8006580 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	22c8      	movs	r2, #200	; 0xc8
 800a6c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d004      	beq.n	800a6f0 <WiFi_Conn_ND+0xc7c>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ec:	2b10      	cmp	r3, #16
 800a6ee:	d10f      	bne.n	800a710 <WiFi_Conn_ND+0xc9c>
					{
						ConectarTCP(b);
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f7fb ff9d 	bl	8006630 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a6fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a716:	2b0e      	cmp	r3, #14
 800a718:	d005      	beq.n	800a726 <WiFi_Conn_ND+0xcb2>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a720:	2b0f      	cmp	r3, #15
 800a722:	f040 85f6 	bne.w	800b312 <WiFi_Conn_ND+0x189e>
					{
						if(b->_automatizacion >= WF_SEND )
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	f240 85f0 	bls.w	800b312 <WiFi_Conn_ND+0x189e>
						{
							EnviarDatos(b);
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f7fb ffbe 	bl	80066b4 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a73e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2200      	movs	r2, #0
 800a746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800a752:	f000 bdde 	b.w	800b312 <WiFi_Conn_ND+0x189e>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a75c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a760:	d054      	beq.n	800a80c <WiFi_Conn_ND+0xd98>
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a768:	2b02      	cmp	r3, #2
 800a76a:	d04f      	beq.n	800a80c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_wifi_disconnect)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a772:	2b0a      	cmp	r3, #10
 800a774:	d04a      	beq.n	800a80c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_desconectado)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a77c:	2b10      	cmp	r3, #16
 800a77e:	d045      	beq.n	800a80c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_snd_err)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a786:	2b11      	cmp	r3, #17
 800a788:	d040      	beq.n	800a80c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_ok_to_send)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a790:	2b14      	cmp	r3, #20
 800a792:	d03b      	beq.n	800a80c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a79a:	2b12      	cmp	r3, #18
 800a79c:	d036      	beq.n	800a80c <WiFi_Conn_ND+0xd98>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d907      	bls.n	800a7b8 <WiFi_Conn_ND+0xd44>
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d002      	beq.n	800a7b8 <WiFi_Conn_ND+0xd44>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f7fb ff7e 	bl	80066b4 <EnviarDatos>
							b->_data2SND[9]=0x00;
							b->_data2SND[10]=0x00;
							b->_data2SND[11]=0x0A;
							b->_n_D2SND=12;*/
					}
						if(b->_enviaruart==1)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d124      	bne.n	800a80c <WiFi_Conn_ND+0xd98>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f7fc f856 	bl	8006874 <AT_ESP8266_ND>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d109      	bne.n	800a7f6 <WiFi_Conn_ND+0xd82>
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	f7f6 fe47 	bl	8001484 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a802:	b29a      	uxth	r2, r3
 800a804:	2364      	movs	r3, #100	; 0x64
 800a806:	68b8      	ldr	r0, [r7, #8]
 800a808:	f7fa fe00 	bl	800540c <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a812:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a816:	d13b      	bne.n	800a890 <WiFi_Conn_ND+0xe1c>
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d136      	bne.n	800a890 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_error)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d031      	beq.n	800a890 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_wifi_disconnect)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a832:	2b0a      	cmp	r3, #10
 800a834:	d02c      	beq.n	800a890 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_desconectado)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a83c:	2b10      	cmp	r3, #16
 800a83e:	d027      	beq.n	800a890 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_snd_err)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a846:	2b11      	cmp	r3, #17
 800a848:	d022      	beq.n	800a890 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_enviado_error))
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a850:	2b12      	cmp	r3, #18
 800a852:	d01d      	beq.n	800a890 <WiFi_Conn_ND+0xe1c>
							{
								b->_enviaruart=0;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2200      	movs	r2, #0
 800a858:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a862:	2b01      	cmp	r3, #1
 800a864:	d109      	bne.n	800a87a <WiFi_Conn_ND+0xe06>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a872:	4619      	mov	r1, r3
 800a874:	4610      	mov	r0, r2
 800a876:	f7f6 fe05 	bl	8001484 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a886:	b29a      	uxth	r2, r3
 800a888:	2364      	movs	r3, #100	; 0x64
 800a88a:	68b8      	ldr	r0, [r7, #8]
 800a88c:	f7fa fdbe 	bl	800540c <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a896:	2b13      	cmp	r3, #19
 800a898:	d104      	bne.n	800a8a4 <WiFi_Conn_ND+0xe30>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a8a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d014      	beq.n	800a8d8 <WiFi_Conn_ND+0xe64>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b4:	2b0a      	cmp	r3, #10
 800a8b6:	d00f      	beq.n	800a8d8 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_desconectado)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8be:	2b10      	cmp	r3, #16
 800a8c0:	d00a      	beq.n	800a8d8 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_snd_err)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8c8:	2b11      	cmp	r3, #17
 800a8ca:	d005      	beq.n	800a8d8 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_enviado_error))
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8d2:	2b12      	cmp	r3, #18
 800a8d4:	f040 851f 	bne.w	800b316 <WiFi_Conn_ND+0x18a2>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a8de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800a8e2:	f000 bd18 	b.w	800b316 <WiFi_Conn_ND+0x18a2>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f7fb fe1e 	bl	8006528 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f2:	2b04      	cmp	r3, #4
 800a8f4:	d112      	bne.n	800a91c <WiFi_Conn_ND+0xea8>
				{
					Cambiar_CWMODE(b);
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f7fb fe2c 	bl	8006554 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2264      	movs	r2, #100	; 0x64
 800a900:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2200      	movs	r2, #0
 800a910:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a922:	2b0a      	cmp	r3, #10
 800a924:	d004      	beq.n	800a930 <WiFi_Conn_ND+0xebc>
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a92c:	2b0d      	cmp	r3, #13
 800a92e:	d10e      	bne.n	800a94e <WiFi_Conn_ND+0xeda>
				{
					ConectarWIFI(b);
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f7fb fe25 	bl	8006580 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	22c8      	movs	r2, #200	; 0xc8
 800a93a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a954:	2b0c      	cmp	r3, #12
 800a956:	d10f      	bne.n	800a978 <WiFi_Conn_ND+0xf04>
				{
					ConectarTCP(b);
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f7fb fe69 	bl	8006630 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a964:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d00f      	beq.n	800a9a2 <WiFi_Conn_ND+0xf2e>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a988:	2b10      	cmp	r3, #16
 800a98a:	d00a      	beq.n	800a9a2 <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_snd_err)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a992:	2b11      	cmp	r3, #17
 800a994:	d005      	beq.n	800a9a2 <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a99c:	2b12      	cmp	r3, #18
 800a99e:	f040 84bc 	bne.w	800b31a <WiFi_Conn_ND+0x18a6>
				{
					ConectarTCP(b);
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f7fb fe44 	bl	8006630 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a9ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a9c2:	f000 bcaa 	b.w	800b31a <WiFi_Conn_ND+0x18a6>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f7fb fdae 	bl	8006528 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9d2:	2b04      	cmp	r3, #4
 800a9d4:	d112      	bne.n	800a9fc <WiFi_Conn_ND+0xf88>
					{
						Cambiar_CWMODE(b);
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	f7fb fdbc 	bl	8006554 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2264      	movs	r2, #100	; 0x64
 800a9e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa02:	2b0a      	cmp	r3, #10
 800aa04:	d004      	beq.n	800aa10 <WiFi_Conn_ND+0xf9c>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa0c:	2b0d      	cmp	r3, #13
 800aa0e:	d10e      	bne.n	800aa2e <WiFi_Conn_ND+0xfba>
					{
						ConectarWIFI(b);
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f7fb fdb5 	bl	8006580 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	22c8      	movs	r2, #200	; 0xc8
 800aa1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	d00e      	beq.n	800aa56 <WiFi_Conn_ND+0xfe2>
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa3e:	2b0b      	cmp	r3, #11
 800aa40:	d009      	beq.n	800aa56 <WiFi_Conn_ND+0xfe2>
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa48:	2b0c      	cmp	r3, #12
 800aa4a:	d004      	beq.n	800aa56 <WiFi_Conn_ND+0xfe2>
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa52:	2b10      	cmp	r3, #16
 800aa54:	d10f      	bne.n	800aa76 <WiFi_Conn_ND+0x1002>
					{
						ConectarTCP(b);
 800aa56:	68f8      	ldr	r0, [r7, #12]
 800aa58:	f7fb fdea 	bl	8006630 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aa62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2200      	movs	r2, #0
 800aa72:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800aa76:	20c8      	movs	r0, #200	; 0xc8
 800aa78:	f7f8 f814 	bl	8002aa4 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	d916      	bls.n	800aab4 <WiFi_Conn_ND+0x1040>
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d011      	beq.n	800aab4 <WiFi_Conn_ND+0x1040>
					{
							EnviarDatos(b);
 800aa90:	68f8      	ldr	r0, [r7, #12]
 800aa92:	f7fb fe0f 	bl	80066b4 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800aa9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800aab0:	f000 bc46 	b.w	800b340 <WiFi_Conn_ND+0x18cc>
							b->_estado_conexion=TCP_CONN_OK;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f240 2261 	movw	r2, #609	; 0x261
 800aaba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800aace:	f000 bc37 	b.w	800b340 <WiFi_Conn_ND+0x18cc>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aad8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800aadc:	d045      	beq.n	800ab6a <WiFi_Conn_ND+0x10f6>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d040      	beq.n	800ab6a <WiFi_Conn_ND+0x10f6>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaee:	2b0a      	cmp	r3, #10
 800aaf0:	d03b      	beq.n	800ab6a <WiFi_Conn_ND+0x10f6>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaf8:	2b15      	cmp	r3, #21
 800aafa:	d036      	beq.n	800ab6a <WiFi_Conn_ND+0x10f6>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab02:	2b16      	cmp	r3, #22
 800ab04:	d031      	beq.n	800ab6a <WiFi_Conn_ND+0x10f6>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab0c:	2b17      	cmp	r3, #23
 800ab0e:	d02c      	beq.n	800ab6a <WiFi_Conn_ND+0x10f6>
							{
								CrearServidorTCP(b);
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f7fb fda3 	bl	800665c <CrearServidorTCP>
									if(b->_enviaruart==1)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d124      	bne.n	800ab6a <WiFi_Conn_ND+0x10f6>
										{
											b->_estado=AT_ESP8266_ND(b);
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f7fb fea7 	bl	8006874 <AT_ESP8266_ND>
 800ab26:	4602      	mov	r2, r0
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d109      	bne.n	800ab54 <WiFi_Conn_ND+0x10e0>
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	4610      	mov	r0, r2
 800ab50:	f7f6 fc98 	bl	8001484 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	2364      	movs	r3, #100	; 0x64
 800ab64:	68b8      	ldr	r0, [r7, #8]
 800ab66:	f7fa fc51 	bl	800540c <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab70:	2b15      	cmp	r3, #21
 800ab72:	d004      	beq.n	800ab7e <WiFi_Conn_ND+0x110a>
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab7a:	2b17      	cmp	r3, #23
 800ab7c:	d104      	bne.n	800ab88 <WiFi_Conn_ND+0x1114>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f240 3229 	movw	r2, #809	; 0x329
 800ab84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab8e:	2b16      	cmp	r3, #22
 800ab90:	f040 83c5 	bne.w	800b31e <WiFi_Conn_ND+0x18aa>
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f240 3225 	movw	r2, #805	; 0x325
 800ab9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800ab9e:	e3be      	b.n	800b31e <WiFi_Conn_ND+0x18aa>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f7fb fcc1 	bl	8006528 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abac:	2b04      	cmp	r3, #4
 800abae:	d112      	bne.n	800abd6 <WiFi_Conn_ND+0x1162>
							{
								Cambiar_CWMODE(b);
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	f7fb fccf 	bl	8006554 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2264      	movs	r2, #100	; 0x64
 800abba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2200      	movs	r2, #0
 800abca:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abdc:	2b0a      	cmp	r3, #10
 800abde:	d004      	beq.n	800abea <WiFi_Conn_ND+0x1176>
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abe6:	2b0d      	cmp	r3, #13
 800abe8:	d10e      	bne.n	800ac08 <WiFi_Conn_ND+0x1194>
							{
								ConectarWIFI(b);
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	f7fb fcc8 	bl	8006580 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	22c8      	movs	r2, #200	; 0xc8
 800abf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d005      	beq.n	800ac1e <WiFi_Conn_ND+0x11aa>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac18:	2b10      	cmp	r3, #16
 800ac1a:	f040 8382 	bne.w	800b322 <WiFi_Conn_ND+0x18ae>
							{
								ConectarTCP(b);
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f7fb fd06 	bl	8006630 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ac2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800ac3e:	e370      	b.n	800b322 <WiFi_Conn_ND+0x18ae>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f7fb fc71 	bl	8006528 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4c:	2b04      	cmp	r3, #4
 800ac4e:	d112      	bne.n	800ac76 <WiFi_Conn_ND+0x1202>
							{
								Cambiar_CWMODE(b);
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f7fb fc7f 	bl	8006554 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2264      	movs	r2, #100	; 0x64
 800ac5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac7c:	2b0a      	cmp	r3, #10
 800ac7e:	d004      	beq.n	800ac8a <WiFi_Conn_ND+0x1216>
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac86:	2b0d      	cmp	r3, #13
 800ac88:	d10e      	bne.n	800aca8 <WiFi_Conn_ND+0x1234>
							{
								ConectarWIFI(b);
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f7fb fc78 	bl	8006580 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	22c8      	movs	r2, #200	; 0xc8
 800ac94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acae:	2b02      	cmp	r3, #2
 800acb0:	d005      	beq.n	800acbe <WiFi_Conn_ND+0x124a>
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acb8:	2b10      	cmp	r3, #16
 800acba:	f040 8334 	bne.w	800b326 <WiFi_Conn_ND+0x18b2>
							{
								ConectarTCP(b);
 800acbe:	68f8      	ldr	r0, [r7, #12]
 800acc0:	f7fb fcb6 	bl	8006630 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800acca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2200      	movs	r2, #0
 800acda:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800acde:	e322      	b.n	800b326 <WiFi_Conn_ND+0x18b2>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f7fb fc21 	bl	8006528 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acec:	2b04      	cmp	r3, #4
 800acee:	d112      	bne.n	800ad16 <WiFi_Conn_ND+0x12a2>
							{
								Cambiar_CWMODE(b);
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f7fb fc2f 	bl	8006554 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2264      	movs	r2, #100	; 0x64
 800acfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad1c:	2b0a      	cmp	r3, #10
 800ad1e:	d004      	beq.n	800ad2a <WiFi_Conn_ND+0x12b6>
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad26:	2b0d      	cmp	r3, #13
 800ad28:	d10e      	bne.n	800ad48 <WiFi_Conn_ND+0x12d4>
							{
								ConectarWIFI(b);
 800ad2a:	68f8      	ldr	r0, [r7, #12]
 800ad2c:	f7fb fc28 	bl	8006580 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	22c8      	movs	r2, #200	; 0xc8
 800ad34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	d005      	beq.n	800ad5e <WiFi_Conn_ND+0x12ea>
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad58:	2b10      	cmp	r3, #16
 800ad5a:	f040 82e6 	bne.w	800b32a <WiFi_Conn_ND+0x18b6>
							{
								ConectarTCP(b);
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	f7fb fc66 	bl	8006630 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ad6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800ad7e:	e2d4      	b.n	800b32a <WiFi_Conn_ND+0x18b6>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f7fb fbd1 	bl	8006528 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad8c:	2b04      	cmp	r3, #4
 800ad8e:	d112      	bne.n	800adb6 <WiFi_Conn_ND+0x1342>
							{
								Cambiar_CWMODE(b);
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f7fb fbdf 	bl	8006554 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2264      	movs	r2, #100	; 0x64
 800ad9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adbc:	2b0a      	cmp	r3, #10
 800adbe:	d004      	beq.n	800adca <WiFi_Conn_ND+0x1356>
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adc6:	2b0d      	cmp	r3, #13
 800adc8:	d10e      	bne.n	800ade8 <WiFi_Conn_ND+0x1374>
							{
								ConectarWIFI(b);
 800adca:	68f8      	ldr	r0, [r7, #12]
 800adcc:	f7fb fbd8 	bl	8006580 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	22c8      	movs	r2, #200	; 0xc8
 800add4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2200      	movs	r2, #0
 800addc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d005      	beq.n	800adfe <WiFi_Conn_ND+0x138a>
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adf8:	2b10      	cmp	r3, #16
 800adfa:	f040 8298 	bne.w	800b32e <WiFi_Conn_ND+0x18ba>
							{
								ConectarTCP(b);
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f7fb fc16 	bl	8006630 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ae0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2200      	movs	r2, #0
 800ae12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800ae1e:	e286      	b.n	800b32e <WiFi_Conn_ND+0x18ba>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800ae20:	68f8      	ldr	r0, [r7, #12]
 800ae22:	f7fb fb81 	bl	8006528 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae34:	2b04      	cmp	r3, #4
 800ae36:	d112      	bne.n	800ae5e <WiFi_Conn_ND+0x13ea>
								{
									Cambiar_CWMODE(b);
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f7fb fb8b 	bl	8006554 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2264      	movs	r2, #100	; 0x64
 800ae42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae64:	2b0a      	cmp	r3, #10
 800ae66:	d004      	beq.n	800ae72 <WiFi_Conn_ND+0x13fe>
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae6e:	2b0d      	cmp	r3, #13
 800ae70:	d10e      	bne.n	800ae90 <WiFi_Conn_ND+0x141c>
								{
									ConectarWIFI(b);
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f7fb fb84 	bl	8006580 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	22c8      	movs	r2, #200	; 0xc8
 800ae7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2200      	movs	r2, #0
 800ae84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d004      	beq.n	800aea4 <WiFi_Conn_ND+0x1430>
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aea0:	2b10      	cmp	r3, #16
 800aea2:	d10f      	bne.n	800aec4 <WiFi_Conn_ND+0x1450>
								{
									ConectarTCP(b);
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	f7fb fbc3 	bl	8006630 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aeb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	f040 8231 	bne.w	800b332 <WiFi_Conn_ND+0x18be>
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f000 822b 	beq.w	800b332 <WiFi_Conn_ND+0x18be>
								{
									EnviarDatosSRVR(b);
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f7fb fbd3 	bl	8006688 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f44f 7261 	mov.w	r2, #900	; 0x384
 800aee8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800aefc:	e219      	b.n	800b332 <WiFi_Conn_ND+0x18be>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af04:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800af08:	d063      	beq.n	800afd2 <WiFi_Conn_ND+0x155e>
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af10:	2b02      	cmp	r3, #2
 800af12:	d05e      	beq.n	800afd2 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_disconnect)&&
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800af1a:	2b0a      	cmp	r3, #10
 800af1c:	d059      	beq.n	800afd2 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_connected)&&
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800af24:	2b0b      	cmp	r3, #11
 800af26:	d054      	beq.n	800afd2 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_gotip)&&
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800af2e:	2b0c      	cmp	r3, #12
 800af30:	d04f      	beq.n	800afd2 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_desconectado)&&
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800af38:	2b10      	cmp	r3, #16
 800af3a:	d04a      	beq.n	800afd2 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_snd_err)&&
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800af42:	2b11      	cmp	r3, #17
 800af44:	d045      	beq.n	800afd2 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800af4c:	2b12      	cmp	r3, #18
 800af4e:	d040      	beq.n	800afd2 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800af56:	2b13      	cmp	r3, #19
 800af58:	d03b      	beq.n	800afd2 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800af60:	2b16      	cmp	r3, #22
 800af62:	d036      	beq.n	800afd2 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af6a:	2b19      	cmp	r3, #25
 800af6c:	d031      	beq.n	800afd2 <WiFi_Conn_ND+0x155e>
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800af74:	2b00      	cmp	r3, #0
 800af76:	d02c      	beq.n	800afd2 <WiFi_Conn_ND+0x155e>
								{
								EnviarDatosSRVR(b);
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f7fb fb85 	bl	8006688 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800af84:	2b01      	cmp	r3, #1
 800af86:	d124      	bne.n	800afd2 <WiFi_Conn_ND+0x155e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800af88:	68f8      	ldr	r0, [r7, #12]
 800af8a:	f7fb fc73 	bl	8006874 <AT_ESP8266_ND>
 800af8e:	4602      	mov	r2, r0
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2200      	movs	r2, #0
 800af9a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d109      	bne.n	800afbc <WiFi_Conn_ND+0x1548>
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800afb4:	4619      	mov	r1, r3
 800afb6:	4610      	mov	r0, r2
 800afb8:	f7f6 fa64 	bl	8001484 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800afc8:	b29a      	uxth	r2, r3
 800afca:	2364      	movs	r3, #100	; 0x64
 800afcc:	68b8      	ldr	r0, [r7, #8]
 800afce:	f7fa fa1d 	bl	800540c <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afd8:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800afdc:	d154      	bne.n	800b088 <WiFi_Conn_ND+0x1614>
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d14f      	bne.n	800b088 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_error)&&
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d04a      	beq.n	800b088 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_disconnect)&&
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800aff8:	2b0a      	cmp	r3, #10
 800affa:	d045      	beq.n	800b088 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_connected)&&
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b002:	2b0b      	cmp	r3, #11
 800b004:	d040      	beq.n	800b088 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_gotip)&&
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b00c:	2b0c      	cmp	r3, #12
 800b00e:	d03b      	beq.n	800b088 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_desconectado)&&
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b016:	2b10      	cmp	r3, #16
 800b018:	d036      	beq.n	800b088 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_snd_err)&&
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b020:	2b11      	cmp	r3, #17
 800b022:	d031      	beq.n	800b088 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b02a:	2b12      	cmp	r3, #18
 800b02c:	d02c      	beq.n	800b088 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b034:	2b13      	cmp	r3, #19
 800b036:	d027      	beq.n	800b088 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b03e:	2b16      	cmp	r3, #22
 800b040:	d022      	beq.n	800b088 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b048:	2b19      	cmp	r3, #25
 800b04a:	d01d      	beq.n	800b088 <WiFi_Conn_ND+0x1614>
										{
											b->_enviaruart=0;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2200      	movs	r2, #0
 800b050:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d109      	bne.n	800b072 <WiFi_Conn_ND+0x15fe>
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b06a:	4619      	mov	r1, r3
 800b06c:	4610      	mov	r0, r2
 800b06e:	f7f6 fa09 	bl	8001484 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b07e:	b29a      	uxth	r2, r3
 800b080:	2364      	movs	r3, #100	; 0x64
 800b082:	68b8      	ldr	r0, [r7, #8]
 800b084:	f7fa f9c2 	bl	800540c <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b08e:	2b13      	cmp	r3, #19
 800b090:	d104      	bne.n	800b09c <WiFi_Conn_ND+0x1628>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f240 328d 	movw	r2, #909	; 0x38d
 800b098:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d02d      	beq.n	800b102 <WiFi_Conn_ND+0x168e>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ac:	2b04      	cmp	r3, #4
 800b0ae:	d028      	beq.n	800b102 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b0b6:	2b0a      	cmp	r3, #10
 800b0b8:	d023      	beq.n	800b102 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0c0:	2b0b      	cmp	r3, #11
 800b0c2:	d01e      	beq.n	800b102 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b0ca:	2b0c      	cmp	r3, #12
 800b0cc:	d019      	beq.n	800b102 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d4:	2b10      	cmp	r3, #16
 800b0d6:	d014      	beq.n	800b102 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b0de:	2b11      	cmp	r3, #17
 800b0e0:	d00f      	beq.n	800b102 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0e8:	2b12      	cmp	r3, #18
 800b0ea:	d00a      	beq.n	800b102 <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b0f2:	2b16      	cmp	r3, #22
 800b0f4:	d005      	beq.n	800b102 <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0fc:	2b19      	cmp	r3, #25
 800b0fe:	f040 811a 	bne.w	800b336 <WiFi_Conn_ND+0x18c2>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f240 3289 	movw	r2, #905	; 0x389
 800b108:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b10c:	e113      	b.n	800b336 <WiFi_Conn_ND+0x18c2>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b10e:	68f8      	ldr	r0, [r7, #12]
 800b110:	f7fb fa0a 	bl	8006528 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b11a:	2b04      	cmp	r3, #4
 800b11c:	d009      	beq.n	800b132 <WiFi_Conn_ND+0x16be>
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b124:	2b0b      	cmp	r3, #11
 800b126:	d004      	beq.n	800b132 <WiFi_Conn_ND+0x16be>
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b12e:	2b0c      	cmp	r3, #12
 800b130:	d112      	bne.n	800b158 <WiFi_Conn_ND+0x16e4>
							{
								Cambiar_CWMODE(b);
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f7fb fa0e 	bl	8006554 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2264      	movs	r2, #100	; 0x64
 800b13c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2200      	movs	r2, #0
 800b144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b15e:	2b0a      	cmp	r3, #10
 800b160:	d004      	beq.n	800b16c <WiFi_Conn_ND+0x16f8>
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b168:	2b0d      	cmp	r3, #13
 800b16a:	d10e      	bne.n	800b18a <WiFi_Conn_ND+0x1716>
							{
								ConectarWIFI(b);
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f7fb fa07 	bl	8006580 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	22c8      	movs	r2, #200	; 0xc8
 800b176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2200      	movs	r2, #0
 800b186:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b190:	2b16      	cmp	r3, #22
 800b192:	d10c      	bne.n	800b1ae <WiFi_Conn_ND+0x173a>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f240 3225 	movw	r2, #805	; 0x325
 800b19a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1b4:	2b18      	cmp	r3, #24
 800b1b6:	d10c      	bne.n	800b1d2 <WiFi_Conn_ND+0x175e>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f240 3229 	movw	r2, #809	; 0x329
 800b1be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1d8:	2b19      	cmp	r3, #25
 800b1da:	d008      	beq.n	800b1ee <WiFi_Conn_ND+0x177a>
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1e2:	2b11      	cmp	r3, #17
 800b1e4:	d003      	beq.n	800b1ee <WiFi_Conn_ND+0x177a>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2212      	movs	r2, #18
 800b1ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	f040 80a0 	bne.w	800b33a <WiFi_Conn_ND+0x18c6>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b200:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2200      	movs	r2, #0
 800b208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2200      	movs	r2, #0
 800b210:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800b214:	e091      	b.n	800b33a <WiFi_Conn_ND+0x18c6>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	f7fb f986 	bl	8006528 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b222:	2b04      	cmp	r3, #4
 800b224:	d009      	beq.n	800b23a <WiFi_Conn_ND+0x17c6>
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b22c:	2b0b      	cmp	r3, #11
 800b22e:	d004      	beq.n	800b23a <WiFi_Conn_ND+0x17c6>
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b236:	2b0c      	cmp	r3, #12
 800b238:	d112      	bne.n	800b260 <WiFi_Conn_ND+0x17ec>
								{
									Cambiar_CWMODE(b);
 800b23a:	68f8      	ldr	r0, [r7, #12]
 800b23c:	f7fb f98a 	bl	8006554 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2264      	movs	r2, #100	; 0x64
 800b244:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b266:	2b0a      	cmp	r3, #10
 800b268:	d004      	beq.n	800b274 <WiFi_Conn_ND+0x1800>
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b270:	2b0d      	cmp	r3, #13
 800b272:	d10e      	bne.n	800b292 <WiFi_Conn_ND+0x181e>
								{
									ConectarWIFI(b);
 800b274:	68f8      	ldr	r0, [r7, #12]
 800b276:	f7fb f983 	bl	8006580 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	22c8      	movs	r2, #200	; 0xc8
 800b27e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2200      	movs	r2, #0
 800b286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d004      	beq.n	800b2a6 <WiFi_Conn_ND+0x1832>
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d14b      	bne.n	800b33e <WiFi_Conn_ND+0x18ca>
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d046      	beq.n	800b33e <WiFi_Conn_ND+0x18ca>
								{
									EnviarDatosSRVR(b);
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f7fb f9e9 	bl	8006688 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b2bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b2e0:	e02d      	b.n	800b33e <WiFi_Conn_ND+0x18ca>
			break;
 800b2e2:	bf00      	nop
 800b2e4:	e02c      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
			break;
 800b2e6:	bf00      	nop
 800b2e8:	e02a      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
			break;
 800b2ea:	bf00      	nop
 800b2ec:	e028      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
			break;
 800b2ee:	bf00      	nop
 800b2f0:	e026      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
			break;
 800b2f2:	bf00      	nop
 800b2f4:	e024      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
			break;
 800b2f6:	bf00      	nop
 800b2f8:	e022      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
			break;
 800b2fa:	bf00      	nop
 800b2fc:	e020      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
			break;
 800b2fe:	bf00      	nop
 800b300:	e01e      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
			break;
 800b302:	bf00      	nop
 800b304:	e01c      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
			break;
 800b306:	bf00      	nop
 800b308:	e01a      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
			break;
 800b30a:	bf00      	nop
 800b30c:	e018      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
			break;
 800b30e:	bf00      	nop
 800b310:	e016      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
			break;
 800b312:	bf00      	nop
 800b314:	e014      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
			break;
 800b316:	bf00      	nop
 800b318:	e012      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
			break;
 800b31a:	bf00      	nop
 800b31c:	e010      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
						break;
 800b31e:	bf00      	nop
 800b320:	e00e      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
						break;
 800b322:	bf00      	nop
 800b324:	e00c      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
						break;
 800b326:	bf00      	nop
 800b328:	e00a      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
						break;
 800b32a:	bf00      	nop
 800b32c:	e008      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
						break;
 800b32e:	bf00      	nop
 800b330:	e006      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
						break;
 800b332:	bf00      	nop
 800b334:	e004      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
						break;
 800b336:	bf00      	nop
 800b338:	e002      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
						break;
 800b33a:	bf00      	nop
 800b33c:	e000      	b.n	800b340 <WiFi_Conn_ND+0x18cc>
						break;
 800b33e:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b346:	4618      	mov	r0, r3
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop

0800b350 <httpPOST2>:
			return 0;
		}
}

httpPOST2(char * endpoint, char* server_ip, char * port,  uint16_t * vect_data, int cdad, uint16_t devId, char  * post, char * body, int max_char)
{
 800b350:	b5b0      	push	{r4, r5, r7, lr}
 800b352:	b08c      	sub	sp, #48	; 0x30
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
 800b35c:	603b      	str	r3, [r7, #0]
	post[0]='\0';
 800b35e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b360:	2200      	movs	r2, #0
 800b362:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b366:	2200      	movs	r2, #0
 800b368:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b36a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b36c:	f7f4 ff42 	bl	80001f4 <strlen>
 800b370:	4603      	mov	r3, r0
 800b372:	461a      	mov	r2, r3
 800b374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b376:	4413      	add	r3, r2
 800b378:	4a99      	ldr	r2, [pc, #612]	; (800b5e0 <httpPOST2+0x290>)
 800b37a:	6810      	ldr	r0, [r2, #0]
 800b37c:	6018      	str	r0, [r3, #0]
 800b37e:	8892      	ldrh	r2, [r2, #4]
 800b380:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f7f4 ff36 	bl	80001f4 <strlen>
 800b388:	4603      	mov	r3, r0
 800b38a:	461a      	mov	r2, r3
 800b38c:	68f9      	ldr	r1, [r7, #12]
 800b38e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b390:	f003 fddd 	bl	800ef4e <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b394:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b396:	f7f4 ff2d 	bl	80001f4 <strlen>
 800b39a:	4603      	mov	r3, r0
 800b39c:	461a      	mov	r2, r3
 800b39e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3a0:	4413      	add	r3, r2
 800b3a2:	4990      	ldr	r1, [pc, #576]	; (800b5e4 <httpPOST2+0x294>)
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	cb03      	ldmia	r3!, {r0, r1}
 800b3aa:	6010      	str	r0, [r2, #0]
 800b3ac:	6051      	str	r1, [r2, #4]
 800b3ae:	8819      	ldrh	r1, [r3, #0]
 800b3b0:	789b      	ldrb	r3, [r3, #2]
 800b3b2:	8111      	strh	r1, [r2, #8]
 800b3b4:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b3b6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b3b8:	f7f4 ff1c 	bl	80001f4 <strlen>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	461a      	mov	r2, r3
 800b3c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3c2:	4413      	add	r3, r2
 800b3c4:	4a88      	ldr	r2, [pc, #544]	; (800b5e8 <httpPOST2+0x298>)
 800b3c6:	8811      	ldrh	r1, [r2, #0]
 800b3c8:	7892      	ldrb	r2, [r2, #2]
 800b3ca:	8019      	strh	r1, [r3, #0]
 800b3cc:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b3ce:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b3d0:	f7f4 ff10 	bl	80001f4 <strlen>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3da:	4413      	add	r3, r2
 800b3dc:	4a83      	ldr	r2, [pc, #524]	; (800b5ec <httpPOST2+0x29c>)
 800b3de:	6810      	ldr	r0, [r2, #0]
 800b3e0:	6018      	str	r0, [r3, #0]
 800b3e2:	8891      	ldrh	r1, [r2, #4]
 800b3e4:	7992      	ldrb	r2, [r2, #6]
 800b3e6:	8099      	strh	r1, [r3, #4]
 800b3e8:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b3ea:	68b8      	ldr	r0, [r7, #8]
 800b3ec:	f7f4 ff02 	bl	80001f4 <strlen>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	68b9      	ldr	r1, [r7, #8]
 800b3f6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b3f8:	f003 fda9 	bl	800ef4e <strncat>
	strncat(post,":",1);
 800b3fc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b3fe:	f7f4 fef9 	bl	80001f4 <strlen>
 800b402:	4603      	mov	r3, r0
 800b404:	461a      	mov	r2, r3
 800b406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b408:	4413      	add	r3, r2
 800b40a:	4979      	ldr	r1, [pc, #484]	; (800b5f0 <httpPOST2+0x2a0>)
 800b40c:	461a      	mov	r2, r3
 800b40e:	460b      	mov	r3, r1
 800b410:	881b      	ldrh	r3, [r3, #0]
 800b412:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7f4 feed 	bl	80001f4 <strlen>
 800b41a:	4603      	mov	r3, r0
 800b41c:	461a      	mov	r2, r3
 800b41e:	6879      	ldr	r1, [r7, #4]
 800b420:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b422:	f003 fd94 	bl	800ef4e <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b426:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b428:	f7f4 fee4 	bl	80001f4 <strlen>
 800b42c:	4603      	mov	r3, r0
 800b42e:	461a      	mov	r2, r3
 800b430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b432:	4413      	add	r3, r2
 800b434:	4a6c      	ldr	r2, [pc, #432]	; (800b5e8 <httpPOST2+0x298>)
 800b436:	8811      	ldrh	r1, [r2, #0]
 800b438:	7892      	ldrb	r2, [r2, #2]
 800b43a:	8019      	strh	r1, [r3, #0]
 800b43c:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b43e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b440:	f7f4 fed8 	bl	80001f4 <strlen>
 800b444:	4603      	mov	r3, r0
 800b446:	461a      	mov	r2, r3
 800b448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b44a:	4413      	add	r3, r2
 800b44c:	4a69      	ldr	r2, [pc, #420]	; (800b5f4 <httpPOST2+0x2a4>)
 800b44e:	461d      	mov	r5, r3
 800b450:	4614      	mov	r4, r2
 800b452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b454:	6028      	str	r0, [r5, #0]
 800b456:	6069      	str	r1, [r5, #4]
 800b458:	60aa      	str	r2, [r5, #8]
 800b45a:	60eb      	str	r3, [r5, #12]
 800b45c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b45e:	6128      	str	r0, [r5, #16]
 800b460:	6169      	str	r1, [r5, #20]
 800b462:	61aa      	str	r2, [r5, #24]
 800b464:	8823      	ldrh	r3, [r4, #0]
 800b466:	78a2      	ldrb	r2, [r4, #2]
 800b468:	83ab      	strh	r3, [r5, #28]
 800b46a:	4613      	mov	r3, r2
 800b46c:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b46e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b470:	f7f4 fec0 	bl	80001f4 <strlen>
 800b474:	4603      	mov	r3, r0
 800b476:	461a      	mov	r2, r3
 800b478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b47a:	4413      	add	r3, r2
 800b47c:	4a5a      	ldr	r2, [pc, #360]	; (800b5e8 <httpPOST2+0x298>)
 800b47e:	8811      	ldrh	r1, [r2, #0]
 800b480:	7892      	ldrb	r2, [r2, #2]
 800b482:	8019      	strh	r1, [r3, #0]
 800b484:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b486:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b488:	f7f4 feb4 	bl	80001f4 <strlen>
 800b48c:	4603      	mov	r3, r0
 800b48e:	461a      	mov	r2, r3
 800b490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b492:	4413      	add	r3, r2
 800b494:	4a58      	ldr	r2, [pc, #352]	; (800b5f8 <httpPOST2+0x2a8>)
 800b496:	461c      	mov	r4, r3
 800b498:	4615      	mov	r5, r2
 800b49a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b49c:	6020      	str	r0, [r4, #0]
 800b49e:	6061      	str	r1, [r4, #4]
 800b4a0:	60a2      	str	r2, [r4, #8]
 800b4a2:	60e3      	str	r3, [r4, #12]

	char _devId[8];
	_devId[0]='\0';
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	INTOA(devId, _devId);
 800b4aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b4ae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b4b2:	4611      	mov	r1, r2
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f003 fac1 	bl	800ea3c <INTOA>

	for (int i=0; i < cdad;i++)
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4be:	e031      	b.n	800b524 <httpPOST2+0x1d4>
	{
		char d[8];
		FTOA(vect_data[i],d,1);
 800b4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c2:	005b      	lsls	r3, r3, #1
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	881b      	ldrh	r3, [r3, #0]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f107 0314 	add.w	r3, r7, #20
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	f003 fae6 	bl	800eaa4 <FTOA>
		strncat(body,data[i],strlen(data[i]));
 800b4d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4da:	4613      	mov	r3, r2
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	4413      	add	r3, r2
 800b4e0:	005b      	lsls	r3, r3, #1
 800b4e2:	4a46      	ldr	r2, [pc, #280]	; (800b5fc <httpPOST2+0x2ac>)
 800b4e4:	189c      	adds	r4, r3, r2
 800b4e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4e8:	4613      	mov	r3, r2
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	4413      	add	r3, r2
 800b4ee:	005b      	lsls	r3, r3, #1
 800b4f0:	4a42      	ldr	r2, [pc, #264]	; (800b5fc <httpPOST2+0x2ac>)
 800b4f2:	4413      	add	r3, r2
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7f4 fe7d 	bl	80001f4 <strlen>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	4621      	mov	r1, r4
 800b500:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b502:	f003 fd24 	bl	800ef4e <strncat>
		strncat(body,d,strlen(d));
 800b506:	f107 0314 	add.w	r3, r7, #20
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7f4 fe72 	bl	80001f4 <strlen>
 800b510:	4602      	mov	r2, r0
 800b512:	f107 0314 	add.w	r3, r7, #20
 800b516:	4619      	mov	r1, r3
 800b518:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b51a:	f003 fd18 	bl	800ef4e <strncat>
	for (int i=0; i < cdad;i++)
 800b51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b520:	3301      	adds	r3, #1
 800b522:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b528:	429a      	cmp	r2, r3
 800b52a:	dbc9      	blt.n	800b4c0 <httpPOST2+0x170>

	}
	// Conversión de datos recibido por ModBUS

	strncat(body,deviceId,strlen(deviceId));
 800b52c:	4834      	ldr	r0, [pc, #208]	; (800b600 <httpPOST2+0x2b0>)
 800b52e:	f7f4 fe61 	bl	80001f4 <strlen>
 800b532:	4603      	mov	r3, r0
 800b534:	461a      	mov	r2, r3
 800b536:	4932      	ldr	r1, [pc, #200]	; (800b600 <httpPOST2+0x2b0>)
 800b538:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b53a:	f003 fd08 	bl	800ef4e <strncat>
	strncat(body,_devId,strlen(_devId));
 800b53e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b542:	4618      	mov	r0, r3
 800b544:	f7f4 fe56 	bl	80001f4 <strlen>
 800b548:	4602      	mov	r2, r0
 800b54a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b54e:	4619      	mov	r1, r3
 800b550:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b552:	f003 fcfc 	bl	800ef4e <strncat>

	strncat(body,"}",strlen("}"));
 800b556:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b558:	f7f4 fe4c 	bl	80001f4 <strlen>
 800b55c:	4603      	mov	r3, r0
 800b55e:	461a      	mov	r2, r3
 800b560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b562:	4413      	add	r3, r2
 800b564:	4927      	ldr	r1, [pc, #156]	; (800b604 <httpPOST2+0x2b4>)
 800b566:	461a      	mov	r2, r3
 800b568:	460b      	mov	r3, r1
 800b56a:	881b      	ldrh	r3, [r3, #0]
 800b56c:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800b56e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b570:	f7f4 fe40 	bl	80001f4 <strlen>
 800b574:	4602      	mov	r2, r0
 800b576:	f107 031c 	add.w	r3, r7, #28
 800b57a:	4619      	mov	r1, r3
 800b57c:	4610      	mov	r0, r2
 800b57e:	f003 fa5d 	bl	800ea3c <INTOA>
	strncat(post,length,strlen(length));
 800b582:	f107 031c 	add.w	r3, r7, #28
 800b586:	4618      	mov	r0, r3
 800b588:	f7f4 fe34 	bl	80001f4 <strlen>
 800b58c:	4602      	mov	r2, r0
 800b58e:	f107 031c 	add.w	r3, r7, #28
 800b592:	4619      	mov	r1, r3
 800b594:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b596:	f003 fcda 	bl	800ef4e <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800b59a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b59c:	f7f4 fe2a 	bl	80001f4 <strlen>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5a6:	4413      	add	r3, r2
 800b5a8:	4a17      	ldr	r2, [pc, #92]	; (800b608 <httpPOST2+0x2b8>)
 800b5aa:	6810      	ldr	r0, [r2, #0]
 800b5ac:	6018      	str	r0, [r3, #0]
 800b5ae:	7912      	ldrb	r2, [r2, #4]
 800b5b0:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800b5b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b5b4:	f7f4 fe1e 	bl	80001f4 <strlen>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d20a      	bcs.n	800b5d6 <httpPOST2+0x286>
	{
		strncat(post,body,strlen(body));
 800b5c0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b5c2:	f7f4 fe17 	bl	80001f4 <strlen>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b5cc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b5ce:	f003 fcbe 	bl	800ef4e <strncat>
		return 1 ;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e000      	b.n	800b5d8 <httpPOST2+0x288>
	}
		else
		{
			return 0;
 800b5d6:	2300      	movs	r3, #0
		}
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3730      	adds	r7, #48	; 0x30
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bdb0      	pop	{r4, r5, r7, pc}
 800b5e0:	0801075c 	.word	0x0801075c
 800b5e4:	08010764 	.word	0x08010764
 800b5e8:	08010770 	.word	0x08010770
 800b5ec:	08010774 	.word	0x08010774
 800b5f0:	0801077c 	.word	0x0801077c
 800b5f4:	08010780 	.word	0x08010780
 800b5f8:	080107a0 	.word	0x080107a0
 800b5fc:	200000b0 	.word	0x200000b0
 800b600:	20000150 	.word	0x20000150
 800b604:	080107b0 	.word	0x080107b0
 800b608:	080107b4 	.word	0x080107b4

0800b60c <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800b60c:	b480      	push	{r7}
 800b60e:	b083      	sub	sp, #12
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2201      	movs	r2, #1
 800b618:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	705a      	strb	r2, [r3, #1]
	m->_timeout=5000;						//Timeout para la recepción de respuesta.
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f241 3288 	movw	r2, #5000	; 0x1388
 800b626:	805a      	strh	r2, [r3, #2]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2201      	movs	r2, #1
 800b62c:	715a      	strb	r2, [r3, #5]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2220      	movs	r2, #32
 800b632:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
	m->_Coils=0xF0F0AF5A;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4a1c      	ldr	r2, [pc, #112]	; (800b6ac <ModBUS_Config+0xa0>)
 800b63a:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	719a      	strb	r2, [r3, #6]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2220      	movs	r2, #32
 800b648:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
	m->_Inputs=0xA5FA0F0F;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	4a18      	ldr	r2, [pc, #96]	; (800b6b0 <ModBUS_Config+0xa4>)
 800b650:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	71da      	strb	r2, [r3, #7]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2210      	movs	r2, #16
 800b65e:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2201      	movs	r2, #1
 800b666:	721a      	strb	r2, [r3, #8]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2210      	movs	r2, #16
 800b66c:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2201      	movs	r2, #1
 800b674:	725a      	strb	r2, [r3, #9]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2220      	movs	r2, #32
 800b67a:	f883 2534 	strb.w	r2, [r3, #1332]	; 0x534

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2201      	movs	r2, #1
 800b682:	729a      	strb	r2, [r3, #10]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	72da      	strb	r2, [r3, #11]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2220      	movs	r2, #32
 800b68e:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	731a      	strb	r2, [r3, #12]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2220      	movs	r2, #32
 800b69c:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	f0f0af5a 	.word	0xf0f0af5a
 800b6b0:	a5fa0f0f 	.word	0xa5fa0f0f

0800b6b4 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	3305      	adds	r3, #5
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	3306      	adds	r3, #6
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d10b      	bne.n	800b6e4 <ModBUS_Check+0x30>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	3302      	adds	r3, #2
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	3303      	adds	r3, #3
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	4413      	add	r3, r2
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d101      	bne.n	800b6e4 <ModBUS_Check+0x30>
	{
		return(1);
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e000      	b.n	800b6e6 <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800b6e4:	2300      	movs	r3, #0
	}
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	370c      	adds	r7, #12
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr

0800b6f2 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800b6f2:	b480      	push	{r7}
 800b6f4:	b083      	sub	sp, #12
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 2194 	ldrb.w	r2, [r3, #404]	; 0x194
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	7b5b      	ldrb	r3, [r3, #13]
 800b704:	429a      	cmp	r2, r3
 800b706:	d11d      	bne.n	800b744 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f893 2195 	ldrb.w	r2, [r3, #405]	; 0x195
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	7b9b      	ldrb	r3, [r3, #14]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800b712:	429a      	cmp	r2, r3
 800b714:	d116      	bne.n	800b744 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	7bdb      	ldrb	r3, [r3, #15]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800b720:	429a      	cmp	r2, r3
 800b722:	d10f      	bne.n	800b744 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f893 2197 	ldrb.w	r2, [r3, #407]	; 0x197
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	7c1b      	ldrb	r3, [r3, #16]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800b72e:	429a      	cmp	r2, r3
 800b730:	d108      	bne.n	800b744 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f893 219b 	ldrb.w	r2, [r3, #411]	; 0x19b
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d101      	bne.n	800b744 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800b740:	2301      	movs	r3, #1
 800b742:	e000      	b.n	800b746 <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800b744:	2300      	movs	r3, #0
	}
}
 800b746:	4618      	mov	r0, r3
 800b748:	370c      	adds	r7, #12
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr

0800b752 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t a, uint16_t b)
{
 800b752:	b480      	push	{r7}
 800b754:	b085      	sub	sp, #20
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
 800b75a:	460b      	mov	r3, r1
 800b75c:	70fb      	strb	r3, [r7, #3]
 800b75e:	4613      	mov	r3, r2
 800b760:	803b      	strh	r3, [r7, #0]
	uint8_t c=0;
 800b762:	2300      	movs	r3, #0
 800b764:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800b76c:	78fa      	ldrb	r2, [r7, #3]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d901      	bls.n	800b776 <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800b772:	2301      	movs	r3, #1
 800b774:	e015      	b.n	800b7a2 <ModBUS_F03_Assign+0x50>
	}
	else
	{
		m2->_Holding_Registers[(a*2)+1]=b;
 800b776:	78fb      	ldrb	r3, [r7, #3]
 800b778:	005b      	lsls	r3, r3, #1
 800b77a:	3301      	adds	r3, #1
 800b77c:	883a      	ldrh	r2, [r7, #0]
 800b77e:	b2d1      	uxtb	r1, r2
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	4413      	add	r3, r2
 800b784:	460a      	mov	r2, r1
 800b786:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
		c=b>>8;
 800b78a:	883b      	ldrh	r3, [r7, #0]
 800b78c:	0a1b      	lsrs	r3, r3, #8
 800b78e:	b29b      	uxth	r3, r3
 800b790:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(a*2)]=c;
 800b792:	78fb      	ldrb	r3, [r7, #3]
 800b794:	005b      	lsls	r3, r3, #1
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	4413      	add	r3, r2
 800b79a:	7bfa      	ldrb	r2, [r7, #15]
 800b79c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		return(0);
 800b7a0:	2300      	movs	r3, #0
	}
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3714      	adds	r7, #20
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ac:	4770      	bx	lr

0800b7ae <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t a)
{
 800b7ae:	b480      	push	{r7}
 800b7b0:	b085      	sub	sp, #20
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800b7c8:	78fa      	ldrb	r2, [r7, #3]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d901      	bls.n	800b7d2 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	e015      	b.n	800b7fe <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(a*2)];
 800b7d2:	78fb      	ldrb	r3, [r7, #3]
 800b7d4:	005b      	lsls	r3, r3, #1
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	4413      	add	r3, r2
 800b7da:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b7de:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800b7e0:	89fb      	ldrh	r3, [r7, #14]
 800b7e2:	021b      	lsls	r3, r3, #8
 800b7e4:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(a*2)+1];
 800b7e6:	78fb      	ldrb	r3, [r7, #3]
 800b7e8:	005b      	lsls	r3, r3, #1
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b7f4:	b29a      	uxth	r2, r3
 800b7f6:	89fb      	ldrh	r3, [r7, #14]
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	81fb      	strh	r3, [r7, #14]

		/*m2->_Holding_Registers[(a*2)+1]=b;
		c=b>>8;
		m2->_Holding_Registers[(a*2)]=c;*/
		return(n);
 800b7fc:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3714      	adds	r7, #20
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800b80a:	b480      	push	{r7}
 800b80c:	b083      	sub	sp, #12
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
 800b812:	460b      	mov	r3, r1
 800b814:	807b      	strh	r3, [r7, #2]
 800b816:	4613      	mov	r3, r2
 800b818:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800b81a:	887b      	ldrh	r3, [r7, #2]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	bf14      	ite	ne
 800b820:	2301      	movne	r3, #1
 800b822:	2300      	moveq	r3, #0
 800b824:	b2db      	uxtb	r3, r3
 800b826:	461a      	mov	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
	addr&=0xF0;
 800b82e:	887b      	ldrh	r3, [r7, #2]
 800b830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b834:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800b836:	887b      	ldrh	r3, [r7, #2]
 800b838:	0a1b      	lsrs	r3, r3, #8
 800b83a:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800b83c:	887b      	ldrh	r3, [r7, #2]
 800b83e:	f003 030f 	and.w	r3, r3, #15
 800b842:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	m2->_MBUS_2SND[1]=0x00;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2200      	movs	r2, #0
 800b850:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	m2->_MBUS_2SND[2]=0x00;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
	m2->_MBUS_2SND[3]=0x00;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	m2->_MBUS_2SND[4]=0x00;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	m2->_MBUS_2SND[5]=0x06;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2206      	movs	r2, #6
 800b870:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
	m2->_MBUS_2SND[6]=m2->_address;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	781a      	ldrb	r2, [r3, #0]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
	m2->_MBUS_2SND[7]=0x03;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2203      	movs	r2, #3
 800b882:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
	m2->_MBUS_2SND[8]=addr;
 800b886:	887b      	ldrh	r3, [r7, #2]
 800b888:	b2da      	uxtb	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	m2->_MBUS_2SND[10]=0x00;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
	m2->_MBUS_2SND[11]=qty;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	787a      	ldrb	r2, [r7, #1]
 800b89c:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	220c      	movs	r2, #12
 800b8a4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

}
 800b8a8:	bf00      	nop
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	370c      	adds	r7, #12
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr
	...

0800b8b8 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b09c      	sub	sp, #112	; 0x70
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	785b      	ldrb	r3, [r3, #1]
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	f041 813f 	bne.w	800cb48 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f103 020d 	add.w	r2, r3, #13
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	4610      	mov	r0, r2
 800b8da:	f7ff feeb 	bl	800b6b4 <ModBUS_Check>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f001 812f 	beq.w	800cb44 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	7d1b      	ldrb	r3, [r3, #20]
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	2b0f      	cmp	r3, #15
 800b8ee:	f201 80f3 	bhi.w	800cad8 <ModBUS+0x1220>
 800b8f2:	a201      	add	r2, pc, #4	; (adr r2, 800b8f8 <ModBUS+0x40>)
 800b8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f8:	0800b939 	.word	0x0800b939
 800b8fc:	0800bb79 	.word	0x0800bb79
 800b900:	0800bdb9 	.word	0x0800bdb9
 800b904:	0800bff1 	.word	0x0800bff1
 800b908:	0800c229 	.word	0x0800c229
 800b90c:	0800c43f 	.word	0x0800c43f
 800b910:	0800cad9 	.word	0x0800cad9
 800b914:	0800cad9 	.word	0x0800cad9
 800b918:	0800cad9 	.word	0x0800cad9
 800b91c:	0800cad9 	.word	0x0800cad9
 800b920:	0800cad9 	.word	0x0800cad9
 800b924:	0800cad9 	.word	0x0800cad9
 800b928:	0800cad9 	.word	0x0800cad9
 800b92c:	0800cad9 	.word	0x0800cad9
 800b930:	0800c5fb 	.word	0x0800c5fb
 800b934:	0800c88b 	.word	0x0800c88b

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	7c5a      	ldrb	r2, [r3, #17]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	7c1a      	ldrb	r2, [r3, #16]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	7bda      	ldrb	r2, [r3, #15]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	7b9a      	ldrb	r2, [r3, #14]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	7b5a      	ldrb	r2, [r3, #13]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800b96a:	2300      	movs	r3, #0
 800b96c:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	795b      	ldrb	r3, [r3, #5]
 800b972:	2b01      	cmp	r3, #1
 800b974:	f040 80e6 	bne.w	800bb44 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	7d5b      	ldrb	r3, [r3, #21]
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800b98a:	021b      	lsls	r3, r3, #8
 800b98c:	b29a      	uxth	r2, r3
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800b99a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b99e:	b29a      	uxth	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8b3 251e 	ldrh.w	r2, [r3, #1310]	; 0x51e
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	7d9b      	ldrb	r3, [r3, #22]
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	b29a      	uxth	r2, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	7ddb      	ldrb	r3, [r3, #23]
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800b9ce:	021b      	lsls	r3, r3, #8
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800b9de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b9e2:	b29a      	uxth	r2, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	7e1b      	ldrb	r3, [r3, #24]
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d87e      	bhi.n	800bb10 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800ba18:	461a      	mov	r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800ba20:	4413      	add	r3, r2
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	f892 251c 	ldrb.w	r2, [r2, #1308]	; 0x51c
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	dc57      	bgt.n	800badc <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	613b      	str	r3, [r7, #16]
 800ba30:	2300      	movs	r3, #0
 800ba32:	60fb      	str	r3, [r7, #12]
 800ba34:	2300      	movs	r3, #0
 800ba36:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba38:	2300      	movs	r3, #0
 800ba3a:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	f8b2 251e 	ldrh.w	r2, [r2, #1310]	; 0x51e
 800ba4c:	40d3      	lsrs	r3, r2
 800ba4e:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800ba56:	08db      	lsrs	r3, r3, #3
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800ba62:	f003 0307 	and.w	r3, r3, #7
 800ba66:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d102      	bne.n	800ba74 <ModBUS+0x1bc>
									{
										bytes=div;
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba72:	e002      	b.n	800ba7a <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	3301      	adds	r3, #1
 800ba78:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800ba7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba7c:	b2da      	uxtb	r2, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800ba84:	e00e      	b.n	800baa4 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800ba86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba88:	3308      	adds	r3, #8
 800ba8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ba8c:	b2d1      	uxtb	r1, r2
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	4413      	add	r3, r2
 800ba92:	460a      	mov	r2, r1
 800ba94:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800ba98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba9a:	0a1b      	lsrs	r3, r3, #8
 800ba9c:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800ba9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baa0:	3b01      	subs	r3, #1
 800baa2:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800baa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	dced      	bgt.n	800ba86 <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2201      	movs	r2, #1
 800baae:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2201      	movs	r2, #1
 800bab6:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800bac0:	3303      	adds	r3, #3
 800bac2:	b2da      	uxtb	r2, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bad0:	1d9a      	adds	r2, r3, #6
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bad8:	f001 b8d4 	b.w	800cc84 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2202      	movs	r2, #2
 800bae0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x81;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2281      	movs	r2, #129	; 0x81
 800bae8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2203      	movs	r2, #3
 800baf8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bb02:	1d9a      	adds	r2, r3, #6
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800bb0a:	2302      	movs	r3, #2
 800bb0c:	f001 b8ba 	b.w	800cc84 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2203      	movs	r2, #3
 800bb14:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x81;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2281      	movs	r2, #129	; 0x81
 800bb1c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2201      	movs	r2, #1
 800bb24:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2203      	movs	r2, #3
 800bb2c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bb36:	1d9a      	adds	r2, r3, #6
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800bb3e:	2303      	movs	r3, #3
 800bb40:	f001 b8a0 	b.w	800cc84 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2201      	movs	r2, #1
 800bb48:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x81;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2281      	movs	r2, #129	; 0x81
 800bb50:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2203      	movs	r2, #3
 800bb60:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bb6a:	1d9a      	adds	r2, r3, #6
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800bb72:	2301      	movs	r3, #1
 800bb74:	f001 b886 	b.w	800cc84 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	7c5a      	ldrb	r2, [r3, #17]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	7c1a      	ldrb	r2, [r3, #16]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	7bda      	ldrb	r2, [r3, #15]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	7b9a      	ldrb	r2, [r3, #14]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	7b5a      	ldrb	r2, [r3, #13]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	799b      	ldrb	r3, [r3, #6]
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	f040 80e6 	bne.w	800bd84 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	7d5b      	ldrb	r3, [r3, #21]
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800bbca:	021b      	lsls	r3, r3, #8
 800bbcc:	b29a      	uxth	r2, r3
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800bbda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bbde:	b29a      	uxth	r2, r3
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8b3 2524 	ldrh.w	r2, [r3, #1316]	; 0x524
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	7d9b      	ldrb	r3, [r3, #22]
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	b29a      	uxth	r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	7ddb      	ldrb	r3, [r3, #23]
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bc0e:	021b      	lsls	r3, r3, #8
 800bc10:	b29a      	uxth	r2, r3
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bc1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bc22:	b29a      	uxth	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	7e1b      	ldrb	r3, [r3, #24]
 800bc34:	b29b      	uxth	r3, r3
 800bc36:	4313      	orrs	r3, r2
 800bc38:	b29a      	uxth	r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f893 3522 	ldrb.w	r3, [r3, #1314]	; 0x522
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d87e      	bhi.n	800bd50 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800bc58:	461a      	mov	r2, r3
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bc60:	4413      	add	r3, r2
 800bc62:	687a      	ldr	r2, [r7, #4]
 800bc64:	f892 2522 	ldrb.w	r2, [r2, #1314]	; 0x522
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	dc57      	bgt.n	800bd1c <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	623b      	str	r3, [r7, #32]
 800bc70:	2300      	movs	r3, #0
 800bc72:	61fb      	str	r3, [r7, #28]
 800bc74:	2300      	movs	r3, #0
 800bc76:	667b      	str	r3, [r7, #100]	; 0x64
 800bc78:	2300      	movs	r3, #0
 800bc7a:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	f8b2 2524 	ldrh.w	r2, [r2, #1316]	; 0x524
 800bc8c:	40d3      	lsrs	r3, r2
 800bc8e:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bc96:	08db      	lsrs	r3, r3, #3
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800bca2:	f003 0307 	and.w	r3, r3, #7
 800bca6:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d102      	bne.n	800bcb4 <ModBUS+0x3fc>
									{
										bytes=div;
 800bcae:	6a3b      	ldr	r3, [r7, #32]
 800bcb0:	667b      	str	r3, [r7, #100]	; 0x64
 800bcb2:	e002      	b.n	800bcba <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800bcb4:	6a3b      	ldr	r3, [r7, #32]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800bcba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800bcc4:	e00e      	b.n	800bce4 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800bcc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcc8:	3308      	adds	r3, #8
 800bcca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bccc:	b2d1      	uxtb	r1, r2
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	460a      	mov	r2, r1
 800bcd4:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800bcd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcda:	0a1b      	lsrs	r3, r3, #8
 800bcdc:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800bcde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bce0:	3b01      	subs	r3, #1
 800bce2:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800bce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	dced      	bgt.n	800bcc6 <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2202      	movs	r2, #2
 800bcee:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800bd00:	3303      	adds	r3, #3
 800bd02:	b2da      	uxtb	r2, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bd10:	1d9a      	adds	r2, r3, #6
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bd18:	f000 bfb4 	b.w	800cc84 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2202      	movs	r2, #2
 800bd20:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x82;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2282      	movs	r2, #130	; 0x82
 800bd28:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2201      	movs	r2, #1
 800bd30:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2203      	movs	r2, #3
 800bd38:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bd42:	1d9a      	adds	r2, r3, #6
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800bd4a:	2302      	movs	r3, #2
 800bd4c:	f000 bf9a 	b.w	800cc84 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2203      	movs	r2, #3
 800bd54:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x82;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2282      	movs	r2, #130	; 0x82
 800bd5c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2203      	movs	r2, #3
 800bd6c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bd76:	1d9a      	adds	r2, r3, #6
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800bd7e:	2303      	movs	r3, #3
 800bd80:	f000 bf80 	b.w	800cc84 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x82;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2282      	movs	r2, #130	; 0x82
 800bd90:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2201      	movs	r2, #1
 800bd98:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2203      	movs	r2, #3
 800bda0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bdaa:	1d9a      	adds	r2, r3, #6
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	f000 bf66 	b.w	800cc84 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	7c5a      	ldrb	r2, [r3, #17]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	7c1a      	ldrb	r2, [r3, #16]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	7bda      	ldrb	r2, [r3, #15]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	7b9a      	ldrb	r2, [r3, #14]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	7b5a      	ldrb	r2, [r3, #13]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800bdea:	2300      	movs	r3, #0
 800bdec:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	79db      	ldrb	r3, [r3, #7]
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	f040 80e2 	bne.w	800bfbc <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	7d5b      	ldrb	r3, [r3, #21]
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800be0a:	021b      	lsls	r3, r3, #8
 800be0c:	b29a      	uxth	r2, r3
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800be1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800be1e:	b29a      	uxth	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f8b3 252a 	ldrh.w	r2, [r3, #1322]	; 0x52a
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	7d9b      	ldrb	r3, [r3, #22]
 800be30:	b29b      	uxth	r3, r3
 800be32:	4313      	orrs	r3, r2
 800be34:	b29a      	uxth	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	7ddb      	ldrb	r3, [r3, #23]
 800be40:	b29a      	uxth	r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800be4e:	021b      	lsls	r3, r3, #8
 800be50:	b29a      	uxth	r2, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800be5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800be62:	b29a      	uxth	r2, r3
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	7e1b      	ldrb	r3, [r3, #24]
 800be74:	b29b      	uxth	r3, r3
 800be76:	4313      	orrs	r3, r2
 800be78:	b29a      	uxth	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	429a      	cmp	r2, r3
 800be90:	d87a      	bhi.n	800bf88 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800be98:	461a      	mov	r2, r3
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800bea0:	4413      	add	r3, r2
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	f892 2528 	ldrb.w	r2, [r2, #1320]	; 0x528
 800bea8:	4293      	cmp	r3, r2
 800beaa:	dc53      	bgt.n	800bf54 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800beac:	e029      	b.n	800bf02 <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800beb4:	461a      	mov	r2, r3
 800beb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800beb8:	4413      	add	r3, r2
 800beba:	005a      	lsls	r2, r3, #1
 800bebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bebe:	005b      	lsls	r3, r3, #1
 800bec0:	3309      	adds	r3, #9
 800bec2:	6879      	ldr	r1, [r7, #4]
 800bec4:	440a      	add	r2, r1
 800bec6:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	4413      	add	r3, r2
 800bece:	460a      	mov	r2, r1
 800bed0:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800beda:	461a      	mov	r2, r3
 800bedc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bede:	4413      	add	r3, r2
 800bee0:	005b      	lsls	r3, r3, #1
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bee6:	3305      	adds	r3, #5
 800bee8:	005b      	lsls	r3, r3, #1
 800beea:	6879      	ldr	r1, [r7, #4]
 800beec:	440a      	add	r2, r1
 800beee:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	4413      	add	r3, r2
 800bef6:	460a      	mov	r2, r1
 800bef8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800befc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800befe:	3301      	adds	r3, #1
 800bf00:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800bf08:	461a      	mov	r2, r3
 800bf0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	dbce      	blt.n	800beae <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	005b      	lsls	r3, r3, #1
 800bf1a:	b2da      	uxtb	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x03;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2203      	movs	r2, #3
 800bf26:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800bf38:	3303      	adds	r3, #3
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bf48:	1d9a      	adds	r2, r3, #6
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bf50:	f000 be98 	b.w	800cc84 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2202      	movs	r2, #2
 800bf58:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x83;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2283      	movs	r2, #131	; 0x83
 800bf60:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2203      	movs	r2, #3
 800bf70:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bf7a:	1d9a      	adds	r2, r3, #6
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800bf82:	2302      	movs	r3, #2
 800bf84:	f000 be7e 	b.w	800cc84 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2203      	movs	r2, #3
 800bf8c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x83;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2283      	movs	r2, #131	; 0x83
 800bf94:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2203      	movs	r2, #3
 800bfa4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bfae:	1d9a      	adds	r2, r3, #6
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800bfb6:	2303      	movs	r3, #3
 800bfb8:	f000 be64 	b.w	800cc84 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x83;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2283      	movs	r2, #131	; 0x83
 800bfc8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2203      	movs	r2, #3
 800bfd8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bfe2:	1d9a      	adds	r2, r3, #6
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800bfea:	2301      	movs	r3, #1
 800bfec:	f000 be4a 	b.w	800cc84 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	7c5a      	ldrb	r2, [r3, #17]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	7c1a      	ldrb	r2, [r3, #16]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	7bda      	ldrb	r2, [r3, #15]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	7b9a      	ldrb	r2, [r3, #14]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	7b5a      	ldrb	r2, [r3, #13]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800c022:	2300      	movs	r3, #0
 800c024:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	7a1b      	ldrb	r3, [r3, #8]
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	f040 80e2 	bne.w	800c1f4 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	7d5b      	ldrb	r3, [r3, #21]
 800c034:	b29a      	uxth	r2, r3
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c042:	021b      	lsls	r3, r3, #8
 800c044:	b29a      	uxth	r2, r3
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c052:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c056:	b29a      	uxth	r2, r3
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8b3 2530 	ldrh.w	r2, [r3, #1328]	; 0x530
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	7d9b      	ldrb	r3, [r3, #22]
 800c068:	b29b      	uxth	r3, r3
 800c06a:	4313      	orrs	r3, r2
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	7ddb      	ldrb	r3, [r3, #23]
 800c078:	b29a      	uxth	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c086:	021b      	lsls	r3, r3, #8
 800c088:	b29a      	uxth	r2, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c096:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	7e1b      	ldrb	r3, [r3, #24]
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	b29a      	uxth	r2, r3
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f893 352e 	ldrb.w	r3, [r3, #1326]	; 0x52e
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d87a      	bhi.n	800c1c0 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c0d8:	4413      	add	r3, r2
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	f892 252e 	ldrb.w	r2, [r2, #1326]	; 0x52e
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	dc53      	bgt.n	800c18c <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c0e4:	e029      	b.n	800c13a <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0f0:	4413      	add	r3, r2
 800c0f2:	005a      	lsls	r2, r3, #1
 800c0f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0f6:	005b      	lsls	r3, r3, #1
 800c0f8:	3309      	adds	r3, #9
 800c0fa:	6879      	ldr	r1, [r7, #4]
 800c0fc:	440a      	add	r2, r1
 800c0fe:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	4413      	add	r3, r2
 800c106:	460a      	mov	r2, r1
 800c108:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800c112:	461a      	mov	r2, r3
 800c114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c116:	4413      	add	r3, r2
 800c118:	005b      	lsls	r3, r3, #1
 800c11a:	1c5a      	adds	r2, r3, #1
 800c11c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c11e:	3305      	adds	r3, #5
 800c120:	005b      	lsls	r3, r3, #1
 800c122:	6879      	ldr	r1, [r7, #4]
 800c124:	440a      	add	r2, r1
 800c126:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	4413      	add	r3, r2
 800c12e:	460a      	mov	r2, r1
 800c130:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800c134:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c136:	3301      	adds	r3, #1
 800c138:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c140:	461a      	mov	r2, r3
 800c142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c144:	4293      	cmp	r3, r2
 800c146:	dbce      	blt.n	800c0e6 <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800c14e:	b2db      	uxtb	r3, r3
 800c150:	005b      	lsls	r3, r3, #1
 800c152:	b2da      	uxtb	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x04;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2204      	movs	r2, #4
 800c15e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2201      	movs	r2, #1
 800c166:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c170:	3303      	adds	r3, #3
 800c172:	b2da      	uxtb	r2, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c180:	1d9a      	adds	r2, r3, #6
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c188:	f000 bd7c 	b.w	800cc84 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2202      	movs	r2, #2
 800c190:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x84;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2284      	movs	r2, #132	; 0x84
 800c198:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2201      	movs	r2, #1
 800c1a0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2203      	movs	r2, #3
 800c1a8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c1b2:	1d9a      	adds	r2, r3, #6
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c1ba:	2302      	movs	r3, #2
 800c1bc:	f000 bd62 	b.w	800cc84 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2203      	movs	r2, #3
 800c1c4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x84;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2284      	movs	r2, #132	; 0x84
 800c1cc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2203      	movs	r2, #3
 800c1dc:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c1e6:	1d9a      	adds	r2, r3, #6
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800c1ee:	2303      	movs	r3, #3
 800c1f0:	f000 bd48 	b.w	800cc84 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x84;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2284      	movs	r2, #132	; 0x84
 800c200:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2201      	movs	r2, #1
 800c208:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2203      	movs	r2, #3
 800c210:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c21a:	1d9a      	adds	r2, r3, #6
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c222:	2301      	movs	r3, #1
 800c224:	f000 bd2e 	b.w	800cc84 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	7c5a      	ldrb	r2, [r3, #17]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	7c1a      	ldrb	r2, [r3, #16]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	7bda      	ldrb	r2, [r3, #15]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	7b9a      	ldrb	r2, [r3, #14]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	7b5a      	ldrb	r2, [r3, #13]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

								int qty_reg=0;
 800c25a:	2300      	movs	r3, #0
 800c25c:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	7a5b      	ldrb	r3, [r3, #9]
 800c262:	2b01      	cmp	r3, #1
 800c264:	f040 80d1 	bne.w	800c40a <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	7d5b      	ldrb	r3, [r3, #21]
 800c26c:	b29a      	uxth	r2, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800c27a:	021b      	lsls	r3, r3, #8
 800c27c:	b29a      	uxth	r2, r3
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800c28a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c28e:	b29a      	uxth	r2, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8b3 2536 	ldrh.w	r2, [r3, #1334]	; 0x536
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	7d9b      	ldrb	r3, [r3, #22]
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	7ddb      	ldrb	r3, [r3, #23]
 800c2b0:	b29a      	uxth	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c2be:	021b      	lsls	r3, r3, #8
 800c2c0:	b29a      	uxth	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c2ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8b3 2538 	ldrh.w	r2, [r3, #1336]	; 0x538
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	7e1b      	ldrb	r3, [r3, #24]
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	b29a      	uxth	r2, r3
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f893 3534 	ldrb.w	r3, [r3, #1332]	; 0x534
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800c2fe:	429a      	cmp	r2, r3
 800c300:	dd69      	ble.n	800c3d6 <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d005      	beq.n	800c318 <ModBUS+0xa60>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c312:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c316:	d144      	bne.n	800c3a2 <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c31e:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c322:	d10d      	bne.n	800c340 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	f8b2 2536 	ldrh.w	r2, [r2, #1334]	; 0x536
 800c330:	4611      	mov	r1, r2
 800c332:	2201      	movs	r2, #1
 800c334:	408a      	lsls	r2, r1
 800c336:	431a      	orrs	r2, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800c33e:	e003      	b.n	800c348 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2200      	movs	r2, #0
 800c344:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	7e1a      	ldrb	r2, [r3, #24]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	7dda      	ldrb	r2, [r3, #23]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	7d9a      	ldrb	r2, [r3, #22]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	7d5a      	ldrb	r2, [r3, #21]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x05;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2205      	movs	r2, #5
 800c374:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2201      	movs	r2, #1
 800c37c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c386:	3306      	adds	r3, #6
 800c388:	b2da      	uxtb	r2, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c396:	1d9a      	adds	r2, r3, #6
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800c39e:	f000 bc71 	b.w	800cc84 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2202      	movs	r2, #2
 800c3a6:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x85;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2285      	movs	r2, #133	; 0x85
 800c3ae:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2203      	movs	r2, #3
 800c3be:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c3c8:	1d9a      	adds	r2, r3, #6
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
												return(2);//Error excepcion 02
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	f000 bc57 	b.w	800cc84 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2203      	movs	r2, #3
 800c3da:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
											m3->_MBUS_2SND[7]=0x85;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2285      	movs	r2, #133	; 0x85
 800c3e2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2203      	movs	r2, #3
 800c3f2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c3fc:	1d9a      	adds	r2, r3, #6
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
											return(3);//Erroe excepcion 03
 800c404:	2303      	movs	r3, #3
 800c406:	f000 bc3d 	b.w	800cc84 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2201      	movs	r2, #1
 800c40e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x85;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2285      	movs	r2, #133	; 0x85
 800c416:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2201      	movs	r2, #1
 800c41e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2203      	movs	r2, #3
 800c426:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c430:	1d9a      	adds	r2, r3, #6
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(1);//Error excepcion 01
 800c438:	2301      	movs	r3, #1
 800c43a:	f000 bc23 	b.w	800cc84 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	7c5a      	ldrb	r2, [r3, #17]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	7c1a      	ldrb	r2, [r3, #16]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	7bda      	ldrb	r2, [r3, #15]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	7b9a      	ldrb	r2, [r3, #14]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	7b5a      	ldrb	r2, [r3, #13]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800c470:	2300      	movs	r3, #0
 800c472:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c474:	2300      	movs	r3, #0
 800c476:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	7a9b      	ldrb	r3, [r3, #10]
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	f040 80a3 	bne.w	800c5c8 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	7d5b      	ldrb	r3, [r3, #21]
 800c486:	b29a      	uxth	r2, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800c494:	021b      	lsls	r3, r3, #8
 800c496:	b29a      	uxth	r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800c4a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c4a8:	b29a      	uxth	r2, r3
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	7d9b      	ldrb	r3, [r3, #22]
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	b29a      	uxth	r2, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542

							start_address=m3->_06_WriteSingleRegister_Addr;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800c4cc:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	7ddb      	ldrb	r3, [r3, #23]
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800c4e0:	021b      	lsls	r3, r3, #8
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800c4f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f8b3 2544 	ldrh.w	r2, [r3, #1348]	; 0x544
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	7e1b      	ldrb	r3, [r3, #24]
 800c506:	b29b      	uxth	r3, r3
 800c508:	4313      	orrs	r3, r2
 800c50a:	b29a      	uxth	r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f893 3540 	ldrb.w	r3, [r3, #1344]	; 0x540
 800c51e:	b29b      	uxth	r3, r3
 800c520:	429a      	cmp	r2, r3
 800c522:	d838      	bhi.n	800c596 <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800c524:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	7dd1      	ldrb	r1, [r2, #23]
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	4413      	add	r3, r2
 800c52e:	460a      	mov	r2, r1
 800c530:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800c534:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c536:	3301      	adds	r3, #1
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	7e11      	ldrb	r1, [r2, #24]
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	4413      	add	r3, r2
 800c540:	460a      	mov	r2, r1
 800c542:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	7e1a      	ldrb	r2, [r3, #24]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	7dda      	ldrb	r2, [r3, #23]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	7d9a      	ldrb	r2, [r3, #22]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	7d5a      	ldrb	r2, [r3, #21]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x06;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2206      	movs	r2, #6
 800c572:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2201      	movs	r2, #1
 800c57a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2206      	movs	r2, #6
 800c582:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c58c:	1d9a      	adds	r2, r3, #6
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c594:	e376      	b.n	800cc84 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2202      	movs	r2, #2
 800c59a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x86;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2286      	movs	r2, #134	; 0x86
 800c5a2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2203      	movs	r2, #3
 800c5b2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c5bc:	1d9a      	adds	r2, r3, #6
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	e35d      	b.n	800cc84 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x86;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2286      	movs	r2, #134	; 0x86
 800c5d4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2203      	movs	r2, #3
 800c5e4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c5ee:	1d9a      	adds	r2, r3, #6
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e344      	b.n	800cc84 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	7c5a      	ldrb	r2, [r3, #17]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	7c1a      	ldrb	r2, [r3, #16]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	7bda      	ldrb	r2, [r3, #15]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	7b9a      	ldrb	r2, [r3, #14]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	7b5a      	ldrb	r2, [r3, #13]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800c62c:	2300      	movs	r3, #0
 800c62e:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	7adb      	ldrb	r3, [r3, #11]
 800c634:	2b01      	cmp	r3, #1
 800c636:	f040 810f 	bne.w	800c858 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	7d5b      	ldrb	r3, [r3, #21]
 800c63e:	b29a      	uxth	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c64c:	021b      	lsls	r3, r3, #8
 800c64e:	b29a      	uxth	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c65c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c660:	b29a      	uxth	r2, r3
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8b3 253c 	ldrh.w	r2, [r3, #1340]	; 0x53c
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	7d9b      	ldrb	r3, [r3, #22]
 800c672:	b29b      	uxth	r3, r3
 800c674:	4313      	orrs	r3, r2
 800c676:	b29a      	uxth	r2, r3
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	7ddb      	ldrb	r3, [r3, #23]
 800c682:	b29a      	uxth	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800c690:	021b      	lsls	r3, r3, #8
 800c692:	b29a      	uxth	r2, r3
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800c6a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c6a4:	b29a      	uxth	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	7e1b      	ldrb	r3, [r3, #24]
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	b29a      	uxth	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 353a 	ldrb.w	r3, [r3, #1338]	; 0x53a
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	f200 80a8 	bhi.w	800c826 <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c6dc:	461a      	mov	r2, r3
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800c6e4:	4413      	add	r3, r2
 800c6e6:	687a      	ldr	r2, [r7, #4]
 800c6e8:	f892 253a 	ldrb.w	r2, [r2, #1338]	; 0x53a
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	f300 8081 	bgt.w	800c7f4 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	657b      	str	r3, [r7, #84]	; 0x54
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	653b      	str	r3, [r7, #80]	; 0x50
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6fe:	2300      	movs	r3, #0
 800c700:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	7e5b      	ldrb	r3, [r3, #25]
 800c706:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800c708:	e00e      	b.n	800c728 <ModBUS+0xe70>
									{
										data=data<<8;
 800c70a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c70c:	021b      	lsls	r3, r3, #8
 800c70e:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800c710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c712:	330c      	adds	r3, #12
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	4413      	add	r3, r2
 800c718:	7b5b      	ldrb	r3, [r3, #13]
 800c71a:	461a      	mov	r2, r3
 800c71c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c71e:	4313      	orrs	r3, r2
 800c720:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800c722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c724:	3b01      	subs	r3, #1
 800c726:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800c728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d1ed      	bne.n	800c70a <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c734:	461a      	mov	r2, r3
 800c736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c738:	4093      	lsls	r3, r2
 800c73a:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800c73c:	e00f      	b.n	800c75e <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c744:	461a      	mov	r2, r3
 800c746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c748:	4413      	add	r3, r2
 800c74a:	2201      	movs	r2, #1
 800c74c:	fa02 f303 	lsl.w	r3, r2, r3
 800c750:	461a      	mov	r2, r3
 800c752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c754:	4313      	orrs	r3, r2
 800c756:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800c758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c75a:	3301      	adds	r3, #1
 800c75c:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800c764:	461a      	mov	r2, r3
 800c766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c768:	4293      	cmp	r3, r2
 800c76a:	d3e8      	bcc.n	800c73e <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800c76c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c76e:	43db      	mvns	r3, r3
 800c770:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800c778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c77a:	401a      	ands	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318


									data &= ~mascara;
 800c782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c784:	43db      	mvns	r3, r3
 800c786:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c788:	4013      	ands	r3, r2
 800c78a:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800c792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c794:	431a      	orrs	r2, r3
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	7e1a      	ldrb	r2, [r3, #24]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	7dda      	ldrb	r2, [r3, #23]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	7d9a      	ldrb	r2, [r3, #22]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	7d5a      	ldrb	r2, [r3, #21]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x0F;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	220f      	movs	r2, #15
 800c7c8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c7da:	3306      	adds	r3, #6
 800c7dc:	b2da      	uxtb	r2, r3
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c7ea:	1d9a      	adds	r2, r3, #6
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c7f2:	e247      	b.n	800cc84 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2202      	movs	r2, #2
 800c7f8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x8F;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	228f      	movs	r2, #143	; 0x8f
 800c800:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2201      	movs	r2, #1
 800c808:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2203      	movs	r2, #3
 800c810:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c81a:	1d9a      	adds	r2, r3, #6
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c822:	2302      	movs	r3, #2
 800c824:	e22e      	b.n	800cc84 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2203      	movs	r2, #3
 800c82a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x8F;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	228f      	movs	r2, #143	; 0x8f
 800c832:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2201      	movs	r2, #1
 800c83a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2203      	movs	r2, #3
 800c842:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c84c:	1d9a      	adds	r2, r3, #6
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800c854:	2303      	movs	r3, #3
 800c856:	e215      	b.n	800cc84 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x8F;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	228f      	movs	r2, #143	; 0x8f
 800c864:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2201      	movs	r2, #1
 800c86c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2203      	movs	r2, #3
 800c874:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c87e:	1d9a      	adds	r2, r3, #6
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c886:	2301      	movs	r3, #1
 800c888:	e1fc      	b.n	800cc84 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	7c5a      	ldrb	r2, [r3, #17]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	7c1a      	ldrb	r2, [r3, #16]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	7bda      	ldrb	r2, [r3, #15]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	7b9a      	ldrb	r2, [r3, #14]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	7b5a      	ldrb	r2, [r3, #13]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	7b1b      	ldrb	r3, [r3, #12]
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	f040 80eb 	bne.w	800caa6 <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	7d5b      	ldrb	r3, [r3, #21]
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800c8e2:	021b      	lsls	r3, r3, #8
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800c8f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c8f6:	b29a      	uxth	r2, r3
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f8b3 2548 	ldrh.w	r2, [r3, #1352]	; 0x548
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	7d9b      	ldrb	r3, [r3, #22]
 800c908:	b29b      	uxth	r3, r3
 800c90a:	4313      	orrs	r3, r2
 800c90c:	b29a      	uxth	r2, r3
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800c91a:	005b      	lsls	r3, r3, #1
 800c91c:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	7ddb      	ldrb	r3, [r3, #23]
 800c922:	b29a      	uxth	r2, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800c930:	021b      	lsls	r3, r3, #8
 800c932:	b29a      	uxth	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800c940:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c944:	b29a      	uxth	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	7e1b      	ldrb	r3, [r3, #24]
 800c956:	b29b      	uxth	r3, r3
 800c958:	4313      	orrs	r3, r2
 800c95a:	b29a      	uxth	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f893 3546 	ldrb.w	r3, [r3, #1350]	; 0x546
 800c96e:	b29b      	uxth	r3, r3
 800c970:	429a      	cmp	r2, r3
 800c972:	d87f      	bhi.n	800ca74 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800c97a:	461a      	mov	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800c982:	4413      	add	r3, r2
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	f892 2546 	ldrb.w	r2, [r2, #1350]	; 0x546
 800c98a:	4293      	cmp	r3, r2
 800c98c:	dc59      	bgt.n	800ca42 <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800c98e:	e029      	b.n	800c9e4 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800c990:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c994:	f103 020d 	add.w	r2, r3, #13
 800c998:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800c99a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c99e:	440b      	add	r3, r1
 800c9a0:	6879      	ldr	r1, [r7, #4]
 800c9a2:	440a      	add	r2, r1
 800c9a4:	7b51      	ldrb	r1, [r2, #13]
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	460a      	mov	r2, r1
 800c9ac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800c9b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800c9ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c9be:	f103 020d 	add.w	r2, r3, #13
 800c9c2:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800c9c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c9c8:	440b      	add	r3, r1
 800c9ca:	6879      	ldr	r1, [r7, #4]
 800c9cc:	440a      	add	r2, r1
 800c9ce:	7b51      	ldrb	r1, [r2, #13]
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	460a      	mov	r2, r1
 800c9d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										qty_reg++;
 800c9da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c9de:	3301      	adds	r3, #1
 800c9e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	7e5b      	ldrb	r3, [r3, #25]
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d3ce      	bcc.n	800c990 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	7e1a      	ldrb	r2, [r3, #24]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	7dda      	ldrb	r2, [r3, #23]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	7d9a      	ldrb	r2, [r3, #22]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	7d5a      	ldrb	r2, [r3, #21]
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x10;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2210      	movs	r2, #16
 800ca1e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2201      	movs	r2, #1
 800ca26:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2206      	movs	r2, #6
 800ca2e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800ca38:	1d9a      	adds	r2, r3, #6
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800ca40:	e120      	b.n	800cc84 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2202      	movs	r2, #2
 800ca46:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x90;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2290      	movs	r2, #144	; 0x90
 800ca4e:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2201      	movs	r2, #1
 800ca56:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2203      	movs	r2, #3
 800ca5e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800ca68:	1d9a      	adds	r2, r3, #6
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800ca70:	2302      	movs	r3, #2
 800ca72:	e107      	b.n	800cc84 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2203      	movs	r2, #3
 800ca78:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x90;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2290      	movs	r2, #144	; 0x90
 800ca80:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2201      	movs	r2, #1
 800ca88:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2203      	movs	r2, #3
 800ca90:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800ca9a:	1d9a      	adds	r2, r3, #6
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800caa2:	2303      	movs	r3, #3
 800caa4:	e0ee      	b.n	800cc84 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2201      	movs	r2, #1
 800caaa:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x90;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2290      	movs	r2, #144	; 0x90
 800cab2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2201      	movs	r2, #1
 800caba:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2203      	movs	r2, #3
 800cac2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cacc:	1d9a      	adds	r2, r3, #6
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800cad4:	2301      	movs	r3, #1
 800cad6:	e0d5      	b.n	800cc84 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2201      	movs	r2, #1
 800cadc:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	7d1b      	ldrb	r3, [r3, #20]
 800cae4:	3b80      	subs	r3, #128	; 0x80
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	7cda      	ldrb	r2, [r3, #19]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
					m3->_MBUS_2SND[5]=0x03;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2203      	movs	r2, #3
 800cafc:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	7c5a      	ldrb	r2, [r3, #17]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	7c1a      	ldrb	r2, [r3, #16]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	7bda      	ldrb	r2, [r3, #15]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	7b9a      	ldrb	r2, [r3, #14]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	7b5a      	ldrb	r2, [r3, #13]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800cb38:	1d9a      	adds	r2, r3, #6
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
					return(1);
 800cb40:	2301      	movs	r3, #1
 800cb42:	e09f      	b.n	800cc84 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800cb44:	2301      	movs	r3, #1
 800cb46:	e09d      	b.n	800cc84 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	785b      	ldrb	r3, [r3, #1]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	f040 8099 	bne.w	800cc84 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f103 020d 	add.w	r2, r3, #13
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800cb5e:	4619      	mov	r1, r3
 800cb60:	4610      	mov	r0, r2
 800cb62:	f7fe fda7 	bl	800b6b4 <ModBUS_Check>
 800cb66:	4603      	mov	r3, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f000 808b 	beq.w	800cc84 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f7fe fdbf 	bl	800b6f2 <ModBUS_Check_tid>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d04f      	beq.n	800cc1a <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	7d1b      	ldrb	r3, [r3, #20]
 800cb7e:	2b03      	cmp	r3, #3
 800cb80:	d143      	bne.n	800cc0a <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800cb82:	2300      	movs	r3, #0
 800cb84:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800cb86:	2300      	movs	r3, #0
 800cb88:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800cb92:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800cb94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cb96:	021b      	lsls	r3, r3, #8
 800cb98:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800cba0:	b29a      	uxth	r2, r3
 800cba2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cba4:	4313      	orrs	r3, r2
 800cba6:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800cbae:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	643b      	str	r3, [r7, #64]	; 0x40
 800cbb6:	e022      	b.n	800cbfe <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800cbb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbba:	005b      	lsls	r3, r3, #1
 800cbbc:	f103 0209 	add.w	r2, r3, #9
 800cbc0:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800cbc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbc4:	440b      	add	r3, r1
 800cbc6:	005b      	lsls	r3, r3, #1
 800cbc8:	6879      	ldr	r1, [r7, #4]
 800cbca:	440a      	add	r2, r1
 800cbcc:	7b51      	ldrb	r1, [r2, #13]
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	460a      	mov	r2, r1
 800cbd4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800cbd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbda:	3305      	adds	r3, #5
 800cbdc:	005a      	lsls	r2, r3, #1
 800cbde:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800cbe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbe2:	440b      	add	r3, r1
 800cbe4:	005b      	lsls	r3, r3, #1
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	6879      	ldr	r1, [r7, #4]
 800cbea:	440a      	add	r2, r1
 800cbec:	7b51      	ldrb	r1, [r2, #13]
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	4413      	add	r3, r2
 800cbf2:	460a      	mov	r2, r1
 800cbf4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
						for (int i=0;i< qty; i++)
 800cbf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	643b      	str	r3, [r7, #64]	; 0x40
 800cbfe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800cc02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc04:	429a      	cmp	r2, r3
 800cc06:	dbd7      	blt.n	800cbb8 <ModBUS+0x1300>

						}


					}
					break;
 800cc08:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	7c9b      	ldrb	r3, [r3, #18]
 800cc0e:	461a      	mov	r2, r3
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	7d5b      	ldrb	r3, [r3, #21]
 800cc14:	1ad3      	subs	r3, r2, r3
 800cc16:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc18:	e034      	b.n	800cc84 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	7d1b      	ldrb	r3, [r3, #20]
 800cc1e:	3b81      	subs	r3, #129	; 0x81
 800cc20:	2b15      	cmp	r3, #21
 800cc22:	d82f      	bhi.n	800cc84 <ModBUS+0x13cc>
 800cc24:	a201      	add	r2, pc, #4	; (adr r2, 800cc2c <ModBUS+0x1374>)
 800cc26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc2a:	bf00      	nop
 800cc2c:	0800cc85 	.word	0x0800cc85
 800cc30:	0800cc85 	.word	0x0800cc85
 800cc34:	0800cc85 	.word	0x0800cc85
 800cc38:	0800cc85 	.word	0x0800cc85
 800cc3c:	0800cc85 	.word	0x0800cc85
 800cc40:	0800cc85 	.word	0x0800cc85
 800cc44:	0800cc85 	.word	0x0800cc85
 800cc48:	0800cc85 	.word	0x0800cc85
 800cc4c:	0800cc85 	.word	0x0800cc85
 800cc50:	0800cc85 	.word	0x0800cc85
 800cc54:	0800cc85 	.word	0x0800cc85
 800cc58:	0800cc85 	.word	0x0800cc85
 800cc5c:	0800cc85 	.word	0x0800cc85
 800cc60:	0800cc85 	.word	0x0800cc85
 800cc64:	0800cc85 	.word	0x0800cc85
 800cc68:	0800cc85 	.word	0x0800cc85
 800cc6c:	0800cc85 	.word	0x0800cc85
 800cc70:	0800cc85 	.word	0x0800cc85
 800cc74:	0800cc85 	.word	0x0800cc85
 800cc78:	0800cc85 	.word	0x0800cc85
 800cc7c:	0800cc85 	.word	0x0800cc85
 800cc80:	0800cc85 	.word	0x0800cc85
			}
		}
	}


}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3770      	adds	r7, #112	; 0x70
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <SPI_ETH_RESET>:
 */

#include "ETH_W5500.h"

SPI_ETH_RESET(struct W5500_SPI * x)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->RST_PORT, x->RST_PIN , GPIO_PIN_RESET);		//RST LOW
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	68d8      	ldr	r0, [r3, #12]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	8a1b      	ldrh	r3, [r3, #16]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	4619      	mov	r1, r3
 800cca0:	f7f6 fb62 	bl	8003368 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800cca4:	2064      	movs	r0, #100	; 0x64
 800cca6:	f7f5 fefd 	bl	8002aa4 <HAL_Delay>
	HAL_GPIO_WritePin(x->RST_PORT, x->RST_PIN , GPIO_PIN_SET);			//RST HIGH
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	68d8      	ldr	r0, [r3, #12]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	8a1b      	ldrh	r3, [r3, #16]
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	f7f6 fb57 	bl	8003368 <HAL_GPIO_WritePin>
}
 800ccba:	bf00      	nop
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <SPI_ETH_PHY_RESET>:

SPI_ETH_PHY_RESET(struct W5500_SPI * x)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
uint8_t a;

	x->TX[0]=0x00;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	771a      	strb	r2, [r3, #28]
	x->TX[1]=0x2E;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	222e      	movs	r2, #46	; 0x2e
 800ccd6:	775a      	strb	r2, [r3, #29]
	x->TX[2]=0x00;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	779a      	strb	r2, [r3, #30]
	x->TX[3]=0x00;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2200      	movs	r2, #0
 800cce2:	77da      	strb	r2, [r3, #31]
	SPI_ETH(x);			//Realizo la letura de PHYCFGR
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 f81c 	bl	800cd22 <SPI_ETH>
	a=x->RX[3];
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800ccf0:	73fb      	strb	r3, [r7, #15]
	a=a&0xFE;
 800ccf2:	7bfb      	ldrb	r3, [r7, #15]
 800ccf4:	f023 0301 	bic.w	r3, r3, #1
 800ccf8:	73fb      	strb	r3, [r7, #15]
	x->TX[0]=0x00;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	771a      	strb	r2, [r3, #28]
	x->TX[1]=0x2E;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	222e      	movs	r2, #46	; 0x2e
 800cd04:	775a      	strb	r2, [r3, #29]
	x->TX[2]=0x04;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2204      	movs	r2, #4
 800cd0a:	779a      	strb	r2, [r3, #30]
	x->TX[3]=a;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	7bfa      	ldrb	r2, [r7, #15]
 800cd10:	77da      	strb	r2, [r3, #31]
	SPI_ETH(x);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 f805 	bl	800cd22 <SPI_ETH>
}
 800cd18:	bf00      	nop
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3710      	adds	r7, #16
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <SPI_ETH>:

uint8_t  SPI_ETH(struct  W5500_SPI * x )
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b084      	sub	sp, #16
 800cd26:	af02      	add	r7, sp, #8
 800cd28:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6858      	ldr	r0, [r3, #4]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	891b      	ldrh	r3, [r3, #8]
 800cd32:	2200      	movs	r2, #0
 800cd34:	4619      	mov	r1, r3
 800cd36:	f7f6 fb17 	bl	8003368 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6818      	ldr	r0, [r3, #0]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f103 011c 	add.w	r1, r3, #28
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f103 0220 	add.w	r2, r3, #32
 800cd4a:	2364      	movs	r3, #100	; 0x64
 800cd4c:	9300      	str	r3, [sp, #0]
 800cd4e:	2304      	movs	r3, #4
 800cd50:	f7f7 f81f 	bl	8003d92 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6858      	ldr	r0, [r3, #4]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	891b      	ldrh	r3, [r3, #8]
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	4619      	mov	r1, r3
 800cd60:	f7f6 fb02 	bl	8003368 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5500_SPI * x,  uint16_t ph_addr, uint8_t addr,uint8_t op, uint8_t * data, uint8_t lnght)
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b086      	sub	sp, #24
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
 800cd7a:	4608      	mov	r0, r1
 800cd7c:	4611      	mov	r1, r2
 800cd7e:	461a      	mov	r2, r3
 800cd80:	4603      	mov	r3, r0
 800cd82:	807b      	strh	r3, [r7, #2]
 800cd84:	460b      	mov	r3, r1
 800cd86:	707b      	strb	r3, [r7, #1]
 800cd88:	4613      	mov	r3, r2
 800cd8a:	703b      	strb	r3, [r7, #0]
 uint16_t res=0;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	82fb      	strh	r3, [r7, #22]
 uint8_t  a=op;
 800cd90:	783b      	ldrb	r3, [r7, #0]
 800cd92:	72fb      	strb	r3, [r7, #11]

 x->TX[0]= (ph_addr & 0xFF00)>>8; 				//High Address Phase
 800cd94:	887b      	ldrh	r3, [r7, #2]
 800cd96:	0a1b      	lsrs	r3, r3, #8
 800cd98:	b29b      	uxth	r3, r3
 800cd9a:	b2da      	uxtb	r2, r3
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	771a      	strb	r2, [r3, #28]
 x->TX[1]= ph_addr & 0x00FF;					//Low Address Phase
 800cda0:	887b      	ldrh	r3, [r7, #2]
 800cda2:	b2da      	uxtb	r2, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	775a      	strb	r2, [r3, #29]
 x->TX[2]= ((addr)<<3)|((op)<<2);
 800cda8:	787b      	ldrb	r3, [r7, #1]
 800cdaa:	00db      	lsls	r3, r3, #3
 800cdac:	b25a      	sxtb	r2, r3
 800cdae:	783b      	ldrb	r3, [r7, #0]
 800cdb0:	009b      	lsls	r3, r3, #2
 800cdb2:	b25b      	sxtb	r3, r3
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	b25b      	sxtb	r3, r3
 800cdb8:	b2da      	uxtb	r2, r3
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	779a      	strb	r2, [r3, #30]
 x->TX[3]=0x00;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	77da      	strb	r2, [r3, #31]
 if(op == 1)								//Write operation
 800cdc4:	783b      	ldrb	r3, [r7, #0]
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d11d      	bne.n	800ce06 <SPI_ETH_REG+0x94>
 {
	 for(int i=0; i<(lnght); i++)			//Esto solo incrementa 256 ubicaciones
 800cdca:	2300      	movs	r3, #0
 800cdcc:	613b      	str	r3, [r7, #16]
 800cdce:	e013      	b.n	800cdf8 <SPI_ETH_REG+0x86>
	 {
		x->TX[3]=data[i];					//Put data to be sent
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	6a3a      	ldr	r2, [r7, #32]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	781a      	ldrb	r2, [r3, #0]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	77da      	strb	r2, [r3, #31]
		res=SPI_ETH(x);						//Send data to device
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f7ff ffa0 	bl	800cd22 <SPI_ETH>
 800cde2:	4603      	mov	r3, r0
 800cde4:	82fb      	strh	r3, [r7, #22]
		x->TX[1]++;							//Address increased once
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	7f5b      	ldrb	r3, [r3, #29]
 800cdea:	3301      	adds	r3, #1
 800cdec:	b2da      	uxtb	r2, r3
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	775a      	strb	r2, [r3, #29]
	 for(int i=0; i<(lnght); i++)			//Esto solo incrementa 256 ubicaciones
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	613b      	str	r3, [r7, #16]
 800cdf8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cdfc:	693a      	ldr	r2, [r7, #16]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	dbe6      	blt.n	800cdd0 <SPI_ETH_REG+0x5e>
	 }
	 return(res);
 800ce02:	8afb      	ldrh	r3, [r7, #22]
 800ce04:	e037      	b.n	800ce76 <SPI_ETH_REG+0x104>
 }
	 if(op == 0)							//Read operation
 800ce06:	783b      	ldrb	r3, [r7, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d134      	bne.n	800ce76 <SPI_ETH_REG+0x104>
	 {
		 x->TX[3]=0x00;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	77da      	strb	r2, [r3, #31]
		 if (lnght==2)
 800ce12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ce16:	2b02      	cmp	r3, #2
 800ce18:	d120      	bne.n	800ce5c <SPI_ETH_REG+0xea>
		{
		for(int i=0; i<(lnght); i++)
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	60fb      	str	r3, [r7, #12]
 800ce1e:	e016      	b.n	800ce4e <SPI_ETH_REG+0xdc>
			{
			res|=SPI_ETH(x);
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f7ff ff7e 	bl	800cd22 <SPI_ETH>
 800ce26:	4603      	mov	r3, r0
 800ce28:	b29a      	uxth	r2, r3
 800ce2a:	8afb      	ldrh	r3, [r7, #22]
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	82fb      	strh	r3, [r7, #22]
			x->TX[1]++;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	7f5b      	ldrb	r3, [r3, #29]
 800ce34:	3301      	adds	r3, #1
 800ce36:	b2da      	uxtb	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	775a      	strb	r2, [r3, #29]
			if (i==0)res=res<<8;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d102      	bne.n	800ce48 <SPI_ETH_REG+0xd6>
 800ce42:	8afb      	ldrh	r3, [r7, #22]
 800ce44:	021b      	lsls	r3, r3, #8
 800ce46:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	60fb      	str	r3, [r7, #12]
 800ce4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ce52:	68fa      	ldr	r2, [r7, #12]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	dbe3      	blt.n	800ce20 <SPI_ETH_REG+0xae>
			}
		 return(res);
 800ce58:	8afb      	ldrh	r3, [r7, #22]
 800ce5a:	e00c      	b.n	800ce76 <SPI_ETH_REG+0x104>
		}else
		{
			res=SPI_ETH(x);
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f7ff ff60 	bl	800cd22 <SPI_ETH>
 800ce62:	4603      	mov	r3, r0
 800ce64:	82fb      	strh	r3, [r7, #22]
			x->TX[1]++;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	7f5b      	ldrb	r3, [r3, #29]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	b2da      	uxtb	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	775a      	strb	r2, [r3, #29]
			return(res);
 800ce72:	8afb      	ldrh	r3, [r7, #22]
 800ce74:	e7ff      	b.n	800ce76 <SPI_ETH_REG+0x104>
		}
 	 }
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3718      	adds	r7, #24
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5500_SPI * x, uint16_t addr, uint16_t  data, uint8_t socket)
{
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b088      	sub	sp, #32
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	60f8      	str	r0, [r7, #12]
 800ce86:	4608      	mov	r0, r1
 800ce88:	4611      	mov	r1, r2
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	817b      	strh	r3, [r7, #10]
 800ce90:	460b      	mov	r3, r1
 800ce92:	813b      	strh	r3, [r7, #8]
 800ce94:	4613      	mov	r3, r2
 800ce96:	71fb      	strb	r3, [r7, #7]
	uint16_t res=0;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	83fb      	strh	r3, [r7, #30]
	uint8_t num[2];
			x->TX[2]= ((socket)<<3)|0x04;
 800ce9c:	79fb      	ldrb	r3, [r7, #7]
 800ce9e:	00db      	lsls	r3, r3, #3
 800cea0:	b25b      	sxtb	r3, r3
 800cea2:	f043 0304 	orr.w	r3, r3, #4
 800cea6:	b25b      	sxtb	r3, r3
 800cea8:	b2da      	uxtb	r2, r3
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	779a      	strb	r2, [r3, #30]
			num[1] = data & 0x00FF ;
 800ceae:	893b      	ldrh	r3, [r7, #8]
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	757b      	strb	r3, [r7, #21]
			num[0] = (data & 0xFF00)>>8 ;
 800ceb4:	893b      	ldrh	r3, [r7, #8]
 800ceb6:	0a1b      	lsrs	r3, r3, #8
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	753b      	strb	r3, [r7, #20]

			 for(int i=0; i<(2); i++)
 800cebe:	2300      	movs	r3, #0
 800cec0:	61bb      	str	r3, [r7, #24]
 800cec2:	e01b      	b.n	800cefc <SPI_ETH_WR_REG_16+0x7e>
				 {
				 	x->TX[1]= addr & 0x00FF;//x->TX[2]= addr & 0x00FF;
 800cec4:	897b      	ldrh	r3, [r7, #10]
 800cec6:	b2da      	uxtb	r2, r3
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	775a      	strb	r2, [r3, #29]
				 	x->TX[0]=(addr & 0xFF00)>>8;//x->TX[1]=(addr & 0xFF00)>>8;
 800cecc:	897b      	ldrh	r3, [r7, #10]
 800cece:	0a1b      	lsrs	r3, r3, #8
 800ced0:	b29b      	uxth	r3, r3
 800ced2:	b2da      	uxtb	r2, r3
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	771a      	strb	r2, [r3, #28]
					addr++;
 800ced8:	897b      	ldrh	r3, [r7, #10]
 800ceda:	3301      	adds	r3, #1
 800cedc:	817b      	strh	r3, [r7, #10]
					x->TX[3]=num[i];
 800cede:	f107 0214 	add.w	r2, r7, #20
 800cee2:	69bb      	ldr	r3, [r7, #24]
 800cee4:	4413      	add	r3, r2
 800cee6:	781a      	ldrb	r2, [r3, #0]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	77da      	strb	r2, [r3, #31]
					res=SPI_ETH(x);
 800ceec:	68f8      	ldr	r0, [r7, #12]
 800ceee:	f7ff ff18 	bl	800cd22 <SPI_ETH>
 800cef2:	4603      	mov	r3, r0
 800cef4:	83fb      	strh	r3, [r7, #30]
			 for(int i=0; i<(2); i++)
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	3301      	adds	r3, #1
 800cefa:	61bb      	str	r3, [r7, #24]
 800cefc:	69bb      	ldr	r3, [r7, #24]
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	dde0      	ble.n	800cec4 <SPI_ETH_WR_REG_16+0x46>
				 }
			 return(res);
 800cf02:	8bfb      	ldrh	r3, [r7, #30]
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3720      	adds	r7, #32
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5500_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght, uint8_t socket )
{
 800cf0c:	b590      	push	{r4, r7, lr}
 800cf0e:	b087      	sub	sp, #28
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	607a      	str	r2, [r7, #4]
 800cf16:	461a      	mov	r2, r3
 800cf18:	460b      	mov	r3, r1
 800cf1a:	817b      	strh	r3, [r7, #10]
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	813b      	strh	r3, [r7, #8]
		x->TX[2]= ((socket)<<3)|0x00;
 800cf20:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cf24:	00db      	lsls	r3, r3, #3
 800cf26:	b2da      	uxtb	r2, r3
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	779a      	strb	r2, [r3, #30]
	if(lnght < 2048)
 800cf2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cf2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf32:	d226      	bcs.n	800cf82 <SPI_ETH_RD_RCV_REG_16+0x76>
	{
			x->TX[3]=0x00;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	2200      	movs	r2, #0
 800cf38:	77da      	strb	r2, [r3, #31]
			for(int i=0; i<(lnght); i++)
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	617b      	str	r3, [r7, #20]
 800cf3e:	e01a      	b.n	800cf76 <SPI_ETH_RD_RCV_REG_16+0x6a>
				{
				x->TX[1] = addr & 0x00FF;
 800cf40:	897b      	ldrh	r3, [r7, #10]
 800cf42:	b2da      	uxtb	r2, r3
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	775a      	strb	r2, [r3, #29]
				x->TX[0] = (addr & 0xFF00)>>8;
 800cf48:	897b      	ldrh	r3, [r7, #10]
 800cf4a:	0a1b      	lsrs	r3, r3, #8
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	b2da      	uxtb	r2, r3
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	771a      	strb	r2, [r3, #28]
				data[i+offset]=SPI_ETH(x);
 800cf54:	893a      	ldrh	r2, [r7, #8]
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	4413      	add	r3, r2
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	189c      	adds	r4, r3, r2
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f7ff fede 	bl	800cd22 <SPI_ETH>
 800cf66:	4603      	mov	r3, r0
 800cf68:	7023      	strb	r3, [r4, #0]
				addr++;
 800cf6a:	897b      	ldrh	r3, [r7, #10]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	3301      	adds	r3, #1
 800cf74:	617b      	str	r3, [r7, #20]
 800cf76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cf78:	697a      	ldr	r2, [r7, #20]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	dbe0      	blt.n	800cf40 <SPI_ETH_RD_RCV_REG_16+0x34>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800cf7e:	2300      	movs	r3, #0
 800cf80:	e000      	b.n	800cf84 <SPI_ETH_RD_RCV_REG_16+0x78>
	}
	else
	{
	return(1);
 800cf82:	2301      	movs	r3, #1
	}
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	371c      	adds	r7, #28
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd90      	pop	{r4, r7, pc}

0800cf8c <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5500_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght, uint8_t socket )
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b086      	sub	sp, #24
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	60f8      	str	r0, [r7, #12]
 800cf94:	607a      	str	r2, [r7, #4]
 800cf96:	461a      	mov	r2, r3
 800cf98:	460b      	mov	r3, r1
 800cf9a:	817b      	strh	r3, [r7, #10]
 800cf9c:	4613      	mov	r3, r2
 800cf9e:	813b      	strh	r3, [r7, #8]
		x->TX[2]= ((socket)<<3)|0x04;
 800cfa0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cfa4:	00db      	lsls	r3, r3, #3
 800cfa6:	b25b      	sxtb	r3, r3
 800cfa8:	f043 0304 	orr.w	r3, r3, #4
 800cfac:	b25b      	sxtb	r3, r3
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	779a      	strb	r2, [r3, #30]
	if(lnght < 2048)
 800cfb4:	8c3b      	ldrh	r3, [r7, #32]
 800cfb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cfba:	d224      	bcs.n	800d006 <SPI_ETH_WR_TX_REG_16+0x7a>
	{

			for(int i=0; i<(lnght); i++)
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	617b      	str	r3, [r7, #20]
 800cfc0:	e01b      	b.n	800cffa <SPI_ETH_WR_TX_REG_16+0x6e>
				{
				x->TX[1] = addr & 0x00FF;
 800cfc2:	897b      	ldrh	r3, [r7, #10]
 800cfc4:	b2da      	uxtb	r2, r3
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	775a      	strb	r2, [r3, #29]
				x->TX[0] = (addr & 0xFF00)>>8;
 800cfca:	897b      	ldrh	r3, [r7, #10]
 800cfcc:	0a1b      	lsrs	r3, r3, #8
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	b2da      	uxtb	r2, r3
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	771a      	strb	r2, [r3, #28]
				x->TX[3]= x->data[i+offset];
 800cfd6:	893a      	ldrh	r2, [r7, #8]
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	4413      	add	r3, r2
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	4413      	add	r3, r2
 800cfe0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	77da      	strb	r2, [r3, #31]
				SPI_ETH(x);
 800cfe8:	68f8      	ldr	r0, [r7, #12]
 800cfea:	f7ff fe9a 	bl	800cd22 <SPI_ETH>
				addr++;
 800cfee:	897b      	ldrh	r3, [r7, #10]
 800cff0:	3301      	adds	r3, #1
 800cff2:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	3301      	adds	r3, #1
 800cff8:	617b      	str	r3, [r7, #20]
 800cffa:	8c3b      	ldrh	r3, [r7, #32]
 800cffc:	697a      	ldr	r2, [r7, #20]
 800cffe:	429a      	cmp	r2, r3
 800d000:	dbdf      	blt.n	800cfc2 <SPI_ETH_WR_TX_REG_16+0x36>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d002:	2300      	movs	r3, #0
 800d004:	e000      	b.n	800d008 <SPI_ETH_WR_TX_REG_16+0x7c>
	}
	else
	{
	return(1);
 800d006:	2301      	movs	r3, #1
	}
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3718      	adds	r7, #24
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5500_SPI * y, uint8_t socket, uint8_t z)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b082      	sub	sp, #8
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	460b      	mov	r3, r1
 800d01a:	70fb      	strb	r3, [r7, #3]
 800d01c:	4613      	mov	r3, r2
 800d01e:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= 0x00; 				//High Address Phase Hardcoded MR Register
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	771a      	strb	r2, [r3, #28]
	y->TX[1]= 0x01;					//Low Address Phase Command
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2201      	movs	r2, #1
 800d02a:	775a      	strb	r2, [r3, #29]
	y->TX[2]= ((socket<<3)|0x04);	//Control Phase address + R/W + OP Mode
 800d02c:	78fb      	ldrb	r3, [r7, #3]
 800d02e:	00db      	lsls	r3, r3, #3
 800d030:	b25b      	sxtb	r3, r3
 800d032:	f043 0304 	orr.w	r3, r3, #4
 800d036:	b25b      	sxtb	r3, r3
 800d038:	b2da      	uxtb	r2, r3
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	779a      	strb	r2, [r3, #30]
	y->TX[3]= z ;		//Load data to save
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	78ba      	ldrb	r2, [r7, #2]
 800d042:	77da      	strb	r2, [r3, #31]
	SPI_ETH(y);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f7ff fe6c 	bl	800cd22 <SPI_ETH>
}
 800d04a:	bf00      	nop
 800d04c:	4618      	mov	r0, r3
 800d04e:	3708      	adds	r7, #8
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5500_SPI * y, uint8_t socket, uint8_t z)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	460b      	mov	r3, r1
 800d05e:	70fb      	strb	r3, [r7, #3]
 800d060:	4613      	mov	r3, r2
 800d062:	70bb      	strb	r3, [r7, #2]
		y->TX[0]= 0x00; 				//High Address Phase Hardcoded MR Register
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	771a      	strb	r2, [r3, #28]
		y->TX[1]= 0x00;					//Low Address Phase Mode
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2200      	movs	r2, #0
 800d06e:	775a      	strb	r2, [r3, #29]
		y->TX[2]= ((socket)<<3)|0x04;	//Control Phase address + R/W + OP Mode
 800d070:	78fb      	ldrb	r3, [r7, #3]
 800d072:	00db      	lsls	r3, r3, #3
 800d074:	b25b      	sxtb	r3, r3
 800d076:	f043 0304 	orr.w	r3, r3, #4
 800d07a:	b25b      	sxtb	r3, r3
 800d07c:	b2da      	uxtb	r2, r3
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	779a      	strb	r2, [r3, #30]
		y->TX[3]= z ;		//Load data to save
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	78ba      	ldrb	r2, [r7, #2]
 800d086:	77da      	strb	r2, [r3, #31]

	SPI_ETH(y);
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f7ff fe4a 	bl	800cd22 <SPI_ETH>
}
 800d08e:	bf00      	nop
 800d090:	4618      	mov	r0, r3
 800d092:	3708      	adds	r7, #8
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <eth_init>:


uint8_t eth_init(struct W5500_SPI * ETH)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af02      	add	r7, sp, #8
 800d09e:	6078      	str	r0, [r7, #4]
  	 SPI_ETH_RESET(ETH);	//Reset W5500 por hardware
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f7ff fdf3 	bl	800cc8c <SPI_ETH_RESET>
  	 HAL_Delay(800);
 800d0a6:	f44f 7048 	mov.w	r0, #800	; 0x320
 800d0aa:	f7f5 fcfb 	bl	8002aa4 <HAL_Delay>

  	 SPI_ETH_REG(ETH, GAR,COMM_REG,SPI_WRITE, ETH->GAR,4);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d0b4:	3304      	adds	r3, #4
 800d0b6:	2204      	movs	r2, #4
 800d0b8:	9201      	str	r2, [sp, #4]
 800d0ba:	9300      	str	r3, [sp, #0]
 800d0bc:	2301      	movs	r3, #1
 800d0be:	2200      	movs	r2, #0
 800d0c0:	2101      	movs	r1, #1
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f7ff fe55 	bl	800cd72 <SPI_ETH_REG>

	 ETH->T8=0x00;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, IMR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0da:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d0de:	461a      	mov	r2, r3
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	9301      	str	r3, [sp, #4]
 800d0e4:	9200      	str	r2, [sp, #0]
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	2116      	movs	r1, #22
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f7ff fe40 	bl	800cd72 <SPI_ETH_REG>

	 ETH->T8=0x0F;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0f8:	220f      	movs	r2, #15
 800d0fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RTR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d104:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d108:	461a      	mov	r2, r3
 800d10a:	2301      	movs	r3, #1
 800d10c:	9301      	str	r3, [sp, #4]
 800d10e:	9200      	str	r2, [sp, #0]
 800d110:	2301      	movs	r3, #1
 800d112:	2200      	movs	r2, #0
 800d114:	2119      	movs	r1, #25
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f7ff fe2b 	bl	800cd72 <SPI_ETH_REG>

	 ETH->T8=0xA0;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d122:	22a0      	movs	r2, #160	; 0xa0
 800d124:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RTR+1,COMM_REG,SPI_WRITE, ETH->T8,1);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d12e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d132:	461a      	mov	r2, r3
 800d134:	2301      	movs	r3, #1
 800d136:	9301      	str	r3, [sp, #4]
 800d138:	9200      	str	r2, [sp, #0]
 800d13a:	2301      	movs	r3, #1
 800d13c:	2200      	movs	r2, #0
 800d13e:	211a      	movs	r1, #26
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f7ff fe16 	bl	800cd72 <SPI_ETH_REG>

	 ETH->T8=0x07;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d14c:	2207      	movs	r2, #7
 800d14e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RCR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d158:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d15c:	461a      	mov	r2, r3
 800d15e:	2301      	movs	r3, #1
 800d160:	9301      	str	r3, [sp, #4]
 800d162:	9200      	str	r2, [sp, #0]
 800d164:	2301      	movs	r3, #1
 800d166:	2200      	movs	r2, #0
 800d168:	211b      	movs	r1, #27
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f7ff fe01 	bl	800cd72 <SPI_ETH_REG>

	 ETH->T8=0x00;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d176:	2200      	movs	r2, #0
 800d178:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, SIMR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d182:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d186:	461a      	mov	r2, r3
 800d188:	2301      	movs	r3, #1
 800d18a:	9301      	str	r3, [sp, #4]
 800d18c:	9200      	str	r2, [sp, #0]
 800d18e:	2301      	movs	r3, #1
 800d190:	2200      	movs	r2, #0
 800d192:	2118      	movs	r1, #24
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f7ff fdec 	bl	800cd72 <SPI_ETH_REG>

	 SPI_ETH_REG(ETH, SHAR,COMM_REG,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d1a0:	330c      	adds	r3, #12
 800d1a2:	2206      	movs	r2, #6
 800d1a4:	9201      	str	r2, [sp, #4]
 800d1a6:	9300      	str	r3, [sp, #0]
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	2109      	movs	r1, #9
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f7ff fddf 	bl	800cd72 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-MAC SET\r\n",strlen("\r\nETH-W5500-MAC SET"));
 800d1b4:	2113      	movs	r1, #19
 800d1b6:	481d      	ldr	r0, [pc, #116]	; (800d22c <eth_init+0x194>)
 800d1b8:	f7f4 f964 	bl	8001484 <ITM0_Write>
	 SPI_ETH_REG(ETH, GAR,COMM_REG,SPI_WRITE, ETH->GAR,4);	//SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d1c2:	3304      	adds	r3, #4
 800d1c4:	2204      	movs	r2, #4
 800d1c6:	9201      	str	r2, [sp, #4]
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	2101      	movs	r1, #1
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f7ff fdce 	bl	800cd72 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-GATEWAY SET\r\n",strlen("\r\nETH-W5500-GATEWAY SET\r\n"));									//same for server and client
 800d1d6:	2119      	movs	r1, #25
 800d1d8:	4815      	ldr	r0, [pc, #84]	; (800d230 <eth_init+0x198>)
 800d1da:	f7f4 f953 	bl	8001484 <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR,COMM_REG,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d1e4:	3308      	adds	r3, #8
 800d1e6:	2204      	movs	r2, #4
 800d1e8:	9201      	str	r2, [sp, #4]
 800d1ea:	9300      	str	r3, [sp, #0]
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	2105      	movs	r1, #5
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f7ff fdbd 	bl	800cd72 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-SUBNET SET\r\n",strlen("\r\nETH-W5500-SUBNET SET"));											//same for server and client
 800d1f8:	2116      	movs	r1, #22
 800d1fa:	480e      	ldr	r0, [pc, #56]	; (800d234 <eth_init+0x19c>)
 800d1fc:	f7f4 f942 	bl	8001484 <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR,COMM_REG,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d206:	3312      	adds	r3, #18
 800d208:	2204      	movs	r2, #4
 800d20a:	9201      	str	r2, [sp, #4]
 800d20c:	9300      	str	r3, [sp, #0]
 800d20e:	2301      	movs	r3, #1
 800d210:	2200      	movs	r2, #0
 800d212:	210f      	movs	r1, #15
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f7ff fdac 	bl	800cd72 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-IP SET\r\n",strlen("\r\nETH-W5500-IP SET"));
 800d21a:	2112      	movs	r1, #18
 800d21c:	4806      	ldr	r0, [pc, #24]	; (800d238 <eth_init+0x1a0>)
 800d21e:	f7f4 f931 	bl	8001484 <ITM0_Write>

}
 800d222:	bf00      	nop
 800d224:	4618      	mov	r0, r3
 800d226:	3708      	adds	r7, #8
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	080107bc 	.word	0x080107bc
 800d230:	080107d4 	.word	0x080107d4
 800d234:	080107f0 	.word	0x080107f0
 800d238:	0801080c 	.word	0x0801080c

0800d23c <eth_socket_init>:

uint8_t eth_socket_init(struct W5500_SPI * ETH, uint8_t socket)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b086      	sub	sp, #24
 800d240:	af02      	add	r7, sp, #8
 800d242:	6078      	str	r0, [r7, #4]
 800d244:	460b      	mov	r3, r1
 800d246:	70fb      	strb	r3, [r7, #3]

	 ETH->T8=0x02;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d24e:	2202      	movs	r2, #2
 800d250:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S0_REG,SPI_WRITE, ETH->T8,1);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d25a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d25e:	461a      	mov	r2, r3
 800d260:	2301      	movs	r3, #1
 800d262:	9301      	str	r3, [sp, #4]
 800d264:	9200      	str	r2, [sp, #0]
 800d266:	2301      	movs	r3, #1
 800d268:	2201      	movs	r2, #1
 800d26a:	211e      	movs	r1, #30
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f7ff fd80 	bl	800cd72 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S0_REG,SPI_WRITE, ETH->T8,1);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d278:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d27c:	461a      	mov	r2, r3
 800d27e:	2301      	movs	r3, #1
 800d280:	9301      	str	r3, [sp, #4]
 800d282:	9200      	str	r2, [sp, #0]
 800d284:	2301      	movs	r3, #1
 800d286:	2201      	movs	r2, #1
 800d288:	211f      	movs	r1, #31
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f7ff fd71 	bl	800cd72 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S1_REG,SPI_WRITE, ETH->T8,1);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d296:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d29a:	461a      	mov	r2, r3
 800d29c:	2301      	movs	r3, #1
 800d29e:	9301      	str	r3, [sp, #4]
 800d2a0:	9200      	str	r2, [sp, #0]
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	2205      	movs	r2, #5
 800d2a6:	211e      	movs	r1, #30
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f7ff fd62 	bl	800cd72 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S1_REG,SPI_WRITE, ETH->T8,1);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2b4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	9301      	str	r3, [sp, #4]
 800d2be:	9200      	str	r2, [sp, #0]
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	2205      	movs	r2, #5
 800d2c4:	211f      	movs	r1, #31
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f7ff fd53 	bl	800cd72 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S2_REG,SPI_WRITE, ETH->T8,1);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2d2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	2301      	movs	r3, #1
 800d2da:	9301      	str	r3, [sp, #4]
 800d2dc:	9200      	str	r2, [sp, #0]
 800d2de:	2301      	movs	r3, #1
 800d2e0:	2209      	movs	r2, #9
 800d2e2:	211e      	movs	r1, #30
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7ff fd44 	bl	800cd72 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S2_REG,SPI_WRITE, ETH->T8,1);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d2f0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	9301      	str	r3, [sp, #4]
 800d2fa:	9200      	str	r2, [sp, #0]
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	2209      	movs	r2, #9
 800d300:	211f      	movs	r1, #31
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f7ff fd35 	bl	800cd72 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S3_REG,SPI_WRITE, ETH->T8,1);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d30e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d312:	461a      	mov	r2, r3
 800d314:	2301      	movs	r3, #1
 800d316:	9301      	str	r3, [sp, #4]
 800d318:	9200      	str	r2, [sp, #0]
 800d31a:	2301      	movs	r3, #1
 800d31c:	220d      	movs	r2, #13
 800d31e:	211e      	movs	r1, #30
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f7ff fd26 	bl	800cd72 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S3_REG,SPI_WRITE, ETH->T8,1);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d32c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d330:	461a      	mov	r2, r3
 800d332:	2301      	movs	r3, #1
 800d334:	9301      	str	r3, [sp, #4]
 800d336:	9200      	str	r2, [sp, #0]
 800d338:	2301      	movs	r3, #1
 800d33a:	220d      	movs	r2, #13
 800d33c:	211f      	movs	r1, #31
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7ff fd17 	bl	800cd72 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S4_REG,SPI_WRITE, ETH->T8,1);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d34a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d34e:	461a      	mov	r2, r3
 800d350:	2301      	movs	r3, #1
 800d352:	9301      	str	r3, [sp, #4]
 800d354:	9200      	str	r2, [sp, #0]
 800d356:	2301      	movs	r3, #1
 800d358:	2211      	movs	r2, #17
 800d35a:	211e      	movs	r1, #30
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7ff fd08 	bl	800cd72 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S4_REG,SPI_WRITE, ETH->T8,1);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d368:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d36c:	461a      	mov	r2, r3
 800d36e:	2301      	movs	r3, #1
 800d370:	9301      	str	r3, [sp, #4]
 800d372:	9200      	str	r2, [sp, #0]
 800d374:	2301      	movs	r3, #1
 800d376:	2211      	movs	r2, #17
 800d378:	211f      	movs	r1, #31
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f7ff fcf9 	bl	800cd72 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S5_REG,SPI_WRITE, ETH->T8,1);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d386:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d38a:	461a      	mov	r2, r3
 800d38c:	2301      	movs	r3, #1
 800d38e:	9301      	str	r3, [sp, #4]
 800d390:	9200      	str	r2, [sp, #0]
 800d392:	2301      	movs	r3, #1
 800d394:	2215      	movs	r2, #21
 800d396:	211e      	movs	r1, #30
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f7ff fcea 	bl	800cd72 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S5_REG,SPI_WRITE, ETH->T8,1);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3a4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	9301      	str	r3, [sp, #4]
 800d3ae:	9200      	str	r2, [sp, #0]
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	2215      	movs	r2, #21
 800d3b4:	211f      	movs	r1, #31
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f7ff fcdb 	bl	800cd72 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S6_REG,SPI_WRITE, ETH->T8,1);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3c2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	9301      	str	r3, [sp, #4]
 800d3cc:	9200      	str	r2, [sp, #0]
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	2219      	movs	r2, #25
 800d3d2:	211e      	movs	r1, #30
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f7ff fccc 	bl	800cd72 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S6_REG,SPI_WRITE, ETH->T8,1);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3e0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	9301      	str	r3, [sp, #4]
 800d3ea:	9200      	str	r2, [sp, #0]
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	2219      	movs	r2, #25
 800d3f0:	211f      	movs	r1, #31
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f7ff fcbd 	bl	800cd72 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S7_REG,SPI_WRITE, ETH->T8,1);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d3fe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d402:	461a      	mov	r2, r3
 800d404:	2301      	movs	r3, #1
 800d406:	9301      	str	r3, [sp, #4]
 800d408:	9200      	str	r2, [sp, #0]
 800d40a:	2301      	movs	r3, #1
 800d40c:	221d      	movs	r2, #29
 800d40e:	211e      	movs	r1, #30
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f7ff fcae 	bl	800cd72 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S7_REG,SPI_WRITE, ETH->T8,1);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d41c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d420:	461a      	mov	r2, r3
 800d422:	2301      	movs	r3, #1
 800d424:	9301      	str	r3, [sp, #4]
 800d426:	9200      	str	r2, [sp, #0]
 800d428:	2301      	movs	r3, #1
 800d42a:	221d      	movs	r2, #29
 800d42c:	211f      	movs	r1, #31
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f7ff fc9f 	bl	800cd72 <SPI_ETH_REG>
	 ETH->T8=0x00;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d43a:	2200      	movs	r2, #0
 800d43c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, S_TX_WR,S0_REG,SPI_WRITE, ETH->T8,1);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d446:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d44a:	461a      	mov	r2, r3
 800d44c:	2301      	movs	r3, #1
 800d44e:	9301      	str	r3, [sp, #4]
 800d450:	9200      	str	r2, [sp, #0]
 800d452:	2301      	movs	r3, #1
 800d454:	2201      	movs	r2, #1
 800d456:	2124      	movs	r1, #36	; 0x24
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f7ff fc8a 	bl	800cd72 <SPI_ETH_REG>
	 SPI_ETH_REG(ETH, S_TX_WR+1,S0_REG,SPI_WRITE, ETH->T8,1);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d464:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d468:	461a      	mov	r2, r3
 800d46a:	2301      	movs	r3, #1
 800d46c:	9301      	str	r3, [sp, #4]
 800d46e:	9200      	str	r2, [sp, #0]
 800d470:	2301      	movs	r3, #1
 800d472:	2201      	movs	r2, #1
 800d474:	2125      	movs	r1, #37	; 0x25
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f7ff fc7b 	bl	800cd72 <SPI_ETH_REG>
	 uint16_t b=0;
 800d47c:	2300      	movs	r3, #0
 800d47e:	81fb      	strh	r3, [r7, #14]
	 uint8_t spi_Data[2];
	 b = SPI_ETH_REG(ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 800d480:	2302      	movs	r3, #2
 800d482:	9301      	str	r3, [sp, #4]
 800d484:	f107 030c 	add.w	r3, r7, #12
 800d488:	9300      	str	r3, [sp, #0]
 800d48a:	2300      	movs	r3, #0
 800d48c:	2201      	movs	r2, #1
 800d48e:	2124      	movs	r1, #36	; 0x24
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f7ff fc6e 	bl	800cd72 <SPI_ETH_REG>
 800d496:	4603      	mov	r3, r0
 800d498:	81fb      	strh	r3, [r7, #14]
	 //ITM0_Write("\r\nETH-W5500-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP SET"));									//same for server and client
	 SPI_ETH_REG(ETH, S_PORT, S0_REG,SPI_WRITE, ETH->S_PORT,2);									//same for server and client
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d4a0:	3302      	adds	r3, #2
 800d4a2:	2202      	movs	r2, #2
 800d4a4:	9201      	str	r2, [sp, #4]
 800d4a6:	9300      	str	r3, [sp, #0]
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	2104      	movs	r1, #4
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f7ff fc5f 	bl	800cd72 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800d4b4:	212c      	movs	r1, #44	; 0x2c
 800d4b6:	4804      	ldr	r0, [pc, #16]	; (800d4c8 <eth_socket_init+0x28c>)
 800d4b8:	f7f3 ffe4 	bl	8001484 <ITM0_Write>


}
 800d4bc:	bf00      	nop
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	08010824 	.word	0x08010824

0800d4cc <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5500_SPI * y, uint8_t socket)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	460b      	mov	r3, r1
 800d4d6:	70fb      	strb	r3, [r7, #3]
			y->TX[0]= 0x00; 				//High Address Phase Hardcoded Stat Register
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	771a      	strb	r2, [r3, #28]
			y->TX[1]= 0x03;					//Low Address Phase Mode
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2203      	movs	r2, #3
 800d4e2:	775a      	strb	r2, [r3, #29]
			y->TX[2]= ((socket)<<3)|0x00;	   //Control Phase address + R/W + OP Mode
 800d4e4:	78fb      	ldrb	r3, [r7, #3]
 800d4e6:	00db      	lsls	r3, r3, #3
 800d4e8:	b2da      	uxtb	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	779a      	strb	r2, [r3, #30]
			SPI_ETH(y);
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f7ff fc17 	bl	800cd22 <SPI_ETH>
			return(y->RX[3]);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23

}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3708      	adds	r7, #8
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}

0800d502 <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5500_SPI * y, uint8_t socket)
{
 800d502:	b580      	push	{r7, lr}
 800d504:	b082      	sub	sp, #8
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]
 800d50a:	460b      	mov	r3, r1
 800d50c:	70fb      	strb	r3, [r7, #3]
			y->TX[0]= 0x00; 				//High Address Phase Hardcoded Command Register
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2200      	movs	r2, #0
 800d512:	771a      	strb	r2, [r3, #28]
			y->TX[1]= 0x01;					//Low Address Phase Mode
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2201      	movs	r2, #1
 800d518:	775a      	strb	r2, [r3, #29]
			y->TX[2]= ((socket)<<3)|0x00;	   //Control Phase address + R/W + OP Mode
 800d51a:	78fb      	ldrb	r3, [r7, #3]
 800d51c:	00db      	lsls	r3, r3, #3
 800d51e:	b2da      	uxtb	r2, r3
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	779a      	strb	r2, [r3, #30]
			SPI_ETH(y);
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f7ff fbfc 	bl	800cd22 <SPI_ETH>
			return(y->RX[3]);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23

}
 800d530:	4618      	mov	r0, r3
 800d532:	3708      	adds	r7, #8
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5500_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b08c      	sub	sp, #48	; 0x30
 800d53c:	af02      	add	r7, sp, #8
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	607a      	str	r2, [r7, #4]
 800d542:	461a      	mov	r2, r3
 800d544:	460b      	mov	r3, r1
 800d546:	72fb      	strb	r3, [r7, #11]
 800d548:	4613      	mov	r3, r2
 800d54a:	813b      	strh	r3, [r7, #8]
	uint16_t S_bf_rcv_offset=0,
 800d54c:	2300      	movs	r3, #0
 800d54e:	84fb      	strh	r3, [r7, #38]	; 0x26
			 left_size=0,
 800d550:	2300      	movs	r3, #0
 800d552:	84bb      	strh	r3, [r7, #36]	; 0x24
			 upper_size=0,
 800d554:	2300      	movs	r3, #0
 800d556:	847b      	strh	r3, [r7, #34]	; 0x22
			 destination_addr=0,
 800d558:	2300      	movs	r3, #0
 800d55a:	843b      	strh	r3, [r7, #32]
			 S_RX_RD=0,
 800d55c:	2300      	movs	r3, #0
 800d55e:	83fb      	strh	r3, [r7, #30]
			 S_get_offset=0,
 800d560:	2300      	movs	r3, #0
 800d562:	83bb      	strh	r3, [r7, #28]
			 S_get_start_address=0,
 800d564:	2300      	movs	r3, #0
 800d566:	837b      	strh	r3, [r7, #26]
			 S_mem_pointer=0,
 800d568:	2300      	movs	r3, #0
 800d56a:	833b      	strh	r3, [r7, #24]
			 RX_MASK=0,
 800d56c:	2300      	movs	r3, #0
 800d56e:	82fb      	strh	r3, [r7, #22]
			 RX_BASE=0;
 800d570:	2300      	movs	r3, #0
 800d572:	82bb      	strh	r3, [r7, #20]
			RX_BASE=ETH->gS3_RX_BASE;
		}
		break;*/
		default :
		{
			RX_MASK=ETH->gS_RX_MASK;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d57a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d57e:	82fb      	strh	r3, [r7, #22]
			RX_BASE=ETH->gS_RX_BASE;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d58a:	82bb      	strh	r3, [r7, #20]
		}
		break;
 800d58c:	bf00      	nop
	}

	S_RX_RD = SPI_ETH_REG(ETH, S_RX_RD0 ,S0_REG ,SPI_READ, spi_Data,2);//S_RX_RD = SPI_ETH_REG(ETH, S_RX_RD_ADDR_BASEHH + socket ,S_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800d58e:	2302      	movs	r3, #2
 800d590:	9301      	str	r3, [sp, #4]
 800d592:	f107 0310 	add.w	r3, r7, #16
 800d596:	9300      	str	r3, [sp, #0]
 800d598:	2300      	movs	r3, #0
 800d59a:	2201      	movs	r2, #1
 800d59c:	2128      	movs	r1, #40	; 0x28
 800d59e:	68f8      	ldr	r0, [r7, #12]
 800d5a0:	f7ff fbe7 	bl	800cd72 <SPI_ETH_REG>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	83fb      	strh	r3, [r7, #30]
	S_get_offset = S_RX_RD & RX_MASK;
 800d5a8:	8bfa      	ldrh	r2, [r7, #30]
 800d5aa:	8afb      	ldrh	r3, [r7, #22]
 800d5ac:	4013      	ands	r3, r2
 800d5ae:	83bb      	strh	r3, [r7, #28]
	S_get_start_address  = RX_BASE + S_get_offset;
 800d5b0:	8aba      	ldrh	r2, [r7, #20]
 800d5b2:	8bbb      	ldrh	r3, [r7, #28]
 800d5b4:	4413      	add	r3, r2
 800d5b6:	837b      	strh	r3, [r7, #26]
	if((S_get_offset  + sizedata )>(RX_MASK + 1))
 800d5b8:	8bba      	ldrh	r2, [r7, #28]
 800d5ba:	893b      	ldrh	r3, [r7, #8]
 800d5bc:	441a      	add	r2, r3
 800d5be:	8afb      	ldrh	r3, [r7, #22]
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	dd30      	ble.n	800d628 <eth_rd_SOCKET_DATA+0xf0>
		{
			upper_size = (RX_MASK + 1) - S_get_offset ;
 800d5c6:	8afa      	ldrh	r2, [r7, #22]
 800d5c8:	8bbb      	ldrh	r3, [r7, #28]
 800d5ca:	1ad3      	subs	r3, r2, r3
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , S_get_start_address , ETH->data , S_bf_rcv_offset, upper_size, socket);
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d5d8:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800d5da:	8b79      	ldrh	r1, [r7, #26]
 800d5dc:	7afb      	ldrb	r3, [r7, #11]
 800d5de:	9301      	str	r3, [sp, #4]
 800d5e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5e2:	9300      	str	r3, [sp, #0]
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	f7ff fc90 	bl	800cf0c <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800d5ec:	8c3a      	ldrh	r2, [r7, #32]
 800d5ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5f0:	4413      	add	r3, r2
 800d5f2:	843b      	strh	r3, [r7, #32]
			left_size=sizedata-upper_size;
 800d5f4:	893a      	ldrh	r2, [r7, #8]
 800d5f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5f8:	1ad3      	subs	r3, r2, r3
 800d5fa:	84bb      	strh	r3, [r7, #36]	; 0x24
			S_bf_rcv_offset=upper_size;
 800d5fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5fe:	84fb      	strh	r3, [r7, #38]	; 0x26
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S_bf_rcv_offset, left_size, socket);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d606:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800d608:	8ab9      	ldrh	r1, [r7, #20]
 800d60a:	7afb      	ldrb	r3, [r7, #11]
 800d60c:	9301      	str	r3, [sp, #4]
 800d60e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d610:	9300      	str	r3, [sp, #0]
 800d612:	4603      	mov	r3, r0
 800d614:	68f8      	ldr	r0, [r7, #12]
 800d616:	f7ff fc79 	bl	800cf0c <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S_RX_RD + sizedata;
 800d61a:	8bfa      	ldrh	r2, [r7, #30]
 800d61c:	893b      	ldrh	r3, [r7, #8]
 800d61e:	4413      	add	r3, r2
 800d620:	b29a      	uxth	r2, r3
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	801a      	strh	r2, [r3, #0]
 800d626:	e012      	b.n	800d64e <eth_rd_SOCKET_DATA+0x116>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S_get_start_address , ETH->data , S_bf_rcv_offset, sizedata, socket);
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d62e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800d630:	8b79      	ldrh	r1, [r7, #26]
 800d632:	7afb      	ldrb	r3, [r7, #11]
 800d634:	9301      	str	r3, [sp, #4]
 800d636:	893b      	ldrh	r3, [r7, #8]
 800d638:	9300      	str	r3, [sp, #0]
 800d63a:	4603      	mov	r3, r0
 800d63c:	68f8      	ldr	r0, [r7, #12]
 800d63e:	f7ff fc65 	bl	800cf0c <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S_RX_RD + sizedata;
 800d642:	8bfa      	ldrh	r2, [r7, #30]
 800d644:	893b      	ldrh	r3, [r7, #8]
 800d646:	4413      	add	r3, r2
 800d648:	b29a      	uxth	r2, r3
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	b29b      	uxth	r3, r3
}
 800d652:	4618      	mov	r0, r3
 800d654:	3728      	adds	r7, #40	; 0x28
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5500_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b08c      	sub	sp, #48	; 0x30
 800d65e:	af02      	add	r7, sp, #8
 800d660:	60f8      	str	r0, [r7, #12]
 800d662:	607a      	str	r2, [r7, #4]
 800d664:	461a      	mov	r2, r3
 800d666:	460b      	mov	r3, r1
 800d668:	72fb      	strb	r3, [r7, #11]
 800d66a:	4613      	mov	r3, r2
 800d66c:	813b      	strh	r3, [r7, #8]
	uint16_t S_bf_rcv_offset=0,
 800d66e:	2300      	movs	r3, #0
 800d670:	84bb      	strh	r3, [r7, #36]	; 0x24
			 left_size=0,
 800d672:	2300      	movs	r3, #0
 800d674:	847b      	strh	r3, [r7, #34]	; 0x22
			 upper_size=0,
 800d676:	2300      	movs	r3, #0
 800d678:	843b      	strh	r3, [r7, #32]
			 source_addr=0,
 800d67a:	2300      	movs	r3, #0
 800d67c:	83fb      	strh	r3, [r7, #30]
			 Sn_TX_WR=0,
 800d67e:	2300      	movs	r3, #0
 800d680:	83bb      	strh	r3, [r7, #28]
			 get_offset=0,
 800d682:	2300      	movs	r3, #0
 800d684:	837b      	strh	r3, [r7, #26]
			 get_free_size=0,
 800d686:	2300      	movs	r3, #0
 800d688:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800d68a:	2300      	movs	r3, #0
 800d68c:	833b      	strh	r3, [r7, #24]
			 S_mem_pointer=0,
 800d68e:	2300      	movs	r3, #0
 800d690:	82fb      	strh	r3, [r7, #22]
			 TX_MASK=0,
 800d692:	2300      	movs	r3, #0
 800d694:	82bb      	strh	r3, [r7, #20]
			 TX_BASE=0;
 800d696:	2300      	movs	r3, #0
 800d698:	827b      	strh	r3, [r7, #18]
			TX_BASE=ETH->gS3_TX_BASE;
		}
		break;*/
		default :
		{
			TX_MASK=ETH->gS_TX_MASK;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d6a4:	82bb      	strh	r3, [r7, #20]
			TX_BASE=ETH->gS_TX_BASE;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d6b0:	827b      	strh	r3, [r7, #18]
		}
		break;
 800d6b2:	bf00      	nop
	}

	while(get_free_size<send_size)
 800d6b4:	e00c      	b.n	800d6d0 <eth_wr_SOCKET_DATA+0x76>
			{
				get_free_size=SPI_ETH_REG(ETH, S_TX_FSR, S0_REG ,SPI_READ, spi_Data,2);//get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S_TX_FSR	=   0x420,
 800d6b6:	2302      	movs	r3, #2
 800d6b8:	9301      	str	r3, [sp, #4]
 800d6ba:	f107 0310 	add.w	r3, r7, #16
 800d6be:	9300      	str	r3, [sp, #0]
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	2120      	movs	r1, #32
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	f7ff fb53 	bl	800cd72 <SPI_ETH_REG>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800d6d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d6d2:	893b      	ldrh	r3, [r7, #8]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d3ee      	bcc.n	800d6b6 <eth_wr_SOCKET_DATA+0x5c>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2); // S_TX_RD =   0x424,Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S_TX_RD =   0x424,
 800d6d8:	2302      	movs	r3, #2
 800d6da:	9301      	str	r3, [sp, #4]
 800d6dc:	f107 0310 	add.w	r3, r7, #16
 800d6e0:	9300      	str	r3, [sp, #0]
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	2124      	movs	r1, #36	; 0x24
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f7ff fb42 	bl	800cd72 <SPI_ETH_REG>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	83bb      	strh	r3, [r7, #28]
				get_offset= Sn_TX_WR & TX_MASK;
 800d6f2:	8bba      	ldrh	r2, [r7, #28]
 800d6f4:	8abb      	ldrh	r3, [r7, #20]
 800d6f6:	4013      	ands	r3, r2
 800d6f8:	837b      	strh	r3, [r7, #26]
				get_start_address=TX_BASE + get_offset;
 800d6fa:	8a7a      	ldrh	r2, [r7, #18]
 800d6fc:	8b7b      	ldrh	r3, [r7, #26]
 800d6fe:	4413      	add	r3, r2
 800d700:	833b      	strh	r3, [r7, #24]

				if((get_offset + send_size)>(TX_MASK + 1))
 800d702:	8b7a      	ldrh	r2, [r7, #26]
 800d704:	893b      	ldrh	r3, [r7, #8]
 800d706:	441a      	add	r2, r3
 800d708:	8abb      	ldrh	r3, [r7, #20]
 800d70a:	3301      	adds	r3, #1
 800d70c:	429a      	cmp	r2, r3
 800d70e:	dd30      	ble.n	800d772 <eth_wr_SOCKET_DATA+0x118>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800d710:	8aba      	ldrh	r2, [r7, #20]
 800d712:	8b7b      	ldrh	r3, [r7, #26]
 800d714:	1ad3      	subs	r3, r2, r3
 800d716:	b29b      	uxth	r3, r3
 800d718:	3301      	adds	r3, #1
 800d71a:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S_bf_rcv_offset, upper_size,socket);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d722:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800d724:	8b39      	ldrh	r1, [r7, #24]
 800d726:	7afb      	ldrb	r3, [r7, #11]
 800d728:	9301      	str	r3, [sp, #4]
 800d72a:	8c3b      	ldrh	r3, [r7, #32]
 800d72c:	9300      	str	r3, [sp, #0]
 800d72e:	4603      	mov	r3, r0
 800d730:	68f8      	ldr	r0, [r7, #12]
 800d732:	f7ff fc2b 	bl	800cf8c <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800d736:	8bfa      	ldrh	r2, [r7, #30]
 800d738:	8c3b      	ldrh	r3, [r7, #32]
 800d73a:	4413      	add	r3, r2
 800d73c:	83fb      	strh	r3, [r7, #30]
						left_size=send_size-upper_size;
 800d73e:	893a      	ldrh	r2, [r7, #8]
 800d740:	8c3b      	ldrh	r3, [r7, #32]
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	847b      	strh	r3, [r7, #34]	; 0x22
						S_bf_rcv_offset=upper_size;
 800d746:	8c3b      	ldrh	r3, [r7, #32]
 800d748:	84bb      	strh	r3, [r7, #36]	; 0x24
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S_bf_rcv_offset, left_size, socket);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d750:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800d752:	8a79      	ldrh	r1, [r7, #18]
 800d754:	7afb      	ldrb	r3, [r7, #11]
 800d756:	9301      	str	r3, [sp, #4]
 800d758:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	4603      	mov	r3, r0
 800d75e:	68f8      	ldr	r0, [r7, #12]
 800d760:	f7ff fc14 	bl	800cf8c <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800d764:	8bba      	ldrh	r2, [r7, #28]
 800d766:	893b      	ldrh	r3, [r7, #8]
 800d768:	4413      	add	r3, r2
 800d76a:	b29a      	uxth	r2, r3
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	801a      	strh	r2, [r3, #0]
 800d770:	e012      	b.n	800d798 <eth_wr_SOCKET_DATA+0x13e>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S_bf_rcv_offset, send_size, socket);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d778:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800d77a:	8b39      	ldrh	r1, [r7, #24]
 800d77c:	7afb      	ldrb	r3, [r7, #11]
 800d77e:	9301      	str	r3, [sp, #4]
 800d780:	893b      	ldrh	r3, [r7, #8]
 800d782:	9300      	str	r3, [sp, #0]
 800d784:	4603      	mov	r3, r0
 800d786:	68f8      	ldr	r0, [r7, #12]
 800d788:	f7ff fc00 	bl	800cf8c <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800d78c:	8bba      	ldrh	r2, [r7, #28]
 800d78e:	893b      	ldrh	r3, [r7, #8]
 800d790:	4413      	add	r3, r2
 800d792:	b29a      	uxth	r2, r3
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	801a      	strh	r2, [r3, #0]
					}

}
 800d798:	bf00      	nop
 800d79a:	4618      	mov	r0, r3
 800d79c:	3728      	adds	r7, #40	; 0x28
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}

0800d7a2 <SPI_ETH_SNIFF>:

uint8_t SPI_ETH_SNIFF(struct W5500_SPY * Y,struct W5500_SPI * X)
{
 800d7a2:	b580      	push	{r7, lr}
 800d7a4:	b084      	sub	sp, #16
 800d7a6:	af02      	add	r7, sp, #8
 800d7a8:	6078      	str	r0, [r7, #4]
 800d7aa:	6039      	str	r1, [r7, #0]
	Y->MR=SPI_ETH_REG(X, 0 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d7b2:	3318      	adds	r3, #24
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	9201      	str	r2, [sp, #4]
 800d7b8:	9300      	str	r3, [sp, #0]
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	2200      	movs	r2, #0
 800d7be:	2100      	movs	r1, #0
 800d7c0:	6838      	ldr	r0, [r7, #0]
 800d7c2:	f7ff fad6 	bl	800cd72 <SPI_ETH_REG>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	b2da      	uxtb	r2, r3
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	701a      	strb	r2, [r3, #0]

	Y->GAR[0]=SPI_ETH_REG(X, 1 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d7d4:	3318      	adds	r3, #24
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	9201      	str	r2, [sp, #4]
 800d7da:	9300      	str	r3, [sp, #0]
 800d7dc:	2300      	movs	r3, #0
 800d7de:	2200      	movs	r2, #0
 800d7e0:	2101      	movs	r1, #1
 800d7e2:	6838      	ldr	r0, [r7, #0]
 800d7e4:	f7ff fac5 	bl	800cd72 <SPI_ETH_REG>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	b2da      	uxtb	r2, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	705a      	strb	r2, [r3, #1]
	Y->GAR[1]=SPI_ETH_REG(X, 2 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d7f6:	3318      	adds	r3, #24
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	9201      	str	r2, [sp, #4]
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	2300      	movs	r3, #0
 800d800:	2200      	movs	r2, #0
 800d802:	2102      	movs	r1, #2
 800d804:	6838      	ldr	r0, [r7, #0]
 800d806:	f7ff fab4 	bl	800cd72 <SPI_ETH_REG>
 800d80a:	4603      	mov	r3, r0
 800d80c:	b2da      	uxtb	r2, r3
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	709a      	strb	r2, [r3, #2]
	Y->GAR[2]=SPI_ETH_REG(X, 3 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d818:	3318      	adds	r3, #24
 800d81a:	2201      	movs	r2, #1
 800d81c:	9201      	str	r2, [sp, #4]
 800d81e:	9300      	str	r3, [sp, #0]
 800d820:	2300      	movs	r3, #0
 800d822:	2200      	movs	r2, #0
 800d824:	2103      	movs	r1, #3
 800d826:	6838      	ldr	r0, [r7, #0]
 800d828:	f7ff faa3 	bl	800cd72 <SPI_ETH_REG>
 800d82c:	4603      	mov	r3, r0
 800d82e:	b2da      	uxtb	r2, r3
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	70da      	strb	r2, [r3, #3]
	Y->GAR[3]=SPI_ETH_REG(X, 4 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d83a:	3318      	adds	r3, #24
 800d83c:	2201      	movs	r2, #1
 800d83e:	9201      	str	r2, [sp, #4]
 800d840:	9300      	str	r3, [sp, #0]
 800d842:	2300      	movs	r3, #0
 800d844:	2200      	movs	r2, #0
 800d846:	2104      	movs	r1, #4
 800d848:	6838      	ldr	r0, [r7, #0]
 800d84a:	f7ff fa92 	bl	800cd72 <SPI_ETH_REG>
 800d84e:	4603      	mov	r3, r0
 800d850:	b2da      	uxtb	r2, r3
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	711a      	strb	r2, [r3, #4]

	Y->SUBR[0]=SPI_ETH_REG(X, 5 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d85c:	3318      	adds	r3, #24
 800d85e:	2201      	movs	r2, #1
 800d860:	9201      	str	r2, [sp, #4]
 800d862:	9300      	str	r3, [sp, #0]
 800d864:	2300      	movs	r3, #0
 800d866:	2200      	movs	r2, #0
 800d868:	2105      	movs	r1, #5
 800d86a:	6838      	ldr	r0, [r7, #0]
 800d86c:	f7ff fa81 	bl	800cd72 <SPI_ETH_REG>
 800d870:	4603      	mov	r3, r0
 800d872:	b2da      	uxtb	r2, r3
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	715a      	strb	r2, [r3, #5]
	Y->SUBR[1]=SPI_ETH_REG(X, 6 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d87e:	3318      	adds	r3, #24
 800d880:	2201      	movs	r2, #1
 800d882:	9201      	str	r2, [sp, #4]
 800d884:	9300      	str	r3, [sp, #0]
 800d886:	2300      	movs	r3, #0
 800d888:	2200      	movs	r2, #0
 800d88a:	2106      	movs	r1, #6
 800d88c:	6838      	ldr	r0, [r7, #0]
 800d88e:	f7ff fa70 	bl	800cd72 <SPI_ETH_REG>
 800d892:	4603      	mov	r3, r0
 800d894:	b2da      	uxtb	r2, r3
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	719a      	strb	r2, [r3, #6]
	Y->SUBR[2]=SPI_ETH_REG(X, 7 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d8a0:	3318      	adds	r3, #24
 800d8a2:	2201      	movs	r2, #1
 800d8a4:	9201      	str	r2, [sp, #4]
 800d8a6:	9300      	str	r3, [sp, #0]
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	2107      	movs	r1, #7
 800d8ae:	6838      	ldr	r0, [r7, #0]
 800d8b0:	f7ff fa5f 	bl	800cd72 <SPI_ETH_REG>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	b2da      	uxtb	r2, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	71da      	strb	r2, [r3, #7]
	Y->SUBR[3]=SPI_ETH_REG(X, 8 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d8c2:	3318      	adds	r3, #24
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	9201      	str	r2, [sp, #4]
 800d8c8:	9300      	str	r3, [sp, #0]
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	2108      	movs	r1, #8
 800d8d0:	6838      	ldr	r0, [r7, #0]
 800d8d2:	f7ff fa4e 	bl	800cd72 <SPI_ETH_REG>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	b2da      	uxtb	r2, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	721a      	strb	r2, [r3, #8]

	Y->SHAR[0]=SPI_ETH_REG(X, 9 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d8e4:	3318      	adds	r3, #24
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	9201      	str	r2, [sp, #4]
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	2109      	movs	r1, #9
 800d8f2:	6838      	ldr	r0, [r7, #0]
 800d8f4:	f7ff fa3d 	bl	800cd72 <SPI_ETH_REG>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	b2da      	uxtb	r2, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	725a      	strb	r2, [r3, #9]
	Y->SHAR[1]=SPI_ETH_REG(X, 10 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d906:	3318      	adds	r3, #24
 800d908:	2201      	movs	r2, #1
 800d90a:	9201      	str	r2, [sp, #4]
 800d90c:	9300      	str	r3, [sp, #0]
 800d90e:	2300      	movs	r3, #0
 800d910:	2200      	movs	r2, #0
 800d912:	210a      	movs	r1, #10
 800d914:	6838      	ldr	r0, [r7, #0]
 800d916:	f7ff fa2c 	bl	800cd72 <SPI_ETH_REG>
 800d91a:	4603      	mov	r3, r0
 800d91c:	b2da      	uxtb	r2, r3
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	729a      	strb	r2, [r3, #10]
	Y->SHAR[2]=SPI_ETH_REG(X, 11 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d928:	3318      	adds	r3, #24
 800d92a:	2201      	movs	r2, #1
 800d92c:	9201      	str	r2, [sp, #4]
 800d92e:	9300      	str	r3, [sp, #0]
 800d930:	2300      	movs	r3, #0
 800d932:	2200      	movs	r2, #0
 800d934:	210b      	movs	r1, #11
 800d936:	6838      	ldr	r0, [r7, #0]
 800d938:	f7ff fa1b 	bl	800cd72 <SPI_ETH_REG>
 800d93c:	4603      	mov	r3, r0
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	72da      	strb	r2, [r3, #11]
	Y->SHAR[3]=SPI_ETH_REG(X, 12 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d94a:	3318      	adds	r3, #24
 800d94c:	2201      	movs	r2, #1
 800d94e:	9201      	str	r2, [sp, #4]
 800d950:	9300      	str	r3, [sp, #0]
 800d952:	2300      	movs	r3, #0
 800d954:	2200      	movs	r2, #0
 800d956:	210c      	movs	r1, #12
 800d958:	6838      	ldr	r0, [r7, #0]
 800d95a:	f7ff fa0a 	bl	800cd72 <SPI_ETH_REG>
 800d95e:	4603      	mov	r3, r0
 800d960:	b2da      	uxtb	r2, r3
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	731a      	strb	r2, [r3, #12]
	Y->SHAR[4]=SPI_ETH_REG(X, 13 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d96c:	3318      	adds	r3, #24
 800d96e:	2201      	movs	r2, #1
 800d970:	9201      	str	r2, [sp, #4]
 800d972:	9300      	str	r3, [sp, #0]
 800d974:	2300      	movs	r3, #0
 800d976:	2200      	movs	r2, #0
 800d978:	210d      	movs	r1, #13
 800d97a:	6838      	ldr	r0, [r7, #0]
 800d97c:	f7ff f9f9 	bl	800cd72 <SPI_ETH_REG>
 800d980:	4603      	mov	r3, r0
 800d982:	b2da      	uxtb	r2, r3
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	735a      	strb	r2, [r3, #13]
	Y->SHAR[5]=SPI_ETH_REG(X, 14 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d98e:	3318      	adds	r3, #24
 800d990:	2201      	movs	r2, #1
 800d992:	9201      	str	r2, [sp, #4]
 800d994:	9300      	str	r3, [sp, #0]
 800d996:	2300      	movs	r3, #0
 800d998:	2200      	movs	r2, #0
 800d99a:	210e      	movs	r1, #14
 800d99c:	6838      	ldr	r0, [r7, #0]
 800d99e:	f7ff f9e8 	bl	800cd72 <SPI_ETH_REG>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	b2da      	uxtb	r2, r3
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	739a      	strb	r2, [r3, #14]

	Y->SIPR[0]=SPI_ETH_REG(X, 15 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d9b0:	3318      	adds	r3, #24
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	9201      	str	r2, [sp, #4]
 800d9b6:	9300      	str	r3, [sp, #0]
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	210f      	movs	r1, #15
 800d9be:	6838      	ldr	r0, [r7, #0]
 800d9c0:	f7ff f9d7 	bl	800cd72 <SPI_ETH_REG>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	b2da      	uxtb	r2, r3
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	73da      	strb	r2, [r3, #15]
	Y->SIPR[1]=SPI_ETH_REG(X, 16 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d9d2:	3318      	adds	r3, #24
 800d9d4:	2201      	movs	r2, #1
 800d9d6:	9201      	str	r2, [sp, #4]
 800d9d8:	9300      	str	r3, [sp, #0]
 800d9da:	2300      	movs	r3, #0
 800d9dc:	2200      	movs	r2, #0
 800d9de:	2110      	movs	r1, #16
 800d9e0:	6838      	ldr	r0, [r7, #0]
 800d9e2:	f7ff f9c6 	bl	800cd72 <SPI_ETH_REG>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	741a      	strb	r2, [r3, #16]
	Y->SIPR[2]=SPI_ETH_REG(X, 17 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d9f4:	3318      	adds	r3, #24
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	9201      	str	r2, [sp, #4]
 800d9fa:	9300      	str	r3, [sp, #0]
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	2200      	movs	r2, #0
 800da00:	2111      	movs	r1, #17
 800da02:	6838      	ldr	r0, [r7, #0]
 800da04:	f7ff f9b5 	bl	800cd72 <SPI_ETH_REG>
 800da08:	4603      	mov	r3, r0
 800da0a:	b2da      	uxtb	r2, r3
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	745a      	strb	r2, [r3, #17]
	Y->SIPR[3]=SPI_ETH_REG(X, 18 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800da16:	3318      	adds	r3, #24
 800da18:	2201      	movs	r2, #1
 800da1a:	9201      	str	r2, [sp, #4]
 800da1c:	9300      	str	r3, [sp, #0]
 800da1e:	2300      	movs	r3, #0
 800da20:	2200      	movs	r2, #0
 800da22:	2112      	movs	r1, #18
 800da24:	6838      	ldr	r0, [r7, #0]
 800da26:	f7ff f9a4 	bl	800cd72 <SPI_ETH_REG>
 800da2a:	4603      	mov	r3, r0
 800da2c:	b2da      	uxtb	r2, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	749a      	strb	r2, [r3, #18]

	Y->INTLEVEL[0]=SPI_ETH_REG(X, 19 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800da38:	3318      	adds	r3, #24
 800da3a:	2201      	movs	r2, #1
 800da3c:	9201      	str	r2, [sp, #4]
 800da3e:	9300      	str	r3, [sp, #0]
 800da40:	2300      	movs	r3, #0
 800da42:	2200      	movs	r2, #0
 800da44:	2113      	movs	r1, #19
 800da46:	6838      	ldr	r0, [r7, #0]
 800da48:	f7ff f993 	bl	800cd72 <SPI_ETH_REG>
 800da4c:	4603      	mov	r3, r0
 800da4e:	b2da      	uxtb	r2, r3
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	74da      	strb	r2, [r3, #19]
	Y->INTLEVEL[1]=SPI_ETH_REG(X, 20 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800da5a:	3318      	adds	r3, #24
 800da5c:	2201      	movs	r2, #1
 800da5e:	9201      	str	r2, [sp, #4]
 800da60:	9300      	str	r3, [sp, #0]
 800da62:	2300      	movs	r3, #0
 800da64:	2200      	movs	r2, #0
 800da66:	2114      	movs	r1, #20
 800da68:	6838      	ldr	r0, [r7, #0]
 800da6a:	f7ff f982 	bl	800cd72 <SPI_ETH_REG>
 800da6e:	4603      	mov	r3, r0
 800da70:	b2da      	uxtb	r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	751a      	strb	r2, [r3, #20]

	Y->IR=SPI_ETH_REG(X, 21 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800da7c:	3318      	adds	r3, #24
 800da7e:	2201      	movs	r2, #1
 800da80:	9201      	str	r2, [sp, #4]
 800da82:	9300      	str	r3, [sp, #0]
 800da84:	2300      	movs	r3, #0
 800da86:	2200      	movs	r2, #0
 800da88:	2115      	movs	r1, #21
 800da8a:	6838      	ldr	r0, [r7, #0]
 800da8c:	f7ff f971 	bl	800cd72 <SPI_ETH_REG>
 800da90:	4603      	mov	r3, r0
 800da92:	b2da      	uxtb	r2, r3
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	755a      	strb	r2, [r3, #21]

	Y->IMR=SPI_ETH_REG(X, 22 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800da9e:	3318      	adds	r3, #24
 800daa0:	2201      	movs	r2, #1
 800daa2:	9201      	str	r2, [sp, #4]
 800daa4:	9300      	str	r3, [sp, #0]
 800daa6:	2300      	movs	r3, #0
 800daa8:	2200      	movs	r2, #0
 800daaa:	2116      	movs	r1, #22
 800daac:	6838      	ldr	r0, [r7, #0]
 800daae:	f7ff f960 	bl	800cd72 <SPI_ETH_REG>
 800dab2:	4603      	mov	r3, r0
 800dab4:	b2da      	uxtb	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	759a      	strb	r2, [r3, #22]

	Y->SIR=SPI_ETH_REG(X, 23 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dac0:	3318      	adds	r3, #24
 800dac2:	2201      	movs	r2, #1
 800dac4:	9201      	str	r2, [sp, #4]
 800dac6:	9300      	str	r3, [sp, #0]
 800dac8:	2300      	movs	r3, #0
 800daca:	2200      	movs	r2, #0
 800dacc:	2117      	movs	r1, #23
 800dace:	6838      	ldr	r0, [r7, #0]
 800dad0:	f7ff f94f 	bl	800cd72 <SPI_ETH_REG>
 800dad4:	4603      	mov	r3, r0
 800dad6:	b2da      	uxtb	r2, r3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	75da      	strb	r2, [r3, #23]

	Y->SIMR=SPI_ETH_REG(X, 24 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dae2:	3318      	adds	r3, #24
 800dae4:	2201      	movs	r2, #1
 800dae6:	9201      	str	r2, [sp, #4]
 800dae8:	9300      	str	r3, [sp, #0]
 800daea:	2300      	movs	r3, #0
 800daec:	2200      	movs	r2, #0
 800daee:	2118      	movs	r1, #24
 800daf0:	6838      	ldr	r0, [r7, #0]
 800daf2:	f7ff f93e 	bl	800cd72 <SPI_ETH_REG>
 800daf6:	4603      	mov	r3, r0
 800daf8:	b2da      	uxtb	r2, r3
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	761a      	strb	r2, [r3, #24]

	Y->RTR[0]=SPI_ETH_REG(X, 25 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db04:	3318      	adds	r3, #24
 800db06:	2201      	movs	r2, #1
 800db08:	9201      	str	r2, [sp, #4]
 800db0a:	9300      	str	r3, [sp, #0]
 800db0c:	2300      	movs	r3, #0
 800db0e:	2200      	movs	r2, #0
 800db10:	2119      	movs	r1, #25
 800db12:	6838      	ldr	r0, [r7, #0]
 800db14:	f7ff f92d 	bl	800cd72 <SPI_ETH_REG>
 800db18:	4603      	mov	r3, r0
 800db1a:	b2da      	uxtb	r2, r3
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	765a      	strb	r2, [r3, #25]
	Y->RTR[1]=SPI_ETH_REG(X, 26 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db26:	3318      	adds	r3, #24
 800db28:	2201      	movs	r2, #1
 800db2a:	9201      	str	r2, [sp, #4]
 800db2c:	9300      	str	r3, [sp, #0]
 800db2e:	2300      	movs	r3, #0
 800db30:	2200      	movs	r2, #0
 800db32:	211a      	movs	r1, #26
 800db34:	6838      	ldr	r0, [r7, #0]
 800db36:	f7ff f91c 	bl	800cd72 <SPI_ETH_REG>
 800db3a:	4603      	mov	r3, r0
 800db3c:	b2da      	uxtb	r2, r3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	769a      	strb	r2, [r3, #26]

	Y->RCR=SPI_ETH_REG(X, 27 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db48:	3318      	adds	r3, #24
 800db4a:	2201      	movs	r2, #1
 800db4c:	9201      	str	r2, [sp, #4]
 800db4e:	9300      	str	r3, [sp, #0]
 800db50:	2300      	movs	r3, #0
 800db52:	2200      	movs	r2, #0
 800db54:	211b      	movs	r1, #27
 800db56:	6838      	ldr	r0, [r7, #0]
 800db58:	f7ff f90b 	bl	800cd72 <SPI_ETH_REG>
 800db5c:	4603      	mov	r3, r0
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	76da      	strb	r2, [r3, #27]

	Y->PTIMER=SPI_ETH_REG(X, 28 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db6a:	3318      	adds	r3, #24
 800db6c:	2201      	movs	r2, #1
 800db6e:	9201      	str	r2, [sp, #4]
 800db70:	9300      	str	r3, [sp, #0]
 800db72:	2300      	movs	r3, #0
 800db74:	2200      	movs	r2, #0
 800db76:	211c      	movs	r1, #28
 800db78:	6838      	ldr	r0, [r7, #0]
 800db7a:	f7ff f8fa 	bl	800cd72 <SPI_ETH_REG>
 800db7e:	4603      	mov	r3, r0
 800db80:	b2da      	uxtb	r2, r3
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	771a      	strb	r2, [r3, #28]

	Y->PMAGIC=SPI_ETH_REG(X, 29 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db8c:	3318      	adds	r3, #24
 800db8e:	2201      	movs	r2, #1
 800db90:	9201      	str	r2, [sp, #4]
 800db92:	9300      	str	r3, [sp, #0]
 800db94:	2300      	movs	r3, #0
 800db96:	2200      	movs	r2, #0
 800db98:	211d      	movs	r1, #29
 800db9a:	6838      	ldr	r0, [r7, #0]
 800db9c:	f7ff f8e9 	bl	800cd72 <SPI_ETH_REG>
 800dba0:	4603      	mov	r3, r0
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	775a      	strb	r2, [r3, #29]

	Y->PHAR[0]=SPI_ETH_REG(X, 30 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dbae:	3318      	adds	r3, #24
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	9201      	str	r2, [sp, #4]
 800dbb4:	9300      	str	r3, [sp, #0]
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	2200      	movs	r2, #0
 800dbba:	211e      	movs	r1, #30
 800dbbc:	6838      	ldr	r0, [r7, #0]
 800dbbe:	f7ff f8d8 	bl	800cd72 <SPI_ETH_REG>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	b2da      	uxtb	r2, r3
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	779a      	strb	r2, [r3, #30]
	Y->PHAR[1]=SPI_ETH_REG(X, 31 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dbd0:	3318      	adds	r3, #24
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	9201      	str	r2, [sp, #4]
 800dbd6:	9300      	str	r3, [sp, #0]
 800dbd8:	2300      	movs	r3, #0
 800dbda:	2200      	movs	r2, #0
 800dbdc:	211f      	movs	r1, #31
 800dbde:	6838      	ldr	r0, [r7, #0]
 800dbe0:	f7ff f8c7 	bl	800cd72 <SPI_ETH_REG>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	b2da      	uxtb	r2, r3
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	77da      	strb	r2, [r3, #31]
	Y->PHAR[2]=SPI_ETH_REG(X, 32 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dbf2:	3318      	adds	r3, #24
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	9201      	str	r2, [sp, #4]
 800dbf8:	9300      	str	r3, [sp, #0]
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	2120      	movs	r1, #32
 800dc00:	6838      	ldr	r0, [r7, #0]
 800dc02:	f7ff f8b6 	bl	800cd72 <SPI_ETH_REG>
 800dc06:	4603      	mov	r3, r0
 800dc08:	b2da      	uxtb	r2, r3
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f883 2020 	strb.w	r2, [r3, #32]
	Y->PHAR[3]=SPI_ETH_REG(X, 33 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc16:	3318      	adds	r3, #24
 800dc18:	2201      	movs	r2, #1
 800dc1a:	9201      	str	r2, [sp, #4]
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	2300      	movs	r3, #0
 800dc20:	2200      	movs	r2, #0
 800dc22:	2121      	movs	r1, #33	; 0x21
 800dc24:	6838      	ldr	r0, [r7, #0]
 800dc26:	f7ff f8a4 	bl	800cd72 <SPI_ETH_REG>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	b2da      	uxtb	r2, r3
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Y->PHAR[4]=SPI_ETH_REG(X, 34 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc3a:	3318      	adds	r3, #24
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	9201      	str	r2, [sp, #4]
 800dc40:	9300      	str	r3, [sp, #0]
 800dc42:	2300      	movs	r3, #0
 800dc44:	2200      	movs	r2, #0
 800dc46:	2122      	movs	r1, #34	; 0x22
 800dc48:	6838      	ldr	r0, [r7, #0]
 800dc4a:	f7ff f892 	bl	800cd72 <SPI_ETH_REG>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	b2da      	uxtb	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Y->PHAR[5]=SPI_ETH_REG(X, 35 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc5e:	3318      	adds	r3, #24
 800dc60:	2201      	movs	r2, #1
 800dc62:	9201      	str	r2, [sp, #4]
 800dc64:	9300      	str	r3, [sp, #0]
 800dc66:	2300      	movs	r3, #0
 800dc68:	2200      	movs	r2, #0
 800dc6a:	2123      	movs	r1, #35	; 0x23
 800dc6c:	6838      	ldr	r0, [r7, #0]
 800dc6e:	f7ff f880 	bl	800cd72 <SPI_ETH_REG>
 800dc72:	4603      	mov	r3, r0
 800dc74:	b2da      	uxtb	r2, r3
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	Y->PSID[0]=SPI_ETH_REG(X, 36 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc82:	3318      	adds	r3, #24
 800dc84:	2201      	movs	r2, #1
 800dc86:	9201      	str	r2, [sp, #4]
 800dc88:	9300      	str	r3, [sp, #0]
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	2124      	movs	r1, #36	; 0x24
 800dc90:	6838      	ldr	r0, [r7, #0]
 800dc92:	f7ff f86e 	bl	800cd72 <SPI_ETH_REG>
 800dc96:	4603      	mov	r3, r0
 800dc98:	b2da      	uxtb	r2, r3
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Y->PSID[1]=SPI_ETH_REG(X, 37 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dca6:	3318      	adds	r3, #24
 800dca8:	2201      	movs	r2, #1
 800dcaa:	9201      	str	r2, [sp, #4]
 800dcac:	9300      	str	r3, [sp, #0]
 800dcae:	2300      	movs	r3, #0
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	2125      	movs	r1, #37	; 0x25
 800dcb4:	6838      	ldr	r0, [r7, #0]
 800dcb6:	f7ff f85c 	bl	800cd72 <SPI_ETH_REG>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	b2da      	uxtb	r2, r3
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	Y->PMRU[0]=SPI_ETH_REG(X, 38 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dcca:	3318      	adds	r3, #24
 800dccc:	2201      	movs	r2, #1
 800dcce:	9201      	str	r2, [sp, #4]
 800dcd0:	9300      	str	r3, [sp, #0]
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	2126      	movs	r1, #38	; 0x26
 800dcd8:	6838      	ldr	r0, [r7, #0]
 800dcda:	f7ff f84a 	bl	800cd72 <SPI_ETH_REG>
 800dcde:	4603      	mov	r3, r0
 800dce0:	b2da      	uxtb	r2, r3
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Y->PMRU[1]=SPI_ETH_REG(X, 39 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dcee:	3318      	adds	r3, #24
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	9201      	str	r2, [sp, #4]
 800dcf4:	9300      	str	r3, [sp, #0]
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	2127      	movs	r1, #39	; 0x27
 800dcfc:	6838      	ldr	r0, [r7, #0]
 800dcfe:	f7ff f838 	bl	800cd72 <SPI_ETH_REG>
 800dd02:	4603      	mov	r3, r0
 800dd04:	b2da      	uxtb	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	Y->UIPR[0]=SPI_ETH_REG(X, 40 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd12:	3318      	adds	r3, #24
 800dd14:	2201      	movs	r2, #1
 800dd16:	9201      	str	r2, [sp, #4]
 800dd18:	9300      	str	r3, [sp, #0]
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	2128      	movs	r1, #40	; 0x28
 800dd20:	6838      	ldr	r0, [r7, #0]
 800dd22:	f7ff f826 	bl	800cd72 <SPI_ETH_REG>
 800dd26:	4603      	mov	r3, r0
 800dd28:	b2da      	uxtb	r2, r3
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Y->UIPR[1]=SPI_ETH_REG(X, 41 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd36:	3318      	adds	r3, #24
 800dd38:	2201      	movs	r2, #1
 800dd3a:	9201      	str	r2, [sp, #4]
 800dd3c:	9300      	str	r3, [sp, #0]
 800dd3e:	2300      	movs	r3, #0
 800dd40:	2200      	movs	r2, #0
 800dd42:	2129      	movs	r1, #41	; 0x29
 800dd44:	6838      	ldr	r0, [r7, #0]
 800dd46:	f7ff f814 	bl	800cd72 <SPI_ETH_REG>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	b2da      	uxtb	r2, r3
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	Y->UIPR[2]=SPI_ETH_REG(X, 42 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd5a:	3318      	adds	r3, #24
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	9201      	str	r2, [sp, #4]
 800dd60:	9300      	str	r3, [sp, #0]
 800dd62:	2300      	movs	r3, #0
 800dd64:	2200      	movs	r2, #0
 800dd66:	212a      	movs	r1, #42	; 0x2a
 800dd68:	6838      	ldr	r0, [r7, #0]
 800dd6a:	f7ff f802 	bl	800cd72 <SPI_ETH_REG>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	b2da      	uxtb	r2, r3
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Y->UIPR[3]=SPI_ETH_REG(X, 43 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd7e:	3318      	adds	r3, #24
 800dd80:	2201      	movs	r2, #1
 800dd82:	9201      	str	r2, [sp, #4]
 800dd84:	9300      	str	r3, [sp, #0]
 800dd86:	2300      	movs	r3, #0
 800dd88:	2200      	movs	r2, #0
 800dd8a:	212b      	movs	r1, #43	; 0x2b
 800dd8c:	6838      	ldr	r0, [r7, #0]
 800dd8e:	f7fe fff0 	bl	800cd72 <SPI_ETH_REG>
 800dd92:	4603      	mov	r3, r0
 800dd94:	b2da      	uxtb	r2, r3
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	Y->UPORT[0]=SPI_ETH_REG(X, 44 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dda2:	3318      	adds	r3, #24
 800dda4:	2201      	movs	r2, #1
 800dda6:	9201      	str	r2, [sp, #4]
 800dda8:	9300      	str	r3, [sp, #0]
 800ddaa:	2300      	movs	r3, #0
 800ddac:	2200      	movs	r2, #0
 800ddae:	212c      	movs	r1, #44	; 0x2c
 800ddb0:	6838      	ldr	r0, [r7, #0]
 800ddb2:	f7fe ffde 	bl	800cd72 <SPI_ETH_REG>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	b2da      	uxtb	r2, r3
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	Y->UPORT[1]=SPI_ETH_REG(X, 45 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddc6:	3318      	adds	r3, #24
 800ddc8:	2201      	movs	r2, #1
 800ddca:	9201      	str	r2, [sp, #4]
 800ddcc:	9300      	str	r3, [sp, #0]
 800ddce:	2300      	movs	r3, #0
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	212d      	movs	r1, #45	; 0x2d
 800ddd4:	6838      	ldr	r0, [r7, #0]
 800ddd6:	f7fe ffcc 	bl	800cd72 <SPI_ETH_REG>
 800ddda:	4603      	mov	r3, r0
 800dddc:	b2da      	uxtb	r2, r3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	Y->PHYCFGR=SPI_ETH_REG(X, 46 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddea:	3318      	adds	r3, #24
 800ddec:	2201      	movs	r2, #1
 800ddee:	9201      	str	r2, [sp, #4]
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	212e      	movs	r1, #46	; 0x2e
 800ddf8:	6838      	ldr	r0, [r7, #0]
 800ddfa:	f7fe ffba 	bl	800cd72 <SPI_ETH_REG>
 800ddfe:	4603      	mov	r3, r0
 800de00:	b2da      	uxtb	r2, r3
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	Y->VERSIONR=SPI_ETH_REG(X, 57 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de0e:	3318      	adds	r3, #24
 800de10:	2201      	movs	r2, #1
 800de12:	9201      	str	r2, [sp, #4]
 800de14:	9300      	str	r3, [sp, #0]
 800de16:	2300      	movs	r3, #0
 800de18:	2200      	movs	r2, #0
 800de1a:	2139      	movs	r1, #57	; 0x39
 800de1c:	6838      	ldr	r0, [r7, #0]
 800de1e:	f7fe ffa8 	bl	800cd72 <SPI_ETH_REG>
 800de22:	4603      	mov	r3, r0
 800de24:	b2da      	uxtb	r2, r3
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	//---------------------------port -------------------------//
	Y->Sn_MR=SPI_ETH_REG(X, 0x00 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de32:	3318      	adds	r3, #24
 800de34:	2201      	movs	r2, #1
 800de36:	9201      	str	r2, [sp, #4]
 800de38:	9300      	str	r3, [sp, #0]
 800de3a:	2300      	movs	r3, #0
 800de3c:	2201      	movs	r2, #1
 800de3e:	2100      	movs	r1, #0
 800de40:	6838      	ldr	r0, [r7, #0]
 800de42:	f7fe ff96 	bl	800cd72 <SPI_ETH_REG>
 800de46:	4603      	mov	r3, r0
 800de48:	b2da      	uxtb	r2, r3
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	Y->Sn_CR=SPI_ETH_REG(X, 0x01 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de56:	3318      	adds	r3, #24
 800de58:	2201      	movs	r2, #1
 800de5a:	9201      	str	r2, [sp, #4]
 800de5c:	9300      	str	r3, [sp, #0]
 800de5e:	2300      	movs	r3, #0
 800de60:	2201      	movs	r2, #1
 800de62:	2101      	movs	r1, #1
 800de64:	6838      	ldr	r0, [r7, #0]
 800de66:	f7fe ff84 	bl	800cd72 <SPI_ETH_REG>
 800de6a:	4603      	mov	r3, r0
 800de6c:	b2da      	uxtb	r2, r3
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	Y->Sn_IR=SPI_ETH_REG(X, 0x02 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de7a:	3318      	adds	r3, #24
 800de7c:	2201      	movs	r2, #1
 800de7e:	9201      	str	r2, [sp, #4]
 800de80:	9300      	str	r3, [sp, #0]
 800de82:	2300      	movs	r3, #0
 800de84:	2201      	movs	r2, #1
 800de86:	2102      	movs	r1, #2
 800de88:	6838      	ldr	r0, [r7, #0]
 800de8a:	f7fe ff72 	bl	800cd72 <SPI_ETH_REG>
 800de8e:	4603      	mov	r3, r0
 800de90:	b2da      	uxtb	r2, r3
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	Y->Sn_SR=SPI_ETH_REG(X, 0x03 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de9e:	3318      	adds	r3, #24
 800dea0:	2201      	movs	r2, #1
 800dea2:	9201      	str	r2, [sp, #4]
 800dea4:	9300      	str	r3, [sp, #0]
 800dea6:	2300      	movs	r3, #0
 800dea8:	2201      	movs	r2, #1
 800deaa:	2103      	movs	r1, #3
 800deac:	6838      	ldr	r0, [r7, #0]
 800deae:	f7fe ff60 	bl	800cd72 <SPI_ETH_REG>
 800deb2:	4603      	mov	r3, r0
 800deb4:	b2da      	uxtb	r2, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	Y->Sn_PORT[0]=SPI_ETH_REG(X, 0x04 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dec2:	3318      	adds	r3, #24
 800dec4:	2201      	movs	r2, #1
 800dec6:	9201      	str	r2, [sp, #4]
 800dec8:	9300      	str	r3, [sp, #0]
 800deca:	2300      	movs	r3, #0
 800decc:	2201      	movs	r2, #1
 800dece:	2104      	movs	r1, #4
 800ded0:	6838      	ldr	r0, [r7, #0]
 800ded2:	f7fe ff4e 	bl	800cd72 <SPI_ETH_REG>
 800ded6:	4603      	mov	r3, r0
 800ded8:	b2da      	uxtb	r2, r3
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Y->Sn_PORT[1]=SPI_ETH_REG(X, 0x05 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dee6:	3318      	adds	r3, #24
 800dee8:	2201      	movs	r2, #1
 800deea:	9201      	str	r2, [sp, #4]
 800deec:	9300      	str	r3, [sp, #0]
 800deee:	2300      	movs	r3, #0
 800def0:	2201      	movs	r2, #1
 800def2:	2105      	movs	r1, #5
 800def4:	6838      	ldr	r0, [r7, #0]
 800def6:	f7fe ff3c 	bl	800cd72 <SPI_ETH_REG>
 800defa:	4603      	mov	r3, r0
 800defc:	b2da      	uxtb	r2, r3
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	Y->Sn_DHAR[0]=SPI_ETH_REG(X, 0x06 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df0a:	3318      	adds	r3, #24
 800df0c:	2201      	movs	r2, #1
 800df0e:	9201      	str	r2, [sp, #4]
 800df10:	9300      	str	r3, [sp, #0]
 800df12:	2300      	movs	r3, #0
 800df14:	2201      	movs	r2, #1
 800df16:	2106      	movs	r1, #6
 800df18:	6838      	ldr	r0, [r7, #0]
 800df1a:	f7fe ff2a 	bl	800cd72 <SPI_ETH_REG>
 800df1e:	4603      	mov	r3, r0
 800df20:	b2da      	uxtb	r2, r3
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Y->Sn_DHAR[1]=SPI_ETH_REG(X, 0x07 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df2e:	3318      	adds	r3, #24
 800df30:	2201      	movs	r2, #1
 800df32:	9201      	str	r2, [sp, #4]
 800df34:	9300      	str	r3, [sp, #0]
 800df36:	2300      	movs	r3, #0
 800df38:	2201      	movs	r2, #1
 800df3a:	2107      	movs	r1, #7
 800df3c:	6838      	ldr	r0, [r7, #0]
 800df3e:	f7fe ff18 	bl	800cd72 <SPI_ETH_REG>
 800df42:	4603      	mov	r3, r0
 800df44:	b2da      	uxtb	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	Y->Sn_DHAR[2]=SPI_ETH_REG(X, 0x08 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df52:	3318      	adds	r3, #24
 800df54:	2201      	movs	r2, #1
 800df56:	9201      	str	r2, [sp, #4]
 800df58:	9300      	str	r3, [sp, #0]
 800df5a:	2300      	movs	r3, #0
 800df5c:	2201      	movs	r2, #1
 800df5e:	2108      	movs	r1, #8
 800df60:	6838      	ldr	r0, [r7, #0]
 800df62:	f7fe ff06 	bl	800cd72 <SPI_ETH_REG>
 800df66:	4603      	mov	r3, r0
 800df68:	b2da      	uxtb	r2, r3
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	Y->Sn_DHAR[3]=SPI_ETH_REG(X, 0x09 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df76:	3318      	adds	r3, #24
 800df78:	2201      	movs	r2, #1
 800df7a:	9201      	str	r2, [sp, #4]
 800df7c:	9300      	str	r3, [sp, #0]
 800df7e:	2300      	movs	r3, #0
 800df80:	2201      	movs	r2, #1
 800df82:	2109      	movs	r1, #9
 800df84:	6838      	ldr	r0, [r7, #0]
 800df86:	f7fe fef4 	bl	800cd72 <SPI_ETH_REG>
 800df8a:	4603      	mov	r3, r0
 800df8c:	b2da      	uxtb	r2, r3
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	Y->Sn_DHAR[4]=SPI_ETH_REG(X, 0x0A ,S0_REG,SPI_READ, Y->DUMMY,1);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df9a:	3318      	adds	r3, #24
 800df9c:	2201      	movs	r2, #1
 800df9e:	9201      	str	r2, [sp, #4]
 800dfa0:	9300      	str	r3, [sp, #0]
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	2201      	movs	r2, #1
 800dfa6:	210a      	movs	r1, #10
 800dfa8:	6838      	ldr	r0, [r7, #0]
 800dfaa:	f7fe fee2 	bl	800cd72 <SPI_ETH_REG>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	b2da      	uxtb	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Y->Sn_DHAR[5]=SPI_ETH_REG(X, 0x0B ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dfbe:	3318      	adds	r3, #24
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	9201      	str	r2, [sp, #4]
 800dfc4:	9300      	str	r3, [sp, #0]
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	2201      	movs	r2, #1
 800dfca:	210b      	movs	r1, #11
 800dfcc:	6838      	ldr	r0, [r7, #0]
 800dfce:	f7fe fed0 	bl	800cd72 <SPI_ETH_REG>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	b2da      	uxtb	r2, r3
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	Y->Sn_DIPR[0]=SPI_ETH_REG(X, 0x0C ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dfe2:	3318      	adds	r3, #24
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	9201      	str	r2, [sp, #4]
 800dfe8:	9300      	str	r3, [sp, #0]
 800dfea:	2300      	movs	r3, #0
 800dfec:	2201      	movs	r2, #1
 800dfee:	210c      	movs	r1, #12
 800dff0:	6838      	ldr	r0, [r7, #0]
 800dff2:	f7fe febe 	bl	800cd72 <SPI_ETH_REG>
 800dff6:	4603      	mov	r3, r0
 800dff8:	b2da      	uxtb	r2, r3
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Y->Sn_DIPR[1]=SPI_ETH_REG(X, 0x0D ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e006:	3318      	adds	r3, #24
 800e008:	2201      	movs	r2, #1
 800e00a:	9201      	str	r2, [sp, #4]
 800e00c:	9300      	str	r3, [sp, #0]
 800e00e:	2300      	movs	r3, #0
 800e010:	2201      	movs	r2, #1
 800e012:	210d      	movs	r1, #13
 800e014:	6838      	ldr	r0, [r7, #0]
 800e016:	f7fe feac 	bl	800cd72 <SPI_ETH_REG>
 800e01a:	4603      	mov	r3, r0
 800e01c:	b2da      	uxtb	r2, r3
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Y->Sn_DIPR[2]=SPI_ETH_REG(X, 0x0E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e02a:	3318      	adds	r3, #24
 800e02c:	2201      	movs	r2, #1
 800e02e:	9201      	str	r2, [sp, #4]
 800e030:	9300      	str	r3, [sp, #0]
 800e032:	2300      	movs	r3, #0
 800e034:	2201      	movs	r2, #1
 800e036:	210e      	movs	r1, #14
 800e038:	6838      	ldr	r0, [r7, #0]
 800e03a:	f7fe fe9a 	bl	800cd72 <SPI_ETH_REG>
 800e03e:	4603      	mov	r3, r0
 800e040:	b2da      	uxtb	r2, r3
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Y->Sn_DIPR[3]=SPI_ETH_REG(X, 0x0F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e04e:	3318      	adds	r3, #24
 800e050:	2201      	movs	r2, #1
 800e052:	9201      	str	r2, [sp, #4]
 800e054:	9300      	str	r3, [sp, #0]
 800e056:	2300      	movs	r3, #0
 800e058:	2201      	movs	r2, #1
 800e05a:	210f      	movs	r1, #15
 800e05c:	6838      	ldr	r0, [r7, #0]
 800e05e:	f7fe fe88 	bl	800cd72 <SPI_ETH_REG>
 800e062:	4603      	mov	r3, r0
 800e064:	b2da      	uxtb	r2, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	Y->Sn_DPORT[0]=SPI_ETH_REG(X, 0x10 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e072:	3318      	adds	r3, #24
 800e074:	2201      	movs	r2, #1
 800e076:	9201      	str	r2, [sp, #4]
 800e078:	9300      	str	r3, [sp, #0]
 800e07a:	2300      	movs	r3, #0
 800e07c:	2201      	movs	r2, #1
 800e07e:	2110      	movs	r1, #16
 800e080:	6838      	ldr	r0, [r7, #0]
 800e082:	f7fe fe76 	bl	800cd72 <SPI_ETH_REG>
 800e086:	4603      	mov	r3, r0
 800e088:	b2da      	uxtb	r2, r3
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	Y->Sn_DPORT[1]=SPI_ETH_REG(X, 0x11 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e096:	3318      	adds	r3, #24
 800e098:	2201      	movs	r2, #1
 800e09a:	9201      	str	r2, [sp, #4]
 800e09c:	9300      	str	r3, [sp, #0]
 800e09e:	2300      	movs	r3, #0
 800e0a0:	2201      	movs	r2, #1
 800e0a2:	2111      	movs	r1, #17
 800e0a4:	6838      	ldr	r0, [r7, #0]
 800e0a6:	f7fe fe64 	bl	800cd72 <SPI_ETH_REG>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	b2da      	uxtb	r2, r3
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	Y->Sn_MSSR[0]=SPI_ETH_REG(X, 0x12 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0ba:	3318      	adds	r3, #24
 800e0bc:	2201      	movs	r2, #1
 800e0be:	9201      	str	r2, [sp, #4]
 800e0c0:	9300      	str	r3, [sp, #0]
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	2201      	movs	r2, #1
 800e0c6:	2112      	movs	r1, #18
 800e0c8:	6838      	ldr	r0, [r7, #0]
 800e0ca:	f7fe fe52 	bl	800cd72 <SPI_ETH_REG>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	b2da      	uxtb	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Y->Sn_MSSR[1]=SPI_ETH_REG(X, 0x13 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0de:	3318      	adds	r3, #24
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	9201      	str	r2, [sp, #4]
 800e0e4:	9300      	str	r3, [sp, #0]
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	2113      	movs	r1, #19
 800e0ec:	6838      	ldr	r0, [r7, #0]
 800e0ee:	f7fe fe40 	bl	800cd72 <SPI_ETH_REG>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	b2da      	uxtb	r2, r3
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	Y->Sn_TOS=SPI_ETH_REG(X, 0x15 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e102:	3318      	adds	r3, #24
 800e104:	2201      	movs	r2, #1
 800e106:	9201      	str	r2, [sp, #4]
 800e108:	9300      	str	r3, [sp, #0]
 800e10a:	2300      	movs	r3, #0
 800e10c:	2201      	movs	r2, #1
 800e10e:	2115      	movs	r1, #21
 800e110:	6838      	ldr	r0, [r7, #0]
 800e112:	f7fe fe2e 	bl	800cd72 <SPI_ETH_REG>
 800e116:	4603      	mov	r3, r0
 800e118:	b2da      	uxtb	r2, r3
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Y->Sn_TTL=SPI_ETH_REG(X, 0x16 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e126:	3318      	adds	r3, #24
 800e128:	2201      	movs	r2, #1
 800e12a:	9201      	str	r2, [sp, #4]
 800e12c:	9300      	str	r3, [sp, #0]
 800e12e:	2300      	movs	r3, #0
 800e130:	2201      	movs	r2, #1
 800e132:	2116      	movs	r1, #22
 800e134:	6838      	ldr	r0, [r7, #0]
 800e136:	f7fe fe1c 	bl	800cd72 <SPI_ETH_REG>
 800e13a:	4603      	mov	r3, r0
 800e13c:	b2da      	uxtb	r2, r3
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	Y->Sn_RXBUF_SIZE=SPI_ETH_REG(X, 0x1E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e14a:	3318      	adds	r3, #24
 800e14c:	2201      	movs	r2, #1
 800e14e:	9201      	str	r2, [sp, #4]
 800e150:	9300      	str	r3, [sp, #0]
 800e152:	2300      	movs	r3, #0
 800e154:	2201      	movs	r2, #1
 800e156:	211e      	movs	r1, #30
 800e158:	6838      	ldr	r0, [r7, #0]
 800e15a:	f7fe fe0a 	bl	800cd72 <SPI_ETH_REG>
 800e15e:	4603      	mov	r3, r0
 800e160:	b2da      	uxtb	r2, r3
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	Y->Sn_TXBUF_SIZE=SPI_ETH_REG(X, 0x1F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e16e:	3318      	adds	r3, #24
 800e170:	2201      	movs	r2, #1
 800e172:	9201      	str	r2, [sp, #4]
 800e174:	9300      	str	r3, [sp, #0]
 800e176:	2300      	movs	r3, #0
 800e178:	2201      	movs	r2, #1
 800e17a:	211f      	movs	r1, #31
 800e17c:	6838      	ldr	r0, [r7, #0]
 800e17e:	f7fe fdf8 	bl	800cd72 <SPI_ETH_REG>
 800e182:	4603      	mov	r3, r0
 800e184:	b2da      	uxtb	r2, r3
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	Y->Sn_TX_FSR[0]=SPI_ETH_REG(X, 0x20 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e192:	3318      	adds	r3, #24
 800e194:	2201      	movs	r2, #1
 800e196:	9201      	str	r2, [sp, #4]
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	2300      	movs	r3, #0
 800e19c:	2201      	movs	r2, #1
 800e19e:	2120      	movs	r1, #32
 800e1a0:	6838      	ldr	r0, [r7, #0]
 800e1a2:	f7fe fde6 	bl	800cd72 <SPI_ETH_REG>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	b2da      	uxtb	r2, r3
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Y->Sn_TX_FSR[1]=SPI_ETH_REG(X, 0x21 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e1b6:	3318      	adds	r3, #24
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	9201      	str	r2, [sp, #4]
 800e1bc:	9300      	str	r3, [sp, #0]
 800e1be:	2300      	movs	r3, #0
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	2121      	movs	r1, #33	; 0x21
 800e1c4:	6838      	ldr	r0, [r7, #0]
 800e1c6:	f7fe fdd4 	bl	800cd72 <SPI_ETH_REG>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	b2da      	uxtb	r2, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	Y->Sn_TX_RD[0]=SPI_ETH_REG(X, 0x22 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e1da:	3318      	adds	r3, #24
 800e1dc:	2201      	movs	r2, #1
 800e1de:	9201      	str	r2, [sp, #4]
 800e1e0:	9300      	str	r3, [sp, #0]
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	2122      	movs	r1, #34	; 0x22
 800e1e8:	6838      	ldr	r0, [r7, #0]
 800e1ea:	f7fe fdc2 	bl	800cd72 <SPI_ETH_REG>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	b2da      	uxtb	r2, r3
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Y->Sn_TX_RD[1]=SPI_ETH_REG(X, 0x23 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e1fe:	3318      	adds	r3, #24
 800e200:	2201      	movs	r2, #1
 800e202:	9201      	str	r2, [sp, #4]
 800e204:	9300      	str	r3, [sp, #0]
 800e206:	2300      	movs	r3, #0
 800e208:	2201      	movs	r2, #1
 800e20a:	2123      	movs	r1, #35	; 0x23
 800e20c:	6838      	ldr	r0, [r7, #0]
 800e20e:	f7fe fdb0 	bl	800cd72 <SPI_ETH_REG>
 800e212:	4603      	mov	r3, r0
 800e214:	b2da      	uxtb	r2, r3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	Y->Sn_TX_WR[0]=SPI_ETH_REG(X, 0x24 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e222:	3318      	adds	r3, #24
 800e224:	2201      	movs	r2, #1
 800e226:	9201      	str	r2, [sp, #4]
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	2300      	movs	r3, #0
 800e22c:	2201      	movs	r2, #1
 800e22e:	2124      	movs	r1, #36	; 0x24
 800e230:	6838      	ldr	r0, [r7, #0]
 800e232:	f7fe fd9e 	bl	800cd72 <SPI_ETH_REG>
 800e236:	4603      	mov	r3, r0
 800e238:	b2da      	uxtb	r2, r3
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Y->Sn_TX_WR[1]=SPI_ETH_REG(X, 0x25 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e246:	3318      	adds	r3, #24
 800e248:	2201      	movs	r2, #1
 800e24a:	9201      	str	r2, [sp, #4]
 800e24c:	9300      	str	r3, [sp, #0]
 800e24e:	2300      	movs	r3, #0
 800e250:	2201      	movs	r2, #1
 800e252:	2125      	movs	r1, #37	; 0x25
 800e254:	6838      	ldr	r0, [r7, #0]
 800e256:	f7fe fd8c 	bl	800cd72 <SPI_ETH_REG>
 800e25a:	4603      	mov	r3, r0
 800e25c:	b2da      	uxtb	r2, r3
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	Y->Sn_RX_RSR[0]=SPI_ETH_REG(X, 0x26 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e26a:	3318      	adds	r3, #24
 800e26c:	2201      	movs	r2, #1
 800e26e:	9201      	str	r2, [sp, #4]
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	2300      	movs	r3, #0
 800e274:	2201      	movs	r2, #1
 800e276:	2126      	movs	r1, #38	; 0x26
 800e278:	6838      	ldr	r0, [r7, #0]
 800e27a:	f7fe fd7a 	bl	800cd72 <SPI_ETH_REG>
 800e27e:	4603      	mov	r3, r0
 800e280:	b2da      	uxtb	r2, r3
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Y->Sn_RX_RSR[1]=SPI_ETH_REG(X, 0x27 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e28e:	3318      	adds	r3, #24
 800e290:	2201      	movs	r2, #1
 800e292:	9201      	str	r2, [sp, #4]
 800e294:	9300      	str	r3, [sp, #0]
 800e296:	2300      	movs	r3, #0
 800e298:	2201      	movs	r2, #1
 800e29a:	2127      	movs	r1, #39	; 0x27
 800e29c:	6838      	ldr	r0, [r7, #0]
 800e29e:	f7fe fd68 	bl	800cd72 <SPI_ETH_REG>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	b2da      	uxtb	r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

	Y->Sn_RX_RD[0]=SPI_ETH_REG(X, 0x28 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e2b2:	3318      	adds	r3, #24
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	9201      	str	r2, [sp, #4]
 800e2b8:	9300      	str	r3, [sp, #0]
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	2201      	movs	r2, #1
 800e2be:	2128      	movs	r1, #40	; 0x28
 800e2c0:	6838      	ldr	r0, [r7, #0]
 800e2c2:	f7fe fd56 	bl	800cd72 <SPI_ETH_REG>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	b2da      	uxtb	r2, r3
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Y->Sn_RX_RD[1]=SPI_ETH_REG(X, 0x29 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e2d6:	3318      	adds	r3, #24
 800e2d8:	2201      	movs	r2, #1
 800e2da:	9201      	str	r2, [sp, #4]
 800e2dc:	9300      	str	r3, [sp, #0]
 800e2de:	2300      	movs	r3, #0
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	2129      	movs	r1, #41	; 0x29
 800e2e4:	6838      	ldr	r0, [r7, #0]
 800e2e6:	f7fe fd44 	bl	800cd72 <SPI_ETH_REG>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	b2da      	uxtb	r2, r3
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	Y->Sn_RX_WR[0]=SPI_ETH_REG(X, 0x2A ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e2fa:	3318      	adds	r3, #24
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	9201      	str	r2, [sp, #4]
 800e300:	9300      	str	r3, [sp, #0]
 800e302:	2300      	movs	r3, #0
 800e304:	2201      	movs	r2, #1
 800e306:	212a      	movs	r1, #42	; 0x2a
 800e308:	6838      	ldr	r0, [r7, #0]
 800e30a:	f7fe fd32 	bl	800cd72 <SPI_ETH_REG>
 800e30e:	4603      	mov	r3, r0
 800e310:	b2da      	uxtb	r2, r3
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Y->Sn_RX_WR[1]=SPI_ETH_REG(X, 0x2B ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e31e:	3318      	adds	r3, #24
 800e320:	2201      	movs	r2, #1
 800e322:	9201      	str	r2, [sp, #4]
 800e324:	9300      	str	r3, [sp, #0]
 800e326:	2300      	movs	r3, #0
 800e328:	2201      	movs	r2, #1
 800e32a:	212b      	movs	r1, #43	; 0x2b
 800e32c:	6838      	ldr	r0, [r7, #0]
 800e32e:	f7fe fd20 	bl	800cd72 <SPI_ETH_REG>
 800e332:	4603      	mov	r3, r0
 800e334:	b2da      	uxtb	r2, r3
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	Y->Sn_IMR=SPI_ETH_REG(X, 0x2C ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e342:	3318      	adds	r3, #24
 800e344:	2201      	movs	r2, #1
 800e346:	9201      	str	r2, [sp, #4]
 800e348:	9300      	str	r3, [sp, #0]
 800e34a:	2300      	movs	r3, #0
 800e34c:	2201      	movs	r2, #1
 800e34e:	212c      	movs	r1, #44	; 0x2c
 800e350:	6838      	ldr	r0, [r7, #0]
 800e352:	f7fe fd0e 	bl	800cd72 <SPI_ETH_REG>
 800e356:	4603      	mov	r3, r0
 800e358:	b2da      	uxtb	r2, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	Y->Sn_FRAG[0]=SPI_ETH_REG(X, 0x2D ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e366:	3318      	adds	r3, #24
 800e368:	2201      	movs	r2, #1
 800e36a:	9201      	str	r2, [sp, #4]
 800e36c:	9300      	str	r3, [sp, #0]
 800e36e:	2300      	movs	r3, #0
 800e370:	2201      	movs	r2, #1
 800e372:	212d      	movs	r1, #45	; 0x2d
 800e374:	6838      	ldr	r0, [r7, #0]
 800e376:	f7fe fcfc 	bl	800cd72 <SPI_ETH_REG>
 800e37a:	4603      	mov	r3, r0
 800e37c:	b2da      	uxtb	r2, r3
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Y->Sn_FRAG[1]=SPI_ETH_REG(X, 0x2E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e38a:	3318      	adds	r3, #24
 800e38c:	2201      	movs	r2, #1
 800e38e:	9201      	str	r2, [sp, #4]
 800e390:	9300      	str	r3, [sp, #0]
 800e392:	2300      	movs	r3, #0
 800e394:	2201      	movs	r2, #1
 800e396:	212e      	movs	r1, #46	; 0x2e
 800e398:	6838      	ldr	r0, [r7, #0]
 800e39a:	f7fe fcea 	bl	800cd72 <SPI_ETH_REG>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	b2da      	uxtb	r2, r3
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56


	Y->Sn_KPALVTR=SPI_ETH_REG(X, 0x2F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e3ae:	3318      	adds	r3, #24
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	9201      	str	r2, [sp, #4]
 800e3b4:	9300      	str	r3, [sp, #0]
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	212f      	movs	r1, #47	; 0x2f
 800e3bc:	6838      	ldr	r0, [r7, #0]
 800e3be:	f7fe fcd8 	bl	800cd72 <SPI_ETH_REG>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	b2da      	uxtb	r2, r3
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
};
 800e3cc:	bf00      	nop
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3708      	adds	r7, #8
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}
	...

0800e3d8 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int tf)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b090      	sub	sp, #64	; 0x40
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	607a      	str	r2, [r7, #4]
 800e3e4:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	637b      	str	r3, [r7, #52]	; 0x34
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	633b      	str	r3, [r7, #48]	; 0x30
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	623b      	str	r3, [r7, #32]
 800e3fe:	2300      	movs	r3, #0
 800e400:	61fb      	str	r3, [r7, #28]
 800e402:	2300      	movs	r3, #0
 800e404:	61bb      	str	r3, [r7, #24]
 800e406:	2300      	movs	r3, #0
 800e408:	62bb      	str	r3, [r7, #40]	; 0x28
 800e40a:	2300      	movs	r3, #0
 800e40c:	617b      	str	r3, [r7, #20]
 800e40e:	2300      	movs	r3, #0
 800e410:	627b      	str	r3, [r7, #36]	; 0x24
 800e412:	2300      	movs	r3, #0
 800e414:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	623b      	str	r3, [r7, #32]
	lngb=*bn;
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	61fb      	str	r3, [r7, #28]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800e422:	6a3a      	ldr	r2, [r7, #32]
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	429a      	cmp	r2, r3
 800e428:	f2c0 82fe 	blt.w	800ea28 <FT_String_ND+0x650>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800e42c:	2300      	movs	r3, #0
 800e42e:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800e430:	e00c      	b.n	800e44c <FT_String_ND+0x74>
							{
								n++;
 800e432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e434:	3301      	adds	r3, #1
 800e436:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800e438:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e43a:	69fb      	ldr	r3, [r7, #28]
 800e43c:	441a      	add	r2, r3
 800e43e:	6a3b      	ldr	r3, [r7, #32]
 800e440:	3301      	adds	r3, #1
 800e442:	429a      	cmp	r2, r3
 800e444:	dd02      	ble.n	800e44c <FT_String_ND+0x74>
								{
									estado=0;
 800e446:	2300      	movs	r3, #0
 800e448:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e44a:	e009      	b.n	800e460 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800e44c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e44e:	68fa      	ldr	r2, [r7, #12]
 800e450:	4413      	add	r3, r2
 800e452:	781a      	ldrb	r2, [r3, #0]
 800e454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e456:	6879      	ldr	r1, [r7, #4]
 800e458:	440b      	add	r3, r1
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d1e8      	bne.n	800e432 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800e460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e462:	3301      	adds	r3, #1
 800e464:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800e466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e468:	3301      	adds	r3, #1
 800e46a:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800e46c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	429a      	cmp	r2, r3
 800e472:	d108      	bne.n	800e486 <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800e474:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e476:	69fb      	ldr	r3, [r7, #28]
 800e478:	1ad3      	subs	r3, r2, r3
 800e47a:	1c5a      	adds	r2, r3, #1
 800e47c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e47e:	601a      	str	r2, [r3, #0]
									estado=1;
 800e480:	2301      	movs	r3, #1
 800e482:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e484:	e010      	b.n	800e4a8 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800e486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e488:	69fb      	ldr	r3, [r7, #28]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	dd02      	ble.n	800e494 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800e48e:	2300      	movs	r3, #0
 800e490:	627b      	str	r3, [r7, #36]	; 0x24
									 break;
 800e492:	e009      	b.n	800e4a8 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800e494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e496:	68fa      	ldr	r2, [r7, #12]
 800e498:	4413      	add	r3, r2
 800e49a:	781a      	ldrb	r2, [r3, #0]
 800e49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49e:	6879      	ldr	r1, [r7, #4]
 800e4a0:	440b      	add	r3, r1
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d0db      	beq.n	800e460 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800e4a8:	69fb      	ldr	r3, [r7, #28]
 800e4aa:	1e5a      	subs	r2, r3, #1
 800e4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4ae:	4413      	add	r3, r2
 800e4b0:	6a3a      	ldr	r2, [r7, #32]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	dd02      	ble.n	800e4bc <FT_String_ND+0xe4>
 800e4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d1b7      	bne.n	800e42c <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800e4bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d101      	bne.n	800e4c6 <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800e4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c4:	e2b1      	b.n	800ea2a <FT_String_ND+0x652>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800e4c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d12c      	bne.n	800e526 <FT_String_ND+0x14e>
 800e4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d129      	bne.n	800e526 <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800e4d2:	e014      	b.n	800e4fe <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800e4d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	69fb      	ldr	r3, [r7, #28]
 800e4da:	441a      	add	r2, r3
 800e4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4de:	4413      	add	r3, r2
 800e4e0:	3b01      	subs	r3, #1
 800e4e2:	68fa      	ldr	r2, [r7, #12]
 800e4e4:	441a      	add	r2, r3
 800e4e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4e8:	6819      	ldr	r1, [r3, #0]
 800e4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4ec:	440b      	add	r3, r1
 800e4ee:	3b01      	subs	r3, #1
 800e4f0:	68f9      	ldr	r1, [r7, #12]
 800e4f2:	440b      	add	r3, r1
 800e4f4:	7812      	ldrb	r2, [r2, #0]
 800e4f6:	701a      	strb	r2, [r3, #0]
										n3++;
 800e4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800e4fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e500:	681a      	ldr	r2, [r3, #0]
 800e502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e504:	441a      	add	r2, r3
 800e506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e508:	4413      	add	r3, r2
 800e50a:	6a3a      	ldr	r2, [r7, #32]
 800e50c:	429a      	cmp	r2, r3
 800e50e:	dae1      	bge.n	800e4d4 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800e510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e512:	681a      	ldr	r2, [r3, #0]
 800e514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e516:	4413      	add	r3, r2
 800e518:	1e5a      	subs	r2, r3, #1
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	601a      	str	r2, [r3, #0]
							estado=3;
 800e51e:	2303      	movs	r3, #3
 800e520:	627b      	str	r3, [r7, #36]	; 0x24
							return(estado);
 800e522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e524:	e281      	b.n	800ea2a <FT_String_ND+0x652>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800e526:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e528:	2b02      	cmp	r3, #2
 800e52a:	f040 80b6 	bne.w	800e69a <FT_String_ND+0x2c2>
 800e52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e530:	2b01      	cmp	r3, #1
 800e532:	f040 80b2 	bne.w	800e69a <FT_String_ND+0x2c2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e536:	e012      	b.n	800e55e <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e538:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e53a:	69fb      	ldr	r3, [r7, #28]
 800e53c:	1ad2      	subs	r2, r2, r3
 800e53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e540:	4413      	add	r3, r2
 800e542:	461a      	mov	r2, r3
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	441a      	add	r2, r3
 800e548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e54a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e54c:	440b      	add	r3, r1
 800e54e:	7812      	ldrb	r2, [r2, #0]
 800e550:	701a      	strb	r2, [r3, #0]
								n4++;
 800e552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e554:	3301      	adds	r3, #1
 800e556:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800e558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e55a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e55c:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e55e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e560:	69fb      	ldr	r3, [r7, #28]
 800e562:	1ad2      	subs	r2, r2, r3
 800e564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e566:	4413      	add	r3, r2
 800e568:	6a3a      	ldr	r2, [r7, #32]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	dae4      	bge.n	800e538 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800e56e:	499e      	ldr	r1, [pc, #632]	; (800e7e8 <FT_String_ND+0x410>)
 800e570:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e572:	f000 fcff 	bl	800ef74 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800e576:	499d      	ldr	r1, [pc, #628]	; (800e7ec <FT_String_ND+0x414>)
 800e578:	2000      	movs	r0, #0
 800e57a:	f000 fcfb 	bl	800ef74 <strtok>
 800e57e:	4603      	mov	r3, r0
 800e580:	4618      	mov	r0, r3
 800e582:	f000 fb38 	bl	800ebf6 <atoi>
 800e586:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e58a:	3306      	adds	r3, #6
 800e58c:	222c      	movs	r2, #44	; 0x2c
 800e58e:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	2b09      	cmp	r3, #9
 800e594:	dc0d      	bgt.n	800e5b2 <FT_String_ND+0x1da>
											{
												c[8]=':';
 800e596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e598:	3308      	adds	r3, #8
 800e59a:	223a      	movs	r2, #58	; 0x3a
 800e59c:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800e59e:	69bb      	ldr	r3, [r7, #24]
 800e5a0:	3309      	adds	r3, #9
 800e5a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5a4:	4413      	add	r3, r2
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800e5aa:	69bb      	ldr	r3, [r7, #24]
 800e5ac:	3309      	adds	r3, #9
 800e5ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5b0:	e021      	b.n	800e5f6 <FT_String_ND+0x21e>
											}
											else{
														if (lngd< 100)
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	2b63      	cmp	r3, #99	; 0x63
 800e5b6:	dc0d      	bgt.n	800e5d4 <FT_String_ND+0x1fc>
														{
															c[9]=':';
 800e5b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5ba:	3309      	adds	r3, #9
 800e5bc:	223a      	movs	r2, #58	; 0x3a
 800e5be:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	330a      	adds	r3, #10
 800e5c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5c6:	4413      	add	r3, r2
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	330a      	adds	r3, #10
 800e5d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5d2:	e010      	b.n	800e5f6 <FT_String_ND+0x21e>
														}
														else
														{
														if (lngd < 1000)
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e5da:	da0c      	bge.n	800e5f6 <FT_String_ND+0x21e>
														{
															c[10]=':';
 800e5dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5de:	330a      	adds	r3, #10
 800e5e0:	223a      	movs	r2, #58	; 0x3a
 800e5e2:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	330b      	adds	r3, #11
 800e5e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5ea:	4413      	add	r3, r2
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800e5f0:	69bb      	ldr	r3, [r7, #24]
 800e5f2:	330b      	adds	r3, #11
 800e5f4:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800e5f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5fa:	601a      	str	r2, [r3, #0]
							n4=0;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e600:	e016      	b.n	800e630 <FT_String_ND+0x258>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e602:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	1ad2      	subs	r2, r2, r3
 800e608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60a:	441a      	add	r2, r3
 800e60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60e:	4413      	add	r3, r2
 800e610:	461a      	mov	r2, r3
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	441a      	add	r2, r3
 800e616:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	1ac9      	subs	r1, r1, r3
 800e61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61e:	440b      	add	r3, r1
 800e620:	4619      	mov	r1, r3
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	440b      	add	r3, r1
 800e626:	7812      	ldrb	r2, [r2, #0]
 800e628:	701a      	strb	r2, [r3, #0]
								n4++;
 800e62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62c:	3301      	adds	r3, #1
 800e62e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e630:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e632:	69fb      	ldr	r3, [r7, #28]
 800e634:	1ad2      	subs	r2, r2, r3
 800e636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e638:	441a      	add	r2, r3
 800e63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e63c:	4413      	add	r3, r2
 800e63e:	6a3a      	ldr	r2, [r7, #32]
 800e640:	429a      	cmp	r2, r3
 800e642:	dade      	bge.n	800e602 <FT_String_ND+0x22a>
							}
							*an=n+n4-lngb-1;
 800e644:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e648:	441a      	add	r2, r3
 800e64a:	69fb      	ldr	r3, [r7, #28]
 800e64c:	1ad3      	subs	r3, r2, r3
 800e64e:	1e5a      	subs	r2, r3, #1
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800e654:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e656:	69fb      	ldr	r3, [r7, #28]
 800e658:	1ad2      	subs	r2, r2, r3
 800e65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65c:	441a      	add	r2, r3
 800e65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e660:	4413      	add	r3, r2
 800e662:	461a      	mov	r2, r3
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	4413      	add	r3, r2
 800e668:	2200      	movs	r2, #0
 800e66a:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800e66c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e66e:	69fb      	ldr	r3, [r7, #28]
 800e670:	1ad2      	subs	r2, r2, r3
 800e672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e674:	4413      	add	r3, r2
 800e676:	461a      	mov	r2, r3
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	4413      	add	r3, r2
 800e67c:	2200      	movs	r2, #0
 800e67e:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800e680:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e682:	69fb      	ldr	r3, [r7, #28]
 800e684:	1ad2      	subs	r2, r2, r3
 800e686:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e68a:	440b      	add	r3, r1
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d102      	bne.n	800e696 <FT_String_ND+0x2be>
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	2200      	movs	r2, #0
 800e694:	701a      	strb	r2, [r3, #0]
							estado=3;
 800e696:	2303      	movs	r3, #3
 800e698:	627b      	str	r3, [r7, #36]	; 0x24

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800e69a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e69c:	2b03      	cmp	r3, #3
 800e69e:	d146      	bne.n	800e72e <FT_String_ND+0x356>
 800e6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a2:	2b01      	cmp	r3, #1
 800e6a4:	d143      	bne.n	800e72e <FT_String_ND+0x356>
						{
						n3=0;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e6aa:	e00e      	b.n	800e6ca <FT_String_ND+0x2f2>
									{
										c[n3]=a[*ubicacion+n3-1];
 800e6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6ae:	681a      	ldr	r2, [r3, #0]
 800e6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6b2:	4413      	add	r3, r2
 800e6b4:	3b01      	subs	r3, #1
 800e6b6:	68fa      	ldr	r2, [r7, #12]
 800e6b8:	441a      	add	r2, r3
 800e6ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6bc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e6be:	440b      	add	r3, r1
 800e6c0:	7812      	ldrb	r2, [r2, #0]
 800e6c2:	701a      	strb	r2, [r3, #0]
										n3++;
 800e6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e6ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6cc:	69fb      	ldr	r3, [r7, #28]
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	dbec      	blt.n	800e6ac <FT_String_ND+0x2d4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e6d6:	e014      	b.n	800e702 <FT_String_ND+0x32a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800e6d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	69fb      	ldr	r3, [r7, #28]
 800e6de:	441a      	add	r2, r3
 800e6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e2:	4413      	add	r3, r2
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	68fa      	ldr	r2, [r7, #12]
 800e6e8:	441a      	add	r2, r3
 800e6ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6ec:	6819      	ldr	r1, [r3, #0]
 800e6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f0:	440b      	add	r3, r1
 800e6f2:	3b01      	subs	r3, #1
 800e6f4:	68f9      	ldr	r1, [r7, #12]
 800e6f6:	440b      	add	r3, r1
 800e6f8:	7812      	ldrb	r2, [r2, #0]
 800e6fa:	701a      	strb	r2, [r3, #0]
										n5++;
 800e6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fe:	3301      	adds	r3, #1
 800e700:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e704:	681a      	ldr	r2, [r3, #0]
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	441a      	add	r2, r3
 800e70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70c:	441a      	add	r2, r3
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	429a      	cmp	r2, r3
 800e714:	dde0      	ble.n	800e6d8 <FT_String_ND+0x300>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800e716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e718:	681a      	ldr	r2, [r3, #0]
 800e71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71c:	4413      	add	r3, r2
 800e71e:	1e5a      	subs	r2, r3, #1
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800e724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e728:	601a      	str	r2, [r3, #0]
							estado=3;
 800e72a:	2303      	movs	r3, #3
 800e72c:	627b      	str	r3, [r7, #36]	; 0x24
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800e72e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e730:	2b04      	cmp	r3, #4
 800e732:	f040 80b6 	bne.w	800e8a2 <FT_String_ND+0x4ca>
 800e736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e738:	2b01      	cmp	r3, #1
 800e73a:	f040 80b2 	bne.w	800e8a2 <FT_String_ND+0x4ca>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e73e:	e012      	b.n	800e766 <FT_String_ND+0x38e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e740:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	1ad2      	subs	r2, r2, r3
 800e746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e748:	4413      	add	r3, r2
 800e74a:	461a      	mov	r2, r3
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	441a      	add	r2, r3
 800e750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e752:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e754:	440b      	add	r3, r1
 800e756:	7812      	ldrb	r2, [r2, #0]
 800e758:	701a      	strb	r2, [r3, #0]
								n4++;
 800e75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e75c:	3301      	adds	r3, #1
 800e75e:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800e760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e764:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e766:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	1ad2      	subs	r2, r2, r3
 800e76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e76e:	4413      	add	r3, r2
 800e770:	6a3a      	ldr	r2, [r7, #32]
 800e772:	429a      	cmp	r2, r3
 800e774:	dae4      	bge.n	800e740 <FT_String_ND+0x368>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e776:	491c      	ldr	r1, [pc, #112]	; (800e7e8 <FT_String_ND+0x410>)
 800e778:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e77a:	f000 fbfb 	bl	800ef74 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e77e:	491b      	ldr	r1, [pc, #108]	; (800e7ec <FT_String_ND+0x414>)
 800e780:	2000      	movs	r0, #0
 800e782:	f000 fbf7 	bl	800ef74 <strtok>
 800e786:	4603      	mov	r3, r0
 800e788:	4618      	mov	r0, r3
 800e78a:	f000 fa34 	bl	800ebf6 <atoi>
 800e78e:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e792:	3306      	adds	r3, #6
 800e794:	222c      	movs	r2, #44	; 0x2c
 800e796:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	2b09      	cmp	r3, #9
 800e79c:	dc07      	bgt.n	800e7ae <FT_String_ND+0x3d6>
											{
												c[8]=':';
 800e79e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7a0:	3308      	adds	r3, #8
 800e7a2:	223a      	movs	r2, #58	; 0x3a
 800e7a4:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800e7a6:	69bb      	ldr	r3, [r7, #24]
 800e7a8:	3309      	adds	r3, #9
 800e7aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7ac:	e015      	b.n	800e7da <FT_String_ND+0x402>
											}
											else{
														if (lngd< 100)
 800e7ae:	69bb      	ldr	r3, [r7, #24]
 800e7b0:	2b63      	cmp	r3, #99	; 0x63
 800e7b2:	dc07      	bgt.n	800e7c4 <FT_String_ND+0x3ec>
														{
															c[9]=':';
 800e7b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7b6:	3309      	adds	r3, #9
 800e7b8:	223a      	movs	r2, #58	; 0x3a
 800e7ba:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800e7bc:	69bb      	ldr	r3, [r7, #24]
 800e7be:	330a      	adds	r3, #10
 800e7c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7c2:	e00a      	b.n	800e7da <FT_String_ND+0x402>
														}
														else
														{
														if (lngd < 1000)
 800e7c4:	69bb      	ldr	r3, [r7, #24]
 800e7c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e7ca:	da06      	bge.n	800e7da <FT_String_ND+0x402>
														{
															c[10]=':';
 800e7cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7ce:	330a      	adds	r3, #10
 800e7d0:	223a      	movs	r2, #58	; 0x3a
 800e7d2:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	330b      	adds	r3, #11
 800e7d8:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800e7da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7de:	601a      	str	r2, [r3, #0]
							n4=0;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e7e4:	e01b      	b.n	800e81e <FT_String_ND+0x446>
 800e7e6:	bf00      	nop
 800e7e8:	08010854 	.word	0x08010854
 800e7ec:	08010858 	.word	0x08010858
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e7f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7f2:	69fb      	ldr	r3, [r7, #28]
 800e7f4:	1ad2      	subs	r2, r2, r3
 800e7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f8:	441a      	add	r2, r3
 800e7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fc:	4413      	add	r3, r2
 800e7fe:	461a      	mov	r2, r3
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	441a      	add	r2, r3
 800e804:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e806:	69fb      	ldr	r3, [r7, #28]
 800e808:	1ac9      	subs	r1, r1, r3
 800e80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80c:	440b      	add	r3, r1
 800e80e:	4619      	mov	r1, r3
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	440b      	add	r3, r1
 800e814:	7812      	ldrb	r2, [r2, #0]
 800e816:	701a      	strb	r2, [r3, #0]
								n4++;
 800e818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e81a:	3301      	adds	r3, #1
 800e81c:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e81e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	1ad2      	subs	r2, r2, r3
 800e824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e826:	441a      	add	r2, r3
 800e828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e82a:	4413      	add	r3, r2
 800e82c:	6a3a      	ldr	r2, [r7, #32]
 800e82e:	429a      	cmp	r2, r3
 800e830:	dade      	bge.n	800e7f0 <FT_String_ND+0x418>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800e832:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e836:	441a      	add	r2, r3
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	1e5a      	subs	r2, r3, #1
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	601a      	str	r2, [r3, #0]
							n5=0;
 800e842:	2300      	movs	r3, #0
 800e844:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e846:	e00f      	b.n	800e868 <FT_String_ND+0x490>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800e848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e84a:	69bb      	ldr	r3, [r7, #24]
 800e84c:	1ad2      	subs	r2, r2, r3
 800e84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e850:	4413      	add	r3, r2
 800e852:	461a      	mov	r2, r3
 800e854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e856:	441a      	add	r2, r3
 800e858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e85c:	440b      	add	r3, r1
 800e85e:	7812      	ldrb	r2, [r2, #0]
 800e860:	701a      	strb	r2, [r3, #0]
								n5++;
 800e862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e864:	3301      	adds	r3, #1
 800e866:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e86a:	69bb      	ldr	r3, [r7, #24]
 800e86c:	1ad2      	subs	r2, r2, r3
 800e86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e870:	441a      	add	r2, r3
 800e872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	429a      	cmp	r2, r3
 800e878:	dbe6      	blt.n	800e848 <FT_String_ND+0x470>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800e87a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e87c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e87e:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800e880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e882:	681a      	ldr	r2, [r3, #0]
 800e884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e886:	441a      	add	r2, r3
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	1ad2      	subs	r2, r2, r3
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	4413      	add	r3, r2
 800e892:	6a3a      	ldr	r2, [r7, #32]
 800e894:	429a      	cmp	r2, r3
 800e896:	d102      	bne.n	800e89e <FT_String_ND+0x4c6>
							{
								estado=4;
 800e898:	2304      	movs	r3, #4
 800e89a:	627b      	str	r3, [r7, #36]	; 0x24
 800e89c:	e001      	b.n	800e8a2 <FT_String_ND+0x4ca>

							}
							else
							{
								estado=5;
 800e89e:	2305      	movs	r3, #5
 800e8a0:	627b      	str	r3, [r7, #36]	; 0x24
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800e8a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8a4:	2b05      	cmp	r3, #5
 800e8a6:	f040 80bd 	bne.w	800ea24 <FT_String_ND+0x64c>
 800e8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	f040 80b9 	bne.w	800ea24 <FT_String_ND+0x64c>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e8b2:	e012      	b.n	800e8da <FT_String_ND+0x502>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e8b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8b6:	69fb      	ldr	r3, [r7, #28]
 800e8b8:	1ad2      	subs	r2, r2, r3
 800e8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8bc:	4413      	add	r3, r2
 800e8be:	461a      	mov	r2, r3
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	441a      	add	r2, r3
 800e8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e8c8:	440b      	add	r3, r1
 800e8ca:	7812      	ldrb	r2, [r2, #0]
 800e8cc:	701a      	strb	r2, [r3, #0]
								n4++;
 800e8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d0:	3301      	adds	r3, #1
 800e8d2:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800e8d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8d8:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e8da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	1ad2      	subs	r2, r2, r3
 800e8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e2:	4413      	add	r3, r2
 800e8e4:	6a3a      	ldr	r2, [r7, #32]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	dae4      	bge.n	800e8b4 <FT_String_ND+0x4dc>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e8ea:	4952      	ldr	r1, [pc, #328]	; (800ea34 <FT_String_ND+0x65c>)
 800e8ec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e8ee:	f000 fb41 	bl	800ef74 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800e8f2:	4951      	ldr	r1, [pc, #324]	; (800ea38 <FT_String_ND+0x660>)
 800e8f4:	2000      	movs	r0, #0
 800e8f6:	f000 fb3d 	bl	800ef74 <strtok>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f000 f97a 	bl	800ebf6 <atoi>
 800e902:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e904:	494c      	ldr	r1, [pc, #304]	; (800ea38 <FT_String_ND+0x660>)
 800e906:	2000      	movs	r0, #0
 800e908:	f000 fb34 	bl	800ef74 <strtok>
 800e90c:	4603      	mov	r3, r0
 800e90e:	4618      	mov	r0, r3
 800e910:	f000 f971 	bl	800ebf6 <atoi>
 800e914:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e918:	3306      	adds	r3, #6
 800e91a:	222c      	movs	r2, #44	; 0x2c
 800e91c:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e91e:	69bb      	ldr	r3, [r7, #24]
 800e920:	2b09      	cmp	r3, #9
 800e922:	dc07      	bgt.n	800e934 <FT_String_ND+0x55c>
											{
												c[10]=':';
 800e924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e926:	330a      	adds	r3, #10
 800e928:	223a      	movs	r2, #58	; 0x3a
 800e92a:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800e92c:	69bb      	ldr	r3, [r7, #24]
 800e92e:	330b      	adds	r3, #11
 800e930:	62bb      	str	r3, [r7, #40]	; 0x28
 800e932:	e015      	b.n	800e960 <FT_String_ND+0x588>
											}
											else{
														if (lngd< 100)
 800e934:	69bb      	ldr	r3, [r7, #24]
 800e936:	2b63      	cmp	r3, #99	; 0x63
 800e938:	dc07      	bgt.n	800e94a <FT_String_ND+0x572>
														{
															c[11]=':';
 800e93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e93c:	330b      	adds	r3, #11
 800e93e:	223a      	movs	r2, #58	; 0x3a
 800e940:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800e942:	69bb      	ldr	r3, [r7, #24]
 800e944:	330c      	adds	r3, #12
 800e946:	62bb      	str	r3, [r7, #40]	; 0x28
 800e948:	e00a      	b.n	800e960 <FT_String_ND+0x588>
														}
														else
														{
														if (lngd < 1000)
 800e94a:	69bb      	ldr	r3, [r7, #24]
 800e94c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e950:	da06      	bge.n	800e960 <FT_String_ND+0x588>
														{
															c[12]=':';
 800e952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e954:	330c      	adds	r3, #12
 800e956:	223a      	movs	r2, #58	; 0x3a
 800e958:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	330d      	adds	r3, #13
 800e95e:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800e960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e964:	601a      	str	r2, [r3, #0]
							n4=0;
 800e966:	2300      	movs	r3, #0
 800e968:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e96a:	e016      	b.n	800e99a <FT_String_ND+0x5c2>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e96c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e96e:	69fb      	ldr	r3, [r7, #28]
 800e970:	1ad2      	subs	r2, r2, r3
 800e972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e974:	441a      	add	r2, r3
 800e976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e978:	4413      	add	r3, r2
 800e97a:	461a      	mov	r2, r3
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	441a      	add	r2, r3
 800e980:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e982:	69fb      	ldr	r3, [r7, #28]
 800e984:	1ac9      	subs	r1, r1, r3
 800e986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e988:	440b      	add	r3, r1
 800e98a:	4619      	mov	r1, r3
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	440b      	add	r3, r1
 800e990:	7812      	ldrb	r2, [r2, #0]
 800e992:	701a      	strb	r2, [r3, #0]
								n4++;
 800e994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e996:	3301      	adds	r3, #1
 800e998:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e99a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	1ad2      	subs	r2, r2, r3
 800e9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a2:	441a      	add	r2, r3
 800e9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a6:	4413      	add	r3, r2
 800e9a8:	6a3a      	ldr	r2, [r7, #32]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	dade      	bge.n	800e96c <FT_String_ND+0x594>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800e9ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b2:	441a      	add	r2, r3
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	1ad3      	subs	r3, r2, r3
 800e9b8:	1e5a      	subs	r2, r3, #1
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	601a      	str	r2, [r3, #0]
							n5=0;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e9c2:	e00f      	b.n	800e9e4 <FT_String_ND+0x60c>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800e9c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9c6:	69bb      	ldr	r3, [r7, #24]
 800e9c8:	1ad2      	subs	r2, r2, r3
 800e9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9cc:	4413      	add	r3, r2
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9d2:	441a      	add	r2, r3
 800e9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e9d8:	440b      	add	r3, r1
 800e9da:	7812      	ldrb	r2, [r2, #0]
 800e9dc:	701a      	strb	r2, [r3, #0]
								n5++;
 800e9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e9e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9e6:	69bb      	ldr	r3, [r7, #24]
 800e9e8:	1ad2      	subs	r2, r2, r3
 800e9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ec:	441a      	add	r2, r3
 800e9ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	dbe6      	blt.n	800e9c4 <FT_String_ND+0x5ec>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800e9f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9fa:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800e9fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9fe:	681a      	ldr	r2, [r3, #0]
 800ea00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea02:	441a      	add	r2, r3
 800ea04:	69bb      	ldr	r3, [r7, #24]
 800ea06:	1ad2      	subs	r2, r2, r3
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	6a3a      	ldr	r2, [r7, #32]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d105      	bne.n	800ea20 <FT_String_ND+0x648>
							{
								estado=4;
 800ea14:	2304      	movs	r3, #4
 800ea16:	627b      	str	r3, [r7, #36]	; 0x24
								*idcom=cliente;
 800ea18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea1a:	693a      	ldr	r2, [r7, #16]
 800ea1c:	601a      	str	r2, [r3, #0]
 800ea1e:	e001      	b.n	800ea24 <FT_String_ND+0x64c>
							}
							else
							{
								estado=5;
 800ea20:	2305      	movs	r3, #5
 800ea22:	627b      	str	r3, [r7, #36]	; 0x24
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800ea24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea26:	e000      	b.n	800ea2a <FT_String_ND+0x652>
					}
			}
			else
			{
				return(2);
 800ea28:	2302      	movs	r3, #2
			}
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3740      	adds	r7, #64	; 0x40
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	08010854 	.word	0x08010854
 800ea38:	08010858 	.word	0x08010858

0800ea3c <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b088      	sub	sp, #32
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800ea46:	2330      	movs	r3, #48	; 0x30
 800ea48:	60bb      	str	r3, [r7, #8]
 800ea4a:	f107 030c 	add.w	r3, r7, #12
 800ea4e:	2200      	movs	r2, #0
 800ea50:	601a      	str	r2, [r3, #0]
 800ea52:	605a      	str	r2, [r3, #4]
 800ea54:	609a      	str	r2, [r3, #8]
 800ea56:	60da      	str	r2, [r3, #12]
int i=0;	
 800ea58:	2300      	movs	r3, #0
 800ea5a:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800ea5c:	f107 0308 	add.w	r3, r7, #8
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	490f      	ldr	r1, [pc, #60]	; (800eaa0 <INTOA+0x64>)
 800ea64:	4618      	mov	r0, r3
 800ea66:	f000 fa07 	bl	800ee78 <siprintf>
		while(i<=strlen(origbuff))
 800ea6a:	e00b      	b.n	800ea84 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	1c5a      	adds	r2, r3, #1
 800ea70:	603a      	str	r2, [r7, #0]
 800ea72:	f107 0108 	add.w	r1, r7, #8
 800ea76:	69fa      	ldr	r2, [r7, #28]
 800ea78:	440a      	add	r2, r1
 800ea7a:	7812      	ldrb	r2, [r2, #0]
 800ea7c:	701a      	strb	r2, [r3, #0]
		i++;
 800ea7e:	69fb      	ldr	r3, [r7, #28]
 800ea80:	3301      	adds	r3, #1
 800ea82:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800ea84:	f107 0308 	add.w	r3, r7, #8
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7f1 fbb3 	bl	80001f4 <strlen>
 800ea8e:	4602      	mov	r2, r0
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d2ea      	bcs.n	800ea6c <INTOA+0x30>
		}
		return(i);
 800ea96:	69fb      	ldr	r3, [r7, #28]
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3720      	adds	r7, #32
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	0801085c 	.word	0x0801085c

0800eaa4 <FTOA>:

int FTOA( int a,  unsigned char *v1, int comma)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b08c      	sub	sp, #48	; 0x30
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	607a      	str	r2, [r7, #4]
char origbuff[20]="0";
 800eab0:	2330      	movs	r3, #48	; 0x30
 800eab2:	617b      	str	r3, [r7, #20]
 800eab4:	f107 0318 	add.w	r3, r7, #24
 800eab8:	2200      	movs	r2, #0
 800eaba:	601a      	str	r2, [r3, #0]
 800eabc:	605a      	str	r2, [r3, #4]
 800eabe:	609a      	str	r2, [r3, #8]
 800eac0:	60da      	str	r2, [r3, #12]
int i=0;
 800eac2:	2300      	movs	r3, #0
 800eac4:	62fb      	str	r3, [r7, #44]	; 0x2c
int b=0;
 800eac6:	2300      	movs	r3, #0
 800eac8:	62bb      	str	r3, [r7, #40]	; 0x28

		sprintf(origbuff,"%i",a);
 800eaca:	f107 0314 	add.w	r3, r7, #20
 800eace:	68fa      	ldr	r2, [r7, #12]
 800ead0:	4922      	ldr	r1, [pc, #136]	; (800eb5c <FTOA+0xb8>)
 800ead2:	4618      	mov	r0, r3
 800ead4:	f000 f9d0 	bl	800ee78 <siprintf>
		b=strlen(origbuff);
 800ead8:	f107 0314 	add.w	r3, r7, #20
 800eadc:	4618      	mov	r0, r3
 800eade:	f7f1 fb89 	bl	80001f4 <strlen>
 800eae2:	4603      	mov	r3, r0
 800eae4:	62bb      	str	r3, [r7, #40]	; 0x28
		if(comma<b)
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaea:	429a      	cmp	r2, r3
 800eaec:	da22      	bge.n	800eb34 <FTOA+0x90>
		{

			while(i<=((b)+1))
 800eaee:	e01a      	b.n	800eb26 <FTOA+0x82>
			{
				if((i==(b-comma))&&(comma<(b)))
 800eaf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	1ad3      	subs	r3, r2, r3
 800eaf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d108      	bne.n	800eb0e <FTOA+0x6a>
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb00:	429a      	cmp	r2, r3
 800eb02:	da04      	bge.n	800eb0e <FTOA+0x6a>
				{
					*v1++='.';
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	1c5a      	adds	r2, r3, #1
 800eb08:	60ba      	str	r2, [r7, #8]
 800eb0a:	222e      	movs	r2, #46	; 0x2e
 800eb0c:	701a      	strb	r2, [r3, #0]
					//i++;
				}
				*v1++=(unsigned char)origbuff[i];
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	1c5a      	adds	r2, r3, #1
 800eb12:	60ba      	str	r2, [r7, #8]
 800eb14:	f107 0114 	add.w	r1, r7, #20
 800eb18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb1a:	440a      	add	r2, r1
 800eb1c:	7812      	ldrb	r2, [r2, #0]
 800eb1e:	701a      	strb	r2, [r3, #0]
				i++;
 800eb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb22:	3301      	adds	r3, #1
 800eb24:	62fb      	str	r3, [r7, #44]	; 0x2c
			while(i<=((b)+1))
 800eb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb28:	3301      	adds	r3, #1
 800eb2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	dddf      	ble.n	800eaf0 <FTOA+0x4c>
			}
			return(i);
 800eb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb32:	e00f      	b.n	800eb54 <FTOA+0xb0>
			}
			return(i);*/
		  }
		else
		{
			*v1++='0';
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	1c5a      	adds	r2, r3, #1
 800eb38:	60ba      	str	r2, [r7, #8]
 800eb3a:	2230      	movs	r2, #48	; 0x30
 800eb3c:	701a      	strb	r2, [r3, #0]
			*v1++='.';
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	1c5a      	adds	r2, r3, #1
 800eb42:	60ba      	str	r2, [r7, #8]
 800eb44:	222e      	movs	r2, #46	; 0x2e
 800eb46:	701a      	strb	r2, [r3, #0]
			*v1++='0';
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	1c5a      	adds	r2, r3, #1
 800eb4c:	60ba      	str	r2, [r7, #8]
 800eb4e:	2230      	movs	r2, #48	; 0x30
 800eb50:	701a      	strb	r2, [r3, #0]
		}
		return(0);
 800eb52:	2300      	movs	r3, #0
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3730      	adds	r7, #48	; 0x30
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}
 800eb5c:	0801085c 	.word	0x0801085c

0800eb60 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b088      	sub	sp, #32
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	60f8      	str	r0, [r7, #12]
 800eb68:	60b9      	str	r1, [r7, #8]
 800eb6a:	607a      	str	r2, [r7, #4]
 800eb6c:	603b      	str	r3, [r7, #0]
int x =0;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800eb72:	2300      	movs	r3, #0
 800eb74:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800eb76:	f107 0310 	add.w	r3, r7, #16
 800eb7a:	617b      	str	r3, [r7, #20]
if (c==0)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d105      	bne.n	800eb8e <CopiaVector+0x2e>
{
	x=strlen(b);
 800eb82:	68b8      	ldr	r0, [r7, #8]
 800eb84:	f7f1 fb36 	bl	80001f4 <strlen>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	61bb      	str	r3, [r7, #24]
 800eb8c:	e02e      	b.n	800ebec <CopiaVector+0x8c>
}
else
	{
		x=c;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb98:	dd01      	ble.n	800eb9e <CopiaVector+0x3e>
			{
				return(1);
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	e027      	b.n	800ebee <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800eba2:	e00a      	b.n	800ebba <CopiaVector+0x5a>
				{
					*a++=*b++;
 800eba4:	68ba      	ldr	r2, [r7, #8]
 800eba6:	1c53      	adds	r3, r2, #1
 800eba8:	60bb      	str	r3, [r7, #8]
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	1c59      	adds	r1, r3, #1
 800ebae:	60f9      	str	r1, [r7, #12]
 800ebb0:	7812      	ldrb	r2, [r2, #0]
 800ebb2:	701a      	strb	r2, [r3, #0]
					p++;
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	3301      	adds	r3, #1
 800ebb8:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800ebba:	69fa      	ldr	r2, [r7, #28]
 800ebbc:	69bb      	ldr	r3, [r7, #24]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	dbf0      	blt.n	800eba4 <CopiaVector+0x44>
				}


			if (d==1)
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d111      	bne.n	800ebec <CopiaVector+0x8c>
			{
			  p=c;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800ebcc:	e008      	b.n	800ebe0 <CopiaVector+0x80>
			  {

				  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	1c5a      	adds	r2, r3, #1
 800ebd2:	60fa      	str	r2, [r7, #12]
 800ebd4:	697a      	ldr	r2, [r7, #20]
 800ebd6:	7812      	ldrb	r2, [r2, #0]
 800ebd8:	701a      	strb	r2, [r3, #0]
				  p++;
 800ebda:	69fb      	ldr	r3, [r7, #28]
 800ebdc:	3301      	adds	r3, #1
 800ebde:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebe6:	dbf2      	blt.n	800ebce <CopiaVector+0x6e>
				  //&a[p]="/0";

			  }
			return (0);
 800ebe8:	2300      	movs	r3, #0
 800ebea:	e000      	b.n	800ebee <CopiaVector+0x8e>
			}

			}
	}
return (1);
 800ebec:	2301      	movs	r3, #1
}
 800ebee:	4618      	mov	r0, r3
 800ebf0:	3720      	adds	r7, #32
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}

0800ebf6 <atoi>:
 800ebf6:	220a      	movs	r2, #10
 800ebf8:	2100      	movs	r1, #0
 800ebfa:	f000 b883 	b.w	800ed04 <strtol>
	...

0800ec00 <_strtol_l.constprop.0>:
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec06:	d001      	beq.n	800ec0c <_strtol_l.constprop.0+0xc>
 800ec08:	2b24      	cmp	r3, #36	; 0x24
 800ec0a:	d906      	bls.n	800ec1a <_strtol_l.constprop.0+0x1a>
 800ec0c:	f000 fa54 	bl	800f0b8 <__errno>
 800ec10:	2316      	movs	r3, #22
 800ec12:	6003      	str	r3, [r0, #0]
 800ec14:	2000      	movs	r0, #0
 800ec16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec1a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ed00 <_strtol_l.constprop.0+0x100>
 800ec1e:	460d      	mov	r5, r1
 800ec20:	462e      	mov	r6, r5
 800ec22:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec26:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ec2a:	f017 0708 	ands.w	r7, r7, #8
 800ec2e:	d1f7      	bne.n	800ec20 <_strtol_l.constprop.0+0x20>
 800ec30:	2c2d      	cmp	r4, #45	; 0x2d
 800ec32:	d132      	bne.n	800ec9a <_strtol_l.constprop.0+0x9a>
 800ec34:	782c      	ldrb	r4, [r5, #0]
 800ec36:	2701      	movs	r7, #1
 800ec38:	1cb5      	adds	r5, r6, #2
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d05b      	beq.n	800ecf6 <_strtol_l.constprop.0+0xf6>
 800ec3e:	2b10      	cmp	r3, #16
 800ec40:	d109      	bne.n	800ec56 <_strtol_l.constprop.0+0x56>
 800ec42:	2c30      	cmp	r4, #48	; 0x30
 800ec44:	d107      	bne.n	800ec56 <_strtol_l.constprop.0+0x56>
 800ec46:	782c      	ldrb	r4, [r5, #0]
 800ec48:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ec4c:	2c58      	cmp	r4, #88	; 0x58
 800ec4e:	d14d      	bne.n	800ecec <_strtol_l.constprop.0+0xec>
 800ec50:	786c      	ldrb	r4, [r5, #1]
 800ec52:	2310      	movs	r3, #16
 800ec54:	3502      	adds	r5, #2
 800ec56:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ec5a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec5e:	f04f 0e00 	mov.w	lr, #0
 800ec62:	fbb8 f9f3 	udiv	r9, r8, r3
 800ec66:	4676      	mov	r6, lr
 800ec68:	fb03 8a19 	mls	sl, r3, r9, r8
 800ec6c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ec70:	f1bc 0f09 	cmp.w	ip, #9
 800ec74:	d816      	bhi.n	800eca4 <_strtol_l.constprop.0+0xa4>
 800ec76:	4664      	mov	r4, ip
 800ec78:	42a3      	cmp	r3, r4
 800ec7a:	dd24      	ble.n	800ecc6 <_strtol_l.constprop.0+0xc6>
 800ec7c:	f1be 3fff 	cmp.w	lr, #4294967295
 800ec80:	d008      	beq.n	800ec94 <_strtol_l.constprop.0+0x94>
 800ec82:	45b1      	cmp	r9, r6
 800ec84:	d31c      	bcc.n	800ecc0 <_strtol_l.constprop.0+0xc0>
 800ec86:	d101      	bne.n	800ec8c <_strtol_l.constprop.0+0x8c>
 800ec88:	45a2      	cmp	sl, r4
 800ec8a:	db19      	blt.n	800ecc0 <_strtol_l.constprop.0+0xc0>
 800ec8c:	fb06 4603 	mla	r6, r6, r3, r4
 800ec90:	f04f 0e01 	mov.w	lr, #1
 800ec94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec98:	e7e8      	b.n	800ec6c <_strtol_l.constprop.0+0x6c>
 800ec9a:	2c2b      	cmp	r4, #43	; 0x2b
 800ec9c:	bf04      	itt	eq
 800ec9e:	782c      	ldrbeq	r4, [r5, #0]
 800eca0:	1cb5      	addeq	r5, r6, #2
 800eca2:	e7ca      	b.n	800ec3a <_strtol_l.constprop.0+0x3a>
 800eca4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800eca8:	f1bc 0f19 	cmp.w	ip, #25
 800ecac:	d801      	bhi.n	800ecb2 <_strtol_l.constprop.0+0xb2>
 800ecae:	3c37      	subs	r4, #55	; 0x37
 800ecb0:	e7e2      	b.n	800ec78 <_strtol_l.constprop.0+0x78>
 800ecb2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ecb6:	f1bc 0f19 	cmp.w	ip, #25
 800ecba:	d804      	bhi.n	800ecc6 <_strtol_l.constprop.0+0xc6>
 800ecbc:	3c57      	subs	r4, #87	; 0x57
 800ecbe:	e7db      	b.n	800ec78 <_strtol_l.constprop.0+0x78>
 800ecc0:	f04f 3eff 	mov.w	lr, #4294967295
 800ecc4:	e7e6      	b.n	800ec94 <_strtol_l.constprop.0+0x94>
 800ecc6:	f1be 3fff 	cmp.w	lr, #4294967295
 800ecca:	d105      	bne.n	800ecd8 <_strtol_l.constprop.0+0xd8>
 800eccc:	2322      	movs	r3, #34	; 0x22
 800ecce:	6003      	str	r3, [r0, #0]
 800ecd0:	4646      	mov	r6, r8
 800ecd2:	b942      	cbnz	r2, 800ece6 <_strtol_l.constprop.0+0xe6>
 800ecd4:	4630      	mov	r0, r6
 800ecd6:	e79e      	b.n	800ec16 <_strtol_l.constprop.0+0x16>
 800ecd8:	b107      	cbz	r7, 800ecdc <_strtol_l.constprop.0+0xdc>
 800ecda:	4276      	negs	r6, r6
 800ecdc:	2a00      	cmp	r2, #0
 800ecde:	d0f9      	beq.n	800ecd4 <_strtol_l.constprop.0+0xd4>
 800ece0:	f1be 0f00 	cmp.w	lr, #0
 800ece4:	d000      	beq.n	800ece8 <_strtol_l.constprop.0+0xe8>
 800ece6:	1e69      	subs	r1, r5, #1
 800ece8:	6011      	str	r1, [r2, #0]
 800ecea:	e7f3      	b.n	800ecd4 <_strtol_l.constprop.0+0xd4>
 800ecec:	2430      	movs	r4, #48	; 0x30
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d1b1      	bne.n	800ec56 <_strtol_l.constprop.0+0x56>
 800ecf2:	2308      	movs	r3, #8
 800ecf4:	e7af      	b.n	800ec56 <_strtol_l.constprop.0+0x56>
 800ecf6:	2c30      	cmp	r4, #48	; 0x30
 800ecf8:	d0a5      	beq.n	800ec46 <_strtol_l.constprop.0+0x46>
 800ecfa:	230a      	movs	r3, #10
 800ecfc:	e7ab      	b.n	800ec56 <_strtol_l.constprop.0+0x56>
 800ecfe:	bf00      	nop
 800ed00:	08010879 	.word	0x08010879

0800ed04 <strtol>:
 800ed04:	4613      	mov	r3, r2
 800ed06:	460a      	mov	r2, r1
 800ed08:	4601      	mov	r1, r0
 800ed0a:	4802      	ldr	r0, [pc, #8]	; (800ed14 <strtol+0x10>)
 800ed0c:	6800      	ldr	r0, [r0, #0]
 800ed0e:	f7ff bf77 	b.w	800ec00 <_strtol_l.constprop.0>
 800ed12:	bf00      	nop
 800ed14:	200001b4 	.word	0x200001b4

0800ed18 <std>:
 800ed18:	2300      	movs	r3, #0
 800ed1a:	b510      	push	{r4, lr}
 800ed1c:	4604      	mov	r4, r0
 800ed1e:	e9c0 3300 	strd	r3, r3, [r0]
 800ed22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed26:	6083      	str	r3, [r0, #8]
 800ed28:	8181      	strh	r1, [r0, #12]
 800ed2a:	6643      	str	r3, [r0, #100]	; 0x64
 800ed2c:	81c2      	strh	r2, [r0, #14]
 800ed2e:	6183      	str	r3, [r0, #24]
 800ed30:	4619      	mov	r1, r3
 800ed32:	2208      	movs	r2, #8
 800ed34:	305c      	adds	r0, #92	; 0x5c
 800ed36:	f000 f902 	bl	800ef3e <memset>
 800ed3a:	4b05      	ldr	r3, [pc, #20]	; (800ed50 <std+0x38>)
 800ed3c:	6263      	str	r3, [r4, #36]	; 0x24
 800ed3e:	4b05      	ldr	r3, [pc, #20]	; (800ed54 <std+0x3c>)
 800ed40:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed42:	4b05      	ldr	r3, [pc, #20]	; (800ed58 <std+0x40>)
 800ed44:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed46:	4b05      	ldr	r3, [pc, #20]	; (800ed5c <std+0x44>)
 800ed48:	6224      	str	r4, [r4, #32]
 800ed4a:	6323      	str	r3, [r4, #48]	; 0x30
 800ed4c:	bd10      	pop	{r4, pc}
 800ed4e:	bf00      	nop
 800ed50:	0800eeb9 	.word	0x0800eeb9
 800ed54:	0800eedb 	.word	0x0800eedb
 800ed58:	0800ef13 	.word	0x0800ef13
 800ed5c:	0800ef37 	.word	0x0800ef37

0800ed60 <stdio_exit_handler>:
 800ed60:	4a02      	ldr	r2, [pc, #8]	; (800ed6c <stdio_exit_handler+0xc>)
 800ed62:	4903      	ldr	r1, [pc, #12]	; (800ed70 <stdio_exit_handler+0x10>)
 800ed64:	4803      	ldr	r0, [pc, #12]	; (800ed74 <stdio_exit_handler+0x14>)
 800ed66:	f000 b869 	b.w	800ee3c <_fwalk_sglue>
 800ed6a:	bf00      	nop
 800ed6c:	2000015c 	.word	0x2000015c
 800ed70:	0800fa39 	.word	0x0800fa39
 800ed74:	20000168 	.word	0x20000168

0800ed78 <cleanup_stdio>:
 800ed78:	6841      	ldr	r1, [r0, #4]
 800ed7a:	4b0c      	ldr	r3, [pc, #48]	; (800edac <cleanup_stdio+0x34>)
 800ed7c:	4299      	cmp	r1, r3
 800ed7e:	b510      	push	{r4, lr}
 800ed80:	4604      	mov	r4, r0
 800ed82:	d001      	beq.n	800ed88 <cleanup_stdio+0x10>
 800ed84:	f000 fe58 	bl	800fa38 <_fflush_r>
 800ed88:	68a1      	ldr	r1, [r4, #8]
 800ed8a:	4b09      	ldr	r3, [pc, #36]	; (800edb0 <cleanup_stdio+0x38>)
 800ed8c:	4299      	cmp	r1, r3
 800ed8e:	d002      	beq.n	800ed96 <cleanup_stdio+0x1e>
 800ed90:	4620      	mov	r0, r4
 800ed92:	f000 fe51 	bl	800fa38 <_fflush_r>
 800ed96:	68e1      	ldr	r1, [r4, #12]
 800ed98:	4b06      	ldr	r3, [pc, #24]	; (800edb4 <cleanup_stdio+0x3c>)
 800ed9a:	4299      	cmp	r1, r3
 800ed9c:	d004      	beq.n	800eda8 <cleanup_stdio+0x30>
 800ed9e:	4620      	mov	r0, r4
 800eda0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eda4:	f000 be48 	b.w	800fa38 <_fflush_r>
 800eda8:	bd10      	pop	{r4, pc}
 800edaa:	bf00      	nop
 800edac:	20004460 	.word	0x20004460
 800edb0:	200044c8 	.word	0x200044c8
 800edb4:	20004530 	.word	0x20004530

0800edb8 <global_stdio_init.part.0>:
 800edb8:	b510      	push	{r4, lr}
 800edba:	4b0b      	ldr	r3, [pc, #44]	; (800ede8 <global_stdio_init.part.0+0x30>)
 800edbc:	4c0b      	ldr	r4, [pc, #44]	; (800edec <global_stdio_init.part.0+0x34>)
 800edbe:	4a0c      	ldr	r2, [pc, #48]	; (800edf0 <global_stdio_init.part.0+0x38>)
 800edc0:	601a      	str	r2, [r3, #0]
 800edc2:	4620      	mov	r0, r4
 800edc4:	2200      	movs	r2, #0
 800edc6:	2104      	movs	r1, #4
 800edc8:	f7ff ffa6 	bl	800ed18 <std>
 800edcc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800edd0:	2201      	movs	r2, #1
 800edd2:	2109      	movs	r1, #9
 800edd4:	f7ff ffa0 	bl	800ed18 <std>
 800edd8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800eddc:	2202      	movs	r2, #2
 800edde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ede2:	2112      	movs	r1, #18
 800ede4:	f7ff bf98 	b.w	800ed18 <std>
 800ede8:	20004598 	.word	0x20004598
 800edec:	20004460 	.word	0x20004460
 800edf0:	0800ed61 	.word	0x0800ed61

0800edf4 <__sfp_lock_acquire>:
 800edf4:	4801      	ldr	r0, [pc, #4]	; (800edfc <__sfp_lock_acquire+0x8>)
 800edf6:	f000 b989 	b.w	800f10c <__retarget_lock_acquire_recursive>
 800edfa:	bf00      	nop
 800edfc:	200045a1 	.word	0x200045a1

0800ee00 <__sfp_lock_release>:
 800ee00:	4801      	ldr	r0, [pc, #4]	; (800ee08 <__sfp_lock_release+0x8>)
 800ee02:	f000 b984 	b.w	800f10e <__retarget_lock_release_recursive>
 800ee06:	bf00      	nop
 800ee08:	200045a1 	.word	0x200045a1

0800ee0c <__sinit>:
 800ee0c:	b510      	push	{r4, lr}
 800ee0e:	4604      	mov	r4, r0
 800ee10:	f7ff fff0 	bl	800edf4 <__sfp_lock_acquire>
 800ee14:	6a23      	ldr	r3, [r4, #32]
 800ee16:	b11b      	cbz	r3, 800ee20 <__sinit+0x14>
 800ee18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee1c:	f7ff bff0 	b.w	800ee00 <__sfp_lock_release>
 800ee20:	4b04      	ldr	r3, [pc, #16]	; (800ee34 <__sinit+0x28>)
 800ee22:	6223      	str	r3, [r4, #32]
 800ee24:	4b04      	ldr	r3, [pc, #16]	; (800ee38 <__sinit+0x2c>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d1f5      	bne.n	800ee18 <__sinit+0xc>
 800ee2c:	f7ff ffc4 	bl	800edb8 <global_stdio_init.part.0>
 800ee30:	e7f2      	b.n	800ee18 <__sinit+0xc>
 800ee32:	bf00      	nop
 800ee34:	0800ed79 	.word	0x0800ed79
 800ee38:	20004598 	.word	0x20004598

0800ee3c <_fwalk_sglue>:
 800ee3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee40:	4607      	mov	r7, r0
 800ee42:	4688      	mov	r8, r1
 800ee44:	4614      	mov	r4, r2
 800ee46:	2600      	movs	r6, #0
 800ee48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ee4c:	f1b9 0901 	subs.w	r9, r9, #1
 800ee50:	d505      	bpl.n	800ee5e <_fwalk_sglue+0x22>
 800ee52:	6824      	ldr	r4, [r4, #0]
 800ee54:	2c00      	cmp	r4, #0
 800ee56:	d1f7      	bne.n	800ee48 <_fwalk_sglue+0xc>
 800ee58:	4630      	mov	r0, r6
 800ee5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee5e:	89ab      	ldrh	r3, [r5, #12]
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d907      	bls.n	800ee74 <_fwalk_sglue+0x38>
 800ee64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee68:	3301      	adds	r3, #1
 800ee6a:	d003      	beq.n	800ee74 <_fwalk_sglue+0x38>
 800ee6c:	4629      	mov	r1, r5
 800ee6e:	4638      	mov	r0, r7
 800ee70:	47c0      	blx	r8
 800ee72:	4306      	orrs	r6, r0
 800ee74:	3568      	adds	r5, #104	; 0x68
 800ee76:	e7e9      	b.n	800ee4c <_fwalk_sglue+0x10>

0800ee78 <siprintf>:
 800ee78:	b40e      	push	{r1, r2, r3}
 800ee7a:	b500      	push	{lr}
 800ee7c:	b09c      	sub	sp, #112	; 0x70
 800ee7e:	ab1d      	add	r3, sp, #116	; 0x74
 800ee80:	9002      	str	r0, [sp, #8]
 800ee82:	9006      	str	r0, [sp, #24]
 800ee84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee88:	4809      	ldr	r0, [pc, #36]	; (800eeb0 <siprintf+0x38>)
 800ee8a:	9107      	str	r1, [sp, #28]
 800ee8c:	9104      	str	r1, [sp, #16]
 800ee8e:	4909      	ldr	r1, [pc, #36]	; (800eeb4 <siprintf+0x3c>)
 800ee90:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee94:	9105      	str	r1, [sp, #20]
 800ee96:	6800      	ldr	r0, [r0, #0]
 800ee98:	9301      	str	r3, [sp, #4]
 800ee9a:	a902      	add	r1, sp, #8
 800ee9c:	f000 fab8 	bl	800f410 <_svfiprintf_r>
 800eea0:	9b02      	ldr	r3, [sp, #8]
 800eea2:	2200      	movs	r2, #0
 800eea4:	701a      	strb	r2, [r3, #0]
 800eea6:	b01c      	add	sp, #112	; 0x70
 800eea8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eeac:	b003      	add	sp, #12
 800eeae:	4770      	bx	lr
 800eeb0:	200001b4 	.word	0x200001b4
 800eeb4:	ffff0208 	.word	0xffff0208

0800eeb8 <__sread>:
 800eeb8:	b510      	push	{r4, lr}
 800eeba:	460c      	mov	r4, r1
 800eebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eec0:	f000 f8d6 	bl	800f070 <_read_r>
 800eec4:	2800      	cmp	r0, #0
 800eec6:	bfab      	itete	ge
 800eec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eeca:	89a3      	ldrhlt	r3, [r4, #12]
 800eecc:	181b      	addge	r3, r3, r0
 800eece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eed2:	bfac      	ite	ge
 800eed4:	6563      	strge	r3, [r4, #84]	; 0x54
 800eed6:	81a3      	strhlt	r3, [r4, #12]
 800eed8:	bd10      	pop	{r4, pc}

0800eeda <__swrite>:
 800eeda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eede:	461f      	mov	r7, r3
 800eee0:	898b      	ldrh	r3, [r1, #12]
 800eee2:	05db      	lsls	r3, r3, #23
 800eee4:	4605      	mov	r5, r0
 800eee6:	460c      	mov	r4, r1
 800eee8:	4616      	mov	r6, r2
 800eeea:	d505      	bpl.n	800eef8 <__swrite+0x1e>
 800eeec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eef0:	2302      	movs	r3, #2
 800eef2:	2200      	movs	r2, #0
 800eef4:	f000 f8aa 	bl	800f04c <_lseek_r>
 800eef8:	89a3      	ldrh	r3, [r4, #12]
 800eefa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eefe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef02:	81a3      	strh	r3, [r4, #12]
 800ef04:	4632      	mov	r2, r6
 800ef06:	463b      	mov	r3, r7
 800ef08:	4628      	mov	r0, r5
 800ef0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef0e:	f000 b8c1 	b.w	800f094 <_write_r>

0800ef12 <__sseek>:
 800ef12:	b510      	push	{r4, lr}
 800ef14:	460c      	mov	r4, r1
 800ef16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef1a:	f000 f897 	bl	800f04c <_lseek_r>
 800ef1e:	1c43      	adds	r3, r0, #1
 800ef20:	89a3      	ldrh	r3, [r4, #12]
 800ef22:	bf15      	itete	ne
 800ef24:	6560      	strne	r0, [r4, #84]	; 0x54
 800ef26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ef2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ef2e:	81a3      	strheq	r3, [r4, #12]
 800ef30:	bf18      	it	ne
 800ef32:	81a3      	strhne	r3, [r4, #12]
 800ef34:	bd10      	pop	{r4, pc}

0800ef36 <__sclose>:
 800ef36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef3a:	f000 b877 	b.w	800f02c <_close_r>

0800ef3e <memset>:
 800ef3e:	4402      	add	r2, r0
 800ef40:	4603      	mov	r3, r0
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d100      	bne.n	800ef48 <memset+0xa>
 800ef46:	4770      	bx	lr
 800ef48:	f803 1b01 	strb.w	r1, [r3], #1
 800ef4c:	e7f9      	b.n	800ef42 <memset+0x4>

0800ef4e <strncat>:
 800ef4e:	b530      	push	{r4, r5, lr}
 800ef50:	4604      	mov	r4, r0
 800ef52:	7825      	ldrb	r5, [r4, #0]
 800ef54:	4623      	mov	r3, r4
 800ef56:	3401      	adds	r4, #1
 800ef58:	2d00      	cmp	r5, #0
 800ef5a:	d1fa      	bne.n	800ef52 <strncat+0x4>
 800ef5c:	3a01      	subs	r2, #1
 800ef5e:	d304      	bcc.n	800ef6a <strncat+0x1c>
 800ef60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef64:	f803 4b01 	strb.w	r4, [r3], #1
 800ef68:	b904      	cbnz	r4, 800ef6c <strncat+0x1e>
 800ef6a:	bd30      	pop	{r4, r5, pc}
 800ef6c:	2a00      	cmp	r2, #0
 800ef6e:	d1f5      	bne.n	800ef5c <strncat+0xe>
 800ef70:	701a      	strb	r2, [r3, #0]
 800ef72:	e7f3      	b.n	800ef5c <strncat+0xe>

0800ef74 <strtok>:
 800ef74:	4b16      	ldr	r3, [pc, #88]	; (800efd0 <strtok+0x5c>)
 800ef76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef78:	681e      	ldr	r6, [r3, #0]
 800ef7a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800ef7c:	4605      	mov	r5, r0
 800ef7e:	b9fc      	cbnz	r4, 800efc0 <strtok+0x4c>
 800ef80:	2050      	movs	r0, #80	; 0x50
 800ef82:	9101      	str	r1, [sp, #4]
 800ef84:	f000 f936 	bl	800f1f4 <malloc>
 800ef88:	9901      	ldr	r1, [sp, #4]
 800ef8a:	6470      	str	r0, [r6, #68]	; 0x44
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	b920      	cbnz	r0, 800ef9a <strtok+0x26>
 800ef90:	4b10      	ldr	r3, [pc, #64]	; (800efd4 <strtok+0x60>)
 800ef92:	4811      	ldr	r0, [pc, #68]	; (800efd8 <strtok+0x64>)
 800ef94:	215b      	movs	r1, #91	; 0x5b
 800ef96:	f000 f8c3 	bl	800f120 <__assert_func>
 800ef9a:	e9c0 4400 	strd	r4, r4, [r0]
 800ef9e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800efa2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800efa6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800efaa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800efae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800efb2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800efb6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800efba:	6184      	str	r4, [r0, #24]
 800efbc:	7704      	strb	r4, [r0, #28]
 800efbe:	6244      	str	r4, [r0, #36]	; 0x24
 800efc0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800efc2:	2301      	movs	r3, #1
 800efc4:	4628      	mov	r0, r5
 800efc6:	b002      	add	sp, #8
 800efc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efcc:	f000 b806 	b.w	800efdc <__strtok_r>
 800efd0:	200001b4 	.word	0x200001b4
 800efd4:	08010979 	.word	0x08010979
 800efd8:	08010990 	.word	0x08010990

0800efdc <__strtok_r>:
 800efdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efde:	b908      	cbnz	r0, 800efe4 <__strtok_r+0x8>
 800efe0:	6810      	ldr	r0, [r2, #0]
 800efe2:	b188      	cbz	r0, 800f008 <__strtok_r+0x2c>
 800efe4:	4604      	mov	r4, r0
 800efe6:	4620      	mov	r0, r4
 800efe8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800efec:	460f      	mov	r7, r1
 800efee:	f817 6b01 	ldrb.w	r6, [r7], #1
 800eff2:	b91e      	cbnz	r6, 800effc <__strtok_r+0x20>
 800eff4:	b965      	cbnz	r5, 800f010 <__strtok_r+0x34>
 800eff6:	6015      	str	r5, [r2, #0]
 800eff8:	4628      	mov	r0, r5
 800effa:	e005      	b.n	800f008 <__strtok_r+0x2c>
 800effc:	42b5      	cmp	r5, r6
 800effe:	d1f6      	bne.n	800efee <__strtok_r+0x12>
 800f000:	2b00      	cmp	r3, #0
 800f002:	d1f0      	bne.n	800efe6 <__strtok_r+0xa>
 800f004:	6014      	str	r4, [r2, #0]
 800f006:	7003      	strb	r3, [r0, #0]
 800f008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f00a:	461c      	mov	r4, r3
 800f00c:	e00c      	b.n	800f028 <__strtok_r+0x4c>
 800f00e:	b915      	cbnz	r5, 800f016 <__strtok_r+0x3a>
 800f010:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f014:	460e      	mov	r6, r1
 800f016:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f01a:	42ab      	cmp	r3, r5
 800f01c:	d1f7      	bne.n	800f00e <__strtok_r+0x32>
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d0f3      	beq.n	800f00a <__strtok_r+0x2e>
 800f022:	2300      	movs	r3, #0
 800f024:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f028:	6014      	str	r4, [r2, #0]
 800f02a:	e7ed      	b.n	800f008 <__strtok_r+0x2c>

0800f02c <_close_r>:
 800f02c:	b538      	push	{r3, r4, r5, lr}
 800f02e:	4d06      	ldr	r5, [pc, #24]	; (800f048 <_close_r+0x1c>)
 800f030:	2300      	movs	r3, #0
 800f032:	4604      	mov	r4, r0
 800f034:	4608      	mov	r0, r1
 800f036:	602b      	str	r3, [r5, #0]
 800f038:	f7f3 fc1b 	bl	8002872 <_close>
 800f03c:	1c43      	adds	r3, r0, #1
 800f03e:	d102      	bne.n	800f046 <_close_r+0x1a>
 800f040:	682b      	ldr	r3, [r5, #0]
 800f042:	b103      	cbz	r3, 800f046 <_close_r+0x1a>
 800f044:	6023      	str	r3, [r4, #0]
 800f046:	bd38      	pop	{r3, r4, r5, pc}
 800f048:	2000459c 	.word	0x2000459c

0800f04c <_lseek_r>:
 800f04c:	b538      	push	{r3, r4, r5, lr}
 800f04e:	4d07      	ldr	r5, [pc, #28]	; (800f06c <_lseek_r+0x20>)
 800f050:	4604      	mov	r4, r0
 800f052:	4608      	mov	r0, r1
 800f054:	4611      	mov	r1, r2
 800f056:	2200      	movs	r2, #0
 800f058:	602a      	str	r2, [r5, #0]
 800f05a:	461a      	mov	r2, r3
 800f05c:	f7f3 fc30 	bl	80028c0 <_lseek>
 800f060:	1c43      	adds	r3, r0, #1
 800f062:	d102      	bne.n	800f06a <_lseek_r+0x1e>
 800f064:	682b      	ldr	r3, [r5, #0]
 800f066:	b103      	cbz	r3, 800f06a <_lseek_r+0x1e>
 800f068:	6023      	str	r3, [r4, #0]
 800f06a:	bd38      	pop	{r3, r4, r5, pc}
 800f06c:	2000459c 	.word	0x2000459c

0800f070 <_read_r>:
 800f070:	b538      	push	{r3, r4, r5, lr}
 800f072:	4d07      	ldr	r5, [pc, #28]	; (800f090 <_read_r+0x20>)
 800f074:	4604      	mov	r4, r0
 800f076:	4608      	mov	r0, r1
 800f078:	4611      	mov	r1, r2
 800f07a:	2200      	movs	r2, #0
 800f07c:	602a      	str	r2, [r5, #0]
 800f07e:	461a      	mov	r2, r3
 800f080:	f7f3 fbbe 	bl	8002800 <_read>
 800f084:	1c43      	adds	r3, r0, #1
 800f086:	d102      	bne.n	800f08e <_read_r+0x1e>
 800f088:	682b      	ldr	r3, [r5, #0]
 800f08a:	b103      	cbz	r3, 800f08e <_read_r+0x1e>
 800f08c:	6023      	str	r3, [r4, #0]
 800f08e:	bd38      	pop	{r3, r4, r5, pc}
 800f090:	2000459c 	.word	0x2000459c

0800f094 <_write_r>:
 800f094:	b538      	push	{r3, r4, r5, lr}
 800f096:	4d07      	ldr	r5, [pc, #28]	; (800f0b4 <_write_r+0x20>)
 800f098:	4604      	mov	r4, r0
 800f09a:	4608      	mov	r0, r1
 800f09c:	4611      	mov	r1, r2
 800f09e:	2200      	movs	r2, #0
 800f0a0:	602a      	str	r2, [r5, #0]
 800f0a2:	461a      	mov	r2, r3
 800f0a4:	f7f3 fbc9 	bl	800283a <_write>
 800f0a8:	1c43      	adds	r3, r0, #1
 800f0aa:	d102      	bne.n	800f0b2 <_write_r+0x1e>
 800f0ac:	682b      	ldr	r3, [r5, #0]
 800f0ae:	b103      	cbz	r3, 800f0b2 <_write_r+0x1e>
 800f0b0:	6023      	str	r3, [r4, #0]
 800f0b2:	bd38      	pop	{r3, r4, r5, pc}
 800f0b4:	2000459c 	.word	0x2000459c

0800f0b8 <__errno>:
 800f0b8:	4b01      	ldr	r3, [pc, #4]	; (800f0c0 <__errno+0x8>)
 800f0ba:	6818      	ldr	r0, [r3, #0]
 800f0bc:	4770      	bx	lr
 800f0be:	bf00      	nop
 800f0c0:	200001b4 	.word	0x200001b4

0800f0c4 <__libc_init_array>:
 800f0c4:	b570      	push	{r4, r5, r6, lr}
 800f0c6:	4d0d      	ldr	r5, [pc, #52]	; (800f0fc <__libc_init_array+0x38>)
 800f0c8:	4c0d      	ldr	r4, [pc, #52]	; (800f100 <__libc_init_array+0x3c>)
 800f0ca:	1b64      	subs	r4, r4, r5
 800f0cc:	10a4      	asrs	r4, r4, #2
 800f0ce:	2600      	movs	r6, #0
 800f0d0:	42a6      	cmp	r6, r4
 800f0d2:	d109      	bne.n	800f0e8 <__libc_init_array+0x24>
 800f0d4:	4d0b      	ldr	r5, [pc, #44]	; (800f104 <__libc_init_array+0x40>)
 800f0d6:	4c0c      	ldr	r4, [pc, #48]	; (800f108 <__libc_init_array+0x44>)
 800f0d8:	f001 f800 	bl	80100dc <_init>
 800f0dc:	1b64      	subs	r4, r4, r5
 800f0de:	10a4      	asrs	r4, r4, #2
 800f0e0:	2600      	movs	r6, #0
 800f0e2:	42a6      	cmp	r6, r4
 800f0e4:	d105      	bne.n	800f0f2 <__libc_init_array+0x2e>
 800f0e6:	bd70      	pop	{r4, r5, r6, pc}
 800f0e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0ec:	4798      	blx	r3
 800f0ee:	3601      	adds	r6, #1
 800f0f0:	e7ee      	b.n	800f0d0 <__libc_init_array+0xc>
 800f0f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0f6:	4798      	blx	r3
 800f0f8:	3601      	adds	r6, #1
 800f0fa:	e7f2      	b.n	800f0e2 <__libc_init_array+0x1e>
 800f0fc:	08010a64 	.word	0x08010a64
 800f100:	08010a64 	.word	0x08010a64
 800f104:	08010a64 	.word	0x08010a64
 800f108:	08010a68 	.word	0x08010a68

0800f10c <__retarget_lock_acquire_recursive>:
 800f10c:	4770      	bx	lr

0800f10e <__retarget_lock_release_recursive>:
 800f10e:	4770      	bx	lr

0800f110 <strcpy>:
 800f110:	4603      	mov	r3, r0
 800f112:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f116:	f803 2b01 	strb.w	r2, [r3], #1
 800f11a:	2a00      	cmp	r2, #0
 800f11c:	d1f9      	bne.n	800f112 <strcpy+0x2>
 800f11e:	4770      	bx	lr

0800f120 <__assert_func>:
 800f120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f122:	4614      	mov	r4, r2
 800f124:	461a      	mov	r2, r3
 800f126:	4b09      	ldr	r3, [pc, #36]	; (800f14c <__assert_func+0x2c>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	4605      	mov	r5, r0
 800f12c:	68d8      	ldr	r0, [r3, #12]
 800f12e:	b14c      	cbz	r4, 800f144 <__assert_func+0x24>
 800f130:	4b07      	ldr	r3, [pc, #28]	; (800f150 <__assert_func+0x30>)
 800f132:	9100      	str	r1, [sp, #0]
 800f134:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f138:	4906      	ldr	r1, [pc, #24]	; (800f154 <__assert_func+0x34>)
 800f13a:	462b      	mov	r3, r5
 800f13c:	f000 fca4 	bl	800fa88 <fiprintf>
 800f140:	f000 fcec 	bl	800fb1c <abort>
 800f144:	4b04      	ldr	r3, [pc, #16]	; (800f158 <__assert_func+0x38>)
 800f146:	461c      	mov	r4, r3
 800f148:	e7f3      	b.n	800f132 <__assert_func+0x12>
 800f14a:	bf00      	nop
 800f14c:	200001b4 	.word	0x200001b4
 800f150:	080109ea 	.word	0x080109ea
 800f154:	080109f7 	.word	0x080109f7
 800f158:	08010a25 	.word	0x08010a25

0800f15c <_free_r>:
 800f15c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f15e:	2900      	cmp	r1, #0
 800f160:	d044      	beq.n	800f1ec <_free_r+0x90>
 800f162:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f166:	9001      	str	r0, [sp, #4]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	f1a1 0404 	sub.w	r4, r1, #4
 800f16e:	bfb8      	it	lt
 800f170:	18e4      	addlt	r4, r4, r3
 800f172:	f000 f8e7 	bl	800f344 <__malloc_lock>
 800f176:	4a1e      	ldr	r2, [pc, #120]	; (800f1f0 <_free_r+0x94>)
 800f178:	9801      	ldr	r0, [sp, #4]
 800f17a:	6813      	ldr	r3, [r2, #0]
 800f17c:	b933      	cbnz	r3, 800f18c <_free_r+0x30>
 800f17e:	6063      	str	r3, [r4, #4]
 800f180:	6014      	str	r4, [r2, #0]
 800f182:	b003      	add	sp, #12
 800f184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f188:	f000 b8e2 	b.w	800f350 <__malloc_unlock>
 800f18c:	42a3      	cmp	r3, r4
 800f18e:	d908      	bls.n	800f1a2 <_free_r+0x46>
 800f190:	6825      	ldr	r5, [r4, #0]
 800f192:	1961      	adds	r1, r4, r5
 800f194:	428b      	cmp	r3, r1
 800f196:	bf01      	itttt	eq
 800f198:	6819      	ldreq	r1, [r3, #0]
 800f19a:	685b      	ldreq	r3, [r3, #4]
 800f19c:	1949      	addeq	r1, r1, r5
 800f19e:	6021      	streq	r1, [r4, #0]
 800f1a0:	e7ed      	b.n	800f17e <_free_r+0x22>
 800f1a2:	461a      	mov	r2, r3
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	b10b      	cbz	r3, 800f1ac <_free_r+0x50>
 800f1a8:	42a3      	cmp	r3, r4
 800f1aa:	d9fa      	bls.n	800f1a2 <_free_r+0x46>
 800f1ac:	6811      	ldr	r1, [r2, #0]
 800f1ae:	1855      	adds	r5, r2, r1
 800f1b0:	42a5      	cmp	r5, r4
 800f1b2:	d10b      	bne.n	800f1cc <_free_r+0x70>
 800f1b4:	6824      	ldr	r4, [r4, #0]
 800f1b6:	4421      	add	r1, r4
 800f1b8:	1854      	adds	r4, r2, r1
 800f1ba:	42a3      	cmp	r3, r4
 800f1bc:	6011      	str	r1, [r2, #0]
 800f1be:	d1e0      	bne.n	800f182 <_free_r+0x26>
 800f1c0:	681c      	ldr	r4, [r3, #0]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	6053      	str	r3, [r2, #4]
 800f1c6:	440c      	add	r4, r1
 800f1c8:	6014      	str	r4, [r2, #0]
 800f1ca:	e7da      	b.n	800f182 <_free_r+0x26>
 800f1cc:	d902      	bls.n	800f1d4 <_free_r+0x78>
 800f1ce:	230c      	movs	r3, #12
 800f1d0:	6003      	str	r3, [r0, #0]
 800f1d2:	e7d6      	b.n	800f182 <_free_r+0x26>
 800f1d4:	6825      	ldr	r5, [r4, #0]
 800f1d6:	1961      	adds	r1, r4, r5
 800f1d8:	428b      	cmp	r3, r1
 800f1da:	bf04      	itt	eq
 800f1dc:	6819      	ldreq	r1, [r3, #0]
 800f1de:	685b      	ldreq	r3, [r3, #4]
 800f1e0:	6063      	str	r3, [r4, #4]
 800f1e2:	bf04      	itt	eq
 800f1e4:	1949      	addeq	r1, r1, r5
 800f1e6:	6021      	streq	r1, [r4, #0]
 800f1e8:	6054      	str	r4, [r2, #4]
 800f1ea:	e7ca      	b.n	800f182 <_free_r+0x26>
 800f1ec:	b003      	add	sp, #12
 800f1ee:	bd30      	pop	{r4, r5, pc}
 800f1f0:	200045a4 	.word	0x200045a4

0800f1f4 <malloc>:
 800f1f4:	4b02      	ldr	r3, [pc, #8]	; (800f200 <malloc+0xc>)
 800f1f6:	4601      	mov	r1, r0
 800f1f8:	6818      	ldr	r0, [r3, #0]
 800f1fa:	f000 b823 	b.w	800f244 <_malloc_r>
 800f1fe:	bf00      	nop
 800f200:	200001b4 	.word	0x200001b4

0800f204 <sbrk_aligned>:
 800f204:	b570      	push	{r4, r5, r6, lr}
 800f206:	4e0e      	ldr	r6, [pc, #56]	; (800f240 <sbrk_aligned+0x3c>)
 800f208:	460c      	mov	r4, r1
 800f20a:	6831      	ldr	r1, [r6, #0]
 800f20c:	4605      	mov	r5, r0
 800f20e:	b911      	cbnz	r1, 800f216 <sbrk_aligned+0x12>
 800f210:	f000 fc66 	bl	800fae0 <_sbrk_r>
 800f214:	6030      	str	r0, [r6, #0]
 800f216:	4621      	mov	r1, r4
 800f218:	4628      	mov	r0, r5
 800f21a:	f000 fc61 	bl	800fae0 <_sbrk_r>
 800f21e:	1c43      	adds	r3, r0, #1
 800f220:	d00a      	beq.n	800f238 <sbrk_aligned+0x34>
 800f222:	1cc4      	adds	r4, r0, #3
 800f224:	f024 0403 	bic.w	r4, r4, #3
 800f228:	42a0      	cmp	r0, r4
 800f22a:	d007      	beq.n	800f23c <sbrk_aligned+0x38>
 800f22c:	1a21      	subs	r1, r4, r0
 800f22e:	4628      	mov	r0, r5
 800f230:	f000 fc56 	bl	800fae0 <_sbrk_r>
 800f234:	3001      	adds	r0, #1
 800f236:	d101      	bne.n	800f23c <sbrk_aligned+0x38>
 800f238:	f04f 34ff 	mov.w	r4, #4294967295
 800f23c:	4620      	mov	r0, r4
 800f23e:	bd70      	pop	{r4, r5, r6, pc}
 800f240:	200045a8 	.word	0x200045a8

0800f244 <_malloc_r>:
 800f244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f248:	1ccd      	adds	r5, r1, #3
 800f24a:	f025 0503 	bic.w	r5, r5, #3
 800f24e:	3508      	adds	r5, #8
 800f250:	2d0c      	cmp	r5, #12
 800f252:	bf38      	it	cc
 800f254:	250c      	movcc	r5, #12
 800f256:	2d00      	cmp	r5, #0
 800f258:	4607      	mov	r7, r0
 800f25a:	db01      	blt.n	800f260 <_malloc_r+0x1c>
 800f25c:	42a9      	cmp	r1, r5
 800f25e:	d905      	bls.n	800f26c <_malloc_r+0x28>
 800f260:	230c      	movs	r3, #12
 800f262:	603b      	str	r3, [r7, #0]
 800f264:	2600      	movs	r6, #0
 800f266:	4630      	mov	r0, r6
 800f268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f26c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f340 <_malloc_r+0xfc>
 800f270:	f000 f868 	bl	800f344 <__malloc_lock>
 800f274:	f8d8 3000 	ldr.w	r3, [r8]
 800f278:	461c      	mov	r4, r3
 800f27a:	bb5c      	cbnz	r4, 800f2d4 <_malloc_r+0x90>
 800f27c:	4629      	mov	r1, r5
 800f27e:	4638      	mov	r0, r7
 800f280:	f7ff ffc0 	bl	800f204 <sbrk_aligned>
 800f284:	1c43      	adds	r3, r0, #1
 800f286:	4604      	mov	r4, r0
 800f288:	d155      	bne.n	800f336 <_malloc_r+0xf2>
 800f28a:	f8d8 4000 	ldr.w	r4, [r8]
 800f28e:	4626      	mov	r6, r4
 800f290:	2e00      	cmp	r6, #0
 800f292:	d145      	bne.n	800f320 <_malloc_r+0xdc>
 800f294:	2c00      	cmp	r4, #0
 800f296:	d048      	beq.n	800f32a <_malloc_r+0xe6>
 800f298:	6823      	ldr	r3, [r4, #0]
 800f29a:	4631      	mov	r1, r6
 800f29c:	4638      	mov	r0, r7
 800f29e:	eb04 0903 	add.w	r9, r4, r3
 800f2a2:	f000 fc1d 	bl	800fae0 <_sbrk_r>
 800f2a6:	4581      	cmp	r9, r0
 800f2a8:	d13f      	bne.n	800f32a <_malloc_r+0xe6>
 800f2aa:	6821      	ldr	r1, [r4, #0]
 800f2ac:	1a6d      	subs	r5, r5, r1
 800f2ae:	4629      	mov	r1, r5
 800f2b0:	4638      	mov	r0, r7
 800f2b2:	f7ff ffa7 	bl	800f204 <sbrk_aligned>
 800f2b6:	3001      	adds	r0, #1
 800f2b8:	d037      	beq.n	800f32a <_malloc_r+0xe6>
 800f2ba:	6823      	ldr	r3, [r4, #0]
 800f2bc:	442b      	add	r3, r5
 800f2be:	6023      	str	r3, [r4, #0]
 800f2c0:	f8d8 3000 	ldr.w	r3, [r8]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d038      	beq.n	800f33a <_malloc_r+0xf6>
 800f2c8:	685a      	ldr	r2, [r3, #4]
 800f2ca:	42a2      	cmp	r2, r4
 800f2cc:	d12b      	bne.n	800f326 <_malloc_r+0xe2>
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	605a      	str	r2, [r3, #4]
 800f2d2:	e00f      	b.n	800f2f4 <_malloc_r+0xb0>
 800f2d4:	6822      	ldr	r2, [r4, #0]
 800f2d6:	1b52      	subs	r2, r2, r5
 800f2d8:	d41f      	bmi.n	800f31a <_malloc_r+0xd6>
 800f2da:	2a0b      	cmp	r2, #11
 800f2dc:	d917      	bls.n	800f30e <_malloc_r+0xca>
 800f2de:	1961      	adds	r1, r4, r5
 800f2e0:	42a3      	cmp	r3, r4
 800f2e2:	6025      	str	r5, [r4, #0]
 800f2e4:	bf18      	it	ne
 800f2e6:	6059      	strne	r1, [r3, #4]
 800f2e8:	6863      	ldr	r3, [r4, #4]
 800f2ea:	bf08      	it	eq
 800f2ec:	f8c8 1000 	streq.w	r1, [r8]
 800f2f0:	5162      	str	r2, [r4, r5]
 800f2f2:	604b      	str	r3, [r1, #4]
 800f2f4:	4638      	mov	r0, r7
 800f2f6:	f104 060b 	add.w	r6, r4, #11
 800f2fa:	f000 f829 	bl	800f350 <__malloc_unlock>
 800f2fe:	f026 0607 	bic.w	r6, r6, #7
 800f302:	1d23      	adds	r3, r4, #4
 800f304:	1af2      	subs	r2, r6, r3
 800f306:	d0ae      	beq.n	800f266 <_malloc_r+0x22>
 800f308:	1b9b      	subs	r3, r3, r6
 800f30a:	50a3      	str	r3, [r4, r2]
 800f30c:	e7ab      	b.n	800f266 <_malloc_r+0x22>
 800f30e:	42a3      	cmp	r3, r4
 800f310:	6862      	ldr	r2, [r4, #4]
 800f312:	d1dd      	bne.n	800f2d0 <_malloc_r+0x8c>
 800f314:	f8c8 2000 	str.w	r2, [r8]
 800f318:	e7ec      	b.n	800f2f4 <_malloc_r+0xb0>
 800f31a:	4623      	mov	r3, r4
 800f31c:	6864      	ldr	r4, [r4, #4]
 800f31e:	e7ac      	b.n	800f27a <_malloc_r+0x36>
 800f320:	4634      	mov	r4, r6
 800f322:	6876      	ldr	r6, [r6, #4]
 800f324:	e7b4      	b.n	800f290 <_malloc_r+0x4c>
 800f326:	4613      	mov	r3, r2
 800f328:	e7cc      	b.n	800f2c4 <_malloc_r+0x80>
 800f32a:	230c      	movs	r3, #12
 800f32c:	603b      	str	r3, [r7, #0]
 800f32e:	4638      	mov	r0, r7
 800f330:	f000 f80e 	bl	800f350 <__malloc_unlock>
 800f334:	e797      	b.n	800f266 <_malloc_r+0x22>
 800f336:	6025      	str	r5, [r4, #0]
 800f338:	e7dc      	b.n	800f2f4 <_malloc_r+0xb0>
 800f33a:	605b      	str	r3, [r3, #4]
 800f33c:	deff      	udf	#255	; 0xff
 800f33e:	bf00      	nop
 800f340:	200045a4 	.word	0x200045a4

0800f344 <__malloc_lock>:
 800f344:	4801      	ldr	r0, [pc, #4]	; (800f34c <__malloc_lock+0x8>)
 800f346:	f7ff bee1 	b.w	800f10c <__retarget_lock_acquire_recursive>
 800f34a:	bf00      	nop
 800f34c:	200045a0 	.word	0x200045a0

0800f350 <__malloc_unlock>:
 800f350:	4801      	ldr	r0, [pc, #4]	; (800f358 <__malloc_unlock+0x8>)
 800f352:	f7ff bedc 	b.w	800f10e <__retarget_lock_release_recursive>
 800f356:	bf00      	nop
 800f358:	200045a0 	.word	0x200045a0

0800f35c <__ssputs_r>:
 800f35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f360:	688e      	ldr	r6, [r1, #8]
 800f362:	461f      	mov	r7, r3
 800f364:	42be      	cmp	r6, r7
 800f366:	680b      	ldr	r3, [r1, #0]
 800f368:	4682      	mov	sl, r0
 800f36a:	460c      	mov	r4, r1
 800f36c:	4690      	mov	r8, r2
 800f36e:	d82c      	bhi.n	800f3ca <__ssputs_r+0x6e>
 800f370:	898a      	ldrh	r2, [r1, #12]
 800f372:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f376:	d026      	beq.n	800f3c6 <__ssputs_r+0x6a>
 800f378:	6965      	ldr	r5, [r4, #20]
 800f37a:	6909      	ldr	r1, [r1, #16]
 800f37c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f380:	eba3 0901 	sub.w	r9, r3, r1
 800f384:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f388:	1c7b      	adds	r3, r7, #1
 800f38a:	444b      	add	r3, r9
 800f38c:	106d      	asrs	r5, r5, #1
 800f38e:	429d      	cmp	r5, r3
 800f390:	bf38      	it	cc
 800f392:	461d      	movcc	r5, r3
 800f394:	0553      	lsls	r3, r2, #21
 800f396:	d527      	bpl.n	800f3e8 <__ssputs_r+0x8c>
 800f398:	4629      	mov	r1, r5
 800f39a:	f7ff ff53 	bl	800f244 <_malloc_r>
 800f39e:	4606      	mov	r6, r0
 800f3a0:	b360      	cbz	r0, 800f3fc <__ssputs_r+0xa0>
 800f3a2:	6921      	ldr	r1, [r4, #16]
 800f3a4:	464a      	mov	r2, r9
 800f3a6:	f000 fbab 	bl	800fb00 <memcpy>
 800f3aa:	89a3      	ldrh	r3, [r4, #12]
 800f3ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f3b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3b4:	81a3      	strh	r3, [r4, #12]
 800f3b6:	6126      	str	r6, [r4, #16]
 800f3b8:	6165      	str	r5, [r4, #20]
 800f3ba:	444e      	add	r6, r9
 800f3bc:	eba5 0509 	sub.w	r5, r5, r9
 800f3c0:	6026      	str	r6, [r4, #0]
 800f3c2:	60a5      	str	r5, [r4, #8]
 800f3c4:	463e      	mov	r6, r7
 800f3c6:	42be      	cmp	r6, r7
 800f3c8:	d900      	bls.n	800f3cc <__ssputs_r+0x70>
 800f3ca:	463e      	mov	r6, r7
 800f3cc:	6820      	ldr	r0, [r4, #0]
 800f3ce:	4632      	mov	r2, r6
 800f3d0:	4641      	mov	r1, r8
 800f3d2:	f000 fb6b 	bl	800faac <memmove>
 800f3d6:	68a3      	ldr	r3, [r4, #8]
 800f3d8:	1b9b      	subs	r3, r3, r6
 800f3da:	60a3      	str	r3, [r4, #8]
 800f3dc:	6823      	ldr	r3, [r4, #0]
 800f3de:	4433      	add	r3, r6
 800f3e0:	6023      	str	r3, [r4, #0]
 800f3e2:	2000      	movs	r0, #0
 800f3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3e8:	462a      	mov	r2, r5
 800f3ea:	f000 fb9e 	bl	800fb2a <_realloc_r>
 800f3ee:	4606      	mov	r6, r0
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	d1e0      	bne.n	800f3b6 <__ssputs_r+0x5a>
 800f3f4:	6921      	ldr	r1, [r4, #16]
 800f3f6:	4650      	mov	r0, sl
 800f3f8:	f7ff feb0 	bl	800f15c <_free_r>
 800f3fc:	230c      	movs	r3, #12
 800f3fe:	f8ca 3000 	str.w	r3, [sl]
 800f402:	89a3      	ldrh	r3, [r4, #12]
 800f404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f408:	81a3      	strh	r3, [r4, #12]
 800f40a:	f04f 30ff 	mov.w	r0, #4294967295
 800f40e:	e7e9      	b.n	800f3e4 <__ssputs_r+0x88>

0800f410 <_svfiprintf_r>:
 800f410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f414:	4698      	mov	r8, r3
 800f416:	898b      	ldrh	r3, [r1, #12]
 800f418:	061b      	lsls	r3, r3, #24
 800f41a:	b09d      	sub	sp, #116	; 0x74
 800f41c:	4607      	mov	r7, r0
 800f41e:	460d      	mov	r5, r1
 800f420:	4614      	mov	r4, r2
 800f422:	d50e      	bpl.n	800f442 <_svfiprintf_r+0x32>
 800f424:	690b      	ldr	r3, [r1, #16]
 800f426:	b963      	cbnz	r3, 800f442 <_svfiprintf_r+0x32>
 800f428:	2140      	movs	r1, #64	; 0x40
 800f42a:	f7ff ff0b 	bl	800f244 <_malloc_r>
 800f42e:	6028      	str	r0, [r5, #0]
 800f430:	6128      	str	r0, [r5, #16]
 800f432:	b920      	cbnz	r0, 800f43e <_svfiprintf_r+0x2e>
 800f434:	230c      	movs	r3, #12
 800f436:	603b      	str	r3, [r7, #0]
 800f438:	f04f 30ff 	mov.w	r0, #4294967295
 800f43c:	e0d0      	b.n	800f5e0 <_svfiprintf_r+0x1d0>
 800f43e:	2340      	movs	r3, #64	; 0x40
 800f440:	616b      	str	r3, [r5, #20]
 800f442:	2300      	movs	r3, #0
 800f444:	9309      	str	r3, [sp, #36]	; 0x24
 800f446:	2320      	movs	r3, #32
 800f448:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f44c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f450:	2330      	movs	r3, #48	; 0x30
 800f452:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f5f8 <_svfiprintf_r+0x1e8>
 800f456:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f45a:	f04f 0901 	mov.w	r9, #1
 800f45e:	4623      	mov	r3, r4
 800f460:	469a      	mov	sl, r3
 800f462:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f466:	b10a      	cbz	r2, 800f46c <_svfiprintf_r+0x5c>
 800f468:	2a25      	cmp	r2, #37	; 0x25
 800f46a:	d1f9      	bne.n	800f460 <_svfiprintf_r+0x50>
 800f46c:	ebba 0b04 	subs.w	fp, sl, r4
 800f470:	d00b      	beq.n	800f48a <_svfiprintf_r+0x7a>
 800f472:	465b      	mov	r3, fp
 800f474:	4622      	mov	r2, r4
 800f476:	4629      	mov	r1, r5
 800f478:	4638      	mov	r0, r7
 800f47a:	f7ff ff6f 	bl	800f35c <__ssputs_r>
 800f47e:	3001      	adds	r0, #1
 800f480:	f000 80a9 	beq.w	800f5d6 <_svfiprintf_r+0x1c6>
 800f484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f486:	445a      	add	r2, fp
 800f488:	9209      	str	r2, [sp, #36]	; 0x24
 800f48a:	f89a 3000 	ldrb.w	r3, [sl]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	f000 80a1 	beq.w	800f5d6 <_svfiprintf_r+0x1c6>
 800f494:	2300      	movs	r3, #0
 800f496:	f04f 32ff 	mov.w	r2, #4294967295
 800f49a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f49e:	f10a 0a01 	add.w	sl, sl, #1
 800f4a2:	9304      	str	r3, [sp, #16]
 800f4a4:	9307      	str	r3, [sp, #28]
 800f4a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4aa:	931a      	str	r3, [sp, #104]	; 0x68
 800f4ac:	4654      	mov	r4, sl
 800f4ae:	2205      	movs	r2, #5
 800f4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4b4:	4850      	ldr	r0, [pc, #320]	; (800f5f8 <_svfiprintf_r+0x1e8>)
 800f4b6:	f7f0 feab 	bl	8000210 <memchr>
 800f4ba:	9a04      	ldr	r2, [sp, #16]
 800f4bc:	b9d8      	cbnz	r0, 800f4f6 <_svfiprintf_r+0xe6>
 800f4be:	06d0      	lsls	r0, r2, #27
 800f4c0:	bf44      	itt	mi
 800f4c2:	2320      	movmi	r3, #32
 800f4c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4c8:	0711      	lsls	r1, r2, #28
 800f4ca:	bf44      	itt	mi
 800f4cc:	232b      	movmi	r3, #43	; 0x2b
 800f4ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4d2:	f89a 3000 	ldrb.w	r3, [sl]
 800f4d6:	2b2a      	cmp	r3, #42	; 0x2a
 800f4d8:	d015      	beq.n	800f506 <_svfiprintf_r+0xf6>
 800f4da:	9a07      	ldr	r2, [sp, #28]
 800f4dc:	4654      	mov	r4, sl
 800f4de:	2000      	movs	r0, #0
 800f4e0:	f04f 0c0a 	mov.w	ip, #10
 800f4e4:	4621      	mov	r1, r4
 800f4e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4ea:	3b30      	subs	r3, #48	; 0x30
 800f4ec:	2b09      	cmp	r3, #9
 800f4ee:	d94d      	bls.n	800f58c <_svfiprintf_r+0x17c>
 800f4f0:	b1b0      	cbz	r0, 800f520 <_svfiprintf_r+0x110>
 800f4f2:	9207      	str	r2, [sp, #28]
 800f4f4:	e014      	b.n	800f520 <_svfiprintf_r+0x110>
 800f4f6:	eba0 0308 	sub.w	r3, r0, r8
 800f4fa:	fa09 f303 	lsl.w	r3, r9, r3
 800f4fe:	4313      	orrs	r3, r2
 800f500:	9304      	str	r3, [sp, #16]
 800f502:	46a2      	mov	sl, r4
 800f504:	e7d2      	b.n	800f4ac <_svfiprintf_r+0x9c>
 800f506:	9b03      	ldr	r3, [sp, #12]
 800f508:	1d19      	adds	r1, r3, #4
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	9103      	str	r1, [sp, #12]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	bfbb      	ittet	lt
 800f512:	425b      	neglt	r3, r3
 800f514:	f042 0202 	orrlt.w	r2, r2, #2
 800f518:	9307      	strge	r3, [sp, #28]
 800f51a:	9307      	strlt	r3, [sp, #28]
 800f51c:	bfb8      	it	lt
 800f51e:	9204      	strlt	r2, [sp, #16]
 800f520:	7823      	ldrb	r3, [r4, #0]
 800f522:	2b2e      	cmp	r3, #46	; 0x2e
 800f524:	d10c      	bne.n	800f540 <_svfiprintf_r+0x130>
 800f526:	7863      	ldrb	r3, [r4, #1]
 800f528:	2b2a      	cmp	r3, #42	; 0x2a
 800f52a:	d134      	bne.n	800f596 <_svfiprintf_r+0x186>
 800f52c:	9b03      	ldr	r3, [sp, #12]
 800f52e:	1d1a      	adds	r2, r3, #4
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	9203      	str	r2, [sp, #12]
 800f534:	2b00      	cmp	r3, #0
 800f536:	bfb8      	it	lt
 800f538:	f04f 33ff 	movlt.w	r3, #4294967295
 800f53c:	3402      	adds	r4, #2
 800f53e:	9305      	str	r3, [sp, #20]
 800f540:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f608 <_svfiprintf_r+0x1f8>
 800f544:	7821      	ldrb	r1, [r4, #0]
 800f546:	2203      	movs	r2, #3
 800f548:	4650      	mov	r0, sl
 800f54a:	f7f0 fe61 	bl	8000210 <memchr>
 800f54e:	b138      	cbz	r0, 800f560 <_svfiprintf_r+0x150>
 800f550:	9b04      	ldr	r3, [sp, #16]
 800f552:	eba0 000a 	sub.w	r0, r0, sl
 800f556:	2240      	movs	r2, #64	; 0x40
 800f558:	4082      	lsls	r2, r0
 800f55a:	4313      	orrs	r3, r2
 800f55c:	3401      	adds	r4, #1
 800f55e:	9304      	str	r3, [sp, #16]
 800f560:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f564:	4825      	ldr	r0, [pc, #148]	; (800f5fc <_svfiprintf_r+0x1ec>)
 800f566:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f56a:	2206      	movs	r2, #6
 800f56c:	f7f0 fe50 	bl	8000210 <memchr>
 800f570:	2800      	cmp	r0, #0
 800f572:	d038      	beq.n	800f5e6 <_svfiprintf_r+0x1d6>
 800f574:	4b22      	ldr	r3, [pc, #136]	; (800f600 <_svfiprintf_r+0x1f0>)
 800f576:	bb1b      	cbnz	r3, 800f5c0 <_svfiprintf_r+0x1b0>
 800f578:	9b03      	ldr	r3, [sp, #12]
 800f57a:	3307      	adds	r3, #7
 800f57c:	f023 0307 	bic.w	r3, r3, #7
 800f580:	3308      	adds	r3, #8
 800f582:	9303      	str	r3, [sp, #12]
 800f584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f586:	4433      	add	r3, r6
 800f588:	9309      	str	r3, [sp, #36]	; 0x24
 800f58a:	e768      	b.n	800f45e <_svfiprintf_r+0x4e>
 800f58c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f590:	460c      	mov	r4, r1
 800f592:	2001      	movs	r0, #1
 800f594:	e7a6      	b.n	800f4e4 <_svfiprintf_r+0xd4>
 800f596:	2300      	movs	r3, #0
 800f598:	3401      	adds	r4, #1
 800f59a:	9305      	str	r3, [sp, #20]
 800f59c:	4619      	mov	r1, r3
 800f59e:	f04f 0c0a 	mov.w	ip, #10
 800f5a2:	4620      	mov	r0, r4
 800f5a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5a8:	3a30      	subs	r2, #48	; 0x30
 800f5aa:	2a09      	cmp	r2, #9
 800f5ac:	d903      	bls.n	800f5b6 <_svfiprintf_r+0x1a6>
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d0c6      	beq.n	800f540 <_svfiprintf_r+0x130>
 800f5b2:	9105      	str	r1, [sp, #20]
 800f5b4:	e7c4      	b.n	800f540 <_svfiprintf_r+0x130>
 800f5b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5ba:	4604      	mov	r4, r0
 800f5bc:	2301      	movs	r3, #1
 800f5be:	e7f0      	b.n	800f5a2 <_svfiprintf_r+0x192>
 800f5c0:	ab03      	add	r3, sp, #12
 800f5c2:	9300      	str	r3, [sp, #0]
 800f5c4:	462a      	mov	r2, r5
 800f5c6:	4b0f      	ldr	r3, [pc, #60]	; (800f604 <_svfiprintf_r+0x1f4>)
 800f5c8:	a904      	add	r1, sp, #16
 800f5ca:	4638      	mov	r0, r7
 800f5cc:	f3af 8000 	nop.w
 800f5d0:	1c42      	adds	r2, r0, #1
 800f5d2:	4606      	mov	r6, r0
 800f5d4:	d1d6      	bne.n	800f584 <_svfiprintf_r+0x174>
 800f5d6:	89ab      	ldrh	r3, [r5, #12]
 800f5d8:	065b      	lsls	r3, r3, #25
 800f5da:	f53f af2d 	bmi.w	800f438 <_svfiprintf_r+0x28>
 800f5de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5e0:	b01d      	add	sp, #116	; 0x74
 800f5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e6:	ab03      	add	r3, sp, #12
 800f5e8:	9300      	str	r3, [sp, #0]
 800f5ea:	462a      	mov	r2, r5
 800f5ec:	4b05      	ldr	r3, [pc, #20]	; (800f604 <_svfiprintf_r+0x1f4>)
 800f5ee:	a904      	add	r1, sp, #16
 800f5f0:	4638      	mov	r0, r7
 800f5f2:	f000 f879 	bl	800f6e8 <_printf_i>
 800f5f6:	e7eb      	b.n	800f5d0 <_svfiprintf_r+0x1c0>
 800f5f8:	08010a26 	.word	0x08010a26
 800f5fc:	08010a30 	.word	0x08010a30
 800f600:	00000000 	.word	0x00000000
 800f604:	0800f35d 	.word	0x0800f35d
 800f608:	08010a2c 	.word	0x08010a2c

0800f60c <_printf_common>:
 800f60c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f610:	4616      	mov	r6, r2
 800f612:	4699      	mov	r9, r3
 800f614:	688a      	ldr	r2, [r1, #8]
 800f616:	690b      	ldr	r3, [r1, #16]
 800f618:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f61c:	4293      	cmp	r3, r2
 800f61e:	bfb8      	it	lt
 800f620:	4613      	movlt	r3, r2
 800f622:	6033      	str	r3, [r6, #0]
 800f624:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f628:	4607      	mov	r7, r0
 800f62a:	460c      	mov	r4, r1
 800f62c:	b10a      	cbz	r2, 800f632 <_printf_common+0x26>
 800f62e:	3301      	adds	r3, #1
 800f630:	6033      	str	r3, [r6, #0]
 800f632:	6823      	ldr	r3, [r4, #0]
 800f634:	0699      	lsls	r1, r3, #26
 800f636:	bf42      	ittt	mi
 800f638:	6833      	ldrmi	r3, [r6, #0]
 800f63a:	3302      	addmi	r3, #2
 800f63c:	6033      	strmi	r3, [r6, #0]
 800f63e:	6825      	ldr	r5, [r4, #0]
 800f640:	f015 0506 	ands.w	r5, r5, #6
 800f644:	d106      	bne.n	800f654 <_printf_common+0x48>
 800f646:	f104 0a19 	add.w	sl, r4, #25
 800f64a:	68e3      	ldr	r3, [r4, #12]
 800f64c:	6832      	ldr	r2, [r6, #0]
 800f64e:	1a9b      	subs	r3, r3, r2
 800f650:	42ab      	cmp	r3, r5
 800f652:	dc26      	bgt.n	800f6a2 <_printf_common+0x96>
 800f654:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f658:	1e13      	subs	r3, r2, #0
 800f65a:	6822      	ldr	r2, [r4, #0]
 800f65c:	bf18      	it	ne
 800f65e:	2301      	movne	r3, #1
 800f660:	0692      	lsls	r2, r2, #26
 800f662:	d42b      	bmi.n	800f6bc <_printf_common+0xb0>
 800f664:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f668:	4649      	mov	r1, r9
 800f66a:	4638      	mov	r0, r7
 800f66c:	47c0      	blx	r8
 800f66e:	3001      	adds	r0, #1
 800f670:	d01e      	beq.n	800f6b0 <_printf_common+0xa4>
 800f672:	6823      	ldr	r3, [r4, #0]
 800f674:	6922      	ldr	r2, [r4, #16]
 800f676:	f003 0306 	and.w	r3, r3, #6
 800f67a:	2b04      	cmp	r3, #4
 800f67c:	bf02      	ittt	eq
 800f67e:	68e5      	ldreq	r5, [r4, #12]
 800f680:	6833      	ldreq	r3, [r6, #0]
 800f682:	1aed      	subeq	r5, r5, r3
 800f684:	68a3      	ldr	r3, [r4, #8]
 800f686:	bf0c      	ite	eq
 800f688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f68c:	2500      	movne	r5, #0
 800f68e:	4293      	cmp	r3, r2
 800f690:	bfc4      	itt	gt
 800f692:	1a9b      	subgt	r3, r3, r2
 800f694:	18ed      	addgt	r5, r5, r3
 800f696:	2600      	movs	r6, #0
 800f698:	341a      	adds	r4, #26
 800f69a:	42b5      	cmp	r5, r6
 800f69c:	d11a      	bne.n	800f6d4 <_printf_common+0xc8>
 800f69e:	2000      	movs	r0, #0
 800f6a0:	e008      	b.n	800f6b4 <_printf_common+0xa8>
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	4652      	mov	r2, sl
 800f6a6:	4649      	mov	r1, r9
 800f6a8:	4638      	mov	r0, r7
 800f6aa:	47c0      	blx	r8
 800f6ac:	3001      	adds	r0, #1
 800f6ae:	d103      	bne.n	800f6b8 <_printf_common+0xac>
 800f6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6b8:	3501      	adds	r5, #1
 800f6ba:	e7c6      	b.n	800f64a <_printf_common+0x3e>
 800f6bc:	18e1      	adds	r1, r4, r3
 800f6be:	1c5a      	adds	r2, r3, #1
 800f6c0:	2030      	movs	r0, #48	; 0x30
 800f6c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f6c6:	4422      	add	r2, r4
 800f6c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f6cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f6d0:	3302      	adds	r3, #2
 800f6d2:	e7c7      	b.n	800f664 <_printf_common+0x58>
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	4622      	mov	r2, r4
 800f6d8:	4649      	mov	r1, r9
 800f6da:	4638      	mov	r0, r7
 800f6dc:	47c0      	blx	r8
 800f6de:	3001      	adds	r0, #1
 800f6e0:	d0e6      	beq.n	800f6b0 <_printf_common+0xa4>
 800f6e2:	3601      	adds	r6, #1
 800f6e4:	e7d9      	b.n	800f69a <_printf_common+0x8e>
	...

0800f6e8 <_printf_i>:
 800f6e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6ec:	7e0f      	ldrb	r7, [r1, #24]
 800f6ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f6f0:	2f78      	cmp	r7, #120	; 0x78
 800f6f2:	4691      	mov	r9, r2
 800f6f4:	4680      	mov	r8, r0
 800f6f6:	460c      	mov	r4, r1
 800f6f8:	469a      	mov	sl, r3
 800f6fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f6fe:	d807      	bhi.n	800f710 <_printf_i+0x28>
 800f700:	2f62      	cmp	r7, #98	; 0x62
 800f702:	d80a      	bhi.n	800f71a <_printf_i+0x32>
 800f704:	2f00      	cmp	r7, #0
 800f706:	f000 80d4 	beq.w	800f8b2 <_printf_i+0x1ca>
 800f70a:	2f58      	cmp	r7, #88	; 0x58
 800f70c:	f000 80c0 	beq.w	800f890 <_printf_i+0x1a8>
 800f710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f714:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f718:	e03a      	b.n	800f790 <_printf_i+0xa8>
 800f71a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f71e:	2b15      	cmp	r3, #21
 800f720:	d8f6      	bhi.n	800f710 <_printf_i+0x28>
 800f722:	a101      	add	r1, pc, #4	; (adr r1, 800f728 <_printf_i+0x40>)
 800f724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f728:	0800f781 	.word	0x0800f781
 800f72c:	0800f795 	.word	0x0800f795
 800f730:	0800f711 	.word	0x0800f711
 800f734:	0800f711 	.word	0x0800f711
 800f738:	0800f711 	.word	0x0800f711
 800f73c:	0800f711 	.word	0x0800f711
 800f740:	0800f795 	.word	0x0800f795
 800f744:	0800f711 	.word	0x0800f711
 800f748:	0800f711 	.word	0x0800f711
 800f74c:	0800f711 	.word	0x0800f711
 800f750:	0800f711 	.word	0x0800f711
 800f754:	0800f899 	.word	0x0800f899
 800f758:	0800f7c1 	.word	0x0800f7c1
 800f75c:	0800f853 	.word	0x0800f853
 800f760:	0800f711 	.word	0x0800f711
 800f764:	0800f711 	.word	0x0800f711
 800f768:	0800f8bb 	.word	0x0800f8bb
 800f76c:	0800f711 	.word	0x0800f711
 800f770:	0800f7c1 	.word	0x0800f7c1
 800f774:	0800f711 	.word	0x0800f711
 800f778:	0800f711 	.word	0x0800f711
 800f77c:	0800f85b 	.word	0x0800f85b
 800f780:	682b      	ldr	r3, [r5, #0]
 800f782:	1d1a      	adds	r2, r3, #4
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	602a      	str	r2, [r5, #0]
 800f788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f78c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f790:	2301      	movs	r3, #1
 800f792:	e09f      	b.n	800f8d4 <_printf_i+0x1ec>
 800f794:	6820      	ldr	r0, [r4, #0]
 800f796:	682b      	ldr	r3, [r5, #0]
 800f798:	0607      	lsls	r7, r0, #24
 800f79a:	f103 0104 	add.w	r1, r3, #4
 800f79e:	6029      	str	r1, [r5, #0]
 800f7a0:	d501      	bpl.n	800f7a6 <_printf_i+0xbe>
 800f7a2:	681e      	ldr	r6, [r3, #0]
 800f7a4:	e003      	b.n	800f7ae <_printf_i+0xc6>
 800f7a6:	0646      	lsls	r6, r0, #25
 800f7a8:	d5fb      	bpl.n	800f7a2 <_printf_i+0xba>
 800f7aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f7ae:	2e00      	cmp	r6, #0
 800f7b0:	da03      	bge.n	800f7ba <_printf_i+0xd2>
 800f7b2:	232d      	movs	r3, #45	; 0x2d
 800f7b4:	4276      	negs	r6, r6
 800f7b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7ba:	485a      	ldr	r0, [pc, #360]	; (800f924 <_printf_i+0x23c>)
 800f7bc:	230a      	movs	r3, #10
 800f7be:	e012      	b.n	800f7e6 <_printf_i+0xfe>
 800f7c0:	682b      	ldr	r3, [r5, #0]
 800f7c2:	6820      	ldr	r0, [r4, #0]
 800f7c4:	1d19      	adds	r1, r3, #4
 800f7c6:	6029      	str	r1, [r5, #0]
 800f7c8:	0605      	lsls	r5, r0, #24
 800f7ca:	d501      	bpl.n	800f7d0 <_printf_i+0xe8>
 800f7cc:	681e      	ldr	r6, [r3, #0]
 800f7ce:	e002      	b.n	800f7d6 <_printf_i+0xee>
 800f7d0:	0641      	lsls	r1, r0, #25
 800f7d2:	d5fb      	bpl.n	800f7cc <_printf_i+0xe4>
 800f7d4:	881e      	ldrh	r6, [r3, #0]
 800f7d6:	4853      	ldr	r0, [pc, #332]	; (800f924 <_printf_i+0x23c>)
 800f7d8:	2f6f      	cmp	r7, #111	; 0x6f
 800f7da:	bf0c      	ite	eq
 800f7dc:	2308      	moveq	r3, #8
 800f7de:	230a      	movne	r3, #10
 800f7e0:	2100      	movs	r1, #0
 800f7e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f7e6:	6865      	ldr	r5, [r4, #4]
 800f7e8:	60a5      	str	r5, [r4, #8]
 800f7ea:	2d00      	cmp	r5, #0
 800f7ec:	bfa2      	ittt	ge
 800f7ee:	6821      	ldrge	r1, [r4, #0]
 800f7f0:	f021 0104 	bicge.w	r1, r1, #4
 800f7f4:	6021      	strge	r1, [r4, #0]
 800f7f6:	b90e      	cbnz	r6, 800f7fc <_printf_i+0x114>
 800f7f8:	2d00      	cmp	r5, #0
 800f7fa:	d04b      	beq.n	800f894 <_printf_i+0x1ac>
 800f7fc:	4615      	mov	r5, r2
 800f7fe:	fbb6 f1f3 	udiv	r1, r6, r3
 800f802:	fb03 6711 	mls	r7, r3, r1, r6
 800f806:	5dc7      	ldrb	r7, [r0, r7]
 800f808:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f80c:	4637      	mov	r7, r6
 800f80e:	42bb      	cmp	r3, r7
 800f810:	460e      	mov	r6, r1
 800f812:	d9f4      	bls.n	800f7fe <_printf_i+0x116>
 800f814:	2b08      	cmp	r3, #8
 800f816:	d10b      	bne.n	800f830 <_printf_i+0x148>
 800f818:	6823      	ldr	r3, [r4, #0]
 800f81a:	07de      	lsls	r6, r3, #31
 800f81c:	d508      	bpl.n	800f830 <_printf_i+0x148>
 800f81e:	6923      	ldr	r3, [r4, #16]
 800f820:	6861      	ldr	r1, [r4, #4]
 800f822:	4299      	cmp	r1, r3
 800f824:	bfde      	ittt	le
 800f826:	2330      	movle	r3, #48	; 0x30
 800f828:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f82c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f830:	1b52      	subs	r2, r2, r5
 800f832:	6122      	str	r2, [r4, #16]
 800f834:	f8cd a000 	str.w	sl, [sp]
 800f838:	464b      	mov	r3, r9
 800f83a:	aa03      	add	r2, sp, #12
 800f83c:	4621      	mov	r1, r4
 800f83e:	4640      	mov	r0, r8
 800f840:	f7ff fee4 	bl	800f60c <_printf_common>
 800f844:	3001      	adds	r0, #1
 800f846:	d14a      	bne.n	800f8de <_printf_i+0x1f6>
 800f848:	f04f 30ff 	mov.w	r0, #4294967295
 800f84c:	b004      	add	sp, #16
 800f84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f852:	6823      	ldr	r3, [r4, #0]
 800f854:	f043 0320 	orr.w	r3, r3, #32
 800f858:	6023      	str	r3, [r4, #0]
 800f85a:	4833      	ldr	r0, [pc, #204]	; (800f928 <_printf_i+0x240>)
 800f85c:	2778      	movs	r7, #120	; 0x78
 800f85e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f862:	6823      	ldr	r3, [r4, #0]
 800f864:	6829      	ldr	r1, [r5, #0]
 800f866:	061f      	lsls	r7, r3, #24
 800f868:	f851 6b04 	ldr.w	r6, [r1], #4
 800f86c:	d402      	bmi.n	800f874 <_printf_i+0x18c>
 800f86e:	065f      	lsls	r7, r3, #25
 800f870:	bf48      	it	mi
 800f872:	b2b6      	uxthmi	r6, r6
 800f874:	07df      	lsls	r7, r3, #31
 800f876:	bf48      	it	mi
 800f878:	f043 0320 	orrmi.w	r3, r3, #32
 800f87c:	6029      	str	r1, [r5, #0]
 800f87e:	bf48      	it	mi
 800f880:	6023      	strmi	r3, [r4, #0]
 800f882:	b91e      	cbnz	r6, 800f88c <_printf_i+0x1a4>
 800f884:	6823      	ldr	r3, [r4, #0]
 800f886:	f023 0320 	bic.w	r3, r3, #32
 800f88a:	6023      	str	r3, [r4, #0]
 800f88c:	2310      	movs	r3, #16
 800f88e:	e7a7      	b.n	800f7e0 <_printf_i+0xf8>
 800f890:	4824      	ldr	r0, [pc, #144]	; (800f924 <_printf_i+0x23c>)
 800f892:	e7e4      	b.n	800f85e <_printf_i+0x176>
 800f894:	4615      	mov	r5, r2
 800f896:	e7bd      	b.n	800f814 <_printf_i+0x12c>
 800f898:	682b      	ldr	r3, [r5, #0]
 800f89a:	6826      	ldr	r6, [r4, #0]
 800f89c:	6961      	ldr	r1, [r4, #20]
 800f89e:	1d18      	adds	r0, r3, #4
 800f8a0:	6028      	str	r0, [r5, #0]
 800f8a2:	0635      	lsls	r5, r6, #24
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	d501      	bpl.n	800f8ac <_printf_i+0x1c4>
 800f8a8:	6019      	str	r1, [r3, #0]
 800f8aa:	e002      	b.n	800f8b2 <_printf_i+0x1ca>
 800f8ac:	0670      	lsls	r0, r6, #25
 800f8ae:	d5fb      	bpl.n	800f8a8 <_printf_i+0x1c0>
 800f8b0:	8019      	strh	r1, [r3, #0]
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	6123      	str	r3, [r4, #16]
 800f8b6:	4615      	mov	r5, r2
 800f8b8:	e7bc      	b.n	800f834 <_printf_i+0x14c>
 800f8ba:	682b      	ldr	r3, [r5, #0]
 800f8bc:	1d1a      	adds	r2, r3, #4
 800f8be:	602a      	str	r2, [r5, #0]
 800f8c0:	681d      	ldr	r5, [r3, #0]
 800f8c2:	6862      	ldr	r2, [r4, #4]
 800f8c4:	2100      	movs	r1, #0
 800f8c6:	4628      	mov	r0, r5
 800f8c8:	f7f0 fca2 	bl	8000210 <memchr>
 800f8cc:	b108      	cbz	r0, 800f8d2 <_printf_i+0x1ea>
 800f8ce:	1b40      	subs	r0, r0, r5
 800f8d0:	6060      	str	r0, [r4, #4]
 800f8d2:	6863      	ldr	r3, [r4, #4]
 800f8d4:	6123      	str	r3, [r4, #16]
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8dc:	e7aa      	b.n	800f834 <_printf_i+0x14c>
 800f8de:	6923      	ldr	r3, [r4, #16]
 800f8e0:	462a      	mov	r2, r5
 800f8e2:	4649      	mov	r1, r9
 800f8e4:	4640      	mov	r0, r8
 800f8e6:	47d0      	blx	sl
 800f8e8:	3001      	adds	r0, #1
 800f8ea:	d0ad      	beq.n	800f848 <_printf_i+0x160>
 800f8ec:	6823      	ldr	r3, [r4, #0]
 800f8ee:	079b      	lsls	r3, r3, #30
 800f8f0:	d413      	bmi.n	800f91a <_printf_i+0x232>
 800f8f2:	68e0      	ldr	r0, [r4, #12]
 800f8f4:	9b03      	ldr	r3, [sp, #12]
 800f8f6:	4298      	cmp	r0, r3
 800f8f8:	bfb8      	it	lt
 800f8fa:	4618      	movlt	r0, r3
 800f8fc:	e7a6      	b.n	800f84c <_printf_i+0x164>
 800f8fe:	2301      	movs	r3, #1
 800f900:	4632      	mov	r2, r6
 800f902:	4649      	mov	r1, r9
 800f904:	4640      	mov	r0, r8
 800f906:	47d0      	blx	sl
 800f908:	3001      	adds	r0, #1
 800f90a:	d09d      	beq.n	800f848 <_printf_i+0x160>
 800f90c:	3501      	adds	r5, #1
 800f90e:	68e3      	ldr	r3, [r4, #12]
 800f910:	9903      	ldr	r1, [sp, #12]
 800f912:	1a5b      	subs	r3, r3, r1
 800f914:	42ab      	cmp	r3, r5
 800f916:	dcf2      	bgt.n	800f8fe <_printf_i+0x216>
 800f918:	e7eb      	b.n	800f8f2 <_printf_i+0x20a>
 800f91a:	2500      	movs	r5, #0
 800f91c:	f104 0619 	add.w	r6, r4, #25
 800f920:	e7f5      	b.n	800f90e <_printf_i+0x226>
 800f922:	bf00      	nop
 800f924:	08010a37 	.word	0x08010a37
 800f928:	08010a48 	.word	0x08010a48

0800f92c <__sflush_r>:
 800f92c:	898a      	ldrh	r2, [r1, #12]
 800f92e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f932:	4605      	mov	r5, r0
 800f934:	0710      	lsls	r0, r2, #28
 800f936:	460c      	mov	r4, r1
 800f938:	d458      	bmi.n	800f9ec <__sflush_r+0xc0>
 800f93a:	684b      	ldr	r3, [r1, #4]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	dc05      	bgt.n	800f94c <__sflush_r+0x20>
 800f940:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f942:	2b00      	cmp	r3, #0
 800f944:	dc02      	bgt.n	800f94c <__sflush_r+0x20>
 800f946:	2000      	movs	r0, #0
 800f948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f94c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f94e:	2e00      	cmp	r6, #0
 800f950:	d0f9      	beq.n	800f946 <__sflush_r+0x1a>
 800f952:	2300      	movs	r3, #0
 800f954:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f958:	682f      	ldr	r7, [r5, #0]
 800f95a:	6a21      	ldr	r1, [r4, #32]
 800f95c:	602b      	str	r3, [r5, #0]
 800f95e:	d032      	beq.n	800f9c6 <__sflush_r+0x9a>
 800f960:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f962:	89a3      	ldrh	r3, [r4, #12]
 800f964:	075a      	lsls	r2, r3, #29
 800f966:	d505      	bpl.n	800f974 <__sflush_r+0x48>
 800f968:	6863      	ldr	r3, [r4, #4]
 800f96a:	1ac0      	subs	r0, r0, r3
 800f96c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f96e:	b10b      	cbz	r3, 800f974 <__sflush_r+0x48>
 800f970:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f972:	1ac0      	subs	r0, r0, r3
 800f974:	2300      	movs	r3, #0
 800f976:	4602      	mov	r2, r0
 800f978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f97a:	6a21      	ldr	r1, [r4, #32]
 800f97c:	4628      	mov	r0, r5
 800f97e:	47b0      	blx	r6
 800f980:	1c43      	adds	r3, r0, #1
 800f982:	89a3      	ldrh	r3, [r4, #12]
 800f984:	d106      	bne.n	800f994 <__sflush_r+0x68>
 800f986:	6829      	ldr	r1, [r5, #0]
 800f988:	291d      	cmp	r1, #29
 800f98a:	d82b      	bhi.n	800f9e4 <__sflush_r+0xb8>
 800f98c:	4a29      	ldr	r2, [pc, #164]	; (800fa34 <__sflush_r+0x108>)
 800f98e:	410a      	asrs	r2, r1
 800f990:	07d6      	lsls	r6, r2, #31
 800f992:	d427      	bmi.n	800f9e4 <__sflush_r+0xb8>
 800f994:	2200      	movs	r2, #0
 800f996:	6062      	str	r2, [r4, #4]
 800f998:	04d9      	lsls	r1, r3, #19
 800f99a:	6922      	ldr	r2, [r4, #16]
 800f99c:	6022      	str	r2, [r4, #0]
 800f99e:	d504      	bpl.n	800f9aa <__sflush_r+0x7e>
 800f9a0:	1c42      	adds	r2, r0, #1
 800f9a2:	d101      	bne.n	800f9a8 <__sflush_r+0x7c>
 800f9a4:	682b      	ldr	r3, [r5, #0]
 800f9a6:	b903      	cbnz	r3, 800f9aa <__sflush_r+0x7e>
 800f9a8:	6560      	str	r0, [r4, #84]	; 0x54
 800f9aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9ac:	602f      	str	r7, [r5, #0]
 800f9ae:	2900      	cmp	r1, #0
 800f9b0:	d0c9      	beq.n	800f946 <__sflush_r+0x1a>
 800f9b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9b6:	4299      	cmp	r1, r3
 800f9b8:	d002      	beq.n	800f9c0 <__sflush_r+0x94>
 800f9ba:	4628      	mov	r0, r5
 800f9bc:	f7ff fbce 	bl	800f15c <_free_r>
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	6360      	str	r0, [r4, #52]	; 0x34
 800f9c4:	e7c0      	b.n	800f948 <__sflush_r+0x1c>
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	4628      	mov	r0, r5
 800f9ca:	47b0      	blx	r6
 800f9cc:	1c41      	adds	r1, r0, #1
 800f9ce:	d1c8      	bne.n	800f962 <__sflush_r+0x36>
 800f9d0:	682b      	ldr	r3, [r5, #0]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d0c5      	beq.n	800f962 <__sflush_r+0x36>
 800f9d6:	2b1d      	cmp	r3, #29
 800f9d8:	d001      	beq.n	800f9de <__sflush_r+0xb2>
 800f9da:	2b16      	cmp	r3, #22
 800f9dc:	d101      	bne.n	800f9e2 <__sflush_r+0xb6>
 800f9de:	602f      	str	r7, [r5, #0]
 800f9e0:	e7b1      	b.n	800f946 <__sflush_r+0x1a>
 800f9e2:	89a3      	ldrh	r3, [r4, #12]
 800f9e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9e8:	81a3      	strh	r3, [r4, #12]
 800f9ea:	e7ad      	b.n	800f948 <__sflush_r+0x1c>
 800f9ec:	690f      	ldr	r7, [r1, #16]
 800f9ee:	2f00      	cmp	r7, #0
 800f9f0:	d0a9      	beq.n	800f946 <__sflush_r+0x1a>
 800f9f2:	0793      	lsls	r3, r2, #30
 800f9f4:	680e      	ldr	r6, [r1, #0]
 800f9f6:	bf08      	it	eq
 800f9f8:	694b      	ldreq	r3, [r1, #20]
 800f9fa:	600f      	str	r7, [r1, #0]
 800f9fc:	bf18      	it	ne
 800f9fe:	2300      	movne	r3, #0
 800fa00:	eba6 0807 	sub.w	r8, r6, r7
 800fa04:	608b      	str	r3, [r1, #8]
 800fa06:	f1b8 0f00 	cmp.w	r8, #0
 800fa0a:	dd9c      	ble.n	800f946 <__sflush_r+0x1a>
 800fa0c:	6a21      	ldr	r1, [r4, #32]
 800fa0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fa10:	4643      	mov	r3, r8
 800fa12:	463a      	mov	r2, r7
 800fa14:	4628      	mov	r0, r5
 800fa16:	47b0      	blx	r6
 800fa18:	2800      	cmp	r0, #0
 800fa1a:	dc06      	bgt.n	800fa2a <__sflush_r+0xfe>
 800fa1c:	89a3      	ldrh	r3, [r4, #12]
 800fa1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa22:	81a3      	strh	r3, [r4, #12]
 800fa24:	f04f 30ff 	mov.w	r0, #4294967295
 800fa28:	e78e      	b.n	800f948 <__sflush_r+0x1c>
 800fa2a:	4407      	add	r7, r0
 800fa2c:	eba8 0800 	sub.w	r8, r8, r0
 800fa30:	e7e9      	b.n	800fa06 <__sflush_r+0xda>
 800fa32:	bf00      	nop
 800fa34:	dfbffffe 	.word	0xdfbffffe

0800fa38 <_fflush_r>:
 800fa38:	b538      	push	{r3, r4, r5, lr}
 800fa3a:	690b      	ldr	r3, [r1, #16]
 800fa3c:	4605      	mov	r5, r0
 800fa3e:	460c      	mov	r4, r1
 800fa40:	b913      	cbnz	r3, 800fa48 <_fflush_r+0x10>
 800fa42:	2500      	movs	r5, #0
 800fa44:	4628      	mov	r0, r5
 800fa46:	bd38      	pop	{r3, r4, r5, pc}
 800fa48:	b118      	cbz	r0, 800fa52 <_fflush_r+0x1a>
 800fa4a:	6a03      	ldr	r3, [r0, #32]
 800fa4c:	b90b      	cbnz	r3, 800fa52 <_fflush_r+0x1a>
 800fa4e:	f7ff f9dd 	bl	800ee0c <__sinit>
 800fa52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d0f3      	beq.n	800fa42 <_fflush_r+0xa>
 800fa5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fa5c:	07d0      	lsls	r0, r2, #31
 800fa5e:	d404      	bmi.n	800fa6a <_fflush_r+0x32>
 800fa60:	0599      	lsls	r1, r3, #22
 800fa62:	d402      	bmi.n	800fa6a <_fflush_r+0x32>
 800fa64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa66:	f7ff fb51 	bl	800f10c <__retarget_lock_acquire_recursive>
 800fa6a:	4628      	mov	r0, r5
 800fa6c:	4621      	mov	r1, r4
 800fa6e:	f7ff ff5d 	bl	800f92c <__sflush_r>
 800fa72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa74:	07da      	lsls	r2, r3, #31
 800fa76:	4605      	mov	r5, r0
 800fa78:	d4e4      	bmi.n	800fa44 <_fflush_r+0xc>
 800fa7a:	89a3      	ldrh	r3, [r4, #12]
 800fa7c:	059b      	lsls	r3, r3, #22
 800fa7e:	d4e1      	bmi.n	800fa44 <_fflush_r+0xc>
 800fa80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa82:	f7ff fb44 	bl	800f10e <__retarget_lock_release_recursive>
 800fa86:	e7dd      	b.n	800fa44 <_fflush_r+0xc>

0800fa88 <fiprintf>:
 800fa88:	b40e      	push	{r1, r2, r3}
 800fa8a:	b503      	push	{r0, r1, lr}
 800fa8c:	4601      	mov	r1, r0
 800fa8e:	ab03      	add	r3, sp, #12
 800fa90:	4805      	ldr	r0, [pc, #20]	; (800faa8 <fiprintf+0x20>)
 800fa92:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa96:	6800      	ldr	r0, [r0, #0]
 800fa98:	9301      	str	r3, [sp, #4]
 800fa9a:	f000 f89f 	bl	800fbdc <_vfiprintf_r>
 800fa9e:	b002      	add	sp, #8
 800faa0:	f85d eb04 	ldr.w	lr, [sp], #4
 800faa4:	b003      	add	sp, #12
 800faa6:	4770      	bx	lr
 800faa8:	200001b4 	.word	0x200001b4

0800faac <memmove>:
 800faac:	4288      	cmp	r0, r1
 800faae:	b510      	push	{r4, lr}
 800fab0:	eb01 0402 	add.w	r4, r1, r2
 800fab4:	d902      	bls.n	800fabc <memmove+0x10>
 800fab6:	4284      	cmp	r4, r0
 800fab8:	4623      	mov	r3, r4
 800faba:	d807      	bhi.n	800facc <memmove+0x20>
 800fabc:	1e43      	subs	r3, r0, #1
 800fabe:	42a1      	cmp	r1, r4
 800fac0:	d008      	beq.n	800fad4 <memmove+0x28>
 800fac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800faca:	e7f8      	b.n	800fabe <memmove+0x12>
 800facc:	4402      	add	r2, r0
 800face:	4601      	mov	r1, r0
 800fad0:	428a      	cmp	r2, r1
 800fad2:	d100      	bne.n	800fad6 <memmove+0x2a>
 800fad4:	bd10      	pop	{r4, pc}
 800fad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fade:	e7f7      	b.n	800fad0 <memmove+0x24>

0800fae0 <_sbrk_r>:
 800fae0:	b538      	push	{r3, r4, r5, lr}
 800fae2:	4d06      	ldr	r5, [pc, #24]	; (800fafc <_sbrk_r+0x1c>)
 800fae4:	2300      	movs	r3, #0
 800fae6:	4604      	mov	r4, r0
 800fae8:	4608      	mov	r0, r1
 800faea:	602b      	str	r3, [r5, #0]
 800faec:	f7f2 fef6 	bl	80028dc <_sbrk>
 800faf0:	1c43      	adds	r3, r0, #1
 800faf2:	d102      	bne.n	800fafa <_sbrk_r+0x1a>
 800faf4:	682b      	ldr	r3, [r5, #0]
 800faf6:	b103      	cbz	r3, 800fafa <_sbrk_r+0x1a>
 800faf8:	6023      	str	r3, [r4, #0]
 800fafa:	bd38      	pop	{r3, r4, r5, pc}
 800fafc:	2000459c 	.word	0x2000459c

0800fb00 <memcpy>:
 800fb00:	440a      	add	r2, r1
 800fb02:	4291      	cmp	r1, r2
 800fb04:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb08:	d100      	bne.n	800fb0c <memcpy+0xc>
 800fb0a:	4770      	bx	lr
 800fb0c:	b510      	push	{r4, lr}
 800fb0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb16:	4291      	cmp	r1, r2
 800fb18:	d1f9      	bne.n	800fb0e <memcpy+0xe>
 800fb1a:	bd10      	pop	{r4, pc}

0800fb1c <abort>:
 800fb1c:	b508      	push	{r3, lr}
 800fb1e:	2006      	movs	r0, #6
 800fb20:	f000 fa34 	bl	800ff8c <raise>
 800fb24:	2001      	movs	r0, #1
 800fb26:	f7f2 fe61 	bl	80027ec <_exit>

0800fb2a <_realloc_r>:
 800fb2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb2e:	4680      	mov	r8, r0
 800fb30:	4614      	mov	r4, r2
 800fb32:	460e      	mov	r6, r1
 800fb34:	b921      	cbnz	r1, 800fb40 <_realloc_r+0x16>
 800fb36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb3a:	4611      	mov	r1, r2
 800fb3c:	f7ff bb82 	b.w	800f244 <_malloc_r>
 800fb40:	b92a      	cbnz	r2, 800fb4e <_realloc_r+0x24>
 800fb42:	f7ff fb0b 	bl	800f15c <_free_r>
 800fb46:	4625      	mov	r5, r4
 800fb48:	4628      	mov	r0, r5
 800fb4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb4e:	f000 fa39 	bl	800ffc4 <_malloc_usable_size_r>
 800fb52:	4284      	cmp	r4, r0
 800fb54:	4607      	mov	r7, r0
 800fb56:	d802      	bhi.n	800fb5e <_realloc_r+0x34>
 800fb58:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fb5c:	d812      	bhi.n	800fb84 <_realloc_r+0x5a>
 800fb5e:	4621      	mov	r1, r4
 800fb60:	4640      	mov	r0, r8
 800fb62:	f7ff fb6f 	bl	800f244 <_malloc_r>
 800fb66:	4605      	mov	r5, r0
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	d0ed      	beq.n	800fb48 <_realloc_r+0x1e>
 800fb6c:	42bc      	cmp	r4, r7
 800fb6e:	4622      	mov	r2, r4
 800fb70:	4631      	mov	r1, r6
 800fb72:	bf28      	it	cs
 800fb74:	463a      	movcs	r2, r7
 800fb76:	f7ff ffc3 	bl	800fb00 <memcpy>
 800fb7a:	4631      	mov	r1, r6
 800fb7c:	4640      	mov	r0, r8
 800fb7e:	f7ff faed 	bl	800f15c <_free_r>
 800fb82:	e7e1      	b.n	800fb48 <_realloc_r+0x1e>
 800fb84:	4635      	mov	r5, r6
 800fb86:	e7df      	b.n	800fb48 <_realloc_r+0x1e>

0800fb88 <__sfputc_r>:
 800fb88:	6893      	ldr	r3, [r2, #8]
 800fb8a:	3b01      	subs	r3, #1
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	b410      	push	{r4}
 800fb90:	6093      	str	r3, [r2, #8]
 800fb92:	da08      	bge.n	800fba6 <__sfputc_r+0x1e>
 800fb94:	6994      	ldr	r4, [r2, #24]
 800fb96:	42a3      	cmp	r3, r4
 800fb98:	db01      	blt.n	800fb9e <__sfputc_r+0x16>
 800fb9a:	290a      	cmp	r1, #10
 800fb9c:	d103      	bne.n	800fba6 <__sfputc_r+0x1e>
 800fb9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fba2:	f000 b935 	b.w	800fe10 <__swbuf_r>
 800fba6:	6813      	ldr	r3, [r2, #0]
 800fba8:	1c58      	adds	r0, r3, #1
 800fbaa:	6010      	str	r0, [r2, #0]
 800fbac:	7019      	strb	r1, [r3, #0]
 800fbae:	4608      	mov	r0, r1
 800fbb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbb4:	4770      	bx	lr

0800fbb6 <__sfputs_r>:
 800fbb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbb8:	4606      	mov	r6, r0
 800fbba:	460f      	mov	r7, r1
 800fbbc:	4614      	mov	r4, r2
 800fbbe:	18d5      	adds	r5, r2, r3
 800fbc0:	42ac      	cmp	r4, r5
 800fbc2:	d101      	bne.n	800fbc8 <__sfputs_r+0x12>
 800fbc4:	2000      	movs	r0, #0
 800fbc6:	e007      	b.n	800fbd8 <__sfputs_r+0x22>
 800fbc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbcc:	463a      	mov	r2, r7
 800fbce:	4630      	mov	r0, r6
 800fbd0:	f7ff ffda 	bl	800fb88 <__sfputc_r>
 800fbd4:	1c43      	adds	r3, r0, #1
 800fbd6:	d1f3      	bne.n	800fbc0 <__sfputs_r+0xa>
 800fbd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fbdc <_vfiprintf_r>:
 800fbdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbe0:	460d      	mov	r5, r1
 800fbe2:	b09d      	sub	sp, #116	; 0x74
 800fbe4:	4614      	mov	r4, r2
 800fbe6:	4698      	mov	r8, r3
 800fbe8:	4606      	mov	r6, r0
 800fbea:	b118      	cbz	r0, 800fbf4 <_vfiprintf_r+0x18>
 800fbec:	6a03      	ldr	r3, [r0, #32]
 800fbee:	b90b      	cbnz	r3, 800fbf4 <_vfiprintf_r+0x18>
 800fbf0:	f7ff f90c 	bl	800ee0c <__sinit>
 800fbf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fbf6:	07d9      	lsls	r1, r3, #31
 800fbf8:	d405      	bmi.n	800fc06 <_vfiprintf_r+0x2a>
 800fbfa:	89ab      	ldrh	r3, [r5, #12]
 800fbfc:	059a      	lsls	r2, r3, #22
 800fbfe:	d402      	bmi.n	800fc06 <_vfiprintf_r+0x2a>
 800fc00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc02:	f7ff fa83 	bl	800f10c <__retarget_lock_acquire_recursive>
 800fc06:	89ab      	ldrh	r3, [r5, #12]
 800fc08:	071b      	lsls	r3, r3, #28
 800fc0a:	d501      	bpl.n	800fc10 <_vfiprintf_r+0x34>
 800fc0c:	692b      	ldr	r3, [r5, #16]
 800fc0e:	b99b      	cbnz	r3, 800fc38 <_vfiprintf_r+0x5c>
 800fc10:	4629      	mov	r1, r5
 800fc12:	4630      	mov	r0, r6
 800fc14:	f000 f93a 	bl	800fe8c <__swsetup_r>
 800fc18:	b170      	cbz	r0, 800fc38 <_vfiprintf_r+0x5c>
 800fc1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc1c:	07dc      	lsls	r4, r3, #31
 800fc1e:	d504      	bpl.n	800fc2a <_vfiprintf_r+0x4e>
 800fc20:	f04f 30ff 	mov.w	r0, #4294967295
 800fc24:	b01d      	add	sp, #116	; 0x74
 800fc26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc2a:	89ab      	ldrh	r3, [r5, #12]
 800fc2c:	0598      	lsls	r0, r3, #22
 800fc2e:	d4f7      	bmi.n	800fc20 <_vfiprintf_r+0x44>
 800fc30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc32:	f7ff fa6c 	bl	800f10e <__retarget_lock_release_recursive>
 800fc36:	e7f3      	b.n	800fc20 <_vfiprintf_r+0x44>
 800fc38:	2300      	movs	r3, #0
 800fc3a:	9309      	str	r3, [sp, #36]	; 0x24
 800fc3c:	2320      	movs	r3, #32
 800fc3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc42:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc46:	2330      	movs	r3, #48	; 0x30
 800fc48:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fdfc <_vfiprintf_r+0x220>
 800fc4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc50:	f04f 0901 	mov.w	r9, #1
 800fc54:	4623      	mov	r3, r4
 800fc56:	469a      	mov	sl, r3
 800fc58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc5c:	b10a      	cbz	r2, 800fc62 <_vfiprintf_r+0x86>
 800fc5e:	2a25      	cmp	r2, #37	; 0x25
 800fc60:	d1f9      	bne.n	800fc56 <_vfiprintf_r+0x7a>
 800fc62:	ebba 0b04 	subs.w	fp, sl, r4
 800fc66:	d00b      	beq.n	800fc80 <_vfiprintf_r+0xa4>
 800fc68:	465b      	mov	r3, fp
 800fc6a:	4622      	mov	r2, r4
 800fc6c:	4629      	mov	r1, r5
 800fc6e:	4630      	mov	r0, r6
 800fc70:	f7ff ffa1 	bl	800fbb6 <__sfputs_r>
 800fc74:	3001      	adds	r0, #1
 800fc76:	f000 80a9 	beq.w	800fdcc <_vfiprintf_r+0x1f0>
 800fc7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc7c:	445a      	add	r2, fp
 800fc7e:	9209      	str	r2, [sp, #36]	; 0x24
 800fc80:	f89a 3000 	ldrb.w	r3, [sl]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	f000 80a1 	beq.w	800fdcc <_vfiprintf_r+0x1f0>
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	f04f 32ff 	mov.w	r2, #4294967295
 800fc90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc94:	f10a 0a01 	add.w	sl, sl, #1
 800fc98:	9304      	str	r3, [sp, #16]
 800fc9a:	9307      	str	r3, [sp, #28]
 800fc9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fca0:	931a      	str	r3, [sp, #104]	; 0x68
 800fca2:	4654      	mov	r4, sl
 800fca4:	2205      	movs	r2, #5
 800fca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcaa:	4854      	ldr	r0, [pc, #336]	; (800fdfc <_vfiprintf_r+0x220>)
 800fcac:	f7f0 fab0 	bl	8000210 <memchr>
 800fcb0:	9a04      	ldr	r2, [sp, #16]
 800fcb2:	b9d8      	cbnz	r0, 800fcec <_vfiprintf_r+0x110>
 800fcb4:	06d1      	lsls	r1, r2, #27
 800fcb6:	bf44      	itt	mi
 800fcb8:	2320      	movmi	r3, #32
 800fcba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcbe:	0713      	lsls	r3, r2, #28
 800fcc0:	bf44      	itt	mi
 800fcc2:	232b      	movmi	r3, #43	; 0x2b
 800fcc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcc8:	f89a 3000 	ldrb.w	r3, [sl]
 800fccc:	2b2a      	cmp	r3, #42	; 0x2a
 800fcce:	d015      	beq.n	800fcfc <_vfiprintf_r+0x120>
 800fcd0:	9a07      	ldr	r2, [sp, #28]
 800fcd2:	4654      	mov	r4, sl
 800fcd4:	2000      	movs	r0, #0
 800fcd6:	f04f 0c0a 	mov.w	ip, #10
 800fcda:	4621      	mov	r1, r4
 800fcdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fce0:	3b30      	subs	r3, #48	; 0x30
 800fce2:	2b09      	cmp	r3, #9
 800fce4:	d94d      	bls.n	800fd82 <_vfiprintf_r+0x1a6>
 800fce6:	b1b0      	cbz	r0, 800fd16 <_vfiprintf_r+0x13a>
 800fce8:	9207      	str	r2, [sp, #28]
 800fcea:	e014      	b.n	800fd16 <_vfiprintf_r+0x13a>
 800fcec:	eba0 0308 	sub.w	r3, r0, r8
 800fcf0:	fa09 f303 	lsl.w	r3, r9, r3
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	9304      	str	r3, [sp, #16]
 800fcf8:	46a2      	mov	sl, r4
 800fcfa:	e7d2      	b.n	800fca2 <_vfiprintf_r+0xc6>
 800fcfc:	9b03      	ldr	r3, [sp, #12]
 800fcfe:	1d19      	adds	r1, r3, #4
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	9103      	str	r1, [sp, #12]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	bfbb      	ittet	lt
 800fd08:	425b      	neglt	r3, r3
 800fd0a:	f042 0202 	orrlt.w	r2, r2, #2
 800fd0e:	9307      	strge	r3, [sp, #28]
 800fd10:	9307      	strlt	r3, [sp, #28]
 800fd12:	bfb8      	it	lt
 800fd14:	9204      	strlt	r2, [sp, #16]
 800fd16:	7823      	ldrb	r3, [r4, #0]
 800fd18:	2b2e      	cmp	r3, #46	; 0x2e
 800fd1a:	d10c      	bne.n	800fd36 <_vfiprintf_r+0x15a>
 800fd1c:	7863      	ldrb	r3, [r4, #1]
 800fd1e:	2b2a      	cmp	r3, #42	; 0x2a
 800fd20:	d134      	bne.n	800fd8c <_vfiprintf_r+0x1b0>
 800fd22:	9b03      	ldr	r3, [sp, #12]
 800fd24:	1d1a      	adds	r2, r3, #4
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	9203      	str	r2, [sp, #12]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	bfb8      	it	lt
 800fd2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd32:	3402      	adds	r4, #2
 800fd34:	9305      	str	r3, [sp, #20]
 800fd36:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fe0c <_vfiprintf_r+0x230>
 800fd3a:	7821      	ldrb	r1, [r4, #0]
 800fd3c:	2203      	movs	r2, #3
 800fd3e:	4650      	mov	r0, sl
 800fd40:	f7f0 fa66 	bl	8000210 <memchr>
 800fd44:	b138      	cbz	r0, 800fd56 <_vfiprintf_r+0x17a>
 800fd46:	9b04      	ldr	r3, [sp, #16]
 800fd48:	eba0 000a 	sub.w	r0, r0, sl
 800fd4c:	2240      	movs	r2, #64	; 0x40
 800fd4e:	4082      	lsls	r2, r0
 800fd50:	4313      	orrs	r3, r2
 800fd52:	3401      	adds	r4, #1
 800fd54:	9304      	str	r3, [sp, #16]
 800fd56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd5a:	4829      	ldr	r0, [pc, #164]	; (800fe00 <_vfiprintf_r+0x224>)
 800fd5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd60:	2206      	movs	r2, #6
 800fd62:	f7f0 fa55 	bl	8000210 <memchr>
 800fd66:	2800      	cmp	r0, #0
 800fd68:	d03f      	beq.n	800fdea <_vfiprintf_r+0x20e>
 800fd6a:	4b26      	ldr	r3, [pc, #152]	; (800fe04 <_vfiprintf_r+0x228>)
 800fd6c:	bb1b      	cbnz	r3, 800fdb6 <_vfiprintf_r+0x1da>
 800fd6e:	9b03      	ldr	r3, [sp, #12]
 800fd70:	3307      	adds	r3, #7
 800fd72:	f023 0307 	bic.w	r3, r3, #7
 800fd76:	3308      	adds	r3, #8
 800fd78:	9303      	str	r3, [sp, #12]
 800fd7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd7c:	443b      	add	r3, r7
 800fd7e:	9309      	str	r3, [sp, #36]	; 0x24
 800fd80:	e768      	b.n	800fc54 <_vfiprintf_r+0x78>
 800fd82:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd86:	460c      	mov	r4, r1
 800fd88:	2001      	movs	r0, #1
 800fd8a:	e7a6      	b.n	800fcda <_vfiprintf_r+0xfe>
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	3401      	adds	r4, #1
 800fd90:	9305      	str	r3, [sp, #20]
 800fd92:	4619      	mov	r1, r3
 800fd94:	f04f 0c0a 	mov.w	ip, #10
 800fd98:	4620      	mov	r0, r4
 800fd9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd9e:	3a30      	subs	r2, #48	; 0x30
 800fda0:	2a09      	cmp	r2, #9
 800fda2:	d903      	bls.n	800fdac <_vfiprintf_r+0x1d0>
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d0c6      	beq.n	800fd36 <_vfiprintf_r+0x15a>
 800fda8:	9105      	str	r1, [sp, #20]
 800fdaa:	e7c4      	b.n	800fd36 <_vfiprintf_r+0x15a>
 800fdac:	fb0c 2101 	mla	r1, ip, r1, r2
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	e7f0      	b.n	800fd98 <_vfiprintf_r+0x1bc>
 800fdb6:	ab03      	add	r3, sp, #12
 800fdb8:	9300      	str	r3, [sp, #0]
 800fdba:	462a      	mov	r2, r5
 800fdbc:	4b12      	ldr	r3, [pc, #72]	; (800fe08 <_vfiprintf_r+0x22c>)
 800fdbe:	a904      	add	r1, sp, #16
 800fdc0:	4630      	mov	r0, r6
 800fdc2:	f3af 8000 	nop.w
 800fdc6:	4607      	mov	r7, r0
 800fdc8:	1c78      	adds	r0, r7, #1
 800fdca:	d1d6      	bne.n	800fd7a <_vfiprintf_r+0x19e>
 800fdcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fdce:	07d9      	lsls	r1, r3, #31
 800fdd0:	d405      	bmi.n	800fdde <_vfiprintf_r+0x202>
 800fdd2:	89ab      	ldrh	r3, [r5, #12]
 800fdd4:	059a      	lsls	r2, r3, #22
 800fdd6:	d402      	bmi.n	800fdde <_vfiprintf_r+0x202>
 800fdd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fdda:	f7ff f998 	bl	800f10e <__retarget_lock_release_recursive>
 800fdde:	89ab      	ldrh	r3, [r5, #12]
 800fde0:	065b      	lsls	r3, r3, #25
 800fde2:	f53f af1d 	bmi.w	800fc20 <_vfiprintf_r+0x44>
 800fde6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fde8:	e71c      	b.n	800fc24 <_vfiprintf_r+0x48>
 800fdea:	ab03      	add	r3, sp, #12
 800fdec:	9300      	str	r3, [sp, #0]
 800fdee:	462a      	mov	r2, r5
 800fdf0:	4b05      	ldr	r3, [pc, #20]	; (800fe08 <_vfiprintf_r+0x22c>)
 800fdf2:	a904      	add	r1, sp, #16
 800fdf4:	4630      	mov	r0, r6
 800fdf6:	f7ff fc77 	bl	800f6e8 <_printf_i>
 800fdfa:	e7e4      	b.n	800fdc6 <_vfiprintf_r+0x1ea>
 800fdfc:	08010a26 	.word	0x08010a26
 800fe00:	08010a30 	.word	0x08010a30
 800fe04:	00000000 	.word	0x00000000
 800fe08:	0800fbb7 	.word	0x0800fbb7
 800fe0c:	08010a2c 	.word	0x08010a2c

0800fe10 <__swbuf_r>:
 800fe10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe12:	460e      	mov	r6, r1
 800fe14:	4614      	mov	r4, r2
 800fe16:	4605      	mov	r5, r0
 800fe18:	b118      	cbz	r0, 800fe22 <__swbuf_r+0x12>
 800fe1a:	6a03      	ldr	r3, [r0, #32]
 800fe1c:	b90b      	cbnz	r3, 800fe22 <__swbuf_r+0x12>
 800fe1e:	f7fe fff5 	bl	800ee0c <__sinit>
 800fe22:	69a3      	ldr	r3, [r4, #24]
 800fe24:	60a3      	str	r3, [r4, #8]
 800fe26:	89a3      	ldrh	r3, [r4, #12]
 800fe28:	071a      	lsls	r2, r3, #28
 800fe2a:	d525      	bpl.n	800fe78 <__swbuf_r+0x68>
 800fe2c:	6923      	ldr	r3, [r4, #16]
 800fe2e:	b31b      	cbz	r3, 800fe78 <__swbuf_r+0x68>
 800fe30:	6823      	ldr	r3, [r4, #0]
 800fe32:	6922      	ldr	r2, [r4, #16]
 800fe34:	1a98      	subs	r0, r3, r2
 800fe36:	6963      	ldr	r3, [r4, #20]
 800fe38:	b2f6      	uxtb	r6, r6
 800fe3a:	4283      	cmp	r3, r0
 800fe3c:	4637      	mov	r7, r6
 800fe3e:	dc04      	bgt.n	800fe4a <__swbuf_r+0x3a>
 800fe40:	4621      	mov	r1, r4
 800fe42:	4628      	mov	r0, r5
 800fe44:	f7ff fdf8 	bl	800fa38 <_fflush_r>
 800fe48:	b9e0      	cbnz	r0, 800fe84 <__swbuf_r+0x74>
 800fe4a:	68a3      	ldr	r3, [r4, #8]
 800fe4c:	3b01      	subs	r3, #1
 800fe4e:	60a3      	str	r3, [r4, #8]
 800fe50:	6823      	ldr	r3, [r4, #0]
 800fe52:	1c5a      	adds	r2, r3, #1
 800fe54:	6022      	str	r2, [r4, #0]
 800fe56:	701e      	strb	r6, [r3, #0]
 800fe58:	6962      	ldr	r2, [r4, #20]
 800fe5a:	1c43      	adds	r3, r0, #1
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d004      	beq.n	800fe6a <__swbuf_r+0x5a>
 800fe60:	89a3      	ldrh	r3, [r4, #12]
 800fe62:	07db      	lsls	r3, r3, #31
 800fe64:	d506      	bpl.n	800fe74 <__swbuf_r+0x64>
 800fe66:	2e0a      	cmp	r6, #10
 800fe68:	d104      	bne.n	800fe74 <__swbuf_r+0x64>
 800fe6a:	4621      	mov	r1, r4
 800fe6c:	4628      	mov	r0, r5
 800fe6e:	f7ff fde3 	bl	800fa38 <_fflush_r>
 800fe72:	b938      	cbnz	r0, 800fe84 <__swbuf_r+0x74>
 800fe74:	4638      	mov	r0, r7
 800fe76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe78:	4621      	mov	r1, r4
 800fe7a:	4628      	mov	r0, r5
 800fe7c:	f000 f806 	bl	800fe8c <__swsetup_r>
 800fe80:	2800      	cmp	r0, #0
 800fe82:	d0d5      	beq.n	800fe30 <__swbuf_r+0x20>
 800fe84:	f04f 37ff 	mov.w	r7, #4294967295
 800fe88:	e7f4      	b.n	800fe74 <__swbuf_r+0x64>
	...

0800fe8c <__swsetup_r>:
 800fe8c:	b538      	push	{r3, r4, r5, lr}
 800fe8e:	4b2a      	ldr	r3, [pc, #168]	; (800ff38 <__swsetup_r+0xac>)
 800fe90:	4605      	mov	r5, r0
 800fe92:	6818      	ldr	r0, [r3, #0]
 800fe94:	460c      	mov	r4, r1
 800fe96:	b118      	cbz	r0, 800fea0 <__swsetup_r+0x14>
 800fe98:	6a03      	ldr	r3, [r0, #32]
 800fe9a:	b90b      	cbnz	r3, 800fea0 <__swsetup_r+0x14>
 800fe9c:	f7fe ffb6 	bl	800ee0c <__sinit>
 800fea0:	89a3      	ldrh	r3, [r4, #12]
 800fea2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fea6:	0718      	lsls	r0, r3, #28
 800fea8:	d422      	bmi.n	800fef0 <__swsetup_r+0x64>
 800feaa:	06d9      	lsls	r1, r3, #27
 800feac:	d407      	bmi.n	800febe <__swsetup_r+0x32>
 800feae:	2309      	movs	r3, #9
 800feb0:	602b      	str	r3, [r5, #0]
 800feb2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800feb6:	81a3      	strh	r3, [r4, #12]
 800feb8:	f04f 30ff 	mov.w	r0, #4294967295
 800febc:	e034      	b.n	800ff28 <__swsetup_r+0x9c>
 800febe:	0758      	lsls	r0, r3, #29
 800fec0:	d512      	bpl.n	800fee8 <__swsetup_r+0x5c>
 800fec2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fec4:	b141      	cbz	r1, 800fed8 <__swsetup_r+0x4c>
 800fec6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800feca:	4299      	cmp	r1, r3
 800fecc:	d002      	beq.n	800fed4 <__swsetup_r+0x48>
 800fece:	4628      	mov	r0, r5
 800fed0:	f7ff f944 	bl	800f15c <_free_r>
 800fed4:	2300      	movs	r3, #0
 800fed6:	6363      	str	r3, [r4, #52]	; 0x34
 800fed8:	89a3      	ldrh	r3, [r4, #12]
 800feda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fede:	81a3      	strh	r3, [r4, #12]
 800fee0:	2300      	movs	r3, #0
 800fee2:	6063      	str	r3, [r4, #4]
 800fee4:	6923      	ldr	r3, [r4, #16]
 800fee6:	6023      	str	r3, [r4, #0]
 800fee8:	89a3      	ldrh	r3, [r4, #12]
 800feea:	f043 0308 	orr.w	r3, r3, #8
 800feee:	81a3      	strh	r3, [r4, #12]
 800fef0:	6923      	ldr	r3, [r4, #16]
 800fef2:	b94b      	cbnz	r3, 800ff08 <__swsetup_r+0x7c>
 800fef4:	89a3      	ldrh	r3, [r4, #12]
 800fef6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fefa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fefe:	d003      	beq.n	800ff08 <__swsetup_r+0x7c>
 800ff00:	4621      	mov	r1, r4
 800ff02:	4628      	mov	r0, r5
 800ff04:	f000 f88c 	bl	8010020 <__smakebuf_r>
 800ff08:	89a0      	ldrh	r0, [r4, #12]
 800ff0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff0e:	f010 0301 	ands.w	r3, r0, #1
 800ff12:	d00a      	beq.n	800ff2a <__swsetup_r+0x9e>
 800ff14:	2300      	movs	r3, #0
 800ff16:	60a3      	str	r3, [r4, #8]
 800ff18:	6963      	ldr	r3, [r4, #20]
 800ff1a:	425b      	negs	r3, r3
 800ff1c:	61a3      	str	r3, [r4, #24]
 800ff1e:	6923      	ldr	r3, [r4, #16]
 800ff20:	b943      	cbnz	r3, 800ff34 <__swsetup_r+0xa8>
 800ff22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ff26:	d1c4      	bne.n	800feb2 <__swsetup_r+0x26>
 800ff28:	bd38      	pop	{r3, r4, r5, pc}
 800ff2a:	0781      	lsls	r1, r0, #30
 800ff2c:	bf58      	it	pl
 800ff2e:	6963      	ldrpl	r3, [r4, #20]
 800ff30:	60a3      	str	r3, [r4, #8]
 800ff32:	e7f4      	b.n	800ff1e <__swsetup_r+0x92>
 800ff34:	2000      	movs	r0, #0
 800ff36:	e7f7      	b.n	800ff28 <__swsetup_r+0x9c>
 800ff38:	200001b4 	.word	0x200001b4

0800ff3c <_raise_r>:
 800ff3c:	291f      	cmp	r1, #31
 800ff3e:	b538      	push	{r3, r4, r5, lr}
 800ff40:	4604      	mov	r4, r0
 800ff42:	460d      	mov	r5, r1
 800ff44:	d904      	bls.n	800ff50 <_raise_r+0x14>
 800ff46:	2316      	movs	r3, #22
 800ff48:	6003      	str	r3, [r0, #0]
 800ff4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ff4e:	bd38      	pop	{r3, r4, r5, pc}
 800ff50:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ff52:	b112      	cbz	r2, 800ff5a <_raise_r+0x1e>
 800ff54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff58:	b94b      	cbnz	r3, 800ff6e <_raise_r+0x32>
 800ff5a:	4620      	mov	r0, r4
 800ff5c:	f000 f830 	bl	800ffc0 <_getpid_r>
 800ff60:	462a      	mov	r2, r5
 800ff62:	4601      	mov	r1, r0
 800ff64:	4620      	mov	r0, r4
 800ff66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff6a:	f000 b817 	b.w	800ff9c <_kill_r>
 800ff6e:	2b01      	cmp	r3, #1
 800ff70:	d00a      	beq.n	800ff88 <_raise_r+0x4c>
 800ff72:	1c59      	adds	r1, r3, #1
 800ff74:	d103      	bne.n	800ff7e <_raise_r+0x42>
 800ff76:	2316      	movs	r3, #22
 800ff78:	6003      	str	r3, [r0, #0]
 800ff7a:	2001      	movs	r0, #1
 800ff7c:	e7e7      	b.n	800ff4e <_raise_r+0x12>
 800ff7e:	2400      	movs	r4, #0
 800ff80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff84:	4628      	mov	r0, r5
 800ff86:	4798      	blx	r3
 800ff88:	2000      	movs	r0, #0
 800ff8a:	e7e0      	b.n	800ff4e <_raise_r+0x12>

0800ff8c <raise>:
 800ff8c:	4b02      	ldr	r3, [pc, #8]	; (800ff98 <raise+0xc>)
 800ff8e:	4601      	mov	r1, r0
 800ff90:	6818      	ldr	r0, [r3, #0]
 800ff92:	f7ff bfd3 	b.w	800ff3c <_raise_r>
 800ff96:	bf00      	nop
 800ff98:	200001b4 	.word	0x200001b4

0800ff9c <_kill_r>:
 800ff9c:	b538      	push	{r3, r4, r5, lr}
 800ff9e:	4d07      	ldr	r5, [pc, #28]	; (800ffbc <_kill_r+0x20>)
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	4604      	mov	r4, r0
 800ffa4:	4608      	mov	r0, r1
 800ffa6:	4611      	mov	r1, r2
 800ffa8:	602b      	str	r3, [r5, #0]
 800ffaa:	f7f2 fc0f 	bl	80027cc <_kill>
 800ffae:	1c43      	adds	r3, r0, #1
 800ffb0:	d102      	bne.n	800ffb8 <_kill_r+0x1c>
 800ffb2:	682b      	ldr	r3, [r5, #0]
 800ffb4:	b103      	cbz	r3, 800ffb8 <_kill_r+0x1c>
 800ffb6:	6023      	str	r3, [r4, #0]
 800ffb8:	bd38      	pop	{r3, r4, r5, pc}
 800ffba:	bf00      	nop
 800ffbc:	2000459c 	.word	0x2000459c

0800ffc0 <_getpid_r>:
 800ffc0:	f7f2 bbfc 	b.w	80027bc <_getpid>

0800ffc4 <_malloc_usable_size_r>:
 800ffc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffc8:	1f18      	subs	r0, r3, #4
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	bfbc      	itt	lt
 800ffce:	580b      	ldrlt	r3, [r1, r0]
 800ffd0:	18c0      	addlt	r0, r0, r3
 800ffd2:	4770      	bx	lr

0800ffd4 <__swhatbuf_r>:
 800ffd4:	b570      	push	{r4, r5, r6, lr}
 800ffd6:	460c      	mov	r4, r1
 800ffd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffdc:	2900      	cmp	r1, #0
 800ffde:	b096      	sub	sp, #88	; 0x58
 800ffe0:	4615      	mov	r5, r2
 800ffe2:	461e      	mov	r6, r3
 800ffe4:	da0d      	bge.n	8010002 <__swhatbuf_r+0x2e>
 800ffe6:	89a3      	ldrh	r3, [r4, #12]
 800ffe8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ffec:	f04f 0100 	mov.w	r1, #0
 800fff0:	bf0c      	ite	eq
 800fff2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fff6:	2340      	movne	r3, #64	; 0x40
 800fff8:	2000      	movs	r0, #0
 800fffa:	6031      	str	r1, [r6, #0]
 800fffc:	602b      	str	r3, [r5, #0]
 800fffe:	b016      	add	sp, #88	; 0x58
 8010000:	bd70      	pop	{r4, r5, r6, pc}
 8010002:	466a      	mov	r2, sp
 8010004:	f000 f848 	bl	8010098 <_fstat_r>
 8010008:	2800      	cmp	r0, #0
 801000a:	dbec      	blt.n	800ffe6 <__swhatbuf_r+0x12>
 801000c:	9901      	ldr	r1, [sp, #4]
 801000e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010012:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010016:	4259      	negs	r1, r3
 8010018:	4159      	adcs	r1, r3
 801001a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801001e:	e7eb      	b.n	800fff8 <__swhatbuf_r+0x24>

08010020 <__smakebuf_r>:
 8010020:	898b      	ldrh	r3, [r1, #12]
 8010022:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010024:	079d      	lsls	r5, r3, #30
 8010026:	4606      	mov	r6, r0
 8010028:	460c      	mov	r4, r1
 801002a:	d507      	bpl.n	801003c <__smakebuf_r+0x1c>
 801002c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010030:	6023      	str	r3, [r4, #0]
 8010032:	6123      	str	r3, [r4, #16]
 8010034:	2301      	movs	r3, #1
 8010036:	6163      	str	r3, [r4, #20]
 8010038:	b002      	add	sp, #8
 801003a:	bd70      	pop	{r4, r5, r6, pc}
 801003c:	ab01      	add	r3, sp, #4
 801003e:	466a      	mov	r2, sp
 8010040:	f7ff ffc8 	bl	800ffd4 <__swhatbuf_r>
 8010044:	9900      	ldr	r1, [sp, #0]
 8010046:	4605      	mov	r5, r0
 8010048:	4630      	mov	r0, r6
 801004a:	f7ff f8fb 	bl	800f244 <_malloc_r>
 801004e:	b948      	cbnz	r0, 8010064 <__smakebuf_r+0x44>
 8010050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010054:	059a      	lsls	r2, r3, #22
 8010056:	d4ef      	bmi.n	8010038 <__smakebuf_r+0x18>
 8010058:	f023 0303 	bic.w	r3, r3, #3
 801005c:	f043 0302 	orr.w	r3, r3, #2
 8010060:	81a3      	strh	r3, [r4, #12]
 8010062:	e7e3      	b.n	801002c <__smakebuf_r+0xc>
 8010064:	89a3      	ldrh	r3, [r4, #12]
 8010066:	6020      	str	r0, [r4, #0]
 8010068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801006c:	81a3      	strh	r3, [r4, #12]
 801006e:	9b00      	ldr	r3, [sp, #0]
 8010070:	6163      	str	r3, [r4, #20]
 8010072:	9b01      	ldr	r3, [sp, #4]
 8010074:	6120      	str	r0, [r4, #16]
 8010076:	b15b      	cbz	r3, 8010090 <__smakebuf_r+0x70>
 8010078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801007c:	4630      	mov	r0, r6
 801007e:	f000 f81d 	bl	80100bc <_isatty_r>
 8010082:	b128      	cbz	r0, 8010090 <__smakebuf_r+0x70>
 8010084:	89a3      	ldrh	r3, [r4, #12]
 8010086:	f023 0303 	bic.w	r3, r3, #3
 801008a:	f043 0301 	orr.w	r3, r3, #1
 801008e:	81a3      	strh	r3, [r4, #12]
 8010090:	89a3      	ldrh	r3, [r4, #12]
 8010092:	431d      	orrs	r5, r3
 8010094:	81a5      	strh	r5, [r4, #12]
 8010096:	e7cf      	b.n	8010038 <__smakebuf_r+0x18>

08010098 <_fstat_r>:
 8010098:	b538      	push	{r3, r4, r5, lr}
 801009a:	4d07      	ldr	r5, [pc, #28]	; (80100b8 <_fstat_r+0x20>)
 801009c:	2300      	movs	r3, #0
 801009e:	4604      	mov	r4, r0
 80100a0:	4608      	mov	r0, r1
 80100a2:	4611      	mov	r1, r2
 80100a4:	602b      	str	r3, [r5, #0]
 80100a6:	f7f2 fbf0 	bl	800288a <_fstat>
 80100aa:	1c43      	adds	r3, r0, #1
 80100ac:	d102      	bne.n	80100b4 <_fstat_r+0x1c>
 80100ae:	682b      	ldr	r3, [r5, #0]
 80100b0:	b103      	cbz	r3, 80100b4 <_fstat_r+0x1c>
 80100b2:	6023      	str	r3, [r4, #0]
 80100b4:	bd38      	pop	{r3, r4, r5, pc}
 80100b6:	bf00      	nop
 80100b8:	2000459c 	.word	0x2000459c

080100bc <_isatty_r>:
 80100bc:	b538      	push	{r3, r4, r5, lr}
 80100be:	4d06      	ldr	r5, [pc, #24]	; (80100d8 <_isatty_r+0x1c>)
 80100c0:	2300      	movs	r3, #0
 80100c2:	4604      	mov	r4, r0
 80100c4:	4608      	mov	r0, r1
 80100c6:	602b      	str	r3, [r5, #0]
 80100c8:	f7f2 fbef 	bl	80028aa <_isatty>
 80100cc:	1c43      	adds	r3, r0, #1
 80100ce:	d102      	bne.n	80100d6 <_isatty_r+0x1a>
 80100d0:	682b      	ldr	r3, [r5, #0]
 80100d2:	b103      	cbz	r3, 80100d6 <_isatty_r+0x1a>
 80100d4:	6023      	str	r3, [r4, #0]
 80100d6:	bd38      	pop	{r3, r4, r5, pc}
 80100d8:	2000459c 	.word	0x2000459c

080100dc <_init>:
 80100dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100de:	bf00      	nop
 80100e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100e2:	bc08      	pop	{r3}
 80100e4:	469e      	mov	lr, r3
 80100e6:	4770      	bx	lr

080100e8 <_fini>:
 80100e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ea:	bf00      	nop
 80100ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100ee:	bc08      	pop	{r3}
 80100f0:	469e      	mov	lr, r3
 80100f2:	4770      	bx	lr
