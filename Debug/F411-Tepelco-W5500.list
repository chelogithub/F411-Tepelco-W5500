
F411-Tepelco-W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  08010454  08010454  00020454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010dbc  08010dbc  000301b8  2**0
                  CONTENTS
  4 .ARM          00000008  08010dbc  08010dbc  00020dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010dc4  08010dc4  000301b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010dc4  08010dc4  00020dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010dc8  08010dc8  00020dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  08010dcc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004600  200001b8  08010f84  000301b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200047b8  08010f84  000347b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014fe1  00000000  00000000  0003022b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d8c  00000000  00000000  0004520c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00047f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e01  00000000  00000000  000490d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001858d  00000000  00000000  00049ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017717  00000000  00000000  00062466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093786  00000000  00000000  00079b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054cc  00000000  00000000  0010d304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001127d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001b8 	.word	0x200001b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801043c 	.word	0x0801043c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001bc 	.word	0x200001bc
 80001dc:	0801043c 	.word	0x0801043c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b08b      	sub	sp, #44	; 0x2c
 8000698:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5500 Environment-------------------------//
	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069a:	4bcf      	ldr	r3, [pc, #828]	; (80009d8 <main+0x344>)
 800069c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a0:	22c0      	movs	r2, #192	; 0xc0
 80006a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.GAR[1]=168;
 80006a6:	4bcc      	ldr	r3, [pc, #816]	; (80009d8 <main+0x344>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	22a8      	movs	r2, #168	; 0xa8
 80006ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.GAR[2]=0;
 80006b2:	4bc9      	ldr	r3, [pc, #804]	; (80009d8 <main+0x344>)
 80006b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.GAR[3]=1;
 80006be:	4bc6      	ldr	r3, [pc, #792]	; (80009d8 <main+0x344>)
 80006c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c4:	2201      	movs	r2, #1
 80006c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006ca:	4bc3      	ldr	r3, [pc, #780]	; (80009d8 <main+0x344>)
 80006cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d0:	22ff      	movs	r2, #255	; 0xff
 80006d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SUBR[1]=255;
 80006d6:	4bc0      	ldr	r3, [pc, #768]	; (80009d8 <main+0x344>)
 80006d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006dc:	22ff      	movs	r2, #255	; 0xff
 80006de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		ETH.SUBR[2]=255;
 80006e2:	4bbd      	ldr	r3, [pc, #756]	; (80009d8 <main+0x344>)
 80006e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e8:	22ff      	movs	r2, #255	; 0xff
 80006ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SUBR[3]=0;
 80006ee:	4bba      	ldr	r3, [pc, #744]	; (80009d8 <main+0x344>)
 80006f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006fa:	4bb7      	ldr	r3, [pc, #732]	; (80009d8 <main+0x344>)
 80006fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000700:	2200      	movs	r2, #0
 8000702:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SHAR[1]=0x08;
 8000706:	4bb4      	ldr	r3, [pc, #720]	; (80009d8 <main+0x344>)
 8000708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800070c:	2208      	movs	r2, #8
 800070e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		ETH.SHAR[2]=0xDC;
 8000712:	4bb1      	ldr	r3, [pc, #708]	; (80009d8 <main+0x344>)
 8000714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000718:	22dc      	movs	r2, #220	; 0xdc
 800071a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		ETH.SHAR[3]=0x00;
 800071e:	4bae      	ldr	r3, [pc, #696]	; (80009d8 <main+0x344>)
 8000720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000724:	2200      	movs	r2, #0
 8000726:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		ETH.SHAR[4]=0xC0;
 800072a:	4bab      	ldr	r3, [pc, #684]	; (80009d8 <main+0x344>)
 800072c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000730:	22c0      	movs	r2, #192	; 0xc0
 8000732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		ETH.SHAR[5]=0x03;
 8000736:	4ba8      	ldr	r3, [pc, #672]	; (80009d8 <main+0x344>)
 8000738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800073c:	2203      	movs	r2, #3
 800073e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 8000742:	4ba5      	ldr	r3, [pc, #660]	; (80009d8 <main+0x344>)
 8000744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000748:	22c0      	movs	r2, #192	; 0xc0
 800074a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		ETH.SIPR[1]=168;
 800074e:	4ba2      	ldr	r3, [pc, #648]	; (80009d8 <main+0x344>)
 8000750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000754:	22a8      	movs	r2, #168	; 0xa8
 8000756:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		ETH.SIPR[2]=0;
 800075a:	4b9f      	ldr	r3, [pc, #636]	; (80009d8 <main+0x344>)
 800075c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		ETH.SIPR[3]=34,//ETH.SIPR[3]=34,
 8000766:	4b9c      	ldr	r3, [pc, #624]	; (80009d8 <main+0x344>)
 8000768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800076c:	2222      	movs	r2, #34	; 0x22
 800076e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	//  Socket RX memory
		ETH.RMSR=0x55;
 8000772:	4b99      	ldr	r3, [pc, #612]	; (80009d8 <main+0x344>)
 8000774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000778:	2255      	movs	r2, #85	; 0x55
 800077a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	//  Socket TX memory
		ETH.TMSR=0x55;
 800077e:	4b96      	ldr	r3, [pc, #600]	; (80009d8 <main+0x344>)
 8000780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000784:	2255      	movs	r2, #85	; 0x55
 8000786:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	//  S0 Port Number
		ETH.S_PORT[0]=0x01; //01
 800078a:	4b93      	ldr	r3, [pc, #588]	; (80009d8 <main+0x344>)
 800078c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000790:	2201      	movs	r2, #1
 8000792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		ETH.S_PORT[1]=0xF6; //f6
 8000796:	4b90      	ldr	r3, [pc, #576]	; (80009d8 <main+0x344>)
 8000798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800079c:	22f6      	movs	r2, #246	; 0xf6
 800079e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	//	S0 Client IP ADDRESS
		ETH.S_DIPR[0]=192;
 80007a2:	4b8d      	ldr	r3, [pc, #564]	; (80009d8 <main+0x344>)
 80007a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a8:	22c0      	movs	r2, #192	; 0xc0
 80007aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		ETH.S_DIPR[1]=168;
 80007ae:	4b8a      	ldr	r3, [pc, #552]	; (80009d8 <main+0x344>)
 80007b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007b4:	22a8      	movs	r2, #168	; 0xa8
 80007b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		ETH.S_DIPR[2]=0;
 80007ba:	4b87      	ldr	r3, [pc, #540]	; (80009d8 <main+0x344>)
 80007bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		ETH.S_DIPR[3]=3;
 80007c6:	4b84      	ldr	r3, [pc, #528]	; (80009d8 <main+0x344>)
 80007c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007cc:	2203      	movs	r2, #3
 80007ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	//	S0 Client IP ADDRESS
		ETH.S_DPORT[0]=0x01;
 80007d2:	4b81      	ldr	r3, [pc, #516]	; (80009d8 <main+0x344>)
 80007d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d8:	2201      	movs	r2, #1
 80007da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		ETH.S_DPORT[1]=0xF6;
 80007de:	4b7e      	ldr	r3, [pc, #504]	; (80009d8 <main+0x344>)
 80007e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007e4:	22f6      	movs	r2, #246	; 0xf6
 80007e6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

		ETH.gS_RX_BASE = 0x0000;
 80007ea:	4b7b      	ldr	r3, [pc, #492]	; (80009d8 <main+0x344>)
 80007ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f0:	2200      	movs	r2, #0
 80007f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS_RX_MASK = 0x07FF;
 80007f6:	4b78      	ldr	r3, [pc, #480]	; (80009d8 <main+0x344>)
 80007f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007fc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000800:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS1_RX_BASE = 0x6800;
 8000804:	4b74      	ldr	r3, [pc, #464]	; (80009d8 <main+0x344>)
 8000806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800080a:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800080e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS1_RX_MASK = 0x07FF;
 8000812:	4b71      	ldr	r3, [pc, #452]	; (80009d8 <main+0x344>)
 8000814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000818:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800081c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS2_RX_BASE = 0x7000;
 8000820:	4b6d      	ldr	r3, [pc, #436]	; (80009d8 <main+0x344>)
 8000822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000826:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800082a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS2_RX_MASK = 0x07FF;
 800082e:	4b6a      	ldr	r3, [pc, #424]	; (80009d8 <main+0x344>)
 8000830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000834:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000838:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS3_RX_BASE = 0x7800;
 800083c:	4b66      	ldr	r3, [pc, #408]	; (80009d8 <main+0x344>)
 800083e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000842:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000846:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS3_RX_MASK = 0x07FF;
 800084a:	4b63      	ldr	r3, [pc, #396]	; (80009d8 <main+0x344>)
 800084c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000850:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000854:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS_TX_BASE = 0x0000;
 8000858:	4b5f      	ldr	r3, [pc, #380]	; (80009d8 <main+0x344>)
 800085a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085e:	2200      	movs	r2, #0
 8000860:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS_TX_MASK = 0x07FF;
 8000864:	4b5c      	ldr	r3, [pc, #368]	; (80009d8 <main+0x344>)
 8000866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800086a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS1_TX_BASE = 0x4800;
 8000872:	4b59      	ldr	r3, [pc, #356]	; (80009d8 <main+0x344>)
 8000874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000878:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		ETH.gS1_TX_MASK = 0x07FF;
 8000880:	4b55      	ldr	r3, [pc, #340]	; (80009d8 <main+0x344>)
 8000882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000886:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800088a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		ETH.gS2_TX_BASE = 0x5000;
 800088e:	4b52      	ldr	r3, [pc, #328]	; (80009d8 <main+0x344>)
 8000890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000894:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000898:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		ETH.gS2_TX_MASK = 0x07FF;
 800089c:	4b4e      	ldr	r3, [pc, #312]	; (80009d8 <main+0x344>)
 800089e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		ETH.gS3_TX_BASE = 0x5800;
 80008aa:	4b4b      	ldr	r3, [pc, #300]	; (80009d8 <main+0x344>)
 80008ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b0:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b4:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		ETH.gS3_TX_MASK = 0x07FF;
 80008b8:	4b47      	ldr	r3, [pc, #284]	; (80009d8 <main+0x344>)
 80008ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

		ETH.S_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c6:	4b44      	ldr	r3, [pc, #272]	; (80009d8 <main+0x344>)
 80008c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

		spi_no_debug=1;
 80008d2:	4b42      	ldr	r3, [pc, #264]	; (80009dc <main+0x348>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80008d8:	4b3f      	ldr	r3, [pc, #252]	; (80009d8 <main+0x344>)
 80008da:	4a41      	ldr	r2, [pc, #260]	; (80009e0 <main+0x34c>)
 80008dc:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80008de:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <main+0x344>)
 80008e0:	2210      	movs	r2, #16
 80008e2:	811a      	strh	r2, [r3, #8]
		ETH.RST_PORT=GPIOB;
 80008e4:	4b3c      	ldr	r3, [pc, #240]	; (80009d8 <main+0x344>)
 80008e6:	4a3f      	ldr	r2, [pc, #252]	; (80009e4 <main+0x350>)
 80008e8:	60da      	str	r2, [r3, #12]
		ETH.RST_PIN=GPIO_PIN_0;
 80008ea:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <main+0x344>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	821a      	strh	r2, [r3, #16]
		ETH.SPI= &hspi1;
 80008f0:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <main+0x344>)
 80008f2:	4a3d      	ldr	r2, [pc, #244]	; (80009e8 <main+0x354>)
 80008f4:	601a      	str	r2, [r3, #0]
	  //----------------------- ETHERNET W5500 Environment-------------------------//
	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008f6:	483d      	ldr	r0, [pc, #244]	; (80009ec <main+0x358>)
 80008f8:	f005 fef8 	bl	80066ec <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008fc:	493c      	ldr	r1, [pc, #240]	; (80009f0 <main+0x35c>)
 80008fe:	483d      	ldr	r0, [pc, #244]	; (80009f4 <main+0x360>)
 8000900:	f00e fdb6 	bl	800f470 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 8000904:	493c      	ldr	r1, [pc, #240]	; (80009f8 <main+0x364>)
 8000906:	483d      	ldr	r0, [pc, #244]	; (80009fc <main+0x368>)
 8000908:	f00e fdb2 	bl	800f470 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 800090c:	493c      	ldr	r1, [pc, #240]	; (8000a00 <main+0x36c>)
 800090e:	483d      	ldr	r0, [pc, #244]	; (8000a04 <main+0x370>)
 8000910:	f00e fdae 	bl	800f470 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 8000914:	493c      	ldr	r1, [pc, #240]	; (8000a08 <main+0x374>)
 8000916:	483d      	ldr	r0, [pc, #244]	; (8000a0c <main+0x378>)
 8000918:	f00e fdaa 	bl	800f470 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 800091c:	493c      	ldr	r1, [pc, #240]	; (8000a10 <main+0x37c>)
 800091e:	483d      	ldr	r0, [pc, #244]	; (8000a14 <main+0x380>)
 8000920:	f00e fda6 	bl	800f470 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 8000924:	493c      	ldr	r1, [pc, #240]	; (8000a18 <main+0x384>)
 8000926:	483d      	ldr	r0, [pc, #244]	; (8000a1c <main+0x388>)
 8000928:	f00e fda2 	bl	800f470 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 800092c:	493c      	ldr	r1, [pc, #240]	; (8000a20 <main+0x38c>)
 800092e:	483d      	ldr	r0, [pc, #244]	; (8000a24 <main+0x390>)
 8000930:	f00e fd9e 	bl	800f470 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 8000934:	493c      	ldr	r1, [pc, #240]	; (8000a28 <main+0x394>)
 8000936:	483d      	ldr	r0, [pc, #244]	; (8000a2c <main+0x398>)
 8000938:	f00e fd9a 	bl	800f470 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 800093c:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <main+0x358>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000944:	4b29      	ldr	r3, [pc, #164]	; (80009ec <main+0x358>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <main+0x358>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 8000954:	4b25      	ldr	r3, [pc, #148]	; (80009ec <main+0x358>)
 8000956:	2200      	movs	r2, #0
 8000958:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 800095c:	4b23      	ldr	r3, [pc, #140]	; (80009ec <main+0x358>)
 800095e:	2200      	movs	r2, #0
 8000960:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <main+0x358>)
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <main+0x358>)
 800096e:	2206      	movs	r2, #6
 8000970:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <main+0x358>)
 8000976:	2201      	movs	r2, #1
 8000978:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <main+0x358>)
 800097e:	2203      	movs	r2, #3
 8000980:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <main+0x358>)
 8000986:	2200      	movs	r2, #0
 8000988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <main+0x358>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <main+0x358>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <main+0x358>)
 800099e:	220a      	movs	r2, #10
 80009a0:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <main+0x358>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <main+0x358>)
 80009ae:	2233      	movs	r2, #51	; 0x33
 80009b0:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <main+0x358>)
 80009b6:	2234      	movs	r2, #52	; 0x34
 80009b8:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <main+0x358>)
 80009be:	2235      	movs	r2, #53	; 0x35
 80009c0:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <main+0x358>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <main+0x358>)
 80009ce:	2264      	movs	r2, #100	; 0x64
 80009d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80009d4:	e02c      	b.n	8000a30 <main+0x39c>
 80009d6:	bf00      	nop
 80009d8:	20000304 	.word	0x20000304
 80009dc:	20004214 	.word	0x20004214
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020400 	.word	0x40020400
 80009e8:	200001d4 	.word	0x200001d4
 80009ec:	200023d4 	.word	0x200023d4
 80009f0:	20000044 	.word	0x20000044
 80009f4:	200023da 	.word	0x200023da
 80009f8:	2000004c 	.word	0x2000004c
 80009fc:	200023fa 	.word	0x200023fa
 8000a00:	20000058 	.word	0x20000058
 8000a04:	2000240a 	.word	0x2000240a
 8000a08:	20000068 	.word	0x20000068
 8000a0c:	2000241a 	.word	0x2000241a
 8000a10:	20000070 	.word	0x20000070
 8000a14:	20002420 	.word	0x20002420
 8000a18:	20000080 	.word	0x20000080
 8000a1c:	20002436 	.word	0x20002436
 8000a20:	20000090 	.word	0x20000090
 8000a24:	20002446 	.word	0x20002446
 8000a28:	200000a0 	.word	0x200000a0
 8000a2c:	20002430 	.word	0x20002430
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 8000a30:	4b9c      	ldr	r3, [pc, #624]	; (8000ca4 <main+0x610>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._DBG_EN=1;
 8000a38:	4b9a      	ldr	r3, [pc, #616]	; (8000ca4 <main+0x610>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
		wf.RESET_PORT=GPIOA;
 8000a40:	4b98      	ldr	r3, [pc, #608]	; (8000ca4 <main+0x610>)
 8000a42:	4a99      	ldr	r2, [pc, #612]	; (8000ca8 <main+0x614>)
 8000a44:	601a      	str	r2, [r3, #0]
		wf.RESET_PIN=GPIO_PIN_8;
 8000a46:	4b97      	ldr	r3, [pc, #604]	; (8000ca4 <main+0x610>)
 8000a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a4c:	809a      	strh	r2, [r3, #4]
	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//
		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a4e:	4897      	ldr	r0, [pc, #604]	; (8000cac <main+0x618>)
 8000a50:	f00a ff84 	bl	800b95c <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a54:	4b95      	ldr	r3, [pc, #596]	; (8000cac <main+0x618>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	711a      	strb	r2, [r3, #4]
		ModBUS_Config(&mb_wf);		//WIFI como servidor TCP, recibe comadno ModBUS
 8000a5a:	4895      	ldr	r0, [pc, #596]	; (8000cb0 <main+0x61c>)
 8000a5c:	f00a ff7e 	bl	800b95c <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a60:	4b93      	ldr	r3, [pc, #588]	; (8000cb0 <main+0x61c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	711a      	strb	r2, [r3, #4]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a66:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a6a:	2103      	movs	r1, #3
 8000a6c:	4890      	ldr	r0, [pc, #576]	; (8000cb0 <main+0x61c>)
 8000a6e:	f00b f818 	bl	800baa2 <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a72:	f001 ffab 	bl	80029cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a76:	f000 faf3 	bl	8001060 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a7a:	4b8e      	ldr	r3, [pc, #568]	; (8000cb4 <main+0x620>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a8e      	ldr	r2, [pc, #568]	; (8000cb8 <main+0x624>)
 8000a80:	fba2 2303 	umull	r2, r3, r2, r3
 8000a84:	099b      	lsrs	r3, r3, #6
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fdba 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8c:	f000 fc54 	bl	8001338 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a90:	f000 fb4e 	bl	8001130 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000a94:	f000 fb82 	bl	800119c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a98:	f000 fbfa 	bl	8001290 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a9c:	f000 fc22 	bl	80012e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

     ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000aa0:	210e      	movs	r1, #14
 8000aa2:	4886      	ldr	r0, [pc, #536]	; (8000cbc <main+0x628>)
 8000aa4:	f000 fcee 	bl	8001484 <ITM0_Write>
     HAL_UART_Transmit_IT(&huart2,"\r\n INICIO OK \r\n",strlen("\r\n INICIO OK \r\n"));
 8000aa8:	220f      	movs	r2, #15
 8000aaa:	4985      	ldr	r1, [pc, #532]	; (8000cc0 <main+0x62c>)
 8000aac:	4885      	ldr	r0, [pc, #532]	; (8000cc4 <main+0x630>)
 8000aae:	f004 fd45 	bl	800553c <HAL_UART_Transmit_IT>
	 HW_RESET(&wf);
 8000ab2:	487c      	ldr	r0, [pc, #496]	; (8000ca4 <main+0x610>)
 8000ab4:	f005 fd16 	bl	80064e4 <HW_RESET>
	 if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000ab8:	4b7a      	ldr	r3, [pc, #488]	; (8000ca4 <main+0x610>)
 8000aba:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <main+0x436>
 8000ac2:	2113      	movs	r1, #19
 8000ac4:	4880      	ldr	r0, [pc, #512]	; (8000cc8 <main+0x634>)
 8000ac6:	f000 fcdd 	bl	8001484 <ITM0_Write>
	 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000aca:	2201      	movs	r2, #1
 8000acc:	497f      	ldr	r1, [pc, #508]	; (8000ccc <main+0x638>)
 8000ace:	4880      	ldr	r0, [pc, #512]	; (8000cd0 <main+0x63c>)
 8000ad0:	f004 fd79 	bl	80055c6 <HAL_UART_Receive_IT>
	 if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5500 \r\n",strlen("\r\n SET-UP W5500 \r\n"));
 8000ad4:	4b7f      	ldr	r3, [pc, #508]	; (8000cd4 <main+0x640>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <main+0x450>
 8000adc:	2112      	movs	r1, #18
 8000ade:	487e      	ldr	r0, [pc, #504]	; (8000cd8 <main+0x644>)
 8000ae0:	f000 fcd0 	bl	8001484 <ITM0_Write>


     SPI_ETH_PHY_RESET(&ETH);
 8000ae4:	487d      	ldr	r0, [pc, #500]	; (8000cdc <main+0x648>)
 8000ae6:	f00c fa95 	bl	800d014 <SPI_ETH_PHY_RESET>
     HAL_Delay(800);
 8000aea:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000aee:	f001 ffdf 	bl	8002ab0 <HAL_Delay>
     eth_init(&ETH);
 8000af2:	487a      	ldr	r0, [pc, #488]	; (8000cdc <main+0x648>)
 8000af4:	f00c fc78 	bl	800d3e8 <eth_init>
     SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000af8:	4978      	ldr	r1, [pc, #480]	; (8000cdc <main+0x648>)
 8000afa:	4879      	ldr	r0, [pc, #484]	; (8000ce0 <main+0x64c>)
 8000afc:	f00c fff9 	bl	800daf2 <SPI_ETH_SNIFF>
     HAL_Delay(800);
 8000b00:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000b04:	f001 ffd4 	bl	8002ab0 <HAL_Delay>
   	 eth_socket_init(&ETH,S0_REG);
 8000b08:	2101      	movs	r1, #1
 8000b0a:	4874      	ldr	r0, [pc, #464]	; (8000cdc <main+0x648>)
 8000b0c:	f00c fd3e 	bl	800d58c <eth_socket_init>
   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b10:	4972      	ldr	r1, [pc, #456]	; (8000cdc <main+0x648>)
 8000b12:	4873      	ldr	r0, [pc, #460]	; (8000ce0 <main+0x64c>)
 8000b14:	f00c ffed 	bl	800daf2 <SPI_ETH_SNIFF>
	 uint16_t b=0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	81bb      	strh	r3, [r7, #12]
	 uint8_t spi_Data[2];
	 b = SPI_ETH_REG(&ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	2300      	movs	r3, #0
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2124      	movs	r1, #36	; 0x24
 8000b2c:	486b      	ldr	r0, [pc, #428]	; (8000cdc <main+0x648>)
 8000b2e:	f00c fac8 	bl	800d0c2 <SPI_ETH_REG>
 8000b32:	4603      	mov	r3, r0
 8000b34:	81bb      	strh	r3, [r7, #12]
	 eth_wr_SOCKET_MODE(&ETH,S0_REG,MODE_TCP);
 8000b36:	2201      	movs	r2, #1
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4868      	ldr	r0, [pc, #416]	; (8000cdc <main+0x648>)
 8000b3c:	f00c fc32 	bl	800d3a4 <eth_wr_SOCKET_MODE>
   	 SPI_ETH_REG(&ETH, S_DIPR, S0_REG,SPI_WRITE, ETH.S_DIPR,4);									// client
 8000b40:	2304      	movs	r3, #4
 8000b42:	9301      	str	r3, [sp, #4]
 8000b44:	4b67      	ldr	r3, [pc, #412]	; (8000ce4 <main+0x650>)
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	210c      	movs	r1, #12
 8000b4e:	4863      	ldr	r0, [pc, #396]	; (8000cdc <main+0x648>)
 8000b50:	f00c fab7 	bl	800d0c2 <SPI_ETH_REG>
   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 8000b54:	212e      	movs	r1, #46	; 0x2e
 8000b56:	4864      	ldr	r0, [pc, #400]	; (8000ce8 <main+0x654>)
 8000b58:	f000 fc94 	bl	8001484 <ITM0_Write>
   	 SPI_ETH_REG(&ETH, S_DPORT, S0_REG,SPI_WRITE, ETH.S_DPORT,2);									// client
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	9301      	str	r3, [sp, #4]
 8000b60:	4b62      	ldr	r3, [pc, #392]	; (8000cec <main+0x658>)
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	2301      	movs	r3, #1
 8000b66:	2201      	movs	r2, #1
 8000b68:	2110      	movs	r1, #16
 8000b6a:	485c      	ldr	r0, [pc, #368]	; (8000cdc <main+0x648>)
 8000b6c:	f00c faa9 	bl	800d0c2 <SPI_ETH_REG>
   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 8000b70:	2120      	movs	r1, #32
 8000b72:	485f      	ldr	r0, [pc, #380]	; (8000cf0 <main+0x65c>)
 8000b74:	f000 fc86 	bl	8001484 <ITM0_Write>
   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b78:	4958      	ldr	r1, [pc, #352]	; (8000cdc <main+0x648>)
 8000b7a:	4859      	ldr	r0, [pc, #356]	; (8000ce0 <main+0x64c>)
 8000b7c:	f00c ffb9 	bl	800daf2 <SPI_ETH_SNIFF>
   	 eth_wr_SOCKET_CMD(&ETH, S0_REG,OPEN );
 8000b80:	2201      	movs	r2, #1
 8000b82:	2101      	movs	r1, #1
 8000b84:	4855      	ldr	r0, [pc, #340]	; (8000cdc <main+0x648>)
 8000b86:	f00c fbeb 	bl	800d360 <eth_wr_SOCKET_CMD>

   	 HAL_Delay(1000);
 8000b8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b8e:	f001 ff8f 	bl	8002ab0 <HAL_Delay>
   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b92:	4952      	ldr	r1, [pc, #328]	; (8000cdc <main+0x648>)
 8000b94:	4852      	ldr	r0, [pc, #328]	; (8000ce0 <main+0x64c>)
 8000b96:	f00c ffac 	bl	800daf2 <SPI_ETH_SNIFF>

	 //SPI_READ_EN=1;
   	 //------------------------ RUN ESP -----------------------------------//
     if(ESP8266_HW_Init(&huart1)==1)
 8000b9a:	484d      	ldr	r0, [pc, #308]	; (8000cd0 <main+0x63c>)
 8000b9c:	f001 fbc4 	bl	8002328 <ESP8266_HW_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d111      	bne.n	8000bca <main+0x536>
     {
		  ESP_HW_Init=1;
 8000ba6:	4b53      	ldr	r3, [pc, #332]	; (8000cf4 <main+0x660>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000bac:	4b3d      	ldr	r3, [pc, #244]	; (8000ca4 <main+0x610>)
 8000bae:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d003      	beq.n	8000bbe <main+0x52a>
 8000bb6:	2113      	movs	r1, #19
 8000bb8:	484f      	ldr	r0, [pc, #316]	; (8000cf8 <main+0x664>)
 8000bba:	f000 fc63 	bl	8001484 <ITM0_Write>
		  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000bbe:	2213      	movs	r2, #19
 8000bc0:	494d      	ldr	r1, [pc, #308]	; (8000cf8 <main+0x664>)
 8000bc2:	4840      	ldr	r0, [pc, #256]	; (8000cc4 <main+0x630>)
 8000bc4:	f004 fcba 	bl	800553c <HAL_UART_Transmit_IT>
 8000bc8:	e02e      	b.n	8000c28 <main+0x594>
     }
     else
     {

    	 HW_RESET(&wf);
 8000bca:	4836      	ldr	r0, [pc, #216]	; (8000ca4 <main+0x610>)
 8000bcc:	f005 fc8a 	bl	80064e4 <HW_RESET>
		 ESP_REinit=0;
 8000bd0:	4b4a      	ldr	r3, [pc, #296]	; (8000cfc <main+0x668>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	701a      	strb	r2, [r3, #0]
			  if(ESP8266_HW_Init(&huart1)==1)
 8000bd6:	483e      	ldr	r0, [pc, #248]	; (8000cd0 <main+0x63c>)
 8000bd8:	f001 fba6 	bl	8002328 <ESP8266_HW_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d111      	bne.n	8000c06 <main+0x572>
				  {
					  ESP_HW_Init=1;
 8000be2:	4b44      	ldr	r3, [pc, #272]	; (8000cf4 <main+0x660>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	701a      	strb	r2, [r3, #0]
					  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <main+0x610>)
 8000bea:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <main+0x566>
 8000bf2:	2113      	movs	r1, #19
 8000bf4:	4840      	ldr	r0, [pc, #256]	; (8000cf8 <main+0x664>)
 8000bf6:	f000 fc45 	bl	8001484 <ITM0_Write>
					  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init2 OK\r\n",strlen("\r\n ESP HW Init2 OK\r\n"));
 8000bfa:	2214      	movs	r2, #20
 8000bfc:	4940      	ldr	r1, [pc, #256]	; (8000d00 <main+0x66c>)
 8000bfe:	4831      	ldr	r0, [pc, #196]	; (8000cc4 <main+0x630>)
 8000c00:	f004 fc9c 	bl	800553c <HAL_UART_Transmit_IT>
 8000c04:	e010      	b.n	8000c28 <main+0x594>
				  }
				  else
				  {
					  ESP_HW_Init=0;
 8000c06:	4b3b      	ldr	r3, [pc, #236]	; (8000cf4 <main+0x660>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
					  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000c0c:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <main+0x610>)
 8000c0e:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <main+0x58a>
 8000c16:	2115      	movs	r1, #21
 8000c18:	483a      	ldr	r0, [pc, #232]	; (8000d04 <main+0x670>)
 8000c1a:	f000 fc33 	bl	8001484 <ITM0_Write>
					  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Fail\r\n",strlen("\r\n ESP HW Fail\r\n"));
 8000c1e:	2210      	movs	r2, #16
 8000c20:	4939      	ldr	r1, [pc, #228]	; (8000d08 <main+0x674>)
 8000c22:	4828      	ldr	r0, [pc, #160]	; (8000cc4 <main+0x630>)
 8000c24:	f004 fc8a 	bl	800553c <HAL_UART_Transmit_IT>
				  }
     }
     //------------------------ RUN ESP -----------------------------------//

     HAL_Delay(1000);
 8000c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c2c:	f001 ff40 	bl	8002ab0 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 SPI_READ_EN=1;
 8000c30:	4b36      	ldr	r3, [pc, #216]	; (8000d0c <main+0x678>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	601a      	str	r2, [r3, #0]





		  	  if (ESP_HW_Init==1)
 8000c36:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <main+0x660>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	f040 80b8 	bne.w	8000db0 <main+0x71c>
		  	  {
		  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S_data_available))
 8000c40:	4b33      	ldr	r3, [pc, #204]	; (8000d10 <main+0x67c>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	f040 80b3 	bne.w	8000db0 <main+0x71c>
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <main+0x610>)
 8000c4c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f040 80ad 	bne.w	8000db0 <main+0x71c>
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <main+0x610>)
 8000c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c5c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000c60:	f340 80a6 	ble.w	8000db0 <main+0x71c>
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <main+0x648>)
 8000c66:	7e9b      	ldrb	r3, [r3, #26]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f000 80a1 	beq.w	8000db0 <main+0x71c>
		  			{	ETH.S_data_available=0;
 8000c6e:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <main+0x648>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	769a      	strb	r2, [r3, #26]
		  				wf_snd_flag_ticks=0;
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <main+0x680>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
		  				WF_SND_FLAG=0;
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <main+0x67c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
		  				HAL_UART_Transmit_IT(&huart2,"\r\n ENTER TO SEND DATA \r\n",strlen("\r\n ENTER TO SEND DATA \r\n"));
 8000c80:	2218      	movs	r2, #24
 8000c82:	4925      	ldr	r1, [pc, #148]	; (8000d18 <main+0x684>)
 8000c84:	480f      	ldr	r0, [pc, #60]	; (8000cc4 <main+0x630>)
 8000c86:	f004 fc59 	bl	800553c <HAL_UART_Transmit_IT>
		  				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8e:	4823      	ldr	r0, [pc, #140]	; (8000d1c <main+0x688>)
 8000c90:	f002 fb89 	bl	80033a6 <HAL_GPIO_TogglePin>
		  				ITM0_Write("\r\n#RED#WF-SE GENERA INFO Y ENVIA\r\n",strlen("\r\n#RED#WF-SE GENERA INFO Y ENVIA\r\n"));
 8000c94:	2122      	movs	r1, #34	; 0x22
 8000c96:	4822      	ldr	r0, [pc, #136]	; (8000d20 <main+0x68c>)
 8000c98:	f000 fbf4 	bl	8001484 <ITM0_Write>

		  				for(uint8_t i=0;i<=16;i++)
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e04e      	b.n	8000d40 <main+0x6ac>
 8000ca2:	bf00      	nop
 8000ca4:	200023d4 	.word	0x200023d4
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	20003124 	.word	0x20003124
 8000cb0:	20003774 	.word	0x20003774
 8000cb4:	200000a4 	.word	0x200000a4
 8000cb8:	10624dd3 	.word	0x10624dd3
 8000cbc:	08010454 	.word	0x08010454
 8000cc0:	08010464 	.word	0x08010464
 8000cc4:	200002b8 	.word	0x200002b8
 8000cc8:	08010474 	.word	0x08010474
 8000ccc:	2000462c 	.word	0x2000462c
 8000cd0:	20000274 	.word	0x20000274
 8000cd4:	200041c4 	.word	0x200041c4
 8000cd8:	08010488 	.word	0x08010488
 8000cdc:	20000304 	.word	0x20000304
 8000ce0:	20001378 	.word	0x20001378
 8000ce4:	20001348 	.word	0x20001348
 8000ce8:	0801049c 	.word	0x0801049c
 8000cec:	2000134c 	.word	0x2000134c
 8000cf0:	080104cc 	.word	0x080104cc
 8000cf4:	20004217 	.word	0x20004217
 8000cf8:	080104f0 	.word	0x080104f0
 8000cfc:	20004215 	.word	0x20004215
 8000d00:	08010504 	.word	0x08010504
 8000d04:	0801051c 	.word	0x0801051c
 8000d08:	08010534 	.word	0x08010534
 8000d0c:	20004224 	.word	0x20004224
 8000d10:	200041c5 	.word	0x200041c5
 8000d14:	200041c8 	.word	0x200041c8
 8000d18:	08010548 	.word	0x08010548
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	08010564 	.word	0x08010564
		  				{
		  					datos[i]=ModBUS_F03_Read(&mb_eth,i);
 8000d24:	7bfc      	ldrb	r4, [r7, #15]
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	48a7      	ldr	r0, [pc, #668]	; (8000fc8 <main+0x934>)
 8000d2c:	f00a fee7 	bl	800bafe <ModBUS_F03_Read>
 8000d30:	4603      	mov	r3, r0
 8000d32:	461a      	mov	r2, r3
 8000d34:	4ba5      	ldr	r3, [pc, #660]	; (8000fcc <main+0x938>)
 8000d36:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		  				for(uint8_t i=0;i<=16;i++)
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	2b10      	cmp	r3, #16
 8000d44:	d9ee      	bls.n	8000d24 <main+0x690>
		  				}

		  				if(httpPOST2(ENDPOINT, SERVER_IP,PORT,&datos,16,TEST_2,post, body, 512))
 8000d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d4a:	9304      	str	r3, [sp, #16]
 8000d4c:	4ba0      	ldr	r3, [pc, #640]	; (8000fd0 <main+0x93c>)
 8000d4e:	9303      	str	r3, [sp, #12]
 8000d50:	4ba0      	ldr	r3, [pc, #640]	; (8000fd4 <main+0x940>)
 8000d52:	9302      	str	r3, [sp, #8]
 8000d54:	2302      	movs	r3, #2
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	2310      	movs	r3, #16
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	4b9b      	ldr	r3, [pc, #620]	; (8000fcc <main+0x938>)
 8000d5e:	4a9e      	ldr	r2, [pc, #632]	; (8000fd8 <main+0x944>)
 8000d60:	499e      	ldr	r1, [pc, #632]	; (8000fdc <main+0x948>)
 8000d62:	489f      	ldr	r0, [pc, #636]	; (8000fe0 <main+0x94c>)
 8000d64:	f00a fc98 	bl	800b698 <httpPOST2>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d020      	beq.n	8000db0 <main+0x71c>
		  				{
  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000d6e:	4899      	ldr	r0, [pc, #612]	; (8000fd4 <main+0x940>)
 8000d70:	f7ff fa40 	bl	80001f4 <strlen>
 8000d74:	4603      	mov	r3, r0
 8000d76:	461a      	mov	r2, r3
 8000d78:	2341      	movs	r3, #65	; 0x41
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4995      	ldr	r1, [pc, #596]	; (8000fd4 <main+0x940>)
 8000d80:	4898      	ldr	r0, [pc, #608]	; (8000fe4 <main+0x950>)
 8000d82:	f00e f89d 	bl	800eec0 <CopiaVector>
  							wf._n_D2SND=strlen(post);
 8000d86:	4893      	ldr	r0, [pc, #588]	; (8000fd4 <main+0x940>)
 8000d88:	f7ff fa34 	bl	80001f4 <strlen>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b95      	ldr	r3, [pc, #596]	; (8000fe8 <main+0x954>)
 8000d92:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d96:	4b94      	ldr	r3, [pc, #592]	; (8000fe8 <main+0x954>)
 8000d98:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d807      	bhi.n	8000db0 <main+0x71c>
  							{
  								EnviarDatos(&wf);
 8000da0:	4891      	ldr	r0, [pc, #580]	; (8000fe8 <main+0x954>)
 8000da2:	f005 fc8d 	bl	80066c0 <EnviarDatos>
  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000da6:	4b90      	ldr	r3, [pc, #576]	; (8000fe8 <main+0x954>)
 8000da8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000dac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		  				}*/
		  			}
		  	  }
		  /**************[ FIN PIDO ENVIAR DATOS ]**************/

		  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000db0:	4b8e      	ldr	r3, [pc, #568]	; (8000fec <main+0x958>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d003      	beq.n	8000dc0 <main+0x72c>
 8000db8:	4b8d      	ldr	r3, [pc, #564]	; (8000ff0 <main+0x95c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d175      	bne.n	8000eac <main+0x818>
		  		{
		  			if(FLAG_UART1==1)
 8000dc0:	4b8a      	ldr	r3, [pc, #552]	; (8000fec <main+0x958>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d11c      	bne.n	8000e02 <main+0x76e>
		  				{
		  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000dc8:	4b8a      	ldr	r3, [pc, #552]	; (8000ff4 <main+0x960>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b8a      	ldr	r3, [pc, #552]	; (8000ff8 <main+0x964>)
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	498a      	ldr	r1, [pc, #552]	; (8000ffc <main+0x968>)
 8000dd4:	488a      	ldr	r0, [pc, #552]	; (8001000 <main+0x96c>)
 8000dd6:	f00e f873 	bl	800eec0 <CopiaVector>
		  					FLAG_UART1=0;
 8000dda:	4b84      	ldr	r3, [pc, #528]	; (8000fec <main+0x958>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]

		  						if (error_rxdata==3)
 8000de0:	4b88      	ldr	r3, [pc, #544]	; (8001004 <main+0x970>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	d102      	bne.n	8000dee <main+0x75a>
		  						{
		  							error_rxdata=0;
 8000de8:	4b86      	ldr	r3, [pc, #536]	; (8001004 <main+0x970>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
		  						}
		  						if (error_rxdata==1)
 8000dee:	4b85      	ldr	r3, [pc, #532]	; (8001004 <main+0x970>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d105      	bne.n	8000e02 <main+0x76e>
		  						{
		  							error_rxdata=5;
 8000df6:	4b83      	ldr	r3, [pc, #524]	; (8001004 <main+0x970>)
 8000df8:	2205      	movs	r2, #5
 8000dfa:	701a      	strb	r2, [r3, #0]
		  							error_rxdata=0;
 8000dfc:	4b81      	ldr	r3, [pc, #516]	; (8001004 <main+0x970>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
		  						}
		  				}
		  			if(FLAG_TIMEOUT==1)
 8000e02:	4b7b      	ldr	r3, [pc, #492]	; (8000ff0 <main+0x95c>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d102      	bne.n	8000e10 <main+0x77c>
		  					{
		  						FLAG_TIMEOUT=0;
 8000e0a:	4b79      	ldr	r3, [pc, #484]	; (8000ff0 <main+0x95c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
		  					}

		  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000e10:	4b7d      	ldr	r3, [pc, #500]	; (8001008 <main+0x974>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d149      	bne.n	8000eac <main+0x818>
		  				{
		  					/*************** Copio y proceso info recibida ***************/
		  					wf._n_orig=UART_RX_items;
 8000e18:	4b76      	ldr	r3, [pc, #472]	; (8000ff4 <main+0x960>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a72      	ldr	r2, [pc, #456]	; (8000fe8 <main+0x954>)
 8000e1e:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
		  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000e22:	4b74      	ldr	r3, [pc, #464]	; (8000ff4 <main+0x960>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4b74      	ldr	r3, [pc, #464]	; (8000ff8 <main+0x964>)
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	4973      	ldr	r1, [pc, #460]	; (8000ffc <main+0x968>)
 8000e2e:	4874      	ldr	r0, [pc, #464]	; (8001000 <main+0x96c>)
 8000e30:	f00e f846 	bl	800eec0 <CopiaVector>
		  					resultado=AT_ESP8266_ND(&wf);
 8000e34:	486c      	ldr	r0, [pc, #432]	; (8000fe8 <main+0x954>)
 8000e36:	f005 fd29 	bl	800688c <AT_ESP8266_ND>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b73      	ldr	r3, [pc, #460]	; (800100c <main+0x978>)
 8000e40:	701a      	strb	r2, [r3, #0]

		  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

		  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000e42:	4b69      	ldr	r3, [pc, #420]	; (8000fe8 <main+0x954>)
 8000e44:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d12f      	bne.n	8000eac <main+0x818>
 8000e4c:	4b66      	ldr	r3, [pc, #408]	; (8000fe8 <main+0x954>)
 8000e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e52:	2b63      	cmp	r3, #99	; 0x63
 8000e54:	d12a      	bne.n	8000eac <main+0x818>
		  					{

		  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000e56:	4b64      	ldr	r3, [pc, #400]	; (8000fe8 <main+0x954>)
 8000e58:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000e5c:	2341      	movs	r3, #65	; 0x41
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2300      	movs	r3, #0
 8000e62:	496b      	ldr	r1, [pc, #428]	; (8001010 <main+0x97c>)
 8000e64:	486b      	ldr	r0, [pc, #428]	; (8001014 <main+0x980>)
 8000e66:	f00e f82b 	bl	800eec0 <CopiaVector>
		  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000e6a:	4b5f      	ldr	r3, [pc, #380]	; (8000fe8 <main+0x954>)
 8000e6c:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000e70:	4a69      	ldr	r2, [pc, #420]	; (8001018 <main+0x984>)
 8000e72:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

		  						ModBUS(&mb_wf);
 8000e76:	4868      	ldr	r0, [pc, #416]	; (8001018 <main+0x984>)
 8000e78:	f00a fec6 	bl	800bc08 <ModBUS>

		  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000e7c:	4b66      	ldr	r3, [pc, #408]	; (8001018 <main+0x984>)
 8000e7e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000e82:	2341      	movs	r3, #65	; 0x41
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2300      	movs	r3, #0
 8000e88:	4964      	ldr	r1, [pc, #400]	; (800101c <main+0x988>)
 8000e8a:	4856      	ldr	r0, [pc, #344]	; (8000fe4 <main+0x950>)
 8000e8c:	f00e f818 	bl	800eec0 <CopiaVector>
		  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000e90:	4b61      	ldr	r3, [pc, #388]	; (8001018 <main+0x984>)
 8000e92:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000e96:	4a54      	ldr	r2, [pc, #336]	; (8000fe8 <main+0x954>)
 8000e98:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
		  						wf._new_data_rcv=0;//
 8000e9c:	4b52      	ldr	r3, [pc, #328]	; (8000fe8 <main+0x954>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
		  						wf._send_data=1;
 8000ea4:	4b50      	ldr	r3, [pc, #320]	; (8000fe8 <main+0x954>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
		  						}
		  					}

		  		}

		  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000eac:	4b56      	ldr	r3, [pc, #344]	; (8001008 <main+0x974>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d108      	bne.n	8000ec6 <main+0x832>
		  			{
		  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	495a      	ldr	r1, [pc, #360]	; (8001020 <main+0x98c>)
 8000eb8:	484b      	ldr	r0, [pc, #300]	; (8000fe8 <main+0x954>)
 8000eba:	f008 ff7f 	bl	8009dbc <WiFi_Conn_ND>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b58      	ldr	r3, [pc, #352]	; (8001024 <main+0x990>)
 8000ec4:	701a      	strb	r2, [r3, #0]

		  			}
		  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000ec6:	4b58      	ldr	r3, [pc, #352]	; (8001028 <main+0x994>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d10e      	bne.n	8000eec <main+0x858>
		  			{

		  				HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Resetting \r\n",strlen("\r\n ESP HW Resetting \r\n"));
 8000ece:	2216      	movs	r2, #22
 8000ed0:	4956      	ldr	r1, [pc, #344]	; (800102c <main+0x998>)
 8000ed2:	4857      	ldr	r0, [pc, #348]	; (8001030 <main+0x99c>)
 8000ed4:	f004 fb32 	bl	800553c <HAL_UART_Transmit_IT>
		  				HW_RESET(&wf);
 8000ed8:	4843      	ldr	r0, [pc, #268]	; (8000fe8 <main+0x954>)
 8000eda:	f005 fb03 	bl	80064e4 <HW_RESET>
		  				HAL_Delay(5000);//210419
 8000ede:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ee2:	f001 fde5 	bl	8002ab0 <HAL_Delay>
		  				esp_restart=0;
 8000ee6:	4b50      	ldr	r3, [pc, #320]	; (8001028 <main+0x994>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
		  			}
		  		if(eth_reset==1)
 8000eec:	4b51      	ldr	r3, [pc, #324]	; (8001034 <main+0x9a0>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	f47f ae9d 	bne.w	8000c30 <main+0x59c>
		  		{

		  		  SPI_ETH_PHY_RESET(&ETH);
 8000ef6:	4850      	ldr	r0, [pc, #320]	; (8001038 <main+0x9a4>)
 8000ef8:	f00c f88c 	bl	800d014 <SPI_ETH_PHY_RESET>
		  		  HAL_UART_Transmit_IT(&huart2,"\r\n PHY RESET \r\n",strlen("\r\n PHY RESET \r\n"));
 8000efc:	220f      	movs	r2, #15
 8000efe:	494f      	ldr	r1, [pc, #316]	; (800103c <main+0x9a8>)
 8000f00:	484b      	ldr	r0, [pc, #300]	; (8001030 <main+0x99c>)
 8000f02:	f004 fb1b 	bl	800553c <HAL_UART_Transmit_IT>
		  	      HAL_Delay(800);
 8000f06:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000f0a:	f001 fdd1 	bl	8002ab0 <HAL_Delay>
		  	      eth_init(&ETH);
 8000f0e:	484a      	ldr	r0, [pc, #296]	; (8001038 <main+0x9a4>)
 8000f10:	f00c fa6a 	bl	800d3e8 <eth_init>
		  	      HAL_UART_Transmit_IT(&huart2,"\r\n ETH INIT \r\n",strlen("\r\n ETH INIT \r\n"));
 8000f14:	220e      	movs	r2, #14
 8000f16:	494a      	ldr	r1, [pc, #296]	; (8001040 <main+0x9ac>)
 8000f18:	4845      	ldr	r0, [pc, #276]	; (8001030 <main+0x99c>)
 8000f1a:	f004 fb0f 	bl	800553c <HAL_UART_Transmit_IT>
		  	      SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000f1e:	4946      	ldr	r1, [pc, #280]	; (8001038 <main+0x9a4>)
 8000f20:	4848      	ldr	r0, [pc, #288]	; (8001044 <main+0x9b0>)
 8000f22:	f00c fde6 	bl	800daf2 <SPI_ETH_SNIFF>
		  	      HAL_Delay(800);
 8000f26:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000f2a:	f001 fdc1 	bl	8002ab0 <HAL_Delay>
		  	   	  eth_socket_init(&ETH,S0_REG);
 8000f2e:	2101      	movs	r1, #1
 8000f30:	4841      	ldr	r0, [pc, #260]	; (8001038 <main+0x9a4>)
 8000f32:	f00c fb2b 	bl	800d58c <eth_socket_init>
		  	   	  HAL_UART_Transmit_IT(&huart2,"\r\n ETH SOCKET INIT \r\n",strlen("\r\n ETH SOCKET INIT \r\n"));
 8000f36:	2215      	movs	r2, #21
 8000f38:	4943      	ldr	r1, [pc, #268]	; (8001048 <main+0x9b4>)
 8000f3a:	483d      	ldr	r0, [pc, #244]	; (8001030 <main+0x99c>)
 8000f3c:	f004 fafe 	bl	800553c <HAL_UART_Transmit_IT>

		  		 uint16_t b=0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	817b      	strh	r3, [r7, #10]
		  		 uint8_t spi_Data[2];
		  		 b = SPI_ETH_REG(&ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 8000f44:	2302      	movs	r3, #2
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2124      	movs	r1, #36	; 0x24
 8000f52:	4839      	ldr	r0, [pc, #228]	; (8001038 <main+0x9a4>)
 8000f54:	f00c f8b5 	bl	800d0c2 <SPI_ETH_REG>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	817b      	strh	r3, [r7, #10]

		  		 eth_wr_SOCKET_MODE(&ETH,S0_REG,MODE_TCP);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2101      	movs	r1, #1
 8000f60:	4835      	ldr	r0, [pc, #212]	; (8001038 <main+0x9a4>)
 8000f62:	f00c fa1f 	bl	800d3a4 <eth_wr_SOCKET_MODE>
		  	   	 SPI_ETH_REG(&ETH, S_DIPR, S0_REG,SPI_WRITE, ETH.S_DIPR,4);									// client
 8000f66:	2304      	movs	r3, #4
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	4b38      	ldr	r3, [pc, #224]	; (800104c <main+0x9b8>)
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	2201      	movs	r2, #1
 8000f72:	210c      	movs	r1, #12
 8000f74:	4830      	ldr	r0, [pc, #192]	; (8001038 <main+0x9a4>)
 8000f76:	f00c f8a4 	bl	800d0c2 <SPI_ETH_REG>
		  	   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 8000f7a:	212e      	movs	r1, #46	; 0x2e
 8000f7c:	4834      	ldr	r0, [pc, #208]	; (8001050 <main+0x9bc>)
 8000f7e:	f000 fa81 	bl	8001484 <ITM0_Write>
		  	   	 SPI_ETH_REG(&ETH, S_DPORT, S0_REG,SPI_WRITE, ETH.S_DPORT,2);									// client
 8000f82:	2302      	movs	r3, #2
 8000f84:	9301      	str	r3, [sp, #4]
 8000f86:	4b33      	ldr	r3, [pc, #204]	; (8001054 <main+0x9c0>)
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2110      	movs	r1, #16
 8000f90:	4829      	ldr	r0, [pc, #164]	; (8001038 <main+0x9a4>)
 8000f92:	f00c f896 	bl	800d0c2 <SPI_ETH_REG>
		  	   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 8000f96:	2120      	movs	r1, #32
 8000f98:	482f      	ldr	r0, [pc, #188]	; (8001058 <main+0x9c4>)
 8000f9a:	f000 fa73 	bl	8001484 <ITM0_Write>

		  	   	 HAL_Delay(800);
 8000f9e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000fa2:	f001 fd85 	bl	8002ab0 <HAL_Delay>
		  	   	  eth_wr_SOCKET_CMD(&ETH, S0_REG ,OPEN );
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4823      	ldr	r0, [pc, #140]	; (8001038 <main+0x9a4>)
 8000fac:	f00c f9d8 	bl	800d360 <eth_wr_SOCKET_CMD>
		  	   	  HAL_UART_Transmit_IT(&huart2,"\r\n ETH OPEN \r\n",strlen("\r\n ETH OPEN \r\n"));
 8000fb0:	220e      	movs	r2, #14
 8000fb2:	492a      	ldr	r1, [pc, #168]	; (800105c <main+0x9c8>)
 8000fb4:	481e      	ldr	r0, [pc, #120]	; (8001030 <main+0x99c>)
 8000fb6:	f004 fac1 	bl	800553c <HAL_UART_Transmit_IT>
		  	   	  ETH.ETH_WDG=0;
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <main+0x9a4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	829a      	strh	r2, [r3, #20]
		  	   	  eth_reset=0;
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <main+0x9a0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
		 SPI_READ_EN=1;
 8000fc6:	e633      	b.n	8000c30 <main+0x59c>
 8000fc8:	20003124 	.word	0x20003124
 8000fcc:	20000024 	.word	0x20000024
 8000fd0:	20003fc4 	.word	0x20003fc4
 8000fd4:	20003dc4 	.word	0x20003dc4
 8000fd8:	2000001c 	.word	0x2000001c
 8000fdc:	2000000c 	.word	0x2000000c
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	20002668 	.word	0x20002668
 8000fe8:	200023d4 	.word	0x200023d4
 8000fec:	2000421b 	.word	0x2000421b
 8000ff0:	2000421a 	.word	0x2000421a
 8000ff4:	20004630 	.word	0x20004630
 8000ff8:	20004628 	.word	0x20004628
 8000ffc:	20004428 	.word	0x20004428
 8001000:	20002a68 	.word	0x20002a68
 8001004:	2000421e 	.word	0x2000421e
 8001008:	20004217 	.word	0x20004217
 800100c:	2000421d 	.word	0x2000421d
 8001010:	20002468 	.word	0x20002468
 8001014:	20003786 	.word	0x20003786
 8001018:	20003774 	.word	0x20003774
 800101c:	2000398c 	.word	0x2000398c
 8001020:	20000274 	.word	0x20000274
 8001024:	20004220 	.word	0x20004220
 8001028:	2000421f 	.word	0x2000421f
 800102c:	08010588 	.word	0x08010588
 8001030:	200002b8 	.word	0x200002b8
 8001034:	2000421c 	.word	0x2000421c
 8001038:	20000304 	.word	0x20000304
 800103c:	080105a0 	.word	0x080105a0
 8001040:	080105b0 	.word	0x080105b0
 8001044:	20001378 	.word	0x20001378
 8001048:	080105c0 	.word	0x080105c0
 800104c:	20001348 	.word	0x20001348
 8001050:	0801049c 	.word	0x0801049c
 8001054:	2000134c 	.word	0x2000134c
 8001058:	080104cc 	.word	0x080104cc
 800105c:	080105d8 	.word	0x080105d8

08001060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b094      	sub	sp, #80	; 0x50
 8001064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	2230      	movs	r2, #48	; 0x30
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f00e f915 	bl	800f29e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	4b27      	ldr	r3, [pc, #156]	; (8001128 <SystemClock_Config+0xc8>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	4a26      	ldr	r2, [pc, #152]	; (8001128 <SystemClock_Config+0xc8>)
 800108e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001092:	6413      	str	r3, [r2, #64]	; 0x40
 8001094:	4b24      	ldr	r3, [pc, #144]	; (8001128 <SystemClock_Config+0xc8>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	4b21      	ldr	r3, [pc, #132]	; (800112c <SystemClock_Config+0xcc>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a20      	ldr	r2, [pc, #128]	; (800112c <SystemClock_Config+0xcc>)
 80010aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	4b1e      	ldr	r3, [pc, #120]	; (800112c <SystemClock_Config+0xcc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010bc:	2301      	movs	r3, #1
 80010be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c6:	2302      	movs	r3, #2
 80010c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80010d0:	230c      	movs	r3, #12
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80010d4:	2360      	movs	r3, #96	; 0x60
 80010d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d8:	2302      	movs	r3, #2
 80010da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010dc:	2304      	movs	r3, #4
 80010de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e0:	f107 0320 	add.w	r3, r7, #32
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 f979 	bl	80033dc <HAL_RCC_OscConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f0:	f001 f9ca 	bl	8002488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f4:	230f      	movs	r3, #15
 80010f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f8:	2302      	movs	r3, #2
 80010fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001104:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	2103      	movs	r1, #3
 8001110:	4618      	mov	r0, r3
 8001112:	f002 fbdb 	bl	80038cc <HAL_RCC_ClockConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800111c:	f001 f9b4 	bl	8002488 <Error_Handler>
  }
}
 8001120:	bf00      	nop
 8001122:	3750      	adds	r7, #80	; 0x50
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40023800 	.word	0x40023800
 800112c:	40007000 	.word	0x40007000

08001130 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_SPI1_Init+0x64>)
 8001136:	4a18      	ldr	r2, [pc, #96]	; (8001198 <MX_SPI1_Init+0x68>)
 8001138:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_SPI1_Init+0x64>)
 800113c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001140:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_SPI1_Init+0x64>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <MX_SPI1_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <MX_SPI1_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_SPI1_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800115a:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <MX_SPI1_Init+0x64>)
 800115c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001160:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_SPI1_Init+0x64>)
 8001164:	2208      	movs	r2, #8
 8001166:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <MX_SPI1_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_SPI1_Init+0x64>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <MX_SPI1_Init+0x64>)
 8001176:	2200      	movs	r2, #0
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_SPI1_Init+0x64>)
 800117c:	220a      	movs	r2, #10
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_SPI1_Init+0x64>)
 8001182:	f002 fd83 	bl	8003c8c <HAL_SPI_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800118c:	f001 f97c 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200001d4 	.word	0x200001d4
 8001198:	40013000 	.word	0x40013000

0800119c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08e      	sub	sp, #56	; 0x38
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	f107 0320 	add.w	r3, r7, #32
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
 80011c8:	615a      	str	r2, [r3, #20]
 80011ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011cc:	4b2f      	ldr	r3, [pc, #188]	; (800128c <MX_TIM2_Init+0xf0>)
 80011ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 80011d4:	4b2d      	ldr	r3, [pc, #180]	; (800128c <MX_TIM2_Init+0xf0>)
 80011d6:	2264      	movs	r2, #100	; 0x64
 80011d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b2c      	ldr	r3, [pc, #176]	; (800128c <MX_TIM2_Init+0xf0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80011e0:	4b2a      	ldr	r3, [pc, #168]	; (800128c <MX_TIM2_Init+0xf0>)
 80011e2:	2264      	movs	r2, #100	; 0x64
 80011e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e6:	4b29      	ldr	r3, [pc, #164]	; (800128c <MX_TIM2_Init+0xf0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ec:	4b27      	ldr	r3, [pc, #156]	; (800128c <MX_TIM2_Init+0xf0>)
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011f2:	4826      	ldr	r0, [pc, #152]	; (800128c <MX_TIM2_Init+0xf0>)
 80011f4:	f003 f840 	bl	8004278 <HAL_TIM_Base_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80011fe:	f001 f943 	bl	8002488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001208:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120c:	4619      	mov	r1, r3
 800120e:	481f      	ldr	r0, [pc, #124]	; (800128c <MX_TIM2_Init+0xf0>)
 8001210:	f003 fc48 	bl	8004aa4 <HAL_TIM_ConfigClockSource>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800121a:	f001 f935 	bl	8002488 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800121e:	481b      	ldr	r0, [pc, #108]	; (800128c <MX_TIM2_Init+0xf0>)
 8001220:	f003 f879 	bl	8004316 <HAL_TIM_OC_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800122a:	f001 f92d 	bl	8002488 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 800122e:	2108      	movs	r1, #8
 8001230:	4816      	ldr	r0, [pc, #88]	; (800128c <MX_TIM2_Init+0xf0>)
 8001232:	f003 fa79 	bl	8004728 <HAL_TIM_OnePulse_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 800123c:	f001 f924 	bl	8002488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001248:	f107 0320 	add.w	r3, r7, #32
 800124c:	4619      	mov	r1, r3
 800124e:	480f      	ldr	r0, [pc, #60]	; (800128c <MX_TIM2_Init+0xf0>)
 8001250:	f003 ffe4 	bl	800521c <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 800125a:	f001 f915 	bl	8002488 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 800125e:	2320      	movs	r3, #32
 8001260:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	2200      	movs	r2, #0
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_TIM2_Init+0xf0>)
 8001276:	f003 fbb9 	bl	80049ec <HAL_TIM_OC_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001280:	f001 f902 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	3738      	adds	r7, #56	; 0x38
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2000022c 	.word	0x2000022c

08001290 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 8001296:	4a12      	ldr	r2, [pc, #72]	; (80012e0 <MX_USART1_UART_Init+0x50>)
 8001298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 800129c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012b6:	220c      	movs	r2, #12
 80012b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_USART1_UART_Init+0x4c>)
 80012c8:	f004 f82a 	bl	8005320 <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012d2:	f001 f8d9 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000274 	.word	0x20000274
 80012e0:	40011000 	.word	0x40011000

080012e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <MX_USART2_UART_Init+0x50>)
 80012ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 800130a:	220c      	movs	r2, #12
 800130c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_USART2_UART_Init+0x4c>)
 800131c:	f004 f800 	bl	8005320 <HAL_UART_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001326:	f001 f8af 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200002b8 	.word	0x200002b8
 8001334:	40004400 	.word	0x40004400

08001338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b48      	ldr	r3, [pc, #288]	; (8001474 <MX_GPIO_Init+0x13c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a47      	ldr	r2, [pc, #284]	; (8001474 <MX_GPIO_Init+0x13c>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b45      	ldr	r3, [pc, #276]	; (8001474 <MX_GPIO_Init+0x13c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b41      	ldr	r3, [pc, #260]	; (8001474 <MX_GPIO_Init+0x13c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a40      	ldr	r2, [pc, #256]	; (8001474 <MX_GPIO_Init+0x13c>)
 8001374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b3e      	ldr	r3, [pc, #248]	; (8001474 <MX_GPIO_Init+0x13c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <MX_GPIO_Init+0x13c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a39      	ldr	r2, [pc, #228]	; (8001474 <MX_GPIO_Init+0x13c>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b37      	ldr	r3, [pc, #220]	; (8001474 <MX_GPIO_Init+0x13c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b33      	ldr	r3, [pc, #204]	; (8001474 <MX_GPIO_Init+0x13c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a32      	ldr	r2, [pc, #200]	; (8001474 <MX_GPIO_Init+0x13c>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b30      	ldr	r3, [pc, #192]	; (8001474 <MX_GPIO_Init+0x13c>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c4:	482c      	ldr	r0, [pc, #176]	; (8001478 <MX_GPIO_Init+0x140>)
 80013c6:	f001 ffd5 	bl	8003374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|WiFi_EN_Pin, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	f44f 7188 	mov.w	r1, #272	; 0x110
 80013d0:	482a      	ldr	r0, [pc, #168]	; (800147c <MX_GPIO_Init+0x144>)
 80013d2:	f001 ffcf 	bl	8003374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	2101      	movs	r1, #1
 80013da:	4829      	ldr	r0, [pc, #164]	; (8001480 <MX_GPIO_Init+0x148>)
 80013dc:	f001 ffca 	bl	8003374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80013e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	481f      	ldr	r0, [pc, #124]	; (8001478 <MX_GPIO_Init+0x140>)
 80013fa:	f001 fd53 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 80013fe:	2301      	movs	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	481a      	ldr	r0, [pc, #104]	; (800147c <MX_GPIO_Init+0x144>)
 8001412:	f001 fd47 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8001416:	2310      	movs	r3, #16
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4813      	ldr	r0, [pc, #76]	; (800147c <MX_GPIO_Init+0x144>)
 800142e:	f001 fd39 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_RST_Pin */
  GPIO_InitStruct.Pin = SPI_RST_Pin;
 8001432:	2301      	movs	r3, #1
 8001434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_RST_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4619      	mov	r1, r3
 8001448:	480d      	ldr	r0, [pc, #52]	; (8001480 <MX_GPIO_Init+0x148>)
 800144a:	f001 fd2b 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WiFi_EN_Pin */
  GPIO_InitStruct.Pin = WiFi_EN_Pin;
 800144e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WiFi_EN_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_GPIO_Init+0x144>)
 8001468:	f001 fd1c 	bl	8002ea4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	; 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	40020800 	.word	0x40020800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400

08001484 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	e009      	b.n	80014a8 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f8d1 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbf1      	blt.n	8001494 <ITM0_Write+0x10>
  }
  return len;
 80014b0:	683b      	ldr	r3, [r7, #0]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <SysTick_Handler>:

void SysTick_Handler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80014c2:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */
	unsigned char text[512];
	int ns=0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	ms_ticks++;	//100 ms
 80014ca:	4b68      	ldr	r3, [pc, #416]	; (800166c <SysTick_Handler+0x1b0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	3301      	adds	r3, #1
 80014d0:	4a66      	ldr	r2, [pc, #408]	; (800166c <SysTick_Handler+0x1b0>)
 80014d2:	6013      	str	r3, [r2, #0]

	if(wf._estado_conexion!=ESPstate)
 80014d4:	4b66      	ldr	r3, [pc, #408]	; (8001670 <SysTick_Handler+0x1b4>)
 80014d6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80014da:	4b66      	ldr	r3, [pc, #408]	; (8001674 <SysTick_Handler+0x1b8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d015      	beq.n	800150e <SysTick_Handler+0x52>
	{
		ESPstate=wf._estado_conexion;
 80014e2:	4b63      	ldr	r3, [pc, #396]	; (8001670 <SysTick_Handler+0x1b4>)
 80014e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014e8:	4a62      	ldr	r2, [pc, #392]	; (8001674 <SysTick_Handler+0x1b8>)
 80014ea:	6013      	str	r3, [r2, #0]
		ns=INTOA(ESPstate,text);
 80014ec:	4b61      	ldr	r3, [pc, #388]	; (8001674 <SysTick_Handler+0x1b8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	463a      	mov	r2, r7
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f00d fc5f 	bl	800edb8 <INTOA>
 80014fa:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
		HAL_UART_Transmit_IT(&huart2,&text,ns);
 80014fe:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001502:	b29a      	uxth	r2, r3
 8001504:	463b      	mov	r3, r7
 8001506:	4619      	mov	r1, r3
 8001508:	485b      	ldr	r0, [pc, #364]	; (8001678 <SysTick_Handler+0x1bc>)
 800150a:	f004 f817 	bl	800553c <HAL_UART_Transmit_IT>

	}

	ESP_ticks++;
 800150e:	4b5b      	ldr	r3, [pc, #364]	; (800167c <SysTick_Handler+0x1c0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	4a59      	ldr	r2, [pc, #356]	; (800167c <SysTick_Handler+0x1c0>)
 8001516:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 8001518:	4b59      	ldr	r3, [pc, #356]	; (8001680 <SysTick_Handler+0x1c4>)
 800151a:	7a1b      	ldrb	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d004      	beq.n	800152a <SysTick_Handler+0x6e>
 8001520:	4b58      	ldr	r3, [pc, #352]	; (8001684 <SysTick_Handler+0x1c8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3301      	adds	r3, #1
 8001526:	4a57      	ldr	r2, [pc, #348]	; (8001684 <SysTick_Handler+0x1c8>)
 8001528:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 800152a:	4b55      	ldr	r3, [pc, #340]	; (8001680 <SysTick_Handler+0x1c4>)
 800152c:	7a1b      	ldrb	r3, [r3, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00c      	beq.n	800154c <SysTick_Handler+0x90>
 8001532:	4b53      	ldr	r3, [pc, #332]	; (8001680 <SysTick_Handler+0x1c4>)
 8001534:	88db      	ldrh	r3, [r3, #6]
 8001536:	461a      	mov	r2, r3
 8001538:	4b52      	ldr	r3, [pc, #328]	; (8001684 <SysTick_Handler+0x1c8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	da05      	bge.n	800154c <SysTick_Handler+0x90>
		{
			mb_eth._w_answer=0;
 8001540:	4b4f      	ldr	r3, [pc, #316]	; (8001680 <SysTick_Handler+0x1c4>)
 8001542:	2200      	movs	r2, #0
 8001544:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 8001546:	4b4f      	ldr	r3, [pc, #316]	; (8001684 <SysTick_Handler+0x1c8>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
		}
	}*/
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 800154c:	4b48      	ldr	r3, [pc, #288]	; (8001670 <SysTick_Handler+0x1b4>)
 800154e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001552:	f240 2261 	movw	r2, #609	; 0x261
 8001556:	4293      	cmp	r3, r2
 8001558:	d005      	beq.n	8001566 <SysTick_Handler+0xaa>
 800155a:	4b45      	ldr	r3, [pc, #276]	; (8001670 <SysTick_Handler+0x1b4>)
 800155c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001560:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001564:	d109      	bne.n	800157a <SysTick_Handler+0xbe>
 8001566:	4b42      	ldr	r3, [pc, #264]	; (8001670 <SysTick_Handler+0x1b4>)
 8001568:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800156c:	2b00      	cmp	r3, #0
 800156e:	d104      	bne.n	800157a <SysTick_Handler+0xbe>
 8001570:	4b45      	ldr	r3, [pc, #276]	; (8001688 <SysTick_Handler+0x1cc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	3301      	adds	r3, #1
 8001576:	4a44      	ldr	r2, [pc, #272]	; (8001688 <SysTick_Handler+0x1cc>)
 8001578:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 5000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;					//230517 wf_snd_flag_ticks>= 2000
 800157a:	4b43      	ldr	r3, [pc, #268]	; (8001688 <SysTick_Handler+0x1cc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001582:	4293      	cmp	r3, r2
 8001584:	dd0c      	ble.n	80015a0 <SysTick_Handler+0xe4>
 8001586:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <SysTick_Handler+0x1b4>)
 8001588:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 800158c:	2b01      	cmp	r3, #1
 800158e:	d007      	beq.n	80015a0 <SysTick_Handler+0xe4>
 8001590:	4b37      	ldr	r3, [pc, #220]	; (8001670 <SysTick_Handler+0x1b4>)
 8001592:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <SysTick_Handler+0xe4>
 800159a:	4b3c      	ldr	r3, [pc, #240]	; (800168c <SysTick_Handler+0x1d0>)
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S_status == 0)
 80015a0:	4b3b      	ldr	r3, [pc, #236]	; (8001690 <SysTick_Handler+0x1d4>)
 80015a2:	7d9b      	ldrb	r3, [r3, #22]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d111      	bne.n	80015cc <SysTick_Handler+0x110>
	{
		ETH.ETH_WDG++;
 80015a8:	4b39      	ldr	r3, [pc, #228]	; (8001690 <SysTick_Handler+0x1d4>)
 80015aa:	8a9b      	ldrh	r3, [r3, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	4b37      	ldr	r3, [pc, #220]	; (8001690 <SysTick_Handler+0x1d4>)
 80015b2:	829a      	strh	r2, [r3, #20]
		if (ETH.ETH_WDG>=64000)
 80015b4:	4b36      	ldr	r3, [pc, #216]	; (8001690 <SysTick_Handler+0x1d4>)
 80015b6:	8a9b      	ldrh	r3, [r3, #20]
 80015b8:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80015bc:	d306      	bcc.n	80015cc <SysTick_Handler+0x110>
		{
			eth_reset=1;
 80015be:	4b35      	ldr	r3, [pc, #212]	; (8001694 <SysTick_Handler+0x1d8>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
			ETH.ETH_WDG=64000;
 80015c4:	4b32      	ldr	r3, [pc, #200]	; (8001690 <SysTick_Handler+0x1d4>)
 80015c6:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80015ca:	829a      	strh	r2, [r3, #20]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 80015cc:	4b27      	ldr	r3, [pc, #156]	; (800166c <SysTick_Handler+0x1b0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b64      	cmp	r3, #100	; 0x64
 80015d2:	f040 84f0 	bne.w	8001fb6 <SysTick_Handler+0xafa>
  {
	  dbgn++;
 80015d6:	4b30      	ldr	r3, [pc, #192]	; (8001698 <SysTick_Handler+0x1dc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	4a2e      	ldr	r2, [pc, #184]	; (8001698 <SysTick_Handler+0x1dc>)
 80015de:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 80015e0:	4b22      	ldr	r3, [pc, #136]	; (800166c <SysTick_Handler+0x1b0>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 80015e6:	4b2d      	ldr	r3, [pc, #180]	; (800169c <SysTick_Handler+0x1e0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	4a2b      	ldr	r2, [pc, #172]	; (800169c <SysTick_Handler+0x1e0>)
 80015ee:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 80015f0:	4b2b      	ldr	r3, [pc, #172]	; (80016a0 <SysTick_Handler+0x1e4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80015f8:	d102      	bne.n	8001600 <SysTick_Handler+0x144>
 80015fa:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <SysTick_Handler+0x1e4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <SysTick_Handler+0x1e8>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d104      	bne.n	8001612 <SysTick_Handler+0x156>
 8001608:	4b25      	ldr	r3, [pc, #148]	; (80016a0 <SysTick_Handler+0x1e4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	4a24      	ldr	r2, [pc, #144]	; (80016a0 <SysTick_Handler+0x1e4>)
 8001610:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <SysTick_Handler+0x1e4>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b64      	cmp	r3, #100	; 0x64
 8001618:	d102      	bne.n	8001620 <SysTick_Handler+0x164>
 800161a:	4b22      	ldr	r3, [pc, #136]	; (80016a4 <SysTick_Handler+0x1e8>)
 800161c:	2201      	movs	r2, #1
 800161e:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 8001620:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <SysTick_Handler+0x1e8>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d104      	bne.n	8001632 <SysTick_Handler+0x176>
 8001628:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <SysTick_Handler+0x1e4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	3b01      	subs	r3, #1
 800162e:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <SysTick_Handler+0x1e4>)
 8001630:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 8001632:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <SysTick_Handler+0x1e4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <SysTick_Handler+0x184>
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <SysTick_Handler+0x1e8>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]


	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  if(spi_no_debug)
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <SysTick_Handler+0x1ec>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 84a6 	beq.w	8001f96 <SysTick_Handler+0xada>
	  	  {
	  if(SPI_READ_EN)
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <SysTick_Handler+0x1f0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 84a5 	beq.w	8001f9e <SysTick_Handler+0xae2>
	  {
	     ETH.S_status=eth_rd_SOCKET_STAT(&ETH,S0_REG);  //este era el bardo
 8001654:	2101      	movs	r1, #1
 8001656:	480e      	ldr	r0, [pc, #56]	; (8001690 <SysTick_Handler+0x1d4>)
 8001658:	f00c f8e0 	bl	800d81c <eth_rd_SOCKET_STAT>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <SysTick_Handler+0x1d4>)
 8001662:	759a      	strb	r2, [r3, #22]

		  switch(ETH.S_status)	//Check Socket status
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <SysTick_Handler+0x1d4>)
 8001666:	7d9b      	ldrb	r3, [r3, #22]
 8001668:	e022      	b.n	80016b0 <SysTick_Handler+0x1f4>
 800166a:	bf00      	nop
 800166c:	200002fc 	.word	0x200002fc
 8001670:	200023d4 	.word	0x200023d4
 8001674:	20004658 	.word	0x20004658
 8001678:	200002b8 	.word	0x200002b8
 800167c:	20004634 	.word	0x20004634
 8001680:	20003124 	.word	0x20003124
 8001684:	2000463c 	.word	0x2000463c
 8001688:	200041c8 	.word	0x200041c8
 800168c:	200041c5 	.word	0x200041c5
 8001690:	20000304 	.word	0x20000304
 8001694:	2000421c 	.word	0x2000421c
 8001698:	20004660 	.word	0x20004660
 800169c:	20000300 	.word	0x20000300
 80016a0:	20004638 	.word	0x20004638
 80016a4:	20004221 	.word	0x20004221
 80016a8:	20004214 	.word	0x20004214
 80016ac:	20004224 	.word	0x20004224
 80016b0:	2b5f      	cmp	r3, #95	; 0x5f
 80016b2:	f200 8479 	bhi.w	8001fa8 <SysTick_Handler+0xaec>
 80016b6:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <SysTick_Handler+0x200>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	0800183d 	.word	0x0800183d
 80016c0:	08001fa9 	.word	0x08001fa9
 80016c4:	08001fa9 	.word	0x08001fa9
 80016c8:	08001fa9 	.word	0x08001fa9
 80016cc:	08001fa9 	.word	0x08001fa9
 80016d0:	08001fa9 	.word	0x08001fa9
 80016d4:	08001fa9 	.word	0x08001fa9
 80016d8:	08001fa9 	.word	0x08001fa9
 80016dc:	08001fa9 	.word	0x08001fa9
 80016e0:	08001fa9 	.word	0x08001fa9
 80016e4:	08001fa9 	.word	0x08001fa9
 80016e8:	08001fa9 	.word	0x08001fa9
 80016ec:	08001fa9 	.word	0x08001fa9
 80016f0:	08001fa9 	.word	0x08001fa9
 80016f4:	08001fa9 	.word	0x08001fa9
 80016f8:	08001fa9 	.word	0x08001fa9
 80016fc:	08001fa9 	.word	0x08001fa9
 8001700:	08001fa9 	.word	0x08001fa9
 8001704:	08001fa9 	.word	0x08001fa9
 8001708:	08001863 	.word	0x08001863
 800170c:	080018e9 	.word	0x080018e9
 8001710:	08001913 	.word	0x08001913
 8001714:	0800193d 	.word	0x0800193d
 8001718:	08001967 	.word	0x08001967
 800171c:	08001d65 	.word	0x08001d65
 8001720:	08001fa9 	.word	0x08001fa9
 8001724:	08001d8f 	.word	0x08001d8f
 8001728:	08001e25 	.word	0x08001e25
 800172c:	08001e75 	.word	0x08001e75
 8001730:	08001ec5 	.word	0x08001ec5
 8001734:	08001fa9 	.word	0x08001fa9
 8001738:	08001fa9 	.word	0x08001fa9
 800173c:	08001fa9 	.word	0x08001fa9
 8001740:	08001fa9 	.word	0x08001fa9
 8001744:	08001eef 	.word	0x08001eef
 8001748:	08001fa9 	.word	0x08001fa9
 800174c:	08001fa9 	.word	0x08001fa9
 8001750:	08001fa9 	.word	0x08001fa9
 8001754:	08001fa9 	.word	0x08001fa9
 8001758:	08001fa9 	.word	0x08001fa9
 800175c:	08001fa9 	.word	0x08001fa9
 8001760:	08001fa9 	.word	0x08001fa9
 8001764:	08001fa9 	.word	0x08001fa9
 8001768:	08001fa9 	.word	0x08001fa9
 800176c:	08001fa9 	.word	0x08001fa9
 8001770:	08001fa9 	.word	0x08001fa9
 8001774:	08001fa9 	.word	0x08001fa9
 8001778:	08001fa9 	.word	0x08001fa9
 800177c:	08001fa9 	.word	0x08001fa9
 8001780:	08001fa9 	.word	0x08001fa9
 8001784:	08001f19 	.word	0x08001f19
 8001788:	08001fa9 	.word	0x08001fa9
 800178c:	08001fa9 	.word	0x08001fa9
 8001790:	08001fa9 	.word	0x08001fa9
 8001794:	08001fa9 	.word	0x08001fa9
 8001798:	08001fa9 	.word	0x08001fa9
 800179c:	08001fa9 	.word	0x08001fa9
 80017a0:	08001fa9 	.word	0x08001fa9
 80017a4:	08001fa9 	.word	0x08001fa9
 80017a8:	08001fa9 	.word	0x08001fa9
 80017ac:	08001fa9 	.word	0x08001fa9
 80017b0:	08001fa9 	.word	0x08001fa9
 80017b4:	08001fa9 	.word	0x08001fa9
 80017b8:	08001fa9 	.word	0x08001fa9
 80017bc:	08001fa9 	.word	0x08001fa9
 80017c0:	08001fa9 	.word	0x08001fa9
 80017c4:	08001f43 	.word	0x08001f43
 80017c8:	08001fa9 	.word	0x08001fa9
 80017cc:	08001fa9 	.word	0x08001fa9
 80017d0:	08001fa9 	.word	0x08001fa9
 80017d4:	08001fa9 	.word	0x08001fa9
 80017d8:	08001fa9 	.word	0x08001fa9
 80017dc:	08001fa9 	.word	0x08001fa9
 80017e0:	08001fa9 	.word	0x08001fa9
 80017e4:	08001fa9 	.word	0x08001fa9
 80017e8:	08001fa9 	.word	0x08001fa9
 80017ec:	08001fa9 	.word	0x08001fa9
 80017f0:	08001fa9 	.word	0x08001fa9
 80017f4:	08001fa9 	.word	0x08001fa9
 80017f8:	08001fa9 	.word	0x08001fa9
 80017fc:	08001fa9 	.word	0x08001fa9
 8001800:	08001fa9 	.word	0x08001fa9
 8001804:	08001fa9 	.word	0x08001fa9
 8001808:	08001fa9 	.word	0x08001fa9
 800180c:	08001fa9 	.word	0x08001fa9
 8001810:	08001fa9 	.word	0x08001fa9
 8001814:	08001fa9 	.word	0x08001fa9
 8001818:	08001fa9 	.word	0x08001fa9
 800181c:	08001fa9 	.word	0x08001fa9
 8001820:	08001fa9 	.word	0x08001fa9
 8001824:	08001fa9 	.word	0x08001fa9
 8001828:	08001fa9 	.word	0x08001fa9
 800182c:	08001fa9 	.word	0x08001fa9
 8001830:	08001fa9 	.word	0x08001fa9
 8001834:	08001fa9 	.word	0x08001fa9
 8001838:	08001f6d 	.word	0x08001f6d
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 800183c:	4b9b      	ldr	r3, [pc, #620]	; (8001aac <SysTick_Handler+0x5f0>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <SysTick_Handler+0x390>
 8001844:	2113      	movs	r1, #19
 8001846:	489a      	ldr	r0, [pc, #616]	; (8001ab0 <SysTick_Handler+0x5f4>)
 8001848:	f7ff fe1c 	bl	8001484 <ITM0_Write>
					 //if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_CLOSED \r\n",strlen("\r\n S0_SOCK_CLOSED \r\n"));
					 //eth_wr_SOCKET_CMD(&ETH, S0_REG ,OPEN );
					 if(ETH.ETH_WDG >= 15000)
 800184c:	4b99      	ldr	r3, [pc, #612]	; (8001ab4 <SysTick_Handler+0x5f8>)
 800184e:	8a9b      	ldrh	r3, [r3, #20]
 8001850:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001854:	4293      	cmp	r3, r2
 8001856:	f240 83a4 	bls.w	8001fa2 <SysTick_Handler+0xae6>
					 {
						  eth_reset=1;
 800185a:	4b97      	ldr	r3, [pc, #604]	; (8001ab8 <SysTick_Handler+0x5fc>)
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
					 }



				 }
			 break;
 8001860:	e39f      	b.n	8001fa2 <SysTick_Handler+0xae6>
			 case  SOCK_INIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 8001862:	4b92      	ldr	r3, [pc, #584]	; (8001aac <SysTick_Handler+0x5f0>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <SysTick_Handler+0x3b6>
 800186a:	2111      	movs	r1, #17
 800186c:	4893      	ldr	r0, [pc, #588]	; (8001abc <SysTick_Handler+0x600>)
 800186e:	f7ff fe09 	bl	8001484 <ITM0_Write>
					 if(ETH.S_ENserver == 1)
 8001872:	4b90      	ldr	r3, [pc, #576]	; (8001ab4 <SysTick_Handler+0x5f8>)
 8001874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001878:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800187c:	2b01      	cmp	r3, #1
 800187e:	d119      	bne.n	80018b4 <SysTick_Handler+0x3f8>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 8001880:	4b8a      	ldr	r3, [pc, #552]	; (8001aac <SysTick_Handler+0x5f0>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <SysTick_Handler+0x3d4>
 8001888:	2111      	movs	r1, #17
 800188a:	488c      	ldr	r0, [pc, #560]	; (8001abc <SysTick_Handler+0x600>)
 800188c:	f7ff fdfa 	bl	8001484 <ITM0_Write>
						 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_INIT \r\n",strlen("\r\n S0_SOCK_INIT \r\n"));
 8001890:	4b8b      	ldr	r3, [pc, #556]	; (8001ac0 <SysTick_Handler+0x604>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d004      	beq.n	80018a2 <SysTick_Handler+0x3e6>
 8001898:	2212      	movs	r2, #18
 800189a:	498a      	ldr	r1, [pc, #552]	; (8001ac4 <SysTick_Handler+0x608>)
 800189c:	488a      	ldr	r0, [pc, #552]	; (8001ac8 <SysTick_Handler+0x60c>)
 800189e:	f003 fe4d 	bl	800553c <HAL_UART_Transmit_IT>
							eth_wr_SOCKET_CMD(&ETH, S0_REG, LISTEN );
 80018a2:	2202      	movs	r2, #2
 80018a4:	2101      	movs	r1, #1
 80018a6:	4883      	ldr	r0, [pc, #524]	; (8001ab4 <SysTick_Handler+0x5f8>)
 80018a8:	f00b fd5a 	bl	800d360 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 80018ac:	4b81      	ldr	r3, [pc, #516]	; (8001ab4 <SysTick_Handler+0x5f8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	829a      	strh	r2, [r3, #20]
						 	if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n ETH-W5500-CONNECT \r\n",strlen("\r\n ETH-W5500-CONNECT \r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 80018b2:	e379      	b.n	8001fa8 <SysTick_Handler+0xaec>
						    eth_wr_SOCKET_CMD(&ETH,S0_REG, CONNECT);																				//only for server
 80018b4:	2204      	movs	r2, #4
 80018b6:	2101      	movs	r1, #1
 80018b8:	487e      	ldr	r0, [pc, #504]	; (8001ab4 <SysTick_Handler+0x5f8>)
 80018ba:	f00b fd51 	bl	800d360 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5500-CONNECT\r\n",strlen("\r\nETH-W5500-CONNECT\r\n"));
 80018be:	4b7b      	ldr	r3, [pc, #492]	; (8001aac <SysTick_Handler+0x5f0>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <SysTick_Handler+0x412>
 80018c6:	2115      	movs	r1, #21
 80018c8:	4880      	ldr	r0, [pc, #512]	; (8001acc <SysTick_Handler+0x610>)
 80018ca:	f7ff fddb 	bl	8001484 <ITM0_Write>
						 	if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n ETH-W5500-CONNECT \r\n",strlen("\r\n ETH-W5500-CONNECT \r\n"));
 80018ce:	4b7c      	ldr	r3, [pc, #496]	; (8001ac0 <SysTick_Handler+0x604>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d004      	beq.n	80018e0 <SysTick_Handler+0x424>
 80018d6:	2217      	movs	r2, #23
 80018d8:	497d      	ldr	r1, [pc, #500]	; (8001ad0 <SysTick_Handler+0x614>)
 80018da:	487b      	ldr	r0, [pc, #492]	; (8001ac8 <SysTick_Handler+0x60c>)
 80018dc:	f003 fe2e 	bl	800553c <HAL_UART_Transmit_IT>
						 	ETH.ETH_WDG=0;
 80018e0:	4b74      	ldr	r3, [pc, #464]	; (8001ab4 <SysTick_Handler+0x5f8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	829a      	strh	r2, [r3, #20]
			 break;
 80018e6:	e35f      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 80018e8:	4b70      	ldr	r3, [pc, #448]	; (8001aac <SysTick_Handler+0x5f0>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <SysTick_Handler+0x43c>
 80018f0:	2113      	movs	r1, #19
 80018f2:	4878      	ldr	r0, [pc, #480]	; (8001ad4 <SysTick_Handler+0x618>)
 80018f4:	f7ff fdc6 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_LISTEN \r\n",strlen("\r\n S0_SOCK_LISTEN \r\n"));
 80018f8:	4b71      	ldr	r3, [pc, #452]	; (8001ac0 <SysTick_Handler+0x604>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d004      	beq.n	800190a <SysTick_Handler+0x44e>
 8001900:	2214      	movs	r2, #20
 8001902:	4975      	ldr	r1, [pc, #468]	; (8001ad8 <SysTick_Handler+0x61c>)
 8001904:	4870      	ldr	r0, [pc, #448]	; (8001ac8 <SysTick_Handler+0x60c>)
 8001906:	f003 fe19 	bl	800553c <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 800190a:	4b6a      	ldr	r3, [pc, #424]	; (8001ab4 <SysTick_Handler+0x5f8>)
 800190c:	2200      	movs	r2, #0
 800190e:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001910:	e34a      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 8001912:	4b66      	ldr	r3, [pc, #408]	; (8001aac <SysTick_Handler+0x5f0>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <SysTick_Handler+0x466>
 800191a:	2114      	movs	r1, #20
 800191c:	486f      	ldr	r0, [pc, #444]	; (8001adc <SysTick_Handler+0x620>)
 800191e:	f7ff fdb1 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_SYNSENT \r\n",strlen("\r\n S0_SOCK_SYNSENT \r\n"));
 8001922:	4b67      	ldr	r3, [pc, #412]	; (8001ac0 <SysTick_Handler+0x604>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d004      	beq.n	8001934 <SysTick_Handler+0x478>
 800192a:	2215      	movs	r2, #21
 800192c:	496c      	ldr	r1, [pc, #432]	; (8001ae0 <SysTick_Handler+0x624>)
 800192e:	4866      	ldr	r0, [pc, #408]	; (8001ac8 <SysTick_Handler+0x60c>)
 8001930:	f003 fe04 	bl	800553c <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001934:	4b5f      	ldr	r3, [pc, #380]	; (8001ab4 <SysTick_Handler+0x5f8>)
 8001936:	2200      	movs	r2, #0
 8001938:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 800193a:	e335      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 800193c:	4b5b      	ldr	r3, [pc, #364]	; (8001aac <SysTick_Handler+0x5f0>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <SysTick_Handler+0x490>
 8001944:	2114      	movs	r1, #20
 8001946:	4867      	ldr	r0, [pc, #412]	; (8001ae4 <SysTick_Handler+0x628>)
 8001948:	f7ff fd9c 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_SYNRECV \r\n",strlen("\r\n S0_SOCK_SYNRECV \r\n"));
 800194c:	4b5c      	ldr	r3, [pc, #368]	; (8001ac0 <SysTick_Handler+0x604>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d004      	beq.n	800195e <SysTick_Handler+0x4a2>
 8001954:	2215      	movs	r2, #21
 8001956:	4964      	ldr	r1, [pc, #400]	; (8001ae8 <SysTick_Handler+0x62c>)
 8001958:	485b      	ldr	r0, [pc, #364]	; (8001ac8 <SysTick_Handler+0x60c>)
 800195a:	f003 fdef 	bl	800553c <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 800195e:	4b55      	ldr	r3, [pc, #340]	; (8001ab4 <SysTick_Handler+0x5f8>)
 8001960:	2200      	movs	r2, #0
 8001962:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001964:	e320      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 8001966:	4b51      	ldr	r3, [pc, #324]	; (8001aac <SysTick_Handler+0x5f0>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <SysTick_Handler+0x4ba>
 800196e:	2118      	movs	r1, #24
 8001970:	485e      	ldr	r0, [pc, #376]	; (8001aec <SysTick_Handler+0x630>)
 8001972:	f7ff fd87 	bl	8001484 <ITM0_Write>
					 //if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_ESTABLISHED \r\n",strlen("\r\n S0_SOCK_ESTABLISHED \r\n"));
					 ETH.ETH_WDG=0;
 8001976:	4b4f      	ldr	r3, [pc, #316]	; (8001ab4 <SysTick_Handler+0x5f8>)
 8001978:	2200      	movs	r2, #0
 800197a:	829a      	strh	r2, [r3, #20]

					if (ETH.S_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 800197c:	4b4d      	ldr	r3, [pc, #308]	; (8001ab4 <SysTick_Handler+0x5f8>)
 800197e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001982:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001986:	2b01      	cmp	r3, #1
 8001988:	f040 80c6 	bne.w	8001b18 <SysTick_Handler+0x65c>
					{

						S0_get_size = SPI_ETH_REG(&ETH, S_RX_RSR ,S0_REG, SPI_READ, spi_Data,2);//S0_get_size = SPI_ETH_REG(&ETH, S_RX_SZ_ADDR_BASEHH,S_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800198c:	2302      	movs	r3, #2
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	4b57      	ldr	r3, [pc, #348]	; (8001af0 <SysTick_Handler+0x634>)
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2300      	movs	r3, #0
 8001996:	2201      	movs	r2, #1
 8001998:	2126      	movs	r1, #38	; 0x26
 800199a:	4846      	ldr	r0, [pc, #280]	; (8001ab4 <SysTick_Handler+0x5f8>)
 800199c:	f00b fb91 	bl	800d0c2 <SPI_ETH_REG>
 80019a0:	4603      	mov	r3, r0
 80019a2:	461a      	mov	r2, r3
 80019a4:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <SysTick_Handler+0x638>)
 80019a6:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 80019a8:	4b52      	ldr	r3, [pc, #328]	; (8001af4 <SysTick_Handler+0x638>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 82fa 	beq.w	8001fa6 <SysTick_Handler+0xaea>
							{
								eth_rd_SOCKET_DATA(&ETH,S0_RX_BUFF,&rx_mem_pointer,S0_get_size); // read socket data
 80019b2:	4b50      	ldr	r3, [pc, #320]	; (8001af4 <SysTick_Handler+0x638>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	4a50      	ldr	r2, [pc, #320]	; (8001af8 <SysTick_Handler+0x63c>)
 80019b8:	2103      	movs	r1, #3
 80019ba:	483e      	ldr	r0, [pc, #248]	; (8001ab4 <SysTick_Handler+0x5f8>)
 80019bc:	f00b ff64 	bl	800d888 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S_RX_RD0,rx_mem_pointer,S0_REG );		// write rx memory pointer
 80019c0:	4b4d      	ldr	r3, [pc, #308]	; (8001af8 <SysTick_Handler+0x63c>)
 80019c2:	881a      	ldrh	r2, [r3, #0]
 80019c4:	2301      	movs	r3, #1
 80019c6:	2128      	movs	r1, #40	; 0x28
 80019c8:	483a      	ldr	r0, [pc, #232]	; (8001ab4 <SysTick_Handler+0x5f8>)
 80019ca:	f00b fc00 	bl	800d1ce <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,RECV);							// write command to execute
 80019ce:	2240      	movs	r2, #64	; 0x40
 80019d0:	2101      	movs	r1, #1
 80019d2:	4838      	ldr	r0, [pc, #224]	; (8001ab4 <SysTick_Handler+0x5f8>)
 80019d4:	f00b fcc4 	bl	800d360 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,S0_REG))						// wait until end of command execution
 80019d8:	bf00      	nop
 80019da:	2101      	movs	r1, #1
 80019dc:	4835      	ldr	r0, [pc, #212]	; (8001ab4 <SysTick_Handler+0x5f8>)
 80019de:	f00b ff38 	bl	800d852 <eth_rd_SOCKET_CMD>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f8      	bne.n	80019da <SysTick_Handler+0x51e>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 80019e8:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <SysTick_Handler+0x638>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	2300      	movs	r3, #0
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2300      	movs	r3, #0
 80019f4:	4941      	ldr	r1, [pc, #260]	; (8001afc <SysTick_Handler+0x640>)
 80019f6:	4842      	ldr	r0, [pc, #264]	; (8001b00 <SysTick_Handler+0x644>)
 80019f8:	f00d fa62 	bl	800eec0 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 80019fc:	4b3d      	ldr	r3, [pc, #244]	; (8001af4 <SysTick_Handler+0x638>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <SysTick_Handler+0x648>)
 8001a04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

								if(S0_get_size > 0)	{ ETH.S_data_available=1;}					//Flag data received
 8001a08:	4b3a      	ldr	r3, [pc, #232]	; (8001af4 <SysTick_Handler+0x638>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d002      	beq.n	8001a16 <SysTick_Handler+0x55a>
 8001a10:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <SysTick_Handler+0x5f8>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	769a      	strb	r2, [r3, #26]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001a16:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <SysTick_Handler+0x648>)
 8001a18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4838      	ldr	r0, [pc, #224]	; (8001b00 <SysTick_Handler+0x644>)
 8001a20:	f009 fff0 	bl	800ba04 <ModBUS_Check>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00d      	beq.n	8001a46 <SysTick_Handler+0x58a>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001a2a:	4836      	ldr	r0, [pc, #216]	; (8001b04 <SysTick_Handler+0x648>)
 8001a2c:	f00a f8ec 	bl	800bc08 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001a30:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <SysTick_Handler+0x648>)
 8001a32:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8001a36:	2300      	movs	r3, #0
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	4932      	ldr	r1, [pc, #200]	; (8001b08 <SysTick_Handler+0x64c>)
 8001a3e:	482f      	ldr	r0, [pc, #188]	; (8001afc <SysTick_Handler+0x640>)
 8001a40:	f00d fa3e 	bl	800eec0 <CopiaVector>
 8001a44:	e010      	b.n	8001a68 <SysTick_Handler+0x5ac>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <SysTick_Handler+0x5f0>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <SysTick_Handler+0x59a>
 8001a4e:	2111      	movs	r1, #17
 8001a50:	482e      	ldr	r0, [pc, #184]	; (8001b0c <SysTick_Handler+0x650>)
 8001a52:	f7ff fd17 	bl	8001484 <ITM0_Write>
									if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n NO MBUS \r\n",strlen("\r\n NO MBUS \r\n"));
 8001a56:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <SysTick_Handler+0x604>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d004      	beq.n	8001a68 <SysTick_Handler+0x5ac>
 8001a5e:	220d      	movs	r2, #13
 8001a60:	492a      	ldr	r1, [pc, #168]	; (8001b0c <SysTick_Handler+0x650>)
 8001a62:	4819      	ldr	r0, [pc, #100]	; (8001ac8 <SysTick_Handler+0x60c>)
 8001a64:	f003 fd6a 	bl	800553c <HAL_UART_Transmit_IT>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001a68:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <SysTick_Handler+0x648>)
 8001a6a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <SysTick_Handler+0x654>)
 8001a72:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,S0_RX_BUFF, &tx_mem_pointer, send_size);	// write socket data
 8001a74:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <SysTick_Handler+0x654>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	4a26      	ldr	r2, [pc, #152]	; (8001b14 <SysTick_Handler+0x658>)
 8001a7a:	2103      	movs	r1, #3
 8001a7c:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <SysTick_Handler+0x5f8>)
 8001a7e:	f00b ff94 	bl	800d9aa <eth_wr_SOCKET_DATA>

								SPI_ETH_WR_REG_16(&ETH,S_TX_WR,tx_mem_pointer,S0_REG);			// write tx memory pointer//SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer,0);			// write tx memory pointer
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <SysTick_Handler+0x658>)
 8001a84:	881a      	ldrh	r2, [r3, #0]
 8001a86:	2301      	movs	r3, #1
 8001a88:	2124      	movs	r1, #36	; 0x24
 8001a8a:	480a      	ldr	r0, [pc, #40]	; (8001ab4 <SysTick_Handler+0x5f8>)
 8001a8c:	f00b fb9f 	bl	800d1ce <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,SEND);							// write command to execute
 8001a90:	2220      	movs	r2, #32
 8001a92:	2101      	movs	r1, #1
 8001a94:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <SysTick_Handler+0x5f8>)
 8001a96:	f00b fc63 	bl	800d360 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,S0_REG))						// wait until end of command execution
 8001a9a:	bf00      	nop
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <SysTick_Handler+0x5f8>)
 8001aa0:	f00b fed7 	bl	800d852 <eth_rd_SOCKET_CMD>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f8      	bne.n	8001a9c <SysTick_Handler+0x5e0>

							}
						}
					}
				 }
			 break;
 8001aaa:	e27c      	b.n	8001fa6 <SysTick_Handler+0xaea>
 8001aac:	200041c4 	.word	0x200041c4
 8001ab0:	080105e8 	.word	0x080105e8
 8001ab4:	20000304 	.word	0x20000304
 8001ab8:	2000421c 	.word	0x2000421c
 8001abc:	080105fc 	.word	0x080105fc
 8001ac0:	20000021 	.word	0x20000021
 8001ac4:	08010610 	.word	0x08010610
 8001ac8:	200002b8 	.word	0x200002b8
 8001acc:	08010624 	.word	0x08010624
 8001ad0:	0801063c 	.word	0x0801063c
 8001ad4:	08010654 	.word	0x08010654
 8001ad8:	08010668 	.word	0x08010668
 8001adc:	08010680 	.word	0x08010680
 8001ae0:	08010698 	.word	0x08010698
 8001ae4:	080106b0 	.word	0x080106b0
 8001ae8:	080106c8 	.word	0x080106c8
 8001aec:	080106e0 	.word	0x080106e0
 8001af0:	200041d4 	.word	0x200041d4
 8001af4:	200041cc 	.word	0x200041cc
 8001af8:	200041d0 	.word	0x200041d0
 8001afc:	20000328 	.word	0x20000328
 8001b00:	20003136 	.word	0x20003136
 8001b04:	20003124 	.word	0x20003124
 8001b08:	2000333c 	.word	0x2000333c
 8001b0c:	080106fc 	.word	0x080106fc
 8001b10:	200041d2 	.word	0x200041d2
 8001b14:	200041ce 	.word	0x200041ce
						if (mb_eth._w_answer==0)
 8001b18:	4ba7      	ldr	r3, [pc, #668]	; (8001db8 <SysTick_Handler+0x8fc>)
 8001b1a:	7a1b      	ldrb	r3, [r3, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f040 8088 	bne.w	8001c32 <SysTick_Handler+0x776>
							ETH.data[0]=0x00;
 8001b22:	4ba6      	ldr	r3, [pc, #664]	; (8001dbc <SysTick_Handler+0x900>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[1]=0x00;
 8001b2a:	4ba4      	ldr	r3, [pc, #656]	; (8001dbc <SysTick_Handler+0x900>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[2]=0x00;
 8001b32:	4ba2      	ldr	r3, [pc, #648]	; (8001dbc <SysTick_Handler+0x900>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[3]=0x00;
 8001b3a:	4ba0      	ldr	r3, [pc, #640]	; (8001dbc <SysTick_Handler+0x900>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							ETH.data[4]=0x00;
 8001b42:	4b9e      	ldr	r3, [pc, #632]	; (8001dbc <SysTick_Handler+0x900>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
							ETH.data[5]=0x06;
 8001b4a:	4b9c      	ldr	r3, [pc, #624]	; (8001dbc <SysTick_Handler+0x900>)
 8001b4c:	2206      	movs	r2, #6
 8001b4e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
							ETH.data[6]=0x01;
 8001b52:	4b9a      	ldr	r3, [pc, #616]	; (8001dbc <SysTick_Handler+0x900>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
							ETH.data[7]=0x03;
 8001b5a:	4b98      	ldr	r3, [pc, #608]	; (8001dbc <SysTick_Handler+0x900>)
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
							ETH.data[8]=0x00;
 8001b62:	4b96      	ldr	r3, [pc, #600]	; (8001dbc <SysTick_Handler+0x900>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
							ETH.data[9]=0x00;
 8001b6a:	4b94      	ldr	r3, [pc, #592]	; (8001dbc <SysTick_Handler+0x900>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
							ETH.data[10]=0x00;
 8001b72:	4b92      	ldr	r3, [pc, #584]	; (8001dbc <SysTick_Handler+0x900>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
							ETH.data[11]=0x0A;
 8001b7a:	4b90      	ldr	r3, [pc, #576]	; (8001dbc <SysTick_Handler+0x900>)
 8001b7c:	220a      	movs	r2, #10
 8001b7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
							send_size=12;
 8001b82:	4b8f      	ldr	r3, [pc, #572]	; (8001dc0 <SysTick_Handler+0x904>)
 8001b84:	220c      	movs	r2, #12
 8001b86:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,16);
 8001b88:	2210      	movs	r2, #16
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	488a      	ldr	r0, [pc, #552]	; (8001db8 <SysTick_Handler+0x8fc>)
 8001b8e:	f009 ffe4 	bl	800bb5a <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001b92:	2300      	movs	r3, #0
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2300      	movs	r3, #0
 8001b98:	220c      	movs	r2, #12
 8001b9a:	498a      	ldr	r1, [pc, #552]	; (8001dc4 <SysTick_Handler+0x908>)
 8001b9c:	488a      	ldr	r0, [pc, #552]	; (8001dc8 <SysTick_Handler+0x90c>)
 8001b9e:	f00d f98f 	bl	800eec0 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,S0_TX_BUFF, &tx_mem_pointer, send_size);	// write socket data
 8001ba2:	4b87      	ldr	r3, [pc, #540]	; (8001dc0 <SysTick_Handler+0x904>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	4a89      	ldr	r2, [pc, #548]	; (8001dcc <SysTick_Handler+0x910>)
 8001ba8:	2102      	movs	r1, #2
 8001baa:	4884      	ldr	r0, [pc, #528]	; (8001dbc <SysTick_Handler+0x900>)
 8001bac:	f00b fefd 	bl	800d9aa <eth_wr_SOCKET_DATA>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001bb0:	4982      	ldr	r1, [pc, #520]	; (8001dbc <SysTick_Handler+0x900>)
 8001bb2:	4887      	ldr	r0, [pc, #540]	; (8001dd0 <SysTick_Handler+0x914>)
 8001bb4:	f00b ff9d 	bl	800daf2 <SPI_ETH_SNIFF>
							SPI_ETH_WR_REG_16(&ETH,S_TX_WR,tx_mem_pointer,S0_REG);			// write tx memory pointer
 8001bb8:	4b84      	ldr	r3, [pc, #528]	; (8001dcc <SysTick_Handler+0x910>)
 8001bba:	881a      	ldrh	r2, [r3, #0]
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	2124      	movs	r1, #36	; 0x24
 8001bc0:	487e      	ldr	r0, [pc, #504]	; (8001dbc <SysTick_Handler+0x900>)
 8001bc2:	f00b fb04 	bl	800d1ce <SPI_ETH_WR_REG_16>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001bc6:	497d      	ldr	r1, [pc, #500]	; (8001dbc <SysTick_Handler+0x900>)
 8001bc8:	4881      	ldr	r0, [pc, #516]	; (8001dd0 <SysTick_Handler+0x914>)
 8001bca:	f00b ff92 	bl	800daf2 <SPI_ETH_SNIFF>
							eth_wr_SOCKET_CMD(&ETH,S0_REG,SEND);							// write command to execute
 8001bce:	2220      	movs	r2, #32
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	487a      	ldr	r0, [pc, #488]	; (8001dbc <SysTick_Handler+0x900>)
 8001bd4:	f00b fbc4 	bl	800d360 <eth_wr_SOCKET_CMD>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001bd8:	4978      	ldr	r1, [pc, #480]	; (8001dbc <SysTick_Handler+0x900>)
 8001bda:	487d      	ldr	r0, [pc, #500]	; (8001dd0 <SysTick_Handler+0x914>)
 8001bdc:	f00b ff89 	bl	800daf2 <SPI_ETH_SNIFF>
							uint16_t read=0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
								read=SPI_ETH_REG(&ETH, S_IR,S0_REG,SPI_READ, ETH.GAR,1);
 8001be6:	2301      	movs	r3, #1
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	4b7a      	ldr	r3, [pc, #488]	; (8001dd4 <SysTick_Handler+0x918>)
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	2102      	movs	r1, #2
 8001bf4:	4871      	ldr	r0, [pc, #452]	; (8001dbc <SysTick_Handler+0x900>)
 8001bf6:	f00b fa64 	bl	800d0c2 <SPI_ETH_REG>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
							mb_eth._w_answer=1;	// Waiting answer flag_w_answer=1;	// Waiting answer flag
 8001c00:	4b6d      	ldr	r3, [pc, #436]	; (8001db8 <SysTick_Handler+0x8fc>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	721a      	strb	r2, [r3, #8]
							MB_TOUT_ticks=0;	// restart counting
 8001c06:	4b74      	ldr	r3, [pc, #464]	; (8001dd8 <SysTick_Handler+0x91c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001c0c:	4b73      	ldr	r3, [pc, #460]	; (8001ddc <SysTick_Handler+0x920>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <SysTick_Handler+0x760>
 8001c14:	2117      	movs	r1, #23
 8001c16:	4872      	ldr	r0, [pc, #456]	; (8001de0 <SysTick_Handler+0x924>)
 8001c18:	f7ff fc34 	bl	8001484 <ITM0_Write>
							if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n SENT MBUS REQ \r\n",strlen("\r\n SENT MBUS REQ \r\n"));
 8001c1c:	4b71      	ldr	r3, [pc, #452]	; (8001de4 <SysTick_Handler+0x928>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 81c0 	beq.w	8001fa6 <SysTick_Handler+0xaea>
 8001c26:	2213      	movs	r2, #19
 8001c28:	496d      	ldr	r1, [pc, #436]	; (8001de0 <SysTick_Handler+0x924>)
 8001c2a:	486f      	ldr	r0, [pc, #444]	; (8001de8 <SysTick_Handler+0x92c>)
 8001c2c:	f003 fc86 	bl	800553c <HAL_UART_Transmit_IT>
			 break;
 8001c30:	e1b9      	b.n	8001fa6 <SysTick_Handler+0xaea>
						S0_get_size = SPI_ETH_REG(&ETH, S_RX_RSR ,S0_REG ,SPI_READ, spi_Data,2);
 8001c32:	2302      	movs	r3, #2
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	4b6d      	ldr	r3, [pc, #436]	; (8001dec <SysTick_Handler+0x930>)
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	2126      	movs	r1, #38	; 0x26
 8001c40:	485e      	ldr	r0, [pc, #376]	; (8001dbc <SysTick_Handler+0x900>)
 8001c42:	f00b fa3e 	bl	800d0c2 <SPI_ETH_REG>
 8001c46:	4603      	mov	r3, r0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b69      	ldr	r3, [pc, #420]	; (8001df0 <SysTick_Handler+0x934>)
 8001c4c:	801a      	strh	r2, [r3, #0]
						if(S0_get_size != 0x00)
 8001c4e:	4b68      	ldr	r3, [pc, #416]	; (8001df0 <SysTick_Handler+0x934>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 81a7 	beq.w	8001fa6 <SysTick_Handler+0xaea>
								eth_rd_SOCKET_DATA(&ETH,S0_RX_BUFF,&rx_mem_pointer,S0_get_size); // read socket data
 8001c58:	4b65      	ldr	r3, [pc, #404]	; (8001df0 <SysTick_Handler+0x934>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	4a65      	ldr	r2, [pc, #404]	; (8001df4 <SysTick_Handler+0x938>)
 8001c5e:	2103      	movs	r1, #3
 8001c60:	4856      	ldr	r0, [pc, #344]	; (8001dbc <SysTick_Handler+0x900>)
 8001c62:	f00b fe11 	bl	800d888 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S_RX_RD0,rx_mem_pointer,S0_REG);		// write rx memory pointer
 8001c66:	4b63      	ldr	r3, [pc, #396]	; (8001df4 <SysTick_Handler+0x938>)
 8001c68:	881a      	ldrh	r2, [r3, #0]
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	2128      	movs	r1, #40	; 0x28
 8001c6e:	4853      	ldr	r0, [pc, #332]	; (8001dbc <SysTick_Handler+0x900>)
 8001c70:	f00b faad 	bl	800d1ce <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,RECV);							// write command to execute
 8001c74:	2240      	movs	r2, #64	; 0x40
 8001c76:	2101      	movs	r1, #1
 8001c78:	4850      	ldr	r0, [pc, #320]	; (8001dbc <SysTick_Handler+0x900>)
 8001c7a:	f00b fb71 	bl	800d360 <eth_wr_SOCKET_CMD>
								if (ETH_DBG_EN) ITM0_Write("\r\n RCVD DATA \r\n",strlen("\r\n RCVD DATA \r\n"));
 8001c7e:	4b57      	ldr	r3, [pc, #348]	; (8001ddc <SysTick_Handler+0x920>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <SysTick_Handler+0x7d2>
 8001c86:	210f      	movs	r1, #15
 8001c88:	485b      	ldr	r0, [pc, #364]	; (8001df8 <SysTick_Handler+0x93c>)
 8001c8a:	f7ff fbfb 	bl	8001484 <ITM0_Write>
								if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n RCVD DATA \r\n",strlen("\r\n RCVD DATA \r\n"));
 8001c8e:	4b55      	ldr	r3, [pc, #340]	; (8001de4 <SysTick_Handler+0x928>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d004      	beq.n	8001ca0 <SysTick_Handler+0x7e4>
 8001c96:	220f      	movs	r2, #15
 8001c98:	4957      	ldr	r1, [pc, #348]	; (8001df8 <SysTick_Handler+0x93c>)
 8001c9a:	4853      	ldr	r0, [pc, #332]	; (8001de8 <SysTick_Handler+0x92c>)
 8001c9c:	f003 fc4e 	bl	800553c <HAL_UART_Transmit_IT>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001ca0:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <SysTick_Handler+0x934>)
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2300      	movs	r3, #0
 8001cac:	4946      	ldr	r1, [pc, #280]	; (8001dc8 <SysTick_Handler+0x90c>)
 8001cae:	4853      	ldr	r0, [pc, #332]	; (8001dfc <SysTick_Handler+0x940>)
 8001cb0:	f00d f906 	bl	800eec0 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001cb4:	4b4e      	ldr	r3, [pc, #312]	; (8001df0 <SysTick_Handler+0x934>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b3f      	ldr	r3, [pc, #252]	; (8001db8 <SysTick_Handler+0x8fc>)
 8001cbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
								if(S0_get_size > 0)	{ ETH.S_data_available=1;}
 8001cc0:	4b4b      	ldr	r3, [pc, #300]	; (8001df0 <SysTick_Handler+0x934>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <SysTick_Handler+0x812>
 8001cc8:	4b3c      	ldr	r3, [pc, #240]	; (8001dbc <SysTick_Handler+0x900>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	769a      	strb	r2, [r3, #26]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001cce:	4b3a      	ldr	r3, [pc, #232]	; (8001db8 <SysTick_Handler+0x8fc>)
 8001cd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4849      	ldr	r0, [pc, #292]	; (8001dfc <SysTick_Handler+0x940>)
 8001cd8:	f009 fe94 	bl	800ba04 <ModBUS_Check>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d02d      	beq.n	8001d3e <SysTick_Handler+0x882>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001ce2:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <SysTick_Handler+0x8fc>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	721a      	strb	r2, [r3, #8]
										MB_TOUT_ticks=0;
 8001ce8:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <SysTick_Handler+0x91c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001cee:	4832      	ldr	r0, [pc, #200]	; (8001db8 <SysTick_Handler+0x8fc>)
 8001cf0:	f009 ff8a 	bl	800bc08 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001cf4:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <SysTick_Handler+0x8fc>)
 8001cf6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	493e      	ldr	r1, [pc, #248]	; (8001dfc <SysTick_Handler+0x940>)
 8001d02:	483f      	ldr	r0, [pc, #252]	; (8001e00 <SysTick_Handler+0x944>)
 8001d04:	f00d f8dc 	bl	800eec0 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	2240      	movs	r2, #64	; 0x40
 8001d10:	493c      	ldr	r1, [pc, #240]	; (8001e04 <SysTick_Handler+0x948>)
 8001d12:	483d      	ldr	r0, [pc, #244]	; (8001e08 <SysTick_Handler+0x94c>)
 8001d14:	f00d f8d4 	bl	800eec0 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\ RCVD MBUS REQ \r\n"));
 8001d18:	4b30      	ldr	r3, [pc, #192]	; (8001ddc <SysTick_Handler+0x920>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <SysTick_Handler+0x86c>
 8001d20:	2113      	movs	r1, #19
 8001d22:	483a      	ldr	r0, [pc, #232]	; (8001e0c <SysTick_Handler+0x950>)
 8001d24:	f7ff fbae 	bl	8001484 <ITM0_Write>
										if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n RCVD MBUS REQ \r\n",strlen("\r\n RCVD MBUS REQ \r\n"));
 8001d28:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <SysTick_Handler+0x928>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 813a 	beq.w	8001fa6 <SysTick_Handler+0xaea>
 8001d32:	2213      	movs	r2, #19
 8001d34:	4935      	ldr	r1, [pc, #212]	; (8001e0c <SysTick_Handler+0x950>)
 8001d36:	482c      	ldr	r0, [pc, #176]	; (8001de8 <SysTick_Handler+0x92c>)
 8001d38:	f003 fc00 	bl	800553c <HAL_UART_Transmit_IT>
			 break;
 8001d3c:	e133      	b.n	8001fa6 <SysTick_Handler+0xaea>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n NO MBUS \r\n"));
 8001d3e:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <SysTick_Handler+0x920>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <SysTick_Handler+0x892>
 8001d46:	210d      	movs	r1, #13
 8001d48:	4831      	ldr	r0, [pc, #196]	; (8001e10 <SysTick_Handler+0x954>)
 8001d4a:	f7ff fb9b 	bl	8001484 <ITM0_Write>
										if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n NO MBUS \r\n",strlen("\r\n NO MBUS \r\n"));
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <SysTick_Handler+0x928>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8127 	beq.w	8001fa6 <SysTick_Handler+0xaea>
 8001d58:	220d      	movs	r2, #13
 8001d5a:	492d      	ldr	r1, [pc, #180]	; (8001e10 <SysTick_Handler+0x954>)
 8001d5c:	4822      	ldr	r0, [pc, #136]	; (8001de8 <SysTick_Handler+0x92c>)
 8001d5e:	f003 fbed 	bl	800553c <HAL_UART_Transmit_IT>
			 break;
 8001d62:	e120      	b.n	8001fa6 <SysTick_Handler+0xaea>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001d64:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <SysTick_Handler+0x920>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <SysTick_Handler+0x8b8>
 8001d6c:	2115      	movs	r1, #21
 8001d6e:	4829      	ldr	r0, [pc, #164]	; (8001e14 <SysTick_Handler+0x958>)
 8001d70:	f7ff fb88 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_FIN_WAIT \r\n",strlen("\r\n S0_SOCK_FIN_WAIT \r\n"));
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <SysTick_Handler+0x928>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <SysTick_Handler+0x8ca>
 8001d7c:	2216      	movs	r2, #22
 8001d7e:	4926      	ldr	r1, [pc, #152]	; (8001e18 <SysTick_Handler+0x95c>)
 8001d80:	4819      	ldr	r0, [pc, #100]	; (8001de8 <SysTick_Handler+0x92c>)
 8001d82:	f003 fbdb 	bl	800553c <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <SysTick_Handler+0x900>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001d8c:	e10c      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001d8e:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <SysTick_Handler+0x920>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <SysTick_Handler+0x8e2>
 8001d96:	2114      	movs	r1, #20
 8001d98:	4820      	ldr	r0, [pc, #128]	; (8001e1c <SysTick_Handler+0x960>)
 8001d9a:	f7ff fb73 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_CLOSING \r\n",strlen("\r\n S0_SOCK_CLOSING \r\n"));
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <SysTick_Handler+0x928>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d004      	beq.n	8001db0 <SysTick_Handler+0x8f4>
 8001da6:	2215      	movs	r2, #21
 8001da8:	491d      	ldr	r1, [pc, #116]	; (8001e20 <SysTick_Handler+0x964>)
 8001daa:	480f      	ldr	r0, [pc, #60]	; (8001de8 <SysTick_Handler+0x92c>)
 8001dac:	f003 fbc6 	bl	800553c <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001db0:	4b02      	ldr	r3, [pc, #8]	; (8001dbc <SysTick_Handler+0x900>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001db6:	e0f7      	b.n	8001fa8 <SysTick_Handler+0xaec>
 8001db8:	20003124 	.word	0x20003124
 8001dbc:	20000304 	.word	0x20000304
 8001dc0:	200041d2 	.word	0x200041d2
 8001dc4:	2000333c 	.word	0x2000333c
 8001dc8:	20000328 	.word	0x20000328
 8001dcc:	200041ce 	.word	0x200041ce
 8001dd0:	20001378 	.word	0x20001378
 8001dd4:	20001328 	.word	0x20001328
 8001dd8:	2000463c 	.word	0x2000463c
 8001ddc:	200041c4 	.word	0x200041c4
 8001de0:	0801070c 	.word	0x0801070c
 8001de4:	20000021 	.word	0x20000021
 8001de8:	200002b8 	.word	0x200002b8
 8001dec:	200041d4 	.word	0x200041d4
 8001df0:	200041cc 	.word	0x200041cc
 8001df4:	200041d0 	.word	0x200041d0
 8001df8:	08010720 	.word	0x08010720
 8001dfc:	20003136 	.word	0x20003136
 8001e00:	20000b28 	.word	0x20000b28
 8001e04:	20003548 	.word	0x20003548
 8001e08:	20003b98 	.word	0x20003b98
 8001e0c:	08010730 	.word	0x08010730
 8001e10:	080106fc 	.word	0x080106fc
 8001e14:	08010744 	.word	0x08010744
 8001e18:	0801075c 	.word	0x0801075c
 8001e1c:	08010774 	.word	0x08010774
 8001e20:	0801078c 	.word	0x0801078c
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001e24:	4b79      	ldr	r3, [pc, #484]	; (800200c <SysTick_Handler+0xb50>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <SysTick_Handler+0x978>
 8001e2c:	2116      	movs	r1, #22
 8001e2e:	4878      	ldr	r0, [pc, #480]	; (8002010 <SysTick_Handler+0xb54>)
 8001e30:	f7ff fb28 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n nS0_SOCK_TIME_WAIT \r\n",strlen("\r\n nS0_SOCK_TIME_WAIT \r\n"));
 8001e34:	4b77      	ldr	r3, [pc, #476]	; (8002014 <SysTick_Handler+0xb58>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d004      	beq.n	8001e46 <SysTick_Handler+0x98a>
 8001e3c:	2218      	movs	r2, #24
 8001e3e:	4976      	ldr	r1, [pc, #472]	; (8002018 <SysTick_Handler+0xb5c>)
 8001e40:	4876      	ldr	r0, [pc, #472]	; (800201c <SysTick_Handler+0xb60>)
 8001e42:	f003 fb7b 	bl	800553c <HAL_UART_Transmit_IT>
					eth_wr_SOCKET_CMD(&ETH,S0_REG, DISCON );
 8001e46:	2208      	movs	r2, #8
 8001e48:	2101      	movs	r1, #1
 8001e4a:	4875      	ldr	r0, [pc, #468]	; (8002020 <SysTick_Handler+0xb64>)
 8001e4c:	f00b fa88 	bl	800d360 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH,S_CR ,S0_REG,SPI_READ, spi_Data,1))//while( SPI_ETH_REG(&ETH, S_CR_ADDR_BASEH,S_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001e50:	bf00      	nop
 8001e52:	2301      	movs	r3, #1
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	4b73      	ldr	r3, [pc, #460]	; (8002024 <SysTick_Handler+0xb68>)
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2101      	movs	r1, #1
 8001e60:	486f      	ldr	r0, [pc, #444]	; (8002020 <SysTick_Handler+0xb64>)
 8001e62:	f00b f92e 	bl	800d0c2 <SPI_ETH_REG>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f2      	bne.n	8001e52 <SysTick_Handler+0x996>
					{}
					ETH.ETH_WDG=0;
 8001e6c:	4b6c      	ldr	r3, [pc, #432]	; (8002020 <SysTick_Handler+0xb64>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001e72:	e099      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001e74:	4b65      	ldr	r3, [pc, #404]	; (800200c <SysTick_Handler+0xb50>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <SysTick_Handler+0x9c8>
 8001e7c:	2117      	movs	r1, #23
 8001e7e:	486a      	ldr	r0, [pc, #424]	; (8002028 <SysTick_Handler+0xb6c>)
 8001e80:	f7ff fb00 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_CLOSE_WAIT \r\n",strlen("\r\n S0_SOCK_CLOSE_WAIT \r\n"));
 8001e84:	4b63      	ldr	r3, [pc, #396]	; (8002014 <SysTick_Handler+0xb58>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d004      	beq.n	8001e96 <SysTick_Handler+0x9da>
 8001e8c:	2218      	movs	r2, #24
 8001e8e:	4967      	ldr	r1, [pc, #412]	; (800202c <SysTick_Handler+0xb70>)
 8001e90:	4862      	ldr	r0, [pc, #392]	; (800201c <SysTick_Handler+0xb60>)
 8001e92:	f003 fb53 	bl	800553c <HAL_UART_Transmit_IT>
					eth_wr_SOCKET_CMD(&ETH,S0_REG,DISCON );
 8001e96:	2208      	movs	r2, #8
 8001e98:	2101      	movs	r1, #1
 8001e9a:	4861      	ldr	r0, [pc, #388]	; (8002020 <SysTick_Handler+0xb64>)
 8001e9c:	f00b fa60 	bl	800d360 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH,S_CR,S0_REG,SPI_READ, spi_Data,1))
 8001ea0:	bf00      	nop
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	9301      	str	r3, [sp, #4]
 8001ea6:	4b5f      	ldr	r3, [pc, #380]	; (8002024 <SysTick_Handler+0xb68>)
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	2201      	movs	r2, #1
 8001eae:	2101      	movs	r1, #1
 8001eb0:	485b      	ldr	r0, [pc, #364]	; (8002020 <SysTick_Handler+0xb64>)
 8001eb2:	f00b f906 	bl	800d0c2 <SPI_ETH_REG>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f2      	bne.n	8001ea2 <SysTick_Handler+0x9e6>
					{}
					ETH.ETH_WDG=0;
 8001ebc:	4b58      	ldr	r3, [pc, #352]	; (8002020 <SysTick_Handler+0xb64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001ec2:	e071      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_LAST_ACK \r\n",strlen("\r\n S0_SOCK_LAST_ACK \r\n"));
 8001ec4:	4b51      	ldr	r3, [pc, #324]	; (800200c <SysTick_Handler+0xb50>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <SysTick_Handler+0xa18>
 8001ecc:	2116      	movs	r1, #22
 8001ece:	4858      	ldr	r0, [pc, #352]	; (8002030 <SysTick_Handler+0xb74>)
 8001ed0:	f7ff fad8 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_LAST_ACK \r\n",strlen("\r\n S0_SOCK_LAST_ACK \r\n"));
 8001ed4:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <SysTick_Handler+0xb58>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d004      	beq.n	8001ee6 <SysTick_Handler+0xa2a>
 8001edc:	2216      	movs	r2, #22
 8001ede:	4954      	ldr	r1, [pc, #336]	; (8002030 <SysTick_Handler+0xb74>)
 8001ee0:	484e      	ldr	r0, [pc, #312]	; (800201c <SysTick_Handler+0xb60>)
 8001ee2:	f003 fb2b 	bl	800553c <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001ee6:	4b4e      	ldr	r3, [pc, #312]	; (8002020 <SysTick_Handler+0xb64>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001eec:	e05c      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_UDP \r\n",strlen("\r\n S0_SOCK_UDP \r\n"));
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <SysTick_Handler+0xb50>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <SysTick_Handler+0xa42>
 8001ef6:	2111      	movs	r1, #17
 8001ef8:	484e      	ldr	r0, [pc, #312]	; (8002034 <SysTick_Handler+0xb78>)
 8001efa:	f7ff fac3 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_UDP \r\n",strlen("\r\n S0_SOCK_UDP \r\n"));
 8001efe:	4b45      	ldr	r3, [pc, #276]	; (8002014 <SysTick_Handler+0xb58>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d004      	beq.n	8001f10 <SysTick_Handler+0xa54>
 8001f06:	2211      	movs	r2, #17
 8001f08:	494a      	ldr	r1, [pc, #296]	; (8002034 <SysTick_Handler+0xb78>)
 8001f0a:	4844      	ldr	r0, [pc, #272]	; (800201c <SysTick_Handler+0xb60>)
 8001f0c:	f003 fb16 	bl	800553c <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001f10:	4b43      	ldr	r3, [pc, #268]	; (8002020 <SysTick_Handler+0xb64>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f16:	e047      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_IPRAW \r\n",strlen("\r\n S0_SOCK_IPRAW \r\n"));
 8001f18:	4b3c      	ldr	r3, [pc, #240]	; (800200c <SysTick_Handler+0xb50>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <SysTick_Handler+0xa6c>
 8001f20:	2113      	movs	r1, #19
 8001f22:	4845      	ldr	r0, [pc, #276]	; (8002038 <SysTick_Handler+0xb7c>)
 8001f24:	f7ff faae 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_IPRAW \r\n",strlen("\r\n S0_SOCK_IPRAW \r\n"));
 8001f28:	4b3a      	ldr	r3, [pc, #232]	; (8002014 <SysTick_Handler+0xb58>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d004      	beq.n	8001f3a <SysTick_Handler+0xa7e>
 8001f30:	2213      	movs	r2, #19
 8001f32:	4941      	ldr	r1, [pc, #260]	; (8002038 <SysTick_Handler+0xb7c>)
 8001f34:	4839      	ldr	r0, [pc, #228]	; (800201c <SysTick_Handler+0xb60>)
 8001f36:	f003 fb01 	bl	800553c <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001f3a:	4b39      	ldr	r3, [pc, #228]	; (8002020 <SysTick_Handler+0xb64>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f40:	e032      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_MACRAW \r\n",strlen("\r\n S0_SOCK_MACRAW \r\n"));
 8001f42:	4b32      	ldr	r3, [pc, #200]	; (800200c <SysTick_Handler+0xb50>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <SysTick_Handler+0xa96>
 8001f4a:	2114      	movs	r1, #20
 8001f4c:	483b      	ldr	r0, [pc, #236]	; (800203c <SysTick_Handler+0xb80>)
 8001f4e:	f7ff fa99 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_MACRAW \r\n",strlen("\r\n S0_SOCK_MACRAW \r\n"));
 8001f52:	4b30      	ldr	r3, [pc, #192]	; (8002014 <SysTick_Handler+0xb58>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d004      	beq.n	8001f64 <SysTick_Handler+0xaa8>
 8001f5a:	2214      	movs	r2, #20
 8001f5c:	4937      	ldr	r1, [pc, #220]	; (800203c <SysTick_Handler+0xb80>)
 8001f5e:	482f      	ldr	r0, [pc, #188]	; (800201c <SysTick_Handler+0xb60>)
 8001f60:	f003 faec 	bl	800553c <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001f64:	4b2e      	ldr	r3, [pc, #184]	; (8002020 <SysTick_Handler+0xb64>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f6a:	e01d      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_PPOE \r\n",strlen("\r\n S0_SOCK_PPOE \r\n"));
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <SysTick_Handler+0xb50>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <SysTick_Handler+0xac0>
 8001f74:	2112      	movs	r1, #18
 8001f76:	4832      	ldr	r0, [pc, #200]	; (8002040 <SysTick_Handler+0xb84>)
 8001f78:	f7ff fa84 	bl	8001484 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_PPOE \r\n",strlen("\r\n S0_SOCK_UDP \r\n"));
 8001f7c:	4b25      	ldr	r3, [pc, #148]	; (8002014 <SysTick_Handler+0xb58>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <SysTick_Handler+0xad2>
 8001f84:	2211      	movs	r2, #17
 8001f86:	492e      	ldr	r1, [pc, #184]	; (8002040 <SysTick_Handler+0xb84>)
 8001f88:	4824      	ldr	r0, [pc, #144]	; (800201c <SysTick_Handler+0xb60>)
 8001f8a:	f003 fad7 	bl	800553c <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001f8e:	4b24      	ldr	r3, [pc, #144]	; (8002020 <SysTick_Handler+0xb64>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f94:	e008      	b.n	8001fa8 <SysTick_Handler+0xaec>
	  }
	  }else
	  	  {
		  //ETH.operacion=SPI_READ;
		  //ETH.TX[3]=0x00;
		  SPI_ETH(&ETH);
 8001f96:	4822      	ldr	r0, [pc, #136]	; (8002020 <SysTick_Handler+0xb64>)
 8001f98:	f00b f86b 	bl	800d072 <SPI_ETH>
 8001f9c:	e004      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 default:
 8001f9e:	bf00      	nop
 8001fa0:	e002      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 break;
 8001fa2:	bf00      	nop
 8001fa4:	e000      	b.n	8001fa8 <SysTick_Handler+0xaec>
			 break;
 8001fa6:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001fa8:	4b26      	ldr	r3, [pc, #152]	; (8002044 <SysTick_Handler+0xb88>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d102      	bne.n	8001fb6 <SysTick_Handler+0xafa>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001fb0:	4b24      	ldr	r3, [pc, #144]	; (8002044 <SysTick_Handler+0xb88>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
		  }
  }

if(EN_USART1_TMR==1) USART1_ticks++;
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <SysTick_Handler+0xb8c>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d104      	bne.n	8001fc8 <SysTick_Handler+0xb0c>
 8001fbe:	4b23      	ldr	r3, [pc, #140]	; (800204c <SysTick_Handler+0xb90>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	4a21      	ldr	r2, [pc, #132]	; (800204c <SysTick_Handler+0xb90>)
 8001fc6:	6013      	str	r3, [r2, #0]

if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001fc8:	4b20      	ldr	r3, [pc, #128]	; (800204c <SysTick_Handler+0xb90>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	dd0f      	ble.n	8001ff0 <SysTick_Handler+0xb34>
{
	USART1_ticks=0;
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	; (800204c <SysTick_Handler+0xb90>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
	FLAG_USART1=1;
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <SysTick_Handler+0xb94>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
	EN_USART1_TMR=0;
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <SysTick_Handler+0xb8c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
	items_rx=uart1pass;
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <SysTick_Handler+0xb98>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <SysTick_Handler+0xb9c>)
 8001fe8:	6013      	str	r3, [r2, #0]
	uart1pass=0;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <SysTick_Handler+0xb98>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff0:	f000 fd3e 	bl	8002a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <SysTick_Handler+0xba0>)
 8001ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	d132      	bne.n	8002064 <SysTick_Handler+0xba8>
	{
		ticks++;
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <SysTick_Handler+0xba4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	4a16      	ldr	r2, [pc, #88]	; (8002060 <SysTick_Handler+0xba4>)
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e02f      	b.n	800206a <SysTick_Handler+0xbae>
 800200a:	bf00      	nop
 800200c:	200041c4 	.word	0x200041c4
 8002010:	080107a4 	.word	0x080107a4
 8002014:	20000021 	.word	0x20000021
 8002018:	080107bc 	.word	0x080107bc
 800201c:	200002b8 	.word	0x200002b8
 8002020:	20000304 	.word	0x20000304
 8002024:	200041d4 	.word	0x200041d4
 8002028:	080107d8 	.word	0x080107d8
 800202c:	080107f0 	.word	0x080107f0
 8002030:	0801080c 	.word	0x0801080c
 8002034:	08010824 	.word	0x08010824
 8002038:	08010838 	.word	0x08010838
 800203c:	0801084c 	.word	0x0801084c
 8002040:	08010864 	.word	0x08010864
 8002044:	20000300 	.word	0x20000300
 8002048:	20004219 	.word	0x20004219
 800204c:	2000464c 	.word	0x2000464c
 8002050:	20004650 	.word	0x20004650
 8002054:	20004648 	.word	0x20004648
 8002058:	20004654 	.word	0x20004654
 800205c:	200023d4 	.word	0x200023d4
 8002060:	20004640 	.word	0x20004640
	}
	else
	{
		ticks=0;
 8002064:	4b34      	ldr	r3, [pc, #208]	; (8002138 <SysTick_Handler+0xc7c>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
	}

	if(wf._ejecucion==1)
 800206a:	4b34      	ldr	r3, [pc, #208]	; (800213c <SysTick_Handler+0xc80>)
 800206c:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8002070:	2b01      	cmp	r3, #1
 8002072:	d158      	bne.n	8002126 <SysTick_Handler+0xc6a>
		{
			if (FLAG_TIMEOUT!=1)
 8002074:	4b32      	ldr	r3, [pc, #200]	; (8002140 <SysTick_Handler+0xc84>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d017      	beq.n	80020ac <SysTick_Handler+0xbf0>
			{
				if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 800207c:	4b2f      	ldr	r3, [pc, #188]	; (800213c <SysTick_Handler+0xc80>)
 800207e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8002082:	2b02      	cmp	r3, #2
 8002084:	d006      	beq.n	8002094 <SysTick_Handler+0xbd8>
 8002086:	4b2d      	ldr	r3, [pc, #180]	; (800213c <SysTick_Handler+0xc80>)
 8002088:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800208c:	3301      	adds	r3, #1
 800208e:	4a2b      	ldr	r2, [pc, #172]	; (800213c <SysTick_Handler+0xc80>)
 8002090:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
				if(wf._instruccion==2) wf._ticks2++;
 8002094:	4b29      	ldr	r3, [pc, #164]	; (800213c <SysTick_Handler+0xc80>)
 8002096:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800209a:	2b02      	cmp	r3, #2
 800209c:	d106      	bne.n	80020ac <SysTick_Handler+0xbf0>
 800209e:	4b27      	ldr	r3, [pc, #156]	; (800213c <SysTick_Handler+0xc80>)
 80020a0:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a25      	ldr	r2, [pc, #148]	; (800213c <SysTick_Handler+0xc80>)
 80020a8:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
			}


			if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 80020ac:	4b23      	ldr	r3, [pc, #140]	; (800213c <SysTick_Handler+0xc80>)
 80020ae:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d018      	beq.n	80020e8 <SysTick_Handler+0xc2c>
 80020b6:	4b21      	ldr	r3, [pc, #132]	; (800213c <SysTick_Handler+0xc80>)
 80020b8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80020bc:	f241 527c 	movw	r2, #5500	; 0x157c
 80020c0:	4293      	cmp	r3, r2
 80020c2:	dd11      	ble.n	80020e8 <SysTick_Handler+0xc2c>
			{
				FLAG_TIMEOUT=1;
 80020c4:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <SysTick_Handler+0xc84>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
				if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <SysTick_Handler+0xc88>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f242 020c 	movw	r2, #8204	; 0x200c
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d107      	bne.n	80020e8 <SysTick_Handler+0xc2c>
				{
					HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 80020d8:	2201      	movs	r2, #1
 80020da:	491b      	ldr	r1, [pc, #108]	; (8002148 <SysTick_Handler+0xc8c>)
 80020dc:	4819      	ldr	r0, [pc, #100]	; (8002144 <SysTick_Handler+0xc88>)
 80020de:	f003 fa72 	bl	80055c6 <HAL_UART_Receive_IT>
					EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <SysTick_Handler+0xc90>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
				}
				//wf._ticks=0;
			}
			if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <SysTick_Handler+0xc80>)
 80020ea:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d11d      	bne.n	800212e <SysTick_Handler+0xc72>
 80020f2:	4b12      	ldr	r3, [pc, #72]	; (800213c <SysTick_Handler+0xc80>)
 80020f4:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80020f8:	f245 0214 	movw	r2, #20500	; 0x5014
 80020fc:	4293      	cmp	r3, r2
 80020fe:	dd16      	ble.n	800212e <SysTick_Handler+0xc72>
			{
				FLAG_TIMEOUT=1;
 8002100:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <SysTick_Handler+0xc84>)
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]
				if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <SysTick_Handler+0xc88>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f242 020c 	movw	r2, #8204	; 0x200c
 8002110:	4293      	cmp	r3, r2
 8002112:	d10c      	bne.n	800212e <SysTick_Handler+0xc72>
				{
					HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8002114:	2201      	movs	r2, #1
 8002116:	490c      	ldr	r1, [pc, #48]	; (8002148 <SysTick_Handler+0xc8c>)
 8002118:	480a      	ldr	r0, [pc, #40]	; (8002144 <SysTick_Handler+0xc88>)
 800211a:	f003 fa54 	bl	80055c6 <HAL_UART_Receive_IT>
					EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <SysTick_Handler+0xc90>)
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
		else
		{
			wf._ticks=0;
		}
  /* USER CODE END SysTick_IRQn 1 */
}
 8002124:	e003      	b.n	800212e <SysTick_Handler+0xc72>
			wf._ticks=0;
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <SysTick_Handler+0xc80>)
 8002128:	2200      	movs	r2, #0
 800212a:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 800212e:	bf00      	nop
 8002130:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20004640 	.word	0x20004640
 800213c:	200023d4 	.word	0x200023d4
 8002140:	2000421a 	.word	0x2000421a
 8002144:	20000274 	.word	0x20000274
 8002148:	2000462c 	.word	0x2000462c
 800214c:	20004218 	.word	0x20004218

08002150 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a25      	ldr	r2, [pc, #148]	; (80021f4 <HAL_UART_ErrorCallback+0xa4>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d121      	bne.n	80021a6 <HAL_UART_ErrorCallback+0x56>
	{
		 volatile int aore=0;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 800216a:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <HAL_UART_ErrorCallback+0xa8>)
 800216c:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8002170:	3301      	adds	r3, #1
 8002172:	4a21      	ldr	r2, [pc, #132]	; (80021f8 <HAL_UART_ErrorCallback+0xa8>)
 8002174:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	613b      	str	r3, [r7, #16]


		 HAL_UART_Transmit_IT(&huart2,"\r\n ERROR HW UARRT1 \r\n",strlen("\r\n ERROR HW UARRT1 \r\n"));
 8002188:	2215      	movs	r2, #21
 800218a:	491c      	ldr	r1, [pc, #112]	; (80021fc <HAL_UART_ErrorCallback+0xac>)
 800218c:	481c      	ldr	r0, [pc, #112]	; (8002200 <HAL_UART_ErrorCallback+0xb0>)
 800218e:	f003 f9d5 	bl	800553c <HAL_UART_Transmit_IT>
		 HAL_UART_DeInit(ERRUART);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f003 f911 	bl	80053ba <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8002198:	f7ff f87a 	bl	8001290 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 800219c:	2201      	movs	r2, #1
 800219e:	4919      	ldr	r1, [pc, #100]	; (8002204 <HAL_UART_ErrorCallback+0xb4>)
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f003 fa10 	bl	80055c6 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a17      	ldr	r2, [pc, #92]	; (8002208 <HAL_UART_ErrorCallback+0xb8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d11c      	bne.n	80021ea <HAL_UART_ErrorCallback+0x9a>
	{
		 volatile int aore=0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <HAL_UART_ErrorCallback+0xa8>)
 80021ba:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 80021be:	3301      	adds	r3, #1
 80021c0:	4a0d      	ldr	r2, [pc, #52]	; (80021f8 <HAL_UART_ErrorCallback+0xa8>)
 80021c2:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f003 f8ef 	bl	80053ba <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 80021dc:	f7ff f882 	bl	80012e4 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 80021e0:	2201      	movs	r2, #1
 80021e2:	4908      	ldr	r1, [pc, #32]	; (8002204 <HAL_UART_ErrorCallback+0xb4>)
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f003 f9ee 	bl	80055c6 <HAL_UART_Receive_IT>
	}
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40011000 	.word	0x40011000
 80021f8:	200023d4 	.word	0x200023d4
 80021fc:	08010878 	.word	0x08010878
 8002200:	200002b8 	.word	0x200002b8
 8002204:	2000462c 	.word	0x2000462c
 8002208:	40004400 	.word	0x40004400

0800220c <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a15      	ldr	r2, [pc, #84]	; (8002270 <HAL_UART_RxCpltCallback+0x64>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d123      	bne.n	8002266 <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <HAL_UART_RxCpltCallback+0x68>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a15      	ldr	r2, [pc, #84]	; (8002278 <HAL_UART_RxCpltCallback+0x6c>)
 8002224:	7811      	ldrb	r1, [r2, #0]
 8002226:	4a15      	ldr	r2, [pc, #84]	; (800227c <HAL_UART_RxCpltCallback+0x70>)
 8002228:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 800222a:	4b12      	ldr	r3, [pc, #72]	; (8002274 <HAL_UART_RxCpltCallback+0x68>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	4a10      	ldr	r2, [pc, #64]	; (8002274 <HAL_UART_RxCpltCallback+0x68>)
 8002232:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 8002234:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <HAL_UART_RxCpltCallback+0x68>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800223c:	db03      	blt.n	8002246 <HAL_UART_RxCpltCallback+0x3a>
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_UART_RxCpltCallback+0x68>)
 8002240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002244:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8002246:	2100      	movs	r1, #0
 8002248:	480d      	ldr	r0, [pc, #52]	; (8002280 <HAL_UART_RxCpltCallback+0x74>)
 800224a:	f002 f8bd 	bl	80043c8 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 800224e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002252:	2201      	movs	r2, #1
 8002254:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_UART_RxCpltCallback+0x78>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 800225c:	2201      	movs	r2, #1
 800225e:	4906      	ldr	r1, [pc, #24]	; (8002278 <HAL_UART_RxCpltCallback+0x6c>)
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f003 f9b0 	bl	80055c6 <HAL_UART_Receive_IT>
		 }
 }
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40011000 	.word	0x40011000
 8002274:	2000465c 	.word	0x2000465c
 8002278:	2000462c 	.word	0x2000462c
 800227c:	20004228 	.word	0x20004228
 8002280:	2000022c 	.word	0x2000022c
 8002284:	20004218 	.word	0x20004218

08002288 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af02      	add	r7, sp, #8
 800228e:	6078      	str	r0, [r7, #4]

		if(TIMER->Instance==TIM2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002298:	d12d      	bne.n	80022f6 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 800229a:	2100      	movs	r1, #0
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f002 f991 	bl	80045c4 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 80022a2:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a16      	ldr	r2, [pc, #88]	; (800230c <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80022b4:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 80022b6:	4b14      	ldr	r3, [pc, #80]	; (8002308 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b12      	ldr	r3, [pc, #72]	; (8002314 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	2301      	movs	r3, #1
 80022ce:	4910      	ldr	r1, [pc, #64]	; (8002310 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80022d0:	4811      	ldr	r0, [pc, #68]	; (8002318 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 80022d2:	f00c fdf5 	bl	800eec0 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 80022d6:	2201      	movs	r2, #1
 80022d8:	4910      	ldr	r1, [pc, #64]	; (800231c <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 80022da:	4811      	ldr	r0, [pc, #68]	; (8002320 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 80022dc:	f003 f973 	bl	80055c6 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 80022e0:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 80022e2:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d105      	bne.n	80022f6 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 80022ea:	4b08      	ldr	r3, [pc, #32]	; (800230c <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4619      	mov	r1, r3
 80022f0:	4809      	ldr	r0, [pc, #36]	; (8002318 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 80022f2:	f7ff f8c7 	bl	8001484 <ITM0_Write>
				 }
		}
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	2000421b 	.word	0x2000421b
 8002304:	20004218 	.word	0x20004218
 8002308:	2000465c 	.word	0x2000465c
 800230c:	20004630 	.word	0x20004630
 8002310:	20004228 	.word	0x20004228
 8002314:	20004628 	.word	0x20004628
 8002318:	20004428 	.word	0x20004428
 800231c:	2000462c 	.word	0x2000462c
 8002320:	20000274 	.word	0x20000274
 8002324:	200023d4 	.word	0x200023d4

08002328 <ESP8266_HW_Init>:

uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af06      	add	r7, sp, #24
 800232e:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 8002330:	2364      	movs	r3, #100	; 0x64
 8002332:	220c      	movs	r2, #12
 8002334:	4946      	ldr	r1, [pc, #280]	; (8002450 <ESP8266_HW_Init+0x128>)
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f003 f86e 	bl	8005418 <HAL_UART_Transmit>
		  HAL_Delay(500);
 800233c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002340:	f000 fbb6 	bl	8002ab0 <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 8002344:	4b43      	ldr	r3, [pc, #268]	; (8002454 <ESP8266_HW_Init+0x12c>)
 8002346:	2205      	movs	r2, #5
 8002348:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART_RX_items;
 800234c:	4b42      	ldr	r3, [pc, #264]	; (8002458 <ESP8266_HW_Init+0x130>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a40      	ldr	r2, [pc, #256]	; (8002454 <ESP8266_HW_Init+0x12c>)
 8002352:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,510,FIND)!=1)
 8002356:	e00e      	b.n	8002376 <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 8002358:	4b3f      	ldr	r3, [pc, #252]	; (8002458 <ESP8266_HW_Init+0x130>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a3d      	ldr	r2, [pc, #244]	; (8002454 <ESP8266_HW_Init+0x12c>)
 800235e:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  	  if (ESP_ticks>=5000)
 8002362:	4b3e      	ldr	r3, [pc, #248]	; (800245c <ESP8266_HW_Init+0x134>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f241 3287 	movw	r2, #4999	; 0x1387
 800236a:	4293      	cmp	r3, r2
 800236c:	dd03      	ble.n	8002376 <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 800236e:	4b3c      	ldr	r3, [pc, #240]	; (8002460 <ESP8266_HW_Init+0x138>)
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
			  		 break;
 8002374:	e015      	b.n	80023a2 <ESP8266_HW_Init+0x7a>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,510,FIND)!=1)
 8002376:	2300      	movs	r3, #0
 8002378:	9305      	str	r3, [sp, #20]
 800237a:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 800237e:	9304      	str	r3, [sp, #16]
 8002380:	4b38      	ldr	r3, [pc, #224]	; (8002464 <ESP8266_HW_Init+0x13c>)
 8002382:	9303      	str	r3, [sp, #12]
 8002384:	4b38      	ldr	r3, [pc, #224]	; (8002468 <ESP8266_HW_Init+0x140>)
 8002386:	9302      	str	r3, [sp, #8]
 8002388:	4b38      	ldr	r3, [pc, #224]	; (800246c <ESP8266_HW_Init+0x144>)
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	4b38      	ldr	r3, [pc, #224]	; (8002470 <ESP8266_HW_Init+0x148>)
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	4b38      	ldr	r3, [pc, #224]	; (8002474 <ESP8266_HW_Init+0x14c>)
 8002392:	4a39      	ldr	r2, [pc, #228]	; (8002478 <ESP8266_HW_Init+0x150>)
 8002394:	4939      	ldr	r1, [pc, #228]	; (800247c <ESP8266_HW_Init+0x154>)
 8002396:	483a      	ldr	r0, [pc, #232]	; (8002480 <ESP8266_HW_Init+0x158>)
 8002398:	f00c f9c6 	bl	800e728 <FT_String_ND>
 800239c:	4603      	mov	r3, r0
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d1da      	bne.n	8002358 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 80023a2:	4b2f      	ldr	r3, [pc, #188]	; (8002460 <ESP8266_HW_Init+0x138>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d12c      	bne.n	8002404 <ESP8266_HW_Init+0xdc>
		  {
			  wf._n_fcomp=strlen("ready");
 80023aa:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <ESP8266_HW_Init+0x12c>)
 80023ac:	2205      	movs	r2, #5
 80023ae:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			  wf._n_orig=UART_RX_items;
 80023b2:	4b29      	ldr	r3, [pc, #164]	; (8002458 <ESP8266_HW_Init+0x130>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a27      	ldr	r2, [pc, #156]	; (8002454 <ESP8266_HW_Init+0x12c>)
 80023b8:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,510,FIND)!=1)
 80023bc:	e00a      	b.n	80023d4 <ESP8266_HW_Init+0xac>
			  {
				  wf._n_orig=UART_RX_items;
 80023be:	4b26      	ldr	r3, [pc, #152]	; (8002458 <ESP8266_HW_Init+0x130>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a24      	ldr	r2, [pc, #144]	; (8002454 <ESP8266_HW_Init+0x12c>)
 80023c4:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 80023c8:	4b24      	ldr	r3, [pc, #144]	; (800245c <ESP8266_HW_Init+0x134>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f241 3287 	movw	r2, #4999	; 0x1387
 80023d0:	4293      	cmp	r3, r2
 80023d2:	dc16      	bgt.n	8002402 <ESP8266_HW_Init+0xda>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,510,FIND)!=1)
 80023d4:	2300      	movs	r3, #0
 80023d6:	9305      	str	r3, [sp, #20]
 80023d8:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80023dc:	9304      	str	r3, [sp, #16]
 80023de:	4b21      	ldr	r3, [pc, #132]	; (8002464 <ESP8266_HW_Init+0x13c>)
 80023e0:	9303      	str	r3, [sp, #12]
 80023e2:	4b21      	ldr	r3, [pc, #132]	; (8002468 <ESP8266_HW_Init+0x140>)
 80023e4:	9302      	str	r3, [sp, #8]
 80023e6:	4b21      	ldr	r3, [pc, #132]	; (800246c <ESP8266_HW_Init+0x144>)
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	4b21      	ldr	r3, [pc, #132]	; (8002470 <ESP8266_HW_Init+0x148>)
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	4b21      	ldr	r3, [pc, #132]	; (8002474 <ESP8266_HW_Init+0x14c>)
 80023f0:	4a21      	ldr	r2, [pc, #132]	; (8002478 <ESP8266_HW_Init+0x150>)
 80023f2:	4922      	ldr	r1, [pc, #136]	; (800247c <ESP8266_HW_Init+0x154>)
 80023f4:	4822      	ldr	r0, [pc, #136]	; (8002480 <ESP8266_HW_Init+0x158>)
 80023f6:	f00c f997 	bl	800e728 <FT_String_ND>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d1de      	bne.n	80023be <ESP8266_HW_Init+0x96>
 8002400:	e000      	b.n	8002404 <ESP8266_HW_Init+0xdc>
					 {
					 break;
 8002402:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <ESP8266_HW_Init+0x134>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f241 3287 	movw	r2, #4999	; 0x1387
 800240c:	4293      	cmp	r3, r2
 800240e:	dc06      	bgt.n	800241e <ESP8266_HW_Init+0xf6>
		  {
			  ESP_REinit=10;
 8002410:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <ESP8266_HW_Init+0x15c>)
 8002412:	220a      	movs	r2, #10
 8002414:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <ESP8266_HW_Init+0x134>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e008      	b.n	8002430 <ESP8266_HW_Init+0x108>
		  }
		  else
		  {
			  ESP_REinit++;
 800241e:	4b19      	ldr	r3, [pc, #100]	; (8002484 <ESP8266_HW_Init+0x15c>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	3301      	adds	r3, #1
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <ESP8266_HW_Init+0x15c>)
 8002428:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <ESP8266_HW_Init+0x134>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <ESP8266_HW_Init+0x15c>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b05      	cmp	r3, #5
 8002436:	f67f af7b 	bls.w	8002330 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <ESP8266_HW_Init+0x15c>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b0a      	cmp	r3, #10
 8002440:	d101      	bne.n	8002446 <ESP8266_HW_Init+0x11e>
	  {
		  return(1);
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <ESP8266_HW_Init+0x120>
	  }
	  else
	  {
		  return(0);
 8002446:	2300      	movs	r3, #0
	  }
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	08010890 	.word	0x08010890
 8002454:	200023d4 	.word	0x200023d4
 8002458:	20004630 	.word	0x20004630
 800245c:	20004634 	.word	0x20004634
 8002460:	20004216 	.word	0x20004216
 8002464:	20002e68 	.word	0x20002e68
 8002468:	20004644 	.word	0x20004644
 800246c:	200030b4 	.word	0x200030b4
 8002470:	20002c68 	.word	0x20002c68
 8002474:	200030c0 	.word	0x200030c0
 8002478:	080108a0 	.word	0x080108a0
 800247c:	200030ac 	.word	0x200030ac
 8002480:	20004428 	.word	0x20004428
 8002484:	20004215 	.word	0x20004215

08002488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800248c:	b672      	cpsid	i
}
 800248e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002490:	e7fe      	b.n	8002490 <Error_Handler+0x8>
	...

08002494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <HAL_MspInit+0x4c>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	4a0f      	ldr	r2, [pc, #60]	; (80024e0 <HAL_MspInit+0x4c>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a8:	6453      	str	r3, [r2, #68]	; 0x44
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <HAL_MspInit+0x4c>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b2:	607b      	str	r3, [r7, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	603b      	str	r3, [r7, #0]
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_MspInit+0x4c>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	4a08      	ldr	r2, [pc, #32]	; (80024e0 <HAL_MspInit+0x4c>)
 80024c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c4:	6413      	str	r3, [r2, #64]	; 0x40
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_MspInit+0x4c>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800

080024e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	; 0x28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a19      	ldr	r2, [pc, #100]	; (8002568 <HAL_SPI_MspInit+0x84>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d12b      	bne.n	800255e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	4b18      	ldr	r3, [pc, #96]	; (800256c <HAL_SPI_MspInit+0x88>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	4a17      	ldr	r2, [pc, #92]	; (800256c <HAL_SPI_MspInit+0x88>)
 8002510:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002514:	6453      	str	r3, [r2, #68]	; 0x44
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_SPI_MspInit+0x88>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_SPI_MspInit+0x88>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4a10      	ldr	r2, [pc, #64]	; (800256c <HAL_SPI_MspInit+0x88>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <HAL_SPI_MspInit+0x88>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800253e:	23e0      	movs	r3, #224	; 0xe0
 8002540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	2302      	movs	r3, #2
 8002544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254a:	2303      	movs	r3, #3
 800254c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800254e:	2305      	movs	r3, #5
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002552:	f107 0314 	add.w	r3, r7, #20
 8002556:	4619      	mov	r1, r3
 8002558:	4805      	ldr	r0, [pc, #20]	; (8002570 <HAL_SPI_MspInit+0x8c>)
 800255a:	f000 fca3 	bl	8002ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800255e:	bf00      	nop
 8002560:	3728      	adds	r7, #40	; 0x28
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40013000 	.word	0x40013000
 800256c:	40023800 	.word	0x40023800
 8002570:	40020000 	.word	0x40020000

08002574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002584:	d115      	bne.n	80025b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_TIM_Base_MspInit+0x48>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a0b      	ldr	r2, [pc, #44]	; (80025bc <HAL_TIM_Base_MspInit+0x48>)
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_TIM_Base_MspInit+0x48>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	201c      	movs	r0, #28
 80025a8:	f000 fba5 	bl	8002cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025ac:	201c      	movs	r0, #28
 80025ae:	f000 fbbe 	bl	8002d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025b2:	bf00      	nop
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800

080025c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	; 0x30
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 031c 	add.w	r3, r7, #28
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a3a      	ldr	r2, [pc, #232]	; (80026c8 <HAL_UART_MspInit+0x108>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d135      	bne.n	800264e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	4b39      	ldr	r3, [pc, #228]	; (80026cc <HAL_UART_MspInit+0x10c>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	4a38      	ldr	r2, [pc, #224]	; (80026cc <HAL_UART_MspInit+0x10c>)
 80025ec:	f043 0310 	orr.w	r3, r3, #16
 80025f0:	6453      	str	r3, [r2, #68]	; 0x44
 80025f2:	4b36      	ldr	r3, [pc, #216]	; (80026cc <HAL_UART_MspInit+0x10c>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	61bb      	str	r3, [r7, #24]
 80025fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	4b32      	ldr	r3, [pc, #200]	; (80026cc <HAL_UART_MspInit+0x10c>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a31      	ldr	r2, [pc, #196]	; (80026cc <HAL_UART_MspInit+0x10c>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <HAL_UART_MspInit+0x10c>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = WF_TX_Pin|WF_RX_Pin;
 800261a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800261e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800262c:	2307      	movs	r3, #7
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002630:	f107 031c 	add.w	r3, r7, #28
 8002634:	4619      	mov	r1, r3
 8002636:	4826      	ldr	r0, [pc, #152]	; (80026d0 <HAL_UART_MspInit+0x110>)
 8002638:	f000 fc34 	bl	8002ea4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	2100      	movs	r1, #0
 8002640:	2025      	movs	r0, #37	; 0x25
 8002642:	f000 fb58 	bl	8002cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002646:	2025      	movs	r0, #37	; 0x25
 8002648:	f000 fb71 	bl	8002d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800264c:	e038      	b.n	80026c0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a20      	ldr	r2, [pc, #128]	; (80026d4 <HAL_UART_MspInit+0x114>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d133      	bne.n	80026c0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002658:	2300      	movs	r3, #0
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_UART_MspInit+0x10c>)
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	4a1a      	ldr	r2, [pc, #104]	; (80026cc <HAL_UART_MspInit+0x10c>)
 8002662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002666:	6413      	str	r3, [r2, #64]	; 0x40
 8002668:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_UART_MspInit+0x10c>)
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	4b14      	ldr	r3, [pc, #80]	; (80026cc <HAL_UART_MspInit+0x10c>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	4a13      	ldr	r2, [pc, #76]	; (80026cc <HAL_UART_MspInit+0x10c>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6313      	str	r3, [r2, #48]	; 0x30
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_UART_MspInit+0x10c>)
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PORT2TX_Pin|PORT2_RX_Pin;
 8002690:	230c      	movs	r3, #12
 8002692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269c:	2303      	movs	r3, #3
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026a0:	2307      	movs	r3, #7
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a4:	f107 031c 	add.w	r3, r7, #28
 80026a8:	4619      	mov	r1, r3
 80026aa:	4809      	ldr	r0, [pc, #36]	; (80026d0 <HAL_UART_MspInit+0x110>)
 80026ac:	f000 fbfa 	bl	8002ea4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026b0:	2200      	movs	r2, #0
 80026b2:	2100      	movs	r1, #0
 80026b4:	2026      	movs	r0, #38	; 0x26
 80026b6:	f000 fb1e 	bl	8002cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026ba:	2026      	movs	r0, #38	; 0x26
 80026bc:	f000 fb37 	bl	8002d2e <HAL_NVIC_EnableIRQ>
}
 80026c0:	bf00      	nop
 80026c2:	3730      	adds	r7, #48	; 0x30
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40011000 	.word	0x40011000
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020000 	.word	0x40020000
 80026d4:	40004400 	.word	0x40004400

080026d8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a13      	ldr	r2, [pc, #76]	; (8002734 <HAL_UART_MspDeInit+0x5c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d10e      	bne.n	8002708 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80026ea:	4b13      	ldr	r3, [pc, #76]	; (8002738 <HAL_UART_MspDeInit+0x60>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	4a12      	ldr	r2, [pc, #72]	; (8002738 <HAL_UART_MspDeInit+0x60>)
 80026f0:	f023 0310 	bic.w	r3, r3, #16
 80026f4:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, WF_TX_Pin|WF_RX_Pin);
 80026f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80026fa:	4810      	ldr	r0, [pc, #64]	; (800273c <HAL_UART_MspDeInit+0x64>)
 80026fc:	f000 fd56 	bl	80031ac <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002700:	2025      	movs	r0, #37	; 0x25
 8002702:	f000 fb22 	bl	8002d4a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002706:	e011      	b.n	800272c <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0c      	ldr	r2, [pc, #48]	; (8002740 <HAL_UART_MspDeInit+0x68>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10c      	bne.n	800272c <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_UART_MspDeInit+0x60>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <HAL_UART_MspDeInit+0x60>)
 8002718:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PORT2TX_Pin|PORT2_RX_Pin);
 800271e:	210c      	movs	r1, #12
 8002720:	4806      	ldr	r0, [pc, #24]	; (800273c <HAL_UART_MspDeInit+0x64>)
 8002722:	f000 fd43 	bl	80031ac <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002726:	2026      	movs	r0, #38	; 0x26
 8002728:	f000 fb0f 	bl	8002d4a <HAL_NVIC_DisableIRQ>
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40011000 	.word	0x40011000
 8002738:	40023800 	.word	0x40023800
 800273c:	40020000 	.word	0x40020000
 8002740:	40004400 	.word	0x40004400

08002744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002748:	e7fe      	b.n	8002748 <NMI_Handler+0x4>

0800274a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800274e:	e7fe      	b.n	800274e <HardFault_Handler+0x4>

08002750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <MemManage_Handler+0x4>

08002756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275a:	e7fe      	b.n	800275a <BusFault_Handler+0x4>

0800275c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <UsageFault_Handler+0x4>

08002762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002790:	4802      	ldr	r0, [pc, #8]	; (800279c <TIM2_IRQHandler+0x10>)
 8002792:	f002 f823 	bl	80047dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	2000022c 	.word	0x2000022c

080027a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <USART1_IRQHandler+0x10>)
 80027a6:	f002 ff3f 	bl	8005628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000274 	.word	0x20000274

080027b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <USART2_IRQHandler+0x10>)
 80027ba:	f002 ff35 	bl	8005628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200002b8 	.word	0x200002b8

080027c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
	return 1;
 80027cc:	2301      	movs	r3, #1
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <_kill>:

int _kill(int pid, int sig)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027e2:	f00c fe19 	bl	800f418 <__errno>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2216      	movs	r2, #22
 80027ea:	601a      	str	r2, [r3, #0]
	return -1;
 80027ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <_exit>:

void _exit (int status)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002800:	f04f 31ff 	mov.w	r1, #4294967295
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ffe7 	bl	80027d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800280a:	e7fe      	b.n	800280a <_exit+0x12>

0800280c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	e00a      	b.n	8002834 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800281e:	f3af 8000 	nop.w
 8002822:	4601      	mov	r1, r0
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	60ba      	str	r2, [r7, #8]
 800282a:	b2ca      	uxtb	r2, r1
 800282c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	3301      	adds	r3, #1
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	429a      	cmp	r2, r3
 800283a:	dbf0      	blt.n	800281e <_read+0x12>
	}

return len;
 800283c:	687b      	ldr	r3, [r7, #4]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	e009      	b.n	800286c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	60ba      	str	r2, [r7, #8]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	3301      	adds	r3, #1
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	429a      	cmp	r2, r3
 8002872:	dbf1      	blt.n	8002858 <_write+0x12>
	}
	return len;
 8002874:	687b      	ldr	r3, [r7, #4]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <_close>:

int _close(int file)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
	return -1;
 8002886:	f04f 33ff 	mov.w	r3, #4294967295
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028a6:	605a      	str	r2, [r3, #4]
	return 0;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <_isatty>:

int _isatty(int file)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
	return 1;
 80028be:	2301      	movs	r3, #1
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
	return 0;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
	...

080028e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f0:	4a14      	ldr	r2, [pc, #80]	; (8002944 <_sbrk+0x5c>)
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <_sbrk+0x60>)
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028fc:	4b13      	ldr	r3, [pc, #76]	; (800294c <_sbrk+0x64>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d102      	bne.n	800290a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002904:	4b11      	ldr	r3, [pc, #68]	; (800294c <_sbrk+0x64>)
 8002906:	4a12      	ldr	r2, [pc, #72]	; (8002950 <_sbrk+0x68>)
 8002908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <_sbrk+0x64>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	429a      	cmp	r2, r3
 8002916:	d207      	bcs.n	8002928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002918:	f00c fd7e 	bl	800f418 <__errno>
 800291c:	4603      	mov	r3, r0
 800291e:	220c      	movs	r2, #12
 8002920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002922:	f04f 33ff 	mov.w	r3, #4294967295
 8002926:	e009      	b.n	800293c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002928:	4b08      	ldr	r3, [pc, #32]	; (800294c <_sbrk+0x64>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800292e:	4b07      	ldr	r3, [pc, #28]	; (800294c <_sbrk+0x64>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	4a05      	ldr	r2, [pc, #20]	; (800294c <_sbrk+0x64>)
 8002938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800293a:	68fb      	ldr	r3, [r7, #12]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20020000 	.word	0x20020000
 8002948:	00000400 	.word	0x00000400
 800294c:	20004664 	.word	0x20004664
 8002950:	200047b8 	.word	0x200047b8

08002954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <SystemInit+0x20>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295e:	4a05      	ldr	r2, [pc, #20]	; (8002974 <SystemInit+0x20>)
 8002960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800297c:	480d      	ldr	r0, [pc, #52]	; (80029b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800297e:	490e      	ldr	r1, [pc, #56]	; (80029b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002980:	4a0e      	ldr	r2, [pc, #56]	; (80029bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002984:	e002      	b.n	800298c <LoopCopyDataInit>

08002986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800298a:	3304      	adds	r3, #4

0800298c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800298c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800298e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002990:	d3f9      	bcc.n	8002986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002992:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002994:	4c0b      	ldr	r4, [pc, #44]	; (80029c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002998:	e001      	b.n	800299e <LoopFillZerobss>

0800299a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800299a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800299c:	3204      	adds	r2, #4

0800299e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800299e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a0:	d3fb      	bcc.n	800299a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029a2:	f7ff ffd7 	bl	8002954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029a6:	f00c fd3d 	bl	800f424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029aa:	f7fd fe73 	bl	8000694 <main>
  bx  lr    
 80029ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80029b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b8:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 80029bc:	08010dcc 	.word	0x08010dcc
  ldr r2, =_sbss
 80029c0:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 80029c4:	200047b8 	.word	0x200047b8

080029c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029c8:	e7fe      	b.n	80029c8 <ADC_IRQHandler>
	...

080029cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029d0:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <HAL_Init+0x40>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0d      	ldr	r2, [pc, #52]	; (8002a0c <HAL_Init+0x40>)
 80029d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_Init+0x40>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <HAL_Init+0x40>)
 80029e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_Init+0x40>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <HAL_Init+0x40>)
 80029ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f4:	2003      	movs	r0, #3
 80029f6:	f000 f973 	bl	8002ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029fa:	200f      	movs	r0, #15
 80029fc:	f000 f808 	bl	8002a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a00:	f7ff fd48 	bl	8002494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023c00 	.word	0x40023c00

08002a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a18:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <HAL_InitTick+0x54>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_InitTick+0x58>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	4619      	mov	r1, r3
 8002a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f999 	bl	8002d66 <HAL_SYSTICK_Config>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e00e      	b.n	8002a5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b0f      	cmp	r3, #15
 8002a42:	d80a      	bhi.n	8002a5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a44:	2200      	movs	r2, #0
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	f000 f953 	bl	8002cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a50:	4a06      	ldr	r2, [pc, #24]	; (8002a6c <HAL_InitTick+0x5c>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e000      	b.n	8002a5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	200000a4 	.word	0x200000a4
 8002a68:	200000ac 	.word	0x200000ac
 8002a6c:	200000a8 	.word	0x200000a8

08002a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_IncTick+0x20>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_IncTick+0x24>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4413      	add	r3, r2
 8002a80:	4a04      	ldr	r2, [pc, #16]	; (8002a94 <HAL_IncTick+0x24>)
 8002a82:	6013      	str	r3, [r2, #0]
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	200000ac 	.word	0x200000ac
 8002a94:	20004668 	.word	0x20004668

08002a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_GetTick+0x14>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20004668 	.word	0x20004668

08002ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab8:	f7ff ffee 	bl	8002a98 <HAL_GetTick>
 8002abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac8:	d005      	beq.n	8002ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_Delay+0x44>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ad6:	bf00      	nop
 8002ad8:	f7ff ffde 	bl	8002a98 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d8f7      	bhi.n	8002ad8 <HAL_Delay+0x28>
  {
  }
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	200000ac 	.word	0x200000ac

08002af8 <__NVIC_SetPriorityGrouping>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <__NVIC_SetPriorityGrouping+0x44>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b14:	4013      	ands	r3, r2
 8002b16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2a:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <__NVIC_SetPriorityGrouping+0x44>)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	60d3      	str	r3, [r2, #12]
}
 8002b30:	bf00      	nop
 8002b32:	3714      	adds	r7, #20
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <__NVIC_GetPriorityGrouping>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b44:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <__NVIC_GetPriorityGrouping+0x18>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	0a1b      	lsrs	r3, r3, #8
 8002b4a:	f003 0307 	and.w	r3, r3, #7
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr
 8002b58:	e000ed00 	.word	0xe000ed00

08002b5c <__NVIC_EnableIRQ>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	db0b      	blt.n	8002b86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	f003 021f 	and.w	r2, r3, #31
 8002b74:	4907      	ldr	r1, [pc, #28]	; (8002b94 <__NVIC_EnableIRQ+0x38>)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	e000e100 	.word	0xe000e100

08002b98 <__NVIC_DisableIRQ>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	db12      	blt.n	8002bd0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	f003 021f 	and.w	r2, r3, #31
 8002bb0:	490a      	ldr	r1, [pc, #40]	; (8002bdc <__NVIC_DisableIRQ+0x44>)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	2001      	movs	r0, #1
 8002bba:	fa00 f202 	lsl.w	r2, r0, r2
 8002bbe:	3320      	adds	r3, #32
 8002bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002bc4:	f3bf 8f4f 	dsb	sy
}
 8002bc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002bca:	f3bf 8f6f 	isb	sy
}
 8002bce:	bf00      	nop
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000e100 	.word	0xe000e100

08002be0 <__NVIC_SetPriority>:
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	6039      	str	r1, [r7, #0]
 8002bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	db0a      	blt.n	8002c0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	490c      	ldr	r1, [pc, #48]	; (8002c2c <__NVIC_SetPriority+0x4c>)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	0112      	lsls	r2, r2, #4
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	440b      	add	r3, r1
 8002c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c08:	e00a      	b.n	8002c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	4908      	ldr	r1, [pc, #32]	; (8002c30 <__NVIC_SetPriority+0x50>)
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	3b04      	subs	r3, #4
 8002c18:	0112      	lsls	r2, r2, #4
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	761a      	strb	r2, [r3, #24]
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000e100 	.word	0xe000e100
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <NVIC_EncodePriority>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	b089      	sub	sp, #36	; 0x24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f1c3 0307 	rsb	r3, r3, #7
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	bf28      	it	cs
 8002c52:	2304      	movcs	r3, #4
 8002c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d902      	bls.n	8002c64 <NVIC_EncodePriority+0x30>
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3b03      	subs	r3, #3
 8002c62:	e000      	b.n	8002c66 <NVIC_EncodePriority+0x32>
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c68:	f04f 32ff 	mov.w	r2, #4294967295
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43da      	mvns	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	401a      	ands	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	fa01 f303 	lsl.w	r3, r1, r3
 8002c86:	43d9      	mvns	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c8c:	4313      	orrs	r3, r2
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3724      	adds	r7, #36	; 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <SysTick_Config>:
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cac:	d301      	bcc.n	8002cb2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e00f      	b.n	8002cd2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <SysTick_Config+0x40>)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cba:	210f      	movs	r1, #15
 8002cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc0:	f7ff ff8e 	bl	8002be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <SysTick_Config+0x40>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cca:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <SysTick_Config+0x40>)
 8002ccc:	2207      	movs	r2, #7
 8002cce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	e000e010 	.word	0xe000e010

08002ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ff05 	bl	8002af8 <__NVIC_SetPriorityGrouping>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b086      	sub	sp, #24
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d08:	f7ff ff1a 	bl	8002b40 <__NVIC_GetPriorityGrouping>
 8002d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	6978      	ldr	r0, [r7, #20]
 8002d14:	f7ff ff8e 	bl	8002c34 <NVIC_EncodePriority>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff5d 	bl	8002be0 <__NVIC_SetPriority>
}
 8002d26:	bf00      	nop
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	4603      	mov	r3, r0
 8002d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff0d 	bl	8002b5c <__NVIC_EnableIRQ>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	4603      	mov	r3, r0
 8002d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff1d 	bl	8002b98 <__NVIC_DisableIRQ>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff ff94 	bl	8002c9c <SysTick_Config>
 8002d74:	4603      	mov	r3, r0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d8c:	f7ff fe84 	bl	8002a98 <HAL_GetTick>
 8002d90:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d008      	beq.n	8002db0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2280      	movs	r2, #128	; 0x80
 8002da2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e052      	b.n	8002e56 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0216 	bic.w	r2, r2, #22
 8002dbe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dce:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d103      	bne.n	8002de0 <HAL_DMA_Abort+0x62>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d007      	beq.n	8002df0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0208 	bic.w	r2, r2, #8
 8002dee:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0201 	bic.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e00:	e013      	b.n	8002e2a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e02:	f7ff fe49 	bl	8002a98 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b05      	cmp	r3, #5
 8002e0e:	d90c      	bls.n	8002e2a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2220      	movs	r2, #32
 8002e14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2203      	movs	r2, #3
 8002e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e015      	b.n	8002e56 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e4      	bne.n	8002e02 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3c:	223f      	movs	r2, #63	; 0x3f
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d004      	beq.n	8002e7c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2280      	movs	r2, #128	; 0x80
 8002e76:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e00c      	b.n	8002e96 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2205      	movs	r2, #5
 8002e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0201 	bic.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b089      	sub	sp, #36	; 0x24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	e159      	b.n	8003174 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	f040 8148 	bne.w	800316e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d005      	beq.n	8002ef6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d130      	bne.n	8002f58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	2203      	movs	r2, #3
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	f003 0201 	and.w	r2, r3, #1
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d017      	beq.n	8002f94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	2203      	movs	r2, #3
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d123      	bne.n	8002fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	08da      	lsrs	r2, r3, #3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3208      	adds	r2, #8
 8002fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	220f      	movs	r2, #15
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	08da      	lsrs	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3208      	adds	r2, #8
 8002fe2:	69b9      	ldr	r1, [r7, #24]
 8002fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0203 	and.w	r2, r3, #3
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80a2 	beq.w	800316e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b57      	ldr	r3, [pc, #348]	; (800318c <HAL_GPIO_Init+0x2e8>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	4a56      	ldr	r2, [pc, #344]	; (800318c <HAL_GPIO_Init+0x2e8>)
 8003034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003038:	6453      	str	r3, [r2, #68]	; 0x44
 800303a:	4b54      	ldr	r3, [pc, #336]	; (800318c <HAL_GPIO_Init+0x2e8>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003046:	4a52      	ldr	r2, [pc, #328]	; (8003190 <HAL_GPIO_Init+0x2ec>)
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	3302      	adds	r3, #2
 800304e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	220f      	movs	r2, #15
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a49      	ldr	r2, [pc, #292]	; (8003194 <HAL_GPIO_Init+0x2f0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d019      	beq.n	80030a6 <HAL_GPIO_Init+0x202>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a48      	ldr	r2, [pc, #288]	; (8003198 <HAL_GPIO_Init+0x2f4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d013      	beq.n	80030a2 <HAL_GPIO_Init+0x1fe>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a47      	ldr	r2, [pc, #284]	; (800319c <HAL_GPIO_Init+0x2f8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00d      	beq.n	800309e <HAL_GPIO_Init+0x1fa>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a46      	ldr	r2, [pc, #280]	; (80031a0 <HAL_GPIO_Init+0x2fc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d007      	beq.n	800309a <HAL_GPIO_Init+0x1f6>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a45      	ldr	r2, [pc, #276]	; (80031a4 <HAL_GPIO_Init+0x300>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d101      	bne.n	8003096 <HAL_GPIO_Init+0x1f2>
 8003092:	2304      	movs	r3, #4
 8003094:	e008      	b.n	80030a8 <HAL_GPIO_Init+0x204>
 8003096:	2307      	movs	r3, #7
 8003098:	e006      	b.n	80030a8 <HAL_GPIO_Init+0x204>
 800309a:	2303      	movs	r3, #3
 800309c:	e004      	b.n	80030a8 <HAL_GPIO_Init+0x204>
 800309e:	2302      	movs	r3, #2
 80030a0:	e002      	b.n	80030a8 <HAL_GPIO_Init+0x204>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <HAL_GPIO_Init+0x204>
 80030a6:	2300      	movs	r3, #0
 80030a8:	69fa      	ldr	r2, [r7, #28]
 80030aa:	f002 0203 	and.w	r2, r2, #3
 80030ae:	0092      	lsls	r2, r2, #2
 80030b0:	4093      	lsls	r3, r2
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030b8:	4935      	ldr	r1, [pc, #212]	; (8003190 <HAL_GPIO_Init+0x2ec>)
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	089b      	lsrs	r3, r3, #2
 80030be:	3302      	adds	r3, #2
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030c6:	4b38      	ldr	r3, [pc, #224]	; (80031a8 <HAL_GPIO_Init+0x304>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ea:	4a2f      	ldr	r2, [pc, #188]	; (80031a8 <HAL_GPIO_Init+0x304>)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030f0:	4b2d      	ldr	r3, [pc, #180]	; (80031a8 <HAL_GPIO_Init+0x304>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003114:	4a24      	ldr	r2, [pc, #144]	; (80031a8 <HAL_GPIO_Init+0x304>)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800311a:	4b23      	ldr	r3, [pc, #140]	; (80031a8 <HAL_GPIO_Init+0x304>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800313e:	4a1a      	ldr	r2, [pc, #104]	; (80031a8 <HAL_GPIO_Init+0x304>)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003144:	4b18      	ldr	r3, [pc, #96]	; (80031a8 <HAL_GPIO_Init+0x304>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003168:	4a0f      	ldr	r2, [pc, #60]	; (80031a8 <HAL_GPIO_Init+0x304>)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3301      	adds	r3, #1
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	2b0f      	cmp	r3, #15
 8003178:	f67f aea2 	bls.w	8002ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	3724      	adds	r7, #36	; 0x24
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	40013800 	.word	0x40013800
 8003194:	40020000 	.word	0x40020000
 8003198:	40020400 	.word	0x40020400
 800319c:	40020800 	.word	0x40020800
 80031a0:	40020c00 	.word	0x40020c00
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40013c00 	.word	0x40013c00

080031ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b087      	sub	sp, #28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80031be:	2300      	movs	r3, #0
 80031c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	e0bb      	b.n	8003340 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031c8:	2201      	movs	r2, #1
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	429a      	cmp	r2, r3
 80031e0:	f040 80ab 	bne.w	800333a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80031e4:	4a5c      	ldr	r2, [pc, #368]	; (8003358 <HAL_GPIO_DeInit+0x1ac>)
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	089b      	lsrs	r3, r3, #2
 80031ea:	3302      	adds	r3, #2
 80031ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	220f      	movs	r2, #15
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	4013      	ands	r3, r2
 8003204:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a54      	ldr	r2, [pc, #336]	; (800335c <HAL_GPIO_DeInit+0x1b0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d019      	beq.n	8003242 <HAL_GPIO_DeInit+0x96>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a53      	ldr	r2, [pc, #332]	; (8003360 <HAL_GPIO_DeInit+0x1b4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <HAL_GPIO_DeInit+0x92>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a52      	ldr	r2, [pc, #328]	; (8003364 <HAL_GPIO_DeInit+0x1b8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d00d      	beq.n	800323a <HAL_GPIO_DeInit+0x8e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a51      	ldr	r2, [pc, #324]	; (8003368 <HAL_GPIO_DeInit+0x1bc>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d007      	beq.n	8003236 <HAL_GPIO_DeInit+0x8a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a50      	ldr	r2, [pc, #320]	; (800336c <HAL_GPIO_DeInit+0x1c0>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d101      	bne.n	8003232 <HAL_GPIO_DeInit+0x86>
 800322e:	2304      	movs	r3, #4
 8003230:	e008      	b.n	8003244 <HAL_GPIO_DeInit+0x98>
 8003232:	2307      	movs	r3, #7
 8003234:	e006      	b.n	8003244 <HAL_GPIO_DeInit+0x98>
 8003236:	2303      	movs	r3, #3
 8003238:	e004      	b.n	8003244 <HAL_GPIO_DeInit+0x98>
 800323a:	2302      	movs	r3, #2
 800323c:	e002      	b.n	8003244 <HAL_GPIO_DeInit+0x98>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_GPIO_DeInit+0x98>
 8003242:	2300      	movs	r3, #0
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	f002 0203 	and.w	r2, r2, #3
 800324a:	0092      	lsls	r2, r2, #2
 800324c:	4093      	lsls	r3, r2
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	429a      	cmp	r2, r3
 8003252:	d132      	bne.n	80032ba <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003254:	4b46      	ldr	r3, [pc, #280]	; (8003370 <HAL_GPIO_DeInit+0x1c4>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	43db      	mvns	r3, r3
 800325c:	4944      	ldr	r1, [pc, #272]	; (8003370 <HAL_GPIO_DeInit+0x1c4>)
 800325e:	4013      	ands	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003262:	4b43      	ldr	r3, [pc, #268]	; (8003370 <HAL_GPIO_DeInit+0x1c4>)
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	43db      	mvns	r3, r3
 800326a:	4941      	ldr	r1, [pc, #260]	; (8003370 <HAL_GPIO_DeInit+0x1c4>)
 800326c:	4013      	ands	r3, r2
 800326e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003270:	4b3f      	ldr	r3, [pc, #252]	; (8003370 <HAL_GPIO_DeInit+0x1c4>)
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	43db      	mvns	r3, r3
 8003278:	493d      	ldr	r1, [pc, #244]	; (8003370 <HAL_GPIO_DeInit+0x1c4>)
 800327a:	4013      	ands	r3, r2
 800327c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800327e:	4b3c      	ldr	r3, [pc, #240]	; (8003370 <HAL_GPIO_DeInit+0x1c4>)
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	43db      	mvns	r3, r3
 8003286:	493a      	ldr	r1, [pc, #232]	; (8003370 <HAL_GPIO_DeInit+0x1c4>)
 8003288:	4013      	ands	r3, r2
 800328a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	220f      	movs	r2, #15
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800329c:	4a2e      	ldr	r2, [pc, #184]	; (8003358 <HAL_GPIO_DeInit+0x1ac>)
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	089b      	lsrs	r3, r3, #2
 80032a2:	3302      	adds	r3, #2
 80032a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	43da      	mvns	r2, r3
 80032ac:	482a      	ldr	r0, [pc, #168]	; (8003358 <HAL_GPIO_DeInit+0x1ac>)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	089b      	lsrs	r3, r3, #2
 80032b2:	400a      	ands	r2, r1
 80032b4:	3302      	adds	r3, #2
 80032b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	2103      	movs	r1, #3
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	43db      	mvns	r3, r3
 80032ca:	401a      	ands	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	08da      	lsrs	r2, r3, #3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3208      	adds	r2, #8
 80032d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	220f      	movs	r2, #15
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	08d2      	lsrs	r2, r2, #3
 80032f0:	4019      	ands	r1, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3208      	adds	r2, #8
 80032f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	2103      	movs	r1, #3
 8003304:	fa01 f303 	lsl.w	r3, r1, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	401a      	ands	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	2101      	movs	r1, #1
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	fa01 f303 	lsl.w	r3, r1, r3
 800331c:	43db      	mvns	r3, r3
 800331e:	401a      	ands	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	2103      	movs	r1, #3
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	401a      	ands	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	3301      	adds	r3, #1
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b0f      	cmp	r3, #15
 8003344:	f67f af40 	bls.w	80031c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003348:	bf00      	nop
 800334a:	bf00      	nop
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40013800 	.word	0x40013800
 800335c:	40020000 	.word	0x40020000
 8003360:	40020400 	.word	0x40020400
 8003364:	40020800 	.word	0x40020800
 8003368:	40020c00 	.word	0x40020c00
 800336c:	40021000 	.word	0x40021000
 8003370:	40013c00 	.word	0x40013c00

08003374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]
 8003380:	4613      	mov	r3, r2
 8003382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003384:	787b      	ldrb	r3, [r7, #1]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800338a:	887a      	ldrh	r2, [r7, #2]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003390:	e003      	b.n	800339a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003392:	887b      	ldrh	r3, [r7, #2]
 8003394:	041a      	lsls	r2, r3, #16
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	619a      	str	r2, [r3, #24]
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b085      	sub	sp, #20
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	460b      	mov	r3, r1
 80033b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033b8:	887a      	ldrh	r2, [r7, #2]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4013      	ands	r3, r2
 80033be:	041a      	lsls	r2, r3, #16
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	43d9      	mvns	r1, r3
 80033c4:	887b      	ldrh	r3, [r7, #2]
 80033c6:	400b      	ands	r3, r1
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	619a      	str	r2, [r3, #24]
}
 80033ce:	bf00      	nop
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e267      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d075      	beq.n	80034e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033fa:	4b88      	ldr	r3, [pc, #544]	; (800361c <HAL_RCC_OscConfig+0x240>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b04      	cmp	r3, #4
 8003404:	d00c      	beq.n	8003420 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003406:	4b85      	ldr	r3, [pc, #532]	; (800361c <HAL_RCC_OscConfig+0x240>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800340e:	2b08      	cmp	r3, #8
 8003410:	d112      	bne.n	8003438 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003412:	4b82      	ldr	r3, [pc, #520]	; (800361c <HAL_RCC_OscConfig+0x240>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800341e:	d10b      	bne.n	8003438 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003420:	4b7e      	ldr	r3, [pc, #504]	; (800361c <HAL_RCC_OscConfig+0x240>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d05b      	beq.n	80034e4 <HAL_RCC_OscConfig+0x108>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d157      	bne.n	80034e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e242      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003440:	d106      	bne.n	8003450 <HAL_RCC_OscConfig+0x74>
 8003442:	4b76      	ldr	r3, [pc, #472]	; (800361c <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a75      	ldr	r2, [pc, #468]	; (800361c <HAL_RCC_OscConfig+0x240>)
 8003448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e01d      	b.n	800348c <HAL_RCC_OscConfig+0xb0>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003458:	d10c      	bne.n	8003474 <HAL_RCC_OscConfig+0x98>
 800345a:	4b70      	ldr	r3, [pc, #448]	; (800361c <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a6f      	ldr	r2, [pc, #444]	; (800361c <HAL_RCC_OscConfig+0x240>)
 8003460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	4b6d      	ldr	r3, [pc, #436]	; (800361c <HAL_RCC_OscConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a6c      	ldr	r2, [pc, #432]	; (800361c <HAL_RCC_OscConfig+0x240>)
 800346c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	e00b      	b.n	800348c <HAL_RCC_OscConfig+0xb0>
 8003474:	4b69      	ldr	r3, [pc, #420]	; (800361c <HAL_RCC_OscConfig+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a68      	ldr	r2, [pc, #416]	; (800361c <HAL_RCC_OscConfig+0x240>)
 800347a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b66      	ldr	r3, [pc, #408]	; (800361c <HAL_RCC_OscConfig+0x240>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a65      	ldr	r2, [pc, #404]	; (800361c <HAL_RCC_OscConfig+0x240>)
 8003486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800348a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d013      	beq.n	80034bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7ff fb00 	bl	8002a98 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800349c:	f7ff fafc 	bl	8002a98 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	; 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e207      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	4b5b      	ldr	r3, [pc, #364]	; (800361c <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0xc0>
 80034ba:	e014      	b.n	80034e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7ff faec 	bl	8002a98 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c4:	f7ff fae8 	bl	8002a98 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	; 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e1f3      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d6:	4b51      	ldr	r3, [pc, #324]	; (800361c <HAL_RCC_OscConfig+0x240>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0xe8>
 80034e2:	e000      	b.n	80034e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d063      	beq.n	80035ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034f2:	4b4a      	ldr	r3, [pc, #296]	; (800361c <HAL_RCC_OscConfig+0x240>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fe:	4b47      	ldr	r3, [pc, #284]	; (800361c <HAL_RCC_OscConfig+0x240>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003506:	2b08      	cmp	r3, #8
 8003508:	d11c      	bne.n	8003544 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800350a:	4b44      	ldr	r3, [pc, #272]	; (800361c <HAL_RCC_OscConfig+0x240>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d116      	bne.n	8003544 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003516:	4b41      	ldr	r3, [pc, #260]	; (800361c <HAL_RCC_OscConfig+0x240>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <HAL_RCC_OscConfig+0x152>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d001      	beq.n	800352e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e1c7      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352e:	4b3b      	ldr	r3, [pc, #236]	; (800361c <HAL_RCC_OscConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4937      	ldr	r1, [pc, #220]	; (800361c <HAL_RCC_OscConfig+0x240>)
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003542:	e03a      	b.n	80035ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d020      	beq.n	800358e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800354c:	4b34      	ldr	r3, [pc, #208]	; (8003620 <HAL_RCC_OscConfig+0x244>)
 800354e:	2201      	movs	r2, #1
 8003550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003552:	f7ff faa1 	bl	8002a98 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800355a:	f7ff fa9d 	bl	8002a98 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e1a8      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356c:	4b2b      	ldr	r3, [pc, #172]	; (800361c <HAL_RCC_OscConfig+0x240>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003578:	4b28      	ldr	r3, [pc, #160]	; (800361c <HAL_RCC_OscConfig+0x240>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4925      	ldr	r1, [pc, #148]	; (800361c <HAL_RCC_OscConfig+0x240>)
 8003588:	4313      	orrs	r3, r2
 800358a:	600b      	str	r3, [r1, #0]
 800358c:	e015      	b.n	80035ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800358e:	4b24      	ldr	r3, [pc, #144]	; (8003620 <HAL_RCC_OscConfig+0x244>)
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7ff fa80 	bl	8002a98 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800359c:	f7ff fa7c 	bl	8002a98 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e187      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ae:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d036      	beq.n	8003634 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d016      	beq.n	80035fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <HAL_RCC_OscConfig+0x248>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d4:	f7ff fa60 	bl	8002a98 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035dc:	f7ff fa5c 	bl	8002a98 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e167      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ee:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_RCC_OscConfig+0x240>)
 80035f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCC_OscConfig+0x200>
 80035fa:	e01b      	b.n	8003634 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035fc:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RCC_OscConfig+0x248>)
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003602:	f7ff fa49 	bl	8002a98 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003608:	e00e      	b.n	8003628 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800360a:	f7ff fa45 	bl	8002a98 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d907      	bls.n	8003628 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e150      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
 800361c:	40023800 	.word	0x40023800
 8003620:	42470000 	.word	0x42470000
 8003624:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003628:	4b88      	ldr	r3, [pc, #544]	; (800384c <HAL_RCC_OscConfig+0x470>)
 800362a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1ea      	bne.n	800360a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8097 	beq.w	8003770 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003642:	2300      	movs	r3, #0
 8003644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003646:	4b81      	ldr	r3, [pc, #516]	; (800384c <HAL_RCC_OscConfig+0x470>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10f      	bne.n	8003672 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	4b7d      	ldr	r3, [pc, #500]	; (800384c <HAL_RCC_OscConfig+0x470>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	4a7c      	ldr	r2, [pc, #496]	; (800384c <HAL_RCC_OscConfig+0x470>)
 800365c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003660:	6413      	str	r3, [r2, #64]	; 0x40
 8003662:	4b7a      	ldr	r3, [pc, #488]	; (800384c <HAL_RCC_OscConfig+0x470>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366e:	2301      	movs	r3, #1
 8003670:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003672:	4b77      	ldr	r3, [pc, #476]	; (8003850 <HAL_RCC_OscConfig+0x474>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d118      	bne.n	80036b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800367e:	4b74      	ldr	r3, [pc, #464]	; (8003850 <HAL_RCC_OscConfig+0x474>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a73      	ldr	r2, [pc, #460]	; (8003850 <HAL_RCC_OscConfig+0x474>)
 8003684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800368a:	f7ff fa05 	bl	8002a98 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003692:	f7ff fa01 	bl	8002a98 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e10c      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a4:	4b6a      	ldr	r3, [pc, #424]	; (8003850 <HAL_RCC_OscConfig+0x474>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d106      	bne.n	80036c6 <HAL_RCC_OscConfig+0x2ea>
 80036b8:	4b64      	ldr	r3, [pc, #400]	; (800384c <HAL_RCC_OscConfig+0x470>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036bc:	4a63      	ldr	r2, [pc, #396]	; (800384c <HAL_RCC_OscConfig+0x470>)
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	6713      	str	r3, [r2, #112]	; 0x70
 80036c4:	e01c      	b.n	8003700 <HAL_RCC_OscConfig+0x324>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b05      	cmp	r3, #5
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x30c>
 80036ce:	4b5f      	ldr	r3, [pc, #380]	; (800384c <HAL_RCC_OscConfig+0x470>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	4a5e      	ldr	r2, [pc, #376]	; (800384c <HAL_RCC_OscConfig+0x470>)
 80036d4:	f043 0304 	orr.w	r3, r3, #4
 80036d8:	6713      	str	r3, [r2, #112]	; 0x70
 80036da:	4b5c      	ldr	r3, [pc, #368]	; (800384c <HAL_RCC_OscConfig+0x470>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	4a5b      	ldr	r2, [pc, #364]	; (800384c <HAL_RCC_OscConfig+0x470>)
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	6713      	str	r3, [r2, #112]	; 0x70
 80036e6:	e00b      	b.n	8003700 <HAL_RCC_OscConfig+0x324>
 80036e8:	4b58      	ldr	r3, [pc, #352]	; (800384c <HAL_RCC_OscConfig+0x470>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	4a57      	ldr	r2, [pc, #348]	; (800384c <HAL_RCC_OscConfig+0x470>)
 80036ee:	f023 0301 	bic.w	r3, r3, #1
 80036f2:	6713      	str	r3, [r2, #112]	; 0x70
 80036f4:	4b55      	ldr	r3, [pc, #340]	; (800384c <HAL_RCC_OscConfig+0x470>)
 80036f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f8:	4a54      	ldr	r2, [pc, #336]	; (800384c <HAL_RCC_OscConfig+0x470>)
 80036fa:	f023 0304 	bic.w	r3, r3, #4
 80036fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d015      	beq.n	8003734 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003708:	f7ff f9c6 	bl	8002a98 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370e:	e00a      	b.n	8003726 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003710:	f7ff f9c2 	bl	8002a98 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f241 3288 	movw	r2, #5000	; 0x1388
 800371e:	4293      	cmp	r3, r2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e0cb      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003726:	4b49      	ldr	r3, [pc, #292]	; (800384c <HAL_RCC_OscConfig+0x470>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0ee      	beq.n	8003710 <HAL_RCC_OscConfig+0x334>
 8003732:	e014      	b.n	800375e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003734:	f7ff f9b0 	bl	8002a98 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800373a:	e00a      	b.n	8003752 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800373c:	f7ff f9ac 	bl	8002a98 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	f241 3288 	movw	r2, #5000	; 0x1388
 800374a:	4293      	cmp	r3, r2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e0b5      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003752:	4b3e      	ldr	r3, [pc, #248]	; (800384c <HAL_RCC_OscConfig+0x470>)
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1ee      	bne.n	800373c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d105      	bne.n	8003770 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003764:	4b39      	ldr	r3, [pc, #228]	; (800384c <HAL_RCC_OscConfig+0x470>)
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	4a38      	ldr	r2, [pc, #224]	; (800384c <HAL_RCC_OscConfig+0x470>)
 800376a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800376e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80a1 	beq.w	80038bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800377a:	4b34      	ldr	r3, [pc, #208]	; (800384c <HAL_RCC_OscConfig+0x470>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b08      	cmp	r3, #8
 8003784:	d05c      	beq.n	8003840 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d141      	bne.n	8003812 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378e:	4b31      	ldr	r3, [pc, #196]	; (8003854 <HAL_RCC_OscConfig+0x478>)
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003794:	f7ff f980 	bl	8002a98 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800379c:	f7ff f97c 	bl	8002a98 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e087      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ae:	4b27      	ldr	r3, [pc, #156]	; (800384c <HAL_RCC_OscConfig+0x470>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f0      	bne.n	800379c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69da      	ldr	r2, [r3, #28]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	019b      	lsls	r3, r3, #6
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	085b      	lsrs	r3, r3, #1
 80037d2:	3b01      	subs	r3, #1
 80037d4:	041b      	lsls	r3, r3, #16
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	061b      	lsls	r3, r3, #24
 80037de:	491b      	ldr	r1, [pc, #108]	; (800384c <HAL_RCC_OscConfig+0x470>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e4:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <HAL_RCC_OscConfig+0x478>)
 80037e6:	2201      	movs	r2, #1
 80037e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ea:	f7ff f955 	bl	8002a98 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f2:	f7ff f951 	bl	8002a98 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e05c      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003804:	4b11      	ldr	r3, [pc, #68]	; (800384c <HAL_RCC_OscConfig+0x470>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f0      	beq.n	80037f2 <HAL_RCC_OscConfig+0x416>
 8003810:	e054      	b.n	80038bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003812:	4b10      	ldr	r3, [pc, #64]	; (8003854 <HAL_RCC_OscConfig+0x478>)
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7ff f93e 	bl	8002a98 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003820:	f7ff f93a 	bl	8002a98 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e045      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_RCC_OscConfig+0x470>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0x444>
 800383e:	e03d      	b.n	80038bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d107      	bne.n	8003858 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e038      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
 800384c:	40023800 	.word	0x40023800
 8003850:	40007000 	.word	0x40007000
 8003854:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003858:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <HAL_RCC_OscConfig+0x4ec>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d028      	beq.n	80038b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003870:	429a      	cmp	r2, r3
 8003872:	d121      	bne.n	80038b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387e:	429a      	cmp	r2, r3
 8003880:	d11a      	bne.n	80038b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003888:	4013      	ands	r3, r2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800388e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003890:	4293      	cmp	r3, r2
 8003892:	d111      	bne.n	80038b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	085b      	lsrs	r3, r3, #1
 80038a0:	3b01      	subs	r3, #1
 80038a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d107      	bne.n	80038b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40023800 	.word	0x40023800

080038cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d101      	bne.n	80038e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0cc      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038e0:	4b68      	ldr	r3, [pc, #416]	; (8003a84 <HAL_RCC_ClockConfig+0x1b8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d90c      	bls.n	8003908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b65      	ldr	r3, [pc, #404]	; (8003a84 <HAL_RCC_ClockConfig+0x1b8>)
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f6:	4b63      	ldr	r3, [pc, #396]	; (8003a84 <HAL_RCC_ClockConfig+0x1b8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d001      	beq.n	8003908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0b8      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d020      	beq.n	8003956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003920:	4b59      	ldr	r3, [pc, #356]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	4a58      	ldr	r2, [pc, #352]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800392a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003938:	4b53      	ldr	r3, [pc, #332]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	4a52      	ldr	r2, [pc, #328]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003944:	4b50      	ldr	r3, [pc, #320]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	494d      	ldr	r1, [pc, #308]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d044      	beq.n	80039ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d107      	bne.n	800397a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396a:	4b47      	ldr	r3, [pc, #284]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d119      	bne.n	80039aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e07f      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d003      	beq.n	800398a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003986:	2b03      	cmp	r3, #3
 8003988:	d107      	bne.n	800399a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800398a:	4b3f      	ldr	r3, [pc, #252]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e06f      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399a:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e067      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039aa:	4b37      	ldr	r3, [pc, #220]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f023 0203 	bic.w	r2, r3, #3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	4934      	ldr	r1, [pc, #208]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039bc:	f7ff f86c 	bl	8002a98 <HAL_GetTick>
 80039c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	e00a      	b.n	80039da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c4:	f7ff f868 	bl	8002a98 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e04f      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039da:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 020c 	and.w	r2, r3, #12
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d1eb      	bne.n	80039c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039ec:	4b25      	ldr	r3, [pc, #148]	; (8003a84 <HAL_RCC_ClockConfig+0x1b8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d20c      	bcs.n	8003a14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fa:	4b22      	ldr	r3, [pc, #136]	; (8003a84 <HAL_RCC_ClockConfig+0x1b8>)
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <HAL_RCC_ClockConfig+0x1b8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e032      	b.n	8003a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a20:	4b19      	ldr	r3, [pc, #100]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	4916      	ldr	r1, [pc, #88]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a3e:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	490e      	ldr	r1, [pc, #56]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a52:	f000 f821 	bl	8003a98 <HAL_RCC_GetSysClockFreq>
 8003a56:	4602      	mov	r2, r0
 8003a58:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	490a      	ldr	r1, [pc, #40]	; (8003a8c <HAL_RCC_ClockConfig+0x1c0>)
 8003a64:	5ccb      	ldrb	r3, [r1, r3]
 8003a66:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6a:	4a09      	ldr	r2, [pc, #36]	; (8003a90 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a6e:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <HAL_RCC_ClockConfig+0x1c8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe ffcc 	bl	8002a10 <HAL_InitTick>

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40023c00 	.word	0x40023c00
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	08010bc0 	.word	0x08010bc0
 8003a90:	200000a4 	.word	0x200000a4
 8003a94:	200000a8 	.word	0x200000a8

08003a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a9c:	b090      	sub	sp, #64	; 0x40
 8003a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ab0:	4b59      	ldr	r3, [pc, #356]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 030c 	and.w	r3, r3, #12
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d00d      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	f200 80a1 	bhi.w	8003c04 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_RCC_GetSysClockFreq+0x34>
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d003      	beq.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003aca:	e09b      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003acc:	4b53      	ldr	r3, [pc, #332]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x184>)
 8003ace:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003ad0:	e09b      	b.n	8003c0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ad2:	4b53      	ldr	r3, [pc, #332]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ad4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ad6:	e098      	b.n	8003c0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ad8:	4b4f      	ldr	r3, [pc, #316]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ae2:	4b4d      	ldr	r3, [pc, #308]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d028      	beq.n	8003b40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aee:	4b4a      	ldr	r3, [pc, #296]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	099b      	lsrs	r3, r3, #6
 8003af4:	2200      	movs	r2, #0
 8003af6:	623b      	str	r3, [r7, #32]
 8003af8:	627a      	str	r2, [r7, #36]	; 0x24
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b00:	2100      	movs	r1, #0
 8003b02:	4b47      	ldr	r3, [pc, #284]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b04:	fb03 f201 	mul.w	r2, r3, r1
 8003b08:	2300      	movs	r3, #0
 8003b0a:	fb00 f303 	mul.w	r3, r0, r3
 8003b0e:	4413      	add	r3, r2
 8003b10:	4a43      	ldr	r2, [pc, #268]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b12:	fba0 1202 	umull	r1, r2, r0, r2
 8003b16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b18:	460a      	mov	r2, r1
 8003b1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b1e:	4413      	add	r3, r2
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b24:	2200      	movs	r2, #0
 8003b26:	61bb      	str	r3, [r7, #24]
 8003b28:	61fa      	str	r2, [r7, #28]
 8003b2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b32:	f7fc fbbd 	bl	80002b0 <__aeabi_uldivmod>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b3e:	e053      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b40:	4b35      	ldr	r3, [pc, #212]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	099b      	lsrs	r3, r3, #6
 8003b46:	2200      	movs	r2, #0
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	617a      	str	r2, [r7, #20]
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b52:	f04f 0b00 	mov.w	fp, #0
 8003b56:	4652      	mov	r2, sl
 8003b58:	465b      	mov	r3, fp
 8003b5a:	f04f 0000 	mov.w	r0, #0
 8003b5e:	f04f 0100 	mov.w	r1, #0
 8003b62:	0159      	lsls	r1, r3, #5
 8003b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b68:	0150      	lsls	r0, r2, #5
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	ebb2 080a 	subs.w	r8, r2, sl
 8003b72:	eb63 090b 	sbc.w	r9, r3, fp
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b8a:	ebb2 0408 	subs.w	r4, r2, r8
 8003b8e:	eb63 0509 	sbc.w	r5, r3, r9
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	00eb      	lsls	r3, r5, #3
 8003b9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ba0:	00e2      	lsls	r2, r4, #3
 8003ba2:	4614      	mov	r4, r2
 8003ba4:	461d      	mov	r5, r3
 8003ba6:	eb14 030a 	adds.w	r3, r4, sl
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	eb45 030b 	adc.w	r3, r5, fp
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	028b      	lsls	r3, r1, #10
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bc8:	4621      	mov	r1, r4
 8003bca:	028a      	lsls	r2, r1, #10
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	60bb      	str	r3, [r7, #8]
 8003bd6:	60fa      	str	r2, [r7, #12]
 8003bd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bdc:	f7fc fb68 	bl	80002b0 <__aeabi_uldivmod>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	4613      	mov	r3, r2
 8003be6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003be8:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	0c1b      	lsrs	r3, r3, #16
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003bf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c02:	e002      	b.n	8003c0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c04:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x184>)
 8003c06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3740      	adds	r7, #64	; 0x40
 8003c10:	46bd      	mov	sp, r7
 8003c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c16:	bf00      	nop
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	00f42400 	.word	0x00f42400
 8003c20:	017d7840 	.word	0x017d7840

08003c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c28:	4b03      	ldr	r3, [pc, #12]	; (8003c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	200000a4 	.word	0x200000a4

08003c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c40:	f7ff fff0 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c44:	4602      	mov	r2, r0
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	0a9b      	lsrs	r3, r3, #10
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	4903      	ldr	r1, [pc, #12]	; (8003c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c52:	5ccb      	ldrb	r3, [r1, r3]
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	08010bd0 	.word	0x08010bd0

08003c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c68:	f7ff ffdc 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	0b5b      	lsrs	r3, r3, #13
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	4903      	ldr	r1, [pc, #12]	; (8003c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40023800 	.word	0x40023800
 8003c88:	08010bd0 	.word	0x08010bd0

08003c8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e07b      	b.n	8003d96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d108      	bne.n	8003cb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cae:	d009      	beq.n	8003cc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	61da      	str	r2, [r3, #28]
 8003cb6:	e005      	b.n	8003cc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fe fc00 	bl	80024e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d48:	ea42 0103 	orr.w	r1, r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	f003 0104 	and.w	r1, r3, #4
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	f003 0210 	and.w	r2, r3, #16
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69da      	ldr	r2, [r3, #28]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b08c      	sub	sp, #48	; 0x30
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
 8003daa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003dac:	2301      	movs	r3, #1
 8003dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_SPI_TransmitReceive+0x26>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e18a      	b.n	80040da <HAL_SPI_TransmitReceive+0x33c>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dcc:	f7fe fe64 	bl	8002a98 <HAL_GetTick>
 8003dd0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003de2:	887b      	ldrh	r3, [r7, #2]
 8003de4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003de6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d00f      	beq.n	8003e0e <HAL_SPI_TransmitReceive+0x70>
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003df4:	d107      	bne.n	8003e06 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d103      	bne.n	8003e06 <HAL_SPI_TransmitReceive+0x68>
 8003dfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d003      	beq.n	8003e0e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e06:	2302      	movs	r3, #2
 8003e08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e0c:	e15b      	b.n	80040c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_SPI_TransmitReceive+0x82>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_SPI_TransmitReceive+0x82>
 8003e1a:	887b      	ldrh	r3, [r7, #2]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d103      	bne.n	8003e28 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e26:	e14e      	b.n	80040c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d003      	beq.n	8003e3c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2205      	movs	r2, #5
 8003e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	887a      	ldrh	r2, [r7, #2]
 8003e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	887a      	ldrh	r2, [r7, #2]
 8003e52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	887a      	ldrh	r2, [r7, #2]
 8003e5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	887a      	ldrh	r2, [r7, #2]
 8003e64:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d007      	beq.n	8003e90 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e98:	d178      	bne.n	8003f8c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_SPI_TransmitReceive+0x10a>
 8003ea2:	8b7b      	ldrh	r3, [r7, #26]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d166      	bne.n	8003f76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	881a      	ldrh	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	1c9a      	adds	r2, r3, #2
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ecc:	e053      	b.n	8003f76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d11b      	bne.n	8003f14 <HAL_SPI_TransmitReceive+0x176>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d016      	beq.n	8003f14 <HAL_SPI_TransmitReceive+0x176>
 8003ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d113      	bne.n	8003f14 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	881a      	ldrh	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	1c9a      	adds	r2, r3, #2
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d119      	bne.n	8003f56 <HAL_SPI_TransmitReceive+0x1b8>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d014      	beq.n	8003f56 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	b292      	uxth	r2, r2
 8003f38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	1c9a      	adds	r2, r3, #2
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f52:	2301      	movs	r3, #1
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f56:	f7fe fd9f 	bl	8002a98 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d807      	bhi.n	8003f76 <HAL_SPI_TransmitReceive+0x1d8>
 8003f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6c:	d003      	beq.n	8003f76 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f74:	e0a7      	b.n	80040c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1a6      	bne.n	8003ece <HAL_SPI_TransmitReceive+0x130>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1a1      	bne.n	8003ece <HAL_SPI_TransmitReceive+0x130>
 8003f8a:	e07c      	b.n	8004086 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_SPI_TransmitReceive+0x1fc>
 8003f94:	8b7b      	ldrh	r3, [r7, #26]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d16b      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	330c      	adds	r3, #12
 8003fa4:	7812      	ldrb	r2, [r2, #0]
 8003fa6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fc0:	e057      	b.n	8004072 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d11c      	bne.n	800400a <HAL_SPI_TransmitReceive+0x26c>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d017      	beq.n	800400a <HAL_SPI_TransmitReceive+0x26c>
 8003fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d114      	bne.n	800400a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	7812      	ldrb	r2, [r2, #0]
 8003fec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b01      	cmp	r3, #1
 8004016:	d119      	bne.n	800404c <HAL_SPI_TransmitReceive+0x2ae>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d014      	beq.n	800404c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004048:	2301      	movs	r3, #1
 800404a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800404c:	f7fe fd24 	bl	8002a98 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004058:	429a      	cmp	r2, r3
 800405a:	d803      	bhi.n	8004064 <HAL_SPI_TransmitReceive+0x2c6>
 800405c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004062:	d102      	bne.n	800406a <HAL_SPI_TransmitReceive+0x2cc>
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	2b00      	cmp	r3, #0
 8004068:	d103      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004070:	e029      	b.n	80040c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1a2      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x224>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d19d      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004088:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 f8b2 	bl	80041f4 <SPI_EndRxTxTransaction>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d006      	beq.n	80040a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80040a2:	e010      	b.n	80040c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10b      	bne.n	80040c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	e000      	b.n	80040c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80040c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3730      	adds	r7, #48	; 0x30
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80040f4:	f7fe fcd0 	bl	8002a98 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	4413      	add	r3, r2
 8004102:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004104:	f7fe fcc8 	bl	8002a98 <HAL_GetTick>
 8004108:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800410a:	4b39      	ldr	r3, [pc, #228]	; (80041f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	015b      	lsls	r3, r3, #5
 8004110:	0d1b      	lsrs	r3, r3, #20
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	fb02 f303 	mul.w	r3, r2, r3
 8004118:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800411a:	e054      	b.n	80041c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004122:	d050      	beq.n	80041c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004124:	f7fe fcb8 	bl	8002a98 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	429a      	cmp	r2, r3
 8004132:	d902      	bls.n	800413a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d13d      	bne.n	80041b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004148:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004152:	d111      	bne.n	8004178 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800415c:	d004      	beq.n	8004168 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004166:	d107      	bne.n	8004178 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004176:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004180:	d10f      	bne.n	80041a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e017      	b.n	80041e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4013      	ands	r3, r2
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	bf0c      	ite	eq
 80041d6:	2301      	moveq	r3, #1
 80041d8:	2300      	movne	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d19b      	bne.n	800411c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3720      	adds	r7, #32
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	200000a4 	.word	0x200000a4

080041f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004200:	4b1b      	ldr	r3, [pc, #108]	; (8004270 <SPI_EndRxTxTransaction+0x7c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1b      	ldr	r2, [pc, #108]	; (8004274 <SPI_EndRxTxTransaction+0x80>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	0d5b      	lsrs	r3, r3, #21
 800420c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004210:	fb02 f303 	mul.w	r3, r2, r3
 8004214:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800421e:	d112      	bne.n	8004246 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2200      	movs	r2, #0
 8004228:	2180      	movs	r1, #128	; 0x80
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f7ff ff5a 	bl	80040e4 <SPI_WaitFlagStateUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d016      	beq.n	8004264 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423a:	f043 0220 	orr.w	r2, r3, #32
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e00f      	b.n	8004266 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	3b01      	subs	r3, #1
 8004250:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425c:	2b80      	cmp	r3, #128	; 0x80
 800425e:	d0f2      	beq.n	8004246 <SPI_EndRxTxTransaction+0x52>
 8004260:	e000      	b.n	8004264 <SPI_EndRxTxTransaction+0x70>
        break;
 8004262:	bf00      	nop
  }

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	200000a4 	.word	0x200000a4
 8004274:	165e9f81 	.word	0x165e9f81

08004278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e041      	b.n	800430e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7fe f968 	bl	8002574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3304      	adds	r3, #4
 80042b4:	4619      	mov	r1, r3
 80042b6:	4610      	mov	r0, r2
 80042b8:	f000 fce4 	bl	8004c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e041      	b.n	80043ac <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d106      	bne.n	8004342 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f839 	bl	80043b4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2202      	movs	r2, #2
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3304      	adds	r3, #4
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f000 fc95 	bl	8004c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d109      	bne.n	80043f0 <HAL_TIM_OC_Start_IT+0x28>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	bf14      	ite	ne
 80043e8:	2301      	movne	r3, #1
 80043ea:	2300      	moveq	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	e022      	b.n	8004436 <HAL_TIM_OC_Start_IT+0x6e>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d109      	bne.n	800440a <HAL_TIM_OC_Start_IT+0x42>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b01      	cmp	r3, #1
 8004400:	bf14      	ite	ne
 8004402:	2301      	movne	r3, #1
 8004404:	2300      	moveq	r3, #0
 8004406:	b2db      	uxtb	r3, r3
 8004408:	e015      	b.n	8004436 <HAL_TIM_OC_Start_IT+0x6e>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b08      	cmp	r3, #8
 800440e:	d109      	bne.n	8004424 <HAL_TIM_OC_Start_IT+0x5c>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	bf14      	ite	ne
 800441c:	2301      	movne	r3, #1
 800441e:	2300      	moveq	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	e008      	b.n	8004436 <HAL_TIM_OC_Start_IT+0x6e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	bf14      	ite	ne
 8004430:	2301      	movne	r3, #1
 8004432:	2300      	moveq	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e0b3      	b.n	80045a6 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d104      	bne.n	800444e <HAL_TIM_OC_Start_IT+0x86>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800444c:	e013      	b.n	8004476 <HAL_TIM_OC_Start_IT+0xae>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b04      	cmp	r3, #4
 8004452:	d104      	bne.n	800445e <HAL_TIM_OC_Start_IT+0x96>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800445c:	e00b      	b.n	8004476 <HAL_TIM_OC_Start_IT+0xae>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b08      	cmp	r3, #8
 8004462:	d104      	bne.n	800446e <HAL_TIM_OC_Start_IT+0xa6>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800446c:	e003      	b.n	8004476 <HAL_TIM_OC_Start_IT+0xae>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2202      	movs	r2, #2
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b0c      	cmp	r3, #12
 800447a:	d841      	bhi.n	8004500 <HAL_TIM_OC_Start_IT+0x138>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <HAL_TIM_OC_Start_IT+0xbc>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	080044b9 	.word	0x080044b9
 8004488:	08004501 	.word	0x08004501
 800448c:	08004501 	.word	0x08004501
 8004490:	08004501 	.word	0x08004501
 8004494:	080044cb 	.word	0x080044cb
 8004498:	08004501 	.word	0x08004501
 800449c:	08004501 	.word	0x08004501
 80044a0:	08004501 	.word	0x08004501
 80044a4:	080044dd 	.word	0x080044dd
 80044a8:	08004501 	.word	0x08004501
 80044ac:	08004501 	.word	0x08004501
 80044b0:	08004501 	.word	0x08004501
 80044b4:	080044ef 	.word	0x080044ef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0202 	orr.w	r2, r2, #2
 80044c6:	60da      	str	r2, [r3, #12]
      break;
 80044c8:	e01d      	b.n	8004506 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0204 	orr.w	r2, r2, #4
 80044d8:	60da      	str	r2, [r3, #12]
      break;
 80044da:	e014      	b.n	8004506 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0208 	orr.w	r2, r2, #8
 80044ea:	60da      	str	r2, [r3, #12]
      break;
 80044ec:	e00b      	b.n	8004506 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0210 	orr.w	r2, r2, #16
 80044fc:	60da      	str	r2, [r3, #12]
      break;
 80044fe:	e002      	b.n	8004506 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
      break;
 8004504:	bf00      	nop
  }

  if (status == HAL_OK)
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d14b      	bne.n	80045a4 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2201      	movs	r2, #1
 8004512:	6839      	ldr	r1, [r7, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fe5b 	bl	80051d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a24      	ldr	r2, [pc, #144]	; (80045b0 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d107      	bne.n	8004534 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004532:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1d      	ldr	r2, [pc, #116]	; (80045b0 <HAL_TIM_OC_Start_IT+0x1e8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d018      	beq.n	8004570 <HAL_TIM_OC_Start_IT+0x1a8>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004546:	d013      	beq.n	8004570 <HAL_TIM_OC_Start_IT+0x1a8>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a19      	ldr	r2, [pc, #100]	; (80045b4 <HAL_TIM_OC_Start_IT+0x1ec>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00e      	beq.n	8004570 <HAL_TIM_OC_Start_IT+0x1a8>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a18      	ldr	r2, [pc, #96]	; (80045b8 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d009      	beq.n	8004570 <HAL_TIM_OC_Start_IT+0x1a8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a16      	ldr	r2, [pc, #88]	; (80045bc <HAL_TIM_OC_Start_IT+0x1f4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <HAL_TIM_OC_Start_IT+0x1a8>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a15      	ldr	r2, [pc, #84]	; (80045c0 <HAL_TIM_OC_Start_IT+0x1f8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d111      	bne.n	8004594 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b06      	cmp	r3, #6
 8004580:	d010      	beq.n	80045a4 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0201 	orr.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004592:	e007      	b.n	80045a4 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0201 	orr.w	r2, r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40010000 	.word	0x40010000
 80045b4:	40000400 	.word	0x40000400
 80045b8:	40000800 	.word	0x40000800
 80045bc:	40000c00 	.word	0x40000c00
 80045c0:	40014000 	.word	0x40014000

080045c4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b0c      	cmp	r3, #12
 80045d6:	d841      	bhi.n	800465c <HAL_TIM_OC_Stop_IT+0x98>
 80045d8:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <HAL_TIM_OC_Stop_IT+0x1c>)
 80045da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045de:	bf00      	nop
 80045e0:	08004615 	.word	0x08004615
 80045e4:	0800465d 	.word	0x0800465d
 80045e8:	0800465d 	.word	0x0800465d
 80045ec:	0800465d 	.word	0x0800465d
 80045f0:	08004627 	.word	0x08004627
 80045f4:	0800465d 	.word	0x0800465d
 80045f8:	0800465d 	.word	0x0800465d
 80045fc:	0800465d 	.word	0x0800465d
 8004600:	08004639 	.word	0x08004639
 8004604:	0800465d 	.word	0x0800465d
 8004608:	0800465d 	.word	0x0800465d
 800460c:	0800465d 	.word	0x0800465d
 8004610:	0800464b 	.word	0x0800464b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0202 	bic.w	r2, r2, #2
 8004622:	60da      	str	r2, [r3, #12]
      break;
 8004624:	e01d      	b.n	8004662 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0204 	bic.w	r2, r2, #4
 8004634:	60da      	str	r2, [r3, #12]
      break;
 8004636:	e014      	b.n	8004662 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0208 	bic.w	r2, r2, #8
 8004646:	60da      	str	r2, [r3, #12]
      break;
 8004648:	e00b      	b.n	8004662 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0210 	bic.w	r2, r2, #16
 8004658:	60da      	str	r2, [r3, #12]
      break;
 800465a:	e002      	b.n	8004662 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
      break;
 8004660:	bf00      	nop
  }

  if (status == HAL_OK)
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d157      	bne.n	8004718 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2200      	movs	r2, #0
 800466e:	6839      	ldr	r1, [r7, #0]
 8004670:	4618      	mov	r0, r3
 8004672:	f000 fdad 	bl	80051d0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a2a      	ldr	r2, [pc, #168]	; (8004724 <HAL_TIM_OC_Stop_IT+0x160>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d117      	bne.n	80046b0 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6a1a      	ldr	r2, [r3, #32]
 8004686:	f241 1311 	movw	r3, #4369	; 0x1111
 800468a:	4013      	ands	r3, r2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10f      	bne.n	80046b0 <HAL_TIM_OC_Stop_IT+0xec>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6a1a      	ldr	r2, [r3, #32]
 8004696:	f240 4344 	movw	r3, #1092	; 0x444
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d107      	bne.n	80046b0 <HAL_TIM_OC_Stop_IT+0xec>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046ae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6a1a      	ldr	r2, [r3, #32]
 80046b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10f      	bne.n	80046e0 <HAL_TIM_OC_Stop_IT+0x11c>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6a1a      	ldr	r2, [r3, #32]
 80046c6:	f240 4344 	movw	r3, #1092	; 0x444
 80046ca:	4013      	ands	r3, r2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d107      	bne.n	80046e0 <HAL_TIM_OC_Stop_IT+0x11c>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d104      	bne.n	80046f0 <HAL_TIM_OC_Stop_IT+0x12c>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ee:	e013      	b.n	8004718 <HAL_TIM_OC_Stop_IT+0x154>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d104      	bne.n	8004700 <HAL_TIM_OC_Stop_IT+0x13c>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046fe:	e00b      	b.n	8004718 <HAL_TIM_OC_Stop_IT+0x154>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b08      	cmp	r3, #8
 8004704:	d104      	bne.n	8004710 <HAL_TIM_OC_Stop_IT+0x14c>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800470e:	e003      	b.n	8004718 <HAL_TIM_OC_Stop_IT+0x154>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40010000 	.word	0x40010000

08004728 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e041      	b.n	80047c0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d106      	bne.n	8004756 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 f839 	bl	80047c8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2202      	movs	r2, #2
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3304      	adds	r3, #4
 8004766:	4619      	mov	r1, r3
 8004768:	4610      	mov	r0, r2
 800476a:	f000 fa8b 	bl	8004c84 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0208 	bic.w	r2, r2, #8
 800477c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6819      	ldr	r1, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d122      	bne.n	8004838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d11b      	bne.n	8004838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0202 	mvn.w	r2, #2
 8004808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa11 	bl	8004c46 <HAL_TIM_IC_CaptureCallback>
 8004824:	e005      	b.n	8004832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7fd fd2e 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fa14 	bl	8004c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b04      	cmp	r3, #4
 8004844:	d122      	bne.n	800488c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b04      	cmp	r3, #4
 8004852:	d11b      	bne.n	800488c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0204 	mvn.w	r2, #4
 800485c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2202      	movs	r2, #2
 8004862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f9e7 	bl	8004c46 <HAL_TIM_IC_CaptureCallback>
 8004878:	e005      	b.n	8004886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fd fd04 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f9ea 	bl	8004c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b08      	cmp	r3, #8
 8004898:	d122      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d11b      	bne.n	80048e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f06f 0208 	mvn.w	r2, #8
 80048b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2204      	movs	r2, #4
 80048b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f9bd 	bl	8004c46 <HAL_TIM_IC_CaptureCallback>
 80048cc:	e005      	b.n	80048da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fd fcda 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f9c0 	bl	8004c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d122      	bne.n	8004934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b10      	cmp	r3, #16
 80048fa:	d11b      	bne.n	8004934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f06f 0210 	mvn.w	r2, #16
 8004904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2208      	movs	r2, #8
 800490a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f993 	bl	8004c46 <HAL_TIM_IC_CaptureCallback>
 8004920:	e005      	b.n	800492e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fd fcb0 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f996 	bl	8004c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b01      	cmp	r3, #1
 8004940:	d10e      	bne.n	8004960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b01      	cmp	r3, #1
 800494e:	d107      	bne.n	8004960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0201 	mvn.w	r2, #1
 8004958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f969 	bl	8004c32 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	2b80      	cmp	r3, #128	; 0x80
 800496c:	d10e      	bne.n	800498c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004978:	2b80      	cmp	r3, #128	; 0x80
 800497a:	d107      	bne.n	800498c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fcc0 	bl	800530c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b40      	cmp	r3, #64	; 0x40
 8004998:	d10e      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a4:	2b40      	cmp	r3, #64	; 0x40
 80049a6:	d107      	bne.n	80049b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f95b 	bl	8004c6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	d10e      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	d107      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0220 	mvn.w	r2, #32
 80049dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fc8a 	bl	80052f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_OC_ConfigChannel+0x1e>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e048      	b.n	8004a9c <HAL_TIM_OC_ConfigChannel+0xb0>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b0c      	cmp	r3, #12
 8004a16:	d839      	bhi.n	8004a8c <HAL_TIM_OC_ConfigChannel+0xa0>
 8004a18:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1e:	bf00      	nop
 8004a20:	08004a55 	.word	0x08004a55
 8004a24:	08004a8d 	.word	0x08004a8d
 8004a28:	08004a8d 	.word	0x08004a8d
 8004a2c:	08004a8d 	.word	0x08004a8d
 8004a30:	08004a63 	.word	0x08004a63
 8004a34:	08004a8d 	.word	0x08004a8d
 8004a38:	08004a8d 	.word	0x08004a8d
 8004a3c:	08004a8d 	.word	0x08004a8d
 8004a40:	08004a71 	.word	0x08004a71
 8004a44:	08004a8d 	.word	0x08004a8d
 8004a48:	08004a8d 	.word	0x08004a8d
 8004a4c:	08004a8d 	.word	0x08004a8d
 8004a50:	08004a7f 	.word	0x08004a7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 f992 	bl	8004d84 <TIM_OC1_SetConfig>
      break;
 8004a60:	e017      	b.n	8004a92 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68b9      	ldr	r1, [r7, #8]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 f9f1 	bl	8004e50 <TIM_OC2_SetConfig>
      break;
 8004a6e:	e010      	b.n	8004a92 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fa56 	bl	8004f28 <TIM_OC3_SetConfig>
      break;
 8004a7c:	e009      	b.n	8004a92 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fab9 	bl	8004ffc <TIM_OC4_SetConfig>
      break;
 8004a8a:	e002      	b.n	8004a92 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e0b4      	b.n	8004c2a <HAL_TIM_ConfigClockSource+0x186>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af8:	d03e      	beq.n	8004b78 <HAL_TIM_ConfigClockSource+0xd4>
 8004afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afe:	f200 8087 	bhi.w	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b06:	f000 8086 	beq.w	8004c16 <HAL_TIM_ConfigClockSource+0x172>
 8004b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0e:	d87f      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b10:	2b70      	cmp	r3, #112	; 0x70
 8004b12:	d01a      	beq.n	8004b4a <HAL_TIM_ConfigClockSource+0xa6>
 8004b14:	2b70      	cmp	r3, #112	; 0x70
 8004b16:	d87b      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b18:	2b60      	cmp	r3, #96	; 0x60
 8004b1a:	d050      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0x11a>
 8004b1c:	2b60      	cmp	r3, #96	; 0x60
 8004b1e:	d877      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b20:	2b50      	cmp	r3, #80	; 0x50
 8004b22:	d03c      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0xfa>
 8004b24:	2b50      	cmp	r3, #80	; 0x50
 8004b26:	d873      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b28:	2b40      	cmp	r3, #64	; 0x40
 8004b2a:	d058      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0x13a>
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d86f      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b30:	2b30      	cmp	r3, #48	; 0x30
 8004b32:	d064      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b34:	2b30      	cmp	r3, #48	; 0x30
 8004b36:	d86b      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d060      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b3c:	2b20      	cmp	r3, #32
 8004b3e:	d867      	bhi.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d05c      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d05a      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x15a>
 8004b48:	e062      	b.n	8004c10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6818      	ldr	r0, [r3, #0]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	6899      	ldr	r1, [r3, #8]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f000 fb19 	bl	8005190 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	609a      	str	r2, [r3, #8]
      break;
 8004b76:	e04f      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	6899      	ldr	r1, [r3, #8]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f000 fb02 	bl	8005190 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689a      	ldr	r2, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b9a:	609a      	str	r2, [r3, #8]
      break;
 8004b9c:	e03c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6818      	ldr	r0, [r3, #0]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	6859      	ldr	r1, [r3, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	461a      	mov	r2, r3
 8004bac:	f000 fa76 	bl	800509c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2150      	movs	r1, #80	; 0x50
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 facf 	bl	800515a <TIM_ITRx_SetConfig>
      break;
 8004bbc:	e02c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6859      	ldr	r1, [r3, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f000 fa95 	bl	80050fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2160      	movs	r1, #96	; 0x60
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 fabf 	bl	800515a <TIM_ITRx_SetConfig>
      break;
 8004bdc:	e01c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6859      	ldr	r1, [r3, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	461a      	mov	r2, r3
 8004bec:	f000 fa56 	bl	800509c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2140      	movs	r1, #64	; 0x40
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 faaf 	bl	800515a <TIM_ITRx_SetConfig>
      break;
 8004bfc:	e00c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4619      	mov	r1, r3
 8004c08:	4610      	mov	r0, r2
 8004c0a:	f000 faa6 	bl	800515a <TIM_ITRx_SetConfig>
      break;
 8004c0e:	e003      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
      break;
 8004c14:	e000      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a34      	ldr	r2, [pc, #208]	; (8004d68 <TIM_Base_SetConfig+0xe4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d00f      	beq.n	8004cbc <TIM_Base_SetConfig+0x38>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca2:	d00b      	beq.n	8004cbc <TIM_Base_SetConfig+0x38>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a31      	ldr	r2, [pc, #196]	; (8004d6c <TIM_Base_SetConfig+0xe8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d007      	beq.n	8004cbc <TIM_Base_SetConfig+0x38>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a30      	ldr	r2, [pc, #192]	; (8004d70 <TIM_Base_SetConfig+0xec>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d003      	beq.n	8004cbc <TIM_Base_SetConfig+0x38>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a2f      	ldr	r2, [pc, #188]	; (8004d74 <TIM_Base_SetConfig+0xf0>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d108      	bne.n	8004cce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a25      	ldr	r2, [pc, #148]	; (8004d68 <TIM_Base_SetConfig+0xe4>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d01b      	beq.n	8004d0e <TIM_Base_SetConfig+0x8a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cdc:	d017      	beq.n	8004d0e <TIM_Base_SetConfig+0x8a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a22      	ldr	r2, [pc, #136]	; (8004d6c <TIM_Base_SetConfig+0xe8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d013      	beq.n	8004d0e <TIM_Base_SetConfig+0x8a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a21      	ldr	r2, [pc, #132]	; (8004d70 <TIM_Base_SetConfig+0xec>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00f      	beq.n	8004d0e <TIM_Base_SetConfig+0x8a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a20      	ldr	r2, [pc, #128]	; (8004d74 <TIM_Base_SetConfig+0xf0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00b      	beq.n	8004d0e <TIM_Base_SetConfig+0x8a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a1f      	ldr	r2, [pc, #124]	; (8004d78 <TIM_Base_SetConfig+0xf4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d007      	beq.n	8004d0e <TIM_Base_SetConfig+0x8a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a1e      	ldr	r2, [pc, #120]	; (8004d7c <TIM_Base_SetConfig+0xf8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d003      	beq.n	8004d0e <TIM_Base_SetConfig+0x8a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a1d      	ldr	r2, [pc, #116]	; (8004d80 <TIM_Base_SetConfig+0xfc>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d108      	bne.n	8004d20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a08      	ldr	r2, [pc, #32]	; (8004d68 <TIM_Base_SetConfig+0xe4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d103      	bne.n	8004d54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	615a      	str	r2, [r3, #20]
}
 8004d5a:	bf00      	nop
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40010000 	.word	0x40010000
 8004d6c:	40000400 	.word	0x40000400
 8004d70:	40000800 	.word	0x40000800
 8004d74:	40000c00 	.word	0x40000c00
 8004d78:	40014000 	.word	0x40014000
 8004d7c:	40014400 	.word	0x40014400
 8004d80:	40014800 	.word	0x40014800

08004d84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	f023 0201 	bic.w	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0303 	bic.w	r3, r3, #3
 8004dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f023 0302 	bic.w	r3, r3, #2
 8004dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a1c      	ldr	r2, [pc, #112]	; (8004e4c <TIM_OC1_SetConfig+0xc8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d10c      	bne.n	8004dfa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f023 0308 	bic.w	r3, r3, #8
 8004de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f023 0304 	bic.w	r3, r3, #4
 8004df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a13      	ldr	r2, [pc, #76]	; (8004e4c <TIM_OC1_SetConfig+0xc8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d111      	bne.n	8004e26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	621a      	str	r2, [r3, #32]
}
 8004e40:	bf00      	nop
 8004e42:	371c      	adds	r7, #28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	40010000 	.word	0x40010000

08004e50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	f023 0210 	bic.w	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	021b      	lsls	r3, r3, #8
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f023 0320 	bic.w	r3, r3, #32
 8004e9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a1e      	ldr	r2, [pc, #120]	; (8004f24 <TIM_OC2_SetConfig+0xd4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d10d      	bne.n	8004ecc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a15      	ldr	r2, [pc, #84]	; (8004f24 <TIM_OC2_SetConfig+0xd4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d113      	bne.n	8004efc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	621a      	str	r2, [r3, #32]
}
 8004f16:	bf00      	nop
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40010000 	.word	0x40010000

08004f28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0303 	bic.w	r3, r3, #3
 8004f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	021b      	lsls	r3, r3, #8
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a1d      	ldr	r2, [pc, #116]	; (8004ff8 <TIM_OC3_SetConfig+0xd0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d10d      	bne.n	8004fa2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a14      	ldr	r2, [pc, #80]	; (8004ff8 <TIM_OC3_SetConfig+0xd0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d113      	bne.n	8004fd2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	621a      	str	r2, [r3, #32]
}
 8004fec:	bf00      	nop
 8004fee:	371c      	adds	r7, #28
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	40010000 	.word	0x40010000

08004ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800502a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	031b      	lsls	r3, r3, #12
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a10      	ldr	r2, [pc, #64]	; (8005098 <TIM_OC4_SetConfig+0x9c>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d109      	bne.n	8005070 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	019b      	lsls	r3, r3, #6
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	621a      	str	r2, [r3, #32]
}
 800508a:	bf00      	nop
 800508c:	371c      	adds	r7, #28
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40010000 	.word	0x40010000

0800509c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	f023 0201 	bic.w	r2, r3, #1
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f023 030a 	bic.w	r3, r3, #10
 80050d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4313      	orrs	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	621a      	str	r2, [r3, #32]
}
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b087      	sub	sp, #28
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f023 0210 	bic.w	r2, r3, #16
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005124:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	031b      	lsls	r3, r3, #12
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005136:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	621a      	str	r2, [r3, #32]
}
 800514e:	bf00      	nop
 8005150:	371c      	adds	r7, #28
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800515a:	b480      	push	{r7}
 800515c:	b085      	sub	sp, #20
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005170:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	f043 0307 	orr.w	r3, r3, #7
 800517c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	609a      	str	r2, [r3, #8]
}
 8005184:	bf00      	nop
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	021a      	lsls	r2, r3, #8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	609a      	str	r2, [r3, #8]
}
 80051c4:	bf00      	nop
 80051c6:	371c      	adds	r7, #28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f003 031f 	and.w	r3, r3, #31
 80051e2:	2201      	movs	r2, #1
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a1a      	ldr	r2, [r3, #32]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	43db      	mvns	r3, r3
 80051f2:	401a      	ands	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1a      	ldr	r2, [r3, #32]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f003 031f 	and.w	r3, r3, #31
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	fa01 f303 	lsl.w	r3, r1, r3
 8005208:	431a      	orrs	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	621a      	str	r2, [r3, #32]
}
 800520e:	bf00      	nop
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
	...

0800521c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005230:	2302      	movs	r3, #2
 8005232:	e050      	b.n	80052d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1c      	ldr	r2, [pc, #112]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d018      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005280:	d013      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00e      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a16      	ldr	r2, [pc, #88]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d009      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a15      	ldr	r2, [pc, #84]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d004      	beq.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a13      	ldr	r2, [pc, #76]	; (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d10c      	bne.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40010000 	.word	0x40010000
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40000c00 	.word	0x40000c00
 80052f4:	40014000 	.word	0x40014000

080052f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e03f      	b.n	80053b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7fd f93a 	bl	80025c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2224      	movs	r2, #36	; 0x24
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fe49 	bl	8005ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	691a      	ldr	r2, [r3, #16]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	695a      	ldr	r2, [r3, #20]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b082      	sub	sp, #8
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e021      	b.n	8005410 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2224      	movs	r2, #36	; 0x24
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053e2:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7fd f977 	bl	80026d8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08a      	sub	sp, #40	; 0x28
 800541c:	af02      	add	r7, sp, #8
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	4613      	mov	r3, r2
 8005426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b20      	cmp	r3, #32
 8005436:	d17c      	bne.n	8005532 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <HAL_UART_Transmit+0x2c>
 800543e:	88fb      	ldrh	r3, [r7, #6]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e075      	b.n	8005534 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_UART_Transmit+0x3e>
 8005452:	2302      	movs	r3, #2
 8005454:	e06e      	b.n	8005534 <HAL_UART_Transmit+0x11c>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2221      	movs	r2, #33	; 0x21
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800546c:	f7fd fb14 	bl	8002a98 <HAL_GetTick>
 8005470:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	88fa      	ldrh	r2, [r7, #6]
 8005476:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	88fa      	ldrh	r2, [r7, #6]
 800547c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005486:	d108      	bne.n	800549a <HAL_UART_Transmit+0x82>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d104      	bne.n	800549a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005490:	2300      	movs	r3, #0
 8005492:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	61bb      	str	r3, [r7, #24]
 8005498:	e003      	b.n	80054a2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800549e:	2300      	movs	r3, #0
 80054a0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80054aa:	e02a      	b.n	8005502 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2200      	movs	r2, #0
 80054b4:	2180      	movs	r1, #128	; 0x80
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 fb5a 	bl	8005b70 <UART_WaitOnFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e036      	b.n	8005534 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10b      	bne.n	80054e4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	461a      	mov	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054da:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	3302      	adds	r3, #2
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	e007      	b.n	80054f4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	781a      	ldrb	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	3301      	adds	r3, #1
 80054f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005506:	b29b      	uxth	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1cf      	bne.n	80054ac <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	2200      	movs	r2, #0
 8005514:	2140      	movs	r1, #64	; 0x40
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 fb2a 	bl	8005b70 <UART_WaitOnFlagUntilTimeout>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e006      	b.n	8005534 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800552e:	2300      	movs	r3, #0
 8005530:	e000      	b.n	8005534 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005532:	2302      	movs	r3, #2
  }
}
 8005534:	4618      	mov	r0, r3
 8005536:	3720      	adds	r7, #32
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b20      	cmp	r3, #32
 8005554:	d130      	bne.n	80055b8 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <HAL_UART_Transmit_IT+0x26>
 800555c:	88fb      	ldrh	r3, [r7, #6]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e029      	b.n	80055ba <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_UART_Transmit_IT+0x38>
 8005570:	2302      	movs	r3, #2
 8005572:	e022      	b.n	80055ba <HAL_UART_Transmit_IT+0x7e>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	88fa      	ldrh	r2, [r7, #6]
 8005586:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	88fa      	ldrh	r2, [r7, #6]
 800558c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2221      	movs	r2, #33	; 0x21
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68da      	ldr	r2, [r3, #12]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055b2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	e000      	b.n	80055ba <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80055b8:	2302      	movs	r3, #2
  }
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	4613      	mov	r3, r2
 80055d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d11d      	bne.n	800561c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <HAL_UART_Receive_IT+0x26>
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e016      	b.n	800561e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_UART_Receive_IT+0x38>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e00f      	b.n	800561e <HAL_UART_Receive_IT+0x58>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800560c:	88fb      	ldrh	r3, [r7, #6]
 800560e:	461a      	mov	r2, r3
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 fb1a 	bl	8005c4c <UART_Start_Receive_IT>
 8005618:	4603      	mov	r3, r0
 800561a:	e000      	b.n	800561e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800561c:	2302      	movs	r3, #2
  }
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b0ba      	sub	sp, #232	; 0xe8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800564e:	2300      	movs	r3, #0
 8005650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005654:	2300      	movs	r3, #0
 8005656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800565a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10f      	bne.n	800568e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800566e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <HAL_UART_IRQHandler+0x66>
 800567a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 fbfd 	bl	8005e86 <UART_Receive_IT>
      return;
 800568c:	e256      	b.n	8005b3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800568e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 80de 	beq.w	8005854 <HAL_UART_IRQHandler+0x22c>
 8005698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d106      	bne.n	80056b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 80d1 	beq.w	8005854 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00b      	beq.n	80056d6 <HAL_UART_IRQHandler+0xae>
 80056be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d005      	beq.n	80056d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f043 0201 	orr.w	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00b      	beq.n	80056fa <HAL_UART_IRQHandler+0xd2>
 80056e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f043 0202 	orr.w	r2, r3, #2
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00b      	beq.n	800571e <HAL_UART_IRQHandler+0xf6>
 8005706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d005      	beq.n	800571e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	f043 0204 	orr.w	r2, r3, #4
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800571e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d011      	beq.n	800574e <HAL_UART_IRQHandler+0x126>
 800572a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d105      	bne.n	8005742 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f043 0208 	orr.w	r2, r3, #8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 81ed 	beq.w	8005b32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d008      	beq.n	8005776 <HAL_UART_IRQHandler+0x14e>
 8005764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fb88 	bl	8005e86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005780:	2b40      	cmp	r3, #64	; 0x40
 8005782:	bf0c      	ite	eq
 8005784:	2301      	moveq	r3, #1
 8005786:	2300      	movne	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	2b00      	cmp	r3, #0
 8005798:	d103      	bne.n	80057a2 <HAL_UART_IRQHandler+0x17a>
 800579a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d04f      	beq.n	8005842 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fa90 	bl	8005cc8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	d141      	bne.n	800583a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3314      	adds	r3, #20
 80057bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3314      	adds	r3, #20
 80057de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80057e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80057ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80057fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1d9      	bne.n	80057b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	2b00      	cmp	r3, #0
 8005808:	d013      	beq.n	8005832 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	4a7d      	ldr	r2, [pc, #500]	; (8005a04 <HAL_UART_IRQHandler+0x3dc>)
 8005810:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005816:	4618      	mov	r0, r3
 8005818:	f7fd fb21 	bl	8002e5e <HAL_DMA_Abort_IT>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d016      	beq.n	8005850 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800582c:	4610      	mov	r0, r2
 800582e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005830:	e00e      	b.n	8005850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fc fc8c 	bl	8002150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005838:	e00a      	b.n	8005850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fc fc88 	bl	8002150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005840:	e006      	b.n	8005850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fc fc84 	bl	8002150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800584e:	e170      	b.n	8005b32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005850:	bf00      	nop
    return;
 8005852:	e16e      	b.n	8005b32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005858:	2b01      	cmp	r3, #1
 800585a:	f040 814a 	bne.w	8005af2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800585e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005862:	f003 0310 	and.w	r3, r3, #16
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 8143 	beq.w	8005af2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800586c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 813c 	beq.w	8005af2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800587a:	2300      	movs	r3, #0
 800587c:	60bb      	str	r3, [r7, #8]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	60bb      	str	r3, [r7, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	60bb      	str	r3, [r7, #8]
 800588e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589a:	2b40      	cmp	r3, #64	; 0x40
 800589c:	f040 80b4 	bne.w	8005a08 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8140 	beq.w	8005b36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058be:	429a      	cmp	r2, r3
 80058c0:	f080 8139 	bcs.w	8005b36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058d6:	f000 8088 	beq.w	80059ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	330c      	adds	r3, #12
 80058e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80058f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	330c      	adds	r3, #12
 8005902:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005906:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800590a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005912:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800591e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1d9      	bne.n	80058da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3314      	adds	r3, #20
 800592c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3314      	adds	r3, #20
 8005946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800594a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800594e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005952:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800595c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e1      	bne.n	8005926 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3314      	adds	r3, #20
 8005968:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800596c:	e853 3f00 	ldrex	r3, [r3]
 8005970:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005978:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3314      	adds	r3, #20
 8005982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005986:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005988:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800598c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e3      	bne.n	8005962 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	330c      	adds	r3, #12
 80059ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ba:	f023 0310 	bic.w	r3, r3, #16
 80059be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	330c      	adds	r3, #12
 80059c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80059cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80059ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059d4:	e841 2300 	strex	r3, r2, [r1]
 80059d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e3      	bne.n	80059a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fd f9ca 	bl	8002d7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	4619      	mov	r1, r3
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f8ac 	bl	8005b58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a00:	e099      	b.n	8005b36 <HAL_UART_IRQHandler+0x50e>
 8005a02:	bf00      	nop
 8005a04:	08005d8f 	.word	0x08005d8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 808b 	beq.w	8005b3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 8086 	beq.w	8005b3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	330c      	adds	r3, #12
 8005a34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	e853 3f00 	ldrex	r3, [r3]
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	330c      	adds	r3, #12
 8005a4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005a52:	647a      	str	r2, [r7, #68]	; 0x44
 8005a54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a5a:	e841 2300 	strex	r3, r2, [r1]
 8005a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1e3      	bne.n	8005a2e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3314      	adds	r3, #20
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	e853 3f00 	ldrex	r3, [r3]
 8005a74:	623b      	str	r3, [r7, #32]
   return(result);
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	f023 0301 	bic.w	r3, r3, #1
 8005a7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3314      	adds	r3, #20
 8005a86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a8a:	633a      	str	r2, [r7, #48]	; 0x30
 8005a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e3      	bne.n	8005a66 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	330c      	adds	r3, #12
 8005ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 0310 	bic.w	r3, r3, #16
 8005ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	330c      	adds	r3, #12
 8005acc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ad0:	61fa      	str	r2, [r7, #28]
 8005ad2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	69b9      	ldr	r1, [r7, #24]
 8005ad6:	69fa      	ldr	r2, [r7, #28]
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	617b      	str	r3, [r7, #20]
   return(result);
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e3      	bne.n	8005aac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ae4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f834 	bl	8005b58 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005af0:	e023      	b.n	8005b3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <HAL_UART_IRQHandler+0x4ea>
 8005afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f953 	bl	8005db6 <UART_Transmit_IT>
    return;
 8005b10:	e014      	b.n	8005b3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00e      	beq.n	8005b3c <HAL_UART_IRQHandler+0x514>
 8005b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d008      	beq.n	8005b3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f993 	bl	8005e56 <UART_EndTransmit_IT>
    return;
 8005b30:	e004      	b.n	8005b3c <HAL_UART_IRQHandler+0x514>
    return;
 8005b32:	bf00      	nop
 8005b34:	e002      	b.n	8005b3c <HAL_UART_IRQHandler+0x514>
      return;
 8005b36:	bf00      	nop
 8005b38:	e000      	b.n	8005b3c <HAL_UART_IRQHandler+0x514>
      return;
 8005b3a:	bf00      	nop
  }
}
 8005b3c:	37e8      	adds	r7, #232	; 0xe8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop

08005b44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b090      	sub	sp, #64	; 0x40
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b80:	e050      	b.n	8005c24 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d04c      	beq.n	8005c24 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d007      	beq.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b90:	f7fc ff82 	bl	8002a98 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d241      	bcs.n	8005c24 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bc0:	637a      	str	r2, [r7, #52]	; 0x34
 8005bc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bc8:	e841 2300 	strex	r3, r2, [r1]
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1e5      	bne.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3314      	adds	r3, #20
 8005bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	e853 3f00 	ldrex	r3, [r3]
 8005be2:	613b      	str	r3, [r7, #16]
   return(result);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f023 0301 	bic.w	r3, r3, #1
 8005bea:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3314      	adds	r3, #20
 8005bf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bf4:	623a      	str	r2, [r7, #32]
 8005bf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	69f9      	ldr	r1, [r7, #28]
 8005bfa:	6a3a      	ldr	r2, [r7, #32]
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e5      	bne.n	8005bd4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e00f      	b.n	8005c44 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	bf0c      	ite	eq
 8005c34:	2301      	moveq	r3, #1
 8005c36:	2300      	movne	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d09f      	beq.n	8005b82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3740      	adds	r7, #64	; 0x40
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	4613      	mov	r3, r2
 8005c58:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	88fa      	ldrh	r2, [r7, #6]
 8005c64:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	88fa      	ldrh	r2, [r7, #6]
 8005c6a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2222      	movs	r2, #34	; 0x22
 8005c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d007      	beq.n	8005c9a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c98:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695a      	ldr	r2, [r3, #20]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f042 0201 	orr.w	r2, r2, #1
 8005ca8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0220 	orr.w	r2, r2, #32
 8005cb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b095      	sub	sp, #84	; 0x54
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	330c      	adds	r3, #12
 8005cd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cf0:	643a      	str	r2, [r7, #64]	; 0x40
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e5      	bne.n	8005cd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3314      	adds	r3, #20
 8005d0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	e853 3f00 	ldrex	r3, [r3]
 8005d12:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	f023 0301 	bic.w	r3, r3, #1
 8005d1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3314      	adds	r3, #20
 8005d22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d2c:	e841 2300 	strex	r3, r2, [r1]
 8005d30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e5      	bne.n	8005d04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d119      	bne.n	8005d74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f023 0310 	bic.w	r3, r3, #16
 8005d56:	647b      	str	r3, [r7, #68]	; 0x44
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d60:	61ba      	str	r2, [r7, #24]
 8005d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	6979      	ldr	r1, [r7, #20]
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e5      	bne.n	8005d40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d82:	bf00      	nop
 8005d84:	3754      	adds	r7, #84	; 0x54
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f7fc f9d1 	bl	8002150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dae:	bf00      	nop
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b085      	sub	sp, #20
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b21      	cmp	r3, #33	; 0x21
 8005dc8:	d13e      	bne.n	8005e48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd2:	d114      	bne.n	8005dfe <UART_Transmit_IT+0x48>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d110      	bne.n	8005dfe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005df0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	1c9a      	adds	r2, r3, #2
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	621a      	str	r2, [r3, #32]
 8005dfc:	e008      	b.n	8005e10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	1c59      	adds	r1, r3, #1
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6211      	str	r1, [r2, #32]
 8005e08:	781a      	ldrb	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10f      	bne.n	8005e44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	e000      	b.n	8005e4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e48:	2302      	movs	r3, #2
  }
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b082      	sub	sp, #8
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff fe64 	bl	8005b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b08c      	sub	sp, #48	; 0x30
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b22      	cmp	r3, #34	; 0x22
 8005e98:	f040 80ab 	bne.w	8005ff2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea4:	d117      	bne.n	8005ed6 <UART_Receive_IT+0x50>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d113      	bne.n	8005ed6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ece:	1c9a      	adds	r2, r3, #2
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ed4:	e026      	b.n	8005f24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee8:	d007      	beq.n	8005efa <UART_Receive_IT+0x74>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10a      	bne.n	8005f08 <UART_Receive_IT+0x82>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	e008      	b.n	8005f1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	4619      	mov	r1, r3
 8005f32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d15a      	bne.n	8005fee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0220 	bic.w	r2, r2, #32
 8005f46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695a      	ldr	r2, [r3, #20]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0201 	bic.w	r2, r2, #1
 8005f66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d135      	bne.n	8005fe4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	330c      	adds	r3, #12
 8005f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f023 0310 	bic.w	r3, r3, #16
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	330c      	adds	r3, #12
 8005f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9e:	623a      	str	r2, [r7, #32]
 8005fa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	69f9      	ldr	r1, [r7, #28]
 8005fa4:	6a3a      	ldr	r2, [r7, #32]
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e5      	bne.n	8005f7e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	2b10      	cmp	r3, #16
 8005fbe:	d10a      	bne.n	8005fd6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff fdbb 	bl	8005b58 <HAL_UARTEx_RxEventCallback>
 8005fe2:	e002      	b.n	8005fea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7fc f911 	bl	800220c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	e002      	b.n	8005ff4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e000      	b.n	8005ff4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005ff2:	2302      	movs	r3, #2
  }
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3730      	adds	r7, #48	; 0x30
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006000:	b0c0      	sub	sp, #256	; 0x100
 8006002:	af00      	add	r7, sp, #0
 8006004:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006018:	68d9      	ldr	r1, [r3, #12]
 800601a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	ea40 0301 	orr.w	r3, r0, r1
 8006024:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	431a      	orrs	r2, r3
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	431a      	orrs	r2, r3
 800603c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006054:	f021 010c 	bic.w	r1, r1, #12
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006062:	430b      	orrs	r3, r1
 8006064:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006076:	6999      	ldr	r1, [r3, #24]
 8006078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	ea40 0301 	orr.w	r3, r0, r1
 8006082:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	4b8f      	ldr	r3, [pc, #572]	; (80062c8 <UART_SetConfig+0x2cc>)
 800608c:	429a      	cmp	r2, r3
 800608e:	d005      	beq.n	800609c <UART_SetConfig+0xa0>
 8006090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	4b8d      	ldr	r3, [pc, #564]	; (80062cc <UART_SetConfig+0x2d0>)
 8006098:	429a      	cmp	r2, r3
 800609a:	d104      	bne.n	80060a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800609c:	f7fd fde2 	bl	8003c64 <HAL_RCC_GetPCLK2Freq>
 80060a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80060a4:	e003      	b.n	80060ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060a6:	f7fd fdc9 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 80060aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b8:	f040 810c 	bne.w	80062d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060c0:	2200      	movs	r2, #0
 80060c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80060ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80060ce:	4622      	mov	r2, r4
 80060d0:	462b      	mov	r3, r5
 80060d2:	1891      	adds	r1, r2, r2
 80060d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80060d6:	415b      	adcs	r3, r3
 80060d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80060de:	4621      	mov	r1, r4
 80060e0:	eb12 0801 	adds.w	r8, r2, r1
 80060e4:	4629      	mov	r1, r5
 80060e6:	eb43 0901 	adc.w	r9, r3, r1
 80060ea:	f04f 0200 	mov.w	r2, #0
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060fe:	4690      	mov	r8, r2
 8006100:	4699      	mov	r9, r3
 8006102:	4623      	mov	r3, r4
 8006104:	eb18 0303 	adds.w	r3, r8, r3
 8006108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800610c:	462b      	mov	r3, r5
 800610e:	eb49 0303 	adc.w	r3, r9, r3
 8006112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006122:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006126:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800612a:	460b      	mov	r3, r1
 800612c:	18db      	adds	r3, r3, r3
 800612e:	653b      	str	r3, [r7, #80]	; 0x50
 8006130:	4613      	mov	r3, r2
 8006132:	eb42 0303 	adc.w	r3, r2, r3
 8006136:	657b      	str	r3, [r7, #84]	; 0x54
 8006138:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800613c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006140:	f7fa f8b6 	bl	80002b0 <__aeabi_uldivmod>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4b61      	ldr	r3, [pc, #388]	; (80062d0 <UART_SetConfig+0x2d4>)
 800614a:	fba3 2302 	umull	r2, r3, r3, r2
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	011c      	lsls	r4, r3, #4
 8006152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006156:	2200      	movs	r2, #0
 8006158:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800615c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006160:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006164:	4642      	mov	r2, r8
 8006166:	464b      	mov	r3, r9
 8006168:	1891      	adds	r1, r2, r2
 800616a:	64b9      	str	r1, [r7, #72]	; 0x48
 800616c:	415b      	adcs	r3, r3
 800616e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006170:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006174:	4641      	mov	r1, r8
 8006176:	eb12 0a01 	adds.w	sl, r2, r1
 800617a:	4649      	mov	r1, r9
 800617c:	eb43 0b01 	adc.w	fp, r3, r1
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800618c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006190:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006194:	4692      	mov	sl, r2
 8006196:	469b      	mov	fp, r3
 8006198:	4643      	mov	r3, r8
 800619a:	eb1a 0303 	adds.w	r3, sl, r3
 800619e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061a2:	464b      	mov	r3, r9
 80061a4:	eb4b 0303 	adc.w	r3, fp, r3
 80061a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80061bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80061c0:	460b      	mov	r3, r1
 80061c2:	18db      	adds	r3, r3, r3
 80061c4:	643b      	str	r3, [r7, #64]	; 0x40
 80061c6:	4613      	mov	r3, r2
 80061c8:	eb42 0303 	adc.w	r3, r2, r3
 80061cc:	647b      	str	r3, [r7, #68]	; 0x44
 80061ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80061d6:	f7fa f86b 	bl	80002b0 <__aeabi_uldivmod>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4611      	mov	r1, r2
 80061e0:	4b3b      	ldr	r3, [pc, #236]	; (80062d0 <UART_SetConfig+0x2d4>)
 80061e2:	fba3 2301 	umull	r2, r3, r3, r1
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	2264      	movs	r2, #100	; 0x64
 80061ea:	fb02 f303 	mul.w	r3, r2, r3
 80061ee:	1acb      	subs	r3, r1, r3
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80061f6:	4b36      	ldr	r3, [pc, #216]	; (80062d0 <UART_SetConfig+0x2d4>)
 80061f8:	fba3 2302 	umull	r2, r3, r3, r2
 80061fc:	095b      	lsrs	r3, r3, #5
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006204:	441c      	add	r4, r3
 8006206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800620a:	2200      	movs	r2, #0
 800620c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006210:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006214:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006218:	4642      	mov	r2, r8
 800621a:	464b      	mov	r3, r9
 800621c:	1891      	adds	r1, r2, r2
 800621e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006220:	415b      	adcs	r3, r3
 8006222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006224:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006228:	4641      	mov	r1, r8
 800622a:	1851      	adds	r1, r2, r1
 800622c:	6339      	str	r1, [r7, #48]	; 0x30
 800622e:	4649      	mov	r1, r9
 8006230:	414b      	adcs	r3, r1
 8006232:	637b      	str	r3, [r7, #52]	; 0x34
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006240:	4659      	mov	r1, fp
 8006242:	00cb      	lsls	r3, r1, #3
 8006244:	4651      	mov	r1, sl
 8006246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800624a:	4651      	mov	r1, sl
 800624c:	00ca      	lsls	r2, r1, #3
 800624e:	4610      	mov	r0, r2
 8006250:	4619      	mov	r1, r3
 8006252:	4603      	mov	r3, r0
 8006254:	4642      	mov	r2, r8
 8006256:	189b      	adds	r3, r3, r2
 8006258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800625c:	464b      	mov	r3, r9
 800625e:	460a      	mov	r2, r1
 8006260:	eb42 0303 	adc.w	r3, r2, r3
 8006264:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006274:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006278:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800627c:	460b      	mov	r3, r1
 800627e:	18db      	adds	r3, r3, r3
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
 8006282:	4613      	mov	r3, r2
 8006284:	eb42 0303 	adc.w	r3, r2, r3
 8006288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800628a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800628e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006292:	f7fa f80d 	bl	80002b0 <__aeabi_uldivmod>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4b0d      	ldr	r3, [pc, #52]	; (80062d0 <UART_SetConfig+0x2d4>)
 800629c:	fba3 1302 	umull	r1, r3, r3, r2
 80062a0:	095b      	lsrs	r3, r3, #5
 80062a2:	2164      	movs	r1, #100	; 0x64
 80062a4:	fb01 f303 	mul.w	r3, r1, r3
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	3332      	adds	r3, #50	; 0x32
 80062ae:	4a08      	ldr	r2, [pc, #32]	; (80062d0 <UART_SetConfig+0x2d4>)
 80062b0:	fba2 2303 	umull	r2, r3, r2, r3
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	f003 0207 	and.w	r2, r3, #7
 80062ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4422      	add	r2, r4
 80062c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062c4:	e106      	b.n	80064d4 <UART_SetConfig+0x4d8>
 80062c6:	bf00      	nop
 80062c8:	40011000 	.word	0x40011000
 80062cc:	40011400 	.word	0x40011400
 80062d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062d8:	2200      	movs	r2, #0
 80062da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80062de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80062e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80062e6:	4642      	mov	r2, r8
 80062e8:	464b      	mov	r3, r9
 80062ea:	1891      	adds	r1, r2, r2
 80062ec:	6239      	str	r1, [r7, #32]
 80062ee:	415b      	adcs	r3, r3
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
 80062f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062f6:	4641      	mov	r1, r8
 80062f8:	1854      	adds	r4, r2, r1
 80062fa:	4649      	mov	r1, r9
 80062fc:	eb43 0501 	adc.w	r5, r3, r1
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	00eb      	lsls	r3, r5, #3
 800630a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800630e:	00e2      	lsls	r2, r4, #3
 8006310:	4614      	mov	r4, r2
 8006312:	461d      	mov	r5, r3
 8006314:	4643      	mov	r3, r8
 8006316:	18e3      	adds	r3, r4, r3
 8006318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800631c:	464b      	mov	r3, r9
 800631e:	eb45 0303 	adc.w	r3, r5, r3
 8006322:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006332:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	f04f 0300 	mov.w	r3, #0
 800633e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006342:	4629      	mov	r1, r5
 8006344:	008b      	lsls	r3, r1, #2
 8006346:	4621      	mov	r1, r4
 8006348:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800634c:	4621      	mov	r1, r4
 800634e:	008a      	lsls	r2, r1, #2
 8006350:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006354:	f7f9 ffac 	bl	80002b0 <__aeabi_uldivmod>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	4b60      	ldr	r3, [pc, #384]	; (80064e0 <UART_SetConfig+0x4e4>)
 800635e:	fba3 2302 	umull	r2, r3, r3, r2
 8006362:	095b      	lsrs	r3, r3, #5
 8006364:	011c      	lsls	r4, r3, #4
 8006366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800636a:	2200      	movs	r2, #0
 800636c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006370:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006374:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006378:	4642      	mov	r2, r8
 800637a:	464b      	mov	r3, r9
 800637c:	1891      	adds	r1, r2, r2
 800637e:	61b9      	str	r1, [r7, #24]
 8006380:	415b      	adcs	r3, r3
 8006382:	61fb      	str	r3, [r7, #28]
 8006384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006388:	4641      	mov	r1, r8
 800638a:	1851      	adds	r1, r2, r1
 800638c:	6139      	str	r1, [r7, #16]
 800638e:	4649      	mov	r1, r9
 8006390:	414b      	adcs	r3, r1
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	f04f 0300 	mov.w	r3, #0
 800639c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063a0:	4659      	mov	r1, fp
 80063a2:	00cb      	lsls	r3, r1, #3
 80063a4:	4651      	mov	r1, sl
 80063a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063aa:	4651      	mov	r1, sl
 80063ac:	00ca      	lsls	r2, r1, #3
 80063ae:	4610      	mov	r0, r2
 80063b0:	4619      	mov	r1, r3
 80063b2:	4603      	mov	r3, r0
 80063b4:	4642      	mov	r2, r8
 80063b6:	189b      	adds	r3, r3, r2
 80063b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063bc:	464b      	mov	r3, r9
 80063be:	460a      	mov	r2, r1
 80063c0:	eb42 0303 	adc.w	r3, r2, r3
 80063c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80063d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	f04f 0300 	mov.w	r3, #0
 80063dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80063e0:	4649      	mov	r1, r9
 80063e2:	008b      	lsls	r3, r1, #2
 80063e4:	4641      	mov	r1, r8
 80063e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063ea:	4641      	mov	r1, r8
 80063ec:	008a      	lsls	r2, r1, #2
 80063ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80063f2:	f7f9 ff5d 	bl	80002b0 <__aeabi_uldivmod>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4611      	mov	r1, r2
 80063fc:	4b38      	ldr	r3, [pc, #224]	; (80064e0 <UART_SetConfig+0x4e4>)
 80063fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	2264      	movs	r2, #100	; 0x64
 8006406:	fb02 f303 	mul.w	r3, r2, r3
 800640a:	1acb      	subs	r3, r1, r3
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	3332      	adds	r3, #50	; 0x32
 8006410:	4a33      	ldr	r2, [pc, #204]	; (80064e0 <UART_SetConfig+0x4e4>)
 8006412:	fba2 2303 	umull	r2, r3, r2, r3
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800641c:	441c      	add	r4, r3
 800641e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006422:	2200      	movs	r2, #0
 8006424:	673b      	str	r3, [r7, #112]	; 0x70
 8006426:	677a      	str	r2, [r7, #116]	; 0x74
 8006428:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800642c:	4642      	mov	r2, r8
 800642e:	464b      	mov	r3, r9
 8006430:	1891      	adds	r1, r2, r2
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	415b      	adcs	r3, r3
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800643c:	4641      	mov	r1, r8
 800643e:	1851      	adds	r1, r2, r1
 8006440:	6039      	str	r1, [r7, #0]
 8006442:	4649      	mov	r1, r9
 8006444:	414b      	adcs	r3, r1
 8006446:	607b      	str	r3, [r7, #4]
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006454:	4659      	mov	r1, fp
 8006456:	00cb      	lsls	r3, r1, #3
 8006458:	4651      	mov	r1, sl
 800645a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800645e:	4651      	mov	r1, sl
 8006460:	00ca      	lsls	r2, r1, #3
 8006462:	4610      	mov	r0, r2
 8006464:	4619      	mov	r1, r3
 8006466:	4603      	mov	r3, r0
 8006468:	4642      	mov	r2, r8
 800646a:	189b      	adds	r3, r3, r2
 800646c:	66bb      	str	r3, [r7, #104]	; 0x68
 800646e:	464b      	mov	r3, r9
 8006470:	460a      	mov	r2, r1
 8006472:	eb42 0303 	adc.w	r3, r2, r3
 8006476:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	663b      	str	r3, [r7, #96]	; 0x60
 8006482:	667a      	str	r2, [r7, #100]	; 0x64
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006490:	4649      	mov	r1, r9
 8006492:	008b      	lsls	r3, r1, #2
 8006494:	4641      	mov	r1, r8
 8006496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800649a:	4641      	mov	r1, r8
 800649c:	008a      	lsls	r2, r1, #2
 800649e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064a2:	f7f9 ff05 	bl	80002b0 <__aeabi_uldivmod>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4b0d      	ldr	r3, [pc, #52]	; (80064e0 <UART_SetConfig+0x4e4>)
 80064ac:	fba3 1302 	umull	r1, r3, r3, r2
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	2164      	movs	r1, #100	; 0x64
 80064b4:	fb01 f303 	mul.w	r3, r1, r3
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	3332      	adds	r3, #50	; 0x32
 80064be:	4a08      	ldr	r2, [pc, #32]	; (80064e0 <UART_SetConfig+0x4e4>)
 80064c0:	fba2 2303 	umull	r2, r3, r2, r3
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	f003 020f 	and.w	r2, r3, #15
 80064ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4422      	add	r2, r4
 80064d2:	609a      	str	r2, [r3, #8]
}
 80064d4:	bf00      	nop
 80064d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80064da:	46bd      	mov	sp, r7
 80064dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064e0:	51eb851f 	.word	0x51eb851f

080064e4 <HW_RESET>:


//No se puede quedar esperano en las funciones, hay que detectar a situaci�n y salir del bucle.
//pensar que solo entra cuando recibe datos, si no vuelve a entrar queda ah� eternamentes.
void HW_RESET(struct WIFI *a)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_RESET);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6818      	ldr	r0, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	889b      	ldrh	r3, [r3, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	4619      	mov	r1, r3
 80064f8:	f7fc ff3c 	bl	8003374 <HAL_GPIO_WritePin>
    ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 80064fc:	2115      	movs	r1, #21
 80064fe:	480b      	ldr	r0, [pc, #44]	; (800652c <HW_RESET+0x48>)
 8006500:	f7fa ffc0 	bl	8001484 <ITM0_Write>
    HAL_Delay(2000);											//Tiempo de reset del módulo
 8006504:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006508:	f7fc fad2 	bl	8002ab0 <HAL_Delay>
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
 800650c:	210e      	movs	r1, #14
 800650e:	4808      	ldr	r0, [pc, #32]	; (8006530 <HW_RESET+0x4c>)
 8006510:	f7fa ffb8 	bl	8001484 <ITM0_Write>
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6818      	ldr	r0, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	889b      	ldrh	r3, [r3, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	4619      	mov	r1, r3
 8006520:	f7fc ff28 	bl	8003374 <HAL_GPIO_WritePin>
}
 8006524:	bf00      	nop
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	080108a8 	.word	0x080108a8
 8006530:	080108c0 	.word	0x080108c0

08006534 <NOP>:
void NOP(struct WIFI *a)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <MUX>:
void MUX(struct WIFI *a)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2204      	movs	r2, #4
 80065c4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <IPDef>:
void IPDef(struct WIFI *a)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2205      	movs	r2, #5
 80065f0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2206      	movs	r2, #6
 8006648:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2208      	movs	r2, #8
 8006674:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2209      	movs	r2, #9
 80066a0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2207      	movs	r2, #7
 80066cc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <Inicializar>:
void Inicializar(struct WIFI *a)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
a->_overflowVector=512;			//Maximo tamaño del vector al procesar un +IPD
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800687a:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
	...

0800688c <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 800688c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800688e:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006892:	af06      	add	r7, sp, #24
 8006894:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006898:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800689c:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 800689e:	2300      	movs	r3, #0
 80068a0:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80068a4:	2300      	movs	r3, #0
 80068a6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80068aa:	2300      	movs	r3, #0
 80068ac:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80068b0:	2300      	movs	r3, #0
 80068b2:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80068b6:	2300      	movs	r3, #0
 80068b8:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 80068bc:	2320      	movs	r3, #32
 80068be:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 80068c2:	2322      	movs	r3, #34	; 0x22
 80068c4:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 80068c8:	4b7c      	ldr	r3, [pc, #496]	; (8006abc <AT_ESP8266_ND+0x230>)
 80068ca:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 80068ce:	4a7c      	ldr	r2, [pc, #496]	; (8006ac0 <AT_ESP8266_ND+0x234>)
 80068d0:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80068d4:	6812      	ldr	r2, [r2, #0]
 80068d6:	4611      	mov	r1, r2
 80068d8:	8019      	strh	r1, [r3, #0]
 80068da:	3302      	adds	r3, #2
 80068dc:	0c12      	lsrs	r2, r2, #16
 80068de:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 80068e0:	f642 4322 	movw	r3, #11298	; 0x2c22
 80068e4:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 80068e8:	f640 230d 	movw	r3, #2573	; 0xa0d
 80068ec:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80068f6:	2300      	movs	r3, #0
 80068f8:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 80068fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006900:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2200      	movs	r2, #0
 8006908:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 800690c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006910:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f203 6394 	addw	r3, r3, #1684	; 0x694
 800691a:	4618      	mov	r0, r3
 800691c:	f7f9 fc6a 	bl	80001f4 <strlen>
 8006920:	4603      	mov	r3, r0
 8006922:	461a      	mov	r2, r3
 8006924:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006928:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 8006932:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006936:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2200      	movs	r2, #0
 800693e:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 8006942:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006946:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006950:	4618      	mov	r0, r3
 8006952:	f7f9 fc4f 	bl	80001f4 <strlen>
 8006956:	4603      	mov	r3, r0
 8006958:	461a      	mov	r2, r3
 800695a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800695e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 8006968:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800696c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2206      	movs	r2, #6
 8006974:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006978:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800697c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006986:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800698a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006994:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006998:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80069a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80069b0:	603b      	str	r3, [r7, #0]
 80069b2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80069b6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80069ba:	6812      	ldr	r2, [r2, #0]
 80069bc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80069c0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80069c4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80069c8:	6809      	ldr	r1, [r1, #0]
 80069ca:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80069ce:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80069d2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80069d6:	6800      	ldr	r0, [r0, #0]
 80069d8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80069dc:	2300      	movs	r3, #0
 80069de:	9305      	str	r3, [sp, #20]
 80069e0:	9004      	str	r0, [sp, #16]
 80069e2:	9103      	str	r1, [sp, #12]
 80069e4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80069e8:	9102      	str	r1, [sp, #8]
 80069ea:	9201      	str	r2, [sp, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	4633      	mov	r3, r6
 80069f2:	4a34      	ldr	r2, [pc, #208]	; (8006ac4 <AT_ESP8266_ND+0x238>)
 80069f4:	4629      	mov	r1, r5
 80069f6:	4620      	mov	r0, r4
 80069f8:	f007 fe96 	bl	800e728 <FT_String_ND>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	f040 8140 	bne.w	8006c84 <AT_ESP8266_ND+0x3f8>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006a04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2206      	movs	r2, #6
 8006a10:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 8006a14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d150      	bne.n	8006ac8 <AT_ESP8266_ND+0x23c>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATA);
 8006a26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006a34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006a42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006a50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006a5e:	603b      	str	r3, [r7, #0]
 8006a60:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a64:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006a68:	6812      	ldr	r2, [r2, #0]
 8006a6a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006a6e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006a72:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006a76:	6809      	ldr	r1, [r1, #0]
 8006a78:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006a7c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006a80:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006a84:	6800      	ldr	r0, [r0, #0]
 8006a86:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006a8a:	2304      	movs	r3, #4
 8006a8c:	9305      	str	r3, [sp, #20]
 8006a8e:	9004      	str	r0, [sp, #16]
 8006a90:	9103      	str	r1, [sp, #12]
 8006a92:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006a96:	9102      	str	r1, [sp, #8]
 8006a98:	9201      	str	r2, [sp, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	4633      	mov	r3, r6
 8006aa0:	4a08      	ldr	r2, [pc, #32]	; (8006ac4 <AT_ESP8266_ND+0x238>)
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f007 fe3f 	bl	800e728 <FT_String_ND>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ab0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 8006aba:	e04f      	b.n	8006b5c <AT_ESP8266_ND+0x2d0>
 8006abc:	00222c22 	.word	0x00222c22
 8006ac0:	08010aa8 	.word	0x08010aa8
 8006ac4:	080108d0 	.word	0x080108d0
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATASRVR);
 8006ac8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006acc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006ad6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ada:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006ae4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ae8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006af2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006af6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006b00:	603b      	str	r3, [r7, #0]
 8006b02:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b06:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b0a:	6812      	ldr	r2, [r2, #0]
 8006b0c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b10:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b14:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b18:	6809      	ldr	r1, [r1, #0]
 8006b1a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006b1e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006b22:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006b26:	6800      	ldr	r0, [r0, #0]
 8006b28:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006b2c:	2305      	movs	r3, #5
 8006b2e:	9305      	str	r3, [sp, #20]
 8006b30:	9004      	str	r0, [sp, #16]
 8006b32:	9103      	str	r1, [sp, #12]
 8006b34:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b38:	9102      	str	r1, [sp, #8]
 8006b3a:	9201      	str	r2, [sp, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	4633      	mov	r3, r6
 8006b42:	4ad2      	ldr	r2, [pc, #840]	; (8006e8c <AT_ESP8266_ND+0x600>)
 8006b44:	4629      	mov	r1, r5
 8006b46:	4620      	mov	r0, r4
 8006b48:	f007 fdee 	bl	800e728 <FT_String_ND>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 8006b5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	d15a      	bne.n	8006c24 <AT_ESP8266_ND+0x398>
	 	{
	 		a->_estado_rcv_data=99;
 8006b6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2263      	movs	r2, #99	; 0x63
 8006b7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 8006b7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006b8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006b9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8006ba8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006bb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006bc4:	2341      	movs	r3, #65	; 0x41
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f008 f979 	bl	800eec0 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006bce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8006bdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006be0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006bea:	2341      	movs	r3, #65	; 0x41
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	2205      	movs	r2, #5
 8006bf2:	f008 f965 	bl	800eec0 <CopiaVector>

	 		a->_debug_rx_ok++;
 8006bf6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006c04:	1c5a      	adds	r2, r3, #1
 8006c06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 8006c14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 8006c24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006c32:	2b05      	cmp	r3, #5
 8006c34:	d126      	bne.n	8006c84 <AT_ESP8266_ND+0x3f8>
	 	{
	 		a->_estado_rcv_data=55;
 8006c36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2237      	movs	r2, #55	; 0x37
 8006c42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 8006c46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 8006c56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 8006c64:	1c5a      	adds	r2, r3, #1
 8006c66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 8006c74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006c84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2204      	movs	r2, #4
 8006c90:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006c94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006ca2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ca6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006cb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006cbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ccc:	603b      	str	r3, [r7, #0]
 8006cce:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006cd2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006cdc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ce0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ce4:	6809      	ldr	r1, [r1, #0]
 8006ce6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006cea:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006cee:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006cf2:	6800      	ldr	r0, [r0, #0]
 8006cf4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	9305      	str	r3, [sp, #20]
 8006cfc:	9004      	str	r0, [sp, #16]
 8006cfe:	9103      	str	r1, [sp, #12]
 8006d00:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d04:	9102      	str	r1, [sp, #8]
 8006d06:	9201      	str	r2, [sp, #4]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	4633      	mov	r3, r6
 8006d0e:	4a60      	ldr	r2, [pc, #384]	; (8006e90 <AT_ESP8266_ND+0x604>)
 8006d10:	4629      	mov	r1, r5
 8006d12:	4620      	mov	r0, r4
 8006d14:	f007 fd08 	bl	800e728 <FT_String_ND>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	f040 83b4 	bne.w	8007488 <AT_ESP8266_ND+0xbfc>
	{

		AT_decode=at_ok;
 8006d20:	2301      	movs	r3, #1
 8006d22:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 8006d26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2206      	movs	r2, #6
 8006d32:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Transmision ok
 8006d36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006d44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006d52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006d60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006d6e:	603b      	str	r3, [r7, #0]
 8006d70:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d74:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d78:	6812      	ldr	r2, [r2, #0]
 8006d7a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006d7e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d82:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d86:	6809      	ldr	r1, [r1, #0]
 8006d88:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006d8c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006d90:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006d94:	6800      	ldr	r0, [r0, #0]
 8006d96:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	9305      	str	r3, [sp, #20]
 8006d9e:	9004      	str	r0, [sp, #16]
 8006da0:	9103      	str	r1, [sp, #12]
 8006da2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006da6:	9102      	str	r1, [sp, #8]
 8006da8:	9201      	str	r2, [sp, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	4633      	mov	r3, r6
 8006db0:	4a38      	ldr	r2, [pc, #224]	; (8006e94 <AT_ESP8266_ND+0x608>)
 8006db2:	4629      	mov	r1, r5
 8006db4:	4620      	mov	r0, r4
 8006db6:	f007 fcb7 	bl	800e728 <FT_String_ND>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d113      	bne.n	8006de8 <AT_ESP8266_ND+0x55c>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8006dc0:	2313      	movs	r3, #19
 8006dc2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8006dc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 8006de4:	f001 bae1 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 8006de8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2208      	movs	r2, #8
 8006df4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006df8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006e06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006e14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006e22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006e30:	603b      	str	r3, [r7, #0]
 8006e32:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e36:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e3a:	6812      	ldr	r2, [r2, #0]
 8006e3c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006e40:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e44:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e48:	6809      	ldr	r1, [r1, #0]
 8006e4a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006e4e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006e52:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006e56:	6800      	ldr	r0, [r0, #0]
 8006e58:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	9305      	str	r3, [sp, #20]
 8006e60:	9004      	str	r0, [sp, #16]
 8006e62:	9103      	str	r1, [sp, #12]
 8006e64:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e68:	9102      	str	r1, [sp, #8]
 8006e6a:	9201      	str	r2, [sp, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	4633      	mov	r3, r6
 8006e72:	4a09      	ldr	r2, [pc, #36]	; (8006e98 <AT_ESP8266_ND+0x60c>)
 8006e74:	4629      	mov	r1, r5
 8006e76:	4620      	mov	r0, r4
 8006e78:	f007 fc56 	bl	800e728 <FT_String_ND>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d10c      	bne.n	8006e9c <AT_ESP8266_ND+0x610>
			{
			AT_decode=at_deconectar_ok;
 8006e82:	230d      	movs	r3, #13
 8006e84:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006e88:	f001 ba8f 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
 8006e8c:	080108d0 	.word	0x080108d0
 8006e90:	080108d8 	.word	0x080108d8
 8006e94:	080108e0 	.word	0x080108e0
 8006e98:	080108e8 	.word	0x080108e8
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006e9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ea0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	220a      	movs	r2, #10
 8006ea8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8006eac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006eba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ebe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006ec8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ecc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006ed6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006eda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ee4:	603b      	str	r3, [r7, #0]
 8006ee6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006eea:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006eee:	6812      	ldr	r2, [r2, #0]
 8006ef0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ef4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ef8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006efc:	6809      	ldr	r1, [r1, #0]
 8006efe:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f02:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006f06:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006f0a:	6800      	ldr	r0, [r0, #0]
 8006f0c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006f10:	2300      	movs	r3, #0
 8006f12:	9305      	str	r3, [sp, #20]
 8006f14:	9004      	str	r0, [sp, #16]
 8006f16:	9103      	str	r1, [sp, #12]
 8006f18:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f1c:	9102      	str	r1, [sp, #8]
 8006f1e:	9201      	str	r2, [sp, #4]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	4633      	mov	r3, r6
 8006f26:	4aaa      	ldr	r2, [pc, #680]	; (80071d0 <AT_ESP8266_ND+0x944>)
 8006f28:	4629      	mov	r1, r5
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f007 fbfc 	bl	800e728 <FT_String_ND>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d104      	bne.n	8006f40 <AT_ESP8266_ND+0x6b4>
			{
				AT_decode=at_cambiar_modo_ok;
 8006f36:	231c      	movs	r3, #28
 8006f38:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f3c:	f001 ba35 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8006f40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	220f      	movs	r2, #15
 8006f4c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8006f50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006f5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006f6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006f7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f88:	603b      	str	r3, [r7, #0]
 8006f8a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f8e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f92:	6812      	ldr	r2, [r2, #0]
 8006f94:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f98:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f9c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006fa0:	6809      	ldr	r1, [r1, #0]
 8006fa2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006fa6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006faa:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006fae:	6800      	ldr	r0, [r0, #0]
 8006fb0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	9305      	str	r3, [sp, #20]
 8006fb8:	9004      	str	r0, [sp, #16]
 8006fba:	9103      	str	r1, [sp, #12]
 8006fbc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006fc0:	9102      	str	r1, [sp, #8]
 8006fc2:	9201      	str	r2, [sp, #4]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	4633      	mov	r3, r6
 8006fca:	4a82      	ldr	r2, [pc, #520]	; (80071d4 <AT_ESP8266_ND+0x948>)
 8006fcc:	4629      	mov	r1, r5
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f007 fbaa 	bl	800e728 <FT_String_ND>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d104      	bne.n	8006fe4 <AT_ESP8266_ND+0x758>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 8006fda:	2317      	movs	r3, #23
 8006fdc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006fe0:	f001 b9e3 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 8006fe4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fe8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2203      	movs	r2, #3
 8006ff0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8006ff4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ff8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007002:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007006:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007010:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007014:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800701e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007022:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800702c:	603b      	str	r3, [r7, #0]
 800702e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007032:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007036:	6812      	ldr	r2, [r2, #0]
 8007038:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800703c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007040:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007044:	6809      	ldr	r1, [r1, #0]
 8007046:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800704a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800704e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007052:	6800      	ldr	r0, [r0, #0]
 8007054:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007058:	2300      	movs	r3, #0
 800705a:	9305      	str	r3, [sp, #20]
 800705c:	9004      	str	r0, [sp, #16]
 800705e:	9103      	str	r1, [sp, #12]
 8007060:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007064:	9102      	str	r1, [sp, #8]
 8007066:	9201      	str	r2, [sp, #4]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	4633      	mov	r3, r6
 800706e:	4a5a      	ldr	r2, [pc, #360]	; (80071d8 <AT_ESP8266_ND+0x94c>)
 8007070:	4629      	mov	r1, r5
 8007072:	4620      	mov	r0, r4
 8007074:	f007 fb58 	bl	800e728 <FT_String_ND>
 8007078:	4603      	mov	r3, r0
 800707a:	2b01      	cmp	r3, #1
 800707c:	d104      	bne.n	8007088 <AT_ESP8266_ND+0x7fc>
			{
				AT_decode=at_tcp_ok_to_send;
 800707e:	2314      	movs	r3, #20
 8007080:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007084:	f001 b991 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 8007088:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800708c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	220c      	movs	r2, #12
 8007094:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007098:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800709c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80070a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80070b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80070c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80070d0:	603b      	str	r3, [r7, #0]
 80070d2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80070d6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80070da:	6812      	ldr	r2, [r2, #0]
 80070dc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80070e0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80070e4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80070e8:	6809      	ldr	r1, [r1, #0]
 80070ea:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80070ee:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80070f2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80070f6:	6800      	ldr	r0, [r0, #0]
 80070f8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80070fc:	2300      	movs	r3, #0
 80070fe:	9305      	str	r3, [sp, #20]
 8007100:	9004      	str	r0, [sp, #16]
 8007102:	9103      	str	r1, [sp, #12]
 8007104:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007108:	9102      	str	r1, [sp, #8]
 800710a:	9201      	str	r2, [sp, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	9300      	str	r3, [sp, #0]
 8007110:	4633      	mov	r3, r6
 8007112:	4a32      	ldr	r2, [pc, #200]	; (80071dc <AT_ESP8266_ND+0x950>)
 8007114:	4629      	mov	r1, r5
 8007116:	4620      	mov	r0, r4
 8007118:	f007 fb06 	bl	800e728 <FT_String_ND>
 800711c:	4603      	mov	r3, r0
 800711e:	2b01      	cmp	r3, #1
 8007120:	d104      	bne.n	800712c <AT_ESP8266_ND+0x8a0>
		{
			AT_decode=at_tcp_srvr_ok;
 8007122:	2315      	movs	r3, #21
 8007124:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007128:	f001 b93f 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 800712c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007130:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	220b      	movs	r2, #11
 8007138:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800713c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007140:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800714a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800714e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007158:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800715c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007166:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800716a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007174:	603b      	str	r3, [r7, #0]
 8007176:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800717a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800717e:	6812      	ldr	r2, [r2, #0]
 8007180:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007184:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007188:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800718c:	6809      	ldr	r1, [r1, #0]
 800718e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007192:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007196:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800719a:	6800      	ldr	r0, [r0, #0]
 800719c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80071a0:	2300      	movs	r3, #0
 80071a2:	9305      	str	r3, [sp, #20]
 80071a4:	9004      	str	r0, [sp, #16]
 80071a6:	9103      	str	r1, [sp, #12]
 80071a8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80071ac:	9102      	str	r1, [sp, #8]
 80071ae:	9201      	str	r2, [sp, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	4633      	mov	r3, r6
 80071b6:	4a0a      	ldr	r2, [pc, #40]	; (80071e0 <AT_ESP8266_ND+0x954>)
 80071b8:	4629      	mov	r1, r5
 80071ba:	4620      	mov	r0, r4
 80071bc:	f007 fab4 	bl	800e728 <FT_String_ND>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d10e      	bne.n	80071e4 <AT_ESP8266_ND+0x958>
			{
				AT_decode=at_tcp_closed_ok;
 80071c6:	2309      	movs	r3, #9
 80071c8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80071cc:	f001 b8ed 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
 80071d0:	080108f4 	.word	0x080108f4
 80071d4:	08010900 	.word	0x08010900
 80071d8:	08010910 	.word	0x08010910
 80071dc:	08010914 	.word	0x08010914
 80071e0:	08010924 	.word	0x08010924
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 80071e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	220b      	movs	r2, #11
 80071f0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80071f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007202:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007206:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007210:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007214:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800721e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007222:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800722c:	603b      	str	r3, [r7, #0]
 800722e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007232:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007236:	6812      	ldr	r2, [r2, #0]
 8007238:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800723c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007240:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007244:	6809      	ldr	r1, [r1, #0]
 8007246:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800724a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800724e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007252:	6800      	ldr	r0, [r0, #0]
 8007254:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007258:	2300      	movs	r3, #0
 800725a:	9305      	str	r3, [sp, #20]
 800725c:	9004      	str	r0, [sp, #16]
 800725e:	9103      	str	r1, [sp, #12]
 8007260:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007264:	9102      	str	r1, [sp, #8]
 8007266:	9201      	str	r2, [sp, #4]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	4633      	mov	r3, r6
 800726e:	4a82      	ldr	r2, [pc, #520]	; (8007478 <AT_ESP8266_ND+0xbec>)
 8007270:	4629      	mov	r1, r5
 8007272:	4620      	mov	r0, r4
 8007274:	f007 fa58 	bl	800e728 <FT_String_ND>
 8007278:	4603      	mov	r3, r0
 800727a:	2b01      	cmp	r3, #1
 800727c:	d104      	bne.n	8007288 <AT_ESP8266_ND+0x9fc>
			{
				AT_decode=at_multiple_conn_ok;
 800727e:	2307      	movs	r3, #7
 8007280:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007284:	f001 b891 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007288:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800728c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	220b      	movs	r2, #11
 8007294:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007298:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800729c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80072a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80072b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80072c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80072d0:	603b      	str	r3, [r7, #0]
 80072d2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80072d6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80072da:	6812      	ldr	r2, [r2, #0]
 80072dc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80072e0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80072e4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80072e8:	6809      	ldr	r1, [r1, #0]
 80072ea:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80072ee:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80072f2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80072f6:	6800      	ldr	r0, [r0, #0]
 80072f8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80072fc:	2300      	movs	r3, #0
 80072fe:	9305      	str	r3, [sp, #20]
 8007300:	9004      	str	r0, [sp, #16]
 8007302:	9103      	str	r1, [sp, #12]
 8007304:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007308:	9102      	str	r1, [sp, #8]
 800730a:	9201      	str	r2, [sp, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	4633      	mov	r3, r6
 8007312:	4a5a      	ldr	r2, [pc, #360]	; (800747c <AT_ESP8266_ND+0xbf0>)
 8007314:	4629      	mov	r1, r5
 8007316:	4620      	mov	r0, r4
 8007318:	f007 fa06 	bl	800e728 <FT_String_ND>
 800731c:	4603      	mov	r3, r0
 800731e:	2b01      	cmp	r3, #1
 8007320:	d104      	bne.n	800732c <AT_ESP8266_ND+0xaa0>
			{
				AT_decode=at_no_multiple_conn_ok;
 8007322:	2308      	movs	r3, #8
 8007324:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007328:	f001 b83f 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 800732c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007330:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	220a      	movs	r2, #10
 8007338:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800733c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007340:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800734a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800734e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007358:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800735c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007366:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800736a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007374:	603b      	str	r3, [r7, #0]
 8007376:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800737a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800737e:	6812      	ldr	r2, [r2, #0]
 8007380:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007384:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007388:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800738c:	6809      	ldr	r1, [r1, #0]
 800738e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007392:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007396:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800739a:	6800      	ldr	r0, [r0, #0]
 800739c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80073a0:	2300      	movs	r3, #0
 80073a2:	9305      	str	r3, [sp, #20]
 80073a4:	9004      	str	r0, [sp, #16]
 80073a6:	9103      	str	r1, [sp, #12]
 80073a8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80073ac:	9102      	str	r1, [sp, #8]
 80073ae:	9201      	str	r2, [sp, #4]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	4633      	mov	r3, r6
 80073b6:	4a32      	ldr	r2, [pc, #200]	; (8007480 <AT_ESP8266_ND+0xbf4>)
 80073b8:	4629      	mov	r1, r5
 80073ba:	4620      	mov	r0, r4
 80073bc:	f007 f9b4 	bl	800e728 <FT_String_ND>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d104      	bne.n	80073d0 <AT_ESP8266_ND+0xb44>
			{
				AT_decode=at_def_ip_ok;
 80073c6:	231b      	movs	r3, #27
 80073c8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80073cc:	f000 bfed 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 80073d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2207      	movs	r2, #7
 80073dc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80073e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80073ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80073fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007400:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800740a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800740e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007418:	603b      	str	r3, [r7, #0]
 800741a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800741e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007422:	6812      	ldr	r2, [r2, #0]
 8007424:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007428:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800742c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007430:	6809      	ldr	r1, [r1, #0]
 8007432:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007436:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800743a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800743e:	6800      	ldr	r0, [r0, #0]
 8007440:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007444:	2300      	movs	r3, #0
 8007446:	9305      	str	r3, [sp, #20]
 8007448:	9004      	str	r0, [sp, #16]
 800744a:	9103      	str	r1, [sp, #12]
 800744c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007450:	9102      	str	r1, [sp, #8]
 8007452:	9201      	str	r2, [sp, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	4633      	mov	r3, r6
 800745a:	4a0a      	ldr	r2, [pc, #40]	; (8007484 <AT_ESP8266_ND+0xbf8>)
 800745c:	4629      	mov	r1, r5
 800745e:	4620      	mov	r0, r4
 8007460:	f007 f962 	bl	800e728 <FT_String_ND>
 8007464:	4603      	mov	r3, r0
 8007466:	2b01      	cmp	r3, #1
 8007468:	f040 879f 	bne.w	80083aa <AT_ESP8266_ND+0x1b1e>
			{
			AT_decode=at_tcp_conectado;
 800746c:	230f      	movs	r3, #15
 800746e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007472:	f000 bf9a 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
 8007476:	bf00      	nop
 8007478:	08010930 	.word	0x08010930
 800747c:	0801093c 	.word	0x0801093c
 8007480:	08010948 	.word	0x08010948
 8007484:	08010954 	.word	0x08010954
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 8007488:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800748c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2207      	movs	r2, #7
 8007494:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007498:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800749c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80074a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80074b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80074c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80074d0:	603b      	str	r3, [r7, #0]
 80074d2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80074d6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80074da:	6812      	ldr	r2, [r2, #0]
 80074dc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80074e0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80074e4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80074e8:	6809      	ldr	r1, [r1, #0]
 80074ea:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80074ee:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80074f2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80074f6:	6800      	ldr	r0, [r0, #0]
 80074f8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80074fc:	2300      	movs	r3, #0
 80074fe:	9305      	str	r3, [sp, #20]
 8007500:	9004      	str	r0, [sp, #16]
 8007502:	9103      	str	r1, [sp, #12]
 8007504:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007508:	9102      	str	r1, [sp, #8]
 800750a:	9201      	str	r2, [sp, #4]
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	4633      	mov	r3, r6
 8007512:	4aaa      	ldr	r2, [pc, #680]	; (80077bc <AT_ESP8266_ND+0xf30>)
 8007514:	4629      	mov	r1, r5
 8007516:	4620      	mov	r0, r4
 8007518:	f007 f906 	bl	800e728 <FT_String_ND>
 800751c:	4603      	mov	r3, r0
 800751e:	2b01      	cmp	r3, #1
 8007520:	f040 839d 	bne.w	8007c5e <AT_ESP8266_ND+0x13d2>
		{
				AT_decode=at_error;
 8007524:	2302      	movs	r3, #2
 8007526:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 800752a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800752e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2208      	movs	r2, #8
 8007536:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Intentando conectar con servidor TCP caido
 800753a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800753e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007548:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800754c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007556:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800755a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007564:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007568:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007572:	603b      	str	r3, [r7, #0]
 8007574:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007578:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800757c:	6812      	ldr	r2, [r2, #0]
 800757e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007582:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007586:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800758a:	6809      	ldr	r1, [r1, #0]
 800758c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007590:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007594:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007598:	6800      	ldr	r0, [r0, #0]
 800759a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800759e:	2300      	movs	r3, #0
 80075a0:	9305      	str	r3, [sp, #20]
 80075a2:	9004      	str	r0, [sp, #16]
 80075a4:	9103      	str	r1, [sp, #12]
 80075a6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80075aa:	9102      	str	r1, [sp, #8]
 80075ac:	9201      	str	r2, [sp, #4]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	4633      	mov	r3, r6
 80075b4:	4a82      	ldr	r2, [pc, #520]	; (80077c0 <AT_ESP8266_ND+0xf34>)
 80075b6:	4629      	mov	r1, r5
 80075b8:	4620      	mov	r0, r4
 80075ba:	f007 f8b5 	bl	800e728 <FT_String_ND>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d104      	bne.n	80075ce <AT_ESP8266_ND+0xd42>
				{
						AT_decode=at_tcp_conn_err;
 80075c4:	2306      	movs	r3, #6
 80075c6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80075ca:	f000 beee 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 80075ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2215      	movs	r2, #21
 80075da:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 80075de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80075ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80075fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007608:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800760c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007616:	603b      	str	r3, [r7, #0]
 8007618:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800761c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007620:	6812      	ldr	r2, [r2, #0]
 8007622:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007626:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800762a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800762e:	6809      	ldr	r1, [r1, #0]
 8007630:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007634:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007638:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800763c:	6800      	ldr	r0, [r0, #0]
 800763e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007642:	2300      	movs	r3, #0
 8007644:	9305      	str	r3, [sp, #20]
 8007646:	9004      	str	r0, [sp, #16]
 8007648:	9103      	str	r1, [sp, #12]
 800764a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800764e:	9102      	str	r1, [sp, #8]
 8007650:	9201      	str	r2, [sp, #4]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	9300      	str	r3, [sp, #0]
 8007656:	4633      	mov	r3, r6
 8007658:	4a5a      	ldr	r2, [pc, #360]	; (80077c4 <AT_ESP8266_ND+0xf38>)
 800765a:	4629      	mov	r1, r5
 800765c:	4620      	mov	r0, r4
 800765e:	f007 f863 	bl	800e728 <FT_String_ND>
 8007662:	4603      	mov	r3, r0
 8007664:	2b01      	cmp	r3, #1
 8007666:	d104      	bne.n	8007672 <AT_ESP8266_ND+0xde6>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 8007668:	230e      	movs	r3, #14
 800766a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800766e:	f000 be9c 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 8007672:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007676:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	220c      	movs	r2, #12
 800767e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007682:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007686:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007690:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007694:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800769e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80076ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80076ba:	603b      	str	r3, [r7, #0]
 80076bc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80076c0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80076c4:	6812      	ldr	r2, [r2, #0]
 80076c6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80076ca:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80076ce:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80076d2:	6809      	ldr	r1, [r1, #0]
 80076d4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80076d8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80076dc:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80076e0:	6800      	ldr	r0, [r0, #0]
 80076e2:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80076e6:	2300      	movs	r3, #0
 80076e8:	9305      	str	r3, [sp, #20]
 80076ea:	9004      	str	r0, [sp, #16]
 80076ec:	9103      	str	r1, [sp, #12]
 80076ee:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076f2:	9102      	str	r1, [sp, #8]
 80076f4:	9201      	str	r2, [sp, #4]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	9300      	str	r3, [sp, #0]
 80076fa:	4633      	mov	r3, r6
 80076fc:	4a32      	ldr	r2, [pc, #200]	; (80077c8 <AT_ESP8266_ND+0xf3c>)
 80076fe:	4629      	mov	r1, r5
 8007700:	4620      	mov	r0, r4
 8007702:	f007 f811 	bl	800e728 <FT_String_ND>
 8007706:	4603      	mov	r3, r0
 8007708:	2b01      	cmp	r3, #1
 800770a:	d104      	bne.n	8007716 <AT_ESP8266_ND+0xe8a>
				{
					AT_decode=at_tcp_srvr_err;
 800770c:	2316      	movs	r3, #22
 800770e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007712:	f000 be4a 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007716:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800771a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	220b      	movs	r2, #11
 8007722:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007726:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800772a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007734:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007738:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007742:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007746:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007750:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007754:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800775e:	603b      	str	r3, [r7, #0]
 8007760:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007764:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007768:	6812      	ldr	r2, [r2, #0]
 800776a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800776e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007772:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007776:	6809      	ldr	r1, [r1, #0]
 8007778:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800777c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007780:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007784:	6800      	ldr	r0, [r0, #0]
 8007786:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800778a:	2300      	movs	r3, #0
 800778c:	9305      	str	r3, [sp, #20]
 800778e:	9004      	str	r0, [sp, #16]
 8007790:	9103      	str	r1, [sp, #12]
 8007792:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007796:	9102      	str	r1, [sp, #8]
 8007798:	9201      	str	r2, [sp, #4]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	4633      	mov	r3, r6
 80077a0:	4a0a      	ldr	r2, [pc, #40]	; (80077cc <AT_ESP8266_ND+0xf40>)
 80077a2:	4629      	mov	r1, r5
 80077a4:	4620      	mov	r0, r4
 80077a6:	f006 ffbf 	bl	800e728 <FT_String_ND>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d10f      	bne.n	80077d0 <AT_ESP8266_ND+0xf44>
					{
						AT_decode=at_tcp_close_err;
 80077b0:	231a      	movs	r3, #26
 80077b2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80077b6:	f000 bdf8 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
 80077ba:	bf00      	nop
 80077bc:	0801095c 	.word	0x0801095c
 80077c0:	08010964 	.word	0x08010964
 80077c4:	08010970 	.word	0x08010970
 80077c8:	08010914 	.word	0x08010914
 80077cc:	08010924 	.word	0x08010924
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 80077d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2211      	movs	r2, #17
 80077dc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80077e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80077ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80077fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007800:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800780a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800780e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007818:	603b      	str	r3, [r7, #0]
 800781a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800781e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007822:	6812      	ldr	r2, [r2, #0]
 8007824:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007828:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800782c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007830:	6809      	ldr	r1, [r1, #0]
 8007832:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007836:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800783a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800783e:	6800      	ldr	r0, [r0, #0]
 8007840:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007844:	2300      	movs	r3, #0
 8007846:	9305      	str	r3, [sp, #20]
 8007848:	9004      	str	r0, [sp, #16]
 800784a:	9103      	str	r1, [sp, #12]
 800784c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007850:	9102      	str	r1, [sp, #8]
 8007852:	9201      	str	r2, [sp, #4]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	4633      	mov	r3, r6
 800785a:	4aaa      	ldr	r2, [pc, #680]	; (8007b04 <AT_ESP8266_ND+0x1278>)
 800785c:	4629      	mov	r1, r5
 800785e:	4620      	mov	r0, r4
 8007860:	f006 ff62 	bl	800e728 <FT_String_ND>
 8007864:	4603      	mov	r3, r0
 8007866:	2b01      	cmp	r3, #1
 8007868:	d104      	bne.n	8007874 <AT_ESP8266_ND+0xfe8>
					{
						AT_decode=at_tcp_snd_err;
 800786a:	2311      	movs	r3, #17
 800786c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007870:	f000 bd9b 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 8007874:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007878:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	220a      	movs	r2, #10
 8007880:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007884:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007888:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007892:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007896:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80078a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80078ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80078bc:	603b      	str	r3, [r7, #0]
 80078be:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80078c2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80078c6:	6812      	ldr	r2, [r2, #0]
 80078c8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80078cc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80078d0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80078d4:	6809      	ldr	r1, [r1, #0]
 80078d6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80078da:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80078de:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80078e2:	6800      	ldr	r0, [r0, #0]
 80078e4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80078e8:	2300      	movs	r3, #0
 80078ea:	9305      	str	r3, [sp, #20]
 80078ec:	9004      	str	r0, [sp, #16]
 80078ee:	9103      	str	r1, [sp, #12]
 80078f0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078f4:	9102      	str	r1, [sp, #8]
 80078f6:	9201      	str	r2, [sp, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	4633      	mov	r3, r6
 80078fe:	4a82      	ldr	r2, [pc, #520]	; (8007b08 <AT_ESP8266_ND+0x127c>)
 8007900:	4629      	mov	r1, r5
 8007902:	4620      	mov	r0, r4
 8007904:	f006 ff10 	bl	800e728 <FT_String_ND>
 8007908:	4603      	mov	r3, r0
 800790a:	2b01      	cmp	r3, #1
 800790c:	d104      	bne.n	8007918 <AT_ESP8266_ND+0x108c>
					{
						AT_decode=at_cambiar_modo_err;
 800790e:	231d      	movs	r3, #29
 8007910:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007914:	f000 bd49 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007918:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800791c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	220b      	movs	r2, #11
 8007924:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007928:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800792c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007936:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800793a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007944:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007948:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007952:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007956:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007960:	603b      	str	r3, [r7, #0]
 8007962:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007966:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800796a:	6812      	ldr	r2, [r2, #0]
 800796c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007970:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007974:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007978:	6809      	ldr	r1, [r1, #0]
 800797a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800797e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007982:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007986:	6800      	ldr	r0, [r0, #0]
 8007988:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800798c:	2300      	movs	r3, #0
 800798e:	9305      	str	r3, [sp, #20]
 8007990:	9004      	str	r0, [sp, #16]
 8007992:	9103      	str	r1, [sp, #12]
 8007994:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007998:	9102      	str	r1, [sp, #8]
 800799a:	9201      	str	r2, [sp, #4]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	4633      	mov	r3, r6
 80079a2:	4a5a      	ldr	r2, [pc, #360]	; (8007b0c <AT_ESP8266_ND+0x1280>)
 80079a4:	4629      	mov	r1, r5
 80079a6:	4620      	mov	r0, r4
 80079a8:	f006 febe 	bl	800e728 <FT_String_ND>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d104      	bne.n	80079bc <AT_ESP8266_ND+0x1130>
					{
						AT_decode=at_multiple_conn_err;
 80079b2:	231e      	movs	r3, #30
 80079b4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80079b8:	f000 bcf7 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 80079bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	220b      	movs	r2, #11
 80079c8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80079cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80079da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80079e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80079f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a04:	603b      	str	r3, [r7, #0]
 8007a06:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a0a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a0e:	6812      	ldr	r2, [r2, #0]
 8007a10:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007a14:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a18:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a1c:	6809      	ldr	r1, [r1, #0]
 8007a1e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a22:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007a26:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007a2a:	6800      	ldr	r0, [r0, #0]
 8007a2c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007a30:	2300      	movs	r3, #0
 8007a32:	9305      	str	r3, [sp, #20]
 8007a34:	9004      	str	r0, [sp, #16]
 8007a36:	9103      	str	r1, [sp, #12]
 8007a38:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a3c:	9102      	str	r1, [sp, #8]
 8007a3e:	9201      	str	r2, [sp, #4]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	4633      	mov	r3, r6
 8007a46:	4a32      	ldr	r2, [pc, #200]	; (8007b10 <AT_ESP8266_ND+0x1284>)
 8007a48:	4629      	mov	r1, r5
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f006 fe6c 	bl	800e728 <FT_String_ND>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d104      	bne.n	8007a60 <AT_ESP8266_ND+0x11d4>
					{
						AT_decode=at_no_multiple_conn_err;
 8007a56:	231f      	movs	r3, #31
 8007a58:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a5c:	f000 bca5 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 8007a60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2208      	movs	r2, #8
 8007a6c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007a70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007a7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007a8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007a9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007aa8:	603b      	str	r3, [r7, #0]
 8007aaa:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007aae:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ab2:	6812      	ldr	r2, [r2, #0]
 8007ab4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ab8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007abc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007ac0:	6809      	ldr	r1, [r1, #0]
 8007ac2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007ac6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007aca:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007ace:	6800      	ldr	r0, [r0, #0]
 8007ad0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	9305      	str	r3, [sp, #20]
 8007ad8:	9004      	str	r0, [sp, #16]
 8007ada:	9103      	str	r1, [sp, #12]
 8007adc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ae0:	9102      	str	r1, [sp, #8]
 8007ae2:	9201      	str	r2, [sp, #4]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	4633      	mov	r3, r6
 8007aea:	4a0a      	ldr	r2, [pc, #40]	; (8007b14 <AT_ESP8266_ND+0x1288>)
 8007aec:	4629      	mov	r1, r5
 8007aee:	4620      	mov	r0, r4
 8007af0:	f006 fe1a 	bl	800e728 <FT_String_ND>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d10e      	bne.n	8007b18 <AT_ESP8266_ND+0x128c>
					{
						AT_decode=at_conn_wifi_err;
 8007afa:	2320      	movs	r3, #32
 8007afc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007b00:	f000 bc53 	b.w	80083aa <AT_ESP8266_ND+0x1b1e>
 8007b04:	08010988 	.word	0x08010988
 8007b08:	080108f4 	.word	0x080108f4
 8007b0c:	08010930 	.word	0x08010930
 8007b10:	0801093c 	.word	0x0801093c
 8007b14:	0801099c 	.word	0x0801099c
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 8007b18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	220a      	movs	r2, #10
 8007b24:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007b28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007b36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007b44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007b52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b60:	603b      	str	r3, [r7, #0]
 8007b62:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b66:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b6a:	6812      	ldr	r2, [r2, #0]
 8007b6c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b70:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b74:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b78:	6809      	ldr	r1, [r1, #0]
 8007b7a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007b7e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007b82:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007b86:	6800      	ldr	r0, [r0, #0]
 8007b88:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	9305      	str	r3, [sp, #20]
 8007b90:	9004      	str	r0, [sp, #16]
 8007b92:	9103      	str	r1, [sp, #12]
 8007b94:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b98:	9102      	str	r1, [sp, #8]
 8007b9a:	9201      	str	r2, [sp, #4]
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	4633      	mov	r3, r6
 8007ba2:	4ab7      	ldr	r2, [pc, #732]	; (8007e80 <AT_ESP8266_ND+0x15f4>)
 8007ba4:	4629      	mov	r1, r5
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f006 fdbe 	bl	800e728 <FT_String_ND>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d103      	bne.n	8007bba <AT_ESP8266_ND+0x132e>
					{
						AT_decode=at_def_ip_err;
 8007bb2:	2321      	movs	r3, #33	; 0x21
 8007bb4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007bb8:	e3f7      	b.n	80083aa <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 8007bba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2205      	movs	r2, #5
 8007bc6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007bca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007bd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007be6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007bf4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bf8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007c02:	603b      	str	r3, [r7, #0]
 8007c04:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c08:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c0c:	6812      	ldr	r2, [r2, #0]
 8007c0e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007c12:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c16:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c1a:	6809      	ldr	r1, [r1, #0]
 8007c1c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007c20:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007c24:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007c28:	6800      	ldr	r0, [r0, #0]
 8007c2a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9305      	str	r3, [sp, #20]
 8007c32:	9004      	str	r0, [sp, #16]
 8007c34:	9103      	str	r1, [sp, #12]
 8007c36:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c3a:	9102      	str	r1, [sp, #8]
 8007c3c:	9201      	str	r2, [sp, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	4633      	mov	r3, r6
 8007c44:	4a8f      	ldr	r2, [pc, #572]	; (8007e84 <AT_ESP8266_ND+0x15f8>)
 8007c46:	4629      	mov	r1, r5
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f006 fd6d 	bl	800e728 <FT_String_ND>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	f040 83aa 	bne.w	80083aa <AT_ESP8266_ND+0x1b1e>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 8007c56:	2322      	movs	r3, #34	; 0x22
 8007c58:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007c5c:	e3a5      	b.n	80083aa <AT_ESP8266_ND+0x1b1e>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007c5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	220f      	movs	r2, #15
 8007c6a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007c6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007c7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007c8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007c98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007ca6:	603b      	str	r3, [r7, #0]
 8007ca8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007cac:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007cb0:	6812      	ldr	r2, [r2, #0]
 8007cb2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007cb6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007cba:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007cbe:	6809      	ldr	r1, [r1, #0]
 8007cc0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007cc4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007cc8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007ccc:	6800      	ldr	r0, [r0, #0]
 8007cce:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	9305      	str	r3, [sp, #20]
 8007cd6:	9004      	str	r0, [sp, #16]
 8007cd8:	9103      	str	r1, [sp, #12]
 8007cda:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007cde:	9102      	str	r1, [sp, #8]
 8007ce0:	9201      	str	r2, [sp, #4]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	4633      	mov	r3, r6
 8007ce8:	4a67      	ldr	r2, [pc, #412]	; (8007e88 <AT_ESP8266_ND+0x15fc>)
 8007cea:	4629      	mov	r1, r5
 8007cec:	4620      	mov	r0, r4
 8007cee:	f006 fd1b 	bl	800e728 <FT_String_ND>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d112      	bne.n	8007d1e <AT_ESP8266_ND+0x1492>
				{
					 AT_decode=at_wifi_disconnect;
 8007cf8:	230a      	movs	r3, #10
 8007cfa:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 8007cfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007d0c:	1c5a      	adds	r2, r3, #1
 8007d0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8007d1c:	e345      	b.n	80083aa <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 8007d1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2209      	movs	r2, #9
 8007d2a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007d2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007d3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007d4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007d58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d6c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d70:	6812      	ldr	r2, [r2, #0]
 8007d72:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007d76:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d7a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d7e:	6809      	ldr	r1, [r1, #0]
 8007d80:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007d84:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007d88:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007d8c:	6800      	ldr	r0, [r0, #0]
 8007d8e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007d92:	2300      	movs	r3, #0
 8007d94:	9305      	str	r3, [sp, #20]
 8007d96:	9004      	str	r0, [sp, #16]
 8007d98:	9103      	str	r1, [sp, #12]
 8007d9a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d9e:	9102      	str	r1, [sp, #8]
 8007da0:	9201      	str	r2, [sp, #4]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	4633      	mov	r3, r6
 8007da8:	4a38      	ldr	r2, [pc, #224]	; (8007e8c <AT_ESP8266_ND+0x1600>)
 8007daa:	4629      	mov	r1, r5
 8007dac:	4620      	mov	r0, r4
 8007dae:	f006 fcbb 	bl	800e728 <FT_String_ND>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d112      	bne.n	8007dde <AT_ESP8266_ND+0x1552>
				{
					AT_decode=at_tcp_client_desc;
 8007db8:	2319      	movs	r3, #25
 8007dba:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 8007dbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 8007ddc:	e2e5      	b.n	80083aa <AT_ESP8266_ND+0x1b1e>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 8007dde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007de2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2208      	movs	r2, #8
 8007dea:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007dee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007df2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007dfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007e0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007e18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007e26:	603b      	str	r3, [r7, #0]
 8007e28:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e2c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e30:	6812      	ldr	r2, [r2, #0]
 8007e32:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007e36:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007e3a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007e3e:	6809      	ldr	r1, [r1, #0]
 8007e40:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007e44:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007e48:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007e4c:	6800      	ldr	r0, [r0, #0]
 8007e4e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007e52:	2300      	movs	r3, #0
 8007e54:	9305      	str	r3, [sp, #20]
 8007e56:	9004      	str	r0, [sp, #16]
 8007e58:	9103      	str	r1, [sp, #12]
 8007e5a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e5e:	9102      	str	r1, [sp, #8]
 8007e60:	9201      	str	r2, [sp, #4]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	4633      	mov	r3, r6
 8007e68:	4a09      	ldr	r2, [pc, #36]	; (8007e90 <AT_ESP8266_ND+0x1604>)
 8007e6a:	4629      	mov	r1, r5
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	f006 fc5b 	bl	800e728 <FT_String_ND>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d10d      	bne.n	8007e94 <AT_ESP8266_ND+0x1608>
				{
					AT_decode=at_tcp_desconectado;
 8007e78:	2310      	movs	r3, #16
 8007e7a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007e7e:	e294      	b.n	80083aa <AT_ESP8266_ND+0x1b1e>
 8007e80:	08010948 	.word	0x08010948
 8007e84:	080109a8 	.word	0x080109a8
 8007e88:	080109b0 	.word	0x080109b0
 8007e8c:	080109c0 	.word	0x080109c0
 8007e90:	08010964 	.word	0x08010964
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007e94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007ea2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ea6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007eb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f203 4694 	addw	r6, r3, #1172	; 0x494
 8007ebe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ec2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f603 4cdc 	addw	ip, r3, #3292	; 0xcdc
 8007ecc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ed0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ee0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ee4:	6812      	ldr	r2, [r2, #0]
 8007ee6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007eea:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007eee:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007ef2:	6809      	ldr	r1, [r1, #0]
 8007ef4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007ef8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007efc:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007f00:	6800      	ldr	r0, [r0, #0]
 8007f02:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007f06:	2300      	movs	r3, #0
 8007f08:	9305      	str	r3, [sp, #20]
 8007f0a:	9004      	str	r0, [sp, #16]
 8007f0c:	9103      	str	r1, [sp, #12]
 8007f0e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f12:	9102      	str	r1, [sp, #8]
 8007f14:	9201      	str	r2, [sp, #4]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	4663      	mov	r3, ip
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4620      	mov	r0, r4
 8007f22:	f006 fc01 	bl	800e728 <FT_String_ND>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d112      	bne.n	8007f52 <AT_ESP8266_ND+0x16c6>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8007f2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 8235 	beq.w	80083aa <AT_ESP8266_ND+0x1b1e>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8007f40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 8007f50:	e22b      	b.n	80083aa <AT_ESP8266_ND+0x1b1e>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007f52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	220d      	movs	r2, #13
 8007f5e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8007f62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007f70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007f7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007f8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007f9a:	603b      	str	r3, [r7, #0]
 8007f9c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007fa0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007fa4:	6812      	ldr	r2, [r2, #0]
 8007fa6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007faa:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007fae:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007fb2:	6809      	ldr	r1, [r1, #0]
 8007fb4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007fb8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007fbc:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007fc0:	6800      	ldr	r0, [r0, #0]
 8007fc2:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	9305      	str	r3, [sp, #20]
 8007fca:	9004      	str	r0, [sp, #16]
 8007fcc:	9103      	str	r1, [sp, #12]
 8007fce:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007fd2:	9102      	str	r1, [sp, #8]
 8007fd4:	9201      	str	r2, [sp, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	4633      	mov	r3, r6
 8007fdc:	4ac5      	ldr	r2, [pc, #788]	; (80082f4 <AT_ESP8266_ND+0x1a68>)
 8007fde:	4629      	mov	r1, r5
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f006 fba1 	bl	800e728 <FT_String_ND>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d112      	bne.n	8008012 <AT_ESP8266_ND+0x1786>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8007fec:	2312      	movs	r3, #18
 8007fee:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 8007ff2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ff6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8008000:	1c5a      	adds	r2, r3, #1
 8008002:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008006:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8008010:	e1cb      	b.n	80083aa <AT_ESP8266_ND+0x1b1e>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8008012:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008016:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	220d      	movs	r2, #13
 800801e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Obtiene IP
 8008022:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008026:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008030:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008034:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800803e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008042:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800804c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008050:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800805a:	603b      	str	r3, [r7, #0]
 800805c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008060:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008064:	6812      	ldr	r2, [r2, #0]
 8008066:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800806a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800806e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008072:	6809      	ldr	r1, [r1, #0]
 8008074:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008078:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800807c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008080:	6800      	ldr	r0, [r0, #0]
 8008082:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8008086:	2300      	movs	r3, #0
 8008088:	9305      	str	r3, [sp, #20]
 800808a:	9004      	str	r0, [sp, #16]
 800808c:	9103      	str	r1, [sp, #12]
 800808e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008092:	9102      	str	r1, [sp, #8]
 8008094:	9201      	str	r2, [sp, #4]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	4633      	mov	r3, r6
 800809c:	4a96      	ldr	r2, [pc, #600]	; (80082f8 <AT_ESP8266_ND+0x1a6c>)
 800809e:	4629      	mov	r1, r5
 80080a0:	4620      	mov	r0, r4
 80080a2:	f006 fb41 	bl	800e728 <FT_String_ND>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d112      	bne.n	80080d2 <AT_ESP8266_ND+0x1846>
				{
					a->_debug_WF_GOTIP++;
 80080ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 80080ca:	230c      	movs	r3, #12
 80080cc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80080d0:	e16b      	b.n	80083aa <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 80080d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	220e      	movs	r2, #14
 80080de:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//WIFI CONECTADA
 80080e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80080f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80080fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008102:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800810c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008110:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800811a:	603b      	str	r3, [r7, #0]
 800811c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008120:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008124:	6812      	ldr	r2, [r2, #0]
 8008126:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800812a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800812e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008132:	6809      	ldr	r1, [r1, #0]
 8008134:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008138:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800813c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008140:	6800      	ldr	r0, [r0, #0]
 8008142:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8008146:	2300      	movs	r3, #0
 8008148:	9305      	str	r3, [sp, #20]
 800814a:	9004      	str	r0, [sp, #16]
 800814c:	9103      	str	r1, [sp, #12]
 800814e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008152:	9102      	str	r1, [sp, #8]
 8008154:	9201      	str	r2, [sp, #4]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	4633      	mov	r3, r6
 800815c:	4a67      	ldr	r2, [pc, #412]	; (80082fc <AT_ESP8266_ND+0x1a70>)
 800815e:	4629      	mov	r1, r5
 8008160:	4620      	mov	r0, r4
 8008162:	f006 fae1 	bl	800e728 <FT_String_ND>
 8008166:	4603      	mov	r3, r0
 8008168:	2b01      	cmp	r3, #1
 800816a:	d112      	bne.n	8008192 <AT_ESP8266_ND+0x1906>
				{
					a->_debug_WF_CNNCTD++;
 800816c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008170:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 800817a:	1c5a      	adds	r2, r3, #1
 800817c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008180:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 800818a:	230b      	movs	r3, #11
 800818c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8008190:	e10b      	b.n	80083aa <AT_ESP8266_ND+0x1b1e>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 8008192:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008196:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	220a      	movs	r2, #10
 800819e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80081a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80081b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80081be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80081cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80081da:	603b      	str	r3, [r7, #0]
 80081dc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80081e0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80081e4:	6812      	ldr	r2, [r2, #0]
 80081e6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80081ea:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80081ee:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80081f2:	6809      	ldr	r1, [r1, #0]
 80081f4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80081f8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80081fc:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008200:	6800      	ldr	r0, [r0, #0]
 8008202:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8008206:	2300      	movs	r3, #0
 8008208:	9305      	str	r3, [sp, #20]
 800820a:	9004      	str	r0, [sp, #16]
 800820c:	9103      	str	r1, [sp, #12]
 800820e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008212:	9102      	str	r1, [sp, #8]
 8008214:	9201      	str	r2, [sp, #4]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	4633      	mov	r3, r6
 800821c:	4a38      	ldr	r2, [pc, #224]	; (8008300 <AT_ESP8266_ND+0x1a74>)
 800821e:	4629      	mov	r1, r5
 8008220:	4620      	mov	r0, r4
 8008222:	f006 fa81 	bl	800e728 <FT_String_ND>
 8008226:	4603      	mov	r3, r0
 8008228:	2b01      	cmp	r3, #1
 800822a:	d112      	bne.n	8008252 <AT_ESP8266_ND+0x19c6>
				  {
					  AT_decode=at_tcp_client_conectado;
 800822c:	2318      	movs	r3, #24
 800822e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8008232:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008236:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8008240:	1c5a      	adds	r2, r3, #1
 8008242:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008246:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8008250:	e0ab      	b.n	80083aa <AT_ESP8266_ND+0x1b1e>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8008252:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008256:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2208      	movs	r2, #8
 800825e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8008262:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008266:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008270:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008274:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800827e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008282:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800828c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008290:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800829a:	603b      	str	r3, [r7, #0]
 800829c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80082a0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80082a4:	6812      	ldr	r2, [r2, #0]
 80082a6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80082aa:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80082ae:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80082b2:	6809      	ldr	r1, [r1, #0]
 80082b4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80082b8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80082bc:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80082c0:	6800      	ldr	r0, [r0, #0]
 80082c2:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80082c6:	2300      	movs	r3, #0
 80082c8:	9305      	str	r3, [sp, #20]
 80082ca:	9004      	str	r0, [sp, #16]
 80082cc:	9103      	str	r1, [sp, #12]
 80082ce:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80082d2:	9102      	str	r1, [sp, #8]
 80082d4:	9201      	str	r2, [sp, #4]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	4633      	mov	r3, r6
 80082dc:	4a09      	ldr	r2, [pc, #36]	; (8008304 <AT_ESP8266_ND+0x1a78>)
 80082de:	4629      	mov	r1, r5
 80082e0:	4620      	mov	r0, r4
 80082e2:	f006 fa21 	bl	800e728 <FT_String_ND>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d10d      	bne.n	8008308 <AT_ESP8266_ND+0x1a7c>
				{
					AT_decode=at_fail;
 80082ec:	2303      	movs	r3, #3
 80082ee:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80082f2:	e05a      	b.n	80083aa <AT_ESP8266_ND+0x1b1e>
 80082f4:	080109cc 	.word	0x080109cc
 80082f8:	080109dc 	.word	0x080109dc
 80082fc:	080109ec 	.word	0x080109ec
 8008300:	080109fc 	.word	0x080109fc
 8008304:	08010a08 	.word	0x08010a08
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 8008308:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800830c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2209      	movs	r2, #9
 8008314:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8008318:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800831c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008326:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800832a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8008334:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008338:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8008342:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008346:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008350:	603b      	str	r3, [r7, #0]
 8008352:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008356:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800835a:	6812      	ldr	r2, [r2, #0]
 800835c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8008360:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008364:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008368:	6809      	ldr	r1, [r1, #0]
 800836a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800836e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008372:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008376:	6800      	ldr	r0, [r0, #0]
 8008378:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800837c:	2300      	movs	r3, #0
 800837e:	9305      	str	r3, [sp, #20]
 8008380:	9004      	str	r0, [sp, #16]
 8008382:	9103      	str	r1, [sp, #12]
 8008384:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008388:	9102      	str	r1, [sp, #8]
 800838a:	9201      	str	r2, [sp, #4]
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	4633      	mov	r3, r6
 8008392:	4a78      	ldr	r2, [pc, #480]	; (8008574 <AT_ESP8266_ND+0x1ce8>)
 8008394:	4629      	mov	r1, r5
 8008396:	4620      	mov	r0, r4
 8008398:	f006 f9c6 	bl	800e728 <FT_String_ND>
 800839c:	4603      	mov	r3, r0
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d103      	bne.n	80083aa <AT_ESP8266_ND+0x1b1e>
					{
					AT_decode=at_busy_p;
 80083a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80083a6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 80083aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80083b8:	3b01      	subs	r3, #1
 80083ba:	2b08      	cmp	r3, #8
 80083bc:	f201 84c7 	bhi.w	8009d4e <AT_ESP8266_ND+0x34c2>
 80083c0:	a201      	add	r2, pc, #4	; (adr r2, 80083c8 <AT_ESP8266_ND+0x1b3c>)
 80083c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c6:	bf00      	nop
 80083c8:	080083ed 	.word	0x080083ed
 80083cc:	0800857d 	.word	0x0800857d
 80083d0:	080087ff 	.word	0x080087ff
 80083d4:	0800897d 	.word	0x0800897d
 80083d8:	08008b55 	.word	0x08008b55
 80083dc:	08008e29 	.word	0x08008e29
 80083e0:	080090e1 	.word	0x080090e1
 80083e4:	080095f9 	.word	0x080095f9
 80083e8:	080097cf 	.word	0x080097cf
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80083ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80083fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008400:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800840a:	2b01      	cmp	r3, #1
 800840c:	d14f      	bne.n	80084ae <AT_ESP8266_ND+0x1c22>
 800840e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008412:	2b01      	cmp	r3, #1
 8008414:	d04b      	beq.n	80084ae <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_error)
 8008416:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800841a:	2b02      	cmp	r3, #2
 800841c:	d047      	beq.n	80084ae <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_restart)
 800841e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008422:	2b04      	cmp	r3, #4
 8008424:	d043      	beq.n	80084ae <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_tcp_enviado_ok))
 8008426:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800842a:	2b13      	cmp	r3, #19
 800842c:	d03f      	beq.n	80084ae <AT_ESP8266_ND+0x1c22>
						{
						a->_pasos=0;
 800842e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008432:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2200      	movs	r2, #0
 800843a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800843e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008442:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2201      	movs	r2, #1
 800844a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 800844e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008452:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800845c:	4620      	mov	r0, r4
 800845e:	f7f7 fec9 	bl	80001f4 <strlen>
 8008462:	4603      	mov	r3, r0
 8008464:	4423      	add	r3, r4
 8008466:	4a44      	ldr	r2, [pc, #272]	; (8008578 <AT_ESP8266_ND+0x1cec>)
 8008468:	461c      	mov	r4, r3
 800846a:	4613      	mov	r3, r2
 800846c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800846e:	6020      	str	r0, [r4, #0]
 8008470:	6061      	str	r1, [r4, #4]
 8008472:	60a2      	str	r2, [r4, #8]
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008478:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800847c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008486:	4618      	mov	r0, r3
 8008488:	f7f7 feb4 	bl	80001f4 <strlen>
 800848c:	4603      	mov	r3, r0
 800848e:	461a      	mov	r2, r3
 8008490:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008494:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 800849e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2264      	movs	r2, #100	; 0x64
 80084aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 80084ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80084bc:	1c5a      	adds	r2, r3, #1
 80084be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 80084cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d11b      	bne.n	8008516 <AT_ESP8266_ND+0x1c8a>
 80084de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d023      	beq.n	800852e <AT_ESP8266_ND+0x1ca2>
 80084e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084ea:	2b1c      	cmp	r3, #28
 80084ec:	d01f      	beq.n	800852e <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_error)
 80084ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d01b      	beq.n	800852e <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_restart)
 80084f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80084fa:	2b04      	cmp	r3, #4
 80084fc:	d017      	beq.n	800852e <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_connected)
 80084fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008502:	2b0b      	cmp	r3, #11
 8008504:	d013      	beq.n	800852e <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_gotip)
 8008506:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800850a:	2b0c      	cmp	r3, #12
 800850c:	d00f      	beq.n	800852e <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_tcp_enviado_ok)))
 800850e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008512:	2b13      	cmp	r3, #19
 8008514:	d00b      	beq.n	800852e <AT_ESP8266_ND+0x1ca2>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 8008516:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800851a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008524:	f241 3288 	movw	r2, #5000	; 0x1388
 8008528:	4293      	cmp	r3, r2
 800852a:	f341 841a 	ble.w	8009d62 <AT_ESP8266_ND+0x34d6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800852e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008532:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800853c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008540:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008544:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2200      	movs	r2, #0
 800854c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008550:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008554:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2200      	movs	r2, #0
 800855c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008560:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008564:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2200      	movs	r2, #0
 800856c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 8008570:	f001 bbf7 	b.w	8009d62 <AT_ESP8266_ND+0x34d6>
 8008574:	08010a14 	.word	0x08010a14
 8008578:	08010a20 	.word	0x08010a20
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800857c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008580:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 800858c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008590:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800859a:	2b01      	cmp	r3, #1
 800859c:	f040 80c8 	bne.w	8008730 <AT_ESP8266_ND+0x1ea4>
 80085a0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	f000 80c3 	beq.w	8008730 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_error)
 80085aa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	f000 80be 	beq.w	8008730 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_fail)
 80085b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085b8:	2b03      	cmp	r3, #3
 80085ba:	f000 80b9 	beq.w	8008730 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_restart)
 80085be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	f000 80b4 	beq.w	8008730 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_disconnect)
 80085c8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085cc:	2b0a      	cmp	r3, #10
 80085ce:	f000 80af 	beq.w	8008730 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_connected)
 80085d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085d6:	2b0b      	cmp	r3, #11
 80085d8:	f000 80aa 	beq.w	8008730 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_gotip))
 80085dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085e0:	2b0c      	cmp	r3, #12
 80085e2:	f000 80a5 	beq.w	8008730 <AT_ESP8266_ND+0x1ea4>
						{
						a->_pasos=0;
 80085e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80085f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2201      	movs	r2, #1
 8008602:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 8008606:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800860a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008614:	4620      	mov	r0, r4
 8008616:	f7f7 fded 	bl	80001f4 <strlen>
 800861a:	4603      	mov	r3, r0
 800861c:	4423      	add	r3, r4
 800861e:	49d5      	ldr	r1, [pc, #852]	; (8008974 <AT_ESP8266_ND+0x20e8>)
 8008620:	461a      	mov	r2, r3
 8008622:	460b      	mov	r3, r1
 8008624:	cb03      	ldmia	r3!, {r0, r1}
 8008626:	6010      	str	r0, [r2, #0]
 8008628:	6051      	str	r1, [r2, #4]
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 800862e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008632:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800863c:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008640:	2201      	movs	r2, #1
 8008642:	4618      	mov	r0, r3
 8008644:	f006 fe33 	bl	800f2ae <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 8008648:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800864c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008656:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800865a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	1d9d      	adds	r5, r3, #6
 8008662:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008666:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3306      	adds	r3, #6
 800866e:	4618      	mov	r0, r3
 8008670:	f7f7 fdc0 	bl	80001f4 <strlen>
 8008674:	4603      	mov	r3, r0
 8008676:	461a      	mov	r2, r3
 8008678:	4629      	mov	r1, r5
 800867a:	4620      	mov	r0, r4
 800867c:	f006 fe17 	bl	800f2ae <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 8008680:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008684:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800868e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008692:	4618      	mov	r0, r3
 8008694:	f7f7 fdae 	bl	80001f4 <strlen>
 8008698:	4602      	mov	r2, r0
 800869a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800869e:	4619      	mov	r1, r3
 80086a0:	4620      	mov	r0, r4
 80086a2:	f006 fe04 	bl	800f2ae <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 80086a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80086b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80086c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	3326      	adds	r3, #38	; 0x26
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7f7 fd90 	bl	80001f4 <strlen>
 80086d4:	4603      	mov	r3, r0
 80086d6:	461a      	mov	r2, r3
 80086d8:	4629      	mov	r1, r5
 80086da:	4620      	mov	r0, r4
 80086dc:	f006 fde7 	bl	800f2ae <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 80086e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80086ee:	f507 7109 	add.w	r1, r7, #548	; 0x224
 80086f2:	2203      	movs	r2, #3
 80086f4:	4618      	mov	r0, r3
 80086f6:	f006 fdda 	bl	800f2ae <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 80086fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008708:	4618      	mov	r0, r3
 800870a:	f7f7 fd73 	bl	80001f4 <strlen>
 800870e:	4603      	mov	r3, r0
 8008710:	461a      	mov	r2, r3
 8008712:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008716:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 8008720:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008724:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	22c8      	movs	r2, #200	; 0xc8
 800872c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 8008730:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008734:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800873e:	1c5a      	adds	r2, r3, #1
 8008740:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008744:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 800874e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008752:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800875c:	2b00      	cmp	r3, #0
 800875e:	d11b      	bne.n	8008798 <AT_ESP8266_ND+0x1f0c>
 8008760:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008764:	2b01      	cmp	r3, #1
 8008766:	d023      	beq.n	80087b0 <AT_ESP8266_ND+0x1f24>
 8008768:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800876c:	2b02      	cmp	r3, #2
 800876e:	d01f      	beq.n	80087b0 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_fail)
 8008770:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008774:	2b03      	cmp	r3, #3
 8008776:	d01b      	beq.n	80087b0 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_restart)
 8008778:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800877c:	2b04      	cmp	r3, #4
 800877e:	d017      	beq.n	80087b0 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_disconnect)
 8008780:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008784:	2b0a      	cmp	r3, #10
 8008786:	d013      	beq.n	80087b0 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_connected)
 8008788:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800878c:	2b0b      	cmp	r3, #11
 800878e:	d00f      	beq.n	80087b0 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_gotip)))
 8008790:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008794:	2b0c      	cmp	r3, #12
 8008796:	d00b      	beq.n	80087b0 <AT_ESP8266_ND+0x1f24>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 8008798:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800879c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 80087a6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80087aa:	4293      	cmp	r3, r2
 80087ac:	f341 82db 	ble.w	8009d66 <AT_ESP8266_ND+0x34da>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80087b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80087be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 80087c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087c6:	2b0a      	cmp	r3, #10
 80087c8:	d00f      	beq.n	80087ea <AT_ESP8266_ND+0x1f5e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 80087ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 80087da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 80087ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 80087fa:	f001 bab4 	b.w	8009d66 <AT_ESP8266_ND+0x34da>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80087fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008802:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 800880e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008812:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800881c:	2b01      	cmp	r3, #1
 800881e:	d14d      	bne.n	80088bc <AT_ESP8266_ND+0x2030>
 8008820:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008824:	2b04      	cmp	r3, #4
 8008826:	d049      	beq.n	80088bc <AT_ESP8266_ND+0x2030>
 8008828:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800882c:	2b0a      	cmp	r3, #10
 800882e:	d045      	beq.n	80088bc <AT_ESP8266_ND+0x2030>
 8008830:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008834:	2b0d      	cmp	r3, #13
 8008836:	d041      	beq.n	80088bc <AT_ESP8266_ND+0x2030>
						{
						a->_pasos=0;
 8008838:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800883c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2200      	movs	r2, #0
 8008844:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008848:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800884c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2201      	movs	r2, #1
 8008854:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"));
 8008858:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800885c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008866:	4620      	mov	r0, r4
 8008868:	f7f7 fcc4 	bl	80001f4 <strlen>
 800886c:	4603      	mov	r3, r0
 800886e:	4423      	add	r3, r4
 8008870:	4941      	ldr	r1, [pc, #260]	; (8008978 <AT_ESP8266_ND+0x20ec>)
 8008872:	461a      	mov	r2, r3
 8008874:	460b      	mov	r3, r1
 8008876:	cb03      	ldmia	r3!, {r0, r1}
 8008878:	6010      	str	r0, [r2, #0]
 800887a:	6051      	str	r1, [r2, #4]
 800887c:	8819      	ldrh	r1, [r3, #0]
 800887e:	789b      	ldrb	r3, [r3, #2]
 8008880:	8111      	strh	r1, [r2, #8]
 8008882:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008884:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008888:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008892:	4618      	mov	r0, r3
 8008894:	f7f7 fcae 	bl	80001f4 <strlen>
 8008898:	4603      	mov	r3, r0
 800889a:	461a      	mov	r2, r3
 800889c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 80088aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80088b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 80088bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80088ca:	1c5a      	adds	r2, r3, #1
 80088cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 80088da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d113      	bne.n	8008914 <AT_ESP8266_ND+0x2088>
 80088ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088f0:	2b0a      	cmp	r3, #10
 80088f2:	d01b      	beq.n	800892c <AT_ESP8266_ND+0x20a0>
 80088f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088f8:	2b0b      	cmp	r3, #11
 80088fa:	d017      	beq.n	800892c <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_wifi_gotip)
 80088fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008900:	2b0c      	cmp	r3, #12
 8008902:	d013      	beq.n	800892c <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_restart	)
 8008904:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008908:	2b04      	cmp	r3, #4
 800890a:	d00f      	beq.n	800892c <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_deconectar_ok )))
 800890c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008910:	2b0d      	cmp	r3, #13
 8008912:	d00b      	beq.n	800892c <AT_ESP8266_ND+0x20a0>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008914:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008918:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008922:	f241 3288 	movw	r2, #5000	; 0x1388
 8008926:	4293      	cmp	r3, r2
 8008928:	f341 821f 	ble.w	8009d6a <AT_ESP8266_ND+0x34de>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800892c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008930:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800893a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 800893e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008942:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2200      	movs	r2, #0
 800894a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 800894e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008952:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2200      	movs	r2, #0
 800895a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 800895e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008962:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2200      	movs	r2, #0
 800896a:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 800896e:	f001 b9fc 	b.w	8009d6a <AT_ESP8266_ND+0x34de>
 8008972:	bf00      	nop
 8008974:	08010a30 	.word	0x08010a30
 8008978:	08010a3c 	.word	0x08010a3c
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800897c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008980:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 800898c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008990:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800899a:	2b01      	cmp	r3, #1
 800899c:	d16b      	bne.n	8008a76 <AT_ESP8266_ND+0x21ea>
 800899e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d067      	beq.n	8008a76 <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_ok)
 80089a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d063      	beq.n	8008a76 <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_error))
 80089ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d05f      	beq.n	8008a76 <AT_ESP8266_ND+0x21ea>
						{
						a->_pasos=0;
 80089b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80089c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 80089d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d115      	bne.n	8008a14 <AT_ESP8266_ND+0x2188>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 80089e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80089f6:	4620      	mov	r0, r4
 80089f8:	f7f7 fbfc 	bl	80001f4 <strlen>
 80089fc:	4603      	mov	r3, r0
 80089fe:	4423      	add	r3, r4
 8008a00:	4a52      	ldr	r2, [pc, #328]	; (8008b4c <AT_ESP8266_ND+0x22c0>)
 8008a02:	461c      	mov	r4, r3
 8008a04:	4613      	mov	r3, r2
 8008a06:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a08:	6020      	str	r0, [r4, #0]
 8008a0a:	6061      	str	r1, [r4, #4]
 8008a0c:	60a2      	str	r2, [r4, #8]
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	81a3      	strh	r3, [r4, #12]
 8008a12:	e014      	b.n	8008a3e <AT_ESP8266_ND+0x21b2>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8008a14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008a22:	4620      	mov	r0, r4
 8008a24:	f7f7 fbe6 	bl	80001f4 <strlen>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	4423      	add	r3, r4
 8008a2c:	4a48      	ldr	r2, [pc, #288]	; (8008b50 <AT_ESP8266_ND+0x22c4>)
 8008a2e:	461c      	mov	r4, r3
 8008a30:	4613      	mov	r3, r2
 8008a32:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a34:	6020      	str	r0, [r4, #0]
 8008a36:	6061      	str	r1, [r4, #4]
 8008a38:	60a2      	str	r2, [r4, #8]
 8008a3a:	881b      	ldrh	r3, [r3, #0]
 8008a3c:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008a3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7f7 fbd1 	bl	80001f4 <strlen>
 8008a52:	4603      	mov	r3, r0
 8008a54:	461a      	mov	r2, r3
 8008a56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 8008a64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008a72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008a76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008a84:	1c5a      	adds	r2, r3, #1
 8008a86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008a94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d123      	bne.n	8008aee <AT_ESP8266_ND+0x2262>
 8008aa6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d02b      	beq.n	8008b06 <AT_ESP8266_ND+0x227a>
 8008aae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ab2:	2b0b      	cmp	r3, #11
 8008ab4:	d027      	beq.n	8008b06 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_wifi_gotip)
 8008ab6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008aba:	2b0c      	cmp	r3, #12
 8008abc:	d023      	beq.n	8008b06 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_restart)
 8008abe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	d01f      	beq.n	8008b06 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_error)
 8008ac6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d01b      	beq.n	8008b06 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_ok)
 8008ace:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ad2:	2b07      	cmp	r3, #7
 8008ad4:	d017      	beq.n	8008b06 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_ok)
 8008ad6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ada:	2b08      	cmp	r3, #8
 8008adc:	d013      	beq.n	8008b06 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_err)
 8008ade:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ae2:	2b1e      	cmp	r3, #30
 8008ae4:	d00f      	beq.n	8008b06 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_err)))
 8008ae6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008aea:	2b1f      	cmp	r3, #31
 8008aec:	d00b      	beq.n	8008b06 <AT_ESP8266_ND+0x227a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008aee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008af2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b00:	4293      	cmp	r3, r2
 8008b02:	f341 8134 	ble.w	8009d6e <AT_ESP8266_ND+0x34e2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008b06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008b14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008b18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008b28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008b38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008b48:	f001 b911 	b.w	8009d6e <AT_ESP8266_ND+0x34e2>
 8008b4c:	08010a48 	.word	0x08010a48
 8008b50:	08010a58 	.word	0x08010a58
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008b54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8008b64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	f040 80f3 	bne.w	8008d5e <AT_ESP8266_ND+0x24d2>
 8008b78:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	f000 80ee 	beq.w	8008d5e <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_ok)
 8008b82:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	f000 80e9 	beq.w	8008d5e <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_error)
 8008b8c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	f000 80e4 	beq.w	8008d5e <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_err)
 8008b96:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b9a:	2b21      	cmp	r3, #33	; 0x21
 8008b9c:	f000 80df 	beq.w	8008d5e <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_ok))
 8008ba0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ba4:	2b1b      	cmp	r3, #27
 8008ba6:	f000 80da 	beq.w	8008d5e <AT_ESP8266_ND+0x24d2>
						{
						a->_pasos=0;
 8008baa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008bba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8008bca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f7f7 fb0b 	bl	80001f4 <strlen>
 8008bde:	4603      	mov	r3, r0
 8008be0:	4423      	add	r3, r4
 8008be2:	4990      	ldr	r1, [pc, #576]	; (8008e24 <AT_ESP8266_ND+0x2598>)
 8008be4:	461a      	mov	r2, r3
 8008be6:	460b      	mov	r3, r1
 8008be8:	cb03      	ldmia	r3!, {r0, r1}
 8008bea:	6010      	str	r0, [r2, #0]
 8008bec:	6051      	str	r1, [r2, #4]
 8008bee:	8819      	ldrh	r1, [r3, #0]
 8008bf0:	789b      	ldrb	r3, [r3, #2]
 8008bf2:	8111      	strh	r1, [r2, #8]
 8008bf4:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 8008bf6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008c04:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008c08:	2201      	movs	r2, #1
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f006 fb4f 	bl	800f2ae <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008c10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008c1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8008c2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	334c      	adds	r3, #76	; 0x4c
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7f7 fadb 	bl	80001f4 <strlen>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	461a      	mov	r2, r3
 8008c42:	4629      	mov	r1, r5
 8008c44:	4620      	mov	r0, r4
 8008c46:	f006 fb32 	bl	800f2ae <strncat>
						strncat(a->_uart2snd,separador,3);
 8008c4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008c58:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008c5c:	2203      	movs	r2, #3
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f006 fb25 	bl	800f2ae <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008c64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008c72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8008c80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	3362      	adds	r3, #98	; 0x62
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7f7 fab1 	bl	80001f4 <strlen>
 8008c92:	4603      	mov	r3, r0
 8008c94:	461a      	mov	r2, r3
 8008c96:	4629      	mov	r1, r5
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f006 fb08 	bl	800f2ae <strncat>
						strncat(a->_uart2snd,separador,3);
 8008c9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ca2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008cac:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008cb0:	2203      	movs	r2, #3
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f006 fafb 	bl	800f2ae <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008cb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008cc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8008cd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3372      	adds	r3, #114	; 0x72
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7f7 fa87 	bl	80001f4 <strlen>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	461a      	mov	r2, r3
 8008cea:	4629      	mov	r1, r5
 8008cec:	4620      	mov	r0, r4
 8008cee:	f006 fade 	bl	800f2ae <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008cf2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cf6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d00:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008d04:	2201      	movs	r2, #1
 8008d06:	4618      	mov	r0, r3
 8008d08:	f006 fad1 	bl	800f2ae <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008d0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d1a:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008d1e:	2202      	movs	r2, #2
 8008d20:	4618      	mov	r0, r3
 8008d22:	f006 fac4 	bl	800f2ae <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008d26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7f7 fa5d 	bl	80001f4 <strlen>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008d4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008d5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008d6c:	1c5a      	adds	r2, r3, #1
 8008d6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008d7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d11b      	bne.n	8008dc6 <AT_ESP8266_ND+0x253a>
 8008d8e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d023      	beq.n	8008dde <AT_ESP8266_ND+0x2552>
 8008d96:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d9a:	2b0b      	cmp	r3, #11
 8008d9c:	d01f      	beq.n	8008dde <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_wifi_gotip)
 8008d9e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008da2:	2b0c      	cmp	r3, #12
 8008da4:	d01b      	beq.n	8008dde <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_restart)
 8008da6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008daa:	2b04      	cmp	r3, #4
 8008dac:	d017      	beq.n	8008dde <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_error)
 8008dae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d013      	beq.n	8008dde <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_err)
 8008db6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dba:	2b21      	cmp	r3, #33	; 0x21
 8008dbc:	d00f      	beq.n	8008dde <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_ok)))
 8008dbe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dc2:	2b1b      	cmp	r3, #27
 8008dc4:	d00b      	beq.n	8008dde <AT_ESP8266_ND+0x2552>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008dc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	f340 87ca 	ble.w	8009d72 <AT_ESP8266_ND+0x34e6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008dde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008de2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008df0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008df4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008e00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008e10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008e20:	f000 bfa7 	b.w	8009d72 <AT_ESP8266_ND+0x34e6>
 8008e24:	08010948 	.word	0x08010948
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008e28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008e38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	f040 80e2 	bne.w	8009010 <AT_ESP8266_ND+0x2784>
 8008e4c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e50:	2b0b      	cmp	r3, #11
 8008e52:	f000 80dd 	beq.w	8009010 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_wifi_gotip)
 8008e56:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e5a:	2b0c      	cmp	r3, #12
 8008e5c:	f000 80d8 	beq.w	8009010 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008e60:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e64:	2b0e      	cmp	r3, #14
 8008e66:	f000 80d3 	beq.w	8009010 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_conectado)
 8008e6a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e6e:	2b0f      	cmp	r3, #15
 8008e70:	f000 80ce 	beq.w	8009010 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_desconectado)
 8008e74:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e78:	2b10      	cmp	r3, #16
 8008e7a:	f000 80c9 	beq.w	8009010 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_error))
 8008e7e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	f000 80c4 	beq.w	8009010 <AT_ESP8266_ND+0x2784>
						{
						a->_pasos=0;
 8008e88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008e98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008ea8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f7f7 f99c 	bl	80001f4 <strlen>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	4423      	add	r3, r4
 8008ec0:	4aa1      	ldr	r2, [pc, #644]	; (8009148 <AT_ESP8266_ND+0x28bc>)
 8008ec2:	461c      	mov	r4, r3
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ec8:	6020      	str	r0, [r4, #0]
 8008eca:	6061      	str	r1, [r4, #4]
 8008ecc:	60a2      	str	r2, [r4, #8]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008ed2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ed6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ee0:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f006 f9e1 	bl	800f2ae <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008eec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ef0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008efa:	4620      	mov	r0, r4
 8008efc:	f7f7 f97a 	bl	80001f4 <strlen>
 8008f00:	4603      	mov	r3, r0
 8008f02:	4423      	add	r3, r4
 8008f04:	4a91      	ldr	r2, [pc, #580]	; (800914c <AT_ESP8266_ND+0x28c0>)
 8008f06:	6810      	ldr	r0, [r2, #0]
 8008f08:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008f0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008f18:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008f1c:	2203      	movs	r2, #3
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f006 f9c5 	bl	800f2ae <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008f24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008f32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8008f40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3336      	adds	r3, #54	; 0x36
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7f7 f951 	bl	80001f4 <strlen>
 8008f52:	4603      	mov	r3, r0
 8008f54:	461a      	mov	r2, r3
 8008f56:	4629      	mov	r1, r5
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f006 f9a8 	bl	800f2ae <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008f5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008f6c:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008f70:	2202      	movs	r2, #2
 8008f72:	4618      	mov	r0, r3
 8008f74:	f006 f99b 	bl	800f2ae <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8008f78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008f86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8008f94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3346      	adds	r3, #70	; 0x46
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7f7 f927 	bl	80001f4 <strlen>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	461a      	mov	r2, r3
 8008faa:	4629      	mov	r1, r5
 8008fac:	4620      	mov	r0, r4
 8008fae:	f006 f97e 	bl	800f2ae <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008fb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008fc0:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7f7 f915 	bl	80001f4 <strlen>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f006 f96b 	bl	800f2ae <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008fd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7f7 f904 	bl	80001f4 <strlen>
 8008fec:	4603      	mov	r3, r0
 8008fee:	461a      	mov	r2, r3
 8008ff0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ff4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 8008ffe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009002:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f44f 7216 	mov.w	r2, #600	; 0x258
 800900c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8009010:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009014:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009024:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 800902e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009032:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800903c:	2b00      	cmp	r3, #0
 800903e:	d120      	bne.n	8009082 <AT_ESP8266_ND+0x27f6>
 8009040:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009044:	2b0a      	cmp	r3, #10
 8009046:	d028      	beq.n	800909a <AT_ESP8266_ND+0x280e>
 8009048:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800904c:	2b0b      	cmp	r3, #11
 800904e:	d024      	beq.n	800909a <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_wifi_gotip)
 8009050:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009054:	2b0c      	cmp	r3, #12
 8009056:	d020      	beq.n	800909a <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8009058:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800905c:	2b0e      	cmp	r3, #14
 800905e:	d01c      	beq.n	800909a <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_tcp_conectado)
 8009060:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009064:	2b0f      	cmp	r3, #15
 8009066:	d018      	beq.n	800909a <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_tcp_desconectado)
 8009068:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800906c:	2b10      	cmp	r3, #16
 800906e:	d014      	beq.n	800909a <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_error)
 8009070:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009074:	2b02      	cmp	r3, #2
 8009076:	d010      	beq.n	800909a <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_busy_p)))
 8009078:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800907c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009080:	d00b      	beq.n	800909a <AT_ESP8266_ND+0x280e>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8009082:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009086:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009090:	f241 3288 	movw	r2, #5000	; 0x1388
 8009094:	4293      	cmp	r3, r2
 8009096:	f340 866e 	ble.w	8009d76 <AT_ESP8266_ND+0x34ea>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800909a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800909e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80090a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80090ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80090bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80090cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80090dc:	f000 be4b 	b.w	8009d76 <AT_ESP8266_ND+0x34ea>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 80090e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090e4:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80090e8:	2200      	movs	r2, #0
 80090ea:	601a      	str	r2, [r3, #0]
 80090ec:	2200      	movs	r2, #0
 80090ee:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 80090f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090f4:	2b10      	cmp	r3, #16
 80090f6:	d003      	beq.n	8009100 <AT_ESP8266_ND+0x2874>
 80090f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090fc:	2b0a      	cmp	r3, #10
 80090fe:	d127      	bne.n	8009150 <AT_ESP8266_ND+0x28c4>
				{
					a->_estado=AT_decode;
 8009100:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009104:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800910e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009112:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009116:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2200      	movs	r2, #0
 800911e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8009122:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009126:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2200      	movs	r2, #0
 800912e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8009132:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009136:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2200      	movs	r2, #0
 800913e:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009142:	f000 be1a 	b.w	8009d7a <AT_ESP8266_ND+0x34ee>
 8009146:	bf00      	nop
 8009148:	08010a68 	.word	0x08010a68
 800914c:	08010a78 	.word	0x08010a78
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8009150:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009154:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800915e:	2b01      	cmp	r3, #1
 8009160:	f040 80d1 	bne.w	8009306 <AT_ESP8266_ND+0x2a7a>
 8009164:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009168:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009172:	2b00      	cmp	r3, #0
 8009174:	f040 80c7 	bne.w	8009306 <AT_ESP8266_ND+0x2a7a>
										a->_ejecucion=1;
 8009178:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800917c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2201      	movs	r2, #1
 8009184:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8009188:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800918c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2218      	movs	r2, #24
 8009194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009198:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800919c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 80091a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80091b6:	1c5a      	adds	r2, r3, #1
 80091b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 80091c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80091d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 80091e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80091f4:	4620      	mov	r0, r4
 80091f6:	f7f6 fffd 	bl	80001f4 <strlen>
 80091fa:	4603      	mov	r3, r0
 80091fc:	4423      	add	r3, r4
 80091fe:	4abe      	ldr	r2, [pc, #760]	; (80094f8 <AT_ESP8266_ND+0x2c6c>)
 8009200:	461c      	mov	r4, r3
 8009202:	4613      	mov	r3, r2
 8009204:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009206:	6020      	str	r0, [r4, #0]
 8009208:	6061      	str	r1, [r4, #4]
 800920a:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 800920c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009210:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800921a:	f107 0214 	add.w	r2, r7, #20
 800921e:	4611      	mov	r1, r2
 8009220:	4618      	mov	r0, r3
 8009222:	f005 fdc9 	bl	800edb8 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009226:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800922a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009234:	f107 0314 	add.w	r3, r7, #20
 8009238:	4618      	mov	r0, r3
 800923a:	f7f6 ffdb 	bl	80001f4 <strlen>
 800923e:	4602      	mov	r2, r0
 8009240:	f107 0314 	add.w	r3, r7, #20
 8009244:	4619      	mov	r1, r3
 8009246:	4620      	mov	r0, r4
 8009248:	f006 f831 	bl	800f2ae <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 800924c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009250:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 800925a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800925e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009268:	4619      	mov	r1, r3
 800926a:	4610      	mov	r0, r2
 800926c:	f006 f900 	bl	800f470 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009270:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009274:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800927e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009282:	2202      	movs	r2, #2
 8009284:	4618      	mov	r0, r3
 8009286:	f006 f812 	bl	800f2ae <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 800928a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800928e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009298:	4618      	mov	r0, r3
 800929a:	f7f6 ffab 	bl	80001f4 <strlen>
 800929e:	4603      	mov	r3, r0
 80092a0:	461a      	mov	r2, r3
 80092a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 80092b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 80092be:	4620      	mov	r0, r4
 80092c0:	f7f6 ff98 	bl	80001f4 <strlen>
 80092c4:	4603      	mov	r3, r0
 80092c6:	4423      	add	r3, r4
 80092c8:	4a8c      	ldr	r2, [pc, #560]	; (80094fc <AT_ESP8266_ND+0x2c70>)
 80092ca:	461c      	mov	r4, r3
 80092cc:	4613      	mov	r3, r2
 80092ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80092d0:	6020      	str	r0, [r4, #0]
 80092d2:	6061      	str	r1, [r4, #4]
 80092d4:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 80092d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80092e4:	1c5a      	adds	r2, r3, #1
 80092e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 80092f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8009302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009306:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800930a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009314:	1c5a      	adds	r2, r3, #1
 8009316:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800931a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 8009324:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009328:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009332:	2b00      	cmp	r3, #0
 8009334:	f040 80a6 	bne.w	8009484 <AT_ESP8266_ND+0x2bf8>
 8009338:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800933c:	2b13      	cmp	r3, #19
 800933e:	f000 80a1 	beq.w	8009484 <AT_ESP8266_ND+0x2bf8>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 8009342:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009346:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009350:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009354:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 800935e:	4619      	mov	r1, r3
 8009360:	4610      	mov	r0, r2
 8009362:	f7f6 ff3d 	bl	80001e0 <strcmp>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d01b      	beq.n	80093a4 <AT_ESP8266_ND+0x2b18>
 800936c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009370:	2b01      	cmp	r3, #1
 8009372:	d017      	beq.n	80093a4 <AT_ESP8266_ND+0x2b18>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 8009374:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009378:	2b14      	cmp	r3, #20
 800937a:	d013      	beq.n	80093a4 <AT_ESP8266_ND+0x2b18>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 800937c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009380:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800938a:	f241 3288 	movw	r2, #5000	; 0x1388
 800938e:	4293      	cmp	r3, r2
 8009390:	dd78      	ble.n	8009484 <AT_ESP8266_ND+0x2bf8>
 8009392:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009396:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d16f      	bne.n	8009484 <AT_ESP8266_ND+0x2bf8>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 80093a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80093b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80093b6:	4293      	cmp	r3, r2
 80093b8:	dd0e      	ble.n	80093d8 <AT_ESP8266_ND+0x2b4c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 80093ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 80093c8:	1c5a      	adds	r2, r3, #1
 80093ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 80093d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 80093f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009404:	1c5a      	adds	r2, r3, #1
 8009406:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800940a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009414:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009418:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2201      	movs	r2, #1
 8009420:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009424:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009428:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009432:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009436:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009440:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009444:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 800944e:	2361      	movs	r3, #97	; 0x61
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	2301      	movs	r3, #1
 8009454:	f005 fd34 	bl	800eec0 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009458:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800945c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009466:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800946a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009474:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009478:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2200      	movs	r2, #0
 8009480:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 8009484:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009488:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009492:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009496:	f040 8470 	bne.w	8009d7a <AT_ESP8266_ND+0x34ee>
 800949a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800949e:	2b13      	cmp	r3, #19
 80094a0:	d02e      	beq.n	8009500 <AT_ESP8266_ND+0x2c74>
 80094a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80094b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80094b4:	4293      	cmp	r3, r2
 80094b6:	dc23      	bgt.n	8009500 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_wifi_disconnect)
 80094b8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094bc:	2b0a      	cmp	r3, #10
 80094be:	d01f      	beq.n	8009500 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_wifi_connected)
 80094c0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094c4:	2b0b      	cmp	r3, #11
 80094c6:	d01b      	beq.n	8009500 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_wifi_gotip)
 80094c8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094cc:	2b0c      	cmp	r3, #12
 80094ce:	d017      	beq.n	8009500 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_tcp_desconectado)
 80094d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094d4:	2b10      	cmp	r3, #16
 80094d6:	d013      	beq.n	8009500 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_tcp_snd_err)
 80094d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094dc:	2b11      	cmp	r3, #17
 80094de:	d00f      	beq.n	8009500 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_tcp_enviado_error)
 80094e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094e4:	2b12      	cmp	r3, #18
 80094e6:	d00b      	beq.n	8009500 <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_busy_p)))
 80094e8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80094ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094f0:	f040 8443 	bne.w	8009d7a <AT_ESP8266_ND+0x34ee>
 80094f4:	e004      	b.n	8009500 <AT_ESP8266_ND+0x2c74>
 80094f6:	bf00      	nop
 80094f8:	08010a7c 	.word	0x08010a7c
 80094fc:	08010a88 	.word	0x08010a88
									a->_debug_count5++;
 8009500:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009504:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800950e:	1c5a      	adds	r2, r3, #1
 8009510:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009514:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 800951e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009522:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800952c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009530:	4293      	cmp	r3, r2
 8009532:	dd25      	ble.n	8009580 <AT_ESP8266_ND+0x2cf4>
										a->_debug_count8++;
 8009534:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009538:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009548:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009552:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009556:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009560:	1c5a      	adds	r2, r3, #1
 8009562:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009566:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009570:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009574:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2200      	movs	r2, #0
 800957c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009580:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009584:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800958e:	2b02      	cmp	r3, #2
 8009590:	dd10      	ble.n	80095b4 <AT_ESP8266_ND+0x2d28>
 8009592:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009596:	2b10      	cmp	r3, #16
 8009598:	d00c      	beq.n	80095b4 <AT_ESP8266_ND+0x2d28>
 800959a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800959e:	2b0a      	cmp	r3, #10
 80095a0:	d008      	beq.n	80095b4 <AT_ESP8266_ND+0x2d28>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 80095a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	220f      	movs	r2, #15
 80095ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80095b2:	e008      	b.n	80095c6 <AT_ESP8266_ND+0x2d3a>
										a->_estado=AT_decode;	//Devuelvo el estado
 80095b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80095c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 80095c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 80095d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 80095e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 80095f6:	e3c0      	b.n	8009d7a <AT_ESP8266_ND+0x34ee>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80095f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2200      	movs	r2, #0
 8009604:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 8009608:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800960c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009616:	2b01      	cmp	r3, #1
 8009618:	d16f      	bne.n	80096fa <AT_ESP8266_ND+0x2e6e>
						{
						a->_pasos=0;
 800961a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800961e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2200      	movs	r2, #0
 8009626:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800962a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800962e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2201      	movs	r2, #1
 8009636:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 800963a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800963e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009648:	4620      	mov	r0, r4
 800964a:	f7f6 fdd3 	bl	80001f4 <strlen>
 800964e:	4603      	mov	r3, r0
 8009650:	4423      	add	r3, r4
 8009652:	4a78      	ldr	r2, [pc, #480]	; (8009834 <AT_ESP8266_ND+0x2fa8>)
 8009654:	461c      	mov	r4, r3
 8009656:	4615      	mov	r5, r2
 8009658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800965a:	6020      	str	r0, [r4, #0]
 800965c:	6061      	str	r1, [r4, #4]
 800965e:	60a2      	str	r2, [r4, #8]
 8009660:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 8009662:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009666:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009670:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009674:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 800967e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009682:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	335c      	adds	r3, #92	; 0x5c
 800968a:	4618      	mov	r0, r3
 800968c:	f7f6 fdb2 	bl	80001f4 <strlen>
 8009690:	4603      	mov	r3, r0
 8009692:	461a      	mov	r2, r3
 8009694:	4629      	mov	r1, r5
 8009696:	4620      	mov	r0, r4
 8009698:	f005 fe09 	bl	800f2ae <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 800969c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80096aa:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7f6 fda0 	bl	80001f4 <strlen>
 80096b4:	4602      	mov	r2, r0
 80096b6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80096ba:	4619      	mov	r1, r3
 80096bc:	4620      	mov	r0, r4
 80096be:	f005 fdf6 	bl	800f2ae <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 80096c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7f6 fd8f 	bl	80001f4 <strlen>
 80096d6:	4603      	mov	r3, r0
 80096d8:	461a      	mov	r2, r3
 80096da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 80096e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80096f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 80096fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009708:	1c5a      	adds	r2, r3, #1
 800970a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800970e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8009718:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800971c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009726:	2b00      	cmp	r3, #0
 8009728:	d123      	bne.n	8009772 <AT_ESP8266_ND+0x2ee6>
 800972a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800972e:	2b0a      	cmp	r3, #10
 8009730:	d02b      	beq.n	800978a <AT_ESP8266_ND+0x2efe>
 8009732:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009736:	2b0b      	cmp	r3, #11
 8009738:	d027      	beq.n	800978a <AT_ESP8266_ND+0x2efe>
 800973a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800973e:	2b0c      	cmp	r3, #12
 8009740:	d023      	beq.n	800978a <AT_ESP8266_ND+0x2efe>
 8009742:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009746:	2b0e      	cmp	r3, #14
 8009748:	d01f      	beq.n	800978a <AT_ESP8266_ND+0x2efe>
 800974a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800974e:	2b0f      	cmp	r3, #15
 8009750:	d01b      	beq.n	800978a <AT_ESP8266_ND+0x2efe>
 8009752:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009756:	2b10      	cmp	r3, #16
 8009758:	d017      	beq.n	800978a <AT_ESP8266_ND+0x2efe>
 800975a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800975e:	2b15      	cmp	r3, #21
 8009760:	d013      	beq.n	800978a <AT_ESP8266_ND+0x2efe>
 8009762:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009766:	2b16      	cmp	r3, #22
 8009768:	d00f      	beq.n	800978a <AT_ESP8266_ND+0x2efe>
 800976a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800976e:	2b17      	cmp	r3, #23
 8009770:	d00b      	beq.n	800978a <AT_ESP8266_ND+0x2efe>
 8009772:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009776:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009780:	f241 3288 	movw	r2, #5000	; 0x1388
 8009784:	4293      	cmp	r3, r2
 8009786:	f340 82fa 	ble.w	8009d7e <AT_ESP8266_ND+0x34f2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800978a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800978e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 800979c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80097ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80097bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 80097cc:	e2d7      	b.n	8009d7e <AT_ESP8266_ND+0x34f2>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 80097ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097d2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80097d6:	2200      	movs	r2, #0
 80097d8:	601a      	str	r2, [r3, #0]
 80097da:	2200      	movs	r2, #0
 80097dc:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 80097de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097e2:	2b10      	cmp	r3, #16
 80097e4:	d003      	beq.n	80097ee <AT_ESP8266_ND+0x2f62>
 80097e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097ea:	2b0a      	cmp	r3, #10
 80097ec:	d124      	bne.n	8009838 <AT_ESP8266_ND+0x2fac>
				{
					a->_estado=AT_decode;
 80097ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80097fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009800:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009804:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2200      	movs	r2, #0
 800980c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8009810:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009814:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2200      	movs	r2, #0
 800981c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8009820:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009824:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2200      	movs	r2, #0
 800982c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009830:	e2a7      	b.n	8009d82 <AT_ESP8266_ND+0x34f6>
 8009832:	bf00      	nop
 8009834:	08010a94 	.word	0x08010a94
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8009838:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800983c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009846:	2b01      	cmp	r3, #1
 8009848:	f040 8102 	bne.w	8009a50 <AT_ESP8266_ND+0x31c4>
 800984c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009850:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800985a:	2b00      	cmp	r3, #0
 800985c:	f040 80f8 	bne.w	8009a50 <AT_ESP8266_ND+0x31c4>
										a->_ejecucion=1;
 8009860:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009864:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2201      	movs	r2, #1
 800986c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8009870:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009874:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2218      	movs	r2, #24
 800987c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009880:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009884:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009890:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009894:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800989e:	1c5a      	adds	r2, r3, #1
 80098a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 80098ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80098be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 80098ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80098dc:	4620      	mov	r0, r4
 80098de:	f7f6 fc89 	bl	80001f4 <strlen>
 80098e2:	4603      	mov	r3, r0
 80098e4:	4423      	add	r3, r4
 80098e6:	4a83      	ldr	r2, [pc, #524]	; (8009af4 <AT_ESP8266_ND+0x3268>)
 80098e8:	461c      	mov	r4, r3
 80098ea:	4613      	mov	r3, r2
 80098ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80098ee:	6020      	str	r0, [r4, #0]
 80098f0:	6061      	str	r1, [r4, #4]
 80098f2:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 80098f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 8009902:	f107 020c 	add.w	r2, r7, #12
 8009906:	4611      	mov	r1, r2
 8009908:	4618      	mov	r0, r3
 800990a:	f005 fa55 	bl	800edb8 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 800990e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009912:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800991c:	f107 030c 	add.w	r3, r7, #12
 8009920:	4618      	mov	r0, r3
 8009922:	f7f6 fc67 	bl	80001f4 <strlen>
 8009926:	4602      	mov	r2, r0
 8009928:	f107 030c 	add.w	r3, r7, #12
 800992c:	4619      	mov	r1, r3
 800992e:	4620      	mov	r0, r4
 8009930:	f005 fcbd 	bl	800f2ae <strncat>
										strncat(a->_uart2snd,",",1);
 8009934:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009938:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009942:	4620      	mov	r0, r4
 8009944:	f7f6 fc56 	bl	80001f4 <strlen>
 8009948:	4603      	mov	r3, r0
 800994a:	4423      	add	r3, r4
 800994c:	496a      	ldr	r1, [pc, #424]	; (8009af8 <AT_ESP8266_ND+0x326c>)
 800994e:	461a      	mov	r2, r3
 8009950:	460b      	mov	r3, r1
 8009952:	881b      	ldrh	r3, [r3, #0]
 8009954:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8009956:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800995a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8009964:	f107 020c 	add.w	r2, r7, #12
 8009968:	4611      	mov	r1, r2
 800996a:	4618      	mov	r0, r3
 800996c:	f005 fa24 	bl	800edb8 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009970:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009974:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800997e:	f107 030c 	add.w	r3, r7, #12
 8009982:	4618      	mov	r0, r3
 8009984:	f7f6 fc36 	bl	80001f4 <strlen>
 8009988:	4602      	mov	r2, r0
 800998a:	f107 030c 	add.w	r3, r7, #12
 800998e:	4619      	mov	r1, r3
 8009990:	4620      	mov	r0, r4
 8009992:	f005 fc8c 	bl	800f2ae <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8009996:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800999a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 80099a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80099b2:	4619      	mov	r1, r3
 80099b4:	4610      	mov	r0, r2
 80099b6:	f005 fd5b 	bl	800f470 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80099ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80099c8:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80099cc:	2202      	movs	r2, #2
 80099ce:	4618      	mov	r0, r3
 80099d0:	f005 fc6d 	bl	800f2ae <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 80099d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7f6 fc06 	bl	80001f4 <strlen>
 80099e8:	4603      	mov	r3, r0
 80099ea:	461a      	mov	r2, r3
 80099ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 80099fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f7f6 fbf3 	bl	80001f4 <strlen>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	4423      	add	r3, r4
 8009a12:	4a3a      	ldr	r2, [pc, #232]	; (8009afc <AT_ESP8266_ND+0x3270>)
 8009a14:	461c      	mov	r4, r3
 8009a16:	4613      	mov	r3, r2
 8009a18:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009a1a:	6020      	str	r0, [r4, #0]
 8009a1c:	6061      	str	r1, [r4, #4]
 8009a1e:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009a20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009a2e:	1c5a      	adds	r2, r3, #1
 8009a30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 8009a3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009a50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009a6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f040 80b8 	bne.w	8009bf2 <AT_ESP8266_ND+0x3366>
 8009a82:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009a86:	2b13      	cmp	r3, #19
 8009a88:	f000 80b3 	beq.w	8009bf2 <AT_ESP8266_ND+0x3366>
 8009a8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009a9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4610      	mov	r0, r2
 8009aac:	f7f6 fb98 	bl	80001e0 <strcmp>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d024      	beq.n	8009b00 <AT_ESP8266_ND+0x3274>
 8009ab6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d020      	beq.n	8009b00 <AT_ESP8266_ND+0x3274>
 8009abe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ac2:	2b14      	cmp	r3, #20
 8009ac4:	d01c      	beq.n	8009b00 <AT_ESP8266_ND+0x3274>
 8009ac6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009aca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	f340 808a 	ble.w	8009bf2 <AT_ESP8266_ND+0x3366>
 8009ade:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ae2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	f040 8080 	bne.w	8009bf2 <AT_ESP8266_ND+0x3366>
 8009af2:	e005      	b.n	8009b00 <AT_ESP8266_ND+0x3274>
 8009af4:	08010a7c 	.word	0x08010a7c
 8009af8:	08010aa4 	.word	0x08010aa4
 8009afc:	08010a88 	.word	0x08010a88
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8009b00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b12:	4293      	cmp	r3, r2
 8009b14:	dd17      	ble.n	8009b46 <AT_ESP8266_ND+0x32ba>
 8009b16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d10e      	bne.n	8009b46 <AT_ESP8266_ND+0x32ba>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009b28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8009b46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8009b54:	1c5a      	adds	r2, r3, #1
 8009b56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8009b64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009b72:	1c5a      	adds	r2, r3, #1
 8009b74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009b82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009b92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009ba0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ba4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009bae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009bbc:	2361      	movs	r3, #97	; 0x61
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	f005 f97d 	bl	800eec0 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009bc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009bd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009be2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009be6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8009bf2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bf6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c00:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009c04:	f040 80bd 	bne.w	8009d82 <AT_ESP8266_ND+0x34f6>
 8009c08:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c0c:	2b13      	cmp	r3, #19
 8009c0e:	d02b      	beq.n	8009c68 <AT_ESP8266_ND+0x33dc>
 8009c10:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c14:	2b0b      	cmp	r3, #11
 8009c16:	d027      	beq.n	8009c68 <AT_ESP8266_ND+0x33dc>
 8009c18:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c1c:	2b0c      	cmp	r3, #12
 8009c1e:	d023      	beq.n	8009c68 <AT_ESP8266_ND+0x33dc>
 8009c20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c32:	4293      	cmp	r3, r2
 8009c34:	dc18      	bgt.n	8009c68 <AT_ESP8266_ND+0x33dc>
 8009c36:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c3a:	2b0a      	cmp	r3, #10
 8009c3c:	d014      	beq.n	8009c68 <AT_ESP8266_ND+0x33dc>
 8009c3e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c42:	2b10      	cmp	r3, #16
 8009c44:	d010      	beq.n	8009c68 <AT_ESP8266_ND+0x33dc>
 8009c46:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c4a:	2b11      	cmp	r3, #17
 8009c4c:	d00c      	beq.n	8009c68 <AT_ESP8266_ND+0x33dc>
 8009c4e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c52:	2b12      	cmp	r3, #18
 8009c54:	d008      	beq.n	8009c68 <AT_ESP8266_ND+0x33dc>
 8009c56:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c5a:	2b16      	cmp	r3, #22
 8009c5c:	d004      	beq.n	8009c68 <AT_ESP8266_ND+0x33dc>
 8009c5e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c62:	2b19      	cmp	r3, #25
 8009c64:	f040 808d 	bne.w	8009d82 <AT_ESP8266_ND+0x34f6>
									a->_debug_count5++;
 8009c68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009c76:	1c5a      	adds	r2, r3, #1
 8009c78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009c86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	dd25      	ble.n	8009ce8 <AT_ESP8266_ND+0x345c>
										a->_debug_count8++;
 8009c9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ca0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009caa:	1c5a      	adds	r2, r3, #1
 8009cac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009cba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009cc8:	1c5a      	adds	r2, r3, #1
 8009cca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009cd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009ce8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	dd07      	ble.n	8009d0a <AT_ESP8266_ND+0x347e>
 8009cfa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009cfe:	2b10      	cmp	r3, #16
 8009d00:	d003      	beq.n	8009d0a <AT_ESP8266_ND+0x347e>
 8009d02:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d06:	2b0a      	cmp	r3, #10
 8009d08:	d108      	bne.n	8009d1c <AT_ESP8266_ND+0x3490>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009d0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009d1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009d2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009d3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2200      	movs	r2, #0
 8009d48:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009d4c:	e019      	b.n	8009d82 <AT_ESP8266_ND+0x34f6>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009d4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009d60:	e010      	b.n	8009d84 <AT_ESP8266_ND+0x34f8>
			break;
 8009d62:	bf00      	nop
 8009d64:	e00e      	b.n	8009d84 <AT_ESP8266_ND+0x34f8>
			break;
 8009d66:	bf00      	nop
 8009d68:	e00c      	b.n	8009d84 <AT_ESP8266_ND+0x34f8>
			break;
 8009d6a:	bf00      	nop
 8009d6c:	e00a      	b.n	8009d84 <AT_ESP8266_ND+0x34f8>
			break;
 8009d6e:	bf00      	nop
 8009d70:	e008      	b.n	8009d84 <AT_ESP8266_ND+0x34f8>
			break;
 8009d72:	bf00      	nop
 8009d74:	e006      	b.n	8009d84 <AT_ESP8266_ND+0x34f8>
			break;
 8009d76:	bf00      	nop
 8009d78:	e004      	b.n	8009d84 <AT_ESP8266_ND+0x34f8>
			break;
 8009d7a:	bf00      	nop
 8009d7c:	e002      	b.n	8009d84 <AT_ESP8266_ND+0x34f8>
			break;
 8009d7e:	bf00      	nop
 8009d80:	e000      	b.n	8009d84 <AT_ESP8266_ND+0x34f8>
			break;
 8009d82:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009d84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 8009d94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 8009da4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009da8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8009db2:	4618      	mov	r0, r3
 8009db4:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009dbc <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dce:	f240 328d 	movw	r2, #909	; 0x38d
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	f001 83c3 	beq.w	800b55e <WiFi_Conn_ND+0x17a2>
 8009dd8:	f240 328d 	movw	r2, #909	; 0x38d
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	f301 8453 	bgt.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009de2:	f240 3289 	movw	r2, #905	; 0x389
 8009de6:	4293      	cmp	r3, r2
 8009de8:	f001 8335 	beq.w	800b456 <WiFi_Conn_ND+0x169a>
 8009dec:	f240 3289 	movw	r2, #905	; 0x389
 8009df0:	4293      	cmp	r3, r2
 8009df2:	f301 8449 	bgt.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009df6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009dfa:	f001 8224 	beq.w	800b246 <WiFi_Conn_ND+0x148a>
 8009dfe:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009e02:	f301 8441 	bgt.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009e06:	f240 3229 	movw	r2, #809	; 0x329
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	f301 843c 	bgt.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009e10:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009e14:	f280 80a5 	bge.w	8009f62 <WiFi_Conn_ND+0x1a6>
 8009e18:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	f000 8776 	beq.w	800ad0e <WiFi_Conn_ND+0xf52>
 8009e22:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009e26:	4293      	cmp	r3, r2
 8009e28:	f301 842e 	bgt.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009e2c:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009e30:	4293      	cmp	r3, r2
 8009e32:	f000 86fc 	beq.w	800ac2e <WiFi_Conn_ND+0xe72>
 8009e36:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	f301 8424 	bgt.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009e40:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009e44:	f000 862b 	beq.w	800aa9e <WiFi_Conn_ND+0xce2>
 8009e48:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009e4c:	f301 841c 	bgt.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009e50:	f240 2261 	movw	r2, #609	; 0x261
 8009e54:	4293      	cmp	r3, r2
 8009e56:	f000 85b1 	beq.w	800a9bc <WiFi_Conn_ND+0xc00>
 8009e5a:	f240 2261 	movw	r2, #609	; 0x261
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	f301 8412 	bgt.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009e64:	f240 225d 	movw	r2, #605	; 0x25d
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	f000 8551 	beq.w	800a910 <WiFi_Conn_ND+0xb54>
 8009e6e:	f240 225d 	movw	r2, #605	; 0x25d
 8009e72:	4293      	cmp	r3, r2
 8009e74:	f301 8408 	bgt.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009e78:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009e7c:	f000 84cf 	beq.w	800a81e <WiFi_Conn_ND+0xa62>
 8009e80:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009e84:	f301 8400 	bgt.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009e88:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	f000 846a 	beq.w	800a766 <WiFi_Conn_ND+0x9aa>
 8009e92:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009e96:	f281 83f7 	bge.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009e9a:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	f000 8425 	beq.w	800a6ee <WiFi_Conn_ND+0x932>
 8009ea4:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009ea8:	f281 83ee 	bge.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009eac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009eb0:	f000 83b0 	beq.w	800a614 <WiFi_Conn_ND+0x858>
 8009eb4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009eb8:	f301 83e6 	bgt.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009ebc:	f240 1299 	movw	r2, #409	; 0x199
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	f000 8369 	beq.w	800a598 <WiFi_Conn_ND+0x7dc>
 8009ec6:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8009eca:	f281 83dd 	bge.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009ece:	f240 1295 	movw	r2, #405	; 0x195
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	f000 8329 	beq.w	800a52a <WiFi_Conn_ND+0x76e>
 8009ed8:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009edc:	f281 83d4 	bge.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009ee0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009ee4:	f000 82a0 	beq.w	800a428 <WiFi_Conn_ND+0x66c>
 8009ee8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009eec:	f301 83cc 	bgt.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009ef0:	f240 1235 	movw	r2, #309	; 0x135
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	f000 8271 	beq.w	800a3dc <WiFi_Conn_ND+0x620>
 8009efa:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009efe:	f281 83c3 	bge.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009f02:	f240 1231 	movw	r2, #305	; 0x131
 8009f06:	4293      	cmp	r3, r2
 8009f08:	f000 8263 	beq.w	800a3d2 <WiFi_Conn_ND+0x616>
 8009f0c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009f10:	f281 83ba 	bge.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009f14:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009f18:	f000 8207 	beq.w	800a32a <WiFi_Conn_ND+0x56e>
 8009f1c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009f20:	f301 83b2 	bgt.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009f24:	2bd1      	cmp	r3, #209	; 0xd1
 8009f26:	f000 81a0 	beq.w	800a26a <WiFi_Conn_ND+0x4ae>
 8009f2a:	2bd1      	cmp	r3, #209	; 0xd1
 8009f2c:	f301 83ac 	bgt.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009f30:	2bcd      	cmp	r3, #205	; 0xcd
 8009f32:	f000 8170 	beq.w	800a216 <WiFi_Conn_ND+0x45a>
 8009f36:	2bcd      	cmp	r3, #205	; 0xcd
 8009f38:	f301 83a6 	bgt.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009f3c:	2bc8      	cmp	r3, #200	; 0xc8
 8009f3e:	f000 80f1 	beq.w	800a124 <WiFi_Conn_ND+0x368>
 8009f42:	2bc8      	cmp	r3, #200	; 0xc8
 8009f44:	f301 83a0 	bgt.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009f48:	2b6d      	cmp	r3, #109	; 0x6d
 8009f4a:	f000 80b3 	beq.w	800a0b4 <WiFi_Conn_ND+0x2f8>
 8009f4e:	2b6d      	cmp	r3, #109	; 0x6d
 8009f50:	f301 839a 	bgt.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009f54:	2b64      	cmp	r3, #100	; 0x64
 8009f56:	d021      	beq.n	8009f9c <WiFi_Conn_ND+0x1e0>
 8009f58:	2b69      	cmp	r3, #105	; 0x69
 8009f5a:	f000 8096 	beq.w	800a08a <WiFi_Conn_ND+0x2ce>
 8009f5e:	f001 bb93 	b.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009f62:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009f66:	2b09      	cmp	r3, #9
 8009f68:	f201 838e 	bhi.w	800b688 <WiFi_Conn_ND+0x18cc>
 8009f6c:	a201      	add	r2, pc, #4	; (adr r2, 8009f74 <WiFi_Conn_ND+0x1b8>)
 8009f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f72:	bf00      	nop
 8009f74:	0800ae1b 	.word	0x0800ae1b
 8009f78:	0800b689 	.word	0x0800b689
 8009f7c:	0800b689 	.word	0x0800b689
 8009f80:	0800b689 	.word	0x0800b689
 8009f84:	0800b689 	.word	0x0800b689
 8009f88:	0800aee9 	.word	0x0800aee9
 8009f8c:	0800af89 	.word	0x0800af89
 8009f90:	0800b029 	.word	0x0800b029
 8009f94:	0800b0c9 	.word	0x0800b0c9
 8009f98:	0800b169 	.word	0x0800b169
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fa2:	2b64      	cmp	r3, #100	; 0x64
 8009fa4:	d046      	beq.n	800a034 <WiFi_Conn_ND+0x278>
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d041      	beq.n	800a034 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fb6:	2b1c      	cmp	r3, #28
 8009fb8:	d03c      	beq.n	800a034 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d037      	beq.n	800a034 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fca:	2b04      	cmp	r3, #4
 8009fcc:	d032      	beq.n	800a034 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fd4:	2b13      	cmp	r3, #19
 8009fd6:	d02d      	beq.n	800a034 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f7fc fac1 	bl	8006560 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d14e      	bne.n	800a086 <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f7fc fc4f 	bl	800688c <AT_ESP8266_ND>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a004:	2b01      	cmp	r3, #1
 800a006:	d109      	bne.n	800a01c <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a014:	4619      	mov	r1, r3
 800a016:	4610      	mov	r0, r2
 800a018:	f7f7 fa34 	bl	8001484 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a028:	b29a      	uxth	r2, r3
 800a02a:	2364      	movs	r3, #100	; 0x64
 800a02c:	68b8      	ldr	r0, [r7, #8]
 800a02e:	f7fb f9f3 	bl	8005418 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 800a032:	e028      	b.n	800a086 <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d004      	beq.n	800a048 <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 800a044:	2b1c      	cmp	r3, #28
 800a046:	d103      	bne.n	800a050 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	226d      	movs	r2, #109	; 0x6d
 800a04c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a056:	2b02      	cmp	r3, #2
 800a058:	d00f      	beq.n	800a07a <WiFi_Conn_ND+0x2be>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a060:	2b04      	cmp	r3, #4
 800a062:	d00a      	beq.n	800a07a <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a06a:	2b0b      	cmp	r3, #11
 800a06c:	d005      	beq.n	800a07a <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a074:	2b0c      	cmp	r3, #12
 800a076:	f041 82d8 	bne.w	800b62a <WiFi_Conn_ND+0x186e>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2269      	movs	r2, #105	; 0x69
 800a07e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 800a082:	f001 bad2 	b.w	800b62a <WiFi_Conn_ND+0x186e>
 800a086:	f001 bad0 	b.w	800b62a <WiFi_Conn_ND+0x186e>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f7fc fa68 	bl	8006560 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2264      	movs	r2, #100	; 0x64
 800a094:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 800a0b0:	f001 baea 	b.w	800b688 <WiFi_Conn_ND+0x18cc>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00c      	beq.n	800a0d8 <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f7fc fa7a 	bl	80065b8 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a0ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800a0d6:	e00e      	b.n	800a0f6 <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f7fc fa57 	bl	800658c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	22c8      	movs	r2, #200	; 0xc8
 800a0e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0fc:	2b04      	cmp	r3, #4
 800a0fe:	f041 8296 	bne.w	800b62e <WiFi_Conn_ND+0x1872>
					{
						Cambiar_CWMODE(b);
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f7fc fa2c 	bl	8006560 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2264      	movs	r2, #100	; 0x64
 800a10c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a120:	f001 ba85 	b.w	800b62e <WiFi_Conn_ND+0x1872>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a12a:	2bc8      	cmp	r3, #200	; 0xc8
 800a12c:	d04f      	beq.n	800a1ce <WiFi_Conn_ND+0x412>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a134:	2b01      	cmp	r3, #1
 800a136:	d04a      	beq.n	800a1ce <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a13e:	2b02      	cmp	r3, #2
 800a140:	d045      	beq.n	800a1ce <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a148:	2b03      	cmp	r3, #3
 800a14a:	d040      	beq.n	800a1ce <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a152:	2b04      	cmp	r3, #4
 800a154:	d03b      	beq.n	800a1ce <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a15c:	2b0a      	cmp	r3, #10
 800a15e:	d036      	beq.n	800a1ce <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a166:	2b0b      	cmp	r3, #11
 800a168:	d031      	beq.n	800a1ce <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a170:	2b0c      	cmp	r3, #12
 800a172:	d02c      	beq.n	800a1ce <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f7fc fa09 	bl	800658c <ConectarWIFI>
						if(b->_enviaruart==1)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a180:	2b01      	cmp	r3, #1
 800a182:	d124      	bne.n	800a1ce <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f7fc fb81 	bl	800688c <AT_ESP8266_ND>
 800a18a:	4602      	mov	r2, r0
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d109      	bne.n	800a1b8 <WiFi_Conn_ND+0x3fc>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	4610      	mov	r0, r2
 800a1b4:	f7f7 f966 	bl	8001484 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a1c4:	b29a      	uxth	r2, r3
 800a1c6:	2364      	movs	r3, #100	; 0x64
 800a1c8:	68b8      	ldr	r0, [r7, #8]
 800a1ca:	f7fb f925 	bl	8005418 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d004      	beq.n	800a1e2 <WiFi_Conn_ND+0x426>
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1de:	2b0c      	cmp	r3, #12
 800a1e0:	d103      	bne.n	800a1ea <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	22d1      	movs	r2, #209	; 0xd1
 800a1e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f0:	2b02      	cmp	r3, #2
 800a1f2:	d00a      	beq.n	800a20a <WiFi_Conn_ND+0x44e>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1fa:	2b03      	cmp	r3, #3
 800a1fc:	d005      	beq.n	800a20a <WiFi_Conn_ND+0x44e>
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a204:	2b20      	cmp	r3, #32
 800a206:	f041 8214 	bne.w	800b632 <WiFi_Conn_ND+0x1876>
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	22cd      	movs	r2, #205	; 0xcd
 800a20e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a212:	f001 ba0e 	b.w	800b632 <WiFi_Conn_ND+0x1876>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 800a216:	f241 3088 	movw	r0, #5000	; 0x1388
 800a21a:	f7f8 fc49 	bl	8002ab0 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f7fc f9b4 	bl	800658c <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	22c8      	movs	r2, #200	; 0xc8
 800a228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2200      	movs	r2, #0
 800a230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a242:	2b04      	cmp	r3, #4
 800a244:	f041 81f7 	bne.w	800b636 <WiFi_Conn_ND+0x187a>
					{
						Cambiar_CWMODE(b);
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f7fc f989 	bl	8006560 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2264      	movs	r2, #100	; 0x64
 800a252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2200      	movs	r2, #0
 800a25a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2200      	movs	r2, #0
 800a262:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a266:	f001 b9e6 	b.w	800b636 <WiFi_Conn_ND+0x187a>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d108      	bne.n	800a28e <WiFi_Conn_ND+0x4d2>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f240 3229 	movw	r2, #809	; 0x329
 800a282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)) //Si me desconecto, me vuelvo a conectar
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a294:	2b0a      	cmp	r3, #10
 800a296:	d004      	beq.n	800a2a2 <WiFi_Conn_ND+0x4e6>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a29e:	2b0d      	cmp	r3, #13
 800a2a0:	d10a      	bne.n	800a2b8 <WiFi_Conn_ND+0x4fc>
				{
					ConectarWIFI(b);
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f7fc f972 	bl	800658c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	22c8      	movs	r2, #200	; 0xc8
 800a2ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2be:	2b04      	cmp	r3, #4
 800a2c0:	d10e      	bne.n	800a2e0 <WiFi_Conn_ND+0x524>
					{
						Cambiar_CWMODE(b);
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f7fc f94c 	bl	8006560 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2264      	movs	r2, #100	; 0x64
 800a2cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d011      	beq.n	800a30e <WiFi_Conn_ND+0x552>
				{//
					CrearServidorTCP(b);
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f7fc f9bc 	bl	8006668 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a2f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2200      	movs	r2, #0
 800a306:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800a30a:	f001 b9bd 	b.w	800b688 <WiFi_Conn_ND+0x18cc>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f7fc f952 	bl	80065b8 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a31a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2200      	movs	r2, #0
 800a322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a326:	f001 b9af 	b.w	800b688 <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a330:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a334:	d03b      	beq.n	800a3ae <WiFi_Conn_ND+0x5f2>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a33c:	2b04      	cmp	r3, #4
 800a33e:	d036      	beq.n	800a3ae <WiFi_Conn_ND+0x5f2>
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a346:	2b0a      	cmp	r3, #10
 800a348:	d031      	beq.n	800a3ae <WiFi_Conn_ND+0x5f2>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a350:	2b0d      	cmp	r3, #13
 800a352:	d02c      	beq.n	800a3ae <WiFi_Conn_ND+0x5f2>
				{
						DesconectarWIFI(b);
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f7fc f95b 	bl	8006610 <DesconectarWIFI>
						if(b->_enviaruart==1)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a360:	2b01      	cmp	r3, #1
 800a362:	d124      	bne.n	800a3ae <WiFi_Conn_ND+0x5f2>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f7fc fa91 	bl	800688c <AT_ESP8266_ND>
 800a36a:	4602      	mov	r2, r0
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a380:	2b01      	cmp	r3, #1
 800a382:	d109      	bne.n	800a398 <WiFi_Conn_ND+0x5dc>
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a390:	4619      	mov	r1, r3
 800a392:	4610      	mov	r0, r2
 800a394:	f7f7 f876 	bl	8001484 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	2364      	movs	r3, #100	; 0x64
 800a3a8:	68b8      	ldr	r0, [r7, #8]
 800a3aa:	f7fb f835 	bl	8005418 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b4:	2b0a      	cmp	r3, #10
 800a3b6:	d005      	beq.n	800a3c4 <WiFi_Conn_ND+0x608>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3be:	2b0d      	cmp	r3, #13
 800a3c0:	f041 813b 	bne.w	800b63a <WiFi_Conn_ND+0x187e>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f240 1235 	movw	r2, #309	; 0x135
 800a3ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a3ce:	f001 b934 	b.w	800b63a <WiFi_Conn_ND+0x187e>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f7fc f8ae 	bl	8006534 <NOP>
			}
			break;
 800a3d8:	f001 b956 	b.w	800b688 <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f7fc f8d1 	bl	800658c <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	22c8      	movs	r2, #200	; 0xc8
 800a3ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a400:	2b04      	cmp	r3, #4
 800a402:	f041 811c 	bne.w	800b63e <WiFi_Conn_ND+0x1882>
					{
						Cambiar_CWMODE(b);
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f7fc f8aa 	bl	8006560 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2264      	movs	r2, #100	; 0x64
 800a410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a424:	f001 b90b 	b.w	800b63e <WiFi_Conn_ND+0x1882>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a42e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a432:	d04f      	beq.n	800a4d4 <WiFi_Conn_ND+0x718>
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a43a:	2b04      	cmp	r3, #4
 800a43c:	d04a      	beq.n	800a4d4 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_ok)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a444:	2b01      	cmp	r3, #1
 800a446:	d045      	beq.n	800a4d4 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_error)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d040      	beq.n	800a4d4 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_ok)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a458:	2b07      	cmp	r3, #7
 800a45a:	d03b      	beq.n	800a4d4 <WiFi_Conn_ND+0x718>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a462:	2b08      	cmp	r3, #8
 800a464:	d036      	beq.n	800a4d4 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_err)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a46c:	2b1e      	cmp	r3, #30
 800a46e:	d031      	beq.n	800a4d4 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a476:	2b1f      	cmp	r3, #31
 800a478:	d02c      	beq.n	800a4d4 <WiFi_Conn_ND+0x718>
				{
						MUX(b);
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f7fc f89c 	bl	80065b8 <MUX>
						if(b->_enviaruart==1)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a486:	2b01      	cmp	r3, #1
 800a488:	d124      	bne.n	800a4d4 <WiFi_Conn_ND+0x718>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f7fc f9fe 	bl	800688c <AT_ESP8266_ND>
 800a490:	4602      	mov	r2, r0
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d109      	bne.n	800a4be <WiFi_Conn_ND+0x702>
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	4610      	mov	r0, r2
 800a4ba:	f7f6 ffe3 	bl	8001484 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	2364      	movs	r3, #100	; 0x64
 800a4ce:	68b8      	ldr	r0, [r7, #8]
 800a4d0:	f7fa ffa2 	bl	8005418 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d009      	beq.n	800a4f2 <WiFi_Conn_ND+0x736>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e4:	2b07      	cmp	r3, #7
 800a4e6:	d004      	beq.n	800a4f2 <WiFi_Conn_ND+0x736>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ee:	2b08      	cmp	r3, #8
 800a4f0:	d104      	bne.n	800a4fc <WiFi_Conn_ND+0x740>
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f240 1299 	movw	r2, #409	; 0x199
 800a4f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a502:	2b02      	cmp	r3, #2
 800a504:	d00a      	beq.n	800a51c <WiFi_Conn_ND+0x760>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a50c:	2b1e      	cmp	r3, #30
 800a50e:	d005      	beq.n	800a51c <WiFi_Conn_ND+0x760>
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a516:	2b1f      	cmp	r3, #31
 800a518:	f041 8093 	bne.w	800b642 <WiFi_Conn_ND+0x1886>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f240 1295 	movw	r2, #405	; 0x195
 800a522:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a526:	f001 b88c 	b.w	800b642 <WiFi_Conn_ND+0x1886>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f7fc f802 	bl	8006534 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a536:	2b04      	cmp	r3, #4
 800a538:	d112      	bne.n	800a560 <WiFi_Conn_ND+0x7a4>
				{
					Cambiar_CWMODE(b);
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f7fc f810 	bl	8006560 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2264      	movs	r2, #100	; 0x64
 800a544:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2200      	movs	r2, #0
 800a54c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2200      	movs	r2, #0
 800a554:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a566:	2b0a      	cmp	r3, #10
 800a568:	d005      	beq.n	800a576 <WiFi_Conn_ND+0x7ba>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a570:	2b0d      	cmp	r3, #13
 800a572:	f041 8068 	bne.w	800b646 <WiFi_Conn_ND+0x188a>
				{
					ConectarWIFI(b);
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f7fc f808 	bl	800658c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	22c8      	movs	r2, #200	; 0xc8
 800a580:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a594:	f001 b857 	b.w	800b646 <WiFi_Conn_ND+0x188a>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f7fb ffcb 	bl	8006534 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ac:	2b04      	cmp	r3, #4
 800a5ae:	d10e      	bne.n	800a5ce <WiFi_Conn_ND+0x812>
					{
						Cambiar_CWMODE(b);
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f7fb ffd5 	bl	8006560 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2264      	movs	r2, #100	; 0x64
 800a5ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d4:	2b0a      	cmp	r3, #10
 800a5d6:	d004      	beq.n	800a5e2 <WiFi_Conn_ND+0x826>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5de:	2b0d      	cmp	r3, #13
 800a5e0:	d10a      	bne.n	800a5f8 <WiFi_Conn_ND+0x83c>
					{
						ConectarWIFI(b);
 800a5e2:	68f8      	ldr	r0, [r7, #12]
 800a5e4:	f7fb ffd2 	bl	800658c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	22c8      	movs	r2, #200	; 0xc8
 800a5ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}

					IPDef(b);
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f7fb fff3 	bl	80065e4 <IPDef>
					b->_estado_conexion=DEF_IP_EN_CURSO;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 800a610:	f001 b83a 	b.w	800b688 <WiFi_Conn_ND+0x18cc>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a61a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a61e:	d045      	beq.n	800a6ac <WiFi_Conn_ND+0x8f0>
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a626:	2b04      	cmp	r3, #4
 800a628:	d040      	beq.n	800a6ac <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_ok)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a630:	2b01      	cmp	r3, #1
 800a632:	d03b      	beq.n	800a6ac <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_error)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d036      	beq.n	800a6ac <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_ok)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a644:	2b1b      	cmp	r3, #27
 800a646:	d031      	beq.n	800a6ac <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a64e:	2b21      	cmp	r3, #33	; 0x21
 800a650:	d02c      	beq.n	800a6ac <WiFi_Conn_ND+0x8f0>
				{
						IPDef(b);
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f7fb ffc6 	bl	80065e4 <IPDef>
						if(b->_enviaruart==1)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d124      	bne.n	800a6ac <WiFi_Conn_ND+0x8f0>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f7fc f912 	bl	800688c <AT_ESP8266_ND>
 800a668:	4602      	mov	r2, r0
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2200      	movs	r2, #0
 800a674:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d109      	bne.n	800a696 <WiFi_Conn_ND+0x8da>
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a68e:	4619      	mov	r1, r3
 800a690:	4610      	mov	r0, r2
 800a692:	f7f6 fef7 	bl	8001484 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a6a2:	b29a      	uxth	r2, r3
 800a6a4:	2364      	movs	r3, #100	; 0x64
 800a6a6:	68b8      	ldr	r0, [r7, #8]
 800a6a8:	f7fa feb6 	bl	8005418 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d004      	beq.n	800a6c0 <WiFi_Conn_ND+0x904>
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6bc:	2b1b      	cmp	r3, #27
 800a6be:	d104      	bne.n	800a6ca <WiFi_Conn_ND+0x90e>
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a6c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d005      	beq.n	800a6e0 <WiFi_Conn_ND+0x924>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6da:	2b21      	cmp	r3, #33	; 0x21
 800a6dc:	f040 87b5 	bne.w	800b64a <WiFi_Conn_ND+0x188e>
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a6e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a6ea:	f000 bfae 	b.w	800b64a <WiFi_Conn_ND+0x188e>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f7fb ff20 	bl	8006534 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6fa:	2b04      	cmp	r3, #4
 800a6fc:	d004      	beq.n	800a708 <WiFi_Conn_ND+0x94c>
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a704:	2b02      	cmp	r3, #2
 800a706:	d112      	bne.n	800a72e <WiFi_Conn_ND+0x972>
				{
					Cambiar_CWMODE(b);
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f7fb ff29 	bl	8006560 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2264      	movs	r2, #100	; 0x64
 800a712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2200      	movs	r2, #0
 800a71a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a734:	2b0a      	cmp	r3, #10
 800a736:	d005      	beq.n	800a744 <WiFi_Conn_ND+0x988>
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a73e:	2b0d      	cmp	r3, #13
 800a740:	f040 8785 	bne.w	800b64e <WiFi_Conn_ND+0x1892>
				{
					ConectarWIFI(b);
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f7fb ff21 	bl	800658c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	22c8      	movs	r2, #200	; 0xc8
 800a74e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a762:	f000 bf74 	b.w	800b64e <WiFi_Conn_ND+0x1892>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f7fb fee4 	bl	8006534 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a772:	2b04      	cmp	r3, #4
 800a774:	d112      	bne.n	800a79c <WiFi_Conn_ND+0x9e0>
					{
						Cambiar_CWMODE(b);
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f7fb fef2 	bl	8006560 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2264      	movs	r2, #100	; 0x64
 800a780:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2200      	movs	r2, #0
 800a790:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7a2:	2b0a      	cmp	r3, #10
 800a7a4:	d004      	beq.n	800a7b0 <WiFi_Conn_ND+0x9f4>
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7ac:	2b0d      	cmp	r3, #13
 800a7ae:	d10e      	bne.n	800a7ce <WiFi_Conn_ND+0xa12>
					{
						ConectarWIFI(b);
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f7fb feeb 	bl	800658c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	22c8      	movs	r2, #200	; 0xc8
 800a7ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d111      	bne.n	800a7fc <WiFi_Conn_ND+0xa40>
					{
						ConectarTCP(b);
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f7fb ff2f 	bl	800663c <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a7e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						//b->_estado_conexion=TCP_SRVR_EN_CURSO;
						//b->_estado=0;
						//b->_n_orig=0; //Borro el vector RX
					}
			}
			break;
 800a7f8:	f000 bf46 	b.w	800b688 <WiFi_Conn_ND+0x18cc>
						ConectarWIFI(b);//
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f7fb fec5 	bl	800658c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	22c8      	movs	r2, #200	; 0xc8
 800a806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2200      	movs	r2, #0
 800a816:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a81a:	f000 bf35 	b.w	800b688 <WiFi_Conn_ND+0x18cc>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a824:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a828:	d04a      	beq.n	800a8c0 <WiFi_Conn_ND+0xb04>
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a830:	2b02      	cmp	r3, #2
 800a832:	d045      	beq.n	800a8c0 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_ok)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d040      	beq.n	800a8c0 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_wifi_disconnect)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a844:	2b0a      	cmp	r3, #10
 800a846:	d03b      	beq.n	800a8c0 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a84e:	2b0e      	cmp	r3, #14
 800a850:	d036      	beq.n	800a8c0 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_conectado)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a858:	2b0f      	cmp	r3, #15
 800a85a:	d031      	beq.n	800a8c0 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a862:	2b10      	cmp	r3, #16
 800a864:	d02c      	beq.n	800a8c0 <WiFi_Conn_ND+0xb04>
				{
					ConectarTCP(b);
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f7fb fee8 	bl	800663c <ConectarTCP>
						if(b->_enviaruart==1)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a872:	2b01      	cmp	r3, #1
 800a874:	d124      	bne.n	800a8c0 <WiFi_Conn_ND+0xb04>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f7fc f808 	bl	800688c <AT_ESP8266_ND>
 800a87c:	4602      	mov	r2, r0
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a892:	2b01      	cmp	r3, #1
 800a894:	d109      	bne.n	800a8aa <WiFi_Conn_ND+0xaee>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	4610      	mov	r0, r2
 800a8a6:	f7f6 fded 	bl	8001484 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a8b6:	b29a      	uxth	r2, r3
 800a8b8:	2364      	movs	r3, #100	; 0x64
 800a8ba:	68b8      	ldr	r0, [r7, #8]
 800a8bc:	f7fa fdac 	bl	8005418 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d009      	beq.n	800a8de <WiFi_Conn_ND+0xb22>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8d0:	2b0e      	cmp	r3, #14
 800a8d2:	d004      	beq.n	800a8de <WiFi_Conn_ND+0xb22>
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8da:	2b0f      	cmp	r3, #15
 800a8dc:	d106      	bne.n	800a8ec <WiFi_Conn_ND+0xb30>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f240 2261 	movw	r2, #609	; 0x261
 800a8e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800a8e8:	f000 beb3 	b.w	800b652 <WiFi_Conn_ND+0x1896>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d005      	beq.n	800a902 <WiFi_Conn_ND+0xb46>
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8fc:	2b10      	cmp	r3, #16
 800a8fe:	f040 86a8 	bne.w	800b652 <WiFi_Conn_ND+0x1896>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f240 225d 	movw	r2, #605	; 0x25d
 800a908:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800a90c:	f000 bea1 	b.w	800b652 <WiFi_Conn_ND+0x1896>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800a910:	68f8      	ldr	r0, [r7, #12]
 800a912:	f7fb fe0f 	bl	8006534 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a91c:	2b04      	cmp	r3, #4
 800a91e:	d112      	bne.n	800a946 <WiFi_Conn_ND+0xb8a>
				{
					Cambiar_CWMODE(b);
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f7fb fe1d 	bl	8006560 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2264      	movs	r2, #100	; 0x64
 800a92a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2200      	movs	r2, #0
 800a932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2200      	movs	r2, #0
 800a93a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a94c:	2b0a      	cmp	r3, #10
 800a94e:	d004      	beq.n	800a95a <WiFi_Conn_ND+0xb9e>
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a956:	2b0d      	cmp	r3, #13
 800a958:	d10e      	bne.n	800a978 <WiFi_Conn_ND+0xbbc>
				{
					ConectarWIFI(b);
 800a95a:	68f8      	ldr	r0, [r7, #12]
 800a95c:	f7fb fe16 	bl	800658c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	22c8      	movs	r2, #200	; 0xc8
 800a964:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d00a      	beq.n	800a998 <WiFi_Conn_ND+0xbdc>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a988:	2b10      	cmp	r3, #16
 800a98a:	d005      	beq.n	800a998 <WiFi_Conn_ND+0xbdc>
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a992:	2b0e      	cmp	r3, #14
 800a994:	f040 865f 	bne.w	800b656 <WiFi_Conn_ND+0x189a>
				{
					ConectarTCP(b);
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f7fb fe4f 	bl	800663c <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a9a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a9b8:	f000 be4d 	b.w	800b656 <WiFi_Conn_ND+0x189a>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f7fb fdb9 	bl	8006534 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c8:	2b04      	cmp	r3, #4
 800a9ca:	d112      	bne.n	800a9f2 <WiFi_Conn_ND+0xc36>
					{
						Cambiar_CWMODE(b);
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f7fb fdc7 	bl	8006560 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2264      	movs	r2, #100	; 0x64
 800a9d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9f8:	2b0a      	cmp	r3, #10
 800a9fa:	d004      	beq.n	800aa06 <WiFi_Conn_ND+0xc4a>
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa02:	2b0d      	cmp	r3, #13
 800aa04:	d10e      	bne.n	800aa24 <WiFi_Conn_ND+0xc68>
					{
						ConectarWIFI(b);
 800aa06:	68f8      	ldr	r0, [r7, #12]
 800aa08:	f7fb fdc0 	bl	800658c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	22c8      	movs	r2, #200	; 0xc8
 800aa10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d004      	beq.n	800aa38 <WiFi_Conn_ND+0xc7c>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa34:	2b10      	cmp	r3, #16
 800aa36:	d10f      	bne.n	800aa58 <WiFi_Conn_ND+0xc9c>
					{
						ConectarTCP(b);
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f7fb fdff 	bl	800663c <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aa44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa5e:	2b0e      	cmp	r3, #14
 800aa60:	d005      	beq.n	800aa6e <WiFi_Conn_ND+0xcb2>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa68:	2b0f      	cmp	r3, #15
 800aa6a:	f040 85f6 	bne.w	800b65a <WiFi_Conn_ND+0x189e>
					{
						if(b->_automatizacion >= WF_SEND )
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	f240 85f0 	bls.w	800b65a <WiFi_Conn_ND+0x189e>
						{
							EnviarDatos(b);
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f7fb fe20 	bl	80066c0 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800aa86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800aa9a:	f000 bdde 	b.w	800b65a <WiFi_Conn_ND+0x189e>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800aaa8:	d054      	beq.n	800ab54 <WiFi_Conn_ND+0xd98>
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d04f      	beq.n	800ab54 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_wifi_disconnect)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaba:	2b0a      	cmp	r3, #10
 800aabc:	d04a      	beq.n	800ab54 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_desconectado)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aac4:	2b10      	cmp	r3, #16
 800aac6:	d045      	beq.n	800ab54 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_snd_err)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aace:	2b11      	cmp	r3, #17
 800aad0:	d040      	beq.n	800ab54 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_ok_to_send)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aad8:	2b14      	cmp	r3, #20
 800aada:	d03b      	beq.n	800ab54 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aae2:	2b12      	cmp	r3, #18
 800aae4:	d036      	beq.n	800ab54 <WiFi_Conn_ND+0xd98>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d907      	bls.n	800ab00 <WiFi_Conn_ND+0xd44>
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d002      	beq.n	800ab00 <WiFi_Conn_ND+0xd44>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800aafa:	68f8      	ldr	r0, [r7, #12]
 800aafc:	f7fb fde0 	bl	80066c0 <EnviarDatos>
							b->_data2SND[9]=0x00;
							b->_data2SND[10]=0x00;
							b->_data2SND[11]=0x0A;
							b->_n_D2SND=12;*/
					}
						if(b->_enviaruart==1)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d124      	bne.n	800ab54 <WiFi_Conn_ND+0xd98>
							{
								b->_estado=AT_ESP8266_ND(b);
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	f7fb febe 	bl	800688c <AT_ESP8266_ND>
 800ab10:	4602      	mov	r2, r0
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d109      	bne.n	800ab3e <WiFi_Conn_ND+0xd82>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ab36:	4619      	mov	r1, r3
 800ab38:	4610      	mov	r0, r2
 800ab3a:	f7f6 fca3 	bl	8001484 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ab4a:	b29a      	uxth	r2, r3
 800ab4c:	2364      	movs	r3, #100	; 0x64
 800ab4e:	68b8      	ldr	r0, [r7, #8]
 800ab50:	f7fa fc62 	bl	8005418 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab5a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800ab5e:	d13b      	bne.n	800abd8 <WiFi_Conn_ND+0xe1c>
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d136      	bne.n	800abd8 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_error)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab70:	2b02      	cmp	r3, #2
 800ab72:	d031      	beq.n	800abd8 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_wifi_disconnect)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab7a:	2b0a      	cmp	r3, #10
 800ab7c:	d02c      	beq.n	800abd8 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_desconectado)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab84:	2b10      	cmp	r3, #16
 800ab86:	d027      	beq.n	800abd8 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_snd_err)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab8e:	2b11      	cmp	r3, #17
 800ab90:	d022      	beq.n	800abd8 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_enviado_error))
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab98:	2b12      	cmp	r3, #18
 800ab9a:	d01d      	beq.n	800abd8 <WiFi_Conn_ND+0xe1c>
							{
								b->_enviaruart=0;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d109      	bne.n	800abc2 <WiFi_Conn_ND+0xe06>
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800abba:	4619      	mov	r1, r3
 800abbc:	4610      	mov	r0, r2
 800abbe:	f7f6 fc61 	bl	8001484 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800abce:	b29a      	uxth	r2, r3
 800abd0:	2364      	movs	r3, #100	; 0x64
 800abd2:	68b8      	ldr	r0, [r7, #8]
 800abd4:	f7fa fc20 	bl	8005418 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abde:	2b13      	cmp	r3, #19
 800abe0:	d104      	bne.n	800abec <WiFi_Conn_ND+0xe30>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f240 22c5 	movw	r2, #709	; 0x2c5
 800abe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d014      	beq.n	800ac20 <WiFi_Conn_ND+0xe64>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abfc:	2b0a      	cmp	r3, #10
 800abfe:	d00f      	beq.n	800ac20 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_desconectado)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac06:	2b10      	cmp	r3, #16
 800ac08:	d00a      	beq.n	800ac20 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_snd_err)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac10:	2b11      	cmp	r3, #17
 800ac12:	d005      	beq.n	800ac20 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_enviado_error))
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac1a:	2b12      	cmp	r3, #18
 800ac1c:	f040 851f 	bne.w	800b65e <WiFi_Conn_ND+0x18a2>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f240 22c1 	movw	r2, #705	; 0x2c1
 800ac26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800ac2a:	f000 bd18 	b.w	800b65e <WiFi_Conn_ND+0x18a2>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f7fb fc80 	bl	8006534 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac3a:	2b04      	cmp	r3, #4
 800ac3c:	d112      	bne.n	800ac64 <WiFi_Conn_ND+0xea8>
				{
					Cambiar_CWMODE(b);
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	f7fb fc8e 	bl	8006560 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2264      	movs	r2, #100	; 0x64
 800ac48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac6a:	2b0a      	cmp	r3, #10
 800ac6c:	d004      	beq.n	800ac78 <WiFi_Conn_ND+0xebc>
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac74:	2b0d      	cmp	r3, #13
 800ac76:	d10e      	bne.n	800ac96 <WiFi_Conn_ND+0xeda>
				{
					ConectarWIFI(b);
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f7fb fc87 	bl	800658c <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	22c8      	movs	r2, #200	; 0xc8
 800ac82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac9c:	2b0c      	cmp	r3, #12
 800ac9e:	d10f      	bne.n	800acc0 <WiFi_Conn_ND+0xf04>
				{
					ConectarTCP(b);
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f7fb fccb 	bl	800663c <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800acac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2200      	movs	r2, #0
 800acb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2200      	movs	r2, #0
 800acbc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	d00f      	beq.n	800acea <WiFi_Conn_ND+0xf2e>
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acd0:	2b10      	cmp	r3, #16
 800acd2:	d00a      	beq.n	800acea <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_snd_err)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acda:	2b11      	cmp	r3, #17
 800acdc:	d005      	beq.n	800acea <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ace4:	2b12      	cmp	r3, #18
 800ace6:	f040 84bc 	bne.w	800b662 <WiFi_Conn_ND+0x18a6>
				{
					ConectarTCP(b);
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f7fb fca6 	bl	800663c <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800acf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800ad0a:	f000 bcaa 	b.w	800b662 <WiFi_Conn_ND+0x18a6>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f7fb fc10 	bl	8006534 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad1a:	2b04      	cmp	r3, #4
 800ad1c:	d112      	bne.n	800ad44 <WiFi_Conn_ND+0xf88>
					{
						Cambiar_CWMODE(b);
 800ad1e:	68f8      	ldr	r0, [r7, #12]
 800ad20:	f7fb fc1e 	bl	8006560 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2264      	movs	r2, #100	; 0x64
 800ad28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad4a:	2b0a      	cmp	r3, #10
 800ad4c:	d004      	beq.n	800ad58 <WiFi_Conn_ND+0xf9c>
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad54:	2b0d      	cmp	r3, #13
 800ad56:	d10e      	bne.n	800ad76 <WiFi_Conn_ND+0xfba>
					{
						ConectarWIFI(b);
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f7fb fc17 	bl	800658c <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	22c8      	movs	r2, #200	; 0xc8
 800ad62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad7c:	2b02      	cmp	r3, #2
 800ad7e:	d00e      	beq.n	800ad9e <WiFi_Conn_ND+0xfe2>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad86:	2b0b      	cmp	r3, #11
 800ad88:	d009      	beq.n	800ad9e <WiFi_Conn_ND+0xfe2>
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad90:	2b0c      	cmp	r3, #12
 800ad92:	d004      	beq.n	800ad9e <WiFi_Conn_ND+0xfe2>
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad9a:	2b10      	cmp	r3, #16
 800ad9c:	d10f      	bne.n	800adbe <WiFi_Conn_ND+0x1002>
					{
						ConectarTCP(b);
 800ad9e:	68f8      	ldr	r0, [r7, #12]
 800ada0:	f7fb fc4c 	bl	800663c <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800adaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2200      	movs	r2, #0
 800adba:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800adbe:	20c8      	movs	r0, #200	; 0xc8
 800adc0:	f7f7 fe76 	bl	8002ab0 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d916      	bls.n	800adfc <WiFi_Conn_ND+0x1040>
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800add4:	2b00      	cmp	r3, #0
 800add6:	d011      	beq.n	800adfc <WiFi_Conn_ND+0x1040>
					{
							EnviarDatos(b);
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f7fb fc71 	bl	80066c0 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800ade4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2200      	movs	r2, #0
 800adec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2200      	movs	r2, #0
 800adf4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800adf8:	f000 bc46 	b.w	800b688 <WiFi_Conn_ND+0x18cc>
							b->_estado_conexion=TCP_CONN_OK;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f240 2261 	movw	r2, #609	; 0x261
 800ae02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2200      	movs	r2, #0
 800ae12:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800ae16:	f000 bc37 	b.w	800b688 <WiFi_Conn_ND+0x18cc>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae20:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800ae24:	d045      	beq.n	800aeb2 <WiFi_Conn_ND+0x10f6>
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	d040      	beq.n	800aeb2 <WiFi_Conn_ND+0x10f6>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae36:	2b0a      	cmp	r3, #10
 800ae38:	d03b      	beq.n	800aeb2 <WiFi_Conn_ND+0x10f6>
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae40:	2b15      	cmp	r3, #21
 800ae42:	d036      	beq.n	800aeb2 <WiFi_Conn_ND+0x10f6>
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae4a:	2b16      	cmp	r3, #22
 800ae4c:	d031      	beq.n	800aeb2 <WiFi_Conn_ND+0x10f6>
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae54:	2b17      	cmp	r3, #23
 800ae56:	d02c      	beq.n	800aeb2 <WiFi_Conn_ND+0x10f6>
							{
								CrearServidorTCP(b);
 800ae58:	68f8      	ldr	r0, [r7, #12]
 800ae5a:	f7fb fc05 	bl	8006668 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d124      	bne.n	800aeb2 <WiFi_Conn_ND+0x10f6>
										{
											b->_estado=AT_ESP8266_ND(b);
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f7fb fd0f 	bl	800688c <AT_ESP8266_ND>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d109      	bne.n	800ae9c <WiFi_Conn_ND+0x10e0>
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ae94:	4619      	mov	r1, r3
 800ae96:	4610      	mov	r0, r2
 800ae98:	f7f6 faf4 	bl	8001484 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	2364      	movs	r3, #100	; 0x64
 800aeac:	68b8      	ldr	r0, [r7, #8]
 800aeae:	f7fa fab3 	bl	8005418 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb8:	2b15      	cmp	r3, #21
 800aeba:	d004      	beq.n	800aec6 <WiFi_Conn_ND+0x110a>
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aec2:	2b17      	cmp	r3, #23
 800aec4:	d104      	bne.n	800aed0 <WiFi_Conn_ND+0x1114>
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f240 3229 	movw	r2, #809	; 0x329
 800aecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aed6:	2b16      	cmp	r3, #22
 800aed8:	f040 83c5 	bne.w	800b666 <WiFi_Conn_ND+0x18aa>
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f240 3225 	movw	r2, #805	; 0x325
 800aee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800aee6:	e3be      	b.n	800b666 <WiFi_Conn_ND+0x18aa>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f7fb fb23 	bl	8006534 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aef4:	2b04      	cmp	r3, #4
 800aef6:	d112      	bne.n	800af1e <WiFi_Conn_ND+0x1162>
							{
								Cambiar_CWMODE(b);
 800aef8:	68f8      	ldr	r0, [r7, #12]
 800aefa:	f7fb fb31 	bl	8006560 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2264      	movs	r2, #100	; 0x64
 800af02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2200      	movs	r2, #0
 800af0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2200      	movs	r2, #0
 800af12:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af24:	2b0a      	cmp	r3, #10
 800af26:	d004      	beq.n	800af32 <WiFi_Conn_ND+0x1176>
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af2e:	2b0d      	cmp	r3, #13
 800af30:	d10e      	bne.n	800af50 <WiFi_Conn_ND+0x1194>
							{
								ConectarWIFI(b);
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	f7fb fb2a 	bl	800658c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	22c8      	movs	r2, #200	; 0xc8
 800af3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af56:	2b02      	cmp	r3, #2
 800af58:	d005      	beq.n	800af66 <WiFi_Conn_ND+0x11aa>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af60:	2b10      	cmp	r3, #16
 800af62:	f040 8382 	bne.w	800b66a <WiFi_Conn_ND+0x18ae>
							{
								ConectarTCP(b);
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f7fb fb68 	bl	800663c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800af72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2200      	movs	r2, #0
 800af82:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800af86:	e370      	b.n	800b66a <WiFi_Conn_ND+0x18ae>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800af88:	68f8      	ldr	r0, [r7, #12]
 800af8a:	f7fb fad3 	bl	8006534 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af94:	2b04      	cmp	r3, #4
 800af96:	d112      	bne.n	800afbe <WiFi_Conn_ND+0x1202>
							{
								Cambiar_CWMODE(b);
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f7fb fae1 	bl	8006560 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2264      	movs	r2, #100	; 0x64
 800afa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afc4:	2b0a      	cmp	r3, #10
 800afc6:	d004      	beq.n	800afd2 <WiFi_Conn_ND+0x1216>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afce:	2b0d      	cmp	r3, #13
 800afd0:	d10e      	bne.n	800aff0 <WiFi_Conn_ND+0x1234>
							{
								ConectarWIFI(b);
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f7fb fada 	bl	800658c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	22c8      	movs	r2, #200	; 0xc8
 800afdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aff6:	2b02      	cmp	r3, #2
 800aff8:	d005      	beq.n	800b006 <WiFi_Conn_ND+0x124a>
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b000:	2b10      	cmp	r3, #16
 800b002:	f040 8334 	bne.w	800b66e <WiFi_Conn_ND+0x18b2>
							{
								ConectarTCP(b);
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f7fb fb18 	bl	800663c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2200      	movs	r2, #0
 800b01a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2200      	movs	r2, #0
 800b022:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b026:	e322      	b.n	800b66e <WiFi_Conn_ND+0x18b2>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f7fb fa83 	bl	8006534 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b034:	2b04      	cmp	r3, #4
 800b036:	d112      	bne.n	800b05e <WiFi_Conn_ND+0x12a2>
							{
								Cambiar_CWMODE(b);
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f7fb fa91 	bl	8006560 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2264      	movs	r2, #100	; 0x64
 800b042:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2200      	movs	r2, #0
 800b04a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2200      	movs	r2, #0
 800b052:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2200      	movs	r2, #0
 800b05a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b064:	2b0a      	cmp	r3, #10
 800b066:	d004      	beq.n	800b072 <WiFi_Conn_ND+0x12b6>
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b06e:	2b0d      	cmp	r3, #13
 800b070:	d10e      	bne.n	800b090 <WiFi_Conn_ND+0x12d4>
							{
								ConectarWIFI(b);
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f7fb fa8a 	bl	800658c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	22c8      	movs	r2, #200	; 0xc8
 800b07c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b096:	2b02      	cmp	r3, #2
 800b098:	d005      	beq.n	800b0a6 <WiFi_Conn_ND+0x12ea>
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0a0:	2b10      	cmp	r3, #16
 800b0a2:	f040 82e6 	bne.w	800b672 <WiFi_Conn_ND+0x18b6>
							{
								ConectarTCP(b);
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f7fb fac8 	bl	800663c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b0b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b0c6:	e2d4      	b.n	800b672 <WiFi_Conn_ND+0x18b6>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b0c8:	68f8      	ldr	r0, [r7, #12]
 800b0ca:	f7fb fa33 	bl	8006534 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d4:	2b04      	cmp	r3, #4
 800b0d6:	d112      	bne.n	800b0fe <WiFi_Conn_ND+0x1342>
							{
								Cambiar_CWMODE(b);
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f7fb fa41 	bl	8006560 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2264      	movs	r2, #100	; 0x64
 800b0e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b104:	2b0a      	cmp	r3, #10
 800b106:	d004      	beq.n	800b112 <WiFi_Conn_ND+0x1356>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b10e:	2b0d      	cmp	r3, #13
 800b110:	d10e      	bne.n	800b130 <WiFi_Conn_ND+0x1374>
							{
								ConectarWIFI(b);
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	f7fb fa3a 	bl	800658c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	22c8      	movs	r2, #200	; 0xc8
 800b11c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2200      	movs	r2, #0
 800b124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2200      	movs	r2, #0
 800b12c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b136:	2b02      	cmp	r3, #2
 800b138:	d005      	beq.n	800b146 <WiFi_Conn_ND+0x138a>
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b140:	2b10      	cmp	r3, #16
 800b142:	f040 8298 	bne.w	800b676 <WiFi_Conn_ND+0x18ba>
							{
								ConectarTCP(b);
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f7fb fa78 	bl	800663c <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2200      	movs	r2, #0
 800b15a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2200      	movs	r2, #0
 800b162:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b166:	e286      	b.n	800b676 <WiFi_Conn_ND+0x18ba>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f7fb f9e3 	bl	8006534 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2201      	movs	r2, #1
 800b172:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b17c:	2b04      	cmp	r3, #4
 800b17e:	d112      	bne.n	800b1a6 <WiFi_Conn_ND+0x13ea>
								{
									Cambiar_CWMODE(b);
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	f7fb f9ed 	bl	8006560 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2264      	movs	r2, #100	; 0x64
 800b18a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2200      	movs	r2, #0
 800b192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2200      	movs	r2, #0
 800b19a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1ac:	2b0a      	cmp	r3, #10
 800b1ae:	d004      	beq.n	800b1ba <WiFi_Conn_ND+0x13fe>
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1b6:	2b0d      	cmp	r3, #13
 800b1b8:	d10e      	bne.n	800b1d8 <WiFi_Conn_ND+0x141c>
								{
									ConectarWIFI(b);
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	f7fb f9e6 	bl	800658c <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	22c8      	movs	r2, #200	; 0xc8
 800b1c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	d004      	beq.n	800b1ec <WiFi_Conn_ND+0x1430>
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1e8:	2b10      	cmp	r3, #16
 800b1ea:	d10f      	bne.n	800b20c <WiFi_Conn_ND+0x1450>
								{
									ConectarTCP(b);
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f7fb fa25 	bl	800663c <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b1f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2200      	movs	r2, #0
 800b208:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b212:	2b01      	cmp	r3, #1
 800b214:	f040 8231 	bne.w	800b67a <WiFi_Conn_ND+0x18be>
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f000 822b 	beq.w	800b67a <WiFi_Conn_ND+0x18be>
								{
									EnviarDatosSRVR(b);
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f7fb fa35 	bl	8006694 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2200      	movs	r2, #0
 800b238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2200      	movs	r2, #0
 800b240:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800b244:	e219      	b.n	800b67a <WiFi_Conn_ND+0x18be>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b24c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b250:	d063      	beq.n	800b31a <WiFi_Conn_ND+0x155e>
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d05e      	beq.n	800b31a <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_disconnect)&&
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b262:	2b0a      	cmp	r3, #10
 800b264:	d059      	beq.n	800b31a <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_connected)&&
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800b26c:	2b0b      	cmp	r3, #11
 800b26e:	d054      	beq.n	800b31a <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_gotip)&&
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800b276:	2b0c      	cmp	r3, #12
 800b278:	d04f      	beq.n	800b31a <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_desconectado)&&
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800b280:	2b10      	cmp	r3, #16
 800b282:	d04a      	beq.n	800b31a <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_snd_err)&&
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800b28a:	2b11      	cmp	r3, #17
 800b28c:	d045      	beq.n	800b31a <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800b294:	2b12      	cmp	r3, #18
 800b296:	d040      	beq.n	800b31a <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800b29e:	2b13      	cmp	r3, #19
 800b2a0:	d03b      	beq.n	800b31a <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b2a8:	2b16      	cmp	r3, #22
 800b2aa:	d036      	beq.n	800b31a <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2b2:	2b19      	cmp	r3, #25
 800b2b4:	d031      	beq.n	800b31a <WiFi_Conn_ND+0x155e>
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d02c      	beq.n	800b31a <WiFi_Conn_ND+0x155e>
								{
								EnviarDatosSRVR(b);
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f7fb f9e7 	bl	8006694 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d124      	bne.n	800b31a <WiFi_Conn_ND+0x155e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b2d0:	68f8      	ldr	r0, [r7, #12]
 800b2d2:	f7fb fadb 	bl	800688c <AT_ESP8266_ND>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	d109      	bne.n	800b304 <WiFi_Conn_ND+0x1548>
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	4610      	mov	r0, r2
 800b300:	f7f6 f8c0 	bl	8001484 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b310:	b29a      	uxth	r2, r3
 800b312:	2364      	movs	r3, #100	; 0x64
 800b314:	68b8      	ldr	r0, [r7, #8]
 800b316:	f7fa f87f 	bl	8005418 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b320:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b324:	d154      	bne.n	800b3d0 <WiFi_Conn_ND+0x1614>
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d14f      	bne.n	800b3d0 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_error)&&
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b336:	2b02      	cmp	r3, #2
 800b338:	d04a      	beq.n	800b3d0 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_disconnect)&&
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800b340:	2b0a      	cmp	r3, #10
 800b342:	d045      	beq.n	800b3d0 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_connected)&&
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b34a:	2b0b      	cmp	r3, #11
 800b34c:	d040      	beq.n	800b3d0 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_gotip)&&
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b354:	2b0c      	cmp	r3, #12
 800b356:	d03b      	beq.n	800b3d0 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_desconectado)&&
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b35e:	2b10      	cmp	r3, #16
 800b360:	d036      	beq.n	800b3d0 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_snd_err)&&
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b368:	2b11      	cmp	r3, #17
 800b36a:	d031      	beq.n	800b3d0 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b372:	2b12      	cmp	r3, #18
 800b374:	d02c      	beq.n	800b3d0 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b37c:	2b13      	cmp	r3, #19
 800b37e:	d027      	beq.n	800b3d0 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b386:	2b16      	cmp	r3, #22
 800b388:	d022      	beq.n	800b3d0 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b390:	2b19      	cmp	r3, #25
 800b392:	d01d      	beq.n	800b3d0 <WiFi_Conn_ND+0x1614>
										{
											b->_enviaruart=0;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2200      	movs	r2, #0
 800b398:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d109      	bne.n	800b3ba <WiFi_Conn_ND+0x15fe>
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	4610      	mov	r0, r2
 800b3b6:	f7f6 f865 	bl	8001484 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	2364      	movs	r3, #100	; 0x64
 800b3ca:	68b8      	ldr	r0, [r7, #8]
 800b3cc:	f7fa f824 	bl	8005418 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3d6:	2b13      	cmp	r3, #19
 800b3d8:	d104      	bne.n	800b3e4 <WiFi_Conn_ND+0x1628>
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f240 328d 	movw	r2, #909	; 0x38d
 800b3e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	d02d      	beq.n	800b44a <WiFi_Conn_ND+0x168e>
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3f4:	2b04      	cmp	r3, #4
 800b3f6:	d028      	beq.n	800b44a <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b3fe:	2b0a      	cmp	r3, #10
 800b400:	d023      	beq.n	800b44a <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b408:	2b0b      	cmp	r3, #11
 800b40a:	d01e      	beq.n	800b44a <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b412:	2b0c      	cmp	r3, #12
 800b414:	d019      	beq.n	800b44a <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b41c:	2b10      	cmp	r3, #16
 800b41e:	d014      	beq.n	800b44a <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b426:	2b11      	cmp	r3, #17
 800b428:	d00f      	beq.n	800b44a <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b430:	2b12      	cmp	r3, #18
 800b432:	d00a      	beq.n	800b44a <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b43a:	2b16      	cmp	r3, #22
 800b43c:	d005      	beq.n	800b44a <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b444:	2b19      	cmp	r3, #25
 800b446:	f040 811a 	bne.w	800b67e <WiFi_Conn_ND+0x18c2>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f240 3289 	movw	r2, #905	; 0x389
 800b450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b454:	e113      	b.n	800b67e <WiFi_Conn_ND+0x18c2>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f7fb f86c 	bl	8006534 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b462:	2b04      	cmp	r3, #4
 800b464:	d009      	beq.n	800b47a <WiFi_Conn_ND+0x16be>
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b46c:	2b0b      	cmp	r3, #11
 800b46e:	d004      	beq.n	800b47a <WiFi_Conn_ND+0x16be>
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b476:	2b0c      	cmp	r3, #12
 800b478:	d112      	bne.n	800b4a0 <WiFi_Conn_ND+0x16e4>
							{
								Cambiar_CWMODE(b);
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	f7fb f870 	bl	8006560 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2264      	movs	r2, #100	; 0x64
 800b484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2200      	movs	r2, #0
 800b49c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4a6:	2b0a      	cmp	r3, #10
 800b4a8:	d004      	beq.n	800b4b4 <WiFi_Conn_ND+0x16f8>
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4b0:	2b0d      	cmp	r3, #13
 800b4b2:	d10e      	bne.n	800b4d2 <WiFi_Conn_ND+0x1716>
							{
								ConectarWIFI(b);
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f7fb f869 	bl	800658c <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	22c8      	movs	r2, #200	; 0xc8
 800b4be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4d8:	2b16      	cmp	r3, #22
 800b4da:	d10c      	bne.n	800b4f6 <WiFi_Conn_ND+0x173a>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f240 3225 	movw	r2, #805	; 0x325
 800b4e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4fc:	2b18      	cmp	r3, #24
 800b4fe:	d10c      	bne.n	800b51a <WiFi_Conn_ND+0x175e>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f240 3229 	movw	r2, #809	; 0x329
 800b506:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2200      	movs	r2, #0
 800b516:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b520:	2b19      	cmp	r3, #25
 800b522:	d008      	beq.n	800b536 <WiFi_Conn_ND+0x177a>
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b52a:	2b11      	cmp	r3, #17
 800b52c:	d003      	beq.n	800b536 <WiFi_Conn_ND+0x177a>
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2212      	movs	r2, #18
 800b532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	f040 80a0 	bne.w	800b682 <WiFi_Conn_ND+0x18c6>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b548:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2200      	movs	r2, #0
 800b550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2200      	movs	r2, #0
 800b558:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800b55c:	e091      	b.n	800b682 <WiFi_Conn_ND+0x18c6>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f7fa ffe8 	bl	8006534 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b56a:	2b04      	cmp	r3, #4
 800b56c:	d009      	beq.n	800b582 <WiFi_Conn_ND+0x17c6>
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b574:	2b0b      	cmp	r3, #11
 800b576:	d004      	beq.n	800b582 <WiFi_Conn_ND+0x17c6>
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b57e:	2b0c      	cmp	r3, #12
 800b580:	d112      	bne.n	800b5a8 <WiFi_Conn_ND+0x17ec>
								{
									Cambiar_CWMODE(b);
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f7fa ffec 	bl	8006560 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2264      	movs	r2, #100	; 0x64
 800b58c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2200      	movs	r2, #0
 800b594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ae:	2b0a      	cmp	r3, #10
 800b5b0:	d004      	beq.n	800b5bc <WiFi_Conn_ND+0x1800>
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5b8:	2b0d      	cmp	r3, #13
 800b5ba:	d10e      	bne.n	800b5da <WiFi_Conn_ND+0x181e>
								{
									ConectarWIFI(b);
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f7fa ffe5 	bl	800658c <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	22c8      	movs	r2, #200	; 0xc8
 800b5c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d004      	beq.n	800b5ee <WiFi_Conn_ND+0x1832>
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d14b      	bne.n	800b686 <WiFi_Conn_ND+0x18ca>
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d046      	beq.n	800b686 <WiFi_Conn_ND+0x18ca>
								{
									EnviarDatosSRVR(b);
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f7fb f84b 	bl	8006694 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2200      	movs	r2, #0
 800b614:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b628:	e02d      	b.n	800b686 <WiFi_Conn_ND+0x18ca>
			break;
 800b62a:	bf00      	nop
 800b62c:	e02c      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
			break;
 800b62e:	bf00      	nop
 800b630:	e02a      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
			break;
 800b632:	bf00      	nop
 800b634:	e028      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
			break;
 800b636:	bf00      	nop
 800b638:	e026      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
			break;
 800b63a:	bf00      	nop
 800b63c:	e024      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
			break;
 800b63e:	bf00      	nop
 800b640:	e022      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
			break;
 800b642:	bf00      	nop
 800b644:	e020      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
			break;
 800b646:	bf00      	nop
 800b648:	e01e      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
			break;
 800b64a:	bf00      	nop
 800b64c:	e01c      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
			break;
 800b64e:	bf00      	nop
 800b650:	e01a      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
			break;
 800b652:	bf00      	nop
 800b654:	e018      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
			break;
 800b656:	bf00      	nop
 800b658:	e016      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
			break;
 800b65a:	bf00      	nop
 800b65c:	e014      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
			break;
 800b65e:	bf00      	nop
 800b660:	e012      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
			break;
 800b662:	bf00      	nop
 800b664:	e010      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
						break;
 800b666:	bf00      	nop
 800b668:	e00e      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
						break;
 800b66a:	bf00      	nop
 800b66c:	e00c      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
						break;
 800b66e:	bf00      	nop
 800b670:	e00a      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
						break;
 800b672:	bf00      	nop
 800b674:	e008      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
						break;
 800b676:	bf00      	nop
 800b678:	e006      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
						break;
 800b67a:	bf00      	nop
 800b67c:	e004      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
						break;
 800b67e:	bf00      	nop
 800b680:	e002      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
						break;
 800b682:	bf00      	nop
 800b684:	e000      	b.n	800b688 <WiFi_Conn_ND+0x18cc>
						break;
 800b686:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b68e:	4618      	mov	r0, r3
 800b690:	3710      	adds	r7, #16
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop

0800b698 <httpPOST2>:
			return 0;
		}
}

httpPOST2(char * endpoint, char* server_ip, char * port,  uint16_t * vect_data, int cdad, uint16_t devId, char  * post, char * body, int max_char)
{
 800b698:	b5b0      	push	{r4, r5, r7, lr}
 800b69a:	b08c      	sub	sp, #48	; 0x30
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
 800b6a4:	603b      	str	r3, [r7, #0]
	post[0]='\0';
 800b6a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b6ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b6b2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b6b4:	f7f4 fd9e 	bl	80001f4 <strlen>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6be:	4413      	add	r3, r2
 800b6c0:	4a9b      	ldr	r2, [pc, #620]	; (800b930 <httpPOST2+0x298>)
 800b6c2:	6810      	ldr	r0, [r2, #0]
 800b6c4:	6018      	str	r0, [r3, #0]
 800b6c6:	8892      	ldrh	r2, [r2, #4]
 800b6c8:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f7f4 fd92 	bl	80001f4 <strlen>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	68f9      	ldr	r1, [r7, #12]
 800b6d6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b6d8:	f003 fde9 	bl	800f2ae <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b6dc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b6de:	f7f4 fd89 	bl	80001f4 <strlen>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6e8:	4413      	add	r3, r2
 800b6ea:	4992      	ldr	r1, [pc, #584]	; (800b934 <httpPOST2+0x29c>)
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	cb03      	ldmia	r3!, {r0, r1}
 800b6f2:	6010      	str	r0, [r2, #0]
 800b6f4:	6051      	str	r1, [r2, #4]
 800b6f6:	8819      	ldrh	r1, [r3, #0]
 800b6f8:	789b      	ldrb	r3, [r3, #2]
 800b6fa:	8111      	strh	r1, [r2, #8]
 800b6fc:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b6fe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b700:	f7f4 fd78 	bl	80001f4 <strlen>
 800b704:	4603      	mov	r3, r0
 800b706:	461a      	mov	r2, r3
 800b708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b70a:	4413      	add	r3, r2
 800b70c:	4a8a      	ldr	r2, [pc, #552]	; (800b938 <httpPOST2+0x2a0>)
 800b70e:	8811      	ldrh	r1, [r2, #0]
 800b710:	7892      	ldrb	r2, [r2, #2]
 800b712:	8019      	strh	r1, [r3, #0]
 800b714:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b716:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b718:	f7f4 fd6c 	bl	80001f4 <strlen>
 800b71c:	4603      	mov	r3, r0
 800b71e:	461a      	mov	r2, r3
 800b720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b722:	4413      	add	r3, r2
 800b724:	4a85      	ldr	r2, [pc, #532]	; (800b93c <httpPOST2+0x2a4>)
 800b726:	6810      	ldr	r0, [r2, #0]
 800b728:	6018      	str	r0, [r3, #0]
 800b72a:	8891      	ldrh	r1, [r2, #4]
 800b72c:	7992      	ldrb	r2, [r2, #6]
 800b72e:	8099      	strh	r1, [r3, #4]
 800b730:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b732:	68b8      	ldr	r0, [r7, #8]
 800b734:	f7f4 fd5e 	bl	80001f4 <strlen>
 800b738:	4603      	mov	r3, r0
 800b73a:	461a      	mov	r2, r3
 800b73c:	68b9      	ldr	r1, [r7, #8]
 800b73e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b740:	f003 fdb5 	bl	800f2ae <strncat>
	strncat(post,":",1);
 800b744:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b746:	f7f4 fd55 	bl	80001f4 <strlen>
 800b74a:	4603      	mov	r3, r0
 800b74c:	461a      	mov	r2, r3
 800b74e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b750:	4413      	add	r3, r2
 800b752:	497b      	ldr	r1, [pc, #492]	; (800b940 <httpPOST2+0x2a8>)
 800b754:	461a      	mov	r2, r3
 800b756:	460b      	mov	r3, r1
 800b758:	881b      	ldrh	r3, [r3, #0]
 800b75a:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f7f4 fd49 	bl	80001f4 <strlen>
 800b762:	4603      	mov	r3, r0
 800b764:	461a      	mov	r2, r3
 800b766:	6879      	ldr	r1, [r7, #4]
 800b768:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b76a:	f003 fda0 	bl	800f2ae <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b76e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b770:	f7f4 fd40 	bl	80001f4 <strlen>
 800b774:	4603      	mov	r3, r0
 800b776:	461a      	mov	r2, r3
 800b778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b77a:	4413      	add	r3, r2
 800b77c:	4a6e      	ldr	r2, [pc, #440]	; (800b938 <httpPOST2+0x2a0>)
 800b77e:	8811      	ldrh	r1, [r2, #0]
 800b780:	7892      	ldrb	r2, [r2, #2]
 800b782:	8019      	strh	r1, [r3, #0]
 800b784:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b786:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b788:	f7f4 fd34 	bl	80001f4 <strlen>
 800b78c:	4603      	mov	r3, r0
 800b78e:	461a      	mov	r2, r3
 800b790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b792:	4413      	add	r3, r2
 800b794:	4a6b      	ldr	r2, [pc, #428]	; (800b944 <httpPOST2+0x2ac>)
 800b796:	461d      	mov	r5, r3
 800b798:	4614      	mov	r4, r2
 800b79a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b79c:	6028      	str	r0, [r5, #0]
 800b79e:	6069      	str	r1, [r5, #4]
 800b7a0:	60aa      	str	r2, [r5, #8]
 800b7a2:	60eb      	str	r3, [r5, #12]
 800b7a4:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b7a6:	6128      	str	r0, [r5, #16]
 800b7a8:	6169      	str	r1, [r5, #20]
 800b7aa:	61aa      	str	r2, [r5, #24]
 800b7ac:	8823      	ldrh	r3, [r4, #0]
 800b7ae:	78a2      	ldrb	r2, [r4, #2]
 800b7b0:	83ab      	strh	r3, [r5, #28]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b7b6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b7b8:	f7f4 fd1c 	bl	80001f4 <strlen>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	461a      	mov	r2, r3
 800b7c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7c2:	4413      	add	r3, r2
 800b7c4:	4a5c      	ldr	r2, [pc, #368]	; (800b938 <httpPOST2+0x2a0>)
 800b7c6:	8811      	ldrh	r1, [r2, #0]
 800b7c8:	7892      	ldrb	r2, [r2, #2]
 800b7ca:	8019      	strh	r1, [r3, #0]
 800b7cc:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b7ce:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b7d0:	f7f4 fd10 	bl	80001f4 <strlen>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7da:	4413      	add	r3, r2
 800b7dc:	4a5a      	ldr	r2, [pc, #360]	; (800b948 <httpPOST2+0x2b0>)
 800b7de:	461c      	mov	r4, r3
 800b7e0:	4615      	mov	r5, r2
 800b7e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7e4:	6020      	str	r0, [r4, #0]
 800b7e6:	6061      	str	r1, [r4, #4]
 800b7e8:	60a2      	str	r2, [r4, #8]
 800b7ea:	60e3      	str	r3, [r4, #12]

	char _devId[8];
	_devId[0]='\0';
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	INTOA(devId, _devId);
 800b7f2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b7f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f003 fadb 	bl	800edb8 <INTOA>
	char d[8];
	d[0]='\0';
 800b802:	2300      	movs	r3, #0
 800b804:	773b      	strb	r3, [r7, #28]
	for (int i=0; i < cdad;i++)
 800b806:	2300      	movs	r3, #0
 800b808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b80a:	e033      	b.n	800b874 <httpPOST2+0x1dc>
	{
		//char d[8];
		FTOA(vect_data[i],d,1);
 800b80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80e:	005b      	lsls	r3, r3, #1
 800b810:	683a      	ldr	r2, [r7, #0]
 800b812:	4413      	add	r3, r2
 800b814:	881b      	ldrh	r3, [r3, #0]
 800b816:	4618      	mov	r0, r3
 800b818:	f107 031c 	add.w	r3, r7, #28
 800b81c:	2201      	movs	r2, #1
 800b81e:	4619      	mov	r1, r3
 800b820:	f003 fafe 	bl	800ee20 <FTOA>
		strncat(body,data[i],strlen(data[i]));
 800b824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b826:	4613      	mov	r3, r2
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	4413      	add	r3, r2
 800b82c:	005b      	lsls	r3, r3, #1
 800b82e:	4a47      	ldr	r2, [pc, #284]	; (800b94c <httpPOST2+0x2b4>)
 800b830:	189c      	adds	r4, r3, r2
 800b832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b834:	4613      	mov	r3, r2
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	4413      	add	r3, r2
 800b83a:	005b      	lsls	r3, r3, #1
 800b83c:	4a43      	ldr	r2, [pc, #268]	; (800b94c <httpPOST2+0x2b4>)
 800b83e:	4413      	add	r3, r2
 800b840:	4618      	mov	r0, r3
 800b842:	f7f4 fcd7 	bl	80001f4 <strlen>
 800b846:	4603      	mov	r3, r0
 800b848:	461a      	mov	r2, r3
 800b84a:	4621      	mov	r1, r4
 800b84c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b84e:	f003 fd2e 	bl	800f2ae <strncat>
		strncat(body,d,strlen(d));
 800b852:	f107 031c 	add.w	r3, r7, #28
 800b856:	4618      	mov	r0, r3
 800b858:	f7f4 fccc 	bl	80001f4 <strlen>
 800b85c:	4602      	mov	r2, r0
 800b85e:	f107 031c 	add.w	r3, r7, #28
 800b862:	4619      	mov	r1, r3
 800b864:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b866:	f003 fd22 	bl	800f2ae <strncat>
		d[0]='\0';
 800b86a:	2300      	movs	r3, #0
 800b86c:	773b      	strb	r3, [r7, #28]
	for (int i=0; i < cdad;i++)
 800b86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b870:	3301      	adds	r3, #1
 800b872:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b878:	429a      	cmp	r2, r3
 800b87a:	dbc7      	blt.n	800b80c <httpPOST2+0x174>
	}
	// Conversión de datos recibido por ModBUS

	strncat(body,deviceId,strlen(deviceId));
 800b87c:	4834      	ldr	r0, [pc, #208]	; (800b950 <httpPOST2+0x2b8>)
 800b87e:	f7f4 fcb9 	bl	80001f4 <strlen>
 800b882:	4603      	mov	r3, r0
 800b884:	461a      	mov	r2, r3
 800b886:	4932      	ldr	r1, [pc, #200]	; (800b950 <httpPOST2+0x2b8>)
 800b888:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b88a:	f003 fd10 	bl	800f2ae <strncat>
	strncat(body,_devId,strlen(_devId));
 800b88e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b892:	4618      	mov	r0, r3
 800b894:	f7f4 fcae 	bl	80001f4 <strlen>
 800b898:	4602      	mov	r2, r0
 800b89a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b89e:	4619      	mov	r1, r3
 800b8a0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b8a2:	f003 fd04 	bl	800f2ae <strncat>

	strncat(body,"}",strlen("}"));
 800b8a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b8a8:	f7f4 fca4 	bl	80001f4 <strlen>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8b2:	4413      	add	r3, r2
 800b8b4:	4927      	ldr	r1, [pc, #156]	; (800b954 <httpPOST2+0x2bc>)
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	881b      	ldrh	r3, [r3, #0]
 800b8bc:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800b8be:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b8c0:	f7f4 fc98 	bl	80001f4 <strlen>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	f107 0314 	add.w	r3, r7, #20
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	4610      	mov	r0, r2
 800b8ce:	f003 fa73 	bl	800edb8 <INTOA>
	strncat(post,length,strlen(length));
 800b8d2:	f107 0314 	add.w	r3, r7, #20
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7f4 fc8c 	bl	80001f4 <strlen>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	f107 0314 	add.w	r3, r7, #20
 800b8e2:	4619      	mov	r1, r3
 800b8e4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b8e6:	f003 fce2 	bl	800f2ae <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800b8ea:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b8ec:	f7f4 fc82 	bl	80001f4 <strlen>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8f6:	4413      	add	r3, r2
 800b8f8:	4a17      	ldr	r2, [pc, #92]	; (800b958 <httpPOST2+0x2c0>)
 800b8fa:	6810      	ldr	r0, [r2, #0]
 800b8fc:	6018      	str	r0, [r3, #0]
 800b8fe:	7912      	ldrb	r2, [r2, #4]
 800b900:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800b902:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b904:	f7f4 fc76 	bl	80001f4 <strlen>
 800b908:	4602      	mov	r2, r0
 800b90a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d20a      	bcs.n	800b926 <httpPOST2+0x28e>
	{
		strncat(post,body,strlen(body));
 800b910:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b912:	f7f4 fc6f 	bl	80001f4 <strlen>
 800b916:	4603      	mov	r3, r0
 800b918:	461a      	mov	r2, r3
 800b91a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b91c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b91e:	f003 fcc6 	bl	800f2ae <strncat>
		return 1 ;
 800b922:	2301      	movs	r3, #1
 800b924:	e000      	b.n	800b928 <httpPOST2+0x290>
	}
		else
		{
			return 0;
 800b926:	2300      	movs	r3, #0
		}
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3730      	adds	r7, #48	; 0x30
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bdb0      	pop	{r4, r5, r7, pc}
 800b930:	08010abc 	.word	0x08010abc
 800b934:	08010ac4 	.word	0x08010ac4
 800b938:	08010ad0 	.word	0x08010ad0
 800b93c:	08010ad4 	.word	0x08010ad4
 800b940:	08010adc 	.word	0x08010adc
 800b944:	08010ae0 	.word	0x08010ae0
 800b948:	08010b00 	.word	0x08010b00
 800b94c:	200000b0 	.word	0x200000b0
 800b950:	20000150 	.word	0x20000150
 800b954:	08010b10 	.word	0x08010b10
 800b958:	08010b14 	.word	0x08010b14

0800b95c <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b976:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2220      	movs	r2, #32
 800b982:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
	m->_Coils=0xF0F0AF5A;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	4a1c      	ldr	r2, [pc, #112]	; (800b9fc <ModBUS_Config+0xa0>)
 800b98a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2201      	movs	r2, #1
 800b992:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2220      	movs	r2, #32
 800b998:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
	m->_Inputs=0xA5FA0F0F;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a18      	ldr	r2, [pc, #96]	; (800ba00 <ModBUS_Config+0xa4>)
 800b9a0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2210      	movs	r2, #16
 800b9ae:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2210      	movs	r2, #16
 800b9bc:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2220      	movs	r2, #32
 800b9ca:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2220      	movs	r2, #32
 800b9de:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2220      	movs	r2, #32
 800b9ec:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
}
 800b9f0:	bf00      	nop
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr
 800b9fc:	f0f0af5a 	.word	0xf0f0af5a
 800ba00:	a5fa0f0f 	.word	0xa5fa0f0f

0800ba04 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	3305      	adds	r3, #5
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	3306      	adds	r3, #6
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d10b      	bne.n	800ba34 <ModBUS_Check+0x30>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	3302      	adds	r3, #2
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	461a      	mov	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	3303      	adds	r3, #3
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d101      	bne.n	800ba34 <ModBUS_Check+0x30>
	{
		return(1);
 800ba30:	2301      	movs	r3, #1
 800ba32:	e000      	b.n	800ba36 <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800ba34:	2300      	movs	r3, #0
	}
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	370c      	adds	r7, #12
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr

0800ba42 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800ba42:	b480      	push	{r7}
 800ba44:	b083      	sub	sp, #12
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f893 2218 	ldrb.w	r2, [r3, #536]	; 0x218
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	7c9b      	ldrb	r3, [r3, #18]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d11d      	bne.n	800ba94 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f893 2219 	ldrb.w	r2, [r3, #537]	; 0x219
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	7cdb      	ldrb	r3, [r3, #19]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d116      	bne.n	800ba94 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d10f      	bne.n	800ba94 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f893 221b 	ldrb.w	r2, [r3, #539]	; 0x21b
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	7d5b      	ldrb	r3, [r3, #21]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d108      	bne.n	800ba94 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f893 221f 	ldrb.w	r2, [r3, #543]	; 0x21f
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	7e5b      	ldrb	r3, [r3, #25]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d101      	bne.n	800ba94 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800ba90:	2301      	movs	r3, #1
 800ba92:	e000      	b.n	800ba96 <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800ba94:	2300      	movs	r3, #0
	}
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	370c      	adds	r7, #12
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr

0800baa2 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t a, uint16_t b)
{
 800baa2:	b480      	push	{r7}
 800baa4:	b085      	sub	sp, #20
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
 800baaa:	460b      	mov	r3, r1
 800baac:	70fb      	strb	r3, [r7, #3]
 800baae:	4613      	mov	r3, r2
 800bab0:	803b      	strh	r3, [r7, #0]
	uint8_t c=0;
 800bab2:	2300      	movs	r3, #0
 800bab4:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800babc:	78fa      	ldrb	r2, [r7, #3]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d901      	bls.n	800bac6 <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800bac2:	2301      	movs	r3, #1
 800bac4:	e015      	b.n	800baf2 <ModBUS_F03_Assign+0x50>
	}
	else
	{
		m2->_Holding_Registers[(a*2)+1]=b;
 800bac6:	78fb      	ldrb	r3, [r7, #3]
 800bac8:	005b      	lsls	r3, r3, #1
 800baca:	3301      	adds	r3, #1
 800bacc:	883a      	ldrh	r2, [r7, #0]
 800bace:	b2d1      	uxtb	r1, r2
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	4413      	add	r3, r2
 800bad4:	460a      	mov	r2, r1
 800bad6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		c=b>>8;
 800bada:	883b      	ldrh	r3, [r7, #0]
 800badc:	0a1b      	lsrs	r3, r3, #8
 800bade:	b29b      	uxth	r3, r3
 800bae0:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(a*2)]=c;
 800bae2:	78fb      	ldrb	r3, [r7, #3]
 800bae4:	005b      	lsls	r3, r3, #1
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	4413      	add	r3, r2
 800baea:	7bfa      	ldrb	r2, [r7, #15]
 800baec:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

		return(0);
 800baf0:	2300      	movs	r3, #0
	}
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3714      	adds	r7, #20
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr

0800bafe <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t a)
{
 800bafe:	b480      	push	{r7}
 800bb00:	b085      	sub	sp, #20
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	460b      	mov	r3, r1
 800bb08:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800bb18:	78fa      	ldrb	r2, [r7, #3]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d901      	bls.n	800bb22 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e015      	b.n	800bb4e <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(a*2)];
 800bb22:	78fb      	ldrb	r3, [r7, #3]
 800bb24:	005b      	lsls	r3, r3, #1
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	4413      	add	r3, r2
 800bb2a:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800bb2e:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800bb30:	89fb      	ldrh	r3, [r7, #14]
 800bb32:	021b      	lsls	r3, r3, #8
 800bb34:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(a*2)+1];
 800bb36:	78fb      	ldrb	r3, [r7, #3]
 800bb38:	005b      	lsls	r3, r3, #1
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	4413      	add	r3, r2
 800bb40:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	89fb      	ldrh	r3, [r7, #14]
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	81fb      	strh	r3, [r7, #14]

		/*m2->_Holding_Registers[(a*2)+1]=b;
		c=b>>8;
		m2->_Holding_Registers[(a*2)]=c;*/
		return(n);
 800bb4c:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3714      	adds	r7, #20
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	b083      	sub	sp, #12
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	460b      	mov	r3, r1
 800bb64:	807b      	strh	r3, [r7, #2]
 800bb66:	4613      	mov	r3, r2
 800bb68:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800bb6a:	887b      	ldrh	r3, [r7, #2]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	bf14      	ite	ne
 800bb70:	2301      	movne	r3, #1
 800bb72:	2300      	moveq	r3, #0
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	461a      	mov	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
	addr&=0xF0;
 800bb7e:	887b      	ldrh	r3, [r7, #2]
 800bb80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb84:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800bb86:	887b      	ldrh	r3, [r7, #2]
 800bb88:	0a1b      	lsrs	r3, r3, #8
 800bb8a:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800bb8c:	887b      	ldrh	r3, [r7, #2]
 800bb8e:	f003 030f 	and.w	r3, r3, #15
 800bb92:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2200      	movs	r2, #0
 800bb98:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	m2->_MBUS_2SND[1]=0x00;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	m2->_MBUS_2SND[2]=0x00;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
	m2->_MBUS_2SND[3]=0x00;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
	m2->_MBUS_2SND[4]=0x00;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	m2->_MBUS_2SND[5]=0x06;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2206      	movs	r2, #6
 800bbc0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	m2->_MBUS_2SND[6]=m2->_address;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	781a      	ldrb	r2, [r3, #0]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	m2->_MBUS_2SND[7]=0x03;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2203      	movs	r2, #3
 800bbd2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
	m2->_MBUS_2SND[8]=addr;
 800bbd6:	887b      	ldrh	r3, [r7, #2]
 800bbd8:	b2da      	uxtb	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220

	m2->_MBUS_2SND[10]=0x00;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
	m2->_MBUS_2SND[11]=qty;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	787a      	ldrb	r2, [r7, #1]
 800bbec:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	220c      	movs	r2, #12
 800bbf4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

}
 800bbf8:	bf00      	nop
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	370c      	adds	r7, #12
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr
	...

0800bc08 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b09c      	sub	sp, #112	; 0x70
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	791b      	ldrb	r3, [r3, #4]
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	f041 813f 	bne.w	800ce98 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f103 0212 	add.w	r2, r3, #18
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc26:	4619      	mov	r1, r3
 800bc28:	4610      	mov	r0, r2
 800bc2a:	f7ff feeb 	bl	800ba04 <ModBUS_Check>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	f001 812f 	beq.w	800ce94 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	7e5b      	ldrb	r3, [r3, #25]
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	2b0f      	cmp	r3, #15
 800bc3e:	f201 80f3 	bhi.w	800ce28 <ModBUS+0x1220>
 800bc42:	a201      	add	r2, pc, #4	; (adr r2, 800bc48 <ModBUS+0x40>)
 800bc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc48:	0800bc89 	.word	0x0800bc89
 800bc4c:	0800bec9 	.word	0x0800bec9
 800bc50:	0800c109 	.word	0x0800c109
 800bc54:	0800c341 	.word	0x0800c341
 800bc58:	0800c579 	.word	0x0800c579
 800bc5c:	0800c78f 	.word	0x0800c78f
 800bc60:	0800ce29 	.word	0x0800ce29
 800bc64:	0800ce29 	.word	0x0800ce29
 800bc68:	0800ce29 	.word	0x0800ce29
 800bc6c:	0800ce29 	.word	0x0800ce29
 800bc70:	0800ce29 	.word	0x0800ce29
 800bc74:	0800ce29 	.word	0x0800ce29
 800bc78:	0800ce29 	.word	0x0800ce29
 800bc7c:	0800ce29 	.word	0x0800ce29
 800bc80:	0800c94b 	.word	0x0800c94b
 800bc84:	0800cbdb 	.word	0x0800cbdb

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	7d9a      	ldrb	r2, [r3, #22]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	7d5a      	ldrb	r2, [r3, #21]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	7d1a      	ldrb	r2, [r3, #20]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	7cda      	ldrb	r2, [r3, #19]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	7c9a      	ldrb	r2, [r3, #18]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	7a9b      	ldrb	r3, [r3, #10]
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	f040 80e6 	bne.w	800be94 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	7e9b      	ldrb	r3, [r3, #26]
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800bcda:	021b      	lsls	r3, r3, #8
 800bcdc:	b29a      	uxth	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800bcea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bcee:	b29a      	uxth	r2, r3
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	7edb      	ldrb	r3, [r3, #27]
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	4313      	orrs	r3, r2
 800bd04:	b29a      	uxth	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	7f1b      	ldrb	r3, [r3, #28]
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bd1e:	021b      	lsls	r3, r3, #8
 800bd20:	b29a      	uxth	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bd2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bd32:	b29a      	uxth	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	7f5b      	ldrb	r3, [r3, #29]
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	4313      	orrs	r3, r2
 800bd48:	b29a      	uxth	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d87e      	bhi.n	800be60 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800bd68:	461a      	mov	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bd70:	4413      	add	r3, r2
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	f892 2620 	ldrb.w	r2, [r2, #1568]	; 0x620
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	dc57      	bgt.n	800be2c <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	613b      	str	r3, [r7, #16]
 800bd80:	2300      	movs	r3, #0
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	2300      	movs	r3, #0
 800bd86:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd88:	2300      	movs	r3, #0
 800bd8a:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	f8b2 2622 	ldrh.w	r2, [r2, #1570]	; 0x622
 800bd9c:	40d3      	lsrs	r3, r2
 800bd9e:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bda6:	08db      	lsrs	r3, r3, #3
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bdb2:	f003 0307 	and.w	r3, r3, #7
 800bdb6:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d102      	bne.n	800bdc4 <ModBUS+0x1bc>
									{
										bytes=div;
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bdc2:	e002      	b.n	800bdca <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800bdca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdcc:	b2da      	uxtb	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800bdd4:	e00e      	b.n	800bdf4 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800bdd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdd8:	3308      	adds	r3, #8
 800bdda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bddc:	b2d1      	uxtb	r1, r2
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	4413      	add	r3, r2
 800bde2:	460a      	mov	r2, r1
 800bde4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800bde8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdea:	0a1b      	lsrs	r3, r3, #8
 800bdec:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800bdee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800bdf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	dced      	bgt.n	800bdd6 <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2201      	movs	r2, #1
 800be06:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800be10:	3303      	adds	r3, #3
 800be12:	b2da      	uxtb	r2, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800be20:	1d9a      	adds	r2, r3, #6
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800be28:	f001 b8d4 	b.w	800cfd4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2202      	movs	r2, #2
 800be30:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x81;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2281      	movs	r2, #129	; 0x81
 800be38:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2201      	movs	r2, #1
 800be40:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2203      	movs	r2, #3
 800be48:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800be52:	1d9a      	adds	r2, r3, #6
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800be5a:	2302      	movs	r3, #2
 800be5c:	f001 b8ba 	b.w	800cfd4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2203      	movs	r2, #3
 800be64:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x81;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2281      	movs	r2, #129	; 0x81
 800be6c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2201      	movs	r2, #1
 800be74:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2203      	movs	r2, #3
 800be7c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800be86:	1d9a      	adds	r2, r3, #6
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800be8e:	2303      	movs	r3, #3
 800be90:	f001 b8a0 	b.w	800cfd4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2201      	movs	r2, #1
 800be98:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x81;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2281      	movs	r2, #129	; 0x81
 800bea0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2201      	movs	r2, #1
 800bea8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2203      	movs	r2, #3
 800beb0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800beba:	1d9a      	adds	r2, r3, #6
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800bec2:	2301      	movs	r3, #1
 800bec4:	f001 b886 	b.w	800cfd4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	7d9a      	ldrb	r2, [r3, #22]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	7d5a      	ldrb	r2, [r3, #21]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	7d1a      	ldrb	r2, [r3, #20]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	7cda      	ldrb	r2, [r3, #19]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	7c9a      	ldrb	r2, [r3, #18]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800befa:	2300      	movs	r3, #0
 800befc:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	7adb      	ldrb	r3, [r3, #11]
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	f040 80e6 	bne.w	800c0d4 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	7e9b      	ldrb	r3, [r3, #26]
 800bf0c:	b29a      	uxth	r2, r3
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800bf1a:	021b      	lsls	r3, r3, #8
 800bf1c:	b29a      	uxth	r2, r3
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800bf2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bf2e:	b29a      	uxth	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	7edb      	ldrb	r3, [r3, #27]
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	4313      	orrs	r3, r2
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	7f1b      	ldrb	r3, [r3, #28]
 800bf50:	b29a      	uxth	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800bf5e:	021b      	lsls	r3, r3, #8
 800bf60:	b29a      	uxth	r2, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800bf6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	7f5b      	ldrb	r3, [r3, #29]
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	4313      	orrs	r3, r2
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d87e      	bhi.n	800c0a0 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800bfb0:	4413      	add	r3, r2
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	f892 2626 	ldrb.w	r2, [r2, #1574]	; 0x626
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	dc57      	bgt.n	800c06c <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	623b      	str	r3, [r7, #32]
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	61fb      	str	r3, [r7, #28]
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	667b      	str	r3, [r7, #100]	; 0x64
 800bfc8:	2300      	movs	r3, #0
 800bfca:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	f8b2 2628 	ldrh.w	r2, [r2, #1576]	; 0x628
 800bfdc:	40d3      	lsrs	r3, r2
 800bfde:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800bfe6:	08db      	lsrs	r3, r3, #3
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800bff2:	f003 0307 	and.w	r3, r3, #7
 800bff6:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d102      	bne.n	800c004 <ModBUS+0x3fc>
									{
										bytes=div;
 800bffe:	6a3b      	ldr	r3, [r7, #32]
 800c000:	667b      	str	r3, [r7, #100]	; 0x64
 800c002:	e002      	b.n	800c00a <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800c004:	6a3b      	ldr	r3, [r7, #32]
 800c006:	3301      	adds	r3, #1
 800c008:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800c00a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c00c:	b2da      	uxtb	r2, r3
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800c014:	e00e      	b.n	800c034 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800c016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c018:	3308      	adds	r3, #8
 800c01a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c01c:	b2d1      	uxtb	r1, r2
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	4413      	add	r3, r2
 800c022:	460a      	mov	r2, r1
 800c024:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800c028:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c02a:	0a1b      	lsrs	r3, r3, #8
 800c02c:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800c02e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c030:	3b01      	subs	r3, #1
 800c032:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800c034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c036:	2b00      	cmp	r3, #0
 800c038:	dced      	bgt.n	800c016 <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2202      	movs	r2, #2
 800c03e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2201      	movs	r2, #1
 800c046:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c050:	3303      	adds	r3, #3
 800c052:	b2da      	uxtb	r2, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c060:	1d9a      	adds	r2, r3, #6
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c068:	f000 bfb4 	b.w	800cfd4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2202      	movs	r2, #2
 800c070:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x82;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2282      	movs	r2, #130	; 0x82
 800c078:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2201      	movs	r2, #1
 800c080:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2203      	movs	r2, #3
 800c088:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c092:	1d9a      	adds	r2, r3, #6
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c09a:	2302      	movs	r3, #2
 800c09c:	f000 bf9a 	b.w	800cfd4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2203      	movs	r2, #3
 800c0a4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x82;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2282      	movs	r2, #130	; 0x82
 800c0ac:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2203      	movs	r2, #3
 800c0bc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c0c6:	1d9a      	adds	r2, r3, #6
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c0ce:	2303      	movs	r3, #3
 800c0d0:	f000 bf80 	b.w	800cfd4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x82;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2282      	movs	r2, #130	; 0x82
 800c0e0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2203      	movs	r2, #3
 800c0f0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c0fa:	1d9a      	adds	r2, r3, #6
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c102:	2301      	movs	r3, #1
 800c104:	f000 bf66 	b.w	800cfd4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	7d9a      	ldrb	r2, [r3, #22]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	7d5a      	ldrb	r2, [r3, #21]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	7d1a      	ldrb	r2, [r3, #20]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	7cda      	ldrb	r2, [r3, #19]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	7c9a      	ldrb	r2, [r3, #18]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c13a:	2300      	movs	r3, #0
 800c13c:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	7b1b      	ldrb	r3, [r3, #12]
 800c142:	2b01      	cmp	r3, #1
 800c144:	f040 80e2 	bne.w	800c30c <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	7e9b      	ldrb	r3, [r3, #26]
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c15a:	021b      	lsls	r3, r3, #8
 800c15c:	b29a      	uxth	r2, r3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c16a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c16e:	b29a      	uxth	r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8b3 262e 	ldrh.w	r2, [r3, #1582]	; 0x62e
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	7edb      	ldrb	r3, [r3, #27]
 800c180:	b29b      	uxth	r3, r3
 800c182:	4313      	orrs	r3, r2
 800c184:	b29a      	uxth	r2, r3
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	7f1b      	ldrb	r3, [r3, #28]
 800c190:	b29a      	uxth	r2, r3
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c19e:	021b      	lsls	r3, r3, #8
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c1ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c1b2:	b29a      	uxth	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	7f5b      	ldrb	r3, [r3, #29]
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d87a      	bhi.n	800c2d8 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c1f0:	4413      	add	r3, r2
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	f892 262c 	ldrb.w	r2, [r2, #1580]	; 0x62c
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	dc53      	bgt.n	800c2a4 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c1fc:	e029      	b.n	800c252 <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c204:	461a      	mov	r2, r3
 800c206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c208:	4413      	add	r3, r2
 800c20a:	005a      	lsls	r2, r3, #1
 800c20c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c20e:	005b      	lsls	r3, r3, #1
 800c210:	3309      	adds	r3, #9
 800c212:	6879      	ldr	r1, [r7, #4]
 800c214:	440a      	add	r2, r1
 800c216:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	4413      	add	r3, r2
 800c21e:	460a      	mov	r2, r1
 800c220:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c22a:	461a      	mov	r2, r3
 800c22c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c22e:	4413      	add	r3, r2
 800c230:	005b      	lsls	r3, r3, #1
 800c232:	1c5a      	adds	r2, r3, #1
 800c234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c236:	3305      	adds	r3, #5
 800c238:	005b      	lsls	r3, r3, #1
 800c23a:	6879      	ldr	r1, [r7, #4]
 800c23c:	440a      	add	r2, r1
 800c23e:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	4413      	add	r3, r2
 800c246:	460a      	mov	r2, r1
 800c248:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800c24c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c24e:	3301      	adds	r3, #1
 800c250:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c258:	461a      	mov	r2, r3
 800c25a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c25c:	4293      	cmp	r3, r2
 800c25e:	dbce      	blt.n	800c1fe <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c266:	b2db      	uxtb	r3, r3
 800c268:	005b      	lsls	r3, r3, #1
 800c26a:	b2da      	uxtb	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x03;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2203      	movs	r2, #3
 800c276:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2201      	movs	r2, #1
 800c27e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c288:	3303      	adds	r3, #3
 800c28a:	b2da      	uxtb	r2, r3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c298:	1d9a      	adds	r2, r3, #6
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c2a0:	f000 be98 	b.w	800cfd4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x83;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2283      	movs	r2, #131	; 0x83
 800c2b0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2203      	movs	r2, #3
 800c2c0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c2ca:	1d9a      	adds	r2, r3, #6
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c2d2:	2302      	movs	r3, #2
 800c2d4:	f000 be7e 	b.w	800cfd4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2203      	movs	r2, #3
 800c2dc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x83;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2283      	movs	r2, #131	; 0x83
 800c2e4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2203      	movs	r2, #3
 800c2f4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c2fe:	1d9a      	adds	r2, r3, #6
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c306:	2303      	movs	r3, #3
 800c308:	f000 be64 	b.w	800cfd4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x83;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2283      	movs	r2, #131	; 0x83
 800c318:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2201      	movs	r2, #1
 800c320:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2203      	movs	r2, #3
 800c328:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c332:	1d9a      	adds	r2, r3, #6
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c33a:	2301      	movs	r3, #1
 800c33c:	f000 be4a 	b.w	800cfd4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	7d9a      	ldrb	r2, [r3, #22]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	7d5a      	ldrb	r2, [r3, #21]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	7d1a      	ldrb	r2, [r3, #20]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	7cda      	ldrb	r2, [r3, #19]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	7c9a      	ldrb	r2, [r3, #18]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c372:	2300      	movs	r3, #0
 800c374:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	7b5b      	ldrb	r3, [r3, #13]
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	f040 80e2 	bne.w	800c544 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	7e9b      	ldrb	r3, [r3, #26]
 800c384:	b29a      	uxth	r2, r3
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c392:	021b      	lsls	r3, r3, #8
 800c394:	b29a      	uxth	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c3a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c3a6:	b29a      	uxth	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8b3 2634 	ldrh.w	r2, [r3, #1588]	; 0x634
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	7edb      	ldrb	r3, [r3, #27]
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	b29a      	uxth	r2, r3
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	7f1b      	ldrb	r3, [r3, #28]
 800c3c8:	b29a      	uxth	r2, r3
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c3d6:	021b      	lsls	r3, r3, #8
 800c3d8:	b29a      	uxth	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c3e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c3ea:	b29a      	uxth	r2, r3
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	7f5b      	ldrb	r3, [r3, #29]
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	4313      	orrs	r3, r2
 800c400:	b29a      	uxth	r2, r3
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f893 3632 	ldrb.w	r3, [r3, #1586]	; 0x632
 800c414:	b29b      	uxth	r3, r3
 800c416:	429a      	cmp	r2, r3
 800c418:	d87a      	bhi.n	800c510 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c420:	461a      	mov	r2, r3
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c428:	4413      	add	r3, r2
 800c42a:	687a      	ldr	r2, [r7, #4]
 800c42c:	f892 2632 	ldrb.w	r2, [r2, #1586]	; 0x632
 800c430:	4293      	cmp	r3, r2
 800c432:	dc53      	bgt.n	800c4dc <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c434:	e029      	b.n	800c48a <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c43c:	461a      	mov	r2, r3
 800c43e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c440:	4413      	add	r3, r2
 800c442:	005a      	lsls	r2, r3, #1
 800c444:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c446:	005b      	lsls	r3, r3, #1
 800c448:	3309      	adds	r3, #9
 800c44a:	6879      	ldr	r1, [r7, #4]
 800c44c:	440a      	add	r2, r1
 800c44e:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	4413      	add	r3, r2
 800c456:	460a      	mov	r2, r1
 800c458:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c462:	461a      	mov	r2, r3
 800c464:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c466:	4413      	add	r3, r2
 800c468:	005b      	lsls	r3, r3, #1
 800c46a:	1c5a      	adds	r2, r3, #1
 800c46c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c46e:	3305      	adds	r3, #5
 800c470:	005b      	lsls	r3, r3, #1
 800c472:	6879      	ldr	r1, [r7, #4]
 800c474:	440a      	add	r2, r1
 800c476:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	4413      	add	r3, r2
 800c47e:	460a      	mov	r2, r1
 800c480:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800c484:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c486:	3301      	adds	r3, #1
 800c488:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c490:	461a      	mov	r2, r3
 800c492:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c494:	4293      	cmp	r3, r2
 800c496:	dbce      	blt.n	800c436 <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	005b      	lsls	r3, r3, #1
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x04;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2204      	movs	r2, #4
 800c4ae:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c4c0:	3303      	adds	r3, #3
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c4d0:	1d9a      	adds	r2, r3, #6
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c4d8:	f000 bd7c 	b.w	800cfd4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2202      	movs	r2, #2
 800c4e0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x84;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2284      	movs	r2, #132	; 0x84
 800c4e8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2203      	movs	r2, #3
 800c4f8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c502:	1d9a      	adds	r2, r3, #6
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c50a:	2302      	movs	r3, #2
 800c50c:	f000 bd62 	b.w	800cfd4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2203      	movs	r2, #3
 800c514:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x84;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2284      	movs	r2, #132	; 0x84
 800c51c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2201      	movs	r2, #1
 800c524:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2203      	movs	r2, #3
 800c52c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c536:	1d9a      	adds	r2, r3, #6
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c53e:	2303      	movs	r3, #3
 800c540:	f000 bd48 	b.w	800cfd4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2201      	movs	r2, #1
 800c548:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x84;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2284      	movs	r2, #132	; 0x84
 800c550:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2203      	movs	r2, #3
 800c560:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c56a:	1d9a      	adds	r2, r3, #6
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c572:	2301      	movs	r3, #1
 800c574:	f000 bd2e 	b.w	800cfd4 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	7d9a      	ldrb	r2, [r3, #22]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	7d5a      	ldrb	r2, [r3, #21]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	7d1a      	ldrb	r2, [r3, #20]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	7cda      	ldrb	r2, [r3, #19]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	7c9a      	ldrb	r2, [r3, #18]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

								int qty_reg=0;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	7b9b      	ldrb	r3, [r3, #14]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	f040 80d1 	bne.w	800c75a <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	7e9b      	ldrb	r3, [r3, #26]
 800c5bc:	b29a      	uxth	r2, r3
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c5ca:	021b      	lsls	r3, r3, #8
 800c5cc:	b29a      	uxth	r2, r3
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c5da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c5de:	b29a      	uxth	r2, r3
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8b3 263a 	ldrh.w	r2, [r3, #1594]	; 0x63a
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	7edb      	ldrb	r3, [r3, #27]
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	7f1b      	ldrb	r3, [r3, #28]
 800c600:	b29a      	uxth	r2, r3
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c60e:	021b      	lsls	r3, r3, #8
 800c610:	b29a      	uxth	r2, r3
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c61e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c622:	b29a      	uxth	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8b3 263c 	ldrh.w	r2, [r3, #1596]	; 0x63c
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	7f5b      	ldrb	r3, [r3, #29]
 800c634:	b29b      	uxth	r3, r3
 800c636:	4313      	orrs	r3, r2
 800c638:	b29a      	uxth	r2, r3
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f893 3638 	ldrb.w	r3, [r3, #1592]	; 0x638
 800c646:	461a      	mov	r2, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c64e:	429a      	cmp	r2, r3
 800c650:	dd69      	ble.n	800c726 <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d005      	beq.n	800c668 <ModBUS+0xa60>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c662:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c666:	d144      	bne.n	800c6f2 <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c66e:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c672:	d10d      	bne.n	800c690 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	f8b2 263a 	ldrh.w	r2, [r2, #1594]	; 0x63a
 800c680:	4611      	mov	r1, r2
 800c682:	2201      	movs	r2, #1
 800c684:	408a      	lsls	r2, r1
 800c686:	431a      	orrs	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800c68e:	e003      	b.n	800c698 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	7f5a      	ldrb	r2, [r3, #29]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	7f1a      	ldrb	r2, [r3, #28]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	7eda      	ldrb	r2, [r3, #27]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	7e9a      	ldrb	r2, [r3, #26]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x05;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2205      	movs	r2, #5
 800c6c4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c6d6:	3306      	adds	r3, #6
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c6e6:	1d9a      	adds	r2, r3, #6
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800c6ee:	f000 bc71 	b.w	800cfd4 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2202      	movs	r2, #2
 800c6f6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x85;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2285      	movs	r2, #133	; 0x85
 800c6fe:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2201      	movs	r2, #1
 800c706:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2203      	movs	r2, #3
 800c70e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c718:	1d9a      	adds	r2, r3, #6
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
												return(2);//Error excepcion 02
 800c720:	2302      	movs	r3, #2
 800c722:	f000 bc57 	b.w	800cfd4 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2203      	movs	r2, #3
 800c72a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
											m3->_MBUS_2SND[7]=0x85;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2285      	movs	r2, #133	; 0x85
 800c732:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2201      	movs	r2, #1
 800c73a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2203      	movs	r2, #3
 800c742:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c74c:	1d9a      	adds	r2, r3, #6
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
											return(3);//Erroe excepcion 03
 800c754:	2303      	movs	r3, #3
 800c756:	f000 bc3d 	b.w	800cfd4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2201      	movs	r2, #1
 800c75e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x85;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2285      	movs	r2, #133	; 0x85
 800c766:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2201      	movs	r2, #1
 800c76e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2203      	movs	r2, #3
 800c776:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c780:	1d9a      	adds	r2, r3, #6
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(1);//Error excepcion 01
 800c788:	2301      	movs	r3, #1
 800c78a:	f000 bc23 	b.w	800cfd4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	7d9a      	ldrb	r2, [r3, #22]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	7d5a      	ldrb	r2, [r3, #21]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	7d1a      	ldrb	r2, [r3, #20]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	7cda      	ldrb	r2, [r3, #19]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	7c9a      	ldrb	r2, [r3, #18]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	7bdb      	ldrb	r3, [r3, #15]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	f040 80a3 	bne.w	800c918 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	7e9b      	ldrb	r3, [r3, #26]
 800c7d6:	b29a      	uxth	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c7e4:	021b      	lsls	r3, r3, #8
 800c7e6:	b29a      	uxth	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c7f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c7f8:	b29a      	uxth	r2, r3
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	7edb      	ldrb	r3, [r3, #27]
 800c80a:	b29b      	uxth	r3, r3
 800c80c:	4313      	orrs	r3, r2
 800c80e:	b29a      	uxth	r2, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646

							start_address=m3->_06_WriteSingleRegister_Addr;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c81c:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	7f1b      	ldrb	r3, [r3, #28]
 800c822:	b29a      	uxth	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800c830:	021b      	lsls	r3, r3, #8
 800c832:	b29a      	uxth	r2, r3
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800c840:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c844:	b29a      	uxth	r2, r3
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8b3 2648 	ldrh.w	r2, [r3, #1608]	; 0x648
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	7f5b      	ldrb	r3, [r3, #29]
 800c856:	b29b      	uxth	r3, r3
 800c858:	4313      	orrs	r3, r2
 800c85a:	b29a      	uxth	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 800c86e:	b29b      	uxth	r3, r3
 800c870:	429a      	cmp	r2, r3
 800c872:	d838      	bhi.n	800c8e6 <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800c874:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	7f11      	ldrb	r1, [r2, #28]
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	4413      	add	r3, r2
 800c87e:	460a      	mov	r2, r1
 800c880:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800c884:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c886:	3301      	adds	r3, #1
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	7f51      	ldrb	r1, [r2, #29]
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	4413      	add	r3, r2
 800c890:	460a      	mov	r2, r1
 800c892:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	7f5a      	ldrb	r2, [r3, #29]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	7f1a      	ldrb	r2, [r3, #28]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	7eda      	ldrb	r2, [r3, #27]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	7e9a      	ldrb	r2, [r3, #26]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x06;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2206      	movs	r2, #6
 800c8c2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2206      	movs	r2, #6
 800c8d2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c8dc:	1d9a      	adds	r2, r3, #6
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c8e4:	e376      	b.n	800cfd4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2202      	movs	r2, #2
 800c8ea:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x86;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2286      	movs	r2, #134	; 0x86
 800c8f2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2203      	movs	r2, #3
 800c902:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c90c:	1d9a      	adds	r2, r3, #6
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c914:	2302      	movs	r3, #2
 800c916:	e35d      	b.n	800cfd4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2201      	movs	r2, #1
 800c91c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x86;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2286      	movs	r2, #134	; 0x86
 800c924:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2203      	movs	r2, #3
 800c934:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c93e:	1d9a      	adds	r2, r3, #6
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c946:	2301      	movs	r3, #1
 800c948:	e344      	b.n	800cfd4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	7d9a      	ldrb	r2, [r3, #22]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	7d5a      	ldrb	r2, [r3, #21]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	7d1a      	ldrb	r2, [r3, #20]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	7cda      	ldrb	r2, [r3, #19]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	7c9a      	ldrb	r2, [r3, #18]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c97c:	2300      	movs	r3, #0
 800c97e:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	7c1b      	ldrb	r3, [r3, #16]
 800c984:	2b01      	cmp	r3, #1
 800c986:	f040 810f 	bne.w	800cba8 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	7e9b      	ldrb	r3, [r3, #26]
 800c98e:	b29a      	uxth	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800c99c:	021b      	lsls	r3, r3, #8
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800c9ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c9b0:	b29a      	uxth	r2, r3
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8b3 2640 	ldrh.w	r2, [r3, #1600]	; 0x640
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	7edb      	ldrb	r3, [r3, #27]
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	b29a      	uxth	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	7f1b      	ldrb	r3, [r3, #28]
 800c9d2:	b29a      	uxth	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800c9e0:	021b      	lsls	r3, r3, #8
 800c9e2:	b29a      	uxth	r2, r3
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800c9f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c9f4:	b29a      	uxth	r2, r3
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	7f5b      	ldrb	r3, [r3, #29]
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	4313      	orrs	r3, r2
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f893 363e 	ldrb.w	r3, [r3, #1598]	; 0x63e
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	429a      	cmp	r2, r3
 800ca22:	f200 80a8 	bhi.w	800cb76 <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800ca34:	4413      	add	r3, r2
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	f892 263e 	ldrb.w	r2, [r2, #1598]	; 0x63e
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	f300 8081 	bgt.w	800cb44 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800ca42:	2300      	movs	r3, #0
 800ca44:	657b      	str	r3, [r7, #84]	; 0x54
 800ca46:	2300      	movs	r3, #0
 800ca48:	653b      	str	r3, [r7, #80]	; 0x50
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca4e:	2300      	movs	r3, #0
 800ca50:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	7f9b      	ldrb	r3, [r3, #30]
 800ca56:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800ca58:	e00e      	b.n	800ca78 <ModBUS+0xe70>
									{
										data=data<<8;
 800ca5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca5c:	021b      	lsls	r3, r3, #8
 800ca5e:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800ca60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca62:	330c      	adds	r3, #12
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	4413      	add	r3, r2
 800ca68:	7c9b      	ldrb	r3, [r3, #18]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca6e:	4313      	orrs	r3, r2
 800ca70:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800ca72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca74:	3b01      	subs	r3, #1
 800ca76:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800ca78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d1ed      	bne.n	800ca5a <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800ca84:	461a      	mov	r2, r3
 800ca86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca88:	4093      	lsls	r3, r2
 800ca8a:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800ca8c:	e00f      	b.n	800caae <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800ca94:	461a      	mov	r2, r3
 800ca96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca98:	4413      	add	r3, r2
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	fa02 f303 	lsl.w	r3, r2, r3
 800caa0:	461a      	mov	r2, r3
 800caa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800caa4:	4313      	orrs	r3, r2
 800caa6:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800caa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caaa:	3301      	adds	r3, #1
 800caac:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cab4:	461a      	mov	r2, r3
 800cab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cab8:	4293      	cmp	r3, r2
 800caba:	d3e8      	bcc.n	800ca8e <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800cabc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cabe:	43db      	mvns	r3, r3
 800cac0:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800cac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800caca:	401a      	ands	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c


									data &= ~mascara;
 800cad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cad4:	43db      	mvns	r3, r3
 800cad6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cad8:	4013      	ands	r3, r2
 800cada:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800cae2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cae4:	431a      	orrs	r2, r3
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	7f5a      	ldrb	r2, [r3, #29]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	7f1a      	ldrb	r2, [r3, #28]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	7eda      	ldrb	r2, [r3, #27]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	7e9a      	ldrb	r2, [r3, #26]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x0F;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	220f      	movs	r2, #15
 800cb18:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800cb2a:	3306      	adds	r3, #6
 800cb2c:	b2da      	uxtb	r2, r3
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cb3a:	1d9a      	adds	r2, r3, #6
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cb42:	e247      	b.n	800cfd4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2202      	movs	r2, #2
 800cb48:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x8F;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	228f      	movs	r2, #143	; 0x8f
 800cb50:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2201      	movs	r2, #1
 800cb58:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2203      	movs	r2, #3
 800cb60:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cb6a:	1d9a      	adds	r2, r3, #6
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800cb72:	2302      	movs	r3, #2
 800cb74:	e22e      	b.n	800cfd4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2203      	movs	r2, #3
 800cb7a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x8F;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	228f      	movs	r2, #143	; 0x8f
 800cb82:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2203      	movs	r2, #3
 800cb92:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cb9c:	1d9a      	adds	r2, r3, #6
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cba4:	2303      	movs	r3, #3
 800cba6:	e215      	b.n	800cfd4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2201      	movs	r2, #1
 800cbac:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x8F;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	228f      	movs	r2, #143	; 0x8f
 800cbb4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2201      	movs	r2, #1
 800cbbc:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2203      	movs	r2, #3
 800cbc4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cbce:	1d9a      	adds	r2, r3, #6
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e1fc      	b.n	800cfd4 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	7d9a      	ldrb	r2, [r3, #22]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	7d5a      	ldrb	r2, [r3, #21]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	7d1a      	ldrb	r2, [r3, #20]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	7cda      	ldrb	r2, [r3, #19]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	7c9a      	ldrb	r2, [r3, #18]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800cc12:	2300      	movs	r3, #0
 800cc14:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	7c5b      	ldrb	r3, [r3, #17]
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	f040 80eb 	bne.w	800cdf6 <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	7e9b      	ldrb	r3, [r3, #26]
 800cc24:	b29a      	uxth	r2, r3
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cc32:	021b      	lsls	r3, r3, #8
 800cc34:	b29a      	uxth	r2, r3
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cc42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc46:	b29a      	uxth	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8b3 264c 	ldrh.w	r2, [r3, #1612]	; 0x64c
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	7edb      	ldrb	r3, [r3, #27]
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	b29a      	uxth	r2, r3
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cc6a:	005b      	lsls	r3, r3, #1
 800cc6c:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	7f1b      	ldrb	r3, [r3, #28]
 800cc72:	b29a      	uxth	r2, r3
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800cc80:	021b      	lsls	r3, r3, #8
 800cc82:	b29a      	uxth	r2, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800cc90:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc94:	b29a      	uxth	r2, r3
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	7f5b      	ldrb	r3, [r3, #29]
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	4313      	orrs	r3, r2
 800ccaa:	b29a      	uxth	r2, r3
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d87f      	bhi.n	800cdc4 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800ccca:	461a      	mov	r2, r3
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800ccd2:	4413      	add	r3, r2
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	f892 264a 	ldrb.w	r2, [r2, #1610]	; 0x64a
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	dc59      	bgt.n	800cd92 <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800ccde:	e029      	b.n	800cd34 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800cce0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cce4:	f103 020d 	add.w	r2, r3, #13
 800cce8:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800ccea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ccee:	440b      	add	r3, r1
 800ccf0:	6879      	ldr	r1, [r7, #4]
 800ccf2:	440a      	add	r2, r1
 800ccf4:	7c91      	ldrb	r1, [r2, #18]
 800ccf6:	687a      	ldr	r2, [r7, #4]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	460a      	mov	r2, r1
 800ccfc:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800cd00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cd04:	3301      	adds	r3, #1
 800cd06:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800cd0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cd0e:	f103 020d 	add.w	r2, r3, #13
 800cd12:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800cd14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cd18:	440b      	add	r3, r1
 800cd1a:	6879      	ldr	r1, [r7, #4]
 800cd1c:	440a      	add	r2, r1
 800cd1e:	7c91      	ldrb	r1, [r2, #18]
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	4413      	add	r3, r2
 800cd24:	460a      	mov	r2, r1
 800cd26:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										qty_reg++;
 800cd2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cd2e:	3301      	adds	r3, #1
 800cd30:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	7f9b      	ldrb	r3, [r3, #30]
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d3ce      	bcc.n	800cce0 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	7f5a      	ldrb	r2, [r3, #29]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	7f1a      	ldrb	r2, [r3, #28]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	7eda      	ldrb	r2, [r3, #27]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	7e9a      	ldrb	r2, [r3, #26]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x10;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2210      	movs	r2, #16
 800cd6e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2201      	movs	r2, #1
 800cd76:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2206      	movs	r2, #6
 800cd7e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cd88:	1d9a      	adds	r2, r3, #6
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cd90:	e120      	b.n	800cfd4 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2202      	movs	r2, #2
 800cd96:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x90;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2290      	movs	r2, #144	; 0x90
 800cd9e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2201      	movs	r2, #1
 800cda6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2203      	movs	r2, #3
 800cdae:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cdb8:	1d9a      	adds	r2, r3, #6
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800cdc0:	2302      	movs	r3, #2
 800cdc2:	e107      	b.n	800cfd4 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2203      	movs	r2, #3
 800cdc8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x90;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2290      	movs	r2, #144	; 0x90
 800cdd0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2203      	movs	r2, #3
 800cde0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cdea:	1d9a      	adds	r2, r3, #6
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cdf2:	2303      	movs	r3, #3
 800cdf4:	e0ee      	b.n	800cfd4 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x90;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2290      	movs	r2, #144	; 0x90
 800ce02:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2201      	movs	r2, #1
 800ce0a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2203      	movs	r2, #3
 800ce12:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ce1c:	1d9a      	adds	r2, r3, #6
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800ce24:	2301      	movs	r3, #1
 800ce26:	e0d5      	b.n	800cfd4 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	7e5b      	ldrb	r3, [r3, #25]
 800ce34:	3b80      	subs	r3, #128	; 0x80
 800ce36:	b2da      	uxtb	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	7e1a      	ldrb	r2, [r3, #24]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
					m3->_MBUS_2SND[5]=0x03;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2203      	movs	r2, #3
 800ce4c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	7d9a      	ldrb	r2, [r3, #22]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	7d5a      	ldrb	r2, [r3, #21]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	7d1a      	ldrb	r2, [r3, #20]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	7cda      	ldrb	r2, [r3, #19]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	7c9a      	ldrb	r2, [r3, #18]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ce88:	1d9a      	adds	r2, r3, #6
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
					return(1);
 800ce90:	2301      	movs	r3, #1
 800ce92:	e09f      	b.n	800cfd4 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800ce94:	2301      	movs	r3, #1
 800ce96:	e09d      	b.n	800cfd4 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	791b      	ldrb	r3, [r3, #4]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f040 8099 	bne.w	800cfd4 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f103 0212 	add.w	r2, r3, #18
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ceae:	4619      	mov	r1, r3
 800ceb0:	4610      	mov	r0, r2
 800ceb2:	f7fe fda7 	bl	800ba04 <ModBUS_Check>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	f000 808b 	beq.w	800cfd4 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7fe fdbf 	bl	800ba42 <ModBUS_Check_tid>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d04f      	beq.n	800cf6a <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	7e5b      	ldrb	r3, [r3, #25]
 800cece:	2b03      	cmp	r3, #3
 800ced0:	d143      	bne.n	800cf5a <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800ced6:	2300      	movs	r3, #0
 800ced8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800cee2:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800cee4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cee6:	021b      	lsls	r3, r3, #8
 800cee8:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 800cef0:	b29a      	uxth	r2, r3
 800cef2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cef4:	4313      	orrs	r3, r2
 800cef6:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 800cefe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800cf02:	2300      	movs	r3, #0
 800cf04:	643b      	str	r3, [r7, #64]	; 0x40
 800cf06:	e022      	b.n	800cf4e <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800cf08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf0a:	005b      	lsls	r3, r3, #1
 800cf0c:	f103 0209 	add.w	r2, r3, #9
 800cf10:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800cf12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf14:	440b      	add	r3, r1
 800cf16:	005b      	lsls	r3, r3, #1
 800cf18:	6879      	ldr	r1, [r7, #4]
 800cf1a:	440a      	add	r2, r1
 800cf1c:	7c91      	ldrb	r1, [r2, #18]
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	4413      	add	r3, r2
 800cf22:	460a      	mov	r2, r1
 800cf24:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800cf28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf2a:	3305      	adds	r3, #5
 800cf2c:	005a      	lsls	r2, r3, #1
 800cf2e:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800cf30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf32:	440b      	add	r3, r1
 800cf34:	005b      	lsls	r3, r3, #1
 800cf36:	3301      	adds	r3, #1
 800cf38:	6879      	ldr	r1, [r7, #4]
 800cf3a:	440a      	add	r2, r1
 800cf3c:	7c91      	ldrb	r1, [r2, #18]
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	4413      	add	r3, r2
 800cf42:	460a      	mov	r2, r1
 800cf44:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
						for (int i=0;i< qty; i++)
 800cf48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	643b      	str	r3, [r7, #64]	; 0x40
 800cf4e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800cf52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf54:	429a      	cmp	r2, r3
 800cf56:	dbd7      	blt.n	800cf08 <ModBUS+0x1300>

						}


					}
					break;
 800cf58:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	7ddb      	ldrb	r3, [r3, #23]
 800cf5e:	461a      	mov	r2, r3
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	7e9b      	ldrb	r3, [r3, #26]
 800cf64:	1ad3      	subs	r3, r2, r3
 800cf66:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf68:	e034      	b.n	800cfd4 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	7e5b      	ldrb	r3, [r3, #25]
 800cf6e:	3b81      	subs	r3, #129	; 0x81
 800cf70:	2b15      	cmp	r3, #21
 800cf72:	d82f      	bhi.n	800cfd4 <ModBUS+0x13cc>
 800cf74:	a201      	add	r2, pc, #4	; (adr r2, 800cf7c <ModBUS+0x1374>)
 800cf76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf7a:	bf00      	nop
 800cf7c:	0800cfd5 	.word	0x0800cfd5
 800cf80:	0800cfd5 	.word	0x0800cfd5
 800cf84:	0800cfd5 	.word	0x0800cfd5
 800cf88:	0800cfd5 	.word	0x0800cfd5
 800cf8c:	0800cfd5 	.word	0x0800cfd5
 800cf90:	0800cfd5 	.word	0x0800cfd5
 800cf94:	0800cfd5 	.word	0x0800cfd5
 800cf98:	0800cfd5 	.word	0x0800cfd5
 800cf9c:	0800cfd5 	.word	0x0800cfd5
 800cfa0:	0800cfd5 	.word	0x0800cfd5
 800cfa4:	0800cfd5 	.word	0x0800cfd5
 800cfa8:	0800cfd5 	.word	0x0800cfd5
 800cfac:	0800cfd5 	.word	0x0800cfd5
 800cfb0:	0800cfd5 	.word	0x0800cfd5
 800cfb4:	0800cfd5 	.word	0x0800cfd5
 800cfb8:	0800cfd5 	.word	0x0800cfd5
 800cfbc:	0800cfd5 	.word	0x0800cfd5
 800cfc0:	0800cfd5 	.word	0x0800cfd5
 800cfc4:	0800cfd5 	.word	0x0800cfd5
 800cfc8:	0800cfd5 	.word	0x0800cfd5
 800cfcc:	0800cfd5 	.word	0x0800cfd5
 800cfd0:	0800cfd5 	.word	0x0800cfd5
			}
		}
	}


}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3770      	adds	r7, #112	; 0x70
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <SPI_ETH_RESET>:
 */

#include "ETH_W5500.h"

SPI_ETH_RESET(struct W5500_SPI * x)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->RST_PORT, x->RST_PIN , GPIO_PIN_RESET);		//RST LOW
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	68d8      	ldr	r0, [r3, #12]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	8a1b      	ldrh	r3, [r3, #16]
 800cfec:	2200      	movs	r2, #0
 800cfee:	4619      	mov	r1, r3
 800cff0:	f7f6 f9c0 	bl	8003374 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800cff4:	2064      	movs	r0, #100	; 0x64
 800cff6:	f7f5 fd5b 	bl	8002ab0 <HAL_Delay>
	HAL_GPIO_WritePin(x->RST_PORT, x->RST_PIN , GPIO_PIN_SET);			//RST HIGH
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	68d8      	ldr	r0, [r3, #12]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	8a1b      	ldrh	r3, [r3, #16]
 800d002:	2201      	movs	r2, #1
 800d004:	4619      	mov	r1, r3
 800d006:	f7f6 f9b5 	bl	8003374 <HAL_GPIO_WritePin>
}
 800d00a:	bf00      	nop
 800d00c:	4618      	mov	r0, r3
 800d00e:	3708      	adds	r7, #8
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <SPI_ETH_PHY_RESET>:

SPI_ETH_PHY_RESET(struct W5500_SPI * x)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
uint8_t a;

	x->TX[0]=0x00;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	771a      	strb	r2, [r3, #28]
	x->TX[1]=0x2E;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	222e      	movs	r2, #46	; 0x2e
 800d026:	775a      	strb	r2, [r3, #29]
	x->TX[2]=0x00;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	779a      	strb	r2, [r3, #30]
	x->TX[3]=0x00;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2200      	movs	r2, #0
 800d032:	77da      	strb	r2, [r3, #31]
	SPI_ETH(x);			//Realizo la letura de PHYCFGR
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 f81c 	bl	800d072 <SPI_ETH>
	a=x->RX[3];
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d040:	73fb      	strb	r3, [r7, #15]
	a=a&0xFE;
 800d042:	7bfb      	ldrb	r3, [r7, #15]
 800d044:	f023 0301 	bic.w	r3, r3, #1
 800d048:	73fb      	strb	r3, [r7, #15]
	x->TX[0]=0x00;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	771a      	strb	r2, [r3, #28]
	x->TX[1]=0x2E;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	222e      	movs	r2, #46	; 0x2e
 800d054:	775a      	strb	r2, [r3, #29]
	x->TX[2]=0x04;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2204      	movs	r2, #4
 800d05a:	779a      	strb	r2, [r3, #30]
	x->TX[3]=a;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	7bfa      	ldrb	r2, [r7, #15]
 800d060:	77da      	strb	r2, [r3, #31]
	SPI_ETH(x);
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 f805 	bl	800d072 <SPI_ETH>
}
 800d068:	bf00      	nop
 800d06a:	4618      	mov	r0, r3
 800d06c:	3710      	adds	r7, #16
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}

0800d072 <SPI_ETH>:

uint8_t  SPI_ETH(struct  W5500_SPI * x )
{
 800d072:	b580      	push	{r7, lr}
 800d074:	b084      	sub	sp, #16
 800d076:	af02      	add	r7, sp, #8
 800d078:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6858      	ldr	r0, [r3, #4]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	891b      	ldrh	r3, [r3, #8]
 800d082:	2200      	movs	r2, #0
 800d084:	4619      	mov	r1, r3
 800d086:	f7f6 f975 	bl	8003374 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6818      	ldr	r0, [r3, #0]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f103 011c 	add.w	r1, r3, #28
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f103 0220 	add.w	r2, r3, #32
 800d09a:	2364      	movs	r3, #100	; 0x64
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	2304      	movs	r3, #4
 800d0a0:	f7f6 fe7d 	bl	8003d9e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6858      	ldr	r0, [r3, #4]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	891b      	ldrh	r3, [r3, #8]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	f7f6 f960 	bl	8003374 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5500_SPI * x,  uint16_t ph_addr, uint8_t addr,uint8_t op, uint8_t * data, uint8_t lnght)
{
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b086      	sub	sp, #24
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
 800d0ca:	4608      	mov	r0, r1
 800d0cc:	4611      	mov	r1, r2
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	807b      	strh	r3, [r7, #2]
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	707b      	strb	r3, [r7, #1]
 800d0d8:	4613      	mov	r3, r2
 800d0da:	703b      	strb	r3, [r7, #0]
 uint16_t res=0;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	82fb      	strh	r3, [r7, #22]
 uint8_t  a=op;
 800d0e0:	783b      	ldrb	r3, [r7, #0]
 800d0e2:	72fb      	strb	r3, [r7, #11]

 x->TX[0]= (ph_addr & 0xFF00)>>8; 				//High Address Phase
 800d0e4:	887b      	ldrh	r3, [r7, #2]
 800d0e6:	0a1b      	lsrs	r3, r3, #8
 800d0e8:	b29b      	uxth	r3, r3
 800d0ea:	b2da      	uxtb	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	771a      	strb	r2, [r3, #28]
 x->TX[1]= ph_addr & 0x00FF;					//Low Address Phase
 800d0f0:	887b      	ldrh	r3, [r7, #2]
 800d0f2:	b2da      	uxtb	r2, r3
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	775a      	strb	r2, [r3, #29]
 x->TX[2]= ((addr)<<3)|((op)<<2);
 800d0f8:	787b      	ldrb	r3, [r7, #1]
 800d0fa:	00db      	lsls	r3, r3, #3
 800d0fc:	b25a      	sxtb	r2, r3
 800d0fe:	783b      	ldrb	r3, [r7, #0]
 800d100:	009b      	lsls	r3, r3, #2
 800d102:	b25b      	sxtb	r3, r3
 800d104:	4313      	orrs	r3, r2
 800d106:	b25b      	sxtb	r3, r3
 800d108:	b2da      	uxtb	r2, r3
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	779a      	strb	r2, [r3, #30]
 x->TX[3]=0x00;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2200      	movs	r2, #0
 800d112:	77da      	strb	r2, [r3, #31]
 if(op == 1)								//Write operation
 800d114:	783b      	ldrb	r3, [r7, #0]
 800d116:	2b01      	cmp	r3, #1
 800d118:	d11d      	bne.n	800d156 <SPI_ETH_REG+0x94>
 {
	 for(int i=0; i<(lnght); i++)			//Esto solo incrementa 256 ubicaciones
 800d11a:	2300      	movs	r3, #0
 800d11c:	613b      	str	r3, [r7, #16]
 800d11e:	e013      	b.n	800d148 <SPI_ETH_REG+0x86>
	 {
		x->TX[3]=data[i];					//Put data to be sent
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	6a3a      	ldr	r2, [r7, #32]
 800d124:	4413      	add	r3, r2
 800d126:	781a      	ldrb	r2, [r3, #0]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	77da      	strb	r2, [r3, #31]
		res=SPI_ETH(x);						//Send data to device
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f7ff ffa0 	bl	800d072 <SPI_ETH>
 800d132:	4603      	mov	r3, r0
 800d134:	82fb      	strh	r3, [r7, #22]
		x->TX[1]++;							//Address increased once
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	7f5b      	ldrb	r3, [r3, #29]
 800d13a:	3301      	adds	r3, #1
 800d13c:	b2da      	uxtb	r2, r3
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	775a      	strb	r2, [r3, #29]
	 for(int i=0; i<(lnght); i++)			//Esto solo incrementa 256 ubicaciones
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	3301      	adds	r3, #1
 800d146:	613b      	str	r3, [r7, #16]
 800d148:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d14c:	693a      	ldr	r2, [r7, #16]
 800d14e:	429a      	cmp	r2, r3
 800d150:	dbe6      	blt.n	800d120 <SPI_ETH_REG+0x5e>
	 }
	 return(res);
 800d152:	8afb      	ldrh	r3, [r7, #22]
 800d154:	e037      	b.n	800d1c6 <SPI_ETH_REG+0x104>
 }
	 if(op == 0)							//Read operation
 800d156:	783b      	ldrb	r3, [r7, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d134      	bne.n	800d1c6 <SPI_ETH_REG+0x104>
	 {
		 x->TX[3]=0x00;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	77da      	strb	r2, [r3, #31]
		 if (lnght==2)
 800d162:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d166:	2b02      	cmp	r3, #2
 800d168:	d120      	bne.n	800d1ac <SPI_ETH_REG+0xea>
		{
		for(int i=0; i<(lnght); i++)
 800d16a:	2300      	movs	r3, #0
 800d16c:	60fb      	str	r3, [r7, #12]
 800d16e:	e016      	b.n	800d19e <SPI_ETH_REG+0xdc>
			{
			res|=SPI_ETH(x);
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f7ff ff7e 	bl	800d072 <SPI_ETH>
 800d176:	4603      	mov	r3, r0
 800d178:	b29a      	uxth	r2, r3
 800d17a:	8afb      	ldrh	r3, [r7, #22]
 800d17c:	4313      	orrs	r3, r2
 800d17e:	82fb      	strh	r3, [r7, #22]
			x->TX[1]++;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	7f5b      	ldrb	r3, [r3, #29]
 800d184:	3301      	adds	r3, #1
 800d186:	b2da      	uxtb	r2, r3
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	775a      	strb	r2, [r3, #29]
			if (i==0)res=res<<8;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d102      	bne.n	800d198 <SPI_ETH_REG+0xd6>
 800d192:	8afb      	ldrh	r3, [r7, #22]
 800d194:	021b      	lsls	r3, r3, #8
 800d196:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	3301      	adds	r3, #1
 800d19c:	60fb      	str	r3, [r7, #12]
 800d19e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d1a2:	68fa      	ldr	r2, [r7, #12]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	dbe3      	blt.n	800d170 <SPI_ETH_REG+0xae>
			}
		 return(res);
 800d1a8:	8afb      	ldrh	r3, [r7, #22]
 800d1aa:	e00c      	b.n	800d1c6 <SPI_ETH_REG+0x104>
		}else
		{
			res=SPI_ETH(x);
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f7ff ff60 	bl	800d072 <SPI_ETH>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	82fb      	strh	r3, [r7, #22]
			x->TX[1]++;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	7f5b      	ldrb	r3, [r3, #29]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	b2da      	uxtb	r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	775a      	strb	r2, [r3, #29]
			return(res);
 800d1c2:	8afb      	ldrh	r3, [r7, #22]
 800d1c4:	e7ff      	b.n	800d1c6 <SPI_ETH_REG+0x104>
		}
 	 }
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3718      	adds	r7, #24
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5500_SPI * x, uint16_t addr, uint16_t  data, uint8_t socket)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b088      	sub	sp, #32
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	60f8      	str	r0, [r7, #12]
 800d1d6:	4608      	mov	r0, r1
 800d1d8:	4611      	mov	r1, r2
 800d1da:	461a      	mov	r2, r3
 800d1dc:	4603      	mov	r3, r0
 800d1de:	817b      	strh	r3, [r7, #10]
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	813b      	strh	r3, [r7, #8]
 800d1e4:	4613      	mov	r3, r2
 800d1e6:	71fb      	strb	r3, [r7, #7]
	uint16_t res=0;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	83fb      	strh	r3, [r7, #30]
	uint8_t num[2];
			x->TX[2]= ((socket)<<3)|0x04;
 800d1ec:	79fb      	ldrb	r3, [r7, #7]
 800d1ee:	00db      	lsls	r3, r3, #3
 800d1f0:	b25b      	sxtb	r3, r3
 800d1f2:	f043 0304 	orr.w	r3, r3, #4
 800d1f6:	b25b      	sxtb	r3, r3
 800d1f8:	b2da      	uxtb	r2, r3
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	779a      	strb	r2, [r3, #30]
			num[1] = data & 0x00FF ;
 800d1fe:	893b      	ldrh	r3, [r7, #8]
 800d200:	b2db      	uxtb	r3, r3
 800d202:	757b      	strb	r3, [r7, #21]
			num[0] = (data & 0xFF00)>>8 ;
 800d204:	893b      	ldrh	r3, [r7, #8]
 800d206:	0a1b      	lsrs	r3, r3, #8
 800d208:	b29b      	uxth	r3, r3
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	753b      	strb	r3, [r7, #20]

			 for(int i=0; i<(2); i++)
 800d20e:	2300      	movs	r3, #0
 800d210:	61bb      	str	r3, [r7, #24]
 800d212:	e01b      	b.n	800d24c <SPI_ETH_WR_REG_16+0x7e>
				 {
				 	x->TX[1]= addr & 0x00FF;//x->TX[2]= addr & 0x00FF;
 800d214:	897b      	ldrh	r3, [r7, #10]
 800d216:	b2da      	uxtb	r2, r3
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	775a      	strb	r2, [r3, #29]
				 	x->TX[0]=(addr & 0xFF00)>>8;//x->TX[1]=(addr & 0xFF00)>>8;
 800d21c:	897b      	ldrh	r3, [r7, #10]
 800d21e:	0a1b      	lsrs	r3, r3, #8
 800d220:	b29b      	uxth	r3, r3
 800d222:	b2da      	uxtb	r2, r3
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	771a      	strb	r2, [r3, #28]
					addr++;
 800d228:	897b      	ldrh	r3, [r7, #10]
 800d22a:	3301      	adds	r3, #1
 800d22c:	817b      	strh	r3, [r7, #10]
					x->TX[3]=num[i];
 800d22e:	f107 0214 	add.w	r2, r7, #20
 800d232:	69bb      	ldr	r3, [r7, #24]
 800d234:	4413      	add	r3, r2
 800d236:	781a      	ldrb	r2, [r3, #0]
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	77da      	strb	r2, [r3, #31]
					res=SPI_ETH(x);
 800d23c:	68f8      	ldr	r0, [r7, #12]
 800d23e:	f7ff ff18 	bl	800d072 <SPI_ETH>
 800d242:	4603      	mov	r3, r0
 800d244:	83fb      	strh	r3, [r7, #30]
			 for(int i=0; i<(2); i++)
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	3301      	adds	r3, #1
 800d24a:	61bb      	str	r3, [r7, #24]
 800d24c:	69bb      	ldr	r3, [r7, #24]
 800d24e:	2b01      	cmp	r3, #1
 800d250:	dde0      	ble.n	800d214 <SPI_ETH_WR_REG_16+0x46>
				 }
			 return(res);
 800d252:	8bfb      	ldrh	r3, [r7, #30]
}
 800d254:	4618      	mov	r0, r3
 800d256:	3720      	adds	r7, #32
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5500_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght, uint8_t socket )
{
 800d25c:	b590      	push	{r4, r7, lr}
 800d25e:	b087      	sub	sp, #28
 800d260:	af00      	add	r7, sp, #0
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	607a      	str	r2, [r7, #4]
 800d266:	461a      	mov	r2, r3
 800d268:	460b      	mov	r3, r1
 800d26a:	817b      	strh	r3, [r7, #10]
 800d26c:	4613      	mov	r3, r2
 800d26e:	813b      	strh	r3, [r7, #8]
		x->TX[2]= ((socket)<<3)|0x00;
 800d270:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d274:	00db      	lsls	r3, r3, #3
 800d276:	b2da      	uxtb	r2, r3
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	779a      	strb	r2, [r3, #30]
	if(lnght < 2048)
 800d27c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d27e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d282:	d226      	bcs.n	800d2d2 <SPI_ETH_RD_RCV_REG_16+0x76>
	{
			x->TX[3]=0x00;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2200      	movs	r2, #0
 800d288:	77da      	strb	r2, [r3, #31]
			for(int i=0; i<(lnght); i++)
 800d28a:	2300      	movs	r3, #0
 800d28c:	617b      	str	r3, [r7, #20]
 800d28e:	e01a      	b.n	800d2c6 <SPI_ETH_RD_RCV_REG_16+0x6a>
				{
				x->TX[1] = addr & 0x00FF;
 800d290:	897b      	ldrh	r3, [r7, #10]
 800d292:	b2da      	uxtb	r2, r3
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	775a      	strb	r2, [r3, #29]
				x->TX[0] = (addr & 0xFF00)>>8;
 800d298:	897b      	ldrh	r3, [r7, #10]
 800d29a:	0a1b      	lsrs	r3, r3, #8
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	b2da      	uxtb	r2, r3
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	771a      	strb	r2, [r3, #28]
				data[i+offset]=SPI_ETH(x);
 800d2a4:	893a      	ldrh	r2, [r7, #8]
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	4413      	add	r3, r2
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	189c      	adds	r4, r3, r2
 800d2b0:	68f8      	ldr	r0, [r7, #12]
 800d2b2:	f7ff fede 	bl	800d072 <SPI_ETH>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	7023      	strb	r3, [r4, #0]
				addr++;
 800d2ba:	897b      	ldrh	r3, [r7, #10]
 800d2bc:	3301      	adds	r3, #1
 800d2be:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	617b      	str	r3, [r7, #20]
 800d2c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d2c8:	697a      	ldr	r2, [r7, #20]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	dbe0      	blt.n	800d290 <SPI_ETH_RD_RCV_REG_16+0x34>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	e000      	b.n	800d2d4 <SPI_ETH_RD_RCV_REG_16+0x78>
	}
	else
	{
	return(1);
 800d2d2:	2301      	movs	r3, #1
	}
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	371c      	adds	r7, #28
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd90      	pop	{r4, r7, pc}

0800d2dc <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5500_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght, uint8_t socket )
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b086      	sub	sp, #24
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	60f8      	str	r0, [r7, #12]
 800d2e4:	607a      	str	r2, [r7, #4]
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	817b      	strh	r3, [r7, #10]
 800d2ec:	4613      	mov	r3, r2
 800d2ee:	813b      	strh	r3, [r7, #8]
		x->TX[2]= ((socket)<<3)|0x04;
 800d2f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d2f4:	00db      	lsls	r3, r3, #3
 800d2f6:	b25b      	sxtb	r3, r3
 800d2f8:	f043 0304 	orr.w	r3, r3, #4
 800d2fc:	b25b      	sxtb	r3, r3
 800d2fe:	b2da      	uxtb	r2, r3
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	779a      	strb	r2, [r3, #30]
	if(lnght < 2048)
 800d304:	8c3b      	ldrh	r3, [r7, #32]
 800d306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d30a:	d224      	bcs.n	800d356 <SPI_ETH_WR_TX_REG_16+0x7a>
	{

			for(int i=0; i<(lnght); i++)
 800d30c:	2300      	movs	r3, #0
 800d30e:	617b      	str	r3, [r7, #20]
 800d310:	e01b      	b.n	800d34a <SPI_ETH_WR_TX_REG_16+0x6e>
				{
				x->TX[1] = addr & 0x00FF;
 800d312:	897b      	ldrh	r3, [r7, #10]
 800d314:	b2da      	uxtb	r2, r3
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	775a      	strb	r2, [r3, #29]
				x->TX[0] = (addr & 0xFF00)>>8;
 800d31a:	897b      	ldrh	r3, [r7, #10]
 800d31c:	0a1b      	lsrs	r3, r3, #8
 800d31e:	b29b      	uxth	r3, r3
 800d320:	b2da      	uxtb	r2, r3
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	771a      	strb	r2, [r3, #28]
				x->TX[3]= x->data[i+offset];
 800d326:	893a      	ldrh	r2, [r7, #8]
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	4413      	add	r3, r2
 800d32c:	68fa      	ldr	r2, [r7, #12]
 800d32e:	4413      	add	r3, r2
 800d330:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	77da      	strb	r2, [r3, #31]
				SPI_ETH(x);
 800d338:	68f8      	ldr	r0, [r7, #12]
 800d33a:	f7ff fe9a 	bl	800d072 <SPI_ETH>
				addr++;
 800d33e:	897b      	ldrh	r3, [r7, #10]
 800d340:	3301      	adds	r3, #1
 800d342:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	3301      	adds	r3, #1
 800d348:	617b      	str	r3, [r7, #20]
 800d34a:	8c3b      	ldrh	r3, [r7, #32]
 800d34c:	697a      	ldr	r2, [r7, #20]
 800d34e:	429a      	cmp	r2, r3
 800d350:	dbdf      	blt.n	800d312 <SPI_ETH_WR_TX_REG_16+0x36>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d352:	2300      	movs	r3, #0
 800d354:	e000      	b.n	800d358 <SPI_ETH_WR_TX_REG_16+0x7c>
	}
	else
	{
	return(1);
 800d356:	2301      	movs	r3, #1
	}
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3718      	adds	r7, #24
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5500_SPI * y, uint8_t socket, uint8_t z)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	460b      	mov	r3, r1
 800d36a:	70fb      	strb	r3, [r7, #3]
 800d36c:	4613      	mov	r3, r2
 800d36e:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= 0x00; 				//High Address Phase Hardcoded MR Register
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	771a      	strb	r2, [r3, #28]
	y->TX[1]= 0x01;					//Low Address Phase Command
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2201      	movs	r2, #1
 800d37a:	775a      	strb	r2, [r3, #29]
	y->TX[2]= ((socket<<3)|0x04);	//Control Phase address + R/W + OP Mode
 800d37c:	78fb      	ldrb	r3, [r7, #3]
 800d37e:	00db      	lsls	r3, r3, #3
 800d380:	b25b      	sxtb	r3, r3
 800d382:	f043 0304 	orr.w	r3, r3, #4
 800d386:	b25b      	sxtb	r3, r3
 800d388:	b2da      	uxtb	r2, r3
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	779a      	strb	r2, [r3, #30]
	y->TX[3]= z ;		//Load data to save
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	78ba      	ldrb	r2, [r7, #2]
 800d392:	77da      	strb	r2, [r3, #31]
	SPI_ETH(y);
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f7ff fe6c 	bl	800d072 <SPI_ETH>
}
 800d39a:	bf00      	nop
 800d39c:	4618      	mov	r0, r3
 800d39e:	3708      	adds	r7, #8
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5500_SPI * y, uint8_t socket, uint8_t z)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	70fb      	strb	r3, [r7, #3]
 800d3b0:	4613      	mov	r3, r2
 800d3b2:	70bb      	strb	r3, [r7, #2]
		y->TX[0]= 0x00; 				//High Address Phase Hardcoded MR Register
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	771a      	strb	r2, [r3, #28]
		y->TX[1]= 0x00;					//Low Address Phase Mode
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	775a      	strb	r2, [r3, #29]
		y->TX[2]= ((socket)<<3)|0x04;	//Control Phase address + R/W + OP Mode
 800d3c0:	78fb      	ldrb	r3, [r7, #3]
 800d3c2:	00db      	lsls	r3, r3, #3
 800d3c4:	b25b      	sxtb	r3, r3
 800d3c6:	f043 0304 	orr.w	r3, r3, #4
 800d3ca:	b25b      	sxtb	r3, r3
 800d3cc:	b2da      	uxtb	r2, r3
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	779a      	strb	r2, [r3, #30]
		y->TX[3]= z ;		//Load data to save
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	78ba      	ldrb	r2, [r7, #2]
 800d3d6:	77da      	strb	r2, [r3, #31]

	SPI_ETH(y);
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f7ff fe4a 	bl	800d072 <SPI_ETH>
}
 800d3de:	bf00      	nop
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3708      	adds	r7, #8
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <eth_init>:


uint8_t eth_init(struct W5500_SPI * ETH)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af02      	add	r7, sp, #8
 800d3ee:	6078      	str	r0, [r7, #4]
  	 SPI_ETH_RESET(ETH);	//Reset W5500 por hardware
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f7ff fdf3 	bl	800cfdc <SPI_ETH_RESET>
  	 HAL_Delay(800);
 800d3f6:	f44f 7048 	mov.w	r0, #800	; 0x320
 800d3fa:	f7f5 fb59 	bl	8002ab0 <HAL_Delay>

  	 SPI_ETH_REG(ETH, GAR,COMM_REG,SPI_WRITE, ETH->GAR,4);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d404:	3304      	adds	r3, #4
 800d406:	2204      	movs	r2, #4
 800d408:	9201      	str	r2, [sp, #4]
 800d40a:	9300      	str	r3, [sp, #0]
 800d40c:	2301      	movs	r3, #1
 800d40e:	2200      	movs	r2, #0
 800d410:	2101      	movs	r1, #1
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f7ff fe55 	bl	800d0c2 <SPI_ETH_REG>

	 ETH->T8=0x00;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d41e:	2200      	movs	r2, #0
 800d420:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, IMR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d42a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d42e:	461a      	mov	r2, r3
 800d430:	2301      	movs	r3, #1
 800d432:	9301      	str	r3, [sp, #4]
 800d434:	9200      	str	r2, [sp, #0]
 800d436:	2301      	movs	r3, #1
 800d438:	2200      	movs	r2, #0
 800d43a:	2116      	movs	r1, #22
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f7ff fe40 	bl	800d0c2 <SPI_ETH_REG>

	 ETH->T8=0x0F;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d448:	220f      	movs	r2, #15
 800d44a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RTR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d454:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d458:	461a      	mov	r2, r3
 800d45a:	2301      	movs	r3, #1
 800d45c:	9301      	str	r3, [sp, #4]
 800d45e:	9200      	str	r2, [sp, #0]
 800d460:	2301      	movs	r3, #1
 800d462:	2200      	movs	r2, #0
 800d464:	2119      	movs	r1, #25
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f7ff fe2b 	bl	800d0c2 <SPI_ETH_REG>

	 ETH->T8=0xA0;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d472:	22a0      	movs	r2, #160	; 0xa0
 800d474:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RTR+1,COMM_REG,SPI_WRITE, ETH->T8,1);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d47e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d482:	461a      	mov	r2, r3
 800d484:	2301      	movs	r3, #1
 800d486:	9301      	str	r3, [sp, #4]
 800d488:	9200      	str	r2, [sp, #0]
 800d48a:	2301      	movs	r3, #1
 800d48c:	2200      	movs	r2, #0
 800d48e:	211a      	movs	r1, #26
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f7ff fe16 	bl	800d0c2 <SPI_ETH_REG>

	 ETH->T8=0x07;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d49c:	2207      	movs	r2, #7
 800d49e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RCR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4a8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d4ac:	461a      	mov	r2, r3
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	9301      	str	r3, [sp, #4]
 800d4b2:	9200      	str	r2, [sp, #0]
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	211b      	movs	r1, #27
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f7ff fe01 	bl	800d0c2 <SPI_ETH_REG>

	 ETH->T8=0x00;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, SIMR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4d2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	2301      	movs	r3, #1
 800d4da:	9301      	str	r3, [sp, #4]
 800d4dc:	9200      	str	r2, [sp, #0]
 800d4de:	2301      	movs	r3, #1
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	2118      	movs	r1, #24
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7ff fdec 	bl	800d0c2 <SPI_ETH_REG>

	 SPI_ETH_REG(ETH, SHAR,COMM_REG,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d4f0:	330c      	adds	r3, #12
 800d4f2:	2206      	movs	r2, #6
 800d4f4:	9201      	str	r2, [sp, #4]
 800d4f6:	9300      	str	r3, [sp, #0]
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	2109      	movs	r1, #9
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f7ff fddf 	bl	800d0c2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-MAC SET\r\n",strlen("\r\nETH-W5500-MAC SET"));
 800d504:	2113      	movs	r1, #19
 800d506:	481d      	ldr	r0, [pc, #116]	; (800d57c <eth_init+0x194>)
 800d508:	f7f3 ffbc 	bl	8001484 <ITM0_Write>
	 SPI_ETH_REG(ETH, GAR,COMM_REG,SPI_WRITE, ETH->GAR,4);	//SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d512:	3304      	adds	r3, #4
 800d514:	2204      	movs	r2, #4
 800d516:	9201      	str	r2, [sp, #4]
 800d518:	9300      	str	r3, [sp, #0]
 800d51a:	2301      	movs	r3, #1
 800d51c:	2200      	movs	r2, #0
 800d51e:	2101      	movs	r1, #1
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f7ff fdce 	bl	800d0c2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-GATEWAY SET\r\n",strlen("\r\nETH-W5500-GATEWAY SET\r\n"));									//same for server and client
 800d526:	2119      	movs	r1, #25
 800d528:	4815      	ldr	r0, [pc, #84]	; (800d580 <eth_init+0x198>)
 800d52a:	f7f3 ffab 	bl	8001484 <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR,COMM_REG,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d534:	3308      	adds	r3, #8
 800d536:	2204      	movs	r2, #4
 800d538:	9201      	str	r2, [sp, #4]
 800d53a:	9300      	str	r3, [sp, #0]
 800d53c:	2301      	movs	r3, #1
 800d53e:	2200      	movs	r2, #0
 800d540:	2105      	movs	r1, #5
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f7ff fdbd 	bl	800d0c2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-SUBNET SET\r\n",strlen("\r\nETH-W5500-SUBNET SET"));											//same for server and client
 800d548:	2116      	movs	r1, #22
 800d54a:	480e      	ldr	r0, [pc, #56]	; (800d584 <eth_init+0x19c>)
 800d54c:	f7f3 ff9a 	bl	8001484 <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR,COMM_REG,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d556:	3312      	adds	r3, #18
 800d558:	2204      	movs	r2, #4
 800d55a:	9201      	str	r2, [sp, #4]
 800d55c:	9300      	str	r3, [sp, #0]
 800d55e:	2301      	movs	r3, #1
 800d560:	2200      	movs	r2, #0
 800d562:	210f      	movs	r1, #15
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f7ff fdac 	bl	800d0c2 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-IP SET\r\n",strlen("\r\nETH-W5500-IP SET"));
 800d56a:	2112      	movs	r1, #18
 800d56c:	4806      	ldr	r0, [pc, #24]	; (800d588 <eth_init+0x1a0>)
 800d56e:	f7f3 ff89 	bl	8001484 <ITM0_Write>

}
 800d572:	bf00      	nop
 800d574:	4618      	mov	r0, r3
 800d576:	3708      	adds	r7, #8
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	08010b1c 	.word	0x08010b1c
 800d580:	08010b34 	.word	0x08010b34
 800d584:	08010b50 	.word	0x08010b50
 800d588:	08010b6c 	.word	0x08010b6c

0800d58c <eth_socket_init>:

uint8_t eth_socket_init(struct W5500_SPI * ETH, uint8_t socket)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b086      	sub	sp, #24
 800d590:	af02      	add	r7, sp, #8
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	460b      	mov	r3, r1
 800d596:	70fb      	strb	r3, [r7, #3]

	 ETH->T8=0x02;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d59e:	2202      	movs	r2, #2
 800d5a0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S0_REG,SPI_WRITE, ETH->T8,1);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	9301      	str	r3, [sp, #4]
 800d5b4:	9200      	str	r2, [sp, #0]
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	211e      	movs	r1, #30
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f7ff fd80 	bl	800d0c2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S0_REG,SPI_WRITE, ETH->T8,1);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5c8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d5cc:	461a      	mov	r2, r3
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	9301      	str	r3, [sp, #4]
 800d5d2:	9200      	str	r2, [sp, #0]
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	211f      	movs	r1, #31
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f7ff fd71 	bl	800d0c2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S1_REG,SPI_WRITE, ETH->T8,1);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5e6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	9301      	str	r3, [sp, #4]
 800d5f0:	9200      	str	r2, [sp, #0]
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	2205      	movs	r2, #5
 800d5f6:	211e      	movs	r1, #30
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f7ff fd62 	bl	800d0c2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S1_REG,SPI_WRITE, ETH->T8,1);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d604:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d608:	461a      	mov	r2, r3
 800d60a:	2301      	movs	r3, #1
 800d60c:	9301      	str	r3, [sp, #4]
 800d60e:	9200      	str	r2, [sp, #0]
 800d610:	2301      	movs	r3, #1
 800d612:	2205      	movs	r2, #5
 800d614:	211f      	movs	r1, #31
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f7ff fd53 	bl	800d0c2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S2_REG,SPI_WRITE, ETH->T8,1);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d622:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d626:	461a      	mov	r2, r3
 800d628:	2301      	movs	r3, #1
 800d62a:	9301      	str	r3, [sp, #4]
 800d62c:	9200      	str	r2, [sp, #0]
 800d62e:	2301      	movs	r3, #1
 800d630:	2209      	movs	r2, #9
 800d632:	211e      	movs	r1, #30
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f7ff fd44 	bl	800d0c2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S2_REG,SPI_WRITE, ETH->T8,1);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d640:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d644:	461a      	mov	r2, r3
 800d646:	2301      	movs	r3, #1
 800d648:	9301      	str	r3, [sp, #4]
 800d64a:	9200      	str	r2, [sp, #0]
 800d64c:	2301      	movs	r3, #1
 800d64e:	2209      	movs	r2, #9
 800d650:	211f      	movs	r1, #31
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f7ff fd35 	bl	800d0c2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S3_REG,SPI_WRITE, ETH->T8,1);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d65e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d662:	461a      	mov	r2, r3
 800d664:	2301      	movs	r3, #1
 800d666:	9301      	str	r3, [sp, #4]
 800d668:	9200      	str	r2, [sp, #0]
 800d66a:	2301      	movs	r3, #1
 800d66c:	220d      	movs	r2, #13
 800d66e:	211e      	movs	r1, #30
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f7ff fd26 	bl	800d0c2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S3_REG,SPI_WRITE, ETH->T8,1);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d67c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d680:	461a      	mov	r2, r3
 800d682:	2301      	movs	r3, #1
 800d684:	9301      	str	r3, [sp, #4]
 800d686:	9200      	str	r2, [sp, #0]
 800d688:	2301      	movs	r3, #1
 800d68a:	220d      	movs	r2, #13
 800d68c:	211f      	movs	r1, #31
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f7ff fd17 	bl	800d0c2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S4_REG,SPI_WRITE, ETH->T8,1);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d69a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d69e:	461a      	mov	r2, r3
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	9301      	str	r3, [sp, #4]
 800d6a4:	9200      	str	r2, [sp, #0]
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	2211      	movs	r2, #17
 800d6aa:	211e      	movs	r1, #30
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f7ff fd08 	bl	800d0c2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S4_REG,SPI_WRITE, ETH->T8,1);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6b8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d6bc:	461a      	mov	r2, r3
 800d6be:	2301      	movs	r3, #1
 800d6c0:	9301      	str	r3, [sp, #4]
 800d6c2:	9200      	str	r2, [sp, #0]
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	2211      	movs	r2, #17
 800d6c8:	211f      	movs	r1, #31
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f7ff fcf9 	bl	800d0c2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S5_REG,SPI_WRITE, ETH->T8,1);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6d6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d6da:	461a      	mov	r2, r3
 800d6dc:	2301      	movs	r3, #1
 800d6de:	9301      	str	r3, [sp, #4]
 800d6e0:	9200      	str	r2, [sp, #0]
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	2215      	movs	r2, #21
 800d6e6:	211e      	movs	r1, #30
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7ff fcea 	bl	800d0c2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S5_REG,SPI_WRITE, ETH->T8,1);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6f4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	9200      	str	r2, [sp, #0]
 800d700:	2301      	movs	r3, #1
 800d702:	2215      	movs	r2, #21
 800d704:	211f      	movs	r1, #31
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f7ff fcdb 	bl	800d0c2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S6_REG,SPI_WRITE, ETH->T8,1);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d712:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d716:	461a      	mov	r2, r3
 800d718:	2301      	movs	r3, #1
 800d71a:	9301      	str	r3, [sp, #4]
 800d71c:	9200      	str	r2, [sp, #0]
 800d71e:	2301      	movs	r3, #1
 800d720:	2219      	movs	r2, #25
 800d722:	211e      	movs	r1, #30
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f7ff fccc 	bl	800d0c2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S6_REG,SPI_WRITE, ETH->T8,1);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d730:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d734:	461a      	mov	r2, r3
 800d736:	2301      	movs	r3, #1
 800d738:	9301      	str	r3, [sp, #4]
 800d73a:	9200      	str	r2, [sp, #0]
 800d73c:	2301      	movs	r3, #1
 800d73e:	2219      	movs	r2, #25
 800d740:	211f      	movs	r1, #31
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f7ff fcbd 	bl	800d0c2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S7_REG,SPI_WRITE, ETH->T8,1);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d74e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d752:	461a      	mov	r2, r3
 800d754:	2301      	movs	r3, #1
 800d756:	9301      	str	r3, [sp, #4]
 800d758:	9200      	str	r2, [sp, #0]
 800d75a:	2301      	movs	r3, #1
 800d75c:	221d      	movs	r2, #29
 800d75e:	211e      	movs	r1, #30
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f7ff fcae 	bl	800d0c2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S7_REG,SPI_WRITE, ETH->T8,1);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d76c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d770:	461a      	mov	r2, r3
 800d772:	2301      	movs	r3, #1
 800d774:	9301      	str	r3, [sp, #4]
 800d776:	9200      	str	r2, [sp, #0]
 800d778:	2301      	movs	r3, #1
 800d77a:	221d      	movs	r2, #29
 800d77c:	211f      	movs	r1, #31
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f7ff fc9f 	bl	800d0c2 <SPI_ETH_REG>
	 ETH->T8=0x00;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d78a:	2200      	movs	r2, #0
 800d78c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, S_TX_WR,S0_REG,SPI_WRITE, ETH->T8,1);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d796:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d79a:	461a      	mov	r2, r3
 800d79c:	2301      	movs	r3, #1
 800d79e:	9301      	str	r3, [sp, #4]
 800d7a0:	9200      	str	r2, [sp, #0]
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	2124      	movs	r1, #36	; 0x24
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f7ff fc8a 	bl	800d0c2 <SPI_ETH_REG>
	 SPI_ETH_REG(ETH, S_TX_WR+1,S0_REG,SPI_WRITE, ETH->T8,1);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7b4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	9301      	str	r3, [sp, #4]
 800d7be:	9200      	str	r2, [sp, #0]
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	2125      	movs	r1, #37	; 0x25
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f7ff fc7b 	bl	800d0c2 <SPI_ETH_REG>
	 uint16_t b=0;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	81fb      	strh	r3, [r7, #14]
	 uint8_t spi_Data[2];
	 b = SPI_ETH_REG(ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 800d7d0:	2302      	movs	r3, #2
 800d7d2:	9301      	str	r3, [sp, #4]
 800d7d4:	f107 030c 	add.w	r3, r7, #12
 800d7d8:	9300      	str	r3, [sp, #0]
 800d7da:	2300      	movs	r3, #0
 800d7dc:	2201      	movs	r2, #1
 800d7de:	2124      	movs	r1, #36	; 0x24
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f7ff fc6e 	bl	800d0c2 <SPI_ETH_REG>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	81fb      	strh	r3, [r7, #14]
	 //ITM0_Write("\r\nETH-W5500-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP SET"));									//same for server and client
	 SPI_ETH_REG(ETH, S_PORT, S0_REG,SPI_WRITE, ETH->S_PORT,2);									//same for server and client
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d7f0:	3302      	adds	r3, #2
 800d7f2:	2202      	movs	r2, #2
 800d7f4:	9201      	str	r2, [sp, #4]
 800d7f6:	9300      	str	r3, [sp, #0]
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	2201      	movs	r2, #1
 800d7fc:	2104      	movs	r1, #4
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f7ff fc5f 	bl	800d0c2 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800d804:	212c      	movs	r1, #44	; 0x2c
 800d806:	4804      	ldr	r0, [pc, #16]	; (800d818 <eth_socket_init+0x28c>)
 800d808:	f7f3 fe3c 	bl	8001484 <ITM0_Write>


}
 800d80c:	bf00      	nop
 800d80e:	4618      	mov	r0, r3
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	08010b84 	.word	0x08010b84

0800d81c <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5500_SPI * y, uint8_t socket)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	460b      	mov	r3, r1
 800d826:	70fb      	strb	r3, [r7, #3]
			y->TX[0]= 0x00; 				//High Address Phase Hardcoded Stat Register
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	771a      	strb	r2, [r3, #28]
			y->TX[1]= 0x03;					//Low Address Phase Mode
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2203      	movs	r2, #3
 800d832:	775a      	strb	r2, [r3, #29]
			y->TX[2]= ((socket)<<3)|0x00;	   //Control Phase address + R/W + OP Mode
 800d834:	78fb      	ldrb	r3, [r7, #3]
 800d836:	00db      	lsls	r3, r3, #3
 800d838:	b2da      	uxtb	r2, r3
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	779a      	strb	r2, [r3, #30]
			SPI_ETH(y);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f7ff fc17 	bl	800d072 <SPI_ETH>
			return(y->RX[3]);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23

}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3708      	adds	r7, #8
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}

0800d852 <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5500_SPI * y, uint8_t socket)
{
 800d852:	b580      	push	{r7, lr}
 800d854:	b082      	sub	sp, #8
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
 800d85a:	460b      	mov	r3, r1
 800d85c:	70fb      	strb	r3, [r7, #3]
			y->TX[0]= 0x00; 				//High Address Phase Hardcoded Command Register
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2200      	movs	r2, #0
 800d862:	771a      	strb	r2, [r3, #28]
			y->TX[1]= 0x01;					//Low Address Phase Mode
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2201      	movs	r2, #1
 800d868:	775a      	strb	r2, [r3, #29]
			y->TX[2]= ((socket)<<3)|0x00;	   //Control Phase address + R/W + OP Mode
 800d86a:	78fb      	ldrb	r3, [r7, #3]
 800d86c:	00db      	lsls	r3, r3, #3
 800d86e:	b2da      	uxtb	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	779a      	strb	r2, [r3, #30]
			SPI_ETH(y);
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f7ff fbfc 	bl	800d072 <SPI_ETH>
			return(y->RX[3]);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23

}
 800d880:	4618      	mov	r0, r3
 800d882:	3708      	adds	r7, #8
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5500_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b08c      	sub	sp, #48	; 0x30
 800d88c:	af02      	add	r7, sp, #8
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	607a      	str	r2, [r7, #4]
 800d892:	461a      	mov	r2, r3
 800d894:	460b      	mov	r3, r1
 800d896:	72fb      	strb	r3, [r7, #11]
 800d898:	4613      	mov	r3, r2
 800d89a:	813b      	strh	r3, [r7, #8]
	uint16_t S_bf_rcv_offset=0,
 800d89c:	2300      	movs	r3, #0
 800d89e:	84fb      	strh	r3, [r7, #38]	; 0x26
			 left_size=0,
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	84bb      	strh	r3, [r7, #36]	; 0x24
			 upper_size=0,
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	847b      	strh	r3, [r7, #34]	; 0x22
			 destination_addr=0,
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	843b      	strh	r3, [r7, #32]
			 S_RX_RD=0,
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	83fb      	strh	r3, [r7, #30]
			 S_get_offset=0,
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	83bb      	strh	r3, [r7, #28]
			 S_get_start_address=0,
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	837b      	strh	r3, [r7, #26]
			 S_mem_pointer=0,
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	833b      	strh	r3, [r7, #24]
			 RX_MASK=0,
 800d8bc:	2300      	movs	r3, #0
 800d8be:	82fb      	strh	r3, [r7, #22]
			 RX_BASE=0;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	82bb      	strh	r3, [r7, #20]
			RX_BASE=ETH->gS3_RX_BASE;
		}
		break;*/
		default :
		{
			RX_MASK=ETH->gS_RX_MASK;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d8ce:	82fb      	strh	r3, [r7, #22]
			RX_BASE=ETH->gS_RX_BASE;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d8da:	82bb      	strh	r3, [r7, #20]
		}
		break;
 800d8dc:	bf00      	nop
	}

	S_RX_RD = SPI_ETH_REG(ETH, S_RX_RD0 ,S0_REG ,SPI_READ, spi_Data,2);//S_RX_RD = SPI_ETH_REG(ETH, S_RX_RD_ADDR_BASEHH + socket ,S_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800d8de:	2302      	movs	r3, #2
 800d8e0:	9301      	str	r3, [sp, #4]
 800d8e2:	f107 0310 	add.w	r3, r7, #16
 800d8e6:	9300      	str	r3, [sp, #0]
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	2128      	movs	r1, #40	; 0x28
 800d8ee:	68f8      	ldr	r0, [r7, #12]
 800d8f0:	f7ff fbe7 	bl	800d0c2 <SPI_ETH_REG>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	83fb      	strh	r3, [r7, #30]
	S_get_offset = S_RX_RD & RX_MASK;
 800d8f8:	8bfa      	ldrh	r2, [r7, #30]
 800d8fa:	8afb      	ldrh	r3, [r7, #22]
 800d8fc:	4013      	ands	r3, r2
 800d8fe:	83bb      	strh	r3, [r7, #28]
	S_get_start_address  = RX_BASE + S_get_offset;
 800d900:	8aba      	ldrh	r2, [r7, #20]
 800d902:	8bbb      	ldrh	r3, [r7, #28]
 800d904:	4413      	add	r3, r2
 800d906:	837b      	strh	r3, [r7, #26]
	if((S_get_offset  + sizedata )>(RX_MASK + 1))
 800d908:	8bba      	ldrh	r2, [r7, #28]
 800d90a:	893b      	ldrh	r3, [r7, #8]
 800d90c:	441a      	add	r2, r3
 800d90e:	8afb      	ldrh	r3, [r7, #22]
 800d910:	3301      	adds	r3, #1
 800d912:	429a      	cmp	r2, r3
 800d914:	dd30      	ble.n	800d978 <eth_rd_SOCKET_DATA+0xf0>
		{
			upper_size = (RX_MASK + 1) - S_get_offset ;
 800d916:	8afa      	ldrh	r2, [r7, #22]
 800d918:	8bbb      	ldrh	r3, [r7, #28]
 800d91a:	1ad3      	subs	r3, r2, r3
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	3301      	adds	r3, #1
 800d920:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , S_get_start_address , ETH->data , S_bf_rcv_offset, upper_size, socket);
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d928:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800d92a:	8b79      	ldrh	r1, [r7, #26]
 800d92c:	7afb      	ldrb	r3, [r7, #11]
 800d92e:	9301      	str	r3, [sp, #4]
 800d930:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d932:	9300      	str	r3, [sp, #0]
 800d934:	4603      	mov	r3, r0
 800d936:	68f8      	ldr	r0, [r7, #12]
 800d938:	f7ff fc90 	bl	800d25c <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800d93c:	8c3a      	ldrh	r2, [r7, #32]
 800d93e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d940:	4413      	add	r3, r2
 800d942:	843b      	strh	r3, [r7, #32]
			left_size=sizedata-upper_size;
 800d944:	893a      	ldrh	r2, [r7, #8]
 800d946:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d948:	1ad3      	subs	r3, r2, r3
 800d94a:	84bb      	strh	r3, [r7, #36]	; 0x24
			S_bf_rcv_offset=upper_size;
 800d94c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d94e:	84fb      	strh	r3, [r7, #38]	; 0x26
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S_bf_rcv_offset, left_size, socket);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d956:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800d958:	8ab9      	ldrh	r1, [r7, #20]
 800d95a:	7afb      	ldrb	r3, [r7, #11]
 800d95c:	9301      	str	r3, [sp, #4]
 800d95e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d960:	9300      	str	r3, [sp, #0]
 800d962:	4603      	mov	r3, r0
 800d964:	68f8      	ldr	r0, [r7, #12]
 800d966:	f7ff fc79 	bl	800d25c <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S_RX_RD + sizedata;
 800d96a:	8bfa      	ldrh	r2, [r7, #30]
 800d96c:	893b      	ldrh	r3, [r7, #8]
 800d96e:	4413      	add	r3, r2
 800d970:	b29a      	uxth	r2, r3
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	801a      	strh	r2, [r3, #0]
 800d976:	e012      	b.n	800d99e <eth_rd_SOCKET_DATA+0x116>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S_get_start_address , ETH->data , S_bf_rcv_offset, sizedata, socket);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d97e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800d980:	8b79      	ldrh	r1, [r7, #26]
 800d982:	7afb      	ldrb	r3, [r7, #11]
 800d984:	9301      	str	r3, [sp, #4]
 800d986:	893b      	ldrh	r3, [r7, #8]
 800d988:	9300      	str	r3, [sp, #0]
 800d98a:	4603      	mov	r3, r0
 800d98c:	68f8      	ldr	r0, [r7, #12]
 800d98e:	f7ff fc65 	bl	800d25c <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S_RX_RD + sizedata;
 800d992:	8bfa      	ldrh	r2, [r7, #30]
 800d994:	893b      	ldrh	r3, [r7, #8]
 800d996:	4413      	add	r3, r2
 800d998:	b29a      	uxth	r2, r3
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	b29b      	uxth	r3, r3
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3728      	adds	r7, #40	; 0x28
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5500_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800d9aa:	b580      	push	{r7, lr}
 800d9ac:	b08c      	sub	sp, #48	; 0x30
 800d9ae:	af02      	add	r7, sp, #8
 800d9b0:	60f8      	str	r0, [r7, #12]
 800d9b2:	607a      	str	r2, [r7, #4]
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	72fb      	strb	r3, [r7, #11]
 800d9ba:	4613      	mov	r3, r2
 800d9bc:	813b      	strh	r3, [r7, #8]
	uint16_t S_bf_rcv_offset=0,
 800d9be:	2300      	movs	r3, #0
 800d9c0:	84bb      	strh	r3, [r7, #36]	; 0x24
			 left_size=0,
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	847b      	strh	r3, [r7, #34]	; 0x22
			 upper_size=0,
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	843b      	strh	r3, [r7, #32]
			 source_addr=0,
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	83fb      	strh	r3, [r7, #30]
			 Sn_TX_WR=0,
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	83bb      	strh	r3, [r7, #28]
			 get_offset=0,
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	837b      	strh	r3, [r7, #26]
			 get_free_size=0,
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800d9da:	2300      	movs	r3, #0
 800d9dc:	833b      	strh	r3, [r7, #24]
			 S_mem_pointer=0,
 800d9de:	2300      	movs	r3, #0
 800d9e0:	82fb      	strh	r3, [r7, #22]
			 TX_MASK=0,
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	82bb      	strh	r3, [r7, #20]
			 TX_BASE=0;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	827b      	strh	r3, [r7, #18]
			TX_BASE=ETH->gS3_TX_BASE;
		}
		break;*/
		default :
		{
			TX_MASK=ETH->gS_TX_MASK;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d9f4:	82bb      	strh	r3, [r7, #20]
			TX_BASE=ETH->gS_TX_BASE;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da00:	827b      	strh	r3, [r7, #18]
		}
		break;
 800da02:	bf00      	nop
	}

	while(get_free_size<send_size)
 800da04:	e00c      	b.n	800da20 <eth_wr_SOCKET_DATA+0x76>
			{
				get_free_size=SPI_ETH_REG(ETH, S_TX_FSR, S0_REG ,SPI_READ, spi_Data,2);//get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S_TX_FSR	=   0x420,
 800da06:	2302      	movs	r3, #2
 800da08:	9301      	str	r3, [sp, #4]
 800da0a:	f107 0310 	add.w	r3, r7, #16
 800da0e:	9300      	str	r3, [sp, #0]
 800da10:	2300      	movs	r3, #0
 800da12:	2201      	movs	r2, #1
 800da14:	2120      	movs	r1, #32
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	f7ff fb53 	bl	800d0c2 <SPI_ETH_REG>
 800da1c:	4603      	mov	r3, r0
 800da1e:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800da20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800da22:	893b      	ldrh	r3, [r7, #8]
 800da24:	429a      	cmp	r2, r3
 800da26:	d3ee      	bcc.n	800da06 <eth_wr_SOCKET_DATA+0x5c>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2); // S_TX_RD =   0x424,Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S_TX_RD =   0x424,
 800da28:	2302      	movs	r3, #2
 800da2a:	9301      	str	r3, [sp, #4]
 800da2c:	f107 0310 	add.w	r3, r7, #16
 800da30:	9300      	str	r3, [sp, #0]
 800da32:	2300      	movs	r3, #0
 800da34:	2201      	movs	r2, #1
 800da36:	2124      	movs	r1, #36	; 0x24
 800da38:	68f8      	ldr	r0, [r7, #12]
 800da3a:	f7ff fb42 	bl	800d0c2 <SPI_ETH_REG>
 800da3e:	4603      	mov	r3, r0
 800da40:	83bb      	strh	r3, [r7, #28]
				get_offset= Sn_TX_WR & TX_MASK;
 800da42:	8bba      	ldrh	r2, [r7, #28]
 800da44:	8abb      	ldrh	r3, [r7, #20]
 800da46:	4013      	ands	r3, r2
 800da48:	837b      	strh	r3, [r7, #26]
				get_start_address=TX_BASE + get_offset;
 800da4a:	8a7a      	ldrh	r2, [r7, #18]
 800da4c:	8b7b      	ldrh	r3, [r7, #26]
 800da4e:	4413      	add	r3, r2
 800da50:	833b      	strh	r3, [r7, #24]

				if((get_offset + send_size)>(TX_MASK + 1))
 800da52:	8b7a      	ldrh	r2, [r7, #26]
 800da54:	893b      	ldrh	r3, [r7, #8]
 800da56:	441a      	add	r2, r3
 800da58:	8abb      	ldrh	r3, [r7, #20]
 800da5a:	3301      	adds	r3, #1
 800da5c:	429a      	cmp	r2, r3
 800da5e:	dd30      	ble.n	800dac2 <eth_wr_SOCKET_DATA+0x118>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800da60:	8aba      	ldrh	r2, [r7, #20]
 800da62:	8b7b      	ldrh	r3, [r7, #26]
 800da64:	1ad3      	subs	r3, r2, r3
 800da66:	b29b      	uxth	r3, r3
 800da68:	3301      	adds	r3, #1
 800da6a:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S_bf_rcv_offset, upper_size,socket);
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800da72:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800da74:	8b39      	ldrh	r1, [r7, #24]
 800da76:	7afb      	ldrb	r3, [r7, #11]
 800da78:	9301      	str	r3, [sp, #4]
 800da7a:	8c3b      	ldrh	r3, [r7, #32]
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	4603      	mov	r3, r0
 800da80:	68f8      	ldr	r0, [r7, #12]
 800da82:	f7ff fc2b 	bl	800d2dc <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800da86:	8bfa      	ldrh	r2, [r7, #30]
 800da88:	8c3b      	ldrh	r3, [r7, #32]
 800da8a:	4413      	add	r3, r2
 800da8c:	83fb      	strh	r3, [r7, #30]
						left_size=send_size-upper_size;
 800da8e:	893a      	ldrh	r2, [r7, #8]
 800da90:	8c3b      	ldrh	r3, [r7, #32]
 800da92:	1ad3      	subs	r3, r2, r3
 800da94:	847b      	strh	r3, [r7, #34]	; 0x22
						S_bf_rcv_offset=upper_size;
 800da96:	8c3b      	ldrh	r3, [r7, #32]
 800da98:	84bb      	strh	r3, [r7, #36]	; 0x24
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S_bf_rcv_offset, left_size, socket);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800daa0:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800daa2:	8a79      	ldrh	r1, [r7, #18]
 800daa4:	7afb      	ldrb	r3, [r7, #11]
 800daa6:	9301      	str	r3, [sp, #4]
 800daa8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800daaa:	9300      	str	r3, [sp, #0]
 800daac:	4603      	mov	r3, r0
 800daae:	68f8      	ldr	r0, [r7, #12]
 800dab0:	f7ff fc14 	bl	800d2dc <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800dab4:	8bba      	ldrh	r2, [r7, #28]
 800dab6:	893b      	ldrh	r3, [r7, #8]
 800dab8:	4413      	add	r3, r2
 800daba:	b29a      	uxth	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	801a      	strh	r2, [r3, #0]
 800dac0:	e012      	b.n	800dae8 <eth_wr_SOCKET_DATA+0x13e>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S_bf_rcv_offset, send_size, socket);
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800dac8:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800daca:	8b39      	ldrh	r1, [r7, #24]
 800dacc:	7afb      	ldrb	r3, [r7, #11]
 800dace:	9301      	str	r3, [sp, #4]
 800dad0:	893b      	ldrh	r3, [r7, #8]
 800dad2:	9300      	str	r3, [sp, #0]
 800dad4:	4603      	mov	r3, r0
 800dad6:	68f8      	ldr	r0, [r7, #12]
 800dad8:	f7ff fc00 	bl	800d2dc <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800dadc:	8bba      	ldrh	r2, [r7, #28]
 800dade:	893b      	ldrh	r3, [r7, #8]
 800dae0:	4413      	add	r3, r2
 800dae2:	b29a      	uxth	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	801a      	strh	r2, [r3, #0]
					}

}
 800dae8:	bf00      	nop
 800daea:	4618      	mov	r0, r3
 800daec:	3728      	adds	r7, #40	; 0x28
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <SPI_ETH_SNIFF>:

uint8_t SPI_ETH_SNIFF(struct W5500_SPY * Y,struct W5500_SPI * X)
{
 800daf2:	b580      	push	{r7, lr}
 800daf4:	b084      	sub	sp, #16
 800daf6:	af02      	add	r7, sp, #8
 800daf8:	6078      	str	r0, [r7, #4]
 800dafa:	6039      	str	r1, [r7, #0]
	Y->MR=SPI_ETH_REG(X, 0 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db02:	3318      	adds	r3, #24
 800db04:	2201      	movs	r2, #1
 800db06:	9201      	str	r2, [sp, #4]
 800db08:	9300      	str	r3, [sp, #0]
 800db0a:	2300      	movs	r3, #0
 800db0c:	2200      	movs	r2, #0
 800db0e:	2100      	movs	r1, #0
 800db10:	6838      	ldr	r0, [r7, #0]
 800db12:	f7ff fad6 	bl	800d0c2 <SPI_ETH_REG>
 800db16:	4603      	mov	r3, r0
 800db18:	b2da      	uxtb	r2, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	701a      	strb	r2, [r3, #0]

	Y->GAR[0]=SPI_ETH_REG(X, 1 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db24:	3318      	adds	r3, #24
 800db26:	2201      	movs	r2, #1
 800db28:	9201      	str	r2, [sp, #4]
 800db2a:	9300      	str	r3, [sp, #0]
 800db2c:	2300      	movs	r3, #0
 800db2e:	2200      	movs	r2, #0
 800db30:	2101      	movs	r1, #1
 800db32:	6838      	ldr	r0, [r7, #0]
 800db34:	f7ff fac5 	bl	800d0c2 <SPI_ETH_REG>
 800db38:	4603      	mov	r3, r0
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	705a      	strb	r2, [r3, #1]
	Y->GAR[1]=SPI_ETH_REG(X, 2 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db46:	3318      	adds	r3, #24
 800db48:	2201      	movs	r2, #1
 800db4a:	9201      	str	r2, [sp, #4]
 800db4c:	9300      	str	r3, [sp, #0]
 800db4e:	2300      	movs	r3, #0
 800db50:	2200      	movs	r2, #0
 800db52:	2102      	movs	r1, #2
 800db54:	6838      	ldr	r0, [r7, #0]
 800db56:	f7ff fab4 	bl	800d0c2 <SPI_ETH_REG>
 800db5a:	4603      	mov	r3, r0
 800db5c:	b2da      	uxtb	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	709a      	strb	r2, [r3, #2]
	Y->GAR[2]=SPI_ETH_REG(X, 3 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db68:	3318      	adds	r3, #24
 800db6a:	2201      	movs	r2, #1
 800db6c:	9201      	str	r2, [sp, #4]
 800db6e:	9300      	str	r3, [sp, #0]
 800db70:	2300      	movs	r3, #0
 800db72:	2200      	movs	r2, #0
 800db74:	2103      	movs	r1, #3
 800db76:	6838      	ldr	r0, [r7, #0]
 800db78:	f7ff faa3 	bl	800d0c2 <SPI_ETH_REG>
 800db7c:	4603      	mov	r3, r0
 800db7e:	b2da      	uxtb	r2, r3
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	70da      	strb	r2, [r3, #3]
	Y->GAR[3]=SPI_ETH_REG(X, 4 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db8a:	3318      	adds	r3, #24
 800db8c:	2201      	movs	r2, #1
 800db8e:	9201      	str	r2, [sp, #4]
 800db90:	9300      	str	r3, [sp, #0]
 800db92:	2300      	movs	r3, #0
 800db94:	2200      	movs	r2, #0
 800db96:	2104      	movs	r1, #4
 800db98:	6838      	ldr	r0, [r7, #0]
 800db9a:	f7ff fa92 	bl	800d0c2 <SPI_ETH_REG>
 800db9e:	4603      	mov	r3, r0
 800dba0:	b2da      	uxtb	r2, r3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	711a      	strb	r2, [r3, #4]

	Y->SUBR[0]=SPI_ETH_REG(X, 5 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dbac:	3318      	adds	r3, #24
 800dbae:	2201      	movs	r2, #1
 800dbb0:	9201      	str	r2, [sp, #4]
 800dbb2:	9300      	str	r3, [sp, #0]
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	2105      	movs	r1, #5
 800dbba:	6838      	ldr	r0, [r7, #0]
 800dbbc:	f7ff fa81 	bl	800d0c2 <SPI_ETH_REG>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	b2da      	uxtb	r2, r3
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	715a      	strb	r2, [r3, #5]
	Y->SUBR[1]=SPI_ETH_REG(X, 6 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dbce:	3318      	adds	r3, #24
 800dbd0:	2201      	movs	r2, #1
 800dbd2:	9201      	str	r2, [sp, #4]
 800dbd4:	9300      	str	r3, [sp, #0]
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	2200      	movs	r2, #0
 800dbda:	2106      	movs	r1, #6
 800dbdc:	6838      	ldr	r0, [r7, #0]
 800dbde:	f7ff fa70 	bl	800d0c2 <SPI_ETH_REG>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	b2da      	uxtb	r2, r3
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	719a      	strb	r2, [r3, #6]
	Y->SUBR[2]=SPI_ETH_REG(X, 7 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dbf0:	3318      	adds	r3, #24
 800dbf2:	2201      	movs	r2, #1
 800dbf4:	9201      	str	r2, [sp, #4]
 800dbf6:	9300      	str	r3, [sp, #0]
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	2107      	movs	r1, #7
 800dbfe:	6838      	ldr	r0, [r7, #0]
 800dc00:	f7ff fa5f 	bl	800d0c2 <SPI_ETH_REG>
 800dc04:	4603      	mov	r3, r0
 800dc06:	b2da      	uxtb	r2, r3
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	71da      	strb	r2, [r3, #7]
	Y->SUBR[3]=SPI_ETH_REG(X, 8 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc12:	3318      	adds	r3, #24
 800dc14:	2201      	movs	r2, #1
 800dc16:	9201      	str	r2, [sp, #4]
 800dc18:	9300      	str	r3, [sp, #0]
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	2108      	movs	r1, #8
 800dc20:	6838      	ldr	r0, [r7, #0]
 800dc22:	f7ff fa4e 	bl	800d0c2 <SPI_ETH_REG>
 800dc26:	4603      	mov	r3, r0
 800dc28:	b2da      	uxtb	r2, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	721a      	strb	r2, [r3, #8]

	Y->SHAR[0]=SPI_ETH_REG(X, 9 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc34:	3318      	adds	r3, #24
 800dc36:	2201      	movs	r2, #1
 800dc38:	9201      	str	r2, [sp, #4]
 800dc3a:	9300      	str	r3, [sp, #0]
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	2200      	movs	r2, #0
 800dc40:	2109      	movs	r1, #9
 800dc42:	6838      	ldr	r0, [r7, #0]
 800dc44:	f7ff fa3d 	bl	800d0c2 <SPI_ETH_REG>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	b2da      	uxtb	r2, r3
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	725a      	strb	r2, [r3, #9]
	Y->SHAR[1]=SPI_ETH_REG(X, 10 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc56:	3318      	adds	r3, #24
 800dc58:	2201      	movs	r2, #1
 800dc5a:	9201      	str	r2, [sp, #4]
 800dc5c:	9300      	str	r3, [sp, #0]
 800dc5e:	2300      	movs	r3, #0
 800dc60:	2200      	movs	r2, #0
 800dc62:	210a      	movs	r1, #10
 800dc64:	6838      	ldr	r0, [r7, #0]
 800dc66:	f7ff fa2c 	bl	800d0c2 <SPI_ETH_REG>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	b2da      	uxtb	r2, r3
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	729a      	strb	r2, [r3, #10]
	Y->SHAR[2]=SPI_ETH_REG(X, 11 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc78:	3318      	adds	r3, #24
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	9201      	str	r2, [sp, #4]
 800dc7e:	9300      	str	r3, [sp, #0]
 800dc80:	2300      	movs	r3, #0
 800dc82:	2200      	movs	r2, #0
 800dc84:	210b      	movs	r1, #11
 800dc86:	6838      	ldr	r0, [r7, #0]
 800dc88:	f7ff fa1b 	bl	800d0c2 <SPI_ETH_REG>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	b2da      	uxtb	r2, r3
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	72da      	strb	r2, [r3, #11]
	Y->SHAR[3]=SPI_ETH_REG(X, 12 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc9a:	3318      	adds	r3, #24
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	9201      	str	r2, [sp, #4]
 800dca0:	9300      	str	r3, [sp, #0]
 800dca2:	2300      	movs	r3, #0
 800dca4:	2200      	movs	r2, #0
 800dca6:	210c      	movs	r1, #12
 800dca8:	6838      	ldr	r0, [r7, #0]
 800dcaa:	f7ff fa0a 	bl	800d0c2 <SPI_ETH_REG>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	b2da      	uxtb	r2, r3
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	731a      	strb	r2, [r3, #12]
	Y->SHAR[4]=SPI_ETH_REG(X, 13 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dcbc:	3318      	adds	r3, #24
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	9201      	str	r2, [sp, #4]
 800dcc2:	9300      	str	r3, [sp, #0]
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	210d      	movs	r1, #13
 800dcca:	6838      	ldr	r0, [r7, #0]
 800dccc:	f7ff f9f9 	bl	800d0c2 <SPI_ETH_REG>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	b2da      	uxtb	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	735a      	strb	r2, [r3, #13]
	Y->SHAR[5]=SPI_ETH_REG(X, 14 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dcde:	3318      	adds	r3, #24
 800dce0:	2201      	movs	r2, #1
 800dce2:	9201      	str	r2, [sp, #4]
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	2300      	movs	r3, #0
 800dce8:	2200      	movs	r2, #0
 800dcea:	210e      	movs	r1, #14
 800dcec:	6838      	ldr	r0, [r7, #0]
 800dcee:	f7ff f9e8 	bl	800d0c2 <SPI_ETH_REG>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	b2da      	uxtb	r2, r3
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	739a      	strb	r2, [r3, #14]

	Y->SIPR[0]=SPI_ETH_REG(X, 15 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd00:	3318      	adds	r3, #24
 800dd02:	2201      	movs	r2, #1
 800dd04:	9201      	str	r2, [sp, #4]
 800dd06:	9300      	str	r3, [sp, #0]
 800dd08:	2300      	movs	r3, #0
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	210f      	movs	r1, #15
 800dd0e:	6838      	ldr	r0, [r7, #0]
 800dd10:	f7ff f9d7 	bl	800d0c2 <SPI_ETH_REG>
 800dd14:	4603      	mov	r3, r0
 800dd16:	b2da      	uxtb	r2, r3
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	73da      	strb	r2, [r3, #15]
	Y->SIPR[1]=SPI_ETH_REG(X, 16 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd22:	3318      	adds	r3, #24
 800dd24:	2201      	movs	r2, #1
 800dd26:	9201      	str	r2, [sp, #4]
 800dd28:	9300      	str	r3, [sp, #0]
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	2110      	movs	r1, #16
 800dd30:	6838      	ldr	r0, [r7, #0]
 800dd32:	f7ff f9c6 	bl	800d0c2 <SPI_ETH_REG>
 800dd36:	4603      	mov	r3, r0
 800dd38:	b2da      	uxtb	r2, r3
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	741a      	strb	r2, [r3, #16]
	Y->SIPR[2]=SPI_ETH_REG(X, 17 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd44:	3318      	adds	r3, #24
 800dd46:	2201      	movs	r2, #1
 800dd48:	9201      	str	r2, [sp, #4]
 800dd4a:	9300      	str	r3, [sp, #0]
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	2200      	movs	r2, #0
 800dd50:	2111      	movs	r1, #17
 800dd52:	6838      	ldr	r0, [r7, #0]
 800dd54:	f7ff f9b5 	bl	800d0c2 <SPI_ETH_REG>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	b2da      	uxtb	r2, r3
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	745a      	strb	r2, [r3, #17]
	Y->SIPR[3]=SPI_ETH_REG(X, 18 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd66:	3318      	adds	r3, #24
 800dd68:	2201      	movs	r2, #1
 800dd6a:	9201      	str	r2, [sp, #4]
 800dd6c:	9300      	str	r3, [sp, #0]
 800dd6e:	2300      	movs	r3, #0
 800dd70:	2200      	movs	r2, #0
 800dd72:	2112      	movs	r1, #18
 800dd74:	6838      	ldr	r0, [r7, #0]
 800dd76:	f7ff f9a4 	bl	800d0c2 <SPI_ETH_REG>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	b2da      	uxtb	r2, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	749a      	strb	r2, [r3, #18]

	Y->INTLEVEL[0]=SPI_ETH_REG(X, 19 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd88:	3318      	adds	r3, #24
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	9201      	str	r2, [sp, #4]
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	2300      	movs	r3, #0
 800dd92:	2200      	movs	r2, #0
 800dd94:	2113      	movs	r1, #19
 800dd96:	6838      	ldr	r0, [r7, #0]
 800dd98:	f7ff f993 	bl	800d0c2 <SPI_ETH_REG>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	b2da      	uxtb	r2, r3
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	74da      	strb	r2, [r3, #19]
	Y->INTLEVEL[1]=SPI_ETH_REG(X, 20 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddaa:	3318      	adds	r3, #24
 800ddac:	2201      	movs	r2, #1
 800ddae:	9201      	str	r2, [sp, #4]
 800ddb0:	9300      	str	r3, [sp, #0]
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	2114      	movs	r1, #20
 800ddb8:	6838      	ldr	r0, [r7, #0]
 800ddba:	f7ff f982 	bl	800d0c2 <SPI_ETH_REG>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	b2da      	uxtb	r2, r3
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	751a      	strb	r2, [r3, #20]

	Y->IR=SPI_ETH_REG(X, 21 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddcc:	3318      	adds	r3, #24
 800ddce:	2201      	movs	r2, #1
 800ddd0:	9201      	str	r2, [sp, #4]
 800ddd2:	9300      	str	r3, [sp, #0]
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	2115      	movs	r1, #21
 800ddda:	6838      	ldr	r0, [r7, #0]
 800dddc:	f7ff f971 	bl	800d0c2 <SPI_ETH_REG>
 800dde0:	4603      	mov	r3, r0
 800dde2:	b2da      	uxtb	r2, r3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	755a      	strb	r2, [r3, #21]

	Y->IMR=SPI_ETH_REG(X, 22 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddee:	3318      	adds	r3, #24
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	9201      	str	r2, [sp, #4]
 800ddf4:	9300      	str	r3, [sp, #0]
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	2116      	movs	r1, #22
 800ddfc:	6838      	ldr	r0, [r7, #0]
 800ddfe:	f7ff f960 	bl	800d0c2 <SPI_ETH_REG>
 800de02:	4603      	mov	r3, r0
 800de04:	b2da      	uxtb	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	759a      	strb	r2, [r3, #22]

	Y->SIR=SPI_ETH_REG(X, 23 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de10:	3318      	adds	r3, #24
 800de12:	2201      	movs	r2, #1
 800de14:	9201      	str	r2, [sp, #4]
 800de16:	9300      	str	r3, [sp, #0]
 800de18:	2300      	movs	r3, #0
 800de1a:	2200      	movs	r2, #0
 800de1c:	2117      	movs	r1, #23
 800de1e:	6838      	ldr	r0, [r7, #0]
 800de20:	f7ff f94f 	bl	800d0c2 <SPI_ETH_REG>
 800de24:	4603      	mov	r3, r0
 800de26:	b2da      	uxtb	r2, r3
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	75da      	strb	r2, [r3, #23]

	Y->SIMR=SPI_ETH_REG(X, 24 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de32:	3318      	adds	r3, #24
 800de34:	2201      	movs	r2, #1
 800de36:	9201      	str	r2, [sp, #4]
 800de38:	9300      	str	r3, [sp, #0]
 800de3a:	2300      	movs	r3, #0
 800de3c:	2200      	movs	r2, #0
 800de3e:	2118      	movs	r1, #24
 800de40:	6838      	ldr	r0, [r7, #0]
 800de42:	f7ff f93e 	bl	800d0c2 <SPI_ETH_REG>
 800de46:	4603      	mov	r3, r0
 800de48:	b2da      	uxtb	r2, r3
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	761a      	strb	r2, [r3, #24]

	Y->RTR[0]=SPI_ETH_REG(X, 25 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de54:	3318      	adds	r3, #24
 800de56:	2201      	movs	r2, #1
 800de58:	9201      	str	r2, [sp, #4]
 800de5a:	9300      	str	r3, [sp, #0]
 800de5c:	2300      	movs	r3, #0
 800de5e:	2200      	movs	r2, #0
 800de60:	2119      	movs	r1, #25
 800de62:	6838      	ldr	r0, [r7, #0]
 800de64:	f7ff f92d 	bl	800d0c2 <SPI_ETH_REG>
 800de68:	4603      	mov	r3, r0
 800de6a:	b2da      	uxtb	r2, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	765a      	strb	r2, [r3, #25]
	Y->RTR[1]=SPI_ETH_REG(X, 26 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de76:	3318      	adds	r3, #24
 800de78:	2201      	movs	r2, #1
 800de7a:	9201      	str	r2, [sp, #4]
 800de7c:	9300      	str	r3, [sp, #0]
 800de7e:	2300      	movs	r3, #0
 800de80:	2200      	movs	r2, #0
 800de82:	211a      	movs	r1, #26
 800de84:	6838      	ldr	r0, [r7, #0]
 800de86:	f7ff f91c 	bl	800d0c2 <SPI_ETH_REG>
 800de8a:	4603      	mov	r3, r0
 800de8c:	b2da      	uxtb	r2, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	769a      	strb	r2, [r3, #26]

	Y->RCR=SPI_ETH_REG(X, 27 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de98:	3318      	adds	r3, #24
 800de9a:	2201      	movs	r2, #1
 800de9c:	9201      	str	r2, [sp, #4]
 800de9e:	9300      	str	r3, [sp, #0]
 800dea0:	2300      	movs	r3, #0
 800dea2:	2200      	movs	r2, #0
 800dea4:	211b      	movs	r1, #27
 800dea6:	6838      	ldr	r0, [r7, #0]
 800dea8:	f7ff f90b 	bl	800d0c2 <SPI_ETH_REG>
 800deac:	4603      	mov	r3, r0
 800deae:	b2da      	uxtb	r2, r3
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	76da      	strb	r2, [r3, #27]

	Y->PTIMER=SPI_ETH_REG(X, 28 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800deba:	3318      	adds	r3, #24
 800debc:	2201      	movs	r2, #1
 800debe:	9201      	str	r2, [sp, #4]
 800dec0:	9300      	str	r3, [sp, #0]
 800dec2:	2300      	movs	r3, #0
 800dec4:	2200      	movs	r2, #0
 800dec6:	211c      	movs	r1, #28
 800dec8:	6838      	ldr	r0, [r7, #0]
 800deca:	f7ff f8fa 	bl	800d0c2 <SPI_ETH_REG>
 800dece:	4603      	mov	r3, r0
 800ded0:	b2da      	uxtb	r2, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	771a      	strb	r2, [r3, #28]

	Y->PMAGIC=SPI_ETH_REG(X, 29 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dedc:	3318      	adds	r3, #24
 800dede:	2201      	movs	r2, #1
 800dee0:	9201      	str	r2, [sp, #4]
 800dee2:	9300      	str	r3, [sp, #0]
 800dee4:	2300      	movs	r3, #0
 800dee6:	2200      	movs	r2, #0
 800dee8:	211d      	movs	r1, #29
 800deea:	6838      	ldr	r0, [r7, #0]
 800deec:	f7ff f8e9 	bl	800d0c2 <SPI_ETH_REG>
 800def0:	4603      	mov	r3, r0
 800def2:	b2da      	uxtb	r2, r3
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	775a      	strb	r2, [r3, #29]

	Y->PHAR[0]=SPI_ETH_REG(X, 30 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800defe:	3318      	adds	r3, #24
 800df00:	2201      	movs	r2, #1
 800df02:	9201      	str	r2, [sp, #4]
 800df04:	9300      	str	r3, [sp, #0]
 800df06:	2300      	movs	r3, #0
 800df08:	2200      	movs	r2, #0
 800df0a:	211e      	movs	r1, #30
 800df0c:	6838      	ldr	r0, [r7, #0]
 800df0e:	f7ff f8d8 	bl	800d0c2 <SPI_ETH_REG>
 800df12:	4603      	mov	r3, r0
 800df14:	b2da      	uxtb	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	779a      	strb	r2, [r3, #30]
	Y->PHAR[1]=SPI_ETH_REG(X, 31 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df20:	3318      	adds	r3, #24
 800df22:	2201      	movs	r2, #1
 800df24:	9201      	str	r2, [sp, #4]
 800df26:	9300      	str	r3, [sp, #0]
 800df28:	2300      	movs	r3, #0
 800df2a:	2200      	movs	r2, #0
 800df2c:	211f      	movs	r1, #31
 800df2e:	6838      	ldr	r0, [r7, #0]
 800df30:	f7ff f8c7 	bl	800d0c2 <SPI_ETH_REG>
 800df34:	4603      	mov	r3, r0
 800df36:	b2da      	uxtb	r2, r3
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	77da      	strb	r2, [r3, #31]
	Y->PHAR[2]=SPI_ETH_REG(X, 32 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df42:	3318      	adds	r3, #24
 800df44:	2201      	movs	r2, #1
 800df46:	9201      	str	r2, [sp, #4]
 800df48:	9300      	str	r3, [sp, #0]
 800df4a:	2300      	movs	r3, #0
 800df4c:	2200      	movs	r2, #0
 800df4e:	2120      	movs	r1, #32
 800df50:	6838      	ldr	r0, [r7, #0]
 800df52:	f7ff f8b6 	bl	800d0c2 <SPI_ETH_REG>
 800df56:	4603      	mov	r3, r0
 800df58:	b2da      	uxtb	r2, r3
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f883 2020 	strb.w	r2, [r3, #32]
	Y->PHAR[3]=SPI_ETH_REG(X, 33 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df66:	3318      	adds	r3, #24
 800df68:	2201      	movs	r2, #1
 800df6a:	9201      	str	r2, [sp, #4]
 800df6c:	9300      	str	r3, [sp, #0]
 800df6e:	2300      	movs	r3, #0
 800df70:	2200      	movs	r2, #0
 800df72:	2121      	movs	r1, #33	; 0x21
 800df74:	6838      	ldr	r0, [r7, #0]
 800df76:	f7ff f8a4 	bl	800d0c2 <SPI_ETH_REG>
 800df7a:	4603      	mov	r3, r0
 800df7c:	b2da      	uxtb	r2, r3
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Y->PHAR[4]=SPI_ETH_REG(X, 34 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df8a:	3318      	adds	r3, #24
 800df8c:	2201      	movs	r2, #1
 800df8e:	9201      	str	r2, [sp, #4]
 800df90:	9300      	str	r3, [sp, #0]
 800df92:	2300      	movs	r3, #0
 800df94:	2200      	movs	r2, #0
 800df96:	2122      	movs	r1, #34	; 0x22
 800df98:	6838      	ldr	r0, [r7, #0]
 800df9a:	f7ff f892 	bl	800d0c2 <SPI_ETH_REG>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	b2da      	uxtb	r2, r3
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Y->PHAR[5]=SPI_ETH_REG(X, 35 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dfae:	3318      	adds	r3, #24
 800dfb0:	2201      	movs	r2, #1
 800dfb2:	9201      	str	r2, [sp, #4]
 800dfb4:	9300      	str	r3, [sp, #0]
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	2200      	movs	r2, #0
 800dfba:	2123      	movs	r1, #35	; 0x23
 800dfbc:	6838      	ldr	r0, [r7, #0]
 800dfbe:	f7ff f880 	bl	800d0c2 <SPI_ETH_REG>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	b2da      	uxtb	r2, r3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	Y->PSID[0]=SPI_ETH_REG(X, 36 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dfd2:	3318      	adds	r3, #24
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	9201      	str	r2, [sp, #4]
 800dfd8:	9300      	str	r3, [sp, #0]
 800dfda:	2300      	movs	r3, #0
 800dfdc:	2200      	movs	r2, #0
 800dfde:	2124      	movs	r1, #36	; 0x24
 800dfe0:	6838      	ldr	r0, [r7, #0]
 800dfe2:	f7ff f86e 	bl	800d0c2 <SPI_ETH_REG>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	b2da      	uxtb	r2, r3
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Y->PSID[1]=SPI_ETH_REG(X, 37 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dff6:	3318      	adds	r3, #24
 800dff8:	2201      	movs	r2, #1
 800dffa:	9201      	str	r2, [sp, #4]
 800dffc:	9300      	str	r3, [sp, #0]
 800dffe:	2300      	movs	r3, #0
 800e000:	2200      	movs	r2, #0
 800e002:	2125      	movs	r1, #37	; 0x25
 800e004:	6838      	ldr	r0, [r7, #0]
 800e006:	f7ff f85c 	bl	800d0c2 <SPI_ETH_REG>
 800e00a:	4603      	mov	r3, r0
 800e00c:	b2da      	uxtb	r2, r3
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	Y->PMRU[0]=SPI_ETH_REG(X, 38 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e01a:	3318      	adds	r3, #24
 800e01c:	2201      	movs	r2, #1
 800e01e:	9201      	str	r2, [sp, #4]
 800e020:	9300      	str	r3, [sp, #0]
 800e022:	2300      	movs	r3, #0
 800e024:	2200      	movs	r2, #0
 800e026:	2126      	movs	r1, #38	; 0x26
 800e028:	6838      	ldr	r0, [r7, #0]
 800e02a:	f7ff f84a 	bl	800d0c2 <SPI_ETH_REG>
 800e02e:	4603      	mov	r3, r0
 800e030:	b2da      	uxtb	r2, r3
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Y->PMRU[1]=SPI_ETH_REG(X, 39 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e03e:	3318      	adds	r3, #24
 800e040:	2201      	movs	r2, #1
 800e042:	9201      	str	r2, [sp, #4]
 800e044:	9300      	str	r3, [sp, #0]
 800e046:	2300      	movs	r3, #0
 800e048:	2200      	movs	r2, #0
 800e04a:	2127      	movs	r1, #39	; 0x27
 800e04c:	6838      	ldr	r0, [r7, #0]
 800e04e:	f7ff f838 	bl	800d0c2 <SPI_ETH_REG>
 800e052:	4603      	mov	r3, r0
 800e054:	b2da      	uxtb	r2, r3
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	Y->UIPR[0]=SPI_ETH_REG(X, 40 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e062:	3318      	adds	r3, #24
 800e064:	2201      	movs	r2, #1
 800e066:	9201      	str	r2, [sp, #4]
 800e068:	9300      	str	r3, [sp, #0]
 800e06a:	2300      	movs	r3, #0
 800e06c:	2200      	movs	r2, #0
 800e06e:	2128      	movs	r1, #40	; 0x28
 800e070:	6838      	ldr	r0, [r7, #0]
 800e072:	f7ff f826 	bl	800d0c2 <SPI_ETH_REG>
 800e076:	4603      	mov	r3, r0
 800e078:	b2da      	uxtb	r2, r3
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Y->UIPR[1]=SPI_ETH_REG(X, 41 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e086:	3318      	adds	r3, #24
 800e088:	2201      	movs	r2, #1
 800e08a:	9201      	str	r2, [sp, #4]
 800e08c:	9300      	str	r3, [sp, #0]
 800e08e:	2300      	movs	r3, #0
 800e090:	2200      	movs	r2, #0
 800e092:	2129      	movs	r1, #41	; 0x29
 800e094:	6838      	ldr	r0, [r7, #0]
 800e096:	f7ff f814 	bl	800d0c2 <SPI_ETH_REG>
 800e09a:	4603      	mov	r3, r0
 800e09c:	b2da      	uxtb	r2, r3
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	Y->UIPR[2]=SPI_ETH_REG(X, 42 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0aa:	3318      	adds	r3, #24
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	9201      	str	r2, [sp, #4]
 800e0b0:	9300      	str	r3, [sp, #0]
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	212a      	movs	r1, #42	; 0x2a
 800e0b8:	6838      	ldr	r0, [r7, #0]
 800e0ba:	f7ff f802 	bl	800d0c2 <SPI_ETH_REG>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	b2da      	uxtb	r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Y->UIPR[3]=SPI_ETH_REG(X, 43 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0ce:	3318      	adds	r3, #24
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	9201      	str	r2, [sp, #4]
 800e0d4:	9300      	str	r3, [sp, #0]
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	2200      	movs	r2, #0
 800e0da:	212b      	movs	r1, #43	; 0x2b
 800e0dc:	6838      	ldr	r0, [r7, #0]
 800e0de:	f7fe fff0 	bl	800d0c2 <SPI_ETH_REG>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	Y->UPORT[0]=SPI_ETH_REG(X, 44 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0f2:	3318      	adds	r3, #24
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	9201      	str	r2, [sp, #4]
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	212c      	movs	r1, #44	; 0x2c
 800e100:	6838      	ldr	r0, [r7, #0]
 800e102:	f7fe ffde 	bl	800d0c2 <SPI_ETH_REG>
 800e106:	4603      	mov	r3, r0
 800e108:	b2da      	uxtb	r2, r3
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	Y->UPORT[1]=SPI_ETH_REG(X, 45 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e116:	3318      	adds	r3, #24
 800e118:	2201      	movs	r2, #1
 800e11a:	9201      	str	r2, [sp, #4]
 800e11c:	9300      	str	r3, [sp, #0]
 800e11e:	2300      	movs	r3, #0
 800e120:	2200      	movs	r2, #0
 800e122:	212d      	movs	r1, #45	; 0x2d
 800e124:	6838      	ldr	r0, [r7, #0]
 800e126:	f7fe ffcc 	bl	800d0c2 <SPI_ETH_REG>
 800e12a:	4603      	mov	r3, r0
 800e12c:	b2da      	uxtb	r2, r3
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	Y->PHYCFGR=SPI_ETH_REG(X, 46 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e13a:	3318      	adds	r3, #24
 800e13c:	2201      	movs	r2, #1
 800e13e:	9201      	str	r2, [sp, #4]
 800e140:	9300      	str	r3, [sp, #0]
 800e142:	2300      	movs	r3, #0
 800e144:	2200      	movs	r2, #0
 800e146:	212e      	movs	r1, #46	; 0x2e
 800e148:	6838      	ldr	r0, [r7, #0]
 800e14a:	f7fe ffba 	bl	800d0c2 <SPI_ETH_REG>
 800e14e:	4603      	mov	r3, r0
 800e150:	b2da      	uxtb	r2, r3
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	Y->VERSIONR=SPI_ETH_REG(X, 57 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e15e:	3318      	adds	r3, #24
 800e160:	2201      	movs	r2, #1
 800e162:	9201      	str	r2, [sp, #4]
 800e164:	9300      	str	r3, [sp, #0]
 800e166:	2300      	movs	r3, #0
 800e168:	2200      	movs	r2, #0
 800e16a:	2139      	movs	r1, #57	; 0x39
 800e16c:	6838      	ldr	r0, [r7, #0]
 800e16e:	f7fe ffa8 	bl	800d0c2 <SPI_ETH_REG>
 800e172:	4603      	mov	r3, r0
 800e174:	b2da      	uxtb	r2, r3
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	//---------------------------port -------------------------//
	Y->Sn_MR=SPI_ETH_REG(X, 0x00 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e182:	3318      	adds	r3, #24
 800e184:	2201      	movs	r2, #1
 800e186:	9201      	str	r2, [sp, #4]
 800e188:	9300      	str	r3, [sp, #0]
 800e18a:	2300      	movs	r3, #0
 800e18c:	2201      	movs	r2, #1
 800e18e:	2100      	movs	r1, #0
 800e190:	6838      	ldr	r0, [r7, #0]
 800e192:	f7fe ff96 	bl	800d0c2 <SPI_ETH_REG>
 800e196:	4603      	mov	r3, r0
 800e198:	b2da      	uxtb	r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	Y->Sn_CR=SPI_ETH_REG(X, 0x01 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e1a6:	3318      	adds	r3, #24
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	9201      	str	r2, [sp, #4]
 800e1ac:	9300      	str	r3, [sp, #0]
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	2101      	movs	r1, #1
 800e1b4:	6838      	ldr	r0, [r7, #0]
 800e1b6:	f7fe ff84 	bl	800d0c2 <SPI_ETH_REG>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	b2da      	uxtb	r2, r3
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	Y->Sn_IR=SPI_ETH_REG(X, 0x02 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e1ca:	3318      	adds	r3, #24
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	9201      	str	r2, [sp, #4]
 800e1d0:	9300      	str	r3, [sp, #0]
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	2102      	movs	r1, #2
 800e1d8:	6838      	ldr	r0, [r7, #0]
 800e1da:	f7fe ff72 	bl	800d0c2 <SPI_ETH_REG>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	b2da      	uxtb	r2, r3
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	Y->Sn_SR=SPI_ETH_REG(X, 0x03 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e1ee:	3318      	adds	r3, #24
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	9201      	str	r2, [sp, #4]
 800e1f4:	9300      	str	r3, [sp, #0]
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	2103      	movs	r1, #3
 800e1fc:	6838      	ldr	r0, [r7, #0]
 800e1fe:	f7fe ff60 	bl	800d0c2 <SPI_ETH_REG>
 800e202:	4603      	mov	r3, r0
 800e204:	b2da      	uxtb	r2, r3
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	Y->Sn_PORT[0]=SPI_ETH_REG(X, 0x04 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e212:	3318      	adds	r3, #24
 800e214:	2201      	movs	r2, #1
 800e216:	9201      	str	r2, [sp, #4]
 800e218:	9300      	str	r3, [sp, #0]
 800e21a:	2300      	movs	r3, #0
 800e21c:	2201      	movs	r2, #1
 800e21e:	2104      	movs	r1, #4
 800e220:	6838      	ldr	r0, [r7, #0]
 800e222:	f7fe ff4e 	bl	800d0c2 <SPI_ETH_REG>
 800e226:	4603      	mov	r3, r0
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Y->Sn_PORT[1]=SPI_ETH_REG(X, 0x05 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e236:	3318      	adds	r3, #24
 800e238:	2201      	movs	r2, #1
 800e23a:	9201      	str	r2, [sp, #4]
 800e23c:	9300      	str	r3, [sp, #0]
 800e23e:	2300      	movs	r3, #0
 800e240:	2201      	movs	r2, #1
 800e242:	2105      	movs	r1, #5
 800e244:	6838      	ldr	r0, [r7, #0]
 800e246:	f7fe ff3c 	bl	800d0c2 <SPI_ETH_REG>
 800e24a:	4603      	mov	r3, r0
 800e24c:	b2da      	uxtb	r2, r3
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	Y->Sn_DHAR[0]=SPI_ETH_REG(X, 0x06 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e25a:	3318      	adds	r3, #24
 800e25c:	2201      	movs	r2, #1
 800e25e:	9201      	str	r2, [sp, #4]
 800e260:	9300      	str	r3, [sp, #0]
 800e262:	2300      	movs	r3, #0
 800e264:	2201      	movs	r2, #1
 800e266:	2106      	movs	r1, #6
 800e268:	6838      	ldr	r0, [r7, #0]
 800e26a:	f7fe ff2a 	bl	800d0c2 <SPI_ETH_REG>
 800e26e:	4603      	mov	r3, r0
 800e270:	b2da      	uxtb	r2, r3
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Y->Sn_DHAR[1]=SPI_ETH_REG(X, 0x07 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e27e:	3318      	adds	r3, #24
 800e280:	2201      	movs	r2, #1
 800e282:	9201      	str	r2, [sp, #4]
 800e284:	9300      	str	r3, [sp, #0]
 800e286:	2300      	movs	r3, #0
 800e288:	2201      	movs	r2, #1
 800e28a:	2107      	movs	r1, #7
 800e28c:	6838      	ldr	r0, [r7, #0]
 800e28e:	f7fe ff18 	bl	800d0c2 <SPI_ETH_REG>
 800e292:	4603      	mov	r3, r0
 800e294:	b2da      	uxtb	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	Y->Sn_DHAR[2]=SPI_ETH_REG(X, 0x08 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e2a2:	3318      	adds	r3, #24
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	9201      	str	r2, [sp, #4]
 800e2a8:	9300      	str	r3, [sp, #0]
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	2108      	movs	r1, #8
 800e2b0:	6838      	ldr	r0, [r7, #0]
 800e2b2:	f7fe ff06 	bl	800d0c2 <SPI_ETH_REG>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	b2da      	uxtb	r2, r3
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	Y->Sn_DHAR[3]=SPI_ETH_REG(X, 0x09 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e2c6:	3318      	adds	r3, #24
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	9201      	str	r2, [sp, #4]
 800e2cc:	9300      	str	r3, [sp, #0]
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	2109      	movs	r1, #9
 800e2d4:	6838      	ldr	r0, [r7, #0]
 800e2d6:	f7fe fef4 	bl	800d0c2 <SPI_ETH_REG>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	b2da      	uxtb	r2, r3
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	Y->Sn_DHAR[4]=SPI_ETH_REG(X, 0x0A ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e2ea:	3318      	adds	r3, #24
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	9201      	str	r2, [sp, #4]
 800e2f0:	9300      	str	r3, [sp, #0]
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	210a      	movs	r1, #10
 800e2f8:	6838      	ldr	r0, [r7, #0]
 800e2fa:	f7fe fee2 	bl	800d0c2 <SPI_ETH_REG>
 800e2fe:	4603      	mov	r3, r0
 800e300:	b2da      	uxtb	r2, r3
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Y->Sn_DHAR[5]=SPI_ETH_REG(X, 0x0B ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e30e:	3318      	adds	r3, #24
 800e310:	2201      	movs	r2, #1
 800e312:	9201      	str	r2, [sp, #4]
 800e314:	9300      	str	r3, [sp, #0]
 800e316:	2300      	movs	r3, #0
 800e318:	2201      	movs	r2, #1
 800e31a:	210b      	movs	r1, #11
 800e31c:	6838      	ldr	r0, [r7, #0]
 800e31e:	f7fe fed0 	bl	800d0c2 <SPI_ETH_REG>
 800e322:	4603      	mov	r3, r0
 800e324:	b2da      	uxtb	r2, r3
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	Y->Sn_DIPR[0]=SPI_ETH_REG(X, 0x0C ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e332:	3318      	adds	r3, #24
 800e334:	2201      	movs	r2, #1
 800e336:	9201      	str	r2, [sp, #4]
 800e338:	9300      	str	r3, [sp, #0]
 800e33a:	2300      	movs	r3, #0
 800e33c:	2201      	movs	r2, #1
 800e33e:	210c      	movs	r1, #12
 800e340:	6838      	ldr	r0, [r7, #0]
 800e342:	f7fe febe 	bl	800d0c2 <SPI_ETH_REG>
 800e346:	4603      	mov	r3, r0
 800e348:	b2da      	uxtb	r2, r3
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Y->Sn_DIPR[1]=SPI_ETH_REG(X, 0x0D ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e356:	3318      	adds	r3, #24
 800e358:	2201      	movs	r2, #1
 800e35a:	9201      	str	r2, [sp, #4]
 800e35c:	9300      	str	r3, [sp, #0]
 800e35e:	2300      	movs	r3, #0
 800e360:	2201      	movs	r2, #1
 800e362:	210d      	movs	r1, #13
 800e364:	6838      	ldr	r0, [r7, #0]
 800e366:	f7fe feac 	bl	800d0c2 <SPI_ETH_REG>
 800e36a:	4603      	mov	r3, r0
 800e36c:	b2da      	uxtb	r2, r3
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Y->Sn_DIPR[2]=SPI_ETH_REG(X, 0x0E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e37a:	3318      	adds	r3, #24
 800e37c:	2201      	movs	r2, #1
 800e37e:	9201      	str	r2, [sp, #4]
 800e380:	9300      	str	r3, [sp, #0]
 800e382:	2300      	movs	r3, #0
 800e384:	2201      	movs	r2, #1
 800e386:	210e      	movs	r1, #14
 800e388:	6838      	ldr	r0, [r7, #0]
 800e38a:	f7fe fe9a 	bl	800d0c2 <SPI_ETH_REG>
 800e38e:	4603      	mov	r3, r0
 800e390:	b2da      	uxtb	r2, r3
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Y->Sn_DIPR[3]=SPI_ETH_REG(X, 0x0F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e39e:	3318      	adds	r3, #24
 800e3a0:	2201      	movs	r2, #1
 800e3a2:	9201      	str	r2, [sp, #4]
 800e3a4:	9300      	str	r3, [sp, #0]
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	210f      	movs	r1, #15
 800e3ac:	6838      	ldr	r0, [r7, #0]
 800e3ae:	f7fe fe88 	bl	800d0c2 <SPI_ETH_REG>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	b2da      	uxtb	r2, r3
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	Y->Sn_DPORT[0]=SPI_ETH_REG(X, 0x10 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e3c2:	3318      	adds	r3, #24
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	9201      	str	r2, [sp, #4]
 800e3c8:	9300      	str	r3, [sp, #0]
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	2110      	movs	r1, #16
 800e3d0:	6838      	ldr	r0, [r7, #0]
 800e3d2:	f7fe fe76 	bl	800d0c2 <SPI_ETH_REG>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	b2da      	uxtb	r2, r3
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	Y->Sn_DPORT[1]=SPI_ETH_REG(X, 0x11 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e3e6:	3318      	adds	r3, #24
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	9201      	str	r2, [sp, #4]
 800e3ec:	9300      	str	r3, [sp, #0]
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	2111      	movs	r1, #17
 800e3f4:	6838      	ldr	r0, [r7, #0]
 800e3f6:	f7fe fe64 	bl	800d0c2 <SPI_ETH_REG>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	b2da      	uxtb	r2, r3
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	Y->Sn_MSSR[0]=SPI_ETH_REG(X, 0x12 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e40a:	3318      	adds	r3, #24
 800e40c:	2201      	movs	r2, #1
 800e40e:	9201      	str	r2, [sp, #4]
 800e410:	9300      	str	r3, [sp, #0]
 800e412:	2300      	movs	r3, #0
 800e414:	2201      	movs	r2, #1
 800e416:	2112      	movs	r1, #18
 800e418:	6838      	ldr	r0, [r7, #0]
 800e41a:	f7fe fe52 	bl	800d0c2 <SPI_ETH_REG>
 800e41e:	4603      	mov	r3, r0
 800e420:	b2da      	uxtb	r2, r3
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Y->Sn_MSSR[1]=SPI_ETH_REG(X, 0x13 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e42e:	3318      	adds	r3, #24
 800e430:	2201      	movs	r2, #1
 800e432:	9201      	str	r2, [sp, #4]
 800e434:	9300      	str	r3, [sp, #0]
 800e436:	2300      	movs	r3, #0
 800e438:	2201      	movs	r2, #1
 800e43a:	2113      	movs	r1, #19
 800e43c:	6838      	ldr	r0, [r7, #0]
 800e43e:	f7fe fe40 	bl	800d0c2 <SPI_ETH_REG>
 800e442:	4603      	mov	r3, r0
 800e444:	b2da      	uxtb	r2, r3
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	Y->Sn_TOS=SPI_ETH_REG(X, 0x15 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e452:	3318      	adds	r3, #24
 800e454:	2201      	movs	r2, #1
 800e456:	9201      	str	r2, [sp, #4]
 800e458:	9300      	str	r3, [sp, #0]
 800e45a:	2300      	movs	r3, #0
 800e45c:	2201      	movs	r2, #1
 800e45e:	2115      	movs	r1, #21
 800e460:	6838      	ldr	r0, [r7, #0]
 800e462:	f7fe fe2e 	bl	800d0c2 <SPI_ETH_REG>
 800e466:	4603      	mov	r3, r0
 800e468:	b2da      	uxtb	r2, r3
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Y->Sn_TTL=SPI_ETH_REG(X, 0x16 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e476:	3318      	adds	r3, #24
 800e478:	2201      	movs	r2, #1
 800e47a:	9201      	str	r2, [sp, #4]
 800e47c:	9300      	str	r3, [sp, #0]
 800e47e:	2300      	movs	r3, #0
 800e480:	2201      	movs	r2, #1
 800e482:	2116      	movs	r1, #22
 800e484:	6838      	ldr	r0, [r7, #0]
 800e486:	f7fe fe1c 	bl	800d0c2 <SPI_ETH_REG>
 800e48a:	4603      	mov	r3, r0
 800e48c:	b2da      	uxtb	r2, r3
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	Y->Sn_RXBUF_SIZE=SPI_ETH_REG(X, 0x1E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e49a:	3318      	adds	r3, #24
 800e49c:	2201      	movs	r2, #1
 800e49e:	9201      	str	r2, [sp, #4]
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	211e      	movs	r1, #30
 800e4a8:	6838      	ldr	r0, [r7, #0]
 800e4aa:	f7fe fe0a 	bl	800d0c2 <SPI_ETH_REG>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	b2da      	uxtb	r2, r3
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	Y->Sn_TXBUF_SIZE=SPI_ETH_REG(X, 0x1F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e4be:	3318      	adds	r3, #24
 800e4c0:	2201      	movs	r2, #1
 800e4c2:	9201      	str	r2, [sp, #4]
 800e4c4:	9300      	str	r3, [sp, #0]
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	211f      	movs	r1, #31
 800e4cc:	6838      	ldr	r0, [r7, #0]
 800e4ce:	f7fe fdf8 	bl	800d0c2 <SPI_ETH_REG>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	b2da      	uxtb	r2, r3
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	Y->Sn_TX_FSR[0]=SPI_ETH_REG(X, 0x20 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e4e2:	3318      	adds	r3, #24
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	9201      	str	r2, [sp, #4]
 800e4e8:	9300      	str	r3, [sp, #0]
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	2120      	movs	r1, #32
 800e4f0:	6838      	ldr	r0, [r7, #0]
 800e4f2:	f7fe fde6 	bl	800d0c2 <SPI_ETH_REG>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	b2da      	uxtb	r2, r3
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Y->Sn_TX_FSR[1]=SPI_ETH_REG(X, 0x21 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e506:	3318      	adds	r3, #24
 800e508:	2201      	movs	r2, #1
 800e50a:	9201      	str	r2, [sp, #4]
 800e50c:	9300      	str	r3, [sp, #0]
 800e50e:	2300      	movs	r3, #0
 800e510:	2201      	movs	r2, #1
 800e512:	2121      	movs	r1, #33	; 0x21
 800e514:	6838      	ldr	r0, [r7, #0]
 800e516:	f7fe fdd4 	bl	800d0c2 <SPI_ETH_REG>
 800e51a:	4603      	mov	r3, r0
 800e51c:	b2da      	uxtb	r2, r3
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	Y->Sn_TX_RD[0]=SPI_ETH_REG(X, 0x22 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e52a:	3318      	adds	r3, #24
 800e52c:	2201      	movs	r2, #1
 800e52e:	9201      	str	r2, [sp, #4]
 800e530:	9300      	str	r3, [sp, #0]
 800e532:	2300      	movs	r3, #0
 800e534:	2201      	movs	r2, #1
 800e536:	2122      	movs	r1, #34	; 0x22
 800e538:	6838      	ldr	r0, [r7, #0]
 800e53a:	f7fe fdc2 	bl	800d0c2 <SPI_ETH_REG>
 800e53e:	4603      	mov	r3, r0
 800e540:	b2da      	uxtb	r2, r3
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Y->Sn_TX_RD[1]=SPI_ETH_REG(X, 0x23 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e54e:	3318      	adds	r3, #24
 800e550:	2201      	movs	r2, #1
 800e552:	9201      	str	r2, [sp, #4]
 800e554:	9300      	str	r3, [sp, #0]
 800e556:	2300      	movs	r3, #0
 800e558:	2201      	movs	r2, #1
 800e55a:	2123      	movs	r1, #35	; 0x23
 800e55c:	6838      	ldr	r0, [r7, #0]
 800e55e:	f7fe fdb0 	bl	800d0c2 <SPI_ETH_REG>
 800e562:	4603      	mov	r3, r0
 800e564:	b2da      	uxtb	r2, r3
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	Y->Sn_TX_WR[0]=SPI_ETH_REG(X, 0x24 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e572:	3318      	adds	r3, #24
 800e574:	2201      	movs	r2, #1
 800e576:	9201      	str	r2, [sp, #4]
 800e578:	9300      	str	r3, [sp, #0]
 800e57a:	2300      	movs	r3, #0
 800e57c:	2201      	movs	r2, #1
 800e57e:	2124      	movs	r1, #36	; 0x24
 800e580:	6838      	ldr	r0, [r7, #0]
 800e582:	f7fe fd9e 	bl	800d0c2 <SPI_ETH_REG>
 800e586:	4603      	mov	r3, r0
 800e588:	b2da      	uxtb	r2, r3
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Y->Sn_TX_WR[1]=SPI_ETH_REG(X, 0x25 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e596:	3318      	adds	r3, #24
 800e598:	2201      	movs	r2, #1
 800e59a:	9201      	str	r2, [sp, #4]
 800e59c:	9300      	str	r3, [sp, #0]
 800e59e:	2300      	movs	r3, #0
 800e5a0:	2201      	movs	r2, #1
 800e5a2:	2125      	movs	r1, #37	; 0x25
 800e5a4:	6838      	ldr	r0, [r7, #0]
 800e5a6:	f7fe fd8c 	bl	800d0c2 <SPI_ETH_REG>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	b2da      	uxtb	r2, r3
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	Y->Sn_RX_RSR[0]=SPI_ETH_REG(X, 0x26 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e5ba:	3318      	adds	r3, #24
 800e5bc:	2201      	movs	r2, #1
 800e5be:	9201      	str	r2, [sp, #4]
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	2126      	movs	r1, #38	; 0x26
 800e5c8:	6838      	ldr	r0, [r7, #0]
 800e5ca:	f7fe fd7a 	bl	800d0c2 <SPI_ETH_REG>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	b2da      	uxtb	r2, r3
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Y->Sn_RX_RSR[1]=SPI_ETH_REG(X, 0x27 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e5de:	3318      	adds	r3, #24
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	9201      	str	r2, [sp, #4]
 800e5e4:	9300      	str	r3, [sp, #0]
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	2127      	movs	r1, #39	; 0x27
 800e5ec:	6838      	ldr	r0, [r7, #0]
 800e5ee:	f7fe fd68 	bl	800d0c2 <SPI_ETH_REG>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	b2da      	uxtb	r2, r3
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

	Y->Sn_RX_RD[0]=SPI_ETH_REG(X, 0x28 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e602:	3318      	adds	r3, #24
 800e604:	2201      	movs	r2, #1
 800e606:	9201      	str	r2, [sp, #4]
 800e608:	9300      	str	r3, [sp, #0]
 800e60a:	2300      	movs	r3, #0
 800e60c:	2201      	movs	r2, #1
 800e60e:	2128      	movs	r1, #40	; 0x28
 800e610:	6838      	ldr	r0, [r7, #0]
 800e612:	f7fe fd56 	bl	800d0c2 <SPI_ETH_REG>
 800e616:	4603      	mov	r3, r0
 800e618:	b2da      	uxtb	r2, r3
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Y->Sn_RX_RD[1]=SPI_ETH_REG(X, 0x29 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e626:	3318      	adds	r3, #24
 800e628:	2201      	movs	r2, #1
 800e62a:	9201      	str	r2, [sp, #4]
 800e62c:	9300      	str	r3, [sp, #0]
 800e62e:	2300      	movs	r3, #0
 800e630:	2201      	movs	r2, #1
 800e632:	2129      	movs	r1, #41	; 0x29
 800e634:	6838      	ldr	r0, [r7, #0]
 800e636:	f7fe fd44 	bl	800d0c2 <SPI_ETH_REG>
 800e63a:	4603      	mov	r3, r0
 800e63c:	b2da      	uxtb	r2, r3
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	Y->Sn_RX_WR[0]=SPI_ETH_REG(X, 0x2A ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e64a:	3318      	adds	r3, #24
 800e64c:	2201      	movs	r2, #1
 800e64e:	9201      	str	r2, [sp, #4]
 800e650:	9300      	str	r3, [sp, #0]
 800e652:	2300      	movs	r3, #0
 800e654:	2201      	movs	r2, #1
 800e656:	212a      	movs	r1, #42	; 0x2a
 800e658:	6838      	ldr	r0, [r7, #0]
 800e65a:	f7fe fd32 	bl	800d0c2 <SPI_ETH_REG>
 800e65e:	4603      	mov	r3, r0
 800e660:	b2da      	uxtb	r2, r3
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Y->Sn_RX_WR[1]=SPI_ETH_REG(X, 0x2B ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e66e:	3318      	adds	r3, #24
 800e670:	2201      	movs	r2, #1
 800e672:	9201      	str	r2, [sp, #4]
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	2300      	movs	r3, #0
 800e678:	2201      	movs	r2, #1
 800e67a:	212b      	movs	r1, #43	; 0x2b
 800e67c:	6838      	ldr	r0, [r7, #0]
 800e67e:	f7fe fd20 	bl	800d0c2 <SPI_ETH_REG>
 800e682:	4603      	mov	r3, r0
 800e684:	b2da      	uxtb	r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	Y->Sn_IMR=SPI_ETH_REG(X, 0x2C ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e692:	3318      	adds	r3, #24
 800e694:	2201      	movs	r2, #1
 800e696:	9201      	str	r2, [sp, #4]
 800e698:	9300      	str	r3, [sp, #0]
 800e69a:	2300      	movs	r3, #0
 800e69c:	2201      	movs	r2, #1
 800e69e:	212c      	movs	r1, #44	; 0x2c
 800e6a0:	6838      	ldr	r0, [r7, #0]
 800e6a2:	f7fe fd0e 	bl	800d0c2 <SPI_ETH_REG>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	b2da      	uxtb	r2, r3
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	Y->Sn_FRAG[0]=SPI_ETH_REG(X, 0x2D ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e6b6:	3318      	adds	r3, #24
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	9201      	str	r2, [sp, #4]
 800e6bc:	9300      	str	r3, [sp, #0]
 800e6be:	2300      	movs	r3, #0
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	212d      	movs	r1, #45	; 0x2d
 800e6c4:	6838      	ldr	r0, [r7, #0]
 800e6c6:	f7fe fcfc 	bl	800d0c2 <SPI_ETH_REG>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	b2da      	uxtb	r2, r3
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Y->Sn_FRAG[1]=SPI_ETH_REG(X, 0x2E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e6da:	3318      	adds	r3, #24
 800e6dc:	2201      	movs	r2, #1
 800e6de:	9201      	str	r2, [sp, #4]
 800e6e0:	9300      	str	r3, [sp, #0]
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	212e      	movs	r1, #46	; 0x2e
 800e6e8:	6838      	ldr	r0, [r7, #0]
 800e6ea:	f7fe fcea 	bl	800d0c2 <SPI_ETH_REG>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	b2da      	uxtb	r2, r3
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56


	Y->Sn_KPALVTR=SPI_ETH_REG(X, 0x2F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e6fe:	3318      	adds	r3, #24
 800e700:	2201      	movs	r2, #1
 800e702:	9201      	str	r2, [sp, #4]
 800e704:	9300      	str	r3, [sp, #0]
 800e706:	2300      	movs	r3, #0
 800e708:	2201      	movs	r2, #1
 800e70a:	212f      	movs	r1, #47	; 0x2f
 800e70c:	6838      	ldr	r0, [r7, #0]
 800e70e:	f7fe fcd8 	bl	800d0c2 <SPI_ETH_REG>
 800e712:	4603      	mov	r3, r0
 800e714:	b2da      	uxtb	r2, r3
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
};
 800e71c:	bf00      	nop
 800e71e:	4618      	mov	r0, r3
 800e720:	3708      	adds	r7, #8
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
	...

0800e728 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b090      	sub	sp, #64	; 0x40
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	607a      	str	r2, [r7, #4]
 800e734:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e736:	2300      	movs	r3, #0
 800e738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e73a:	2300      	movs	r3, #0
 800e73c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e73e:	2300      	movs	r3, #0
 800e740:	637b      	str	r3, [r7, #52]	; 0x34
 800e742:	2300      	movs	r3, #0
 800e744:	633b      	str	r3, [r7, #48]	; 0x30
 800e746:	2300      	movs	r3, #0
 800e748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e74a:	2300      	movs	r3, #0
 800e74c:	61fb      	str	r3, [r7, #28]
 800e74e:	2300      	movs	r3, #0
 800e750:	61bb      	str	r3, [r7, #24]
 800e752:	2300      	movs	r3, #0
 800e754:	62bb      	str	r3, [r7, #40]	; 0x28
 800e756:	2300      	movs	r3, #0
 800e758:	627b      	str	r3, [r7, #36]	; 0x24
 800e75a:	2300      	movs	r3, #0
 800e75c:	617b      	str	r3, [r7, #20]
 800e75e:	2300      	movs	r3, #0
 800e760:	623b      	str	r3, [r7, #32]
 800e762:	2300      	movs	r3, #0
 800e764:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800e772:	69fa      	ldr	r2, [r7, #28]
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	429a      	cmp	r2, r3
 800e778:	f2c0 8315 	blt.w	800eda6 <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800e77c:	2300      	movs	r3, #0
 800e77e:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800e780:	e00c      	b.n	800e79c <FT_String_ND+0x74>
							{
								n++;
 800e782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e784:	3301      	adds	r3, #1
 800e786:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800e788:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e78a:	69bb      	ldr	r3, [r7, #24]
 800e78c:	441a      	add	r2, r3
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	3301      	adds	r3, #1
 800e792:	429a      	cmp	r2, r3
 800e794:	dd02      	ble.n	800e79c <FT_String_ND+0x74>
								{
									estado=0;
 800e796:	2300      	movs	r3, #0
 800e798:	623b      	str	r3, [r7, #32]
									break;
 800e79a:	e009      	b.n	800e7b0 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800e79c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e79e:	68fa      	ldr	r2, [r7, #12]
 800e7a0:	4413      	add	r3, r2
 800e7a2:	781a      	ldrb	r2, [r3, #0]
 800e7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7a6:	6879      	ldr	r1, [r7, #4]
 800e7a8:	440b      	add	r3, r1
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d1e8      	bne.n	800e782 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800e7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800e7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800e7bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7be:	69bb      	ldr	r3, [r7, #24]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d108      	bne.n	800e7d6 <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800e7c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	1ad3      	subs	r3, r2, r3
 800e7ca:	1c5a      	adds	r2, r3, #1
 800e7cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7ce:	601a      	str	r2, [r3, #0]
									estado=1;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	623b      	str	r3, [r7, #32]
									break;
 800e7d4:	e010      	b.n	800e7f8 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800e7d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	dd02      	ble.n	800e7e4 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	623b      	str	r3, [r7, #32]
									 break;
 800e7e2:	e009      	b.n	800e7f8 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800e7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7e6:	68fa      	ldr	r2, [r7, #12]
 800e7e8:	4413      	add	r3, r2
 800e7ea:	781a      	ldrb	r2, [r3, #0]
 800e7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7ee:	6879      	ldr	r1, [r7, #4]
 800e7f0:	440b      	add	r3, r1
 800e7f2:	781b      	ldrb	r3, [r3, #0]
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d0db      	beq.n	800e7b0 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	1e5a      	subs	r2, r3, #1
 800e7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7fe:	4413      	add	r3, r2
 800e800:	69fa      	ldr	r2, [r7, #28]
 800e802:	429a      	cmp	r2, r3
 800e804:	dd02      	ble.n	800e80c <FT_String_ND+0xe4>
 800e806:	6a3b      	ldr	r3, [r7, #32]
 800e808:	2b01      	cmp	r3, #1
 800e80a:	d1b7      	bne.n	800e77c <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800e80c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d101      	bne.n	800e816 <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800e812:	6a3b      	ldr	r3, [r7, #32]
 800e814:	e2c8      	b.n	800eda8 <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800e816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e818:	2b01      	cmp	r3, #1
 800e81a:	d12c      	bne.n	800e876 <FT_String_ND+0x14e>
 800e81c:	6a3b      	ldr	r3, [r7, #32]
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d129      	bne.n	800e876 <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800e822:	e014      	b.n	800e84e <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800e824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e826:	681a      	ldr	r2, [r3, #0]
 800e828:	69bb      	ldr	r3, [r7, #24]
 800e82a:	441a      	add	r2, r3
 800e82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e82e:	4413      	add	r3, r2
 800e830:	3b01      	subs	r3, #1
 800e832:	68fa      	ldr	r2, [r7, #12]
 800e834:	441a      	add	r2, r3
 800e836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e838:	6819      	ldr	r1, [r3, #0]
 800e83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e83c:	440b      	add	r3, r1
 800e83e:	3b01      	subs	r3, #1
 800e840:	68f9      	ldr	r1, [r7, #12]
 800e842:	440b      	add	r3, r1
 800e844:	7812      	ldrb	r2, [r2, #0]
 800e846:	701a      	strb	r2, [r3, #0]
										n3++;
 800e848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e84a:	3301      	adds	r3, #1
 800e84c:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800e84e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e850:	681a      	ldr	r2, [r3, #0]
 800e852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e854:	441a      	add	r2, r3
 800e856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e858:	4413      	add	r3, r2
 800e85a:	69fa      	ldr	r2, [r7, #28]
 800e85c:	429a      	cmp	r2, r3
 800e85e:	dae1      	bge.n	800e824 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800e860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e862:	681a      	ldr	r2, [r3, #0]
 800e864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e866:	4413      	add	r3, r2
 800e868:	1e5a      	subs	r2, r3, #1
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	601a      	str	r2, [r3, #0]
							estado=3;
 800e86e:	2303      	movs	r3, #3
 800e870:	623b      	str	r3, [r7, #32]
							return(estado);
 800e872:	6a3b      	ldr	r3, [r7, #32]
 800e874:	e298      	b.n	800eda8 <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800e876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e878:	2b02      	cmp	r3, #2
 800e87a:	f040 80be 	bne.w	800e9fa <FT_String_ND+0x2d2>
 800e87e:	6a3b      	ldr	r3, [r7, #32]
 800e880:	2b01      	cmp	r3, #1
 800e882:	f040 80ba 	bne.w	800e9fa <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e886:	e012      	b.n	800e8ae <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e888:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e88a:	69bb      	ldr	r3, [r7, #24]
 800e88c:	1ad2      	subs	r2, r2, r3
 800e88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e890:	4413      	add	r3, r2
 800e892:	461a      	mov	r2, r3
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	441a      	add	r2, r3
 800e898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e89a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e89c:	440b      	add	r3, r1
 800e89e:	7812      	ldrb	r2, [r2, #0]
 800e8a0:	701a      	strb	r2, [r3, #0]
								n4++;
 800e8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800e8a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8ac:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e8ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	1ad2      	subs	r2, r2, r3
 800e8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b6:	4413      	add	r3, r2
 800e8b8:	69fa      	ldr	r2, [r7, #28]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	dae4      	bge.n	800e888 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800e8be:	499d      	ldr	r1, [pc, #628]	; (800eb34 <FT_String_ND+0x40c>)
 800e8c0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e8c2:	f000 fd07 	bl	800f2d4 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800e8c6:	499c      	ldr	r1, [pc, #624]	; (800eb38 <FT_String_ND+0x410>)
 800e8c8:	2000      	movs	r0, #0
 800e8ca:	f000 fd03 	bl	800f2d4 <strtok>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f000 fb40 	bl	800ef56 <atoi>
 800e8d6:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800e8d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8da:	3b01      	subs	r3, #1
 800e8dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	db02      	blt.n	800e8e8 <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 800e8e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8e4:	3b01      	subs	r3, #1
 800e8e6:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800e8e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8ea:	3306      	adds	r3, #6
 800e8ec:	222c      	movs	r2, #44	; 0x2c
 800e8ee:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f2:	2b09      	cmp	r3, #9
 800e8f4:	dc0d      	bgt.n	800e912 <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800e8f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8f8:	3308      	adds	r3, #8
 800e8fa:	223a      	movs	r2, #58	; 0x3a
 800e8fc:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800e8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e900:	3309      	adds	r3, #9
 800e902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e904:	4413      	add	r3, r2
 800e906:	2200      	movs	r2, #0
 800e908:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800e90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90c:	3309      	adds	r3, #9
 800e90e:	627b      	str	r3, [r7, #36]	; 0x24
 800e910:	e021      	b.n	800e956 <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 800e912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e914:	2b63      	cmp	r3, #99	; 0x63
 800e916:	dc0d      	bgt.n	800e934 <FT_String_ND+0x20c>
														{
															c[9]=':';
 800e918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e91a:	3309      	adds	r3, #9
 800e91c:	223a      	movs	r2, #58	; 0x3a
 800e91e:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800e920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e922:	330a      	adds	r3, #10
 800e924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e926:	4413      	add	r3, r2
 800e928:	2200      	movs	r2, #0
 800e92a:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800e92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92e:	330a      	adds	r3, #10
 800e930:	627b      	str	r3, [r7, #36]	; 0x24
 800e932:	e010      	b.n	800e956 <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 800e934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e93a:	da0c      	bge.n	800e956 <FT_String_ND+0x22e>
														{
															c[10]=':';
 800e93c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e93e:	330a      	adds	r3, #10
 800e940:	223a      	movs	r2, #58	; 0x3a
 800e942:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800e944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e946:	330b      	adds	r3, #11
 800e948:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e94a:	4413      	add	r3, r2
 800e94c:	2200      	movs	r2, #0
 800e94e:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800e950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e952:	330b      	adds	r3, #11
 800e954:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800e956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e95a:	601a      	str	r2, [r3, #0]
							n4=0;
 800e95c:	2300      	movs	r3, #0
 800e95e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e960:	e016      	b.n	800e990 <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e962:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e964:	69bb      	ldr	r3, [r7, #24]
 800e966:	1ad2      	subs	r2, r2, r3
 800e968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96a:	441a      	add	r2, r3
 800e96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e96e:	4413      	add	r3, r2
 800e970:	461a      	mov	r2, r3
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	441a      	add	r2, r3
 800e976:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e978:	69bb      	ldr	r3, [r7, #24]
 800e97a:	1ac9      	subs	r1, r1, r3
 800e97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97e:	440b      	add	r3, r1
 800e980:	4619      	mov	r1, r3
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	440b      	add	r3, r1
 800e986:	7812      	ldrb	r2, [r2, #0]
 800e988:	701a      	strb	r2, [r3, #0]
								n4++;
 800e98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e98c:	3301      	adds	r3, #1
 800e98e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e990:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	1ad2      	subs	r2, r2, r3
 800e996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e998:	441a      	add	r2, r3
 800e99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99c:	4413      	add	r3, r2
 800e99e:	69fa      	ldr	r2, [r7, #28]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	dade      	bge.n	800e962 <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 800e9a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a8:	441a      	add	r2, r3
 800e9aa:	69bb      	ldr	r3, [r7, #24]
 800e9ac:	1ad3      	subs	r3, r2, r3
 800e9ae:	1e5a      	subs	r2, r3, #1
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800e9b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9b6:	69bb      	ldr	r3, [r7, #24]
 800e9b8:	1ad2      	subs	r2, r2, r3
 800e9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9bc:	441a      	add	r2, r3
 800e9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c0:	4413      	add	r3, r2
 800e9c2:	461a      	mov	r2, r3
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	4413      	add	r3, r2
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800e9cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9ce:	69bb      	ldr	r3, [r7, #24]
 800e9d0:	1ad2      	subs	r2, r2, r3
 800e9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d4:	4413      	add	r3, r2
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	4413      	add	r3, r2
 800e9dc:	2200      	movs	r2, #0
 800e9de:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800e9e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9e2:	69bb      	ldr	r3, [r7, #24]
 800e9e4:	1ad2      	subs	r2, r2, r3
 800e9e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ea:	440b      	add	r3, r1
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d102      	bne.n	800e9f6 <FT_String_ND+0x2ce>
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	701a      	strb	r2, [r3, #0]
							estado=3;
 800e9f6:	2303      	movs	r3, #3
 800e9f8:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800e9fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9fc:	2b03      	cmp	r3, #3
 800e9fe:	d146      	bne.n	800ea8e <FT_String_ND+0x366>
 800ea00:	6a3b      	ldr	r3, [r7, #32]
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	d143      	bne.n	800ea8e <FT_String_ND+0x366>
						{
						n3=0;
 800ea06:	2300      	movs	r3, #0
 800ea08:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800ea0a:	e00e      	b.n	800ea2a <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 800ea0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea12:	4413      	add	r3, r2
 800ea14:	3b01      	subs	r3, #1
 800ea16:	68fa      	ldr	r2, [r7, #12]
 800ea18:	441a      	add	r2, r3
 800ea1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea1c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ea1e:	440b      	add	r3, r1
 800ea20:	7812      	ldrb	r2, [r2, #0]
 800ea22:	701a      	strb	r2, [r3, #0]
										n3++;
 800ea24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea26:	3301      	adds	r3, #1
 800ea28:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800ea2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea2c:	69bb      	ldr	r3, [r7, #24]
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	dbec      	blt.n	800ea0c <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800ea32:	2300      	movs	r3, #0
 800ea34:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800ea36:	e014      	b.n	800ea62 <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800ea38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	69bb      	ldr	r3, [r7, #24]
 800ea3e:	441a      	add	r2, r3
 800ea40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea42:	4413      	add	r3, r2
 800ea44:	3b01      	subs	r3, #1
 800ea46:	68fa      	ldr	r2, [r7, #12]
 800ea48:	441a      	add	r2, r3
 800ea4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea4c:	6819      	ldr	r1, [r3, #0]
 800ea4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea50:	440b      	add	r3, r1
 800ea52:	3b01      	subs	r3, #1
 800ea54:	68f9      	ldr	r1, [r7, #12]
 800ea56:	440b      	add	r3, r1
 800ea58:	7812      	ldrb	r2, [r2, #0]
 800ea5a:	701a      	strb	r2, [r3, #0]
										n5++;
 800ea5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5e:	3301      	adds	r3, #1
 800ea60:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800ea62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	441a      	add	r2, r3
 800ea6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6c:	441a      	add	r2, r3
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	dde0      	ble.n	800ea38 <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800ea76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7c:	4413      	add	r3, r2
 800ea7e:	1e5a      	subs	r2, r3, #1
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800ea84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea88:	601a      	str	r2, [r3, #0]
							estado=3;
 800ea8a:	2303      	movs	r3, #3
 800ea8c:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800ea8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea90:	2b04      	cmp	r3, #4
 800ea92:	f040 80bd 	bne.w	800ec10 <FT_String_ND+0x4e8>
 800ea96:	6a3b      	ldr	r3, [r7, #32]
 800ea98:	2b01      	cmp	r3, #1
 800ea9a:	f040 80b9 	bne.w	800ec10 <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ea9e:	e012      	b.n	800eac6 <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800eaa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eaa2:	69bb      	ldr	r3, [r7, #24]
 800eaa4:	1ad2      	subs	r2, r2, r3
 800eaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa8:	4413      	add	r3, r2
 800eaaa:	461a      	mov	r2, r3
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	441a      	add	r2, r3
 800eab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eab4:	440b      	add	r3, r1
 800eab6:	7812      	ldrb	r2, [r2, #0]
 800eab8:	701a      	strb	r2, [r3, #0]
								n4++;
 800eaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eabc:	3301      	adds	r3, #1
 800eabe:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 800eac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eac4:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eac6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eac8:	69bb      	ldr	r3, [r7, #24]
 800eaca:	1ad2      	subs	r2, r2, r3
 800eacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eace:	4413      	add	r3, r2
 800ead0:	69fa      	ldr	r2, [r7, #28]
 800ead2:	429a      	cmp	r2, r3
 800ead4:	dae4      	bge.n	800eaa0 <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800ead6:	4917      	ldr	r1, [pc, #92]	; (800eb34 <FT_String_ND+0x40c>)
 800ead8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800eada:	f000 fbfb 	bl	800f2d4 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800eade:	4916      	ldr	r1, [pc, #88]	; (800eb38 <FT_String_ND+0x410>)
 800eae0:	2000      	movs	r0, #0
 800eae2:	f000 fbf7 	bl	800f2d4 <strtok>
 800eae6:	4603      	mov	r3, r0
 800eae8:	4618      	mov	r0, r3
 800eaea:	f000 fa34 	bl	800ef56 <atoi>
 800eaee:	62b8      	str	r0, [r7, #40]	; 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 800eaf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eaf2:	3b01      	subs	r3, #1
 800eaf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	db02      	blt.n	800eb00 <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800eafa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eafc:	3b01      	subs	r3, #1
 800eafe:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800eb00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb02:	3306      	adds	r3, #6
 800eb04:	222c      	movs	r2, #44	; 0x2c
 800eb06:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800eb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0a:	2b09      	cmp	r3, #9
 800eb0c:	dc07      	bgt.n	800eb1e <FT_String_ND+0x3f6>
											{
												c[8]=':';
 800eb0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb10:	3308      	adds	r3, #8
 800eb12:	223a      	movs	r2, #58	; 0x3a
 800eb14:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800eb16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb18:	3309      	adds	r3, #9
 800eb1a:	627b      	str	r3, [r7, #36]	; 0x24
 800eb1c:	e019      	b.n	800eb52 <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 800eb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb20:	2b63      	cmp	r3, #99	; 0x63
 800eb22:	dc0b      	bgt.n	800eb3c <FT_String_ND+0x414>
														{
															c[9]=':';
 800eb24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb26:	3309      	adds	r3, #9
 800eb28:	223a      	movs	r2, #58	; 0x3a
 800eb2a:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800eb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb2e:	330a      	adds	r3, #10
 800eb30:	627b      	str	r3, [r7, #36]	; 0x24
 800eb32:	e00e      	b.n	800eb52 <FT_String_ND+0x42a>
 800eb34:	08010bb4 	.word	0x08010bb4
 800eb38:	08010bb8 	.word	0x08010bb8
														}
														else
														{
														if (lngd < 1000)
 800eb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eb42:	da06      	bge.n	800eb52 <FT_String_ND+0x42a>
														{
															c[10]=':';
 800eb44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb46:	330a      	adds	r3, #10
 800eb48:	223a      	movs	r2, #58	; 0x3a
 800eb4a:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800eb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb4e:	330b      	adds	r3, #11
 800eb50:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800eb52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb56:	601a      	str	r2, [r3, #0]
							n4=0;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800eb5c:	e016      	b.n	800eb8c <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800eb5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb60:	69bb      	ldr	r3, [r7, #24]
 800eb62:	1ad2      	subs	r2, r2, r3
 800eb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb66:	441a      	add	r2, r3
 800eb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6a:	4413      	add	r3, r2
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	441a      	add	r2, r3
 800eb72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eb74:	69bb      	ldr	r3, [r7, #24]
 800eb76:	1ac9      	subs	r1, r1, r3
 800eb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7a:	440b      	add	r3, r1
 800eb7c:	4619      	mov	r1, r3
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	440b      	add	r3, r1
 800eb82:	7812      	ldrb	r2, [r2, #0]
 800eb84:	701a      	strb	r2, [r3, #0]
								n4++;
 800eb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb88:	3301      	adds	r3, #1
 800eb8a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800eb8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb8e:	69bb      	ldr	r3, [r7, #24]
 800eb90:	1ad2      	subs	r2, r2, r3
 800eb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb94:	441a      	add	r2, r3
 800eb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb98:	4413      	add	r3, r2
 800eb9a:	69fa      	ldr	r2, [r7, #28]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	dade      	bge.n	800eb5e <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800eba0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eba4:	441a      	add	r2, r3
 800eba6:	69bb      	ldr	r3, [r7, #24]
 800eba8:	1ad3      	subs	r3, r2, r3
 800ebaa:	1e5a      	subs	r2, r3, #1
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	601a      	str	r2, [r3, #0]
							n5=0;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ebb4:	e00f      	b.n	800ebd6 <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ebb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebba:	1ad2      	subs	r2, r2, r3
 800ebbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebbe:	4413      	add	r3, r2
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebc4:	441a      	add	r2, r3
 800ebc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ebca:	440b      	add	r3, r1
 800ebcc:	7812      	ldrb	r2, [r2, #0]
 800ebce:	701a      	strb	r2, [r3, #0]
								n5++;
 800ebd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ebd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebda:	1ad2      	subs	r2, r2, r3
 800ebdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebde:	441a      	add	r2, r3
 800ebe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	dbe6      	blt.n	800ebb6 <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ebe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebec:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ebee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf4:	441a      	add	r2, r3
 800ebf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf8:	1ad2      	subs	r2, r2, r3
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	4413      	add	r3, r2
 800ec00:	69fa      	ldr	r2, [r7, #28]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d102      	bne.n	800ec0c <FT_String_ND+0x4e4>
							{
								estado=4;
 800ec06:	2304      	movs	r3, #4
 800ec08:	623b      	str	r3, [r7, #32]
 800ec0a:	e001      	b.n	800ec10 <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 800ec0c:	2305      	movs	r3, #5
 800ec0e:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800ec10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec12:	2b05      	cmp	r3, #5
 800ec14:	f040 80c5 	bne.w	800eda2 <FT_String_ND+0x67a>
 800ec18:	6a3b      	ldr	r3, [r7, #32]
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	f040 80c1 	bne.w	800eda2 <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ec20:	e012      	b.n	800ec48 <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800ec22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec24:	69bb      	ldr	r3, [r7, #24]
 800ec26:	1ad2      	subs	r2, r2, r3
 800ec28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec2a:	4413      	add	r3, r2
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	441a      	add	r2, r3
 800ec32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec34:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ec36:	440b      	add	r3, r1
 800ec38:	7812      	ldrb	r2, [r2, #0]
 800ec3a:	701a      	strb	r2, [r3, #0]
								n4++;
 800ec3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3e:	3301      	adds	r3, #1
 800ec40:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800ec42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec46:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ec48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	1ad2      	subs	r2, r2, r3
 800ec4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec50:	4413      	add	r3, r2
 800ec52:	69fa      	ldr	r2, [r7, #28]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	dae4      	bge.n	800ec22 <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800ec58:	4955      	ldr	r1, [pc, #340]	; (800edb0 <FT_String_ND+0x688>)
 800ec5a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ec5c:	f000 fb3a 	bl	800f2d4 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800ec60:	4954      	ldr	r1, [pc, #336]	; (800edb4 <FT_String_ND+0x68c>)
 800ec62:	2000      	movs	r0, #0
 800ec64:	f000 fb36 	bl	800f2d4 <strtok>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f000 f973 	bl	800ef56 <atoi>
 800ec70:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800ec72:	4950      	ldr	r1, [pc, #320]	; (800edb4 <FT_String_ND+0x68c>)
 800ec74:	2000      	movs	r0, #0
 800ec76:	f000 fb2d 	bl	800f2d4 <strtok>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f000 f96a 	bl	800ef56 <atoi>
 800ec82:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800ec84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec86:	3b01      	subs	r3, #1
 800ec88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	db02      	blt.n	800ec94 <FT_String_ND+0x56c>
							{
								lngd=of-1;
 800ec8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec90:	3b01      	subs	r3, #1
 800ec92:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ec94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec96:	3306      	adds	r3, #6
 800ec98:	222c      	movs	r2, #44	; 0x2c
 800ec9a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ec9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9e:	2b09      	cmp	r3, #9
 800eca0:	dc07      	bgt.n	800ecb2 <FT_String_ND+0x58a>
											{
												c[10]=':';
 800eca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eca4:	330a      	adds	r3, #10
 800eca6:	223a      	movs	r2, #58	; 0x3a
 800eca8:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800ecaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecac:	330b      	adds	r3, #11
 800ecae:	627b      	str	r3, [r7, #36]	; 0x24
 800ecb0:	e015      	b.n	800ecde <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 800ecb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb4:	2b63      	cmp	r3, #99	; 0x63
 800ecb6:	dc07      	bgt.n	800ecc8 <FT_String_ND+0x5a0>
														{
															c[11]=':';
 800ecb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecba:	330b      	adds	r3, #11
 800ecbc:	223a      	movs	r2, #58	; 0x3a
 800ecbe:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800ecc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc2:	330c      	adds	r3, #12
 800ecc4:	627b      	str	r3, [r7, #36]	; 0x24
 800ecc6:	e00a      	b.n	800ecde <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 800ecc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ecce:	da06      	bge.n	800ecde <FT_String_ND+0x5b6>
														{
															c[12]=':';
 800ecd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecd2:	330c      	adds	r3, #12
 800ecd4:	223a      	movs	r2, #58	; 0x3a
 800ecd6:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800ecd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecda:	330d      	adds	r3, #13
 800ecdc:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ecde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ece0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ece2:	601a      	str	r2, [r3, #0]
							n4=0;
 800ece4:	2300      	movs	r3, #0
 800ece6:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ece8:	e016      	b.n	800ed18 <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ecea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecec:	69bb      	ldr	r3, [r7, #24]
 800ecee:	1ad2      	subs	r2, r2, r3
 800ecf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf2:	441a      	add	r2, r3
 800ecf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf6:	4413      	add	r3, r2
 800ecf8:	461a      	mov	r2, r3
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	441a      	add	r2, r3
 800ecfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	1ac9      	subs	r1, r1, r3
 800ed04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed06:	440b      	add	r3, r1
 800ed08:	4619      	mov	r1, r3
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	440b      	add	r3, r1
 800ed0e:	7812      	ldrb	r2, [r2, #0]
 800ed10:	701a      	strb	r2, [r3, #0]
								n4++;
 800ed12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed14:	3301      	adds	r3, #1
 800ed16:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ed18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed1a:	69bb      	ldr	r3, [r7, #24]
 800ed1c:	1ad2      	subs	r2, r2, r3
 800ed1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed20:	441a      	add	r2, r3
 800ed22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed24:	4413      	add	r3, r2
 800ed26:	69fa      	ldr	r2, [r7, #28]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	dade      	bge.n	800ecea <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800ed2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed30:	441a      	add	r2, r3
 800ed32:	69bb      	ldr	r3, [r7, #24]
 800ed34:	1ad3      	subs	r3, r2, r3
 800ed36:	1e5a      	subs	r2, r3, #1
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	601a      	str	r2, [r3, #0]
							n5=0;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ed40:	e00f      	b.n	800ed62 <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ed42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed46:	1ad2      	subs	r2, r2, r3
 800ed48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4a:	4413      	add	r3, r2
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed50:	441a      	add	r2, r3
 800ed52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed54:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ed56:	440b      	add	r3, r1
 800ed58:	7812      	ldrb	r2, [r2, #0]
 800ed5a:	701a      	strb	r2, [r3, #0]
								n5++;
 800ed5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5e:	3301      	adds	r3, #1
 800ed60:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ed62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed66:	1ad2      	subs	r2, r2, r3
 800ed68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed6a:	441a      	add	r2, r3
 800ed6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	dbe6      	blt.n	800ed42 <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ed74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed78:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ed7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed80:	441a      	add	r2, r3
 800ed82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed84:	1ad2      	subs	r2, r2, r3
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	69fa      	ldr	r2, [r7, #28]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d105      	bne.n	800ed9e <FT_String_ND+0x676>
							{
								estado=4;
 800ed92:	2304      	movs	r3, #4
 800ed94:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 800ed96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed98:	693a      	ldr	r2, [r7, #16]
 800ed9a:	601a      	str	r2, [r3, #0]
 800ed9c:	e001      	b.n	800eda2 <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 800ed9e:	2305      	movs	r3, #5
 800eda0:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800eda2:	6a3b      	ldr	r3, [r7, #32]
 800eda4:	e000      	b.n	800eda8 <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 800eda6:	2302      	movs	r3, #2
			}
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3740      	adds	r7, #64	; 0x40
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}
 800edb0:	08010bb4 	.word	0x08010bb4
 800edb4:	08010bb8 	.word	0x08010bb8

0800edb8 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b088      	sub	sp, #32
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800edc2:	2330      	movs	r3, #48	; 0x30
 800edc4:	60bb      	str	r3, [r7, #8]
 800edc6:	f107 030c 	add.w	r3, r7, #12
 800edca:	2200      	movs	r2, #0
 800edcc:	601a      	str	r2, [r3, #0]
 800edce:	605a      	str	r2, [r3, #4]
 800edd0:	609a      	str	r2, [r3, #8]
 800edd2:	60da      	str	r2, [r3, #12]
int i=0;	
 800edd4:	2300      	movs	r3, #0
 800edd6:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800edd8:	f107 0308 	add.w	r3, r7, #8
 800eddc:	687a      	ldr	r2, [r7, #4]
 800edde:	490f      	ldr	r1, [pc, #60]	; (800ee1c <INTOA+0x64>)
 800ede0:	4618      	mov	r0, r3
 800ede2:	f000 f9f9 	bl	800f1d8 <siprintf>
		while(i<=strlen(origbuff))
 800ede6:	e00b      	b.n	800ee00 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	1c5a      	adds	r2, r3, #1
 800edec:	603a      	str	r2, [r7, #0]
 800edee:	f107 0108 	add.w	r1, r7, #8
 800edf2:	69fa      	ldr	r2, [r7, #28]
 800edf4:	440a      	add	r2, r1
 800edf6:	7812      	ldrb	r2, [r2, #0]
 800edf8:	701a      	strb	r2, [r3, #0]
		i++;
 800edfa:	69fb      	ldr	r3, [r7, #28]
 800edfc:	3301      	adds	r3, #1
 800edfe:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800ee00:	f107 0308 	add.w	r3, r7, #8
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7f1 f9f5 	bl	80001f4 <strlen>
 800ee0a:	4602      	mov	r2, r0
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d2ea      	bcs.n	800ede8 <INTOA+0x30>
		}
		return(i);
 800ee12:	69fb      	ldr	r3, [r7, #28]
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3720      	adds	r7, #32
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	08010bbc 	.word	0x08010bbc

0800ee20 <FTOA>:

int FTOA( int a,  unsigned char *v1, int comma)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b08c      	sub	sp, #48	; 0x30
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	607a      	str	r2, [r7, #4]
char origbuff[20]="0";
 800ee2c:	2330      	movs	r3, #48	; 0x30
 800ee2e:	617b      	str	r3, [r7, #20]
 800ee30:	f107 0318 	add.w	r3, r7, #24
 800ee34:	2200      	movs	r2, #0
 800ee36:	601a      	str	r2, [r3, #0]
 800ee38:	605a      	str	r2, [r3, #4]
 800ee3a:	609a      	str	r2, [r3, #8]
 800ee3c:	60da      	str	r2, [r3, #12]
int i=0;
 800ee3e:	2300      	movs	r3, #0
 800ee40:	62fb      	str	r3, [r7, #44]	; 0x2c
int b=0;
 800ee42:	2300      	movs	r3, #0
 800ee44:	62bb      	str	r3, [r7, #40]	; 0x28

		sprintf(origbuff,"%i",a); 	//Paso el entreo a cadena de caracteres
 800ee46:	f107 0314 	add.w	r3, r7, #20
 800ee4a:	68fa      	ldr	r2, [r7, #12]
 800ee4c:	491b      	ldr	r1, [pc, #108]	; (800eebc <FTOA+0x9c>)
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f000 f9c2 	bl	800f1d8 <siprintf>
		b=strlen(origbuff);
 800ee54:	f107 0314 	add.w	r3, r7, #20
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7f1 f9cb 	bl	80001f4 <strlen>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	62bb      	str	r3, [r7, #40]	; 0x28
		if(comma<b)					//Si la posición de la coma es menor a la posición de los caracteres ejemplo int= 2 comma=0 resultado = 0,02
 800ee62:	687a      	ldr	r2, [r7, #4]
 800ee64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee66:	429a      	cmp	r2, r3
 800ee68:	da22      	bge.n	800eeb0 <FTOA+0x90>
		{

			while(i<=((b)+1))
 800ee6a:	e01a      	b.n	800eea2 <FTOA+0x82>
			{
				if((i==(b-comma))&&(comma<(b)))
 800ee6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	1ad3      	subs	r3, r2, r3
 800ee72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d108      	bne.n	800ee8a <FTOA+0x6a>
 800ee78:	687a      	ldr	r2, [r7, #4]
 800ee7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	da04      	bge.n	800ee8a <FTOA+0x6a>
				{
					*v1++='.';
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	1c5a      	adds	r2, r3, #1
 800ee84:	60ba      	str	r2, [r7, #8]
 800ee86:	222e      	movs	r2, #46	; 0x2e
 800ee88:	701a      	strb	r2, [r3, #0]
					//i++;
				}
				*v1++=(unsigned char)origbuff[i];
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	1c5a      	adds	r2, r3, #1
 800ee8e:	60ba      	str	r2, [r7, #8]
 800ee90:	f107 0114 	add.w	r1, r7, #20
 800ee94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee96:	440a      	add	r2, r1
 800ee98:	7812      	ldrb	r2, [r2, #0]
 800ee9a:	701a      	strb	r2, [r3, #0]
				i++;
 800ee9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9e:	3301      	adds	r3, #1
 800eea0:	62fb      	str	r3, [r7, #44]	; 0x2c
			while(i<=((b)+1))
 800eea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea4:	3301      	adds	r3, #1
 800eea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	dddf      	ble.n	800ee6c <FTOA+0x4c>
			}
			return(i);
 800eeac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeae:	e000      	b.n	800eeb2 <FTOA+0x92>
		{
			/*v1++='0';
			*v1++='.';
			*v1++='0';*/
		}
		return(0);
 800eeb0:	2300      	movs	r3, #0
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3730      	adds	r7, #48	; 0x30
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	08010bbc 	.word	0x08010bbc

0800eec0 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b088      	sub	sp, #32
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	60f8      	str	r0, [r7, #12]
 800eec8:	60b9      	str	r1, [r7, #8]
 800eeca:	607a      	str	r2, [r7, #4]
 800eecc:	603b      	str	r3, [r7, #0]
int x =0;
 800eece:	2300      	movs	r3, #0
 800eed0:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800eed2:	2300      	movs	r3, #0
 800eed4:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800eed6:	f107 0310 	add.w	r3, r7, #16
 800eeda:	617b      	str	r3, [r7, #20]
if (c==0)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d105      	bne.n	800eeee <CopiaVector+0x2e>
{
	x=strlen(b);
 800eee2:	68b8      	ldr	r0, [r7, #8]
 800eee4:	f7f1 f986 	bl	80001f4 <strlen>
 800eee8:	4603      	mov	r3, r0
 800eeea:	61bb      	str	r3, [r7, #24]
 800eeec:	e02e      	b.n	800ef4c <CopiaVector+0x8c>
}
else
	{
		x=c;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800eef2:	69bb      	ldr	r3, [r7, #24]
 800eef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eef8:	dd01      	ble.n	800eefe <CopiaVector+0x3e>
			{
				return(1);
 800eefa:	2301      	movs	r3, #1
 800eefc:	e027      	b.n	800ef4e <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800eefe:	2300      	movs	r3, #0
 800ef00:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800ef02:	e00a      	b.n	800ef1a <CopiaVector+0x5a>
				{
					*a++=*b++;
 800ef04:	68ba      	ldr	r2, [r7, #8]
 800ef06:	1c53      	adds	r3, r2, #1
 800ef08:	60bb      	str	r3, [r7, #8]
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	1c59      	adds	r1, r3, #1
 800ef0e:	60f9      	str	r1, [r7, #12]
 800ef10:	7812      	ldrb	r2, [r2, #0]
 800ef12:	701a      	strb	r2, [r3, #0]
					p++;
 800ef14:	69fb      	ldr	r3, [r7, #28]
 800ef16:	3301      	adds	r3, #1
 800ef18:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800ef1a:	69fa      	ldr	r2, [r7, #28]
 800ef1c:	69bb      	ldr	r3, [r7, #24]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	dbf0      	blt.n	800ef04 <CopiaVector+0x44>
				}


			if (d==1)
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d111      	bne.n	800ef4c <CopiaVector+0x8c>
			{
			  p=c;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	61fb      	str	r3, [r7, #28]
			  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800ef2c:	e008      	b.n	800ef40 <CopiaVector+0x80>
			  {

				  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	1c5a      	adds	r2, r3, #1
 800ef32:	60fa      	str	r2, [r7, #12]
 800ef34:	697a      	ldr	r2, [r7, #20]
 800ef36:	7812      	ldrb	r2, [r2, #0]
 800ef38:	701a      	strb	r2, [r3, #0]
				  p++;
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	61fb      	str	r3, [r7, #28]
			  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800ef40:	687a      	ldr	r2, [r7, #4]
 800ef42:	69fb      	ldr	r3, [r7, #28]
 800ef44:	429a      	cmp	r2, r3
 800ef46:	daf2      	bge.n	800ef2e <CopiaVector+0x6e>
				  //&a[p]="/0";

			  }
			return (0);
 800ef48:	2300      	movs	r3, #0
 800ef4a:	e000      	b.n	800ef4e <CopiaVector+0x8e>
			}

			}
	}
return (1);
 800ef4c:	2301      	movs	r3, #1
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3720      	adds	r7, #32
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}

0800ef56 <atoi>:
 800ef56:	220a      	movs	r2, #10
 800ef58:	2100      	movs	r1, #0
 800ef5a:	f000 b883 	b.w	800f064 <strtol>
	...

0800ef60 <_strtol_l.constprop.0>:
 800ef60:	2b01      	cmp	r3, #1
 800ef62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef66:	d001      	beq.n	800ef6c <_strtol_l.constprop.0+0xc>
 800ef68:	2b24      	cmp	r3, #36	; 0x24
 800ef6a:	d906      	bls.n	800ef7a <_strtol_l.constprop.0+0x1a>
 800ef6c:	f000 fa54 	bl	800f418 <__errno>
 800ef70:	2316      	movs	r3, #22
 800ef72:	6003      	str	r3, [r0, #0]
 800ef74:	2000      	movs	r0, #0
 800ef76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f060 <_strtol_l.constprop.0+0x100>
 800ef7e:	460d      	mov	r5, r1
 800ef80:	462e      	mov	r6, r5
 800ef82:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef86:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ef8a:	f017 0708 	ands.w	r7, r7, #8
 800ef8e:	d1f7      	bne.n	800ef80 <_strtol_l.constprop.0+0x20>
 800ef90:	2c2d      	cmp	r4, #45	; 0x2d
 800ef92:	d132      	bne.n	800effa <_strtol_l.constprop.0+0x9a>
 800ef94:	782c      	ldrb	r4, [r5, #0]
 800ef96:	2701      	movs	r7, #1
 800ef98:	1cb5      	adds	r5, r6, #2
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d05b      	beq.n	800f056 <_strtol_l.constprop.0+0xf6>
 800ef9e:	2b10      	cmp	r3, #16
 800efa0:	d109      	bne.n	800efb6 <_strtol_l.constprop.0+0x56>
 800efa2:	2c30      	cmp	r4, #48	; 0x30
 800efa4:	d107      	bne.n	800efb6 <_strtol_l.constprop.0+0x56>
 800efa6:	782c      	ldrb	r4, [r5, #0]
 800efa8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800efac:	2c58      	cmp	r4, #88	; 0x58
 800efae:	d14d      	bne.n	800f04c <_strtol_l.constprop.0+0xec>
 800efb0:	786c      	ldrb	r4, [r5, #1]
 800efb2:	2310      	movs	r3, #16
 800efb4:	3502      	adds	r5, #2
 800efb6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800efba:	f108 38ff 	add.w	r8, r8, #4294967295
 800efbe:	f04f 0e00 	mov.w	lr, #0
 800efc2:	fbb8 f9f3 	udiv	r9, r8, r3
 800efc6:	4676      	mov	r6, lr
 800efc8:	fb03 8a19 	mls	sl, r3, r9, r8
 800efcc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800efd0:	f1bc 0f09 	cmp.w	ip, #9
 800efd4:	d816      	bhi.n	800f004 <_strtol_l.constprop.0+0xa4>
 800efd6:	4664      	mov	r4, ip
 800efd8:	42a3      	cmp	r3, r4
 800efda:	dd24      	ble.n	800f026 <_strtol_l.constprop.0+0xc6>
 800efdc:	f1be 3fff 	cmp.w	lr, #4294967295
 800efe0:	d008      	beq.n	800eff4 <_strtol_l.constprop.0+0x94>
 800efe2:	45b1      	cmp	r9, r6
 800efe4:	d31c      	bcc.n	800f020 <_strtol_l.constprop.0+0xc0>
 800efe6:	d101      	bne.n	800efec <_strtol_l.constprop.0+0x8c>
 800efe8:	45a2      	cmp	sl, r4
 800efea:	db19      	blt.n	800f020 <_strtol_l.constprop.0+0xc0>
 800efec:	fb06 4603 	mla	r6, r6, r3, r4
 800eff0:	f04f 0e01 	mov.w	lr, #1
 800eff4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eff8:	e7e8      	b.n	800efcc <_strtol_l.constprop.0+0x6c>
 800effa:	2c2b      	cmp	r4, #43	; 0x2b
 800effc:	bf04      	itt	eq
 800effe:	782c      	ldrbeq	r4, [r5, #0]
 800f000:	1cb5      	addeq	r5, r6, #2
 800f002:	e7ca      	b.n	800ef9a <_strtol_l.constprop.0+0x3a>
 800f004:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f008:	f1bc 0f19 	cmp.w	ip, #25
 800f00c:	d801      	bhi.n	800f012 <_strtol_l.constprop.0+0xb2>
 800f00e:	3c37      	subs	r4, #55	; 0x37
 800f010:	e7e2      	b.n	800efd8 <_strtol_l.constprop.0+0x78>
 800f012:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f016:	f1bc 0f19 	cmp.w	ip, #25
 800f01a:	d804      	bhi.n	800f026 <_strtol_l.constprop.0+0xc6>
 800f01c:	3c57      	subs	r4, #87	; 0x57
 800f01e:	e7db      	b.n	800efd8 <_strtol_l.constprop.0+0x78>
 800f020:	f04f 3eff 	mov.w	lr, #4294967295
 800f024:	e7e6      	b.n	800eff4 <_strtol_l.constprop.0+0x94>
 800f026:	f1be 3fff 	cmp.w	lr, #4294967295
 800f02a:	d105      	bne.n	800f038 <_strtol_l.constprop.0+0xd8>
 800f02c:	2322      	movs	r3, #34	; 0x22
 800f02e:	6003      	str	r3, [r0, #0]
 800f030:	4646      	mov	r6, r8
 800f032:	b942      	cbnz	r2, 800f046 <_strtol_l.constprop.0+0xe6>
 800f034:	4630      	mov	r0, r6
 800f036:	e79e      	b.n	800ef76 <_strtol_l.constprop.0+0x16>
 800f038:	b107      	cbz	r7, 800f03c <_strtol_l.constprop.0+0xdc>
 800f03a:	4276      	negs	r6, r6
 800f03c:	2a00      	cmp	r2, #0
 800f03e:	d0f9      	beq.n	800f034 <_strtol_l.constprop.0+0xd4>
 800f040:	f1be 0f00 	cmp.w	lr, #0
 800f044:	d000      	beq.n	800f048 <_strtol_l.constprop.0+0xe8>
 800f046:	1e69      	subs	r1, r5, #1
 800f048:	6011      	str	r1, [r2, #0]
 800f04a:	e7f3      	b.n	800f034 <_strtol_l.constprop.0+0xd4>
 800f04c:	2430      	movs	r4, #48	; 0x30
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1b1      	bne.n	800efb6 <_strtol_l.constprop.0+0x56>
 800f052:	2308      	movs	r3, #8
 800f054:	e7af      	b.n	800efb6 <_strtol_l.constprop.0+0x56>
 800f056:	2c30      	cmp	r4, #48	; 0x30
 800f058:	d0a5      	beq.n	800efa6 <_strtol_l.constprop.0+0x46>
 800f05a:	230a      	movs	r3, #10
 800f05c:	e7ab      	b.n	800efb6 <_strtol_l.constprop.0+0x56>
 800f05e:	bf00      	nop
 800f060:	08010bd9 	.word	0x08010bd9

0800f064 <strtol>:
 800f064:	4613      	mov	r3, r2
 800f066:	460a      	mov	r2, r1
 800f068:	4601      	mov	r1, r0
 800f06a:	4802      	ldr	r0, [pc, #8]	; (800f074 <strtol+0x10>)
 800f06c:	6800      	ldr	r0, [r0, #0]
 800f06e:	f7ff bf77 	b.w	800ef60 <_strtol_l.constprop.0>
 800f072:	bf00      	nop
 800f074:	200001b4 	.word	0x200001b4

0800f078 <std>:
 800f078:	2300      	movs	r3, #0
 800f07a:	b510      	push	{r4, lr}
 800f07c:	4604      	mov	r4, r0
 800f07e:	e9c0 3300 	strd	r3, r3, [r0]
 800f082:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f086:	6083      	str	r3, [r0, #8]
 800f088:	8181      	strh	r1, [r0, #12]
 800f08a:	6643      	str	r3, [r0, #100]	; 0x64
 800f08c:	81c2      	strh	r2, [r0, #14]
 800f08e:	6183      	str	r3, [r0, #24]
 800f090:	4619      	mov	r1, r3
 800f092:	2208      	movs	r2, #8
 800f094:	305c      	adds	r0, #92	; 0x5c
 800f096:	f000 f902 	bl	800f29e <memset>
 800f09a:	4b05      	ldr	r3, [pc, #20]	; (800f0b0 <std+0x38>)
 800f09c:	6263      	str	r3, [r4, #36]	; 0x24
 800f09e:	4b05      	ldr	r3, [pc, #20]	; (800f0b4 <std+0x3c>)
 800f0a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f0a2:	4b05      	ldr	r3, [pc, #20]	; (800f0b8 <std+0x40>)
 800f0a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f0a6:	4b05      	ldr	r3, [pc, #20]	; (800f0bc <std+0x44>)
 800f0a8:	6224      	str	r4, [r4, #32]
 800f0aa:	6323      	str	r3, [r4, #48]	; 0x30
 800f0ac:	bd10      	pop	{r4, pc}
 800f0ae:	bf00      	nop
 800f0b0:	0800f219 	.word	0x0800f219
 800f0b4:	0800f23b 	.word	0x0800f23b
 800f0b8:	0800f273 	.word	0x0800f273
 800f0bc:	0800f297 	.word	0x0800f297

0800f0c0 <stdio_exit_handler>:
 800f0c0:	4a02      	ldr	r2, [pc, #8]	; (800f0cc <stdio_exit_handler+0xc>)
 800f0c2:	4903      	ldr	r1, [pc, #12]	; (800f0d0 <stdio_exit_handler+0x10>)
 800f0c4:	4803      	ldr	r0, [pc, #12]	; (800f0d4 <stdio_exit_handler+0x14>)
 800f0c6:	f000 b869 	b.w	800f19c <_fwalk_sglue>
 800f0ca:	bf00      	nop
 800f0cc:	2000015c 	.word	0x2000015c
 800f0d0:	0800fd99 	.word	0x0800fd99
 800f0d4:	20000168 	.word	0x20000168

0800f0d8 <cleanup_stdio>:
 800f0d8:	6841      	ldr	r1, [r0, #4]
 800f0da:	4b0c      	ldr	r3, [pc, #48]	; (800f10c <cleanup_stdio+0x34>)
 800f0dc:	4299      	cmp	r1, r3
 800f0de:	b510      	push	{r4, lr}
 800f0e0:	4604      	mov	r4, r0
 800f0e2:	d001      	beq.n	800f0e8 <cleanup_stdio+0x10>
 800f0e4:	f000 fe58 	bl	800fd98 <_fflush_r>
 800f0e8:	68a1      	ldr	r1, [r4, #8]
 800f0ea:	4b09      	ldr	r3, [pc, #36]	; (800f110 <cleanup_stdio+0x38>)
 800f0ec:	4299      	cmp	r1, r3
 800f0ee:	d002      	beq.n	800f0f6 <cleanup_stdio+0x1e>
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	f000 fe51 	bl	800fd98 <_fflush_r>
 800f0f6:	68e1      	ldr	r1, [r4, #12]
 800f0f8:	4b06      	ldr	r3, [pc, #24]	; (800f114 <cleanup_stdio+0x3c>)
 800f0fa:	4299      	cmp	r1, r3
 800f0fc:	d004      	beq.n	800f108 <cleanup_stdio+0x30>
 800f0fe:	4620      	mov	r0, r4
 800f100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f104:	f000 be48 	b.w	800fd98 <_fflush_r>
 800f108:	bd10      	pop	{r4, pc}
 800f10a:	bf00      	nop
 800f10c:	2000466c 	.word	0x2000466c
 800f110:	200046d4 	.word	0x200046d4
 800f114:	2000473c 	.word	0x2000473c

0800f118 <global_stdio_init.part.0>:
 800f118:	b510      	push	{r4, lr}
 800f11a:	4b0b      	ldr	r3, [pc, #44]	; (800f148 <global_stdio_init.part.0+0x30>)
 800f11c:	4c0b      	ldr	r4, [pc, #44]	; (800f14c <global_stdio_init.part.0+0x34>)
 800f11e:	4a0c      	ldr	r2, [pc, #48]	; (800f150 <global_stdio_init.part.0+0x38>)
 800f120:	601a      	str	r2, [r3, #0]
 800f122:	4620      	mov	r0, r4
 800f124:	2200      	movs	r2, #0
 800f126:	2104      	movs	r1, #4
 800f128:	f7ff ffa6 	bl	800f078 <std>
 800f12c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f130:	2201      	movs	r2, #1
 800f132:	2109      	movs	r1, #9
 800f134:	f7ff ffa0 	bl	800f078 <std>
 800f138:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f13c:	2202      	movs	r2, #2
 800f13e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f142:	2112      	movs	r1, #18
 800f144:	f7ff bf98 	b.w	800f078 <std>
 800f148:	200047a4 	.word	0x200047a4
 800f14c:	2000466c 	.word	0x2000466c
 800f150:	0800f0c1 	.word	0x0800f0c1

0800f154 <__sfp_lock_acquire>:
 800f154:	4801      	ldr	r0, [pc, #4]	; (800f15c <__sfp_lock_acquire+0x8>)
 800f156:	f000 b989 	b.w	800f46c <__retarget_lock_acquire_recursive>
 800f15a:	bf00      	nop
 800f15c:	200047ad 	.word	0x200047ad

0800f160 <__sfp_lock_release>:
 800f160:	4801      	ldr	r0, [pc, #4]	; (800f168 <__sfp_lock_release+0x8>)
 800f162:	f000 b984 	b.w	800f46e <__retarget_lock_release_recursive>
 800f166:	bf00      	nop
 800f168:	200047ad 	.word	0x200047ad

0800f16c <__sinit>:
 800f16c:	b510      	push	{r4, lr}
 800f16e:	4604      	mov	r4, r0
 800f170:	f7ff fff0 	bl	800f154 <__sfp_lock_acquire>
 800f174:	6a23      	ldr	r3, [r4, #32]
 800f176:	b11b      	cbz	r3, 800f180 <__sinit+0x14>
 800f178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f17c:	f7ff bff0 	b.w	800f160 <__sfp_lock_release>
 800f180:	4b04      	ldr	r3, [pc, #16]	; (800f194 <__sinit+0x28>)
 800f182:	6223      	str	r3, [r4, #32]
 800f184:	4b04      	ldr	r3, [pc, #16]	; (800f198 <__sinit+0x2c>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d1f5      	bne.n	800f178 <__sinit+0xc>
 800f18c:	f7ff ffc4 	bl	800f118 <global_stdio_init.part.0>
 800f190:	e7f2      	b.n	800f178 <__sinit+0xc>
 800f192:	bf00      	nop
 800f194:	0800f0d9 	.word	0x0800f0d9
 800f198:	200047a4 	.word	0x200047a4

0800f19c <_fwalk_sglue>:
 800f19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1a0:	4607      	mov	r7, r0
 800f1a2:	4688      	mov	r8, r1
 800f1a4:	4614      	mov	r4, r2
 800f1a6:	2600      	movs	r6, #0
 800f1a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f1ac:	f1b9 0901 	subs.w	r9, r9, #1
 800f1b0:	d505      	bpl.n	800f1be <_fwalk_sglue+0x22>
 800f1b2:	6824      	ldr	r4, [r4, #0]
 800f1b4:	2c00      	cmp	r4, #0
 800f1b6:	d1f7      	bne.n	800f1a8 <_fwalk_sglue+0xc>
 800f1b8:	4630      	mov	r0, r6
 800f1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1be:	89ab      	ldrh	r3, [r5, #12]
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	d907      	bls.n	800f1d4 <_fwalk_sglue+0x38>
 800f1c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	d003      	beq.n	800f1d4 <_fwalk_sglue+0x38>
 800f1cc:	4629      	mov	r1, r5
 800f1ce:	4638      	mov	r0, r7
 800f1d0:	47c0      	blx	r8
 800f1d2:	4306      	orrs	r6, r0
 800f1d4:	3568      	adds	r5, #104	; 0x68
 800f1d6:	e7e9      	b.n	800f1ac <_fwalk_sglue+0x10>

0800f1d8 <siprintf>:
 800f1d8:	b40e      	push	{r1, r2, r3}
 800f1da:	b500      	push	{lr}
 800f1dc:	b09c      	sub	sp, #112	; 0x70
 800f1de:	ab1d      	add	r3, sp, #116	; 0x74
 800f1e0:	9002      	str	r0, [sp, #8]
 800f1e2:	9006      	str	r0, [sp, #24]
 800f1e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f1e8:	4809      	ldr	r0, [pc, #36]	; (800f210 <siprintf+0x38>)
 800f1ea:	9107      	str	r1, [sp, #28]
 800f1ec:	9104      	str	r1, [sp, #16]
 800f1ee:	4909      	ldr	r1, [pc, #36]	; (800f214 <siprintf+0x3c>)
 800f1f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1f4:	9105      	str	r1, [sp, #20]
 800f1f6:	6800      	ldr	r0, [r0, #0]
 800f1f8:	9301      	str	r3, [sp, #4]
 800f1fa:	a902      	add	r1, sp, #8
 800f1fc:	f000 fab8 	bl	800f770 <_svfiprintf_r>
 800f200:	9b02      	ldr	r3, [sp, #8]
 800f202:	2200      	movs	r2, #0
 800f204:	701a      	strb	r2, [r3, #0]
 800f206:	b01c      	add	sp, #112	; 0x70
 800f208:	f85d eb04 	ldr.w	lr, [sp], #4
 800f20c:	b003      	add	sp, #12
 800f20e:	4770      	bx	lr
 800f210:	200001b4 	.word	0x200001b4
 800f214:	ffff0208 	.word	0xffff0208

0800f218 <__sread>:
 800f218:	b510      	push	{r4, lr}
 800f21a:	460c      	mov	r4, r1
 800f21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f220:	f000 f8d6 	bl	800f3d0 <_read_r>
 800f224:	2800      	cmp	r0, #0
 800f226:	bfab      	itete	ge
 800f228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f22a:	89a3      	ldrhlt	r3, [r4, #12]
 800f22c:	181b      	addge	r3, r3, r0
 800f22e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f232:	bfac      	ite	ge
 800f234:	6563      	strge	r3, [r4, #84]	; 0x54
 800f236:	81a3      	strhlt	r3, [r4, #12]
 800f238:	bd10      	pop	{r4, pc}

0800f23a <__swrite>:
 800f23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f23e:	461f      	mov	r7, r3
 800f240:	898b      	ldrh	r3, [r1, #12]
 800f242:	05db      	lsls	r3, r3, #23
 800f244:	4605      	mov	r5, r0
 800f246:	460c      	mov	r4, r1
 800f248:	4616      	mov	r6, r2
 800f24a:	d505      	bpl.n	800f258 <__swrite+0x1e>
 800f24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f250:	2302      	movs	r3, #2
 800f252:	2200      	movs	r2, #0
 800f254:	f000 f8aa 	bl	800f3ac <_lseek_r>
 800f258:	89a3      	ldrh	r3, [r4, #12]
 800f25a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f25e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f262:	81a3      	strh	r3, [r4, #12]
 800f264:	4632      	mov	r2, r6
 800f266:	463b      	mov	r3, r7
 800f268:	4628      	mov	r0, r5
 800f26a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f26e:	f000 b8c1 	b.w	800f3f4 <_write_r>

0800f272 <__sseek>:
 800f272:	b510      	push	{r4, lr}
 800f274:	460c      	mov	r4, r1
 800f276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f27a:	f000 f897 	bl	800f3ac <_lseek_r>
 800f27e:	1c43      	adds	r3, r0, #1
 800f280:	89a3      	ldrh	r3, [r4, #12]
 800f282:	bf15      	itete	ne
 800f284:	6560      	strne	r0, [r4, #84]	; 0x54
 800f286:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f28a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f28e:	81a3      	strheq	r3, [r4, #12]
 800f290:	bf18      	it	ne
 800f292:	81a3      	strhne	r3, [r4, #12]
 800f294:	bd10      	pop	{r4, pc}

0800f296 <__sclose>:
 800f296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f29a:	f000 b877 	b.w	800f38c <_close_r>

0800f29e <memset>:
 800f29e:	4402      	add	r2, r0
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d100      	bne.n	800f2a8 <memset+0xa>
 800f2a6:	4770      	bx	lr
 800f2a8:	f803 1b01 	strb.w	r1, [r3], #1
 800f2ac:	e7f9      	b.n	800f2a2 <memset+0x4>

0800f2ae <strncat>:
 800f2ae:	b530      	push	{r4, r5, lr}
 800f2b0:	4604      	mov	r4, r0
 800f2b2:	7825      	ldrb	r5, [r4, #0]
 800f2b4:	4623      	mov	r3, r4
 800f2b6:	3401      	adds	r4, #1
 800f2b8:	2d00      	cmp	r5, #0
 800f2ba:	d1fa      	bne.n	800f2b2 <strncat+0x4>
 800f2bc:	3a01      	subs	r2, #1
 800f2be:	d304      	bcc.n	800f2ca <strncat+0x1c>
 800f2c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2c4:	f803 4b01 	strb.w	r4, [r3], #1
 800f2c8:	b904      	cbnz	r4, 800f2cc <strncat+0x1e>
 800f2ca:	bd30      	pop	{r4, r5, pc}
 800f2cc:	2a00      	cmp	r2, #0
 800f2ce:	d1f5      	bne.n	800f2bc <strncat+0xe>
 800f2d0:	701a      	strb	r2, [r3, #0]
 800f2d2:	e7f3      	b.n	800f2bc <strncat+0xe>

0800f2d4 <strtok>:
 800f2d4:	4b16      	ldr	r3, [pc, #88]	; (800f330 <strtok+0x5c>)
 800f2d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f2d8:	681e      	ldr	r6, [r3, #0]
 800f2da:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800f2dc:	4605      	mov	r5, r0
 800f2de:	b9fc      	cbnz	r4, 800f320 <strtok+0x4c>
 800f2e0:	2050      	movs	r0, #80	; 0x50
 800f2e2:	9101      	str	r1, [sp, #4]
 800f2e4:	f000 f936 	bl	800f554 <malloc>
 800f2e8:	9901      	ldr	r1, [sp, #4]
 800f2ea:	6470      	str	r0, [r6, #68]	; 0x44
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	b920      	cbnz	r0, 800f2fa <strtok+0x26>
 800f2f0:	4b10      	ldr	r3, [pc, #64]	; (800f334 <strtok+0x60>)
 800f2f2:	4811      	ldr	r0, [pc, #68]	; (800f338 <strtok+0x64>)
 800f2f4:	215b      	movs	r1, #91	; 0x5b
 800f2f6:	f000 f8c3 	bl	800f480 <__assert_func>
 800f2fa:	e9c0 4400 	strd	r4, r4, [r0]
 800f2fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f302:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f306:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f30a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f30e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f312:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f316:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f31a:	6184      	str	r4, [r0, #24]
 800f31c:	7704      	strb	r4, [r0, #28]
 800f31e:	6244      	str	r4, [r0, #36]	; 0x24
 800f320:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800f322:	2301      	movs	r3, #1
 800f324:	4628      	mov	r0, r5
 800f326:	b002      	add	sp, #8
 800f328:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f32c:	f000 b806 	b.w	800f33c <__strtok_r>
 800f330:	200001b4 	.word	0x200001b4
 800f334:	08010cd9 	.word	0x08010cd9
 800f338:	08010cf0 	.word	0x08010cf0

0800f33c <__strtok_r>:
 800f33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f33e:	b908      	cbnz	r0, 800f344 <__strtok_r+0x8>
 800f340:	6810      	ldr	r0, [r2, #0]
 800f342:	b188      	cbz	r0, 800f368 <__strtok_r+0x2c>
 800f344:	4604      	mov	r4, r0
 800f346:	4620      	mov	r0, r4
 800f348:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f34c:	460f      	mov	r7, r1
 800f34e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f352:	b91e      	cbnz	r6, 800f35c <__strtok_r+0x20>
 800f354:	b965      	cbnz	r5, 800f370 <__strtok_r+0x34>
 800f356:	6015      	str	r5, [r2, #0]
 800f358:	4628      	mov	r0, r5
 800f35a:	e005      	b.n	800f368 <__strtok_r+0x2c>
 800f35c:	42b5      	cmp	r5, r6
 800f35e:	d1f6      	bne.n	800f34e <__strtok_r+0x12>
 800f360:	2b00      	cmp	r3, #0
 800f362:	d1f0      	bne.n	800f346 <__strtok_r+0xa>
 800f364:	6014      	str	r4, [r2, #0]
 800f366:	7003      	strb	r3, [r0, #0]
 800f368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f36a:	461c      	mov	r4, r3
 800f36c:	e00c      	b.n	800f388 <__strtok_r+0x4c>
 800f36e:	b915      	cbnz	r5, 800f376 <__strtok_r+0x3a>
 800f370:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f374:	460e      	mov	r6, r1
 800f376:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f37a:	42ab      	cmp	r3, r5
 800f37c:	d1f7      	bne.n	800f36e <__strtok_r+0x32>
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d0f3      	beq.n	800f36a <__strtok_r+0x2e>
 800f382:	2300      	movs	r3, #0
 800f384:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f388:	6014      	str	r4, [r2, #0]
 800f38a:	e7ed      	b.n	800f368 <__strtok_r+0x2c>

0800f38c <_close_r>:
 800f38c:	b538      	push	{r3, r4, r5, lr}
 800f38e:	4d06      	ldr	r5, [pc, #24]	; (800f3a8 <_close_r+0x1c>)
 800f390:	2300      	movs	r3, #0
 800f392:	4604      	mov	r4, r0
 800f394:	4608      	mov	r0, r1
 800f396:	602b      	str	r3, [r5, #0]
 800f398:	f7f3 fa71 	bl	800287e <_close>
 800f39c:	1c43      	adds	r3, r0, #1
 800f39e:	d102      	bne.n	800f3a6 <_close_r+0x1a>
 800f3a0:	682b      	ldr	r3, [r5, #0]
 800f3a2:	b103      	cbz	r3, 800f3a6 <_close_r+0x1a>
 800f3a4:	6023      	str	r3, [r4, #0]
 800f3a6:	bd38      	pop	{r3, r4, r5, pc}
 800f3a8:	200047a8 	.word	0x200047a8

0800f3ac <_lseek_r>:
 800f3ac:	b538      	push	{r3, r4, r5, lr}
 800f3ae:	4d07      	ldr	r5, [pc, #28]	; (800f3cc <_lseek_r+0x20>)
 800f3b0:	4604      	mov	r4, r0
 800f3b2:	4608      	mov	r0, r1
 800f3b4:	4611      	mov	r1, r2
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	602a      	str	r2, [r5, #0]
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	f7f3 fa86 	bl	80028cc <_lseek>
 800f3c0:	1c43      	adds	r3, r0, #1
 800f3c2:	d102      	bne.n	800f3ca <_lseek_r+0x1e>
 800f3c4:	682b      	ldr	r3, [r5, #0]
 800f3c6:	b103      	cbz	r3, 800f3ca <_lseek_r+0x1e>
 800f3c8:	6023      	str	r3, [r4, #0]
 800f3ca:	bd38      	pop	{r3, r4, r5, pc}
 800f3cc:	200047a8 	.word	0x200047a8

0800f3d0 <_read_r>:
 800f3d0:	b538      	push	{r3, r4, r5, lr}
 800f3d2:	4d07      	ldr	r5, [pc, #28]	; (800f3f0 <_read_r+0x20>)
 800f3d4:	4604      	mov	r4, r0
 800f3d6:	4608      	mov	r0, r1
 800f3d8:	4611      	mov	r1, r2
 800f3da:	2200      	movs	r2, #0
 800f3dc:	602a      	str	r2, [r5, #0]
 800f3de:	461a      	mov	r2, r3
 800f3e0:	f7f3 fa14 	bl	800280c <_read>
 800f3e4:	1c43      	adds	r3, r0, #1
 800f3e6:	d102      	bne.n	800f3ee <_read_r+0x1e>
 800f3e8:	682b      	ldr	r3, [r5, #0]
 800f3ea:	b103      	cbz	r3, 800f3ee <_read_r+0x1e>
 800f3ec:	6023      	str	r3, [r4, #0]
 800f3ee:	bd38      	pop	{r3, r4, r5, pc}
 800f3f0:	200047a8 	.word	0x200047a8

0800f3f4 <_write_r>:
 800f3f4:	b538      	push	{r3, r4, r5, lr}
 800f3f6:	4d07      	ldr	r5, [pc, #28]	; (800f414 <_write_r+0x20>)
 800f3f8:	4604      	mov	r4, r0
 800f3fa:	4608      	mov	r0, r1
 800f3fc:	4611      	mov	r1, r2
 800f3fe:	2200      	movs	r2, #0
 800f400:	602a      	str	r2, [r5, #0]
 800f402:	461a      	mov	r2, r3
 800f404:	f7f3 fa1f 	bl	8002846 <_write>
 800f408:	1c43      	adds	r3, r0, #1
 800f40a:	d102      	bne.n	800f412 <_write_r+0x1e>
 800f40c:	682b      	ldr	r3, [r5, #0]
 800f40e:	b103      	cbz	r3, 800f412 <_write_r+0x1e>
 800f410:	6023      	str	r3, [r4, #0]
 800f412:	bd38      	pop	{r3, r4, r5, pc}
 800f414:	200047a8 	.word	0x200047a8

0800f418 <__errno>:
 800f418:	4b01      	ldr	r3, [pc, #4]	; (800f420 <__errno+0x8>)
 800f41a:	6818      	ldr	r0, [r3, #0]
 800f41c:	4770      	bx	lr
 800f41e:	bf00      	nop
 800f420:	200001b4 	.word	0x200001b4

0800f424 <__libc_init_array>:
 800f424:	b570      	push	{r4, r5, r6, lr}
 800f426:	4d0d      	ldr	r5, [pc, #52]	; (800f45c <__libc_init_array+0x38>)
 800f428:	4c0d      	ldr	r4, [pc, #52]	; (800f460 <__libc_init_array+0x3c>)
 800f42a:	1b64      	subs	r4, r4, r5
 800f42c:	10a4      	asrs	r4, r4, #2
 800f42e:	2600      	movs	r6, #0
 800f430:	42a6      	cmp	r6, r4
 800f432:	d109      	bne.n	800f448 <__libc_init_array+0x24>
 800f434:	4d0b      	ldr	r5, [pc, #44]	; (800f464 <__libc_init_array+0x40>)
 800f436:	4c0c      	ldr	r4, [pc, #48]	; (800f468 <__libc_init_array+0x44>)
 800f438:	f001 f800 	bl	801043c <_init>
 800f43c:	1b64      	subs	r4, r4, r5
 800f43e:	10a4      	asrs	r4, r4, #2
 800f440:	2600      	movs	r6, #0
 800f442:	42a6      	cmp	r6, r4
 800f444:	d105      	bne.n	800f452 <__libc_init_array+0x2e>
 800f446:	bd70      	pop	{r4, r5, r6, pc}
 800f448:	f855 3b04 	ldr.w	r3, [r5], #4
 800f44c:	4798      	blx	r3
 800f44e:	3601      	adds	r6, #1
 800f450:	e7ee      	b.n	800f430 <__libc_init_array+0xc>
 800f452:	f855 3b04 	ldr.w	r3, [r5], #4
 800f456:	4798      	blx	r3
 800f458:	3601      	adds	r6, #1
 800f45a:	e7f2      	b.n	800f442 <__libc_init_array+0x1e>
 800f45c:	08010dc4 	.word	0x08010dc4
 800f460:	08010dc4 	.word	0x08010dc4
 800f464:	08010dc4 	.word	0x08010dc4
 800f468:	08010dc8 	.word	0x08010dc8

0800f46c <__retarget_lock_acquire_recursive>:
 800f46c:	4770      	bx	lr

0800f46e <__retarget_lock_release_recursive>:
 800f46e:	4770      	bx	lr

0800f470 <strcpy>:
 800f470:	4603      	mov	r3, r0
 800f472:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f476:	f803 2b01 	strb.w	r2, [r3], #1
 800f47a:	2a00      	cmp	r2, #0
 800f47c:	d1f9      	bne.n	800f472 <strcpy+0x2>
 800f47e:	4770      	bx	lr

0800f480 <__assert_func>:
 800f480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f482:	4614      	mov	r4, r2
 800f484:	461a      	mov	r2, r3
 800f486:	4b09      	ldr	r3, [pc, #36]	; (800f4ac <__assert_func+0x2c>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	4605      	mov	r5, r0
 800f48c:	68d8      	ldr	r0, [r3, #12]
 800f48e:	b14c      	cbz	r4, 800f4a4 <__assert_func+0x24>
 800f490:	4b07      	ldr	r3, [pc, #28]	; (800f4b0 <__assert_func+0x30>)
 800f492:	9100      	str	r1, [sp, #0]
 800f494:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f498:	4906      	ldr	r1, [pc, #24]	; (800f4b4 <__assert_func+0x34>)
 800f49a:	462b      	mov	r3, r5
 800f49c:	f000 fca4 	bl	800fde8 <fiprintf>
 800f4a0:	f000 fcec 	bl	800fe7c <abort>
 800f4a4:	4b04      	ldr	r3, [pc, #16]	; (800f4b8 <__assert_func+0x38>)
 800f4a6:	461c      	mov	r4, r3
 800f4a8:	e7f3      	b.n	800f492 <__assert_func+0x12>
 800f4aa:	bf00      	nop
 800f4ac:	200001b4 	.word	0x200001b4
 800f4b0:	08010d4a 	.word	0x08010d4a
 800f4b4:	08010d57 	.word	0x08010d57
 800f4b8:	08010d85 	.word	0x08010d85

0800f4bc <_free_r>:
 800f4bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4be:	2900      	cmp	r1, #0
 800f4c0:	d044      	beq.n	800f54c <_free_r+0x90>
 800f4c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4c6:	9001      	str	r0, [sp, #4]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	f1a1 0404 	sub.w	r4, r1, #4
 800f4ce:	bfb8      	it	lt
 800f4d0:	18e4      	addlt	r4, r4, r3
 800f4d2:	f000 f8e7 	bl	800f6a4 <__malloc_lock>
 800f4d6:	4a1e      	ldr	r2, [pc, #120]	; (800f550 <_free_r+0x94>)
 800f4d8:	9801      	ldr	r0, [sp, #4]
 800f4da:	6813      	ldr	r3, [r2, #0]
 800f4dc:	b933      	cbnz	r3, 800f4ec <_free_r+0x30>
 800f4de:	6063      	str	r3, [r4, #4]
 800f4e0:	6014      	str	r4, [r2, #0]
 800f4e2:	b003      	add	sp, #12
 800f4e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4e8:	f000 b8e2 	b.w	800f6b0 <__malloc_unlock>
 800f4ec:	42a3      	cmp	r3, r4
 800f4ee:	d908      	bls.n	800f502 <_free_r+0x46>
 800f4f0:	6825      	ldr	r5, [r4, #0]
 800f4f2:	1961      	adds	r1, r4, r5
 800f4f4:	428b      	cmp	r3, r1
 800f4f6:	bf01      	itttt	eq
 800f4f8:	6819      	ldreq	r1, [r3, #0]
 800f4fa:	685b      	ldreq	r3, [r3, #4]
 800f4fc:	1949      	addeq	r1, r1, r5
 800f4fe:	6021      	streq	r1, [r4, #0]
 800f500:	e7ed      	b.n	800f4de <_free_r+0x22>
 800f502:	461a      	mov	r2, r3
 800f504:	685b      	ldr	r3, [r3, #4]
 800f506:	b10b      	cbz	r3, 800f50c <_free_r+0x50>
 800f508:	42a3      	cmp	r3, r4
 800f50a:	d9fa      	bls.n	800f502 <_free_r+0x46>
 800f50c:	6811      	ldr	r1, [r2, #0]
 800f50e:	1855      	adds	r5, r2, r1
 800f510:	42a5      	cmp	r5, r4
 800f512:	d10b      	bne.n	800f52c <_free_r+0x70>
 800f514:	6824      	ldr	r4, [r4, #0]
 800f516:	4421      	add	r1, r4
 800f518:	1854      	adds	r4, r2, r1
 800f51a:	42a3      	cmp	r3, r4
 800f51c:	6011      	str	r1, [r2, #0]
 800f51e:	d1e0      	bne.n	800f4e2 <_free_r+0x26>
 800f520:	681c      	ldr	r4, [r3, #0]
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	6053      	str	r3, [r2, #4]
 800f526:	440c      	add	r4, r1
 800f528:	6014      	str	r4, [r2, #0]
 800f52a:	e7da      	b.n	800f4e2 <_free_r+0x26>
 800f52c:	d902      	bls.n	800f534 <_free_r+0x78>
 800f52e:	230c      	movs	r3, #12
 800f530:	6003      	str	r3, [r0, #0]
 800f532:	e7d6      	b.n	800f4e2 <_free_r+0x26>
 800f534:	6825      	ldr	r5, [r4, #0]
 800f536:	1961      	adds	r1, r4, r5
 800f538:	428b      	cmp	r3, r1
 800f53a:	bf04      	itt	eq
 800f53c:	6819      	ldreq	r1, [r3, #0]
 800f53e:	685b      	ldreq	r3, [r3, #4]
 800f540:	6063      	str	r3, [r4, #4]
 800f542:	bf04      	itt	eq
 800f544:	1949      	addeq	r1, r1, r5
 800f546:	6021      	streq	r1, [r4, #0]
 800f548:	6054      	str	r4, [r2, #4]
 800f54a:	e7ca      	b.n	800f4e2 <_free_r+0x26>
 800f54c:	b003      	add	sp, #12
 800f54e:	bd30      	pop	{r4, r5, pc}
 800f550:	200047b0 	.word	0x200047b0

0800f554 <malloc>:
 800f554:	4b02      	ldr	r3, [pc, #8]	; (800f560 <malloc+0xc>)
 800f556:	4601      	mov	r1, r0
 800f558:	6818      	ldr	r0, [r3, #0]
 800f55a:	f000 b823 	b.w	800f5a4 <_malloc_r>
 800f55e:	bf00      	nop
 800f560:	200001b4 	.word	0x200001b4

0800f564 <sbrk_aligned>:
 800f564:	b570      	push	{r4, r5, r6, lr}
 800f566:	4e0e      	ldr	r6, [pc, #56]	; (800f5a0 <sbrk_aligned+0x3c>)
 800f568:	460c      	mov	r4, r1
 800f56a:	6831      	ldr	r1, [r6, #0]
 800f56c:	4605      	mov	r5, r0
 800f56e:	b911      	cbnz	r1, 800f576 <sbrk_aligned+0x12>
 800f570:	f000 fc66 	bl	800fe40 <_sbrk_r>
 800f574:	6030      	str	r0, [r6, #0]
 800f576:	4621      	mov	r1, r4
 800f578:	4628      	mov	r0, r5
 800f57a:	f000 fc61 	bl	800fe40 <_sbrk_r>
 800f57e:	1c43      	adds	r3, r0, #1
 800f580:	d00a      	beq.n	800f598 <sbrk_aligned+0x34>
 800f582:	1cc4      	adds	r4, r0, #3
 800f584:	f024 0403 	bic.w	r4, r4, #3
 800f588:	42a0      	cmp	r0, r4
 800f58a:	d007      	beq.n	800f59c <sbrk_aligned+0x38>
 800f58c:	1a21      	subs	r1, r4, r0
 800f58e:	4628      	mov	r0, r5
 800f590:	f000 fc56 	bl	800fe40 <_sbrk_r>
 800f594:	3001      	adds	r0, #1
 800f596:	d101      	bne.n	800f59c <sbrk_aligned+0x38>
 800f598:	f04f 34ff 	mov.w	r4, #4294967295
 800f59c:	4620      	mov	r0, r4
 800f59e:	bd70      	pop	{r4, r5, r6, pc}
 800f5a0:	200047b4 	.word	0x200047b4

0800f5a4 <_malloc_r>:
 800f5a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5a8:	1ccd      	adds	r5, r1, #3
 800f5aa:	f025 0503 	bic.w	r5, r5, #3
 800f5ae:	3508      	adds	r5, #8
 800f5b0:	2d0c      	cmp	r5, #12
 800f5b2:	bf38      	it	cc
 800f5b4:	250c      	movcc	r5, #12
 800f5b6:	2d00      	cmp	r5, #0
 800f5b8:	4607      	mov	r7, r0
 800f5ba:	db01      	blt.n	800f5c0 <_malloc_r+0x1c>
 800f5bc:	42a9      	cmp	r1, r5
 800f5be:	d905      	bls.n	800f5cc <_malloc_r+0x28>
 800f5c0:	230c      	movs	r3, #12
 800f5c2:	603b      	str	r3, [r7, #0]
 800f5c4:	2600      	movs	r6, #0
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f6a0 <_malloc_r+0xfc>
 800f5d0:	f000 f868 	bl	800f6a4 <__malloc_lock>
 800f5d4:	f8d8 3000 	ldr.w	r3, [r8]
 800f5d8:	461c      	mov	r4, r3
 800f5da:	bb5c      	cbnz	r4, 800f634 <_malloc_r+0x90>
 800f5dc:	4629      	mov	r1, r5
 800f5de:	4638      	mov	r0, r7
 800f5e0:	f7ff ffc0 	bl	800f564 <sbrk_aligned>
 800f5e4:	1c43      	adds	r3, r0, #1
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	d155      	bne.n	800f696 <_malloc_r+0xf2>
 800f5ea:	f8d8 4000 	ldr.w	r4, [r8]
 800f5ee:	4626      	mov	r6, r4
 800f5f0:	2e00      	cmp	r6, #0
 800f5f2:	d145      	bne.n	800f680 <_malloc_r+0xdc>
 800f5f4:	2c00      	cmp	r4, #0
 800f5f6:	d048      	beq.n	800f68a <_malloc_r+0xe6>
 800f5f8:	6823      	ldr	r3, [r4, #0]
 800f5fa:	4631      	mov	r1, r6
 800f5fc:	4638      	mov	r0, r7
 800f5fe:	eb04 0903 	add.w	r9, r4, r3
 800f602:	f000 fc1d 	bl	800fe40 <_sbrk_r>
 800f606:	4581      	cmp	r9, r0
 800f608:	d13f      	bne.n	800f68a <_malloc_r+0xe6>
 800f60a:	6821      	ldr	r1, [r4, #0]
 800f60c:	1a6d      	subs	r5, r5, r1
 800f60e:	4629      	mov	r1, r5
 800f610:	4638      	mov	r0, r7
 800f612:	f7ff ffa7 	bl	800f564 <sbrk_aligned>
 800f616:	3001      	adds	r0, #1
 800f618:	d037      	beq.n	800f68a <_malloc_r+0xe6>
 800f61a:	6823      	ldr	r3, [r4, #0]
 800f61c:	442b      	add	r3, r5
 800f61e:	6023      	str	r3, [r4, #0]
 800f620:	f8d8 3000 	ldr.w	r3, [r8]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d038      	beq.n	800f69a <_malloc_r+0xf6>
 800f628:	685a      	ldr	r2, [r3, #4]
 800f62a:	42a2      	cmp	r2, r4
 800f62c:	d12b      	bne.n	800f686 <_malloc_r+0xe2>
 800f62e:	2200      	movs	r2, #0
 800f630:	605a      	str	r2, [r3, #4]
 800f632:	e00f      	b.n	800f654 <_malloc_r+0xb0>
 800f634:	6822      	ldr	r2, [r4, #0]
 800f636:	1b52      	subs	r2, r2, r5
 800f638:	d41f      	bmi.n	800f67a <_malloc_r+0xd6>
 800f63a:	2a0b      	cmp	r2, #11
 800f63c:	d917      	bls.n	800f66e <_malloc_r+0xca>
 800f63e:	1961      	adds	r1, r4, r5
 800f640:	42a3      	cmp	r3, r4
 800f642:	6025      	str	r5, [r4, #0]
 800f644:	bf18      	it	ne
 800f646:	6059      	strne	r1, [r3, #4]
 800f648:	6863      	ldr	r3, [r4, #4]
 800f64a:	bf08      	it	eq
 800f64c:	f8c8 1000 	streq.w	r1, [r8]
 800f650:	5162      	str	r2, [r4, r5]
 800f652:	604b      	str	r3, [r1, #4]
 800f654:	4638      	mov	r0, r7
 800f656:	f104 060b 	add.w	r6, r4, #11
 800f65a:	f000 f829 	bl	800f6b0 <__malloc_unlock>
 800f65e:	f026 0607 	bic.w	r6, r6, #7
 800f662:	1d23      	adds	r3, r4, #4
 800f664:	1af2      	subs	r2, r6, r3
 800f666:	d0ae      	beq.n	800f5c6 <_malloc_r+0x22>
 800f668:	1b9b      	subs	r3, r3, r6
 800f66a:	50a3      	str	r3, [r4, r2]
 800f66c:	e7ab      	b.n	800f5c6 <_malloc_r+0x22>
 800f66e:	42a3      	cmp	r3, r4
 800f670:	6862      	ldr	r2, [r4, #4]
 800f672:	d1dd      	bne.n	800f630 <_malloc_r+0x8c>
 800f674:	f8c8 2000 	str.w	r2, [r8]
 800f678:	e7ec      	b.n	800f654 <_malloc_r+0xb0>
 800f67a:	4623      	mov	r3, r4
 800f67c:	6864      	ldr	r4, [r4, #4]
 800f67e:	e7ac      	b.n	800f5da <_malloc_r+0x36>
 800f680:	4634      	mov	r4, r6
 800f682:	6876      	ldr	r6, [r6, #4]
 800f684:	e7b4      	b.n	800f5f0 <_malloc_r+0x4c>
 800f686:	4613      	mov	r3, r2
 800f688:	e7cc      	b.n	800f624 <_malloc_r+0x80>
 800f68a:	230c      	movs	r3, #12
 800f68c:	603b      	str	r3, [r7, #0]
 800f68e:	4638      	mov	r0, r7
 800f690:	f000 f80e 	bl	800f6b0 <__malloc_unlock>
 800f694:	e797      	b.n	800f5c6 <_malloc_r+0x22>
 800f696:	6025      	str	r5, [r4, #0]
 800f698:	e7dc      	b.n	800f654 <_malloc_r+0xb0>
 800f69a:	605b      	str	r3, [r3, #4]
 800f69c:	deff      	udf	#255	; 0xff
 800f69e:	bf00      	nop
 800f6a0:	200047b0 	.word	0x200047b0

0800f6a4 <__malloc_lock>:
 800f6a4:	4801      	ldr	r0, [pc, #4]	; (800f6ac <__malloc_lock+0x8>)
 800f6a6:	f7ff bee1 	b.w	800f46c <__retarget_lock_acquire_recursive>
 800f6aa:	bf00      	nop
 800f6ac:	200047ac 	.word	0x200047ac

0800f6b0 <__malloc_unlock>:
 800f6b0:	4801      	ldr	r0, [pc, #4]	; (800f6b8 <__malloc_unlock+0x8>)
 800f6b2:	f7ff bedc 	b.w	800f46e <__retarget_lock_release_recursive>
 800f6b6:	bf00      	nop
 800f6b8:	200047ac 	.word	0x200047ac

0800f6bc <__ssputs_r>:
 800f6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6c0:	688e      	ldr	r6, [r1, #8]
 800f6c2:	461f      	mov	r7, r3
 800f6c4:	42be      	cmp	r6, r7
 800f6c6:	680b      	ldr	r3, [r1, #0]
 800f6c8:	4682      	mov	sl, r0
 800f6ca:	460c      	mov	r4, r1
 800f6cc:	4690      	mov	r8, r2
 800f6ce:	d82c      	bhi.n	800f72a <__ssputs_r+0x6e>
 800f6d0:	898a      	ldrh	r2, [r1, #12]
 800f6d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f6d6:	d026      	beq.n	800f726 <__ssputs_r+0x6a>
 800f6d8:	6965      	ldr	r5, [r4, #20]
 800f6da:	6909      	ldr	r1, [r1, #16]
 800f6dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f6e0:	eba3 0901 	sub.w	r9, r3, r1
 800f6e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f6e8:	1c7b      	adds	r3, r7, #1
 800f6ea:	444b      	add	r3, r9
 800f6ec:	106d      	asrs	r5, r5, #1
 800f6ee:	429d      	cmp	r5, r3
 800f6f0:	bf38      	it	cc
 800f6f2:	461d      	movcc	r5, r3
 800f6f4:	0553      	lsls	r3, r2, #21
 800f6f6:	d527      	bpl.n	800f748 <__ssputs_r+0x8c>
 800f6f8:	4629      	mov	r1, r5
 800f6fa:	f7ff ff53 	bl	800f5a4 <_malloc_r>
 800f6fe:	4606      	mov	r6, r0
 800f700:	b360      	cbz	r0, 800f75c <__ssputs_r+0xa0>
 800f702:	6921      	ldr	r1, [r4, #16]
 800f704:	464a      	mov	r2, r9
 800f706:	f000 fbab 	bl	800fe60 <memcpy>
 800f70a:	89a3      	ldrh	r3, [r4, #12]
 800f70c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f714:	81a3      	strh	r3, [r4, #12]
 800f716:	6126      	str	r6, [r4, #16]
 800f718:	6165      	str	r5, [r4, #20]
 800f71a:	444e      	add	r6, r9
 800f71c:	eba5 0509 	sub.w	r5, r5, r9
 800f720:	6026      	str	r6, [r4, #0]
 800f722:	60a5      	str	r5, [r4, #8]
 800f724:	463e      	mov	r6, r7
 800f726:	42be      	cmp	r6, r7
 800f728:	d900      	bls.n	800f72c <__ssputs_r+0x70>
 800f72a:	463e      	mov	r6, r7
 800f72c:	6820      	ldr	r0, [r4, #0]
 800f72e:	4632      	mov	r2, r6
 800f730:	4641      	mov	r1, r8
 800f732:	f000 fb6b 	bl	800fe0c <memmove>
 800f736:	68a3      	ldr	r3, [r4, #8]
 800f738:	1b9b      	subs	r3, r3, r6
 800f73a:	60a3      	str	r3, [r4, #8]
 800f73c:	6823      	ldr	r3, [r4, #0]
 800f73e:	4433      	add	r3, r6
 800f740:	6023      	str	r3, [r4, #0]
 800f742:	2000      	movs	r0, #0
 800f744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f748:	462a      	mov	r2, r5
 800f74a:	f000 fb9e 	bl	800fe8a <_realloc_r>
 800f74e:	4606      	mov	r6, r0
 800f750:	2800      	cmp	r0, #0
 800f752:	d1e0      	bne.n	800f716 <__ssputs_r+0x5a>
 800f754:	6921      	ldr	r1, [r4, #16]
 800f756:	4650      	mov	r0, sl
 800f758:	f7ff feb0 	bl	800f4bc <_free_r>
 800f75c:	230c      	movs	r3, #12
 800f75e:	f8ca 3000 	str.w	r3, [sl]
 800f762:	89a3      	ldrh	r3, [r4, #12]
 800f764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f768:	81a3      	strh	r3, [r4, #12]
 800f76a:	f04f 30ff 	mov.w	r0, #4294967295
 800f76e:	e7e9      	b.n	800f744 <__ssputs_r+0x88>

0800f770 <_svfiprintf_r>:
 800f770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f774:	4698      	mov	r8, r3
 800f776:	898b      	ldrh	r3, [r1, #12]
 800f778:	061b      	lsls	r3, r3, #24
 800f77a:	b09d      	sub	sp, #116	; 0x74
 800f77c:	4607      	mov	r7, r0
 800f77e:	460d      	mov	r5, r1
 800f780:	4614      	mov	r4, r2
 800f782:	d50e      	bpl.n	800f7a2 <_svfiprintf_r+0x32>
 800f784:	690b      	ldr	r3, [r1, #16]
 800f786:	b963      	cbnz	r3, 800f7a2 <_svfiprintf_r+0x32>
 800f788:	2140      	movs	r1, #64	; 0x40
 800f78a:	f7ff ff0b 	bl	800f5a4 <_malloc_r>
 800f78e:	6028      	str	r0, [r5, #0]
 800f790:	6128      	str	r0, [r5, #16]
 800f792:	b920      	cbnz	r0, 800f79e <_svfiprintf_r+0x2e>
 800f794:	230c      	movs	r3, #12
 800f796:	603b      	str	r3, [r7, #0]
 800f798:	f04f 30ff 	mov.w	r0, #4294967295
 800f79c:	e0d0      	b.n	800f940 <_svfiprintf_r+0x1d0>
 800f79e:	2340      	movs	r3, #64	; 0x40
 800f7a0:	616b      	str	r3, [r5, #20]
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f7a6:	2320      	movs	r3, #32
 800f7a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f7ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7b0:	2330      	movs	r3, #48	; 0x30
 800f7b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f958 <_svfiprintf_r+0x1e8>
 800f7b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7ba:	f04f 0901 	mov.w	r9, #1
 800f7be:	4623      	mov	r3, r4
 800f7c0:	469a      	mov	sl, r3
 800f7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7c6:	b10a      	cbz	r2, 800f7cc <_svfiprintf_r+0x5c>
 800f7c8:	2a25      	cmp	r2, #37	; 0x25
 800f7ca:	d1f9      	bne.n	800f7c0 <_svfiprintf_r+0x50>
 800f7cc:	ebba 0b04 	subs.w	fp, sl, r4
 800f7d0:	d00b      	beq.n	800f7ea <_svfiprintf_r+0x7a>
 800f7d2:	465b      	mov	r3, fp
 800f7d4:	4622      	mov	r2, r4
 800f7d6:	4629      	mov	r1, r5
 800f7d8:	4638      	mov	r0, r7
 800f7da:	f7ff ff6f 	bl	800f6bc <__ssputs_r>
 800f7de:	3001      	adds	r0, #1
 800f7e0:	f000 80a9 	beq.w	800f936 <_svfiprintf_r+0x1c6>
 800f7e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7e6:	445a      	add	r2, fp
 800f7e8:	9209      	str	r2, [sp, #36]	; 0x24
 800f7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	f000 80a1 	beq.w	800f936 <_svfiprintf_r+0x1c6>
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f7fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7fe:	f10a 0a01 	add.w	sl, sl, #1
 800f802:	9304      	str	r3, [sp, #16]
 800f804:	9307      	str	r3, [sp, #28]
 800f806:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f80a:	931a      	str	r3, [sp, #104]	; 0x68
 800f80c:	4654      	mov	r4, sl
 800f80e:	2205      	movs	r2, #5
 800f810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f814:	4850      	ldr	r0, [pc, #320]	; (800f958 <_svfiprintf_r+0x1e8>)
 800f816:	f7f0 fcfb 	bl	8000210 <memchr>
 800f81a:	9a04      	ldr	r2, [sp, #16]
 800f81c:	b9d8      	cbnz	r0, 800f856 <_svfiprintf_r+0xe6>
 800f81e:	06d0      	lsls	r0, r2, #27
 800f820:	bf44      	itt	mi
 800f822:	2320      	movmi	r3, #32
 800f824:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f828:	0711      	lsls	r1, r2, #28
 800f82a:	bf44      	itt	mi
 800f82c:	232b      	movmi	r3, #43	; 0x2b
 800f82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f832:	f89a 3000 	ldrb.w	r3, [sl]
 800f836:	2b2a      	cmp	r3, #42	; 0x2a
 800f838:	d015      	beq.n	800f866 <_svfiprintf_r+0xf6>
 800f83a:	9a07      	ldr	r2, [sp, #28]
 800f83c:	4654      	mov	r4, sl
 800f83e:	2000      	movs	r0, #0
 800f840:	f04f 0c0a 	mov.w	ip, #10
 800f844:	4621      	mov	r1, r4
 800f846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f84a:	3b30      	subs	r3, #48	; 0x30
 800f84c:	2b09      	cmp	r3, #9
 800f84e:	d94d      	bls.n	800f8ec <_svfiprintf_r+0x17c>
 800f850:	b1b0      	cbz	r0, 800f880 <_svfiprintf_r+0x110>
 800f852:	9207      	str	r2, [sp, #28]
 800f854:	e014      	b.n	800f880 <_svfiprintf_r+0x110>
 800f856:	eba0 0308 	sub.w	r3, r0, r8
 800f85a:	fa09 f303 	lsl.w	r3, r9, r3
 800f85e:	4313      	orrs	r3, r2
 800f860:	9304      	str	r3, [sp, #16]
 800f862:	46a2      	mov	sl, r4
 800f864:	e7d2      	b.n	800f80c <_svfiprintf_r+0x9c>
 800f866:	9b03      	ldr	r3, [sp, #12]
 800f868:	1d19      	adds	r1, r3, #4
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	9103      	str	r1, [sp, #12]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	bfbb      	ittet	lt
 800f872:	425b      	neglt	r3, r3
 800f874:	f042 0202 	orrlt.w	r2, r2, #2
 800f878:	9307      	strge	r3, [sp, #28]
 800f87a:	9307      	strlt	r3, [sp, #28]
 800f87c:	bfb8      	it	lt
 800f87e:	9204      	strlt	r2, [sp, #16]
 800f880:	7823      	ldrb	r3, [r4, #0]
 800f882:	2b2e      	cmp	r3, #46	; 0x2e
 800f884:	d10c      	bne.n	800f8a0 <_svfiprintf_r+0x130>
 800f886:	7863      	ldrb	r3, [r4, #1]
 800f888:	2b2a      	cmp	r3, #42	; 0x2a
 800f88a:	d134      	bne.n	800f8f6 <_svfiprintf_r+0x186>
 800f88c:	9b03      	ldr	r3, [sp, #12]
 800f88e:	1d1a      	adds	r2, r3, #4
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	9203      	str	r2, [sp, #12]
 800f894:	2b00      	cmp	r3, #0
 800f896:	bfb8      	it	lt
 800f898:	f04f 33ff 	movlt.w	r3, #4294967295
 800f89c:	3402      	adds	r4, #2
 800f89e:	9305      	str	r3, [sp, #20]
 800f8a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f968 <_svfiprintf_r+0x1f8>
 800f8a4:	7821      	ldrb	r1, [r4, #0]
 800f8a6:	2203      	movs	r2, #3
 800f8a8:	4650      	mov	r0, sl
 800f8aa:	f7f0 fcb1 	bl	8000210 <memchr>
 800f8ae:	b138      	cbz	r0, 800f8c0 <_svfiprintf_r+0x150>
 800f8b0:	9b04      	ldr	r3, [sp, #16]
 800f8b2:	eba0 000a 	sub.w	r0, r0, sl
 800f8b6:	2240      	movs	r2, #64	; 0x40
 800f8b8:	4082      	lsls	r2, r0
 800f8ba:	4313      	orrs	r3, r2
 800f8bc:	3401      	adds	r4, #1
 800f8be:	9304      	str	r3, [sp, #16]
 800f8c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8c4:	4825      	ldr	r0, [pc, #148]	; (800f95c <_svfiprintf_r+0x1ec>)
 800f8c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f8ca:	2206      	movs	r2, #6
 800f8cc:	f7f0 fca0 	bl	8000210 <memchr>
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	d038      	beq.n	800f946 <_svfiprintf_r+0x1d6>
 800f8d4:	4b22      	ldr	r3, [pc, #136]	; (800f960 <_svfiprintf_r+0x1f0>)
 800f8d6:	bb1b      	cbnz	r3, 800f920 <_svfiprintf_r+0x1b0>
 800f8d8:	9b03      	ldr	r3, [sp, #12]
 800f8da:	3307      	adds	r3, #7
 800f8dc:	f023 0307 	bic.w	r3, r3, #7
 800f8e0:	3308      	adds	r3, #8
 800f8e2:	9303      	str	r3, [sp, #12]
 800f8e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8e6:	4433      	add	r3, r6
 800f8e8:	9309      	str	r3, [sp, #36]	; 0x24
 800f8ea:	e768      	b.n	800f7be <_svfiprintf_r+0x4e>
 800f8ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8f0:	460c      	mov	r4, r1
 800f8f2:	2001      	movs	r0, #1
 800f8f4:	e7a6      	b.n	800f844 <_svfiprintf_r+0xd4>
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	3401      	adds	r4, #1
 800f8fa:	9305      	str	r3, [sp, #20]
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	f04f 0c0a 	mov.w	ip, #10
 800f902:	4620      	mov	r0, r4
 800f904:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f908:	3a30      	subs	r2, #48	; 0x30
 800f90a:	2a09      	cmp	r2, #9
 800f90c:	d903      	bls.n	800f916 <_svfiprintf_r+0x1a6>
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d0c6      	beq.n	800f8a0 <_svfiprintf_r+0x130>
 800f912:	9105      	str	r1, [sp, #20]
 800f914:	e7c4      	b.n	800f8a0 <_svfiprintf_r+0x130>
 800f916:	fb0c 2101 	mla	r1, ip, r1, r2
 800f91a:	4604      	mov	r4, r0
 800f91c:	2301      	movs	r3, #1
 800f91e:	e7f0      	b.n	800f902 <_svfiprintf_r+0x192>
 800f920:	ab03      	add	r3, sp, #12
 800f922:	9300      	str	r3, [sp, #0]
 800f924:	462a      	mov	r2, r5
 800f926:	4b0f      	ldr	r3, [pc, #60]	; (800f964 <_svfiprintf_r+0x1f4>)
 800f928:	a904      	add	r1, sp, #16
 800f92a:	4638      	mov	r0, r7
 800f92c:	f3af 8000 	nop.w
 800f930:	1c42      	adds	r2, r0, #1
 800f932:	4606      	mov	r6, r0
 800f934:	d1d6      	bne.n	800f8e4 <_svfiprintf_r+0x174>
 800f936:	89ab      	ldrh	r3, [r5, #12]
 800f938:	065b      	lsls	r3, r3, #25
 800f93a:	f53f af2d 	bmi.w	800f798 <_svfiprintf_r+0x28>
 800f93e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f940:	b01d      	add	sp, #116	; 0x74
 800f942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f946:	ab03      	add	r3, sp, #12
 800f948:	9300      	str	r3, [sp, #0]
 800f94a:	462a      	mov	r2, r5
 800f94c:	4b05      	ldr	r3, [pc, #20]	; (800f964 <_svfiprintf_r+0x1f4>)
 800f94e:	a904      	add	r1, sp, #16
 800f950:	4638      	mov	r0, r7
 800f952:	f000 f879 	bl	800fa48 <_printf_i>
 800f956:	e7eb      	b.n	800f930 <_svfiprintf_r+0x1c0>
 800f958:	08010d86 	.word	0x08010d86
 800f95c:	08010d90 	.word	0x08010d90
 800f960:	00000000 	.word	0x00000000
 800f964:	0800f6bd 	.word	0x0800f6bd
 800f968:	08010d8c 	.word	0x08010d8c

0800f96c <_printf_common>:
 800f96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f970:	4616      	mov	r6, r2
 800f972:	4699      	mov	r9, r3
 800f974:	688a      	ldr	r2, [r1, #8]
 800f976:	690b      	ldr	r3, [r1, #16]
 800f978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f97c:	4293      	cmp	r3, r2
 800f97e:	bfb8      	it	lt
 800f980:	4613      	movlt	r3, r2
 800f982:	6033      	str	r3, [r6, #0]
 800f984:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f988:	4607      	mov	r7, r0
 800f98a:	460c      	mov	r4, r1
 800f98c:	b10a      	cbz	r2, 800f992 <_printf_common+0x26>
 800f98e:	3301      	adds	r3, #1
 800f990:	6033      	str	r3, [r6, #0]
 800f992:	6823      	ldr	r3, [r4, #0]
 800f994:	0699      	lsls	r1, r3, #26
 800f996:	bf42      	ittt	mi
 800f998:	6833      	ldrmi	r3, [r6, #0]
 800f99a:	3302      	addmi	r3, #2
 800f99c:	6033      	strmi	r3, [r6, #0]
 800f99e:	6825      	ldr	r5, [r4, #0]
 800f9a0:	f015 0506 	ands.w	r5, r5, #6
 800f9a4:	d106      	bne.n	800f9b4 <_printf_common+0x48>
 800f9a6:	f104 0a19 	add.w	sl, r4, #25
 800f9aa:	68e3      	ldr	r3, [r4, #12]
 800f9ac:	6832      	ldr	r2, [r6, #0]
 800f9ae:	1a9b      	subs	r3, r3, r2
 800f9b0:	42ab      	cmp	r3, r5
 800f9b2:	dc26      	bgt.n	800fa02 <_printf_common+0x96>
 800f9b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f9b8:	1e13      	subs	r3, r2, #0
 800f9ba:	6822      	ldr	r2, [r4, #0]
 800f9bc:	bf18      	it	ne
 800f9be:	2301      	movne	r3, #1
 800f9c0:	0692      	lsls	r2, r2, #26
 800f9c2:	d42b      	bmi.n	800fa1c <_printf_common+0xb0>
 800f9c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9c8:	4649      	mov	r1, r9
 800f9ca:	4638      	mov	r0, r7
 800f9cc:	47c0      	blx	r8
 800f9ce:	3001      	adds	r0, #1
 800f9d0:	d01e      	beq.n	800fa10 <_printf_common+0xa4>
 800f9d2:	6823      	ldr	r3, [r4, #0]
 800f9d4:	6922      	ldr	r2, [r4, #16]
 800f9d6:	f003 0306 	and.w	r3, r3, #6
 800f9da:	2b04      	cmp	r3, #4
 800f9dc:	bf02      	ittt	eq
 800f9de:	68e5      	ldreq	r5, [r4, #12]
 800f9e0:	6833      	ldreq	r3, [r6, #0]
 800f9e2:	1aed      	subeq	r5, r5, r3
 800f9e4:	68a3      	ldr	r3, [r4, #8]
 800f9e6:	bf0c      	ite	eq
 800f9e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f9ec:	2500      	movne	r5, #0
 800f9ee:	4293      	cmp	r3, r2
 800f9f0:	bfc4      	itt	gt
 800f9f2:	1a9b      	subgt	r3, r3, r2
 800f9f4:	18ed      	addgt	r5, r5, r3
 800f9f6:	2600      	movs	r6, #0
 800f9f8:	341a      	adds	r4, #26
 800f9fa:	42b5      	cmp	r5, r6
 800f9fc:	d11a      	bne.n	800fa34 <_printf_common+0xc8>
 800f9fe:	2000      	movs	r0, #0
 800fa00:	e008      	b.n	800fa14 <_printf_common+0xa8>
 800fa02:	2301      	movs	r3, #1
 800fa04:	4652      	mov	r2, sl
 800fa06:	4649      	mov	r1, r9
 800fa08:	4638      	mov	r0, r7
 800fa0a:	47c0      	blx	r8
 800fa0c:	3001      	adds	r0, #1
 800fa0e:	d103      	bne.n	800fa18 <_printf_common+0xac>
 800fa10:	f04f 30ff 	mov.w	r0, #4294967295
 800fa14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa18:	3501      	adds	r5, #1
 800fa1a:	e7c6      	b.n	800f9aa <_printf_common+0x3e>
 800fa1c:	18e1      	adds	r1, r4, r3
 800fa1e:	1c5a      	adds	r2, r3, #1
 800fa20:	2030      	movs	r0, #48	; 0x30
 800fa22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa26:	4422      	add	r2, r4
 800fa28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa30:	3302      	adds	r3, #2
 800fa32:	e7c7      	b.n	800f9c4 <_printf_common+0x58>
 800fa34:	2301      	movs	r3, #1
 800fa36:	4622      	mov	r2, r4
 800fa38:	4649      	mov	r1, r9
 800fa3a:	4638      	mov	r0, r7
 800fa3c:	47c0      	blx	r8
 800fa3e:	3001      	adds	r0, #1
 800fa40:	d0e6      	beq.n	800fa10 <_printf_common+0xa4>
 800fa42:	3601      	adds	r6, #1
 800fa44:	e7d9      	b.n	800f9fa <_printf_common+0x8e>
	...

0800fa48 <_printf_i>:
 800fa48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa4c:	7e0f      	ldrb	r7, [r1, #24]
 800fa4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa50:	2f78      	cmp	r7, #120	; 0x78
 800fa52:	4691      	mov	r9, r2
 800fa54:	4680      	mov	r8, r0
 800fa56:	460c      	mov	r4, r1
 800fa58:	469a      	mov	sl, r3
 800fa5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa5e:	d807      	bhi.n	800fa70 <_printf_i+0x28>
 800fa60:	2f62      	cmp	r7, #98	; 0x62
 800fa62:	d80a      	bhi.n	800fa7a <_printf_i+0x32>
 800fa64:	2f00      	cmp	r7, #0
 800fa66:	f000 80d4 	beq.w	800fc12 <_printf_i+0x1ca>
 800fa6a:	2f58      	cmp	r7, #88	; 0x58
 800fa6c:	f000 80c0 	beq.w	800fbf0 <_printf_i+0x1a8>
 800fa70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fa78:	e03a      	b.n	800faf0 <_printf_i+0xa8>
 800fa7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fa7e:	2b15      	cmp	r3, #21
 800fa80:	d8f6      	bhi.n	800fa70 <_printf_i+0x28>
 800fa82:	a101      	add	r1, pc, #4	; (adr r1, 800fa88 <_printf_i+0x40>)
 800fa84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa88:	0800fae1 	.word	0x0800fae1
 800fa8c:	0800faf5 	.word	0x0800faf5
 800fa90:	0800fa71 	.word	0x0800fa71
 800fa94:	0800fa71 	.word	0x0800fa71
 800fa98:	0800fa71 	.word	0x0800fa71
 800fa9c:	0800fa71 	.word	0x0800fa71
 800faa0:	0800faf5 	.word	0x0800faf5
 800faa4:	0800fa71 	.word	0x0800fa71
 800faa8:	0800fa71 	.word	0x0800fa71
 800faac:	0800fa71 	.word	0x0800fa71
 800fab0:	0800fa71 	.word	0x0800fa71
 800fab4:	0800fbf9 	.word	0x0800fbf9
 800fab8:	0800fb21 	.word	0x0800fb21
 800fabc:	0800fbb3 	.word	0x0800fbb3
 800fac0:	0800fa71 	.word	0x0800fa71
 800fac4:	0800fa71 	.word	0x0800fa71
 800fac8:	0800fc1b 	.word	0x0800fc1b
 800facc:	0800fa71 	.word	0x0800fa71
 800fad0:	0800fb21 	.word	0x0800fb21
 800fad4:	0800fa71 	.word	0x0800fa71
 800fad8:	0800fa71 	.word	0x0800fa71
 800fadc:	0800fbbb 	.word	0x0800fbbb
 800fae0:	682b      	ldr	r3, [r5, #0]
 800fae2:	1d1a      	adds	r2, r3, #4
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	602a      	str	r2, [r5, #0]
 800fae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800faec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800faf0:	2301      	movs	r3, #1
 800faf2:	e09f      	b.n	800fc34 <_printf_i+0x1ec>
 800faf4:	6820      	ldr	r0, [r4, #0]
 800faf6:	682b      	ldr	r3, [r5, #0]
 800faf8:	0607      	lsls	r7, r0, #24
 800fafa:	f103 0104 	add.w	r1, r3, #4
 800fafe:	6029      	str	r1, [r5, #0]
 800fb00:	d501      	bpl.n	800fb06 <_printf_i+0xbe>
 800fb02:	681e      	ldr	r6, [r3, #0]
 800fb04:	e003      	b.n	800fb0e <_printf_i+0xc6>
 800fb06:	0646      	lsls	r6, r0, #25
 800fb08:	d5fb      	bpl.n	800fb02 <_printf_i+0xba>
 800fb0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fb0e:	2e00      	cmp	r6, #0
 800fb10:	da03      	bge.n	800fb1a <_printf_i+0xd2>
 800fb12:	232d      	movs	r3, #45	; 0x2d
 800fb14:	4276      	negs	r6, r6
 800fb16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb1a:	485a      	ldr	r0, [pc, #360]	; (800fc84 <_printf_i+0x23c>)
 800fb1c:	230a      	movs	r3, #10
 800fb1e:	e012      	b.n	800fb46 <_printf_i+0xfe>
 800fb20:	682b      	ldr	r3, [r5, #0]
 800fb22:	6820      	ldr	r0, [r4, #0]
 800fb24:	1d19      	adds	r1, r3, #4
 800fb26:	6029      	str	r1, [r5, #0]
 800fb28:	0605      	lsls	r5, r0, #24
 800fb2a:	d501      	bpl.n	800fb30 <_printf_i+0xe8>
 800fb2c:	681e      	ldr	r6, [r3, #0]
 800fb2e:	e002      	b.n	800fb36 <_printf_i+0xee>
 800fb30:	0641      	lsls	r1, r0, #25
 800fb32:	d5fb      	bpl.n	800fb2c <_printf_i+0xe4>
 800fb34:	881e      	ldrh	r6, [r3, #0]
 800fb36:	4853      	ldr	r0, [pc, #332]	; (800fc84 <_printf_i+0x23c>)
 800fb38:	2f6f      	cmp	r7, #111	; 0x6f
 800fb3a:	bf0c      	ite	eq
 800fb3c:	2308      	moveq	r3, #8
 800fb3e:	230a      	movne	r3, #10
 800fb40:	2100      	movs	r1, #0
 800fb42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb46:	6865      	ldr	r5, [r4, #4]
 800fb48:	60a5      	str	r5, [r4, #8]
 800fb4a:	2d00      	cmp	r5, #0
 800fb4c:	bfa2      	ittt	ge
 800fb4e:	6821      	ldrge	r1, [r4, #0]
 800fb50:	f021 0104 	bicge.w	r1, r1, #4
 800fb54:	6021      	strge	r1, [r4, #0]
 800fb56:	b90e      	cbnz	r6, 800fb5c <_printf_i+0x114>
 800fb58:	2d00      	cmp	r5, #0
 800fb5a:	d04b      	beq.n	800fbf4 <_printf_i+0x1ac>
 800fb5c:	4615      	mov	r5, r2
 800fb5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb62:	fb03 6711 	mls	r7, r3, r1, r6
 800fb66:	5dc7      	ldrb	r7, [r0, r7]
 800fb68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb6c:	4637      	mov	r7, r6
 800fb6e:	42bb      	cmp	r3, r7
 800fb70:	460e      	mov	r6, r1
 800fb72:	d9f4      	bls.n	800fb5e <_printf_i+0x116>
 800fb74:	2b08      	cmp	r3, #8
 800fb76:	d10b      	bne.n	800fb90 <_printf_i+0x148>
 800fb78:	6823      	ldr	r3, [r4, #0]
 800fb7a:	07de      	lsls	r6, r3, #31
 800fb7c:	d508      	bpl.n	800fb90 <_printf_i+0x148>
 800fb7e:	6923      	ldr	r3, [r4, #16]
 800fb80:	6861      	ldr	r1, [r4, #4]
 800fb82:	4299      	cmp	r1, r3
 800fb84:	bfde      	ittt	le
 800fb86:	2330      	movle	r3, #48	; 0x30
 800fb88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fb8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fb90:	1b52      	subs	r2, r2, r5
 800fb92:	6122      	str	r2, [r4, #16]
 800fb94:	f8cd a000 	str.w	sl, [sp]
 800fb98:	464b      	mov	r3, r9
 800fb9a:	aa03      	add	r2, sp, #12
 800fb9c:	4621      	mov	r1, r4
 800fb9e:	4640      	mov	r0, r8
 800fba0:	f7ff fee4 	bl	800f96c <_printf_common>
 800fba4:	3001      	adds	r0, #1
 800fba6:	d14a      	bne.n	800fc3e <_printf_i+0x1f6>
 800fba8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbac:	b004      	add	sp, #16
 800fbae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbb2:	6823      	ldr	r3, [r4, #0]
 800fbb4:	f043 0320 	orr.w	r3, r3, #32
 800fbb8:	6023      	str	r3, [r4, #0]
 800fbba:	4833      	ldr	r0, [pc, #204]	; (800fc88 <_printf_i+0x240>)
 800fbbc:	2778      	movs	r7, #120	; 0x78
 800fbbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fbc2:	6823      	ldr	r3, [r4, #0]
 800fbc4:	6829      	ldr	r1, [r5, #0]
 800fbc6:	061f      	lsls	r7, r3, #24
 800fbc8:	f851 6b04 	ldr.w	r6, [r1], #4
 800fbcc:	d402      	bmi.n	800fbd4 <_printf_i+0x18c>
 800fbce:	065f      	lsls	r7, r3, #25
 800fbd0:	bf48      	it	mi
 800fbd2:	b2b6      	uxthmi	r6, r6
 800fbd4:	07df      	lsls	r7, r3, #31
 800fbd6:	bf48      	it	mi
 800fbd8:	f043 0320 	orrmi.w	r3, r3, #32
 800fbdc:	6029      	str	r1, [r5, #0]
 800fbde:	bf48      	it	mi
 800fbe0:	6023      	strmi	r3, [r4, #0]
 800fbe2:	b91e      	cbnz	r6, 800fbec <_printf_i+0x1a4>
 800fbe4:	6823      	ldr	r3, [r4, #0]
 800fbe6:	f023 0320 	bic.w	r3, r3, #32
 800fbea:	6023      	str	r3, [r4, #0]
 800fbec:	2310      	movs	r3, #16
 800fbee:	e7a7      	b.n	800fb40 <_printf_i+0xf8>
 800fbf0:	4824      	ldr	r0, [pc, #144]	; (800fc84 <_printf_i+0x23c>)
 800fbf2:	e7e4      	b.n	800fbbe <_printf_i+0x176>
 800fbf4:	4615      	mov	r5, r2
 800fbf6:	e7bd      	b.n	800fb74 <_printf_i+0x12c>
 800fbf8:	682b      	ldr	r3, [r5, #0]
 800fbfa:	6826      	ldr	r6, [r4, #0]
 800fbfc:	6961      	ldr	r1, [r4, #20]
 800fbfe:	1d18      	adds	r0, r3, #4
 800fc00:	6028      	str	r0, [r5, #0]
 800fc02:	0635      	lsls	r5, r6, #24
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	d501      	bpl.n	800fc0c <_printf_i+0x1c4>
 800fc08:	6019      	str	r1, [r3, #0]
 800fc0a:	e002      	b.n	800fc12 <_printf_i+0x1ca>
 800fc0c:	0670      	lsls	r0, r6, #25
 800fc0e:	d5fb      	bpl.n	800fc08 <_printf_i+0x1c0>
 800fc10:	8019      	strh	r1, [r3, #0]
 800fc12:	2300      	movs	r3, #0
 800fc14:	6123      	str	r3, [r4, #16]
 800fc16:	4615      	mov	r5, r2
 800fc18:	e7bc      	b.n	800fb94 <_printf_i+0x14c>
 800fc1a:	682b      	ldr	r3, [r5, #0]
 800fc1c:	1d1a      	adds	r2, r3, #4
 800fc1e:	602a      	str	r2, [r5, #0]
 800fc20:	681d      	ldr	r5, [r3, #0]
 800fc22:	6862      	ldr	r2, [r4, #4]
 800fc24:	2100      	movs	r1, #0
 800fc26:	4628      	mov	r0, r5
 800fc28:	f7f0 faf2 	bl	8000210 <memchr>
 800fc2c:	b108      	cbz	r0, 800fc32 <_printf_i+0x1ea>
 800fc2e:	1b40      	subs	r0, r0, r5
 800fc30:	6060      	str	r0, [r4, #4]
 800fc32:	6863      	ldr	r3, [r4, #4]
 800fc34:	6123      	str	r3, [r4, #16]
 800fc36:	2300      	movs	r3, #0
 800fc38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc3c:	e7aa      	b.n	800fb94 <_printf_i+0x14c>
 800fc3e:	6923      	ldr	r3, [r4, #16]
 800fc40:	462a      	mov	r2, r5
 800fc42:	4649      	mov	r1, r9
 800fc44:	4640      	mov	r0, r8
 800fc46:	47d0      	blx	sl
 800fc48:	3001      	adds	r0, #1
 800fc4a:	d0ad      	beq.n	800fba8 <_printf_i+0x160>
 800fc4c:	6823      	ldr	r3, [r4, #0]
 800fc4e:	079b      	lsls	r3, r3, #30
 800fc50:	d413      	bmi.n	800fc7a <_printf_i+0x232>
 800fc52:	68e0      	ldr	r0, [r4, #12]
 800fc54:	9b03      	ldr	r3, [sp, #12]
 800fc56:	4298      	cmp	r0, r3
 800fc58:	bfb8      	it	lt
 800fc5a:	4618      	movlt	r0, r3
 800fc5c:	e7a6      	b.n	800fbac <_printf_i+0x164>
 800fc5e:	2301      	movs	r3, #1
 800fc60:	4632      	mov	r2, r6
 800fc62:	4649      	mov	r1, r9
 800fc64:	4640      	mov	r0, r8
 800fc66:	47d0      	blx	sl
 800fc68:	3001      	adds	r0, #1
 800fc6a:	d09d      	beq.n	800fba8 <_printf_i+0x160>
 800fc6c:	3501      	adds	r5, #1
 800fc6e:	68e3      	ldr	r3, [r4, #12]
 800fc70:	9903      	ldr	r1, [sp, #12]
 800fc72:	1a5b      	subs	r3, r3, r1
 800fc74:	42ab      	cmp	r3, r5
 800fc76:	dcf2      	bgt.n	800fc5e <_printf_i+0x216>
 800fc78:	e7eb      	b.n	800fc52 <_printf_i+0x20a>
 800fc7a:	2500      	movs	r5, #0
 800fc7c:	f104 0619 	add.w	r6, r4, #25
 800fc80:	e7f5      	b.n	800fc6e <_printf_i+0x226>
 800fc82:	bf00      	nop
 800fc84:	08010d97 	.word	0x08010d97
 800fc88:	08010da8 	.word	0x08010da8

0800fc8c <__sflush_r>:
 800fc8c:	898a      	ldrh	r2, [r1, #12]
 800fc8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc92:	4605      	mov	r5, r0
 800fc94:	0710      	lsls	r0, r2, #28
 800fc96:	460c      	mov	r4, r1
 800fc98:	d458      	bmi.n	800fd4c <__sflush_r+0xc0>
 800fc9a:	684b      	ldr	r3, [r1, #4]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	dc05      	bgt.n	800fcac <__sflush_r+0x20>
 800fca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	dc02      	bgt.n	800fcac <__sflush_r+0x20>
 800fca6:	2000      	movs	r0, #0
 800fca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fcae:	2e00      	cmp	r6, #0
 800fcb0:	d0f9      	beq.n	800fca6 <__sflush_r+0x1a>
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fcb8:	682f      	ldr	r7, [r5, #0]
 800fcba:	6a21      	ldr	r1, [r4, #32]
 800fcbc:	602b      	str	r3, [r5, #0]
 800fcbe:	d032      	beq.n	800fd26 <__sflush_r+0x9a>
 800fcc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fcc2:	89a3      	ldrh	r3, [r4, #12]
 800fcc4:	075a      	lsls	r2, r3, #29
 800fcc6:	d505      	bpl.n	800fcd4 <__sflush_r+0x48>
 800fcc8:	6863      	ldr	r3, [r4, #4]
 800fcca:	1ac0      	subs	r0, r0, r3
 800fccc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fcce:	b10b      	cbz	r3, 800fcd4 <__sflush_r+0x48>
 800fcd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fcd2:	1ac0      	subs	r0, r0, r3
 800fcd4:	2300      	movs	r3, #0
 800fcd6:	4602      	mov	r2, r0
 800fcd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fcda:	6a21      	ldr	r1, [r4, #32]
 800fcdc:	4628      	mov	r0, r5
 800fcde:	47b0      	blx	r6
 800fce0:	1c43      	adds	r3, r0, #1
 800fce2:	89a3      	ldrh	r3, [r4, #12]
 800fce4:	d106      	bne.n	800fcf4 <__sflush_r+0x68>
 800fce6:	6829      	ldr	r1, [r5, #0]
 800fce8:	291d      	cmp	r1, #29
 800fcea:	d82b      	bhi.n	800fd44 <__sflush_r+0xb8>
 800fcec:	4a29      	ldr	r2, [pc, #164]	; (800fd94 <__sflush_r+0x108>)
 800fcee:	410a      	asrs	r2, r1
 800fcf0:	07d6      	lsls	r6, r2, #31
 800fcf2:	d427      	bmi.n	800fd44 <__sflush_r+0xb8>
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	6062      	str	r2, [r4, #4]
 800fcf8:	04d9      	lsls	r1, r3, #19
 800fcfa:	6922      	ldr	r2, [r4, #16]
 800fcfc:	6022      	str	r2, [r4, #0]
 800fcfe:	d504      	bpl.n	800fd0a <__sflush_r+0x7e>
 800fd00:	1c42      	adds	r2, r0, #1
 800fd02:	d101      	bne.n	800fd08 <__sflush_r+0x7c>
 800fd04:	682b      	ldr	r3, [r5, #0]
 800fd06:	b903      	cbnz	r3, 800fd0a <__sflush_r+0x7e>
 800fd08:	6560      	str	r0, [r4, #84]	; 0x54
 800fd0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd0c:	602f      	str	r7, [r5, #0]
 800fd0e:	2900      	cmp	r1, #0
 800fd10:	d0c9      	beq.n	800fca6 <__sflush_r+0x1a>
 800fd12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd16:	4299      	cmp	r1, r3
 800fd18:	d002      	beq.n	800fd20 <__sflush_r+0x94>
 800fd1a:	4628      	mov	r0, r5
 800fd1c:	f7ff fbce 	bl	800f4bc <_free_r>
 800fd20:	2000      	movs	r0, #0
 800fd22:	6360      	str	r0, [r4, #52]	; 0x34
 800fd24:	e7c0      	b.n	800fca8 <__sflush_r+0x1c>
 800fd26:	2301      	movs	r3, #1
 800fd28:	4628      	mov	r0, r5
 800fd2a:	47b0      	blx	r6
 800fd2c:	1c41      	adds	r1, r0, #1
 800fd2e:	d1c8      	bne.n	800fcc2 <__sflush_r+0x36>
 800fd30:	682b      	ldr	r3, [r5, #0]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d0c5      	beq.n	800fcc2 <__sflush_r+0x36>
 800fd36:	2b1d      	cmp	r3, #29
 800fd38:	d001      	beq.n	800fd3e <__sflush_r+0xb2>
 800fd3a:	2b16      	cmp	r3, #22
 800fd3c:	d101      	bne.n	800fd42 <__sflush_r+0xb6>
 800fd3e:	602f      	str	r7, [r5, #0]
 800fd40:	e7b1      	b.n	800fca6 <__sflush_r+0x1a>
 800fd42:	89a3      	ldrh	r3, [r4, #12]
 800fd44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd48:	81a3      	strh	r3, [r4, #12]
 800fd4a:	e7ad      	b.n	800fca8 <__sflush_r+0x1c>
 800fd4c:	690f      	ldr	r7, [r1, #16]
 800fd4e:	2f00      	cmp	r7, #0
 800fd50:	d0a9      	beq.n	800fca6 <__sflush_r+0x1a>
 800fd52:	0793      	lsls	r3, r2, #30
 800fd54:	680e      	ldr	r6, [r1, #0]
 800fd56:	bf08      	it	eq
 800fd58:	694b      	ldreq	r3, [r1, #20]
 800fd5a:	600f      	str	r7, [r1, #0]
 800fd5c:	bf18      	it	ne
 800fd5e:	2300      	movne	r3, #0
 800fd60:	eba6 0807 	sub.w	r8, r6, r7
 800fd64:	608b      	str	r3, [r1, #8]
 800fd66:	f1b8 0f00 	cmp.w	r8, #0
 800fd6a:	dd9c      	ble.n	800fca6 <__sflush_r+0x1a>
 800fd6c:	6a21      	ldr	r1, [r4, #32]
 800fd6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fd70:	4643      	mov	r3, r8
 800fd72:	463a      	mov	r2, r7
 800fd74:	4628      	mov	r0, r5
 800fd76:	47b0      	blx	r6
 800fd78:	2800      	cmp	r0, #0
 800fd7a:	dc06      	bgt.n	800fd8a <__sflush_r+0xfe>
 800fd7c:	89a3      	ldrh	r3, [r4, #12]
 800fd7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd82:	81a3      	strh	r3, [r4, #12]
 800fd84:	f04f 30ff 	mov.w	r0, #4294967295
 800fd88:	e78e      	b.n	800fca8 <__sflush_r+0x1c>
 800fd8a:	4407      	add	r7, r0
 800fd8c:	eba8 0800 	sub.w	r8, r8, r0
 800fd90:	e7e9      	b.n	800fd66 <__sflush_r+0xda>
 800fd92:	bf00      	nop
 800fd94:	dfbffffe 	.word	0xdfbffffe

0800fd98 <_fflush_r>:
 800fd98:	b538      	push	{r3, r4, r5, lr}
 800fd9a:	690b      	ldr	r3, [r1, #16]
 800fd9c:	4605      	mov	r5, r0
 800fd9e:	460c      	mov	r4, r1
 800fda0:	b913      	cbnz	r3, 800fda8 <_fflush_r+0x10>
 800fda2:	2500      	movs	r5, #0
 800fda4:	4628      	mov	r0, r5
 800fda6:	bd38      	pop	{r3, r4, r5, pc}
 800fda8:	b118      	cbz	r0, 800fdb2 <_fflush_r+0x1a>
 800fdaa:	6a03      	ldr	r3, [r0, #32]
 800fdac:	b90b      	cbnz	r3, 800fdb2 <_fflush_r+0x1a>
 800fdae:	f7ff f9dd 	bl	800f16c <__sinit>
 800fdb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d0f3      	beq.n	800fda2 <_fflush_r+0xa>
 800fdba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fdbc:	07d0      	lsls	r0, r2, #31
 800fdbe:	d404      	bmi.n	800fdca <_fflush_r+0x32>
 800fdc0:	0599      	lsls	r1, r3, #22
 800fdc2:	d402      	bmi.n	800fdca <_fflush_r+0x32>
 800fdc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdc6:	f7ff fb51 	bl	800f46c <__retarget_lock_acquire_recursive>
 800fdca:	4628      	mov	r0, r5
 800fdcc:	4621      	mov	r1, r4
 800fdce:	f7ff ff5d 	bl	800fc8c <__sflush_r>
 800fdd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fdd4:	07da      	lsls	r2, r3, #31
 800fdd6:	4605      	mov	r5, r0
 800fdd8:	d4e4      	bmi.n	800fda4 <_fflush_r+0xc>
 800fdda:	89a3      	ldrh	r3, [r4, #12]
 800fddc:	059b      	lsls	r3, r3, #22
 800fdde:	d4e1      	bmi.n	800fda4 <_fflush_r+0xc>
 800fde0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fde2:	f7ff fb44 	bl	800f46e <__retarget_lock_release_recursive>
 800fde6:	e7dd      	b.n	800fda4 <_fflush_r+0xc>

0800fde8 <fiprintf>:
 800fde8:	b40e      	push	{r1, r2, r3}
 800fdea:	b503      	push	{r0, r1, lr}
 800fdec:	4601      	mov	r1, r0
 800fdee:	ab03      	add	r3, sp, #12
 800fdf0:	4805      	ldr	r0, [pc, #20]	; (800fe08 <fiprintf+0x20>)
 800fdf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdf6:	6800      	ldr	r0, [r0, #0]
 800fdf8:	9301      	str	r3, [sp, #4]
 800fdfa:	f000 f89f 	bl	800ff3c <_vfiprintf_r>
 800fdfe:	b002      	add	sp, #8
 800fe00:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe04:	b003      	add	sp, #12
 800fe06:	4770      	bx	lr
 800fe08:	200001b4 	.word	0x200001b4

0800fe0c <memmove>:
 800fe0c:	4288      	cmp	r0, r1
 800fe0e:	b510      	push	{r4, lr}
 800fe10:	eb01 0402 	add.w	r4, r1, r2
 800fe14:	d902      	bls.n	800fe1c <memmove+0x10>
 800fe16:	4284      	cmp	r4, r0
 800fe18:	4623      	mov	r3, r4
 800fe1a:	d807      	bhi.n	800fe2c <memmove+0x20>
 800fe1c:	1e43      	subs	r3, r0, #1
 800fe1e:	42a1      	cmp	r1, r4
 800fe20:	d008      	beq.n	800fe34 <memmove+0x28>
 800fe22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe26:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe2a:	e7f8      	b.n	800fe1e <memmove+0x12>
 800fe2c:	4402      	add	r2, r0
 800fe2e:	4601      	mov	r1, r0
 800fe30:	428a      	cmp	r2, r1
 800fe32:	d100      	bne.n	800fe36 <memmove+0x2a>
 800fe34:	bd10      	pop	{r4, pc}
 800fe36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fe3e:	e7f7      	b.n	800fe30 <memmove+0x24>

0800fe40 <_sbrk_r>:
 800fe40:	b538      	push	{r3, r4, r5, lr}
 800fe42:	4d06      	ldr	r5, [pc, #24]	; (800fe5c <_sbrk_r+0x1c>)
 800fe44:	2300      	movs	r3, #0
 800fe46:	4604      	mov	r4, r0
 800fe48:	4608      	mov	r0, r1
 800fe4a:	602b      	str	r3, [r5, #0]
 800fe4c:	f7f2 fd4c 	bl	80028e8 <_sbrk>
 800fe50:	1c43      	adds	r3, r0, #1
 800fe52:	d102      	bne.n	800fe5a <_sbrk_r+0x1a>
 800fe54:	682b      	ldr	r3, [r5, #0]
 800fe56:	b103      	cbz	r3, 800fe5a <_sbrk_r+0x1a>
 800fe58:	6023      	str	r3, [r4, #0]
 800fe5a:	bd38      	pop	{r3, r4, r5, pc}
 800fe5c:	200047a8 	.word	0x200047a8

0800fe60 <memcpy>:
 800fe60:	440a      	add	r2, r1
 800fe62:	4291      	cmp	r1, r2
 800fe64:	f100 33ff 	add.w	r3, r0, #4294967295
 800fe68:	d100      	bne.n	800fe6c <memcpy+0xc>
 800fe6a:	4770      	bx	lr
 800fe6c:	b510      	push	{r4, lr}
 800fe6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fe76:	4291      	cmp	r1, r2
 800fe78:	d1f9      	bne.n	800fe6e <memcpy+0xe>
 800fe7a:	bd10      	pop	{r4, pc}

0800fe7c <abort>:
 800fe7c:	b508      	push	{r3, lr}
 800fe7e:	2006      	movs	r0, #6
 800fe80:	f000 fa34 	bl	80102ec <raise>
 800fe84:	2001      	movs	r0, #1
 800fe86:	f7f2 fcb7 	bl	80027f8 <_exit>

0800fe8a <_realloc_r>:
 800fe8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe8e:	4680      	mov	r8, r0
 800fe90:	4614      	mov	r4, r2
 800fe92:	460e      	mov	r6, r1
 800fe94:	b921      	cbnz	r1, 800fea0 <_realloc_r+0x16>
 800fe96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe9a:	4611      	mov	r1, r2
 800fe9c:	f7ff bb82 	b.w	800f5a4 <_malloc_r>
 800fea0:	b92a      	cbnz	r2, 800feae <_realloc_r+0x24>
 800fea2:	f7ff fb0b 	bl	800f4bc <_free_r>
 800fea6:	4625      	mov	r5, r4
 800fea8:	4628      	mov	r0, r5
 800feaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feae:	f000 fa39 	bl	8010324 <_malloc_usable_size_r>
 800feb2:	4284      	cmp	r4, r0
 800feb4:	4607      	mov	r7, r0
 800feb6:	d802      	bhi.n	800febe <_realloc_r+0x34>
 800feb8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800febc:	d812      	bhi.n	800fee4 <_realloc_r+0x5a>
 800febe:	4621      	mov	r1, r4
 800fec0:	4640      	mov	r0, r8
 800fec2:	f7ff fb6f 	bl	800f5a4 <_malloc_r>
 800fec6:	4605      	mov	r5, r0
 800fec8:	2800      	cmp	r0, #0
 800feca:	d0ed      	beq.n	800fea8 <_realloc_r+0x1e>
 800fecc:	42bc      	cmp	r4, r7
 800fece:	4622      	mov	r2, r4
 800fed0:	4631      	mov	r1, r6
 800fed2:	bf28      	it	cs
 800fed4:	463a      	movcs	r2, r7
 800fed6:	f7ff ffc3 	bl	800fe60 <memcpy>
 800feda:	4631      	mov	r1, r6
 800fedc:	4640      	mov	r0, r8
 800fede:	f7ff faed 	bl	800f4bc <_free_r>
 800fee2:	e7e1      	b.n	800fea8 <_realloc_r+0x1e>
 800fee4:	4635      	mov	r5, r6
 800fee6:	e7df      	b.n	800fea8 <_realloc_r+0x1e>

0800fee8 <__sfputc_r>:
 800fee8:	6893      	ldr	r3, [r2, #8]
 800feea:	3b01      	subs	r3, #1
 800feec:	2b00      	cmp	r3, #0
 800feee:	b410      	push	{r4}
 800fef0:	6093      	str	r3, [r2, #8]
 800fef2:	da08      	bge.n	800ff06 <__sfputc_r+0x1e>
 800fef4:	6994      	ldr	r4, [r2, #24]
 800fef6:	42a3      	cmp	r3, r4
 800fef8:	db01      	blt.n	800fefe <__sfputc_r+0x16>
 800fefa:	290a      	cmp	r1, #10
 800fefc:	d103      	bne.n	800ff06 <__sfputc_r+0x1e>
 800fefe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff02:	f000 b935 	b.w	8010170 <__swbuf_r>
 800ff06:	6813      	ldr	r3, [r2, #0]
 800ff08:	1c58      	adds	r0, r3, #1
 800ff0a:	6010      	str	r0, [r2, #0]
 800ff0c:	7019      	strb	r1, [r3, #0]
 800ff0e:	4608      	mov	r0, r1
 800ff10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff14:	4770      	bx	lr

0800ff16 <__sfputs_r>:
 800ff16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff18:	4606      	mov	r6, r0
 800ff1a:	460f      	mov	r7, r1
 800ff1c:	4614      	mov	r4, r2
 800ff1e:	18d5      	adds	r5, r2, r3
 800ff20:	42ac      	cmp	r4, r5
 800ff22:	d101      	bne.n	800ff28 <__sfputs_r+0x12>
 800ff24:	2000      	movs	r0, #0
 800ff26:	e007      	b.n	800ff38 <__sfputs_r+0x22>
 800ff28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff2c:	463a      	mov	r2, r7
 800ff2e:	4630      	mov	r0, r6
 800ff30:	f7ff ffda 	bl	800fee8 <__sfputc_r>
 800ff34:	1c43      	adds	r3, r0, #1
 800ff36:	d1f3      	bne.n	800ff20 <__sfputs_r+0xa>
 800ff38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ff3c <_vfiprintf_r>:
 800ff3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff40:	460d      	mov	r5, r1
 800ff42:	b09d      	sub	sp, #116	; 0x74
 800ff44:	4614      	mov	r4, r2
 800ff46:	4698      	mov	r8, r3
 800ff48:	4606      	mov	r6, r0
 800ff4a:	b118      	cbz	r0, 800ff54 <_vfiprintf_r+0x18>
 800ff4c:	6a03      	ldr	r3, [r0, #32]
 800ff4e:	b90b      	cbnz	r3, 800ff54 <_vfiprintf_r+0x18>
 800ff50:	f7ff f90c 	bl	800f16c <__sinit>
 800ff54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff56:	07d9      	lsls	r1, r3, #31
 800ff58:	d405      	bmi.n	800ff66 <_vfiprintf_r+0x2a>
 800ff5a:	89ab      	ldrh	r3, [r5, #12]
 800ff5c:	059a      	lsls	r2, r3, #22
 800ff5e:	d402      	bmi.n	800ff66 <_vfiprintf_r+0x2a>
 800ff60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff62:	f7ff fa83 	bl	800f46c <__retarget_lock_acquire_recursive>
 800ff66:	89ab      	ldrh	r3, [r5, #12]
 800ff68:	071b      	lsls	r3, r3, #28
 800ff6a:	d501      	bpl.n	800ff70 <_vfiprintf_r+0x34>
 800ff6c:	692b      	ldr	r3, [r5, #16]
 800ff6e:	b99b      	cbnz	r3, 800ff98 <_vfiprintf_r+0x5c>
 800ff70:	4629      	mov	r1, r5
 800ff72:	4630      	mov	r0, r6
 800ff74:	f000 f93a 	bl	80101ec <__swsetup_r>
 800ff78:	b170      	cbz	r0, 800ff98 <_vfiprintf_r+0x5c>
 800ff7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff7c:	07dc      	lsls	r4, r3, #31
 800ff7e:	d504      	bpl.n	800ff8a <_vfiprintf_r+0x4e>
 800ff80:	f04f 30ff 	mov.w	r0, #4294967295
 800ff84:	b01d      	add	sp, #116	; 0x74
 800ff86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff8a:	89ab      	ldrh	r3, [r5, #12]
 800ff8c:	0598      	lsls	r0, r3, #22
 800ff8e:	d4f7      	bmi.n	800ff80 <_vfiprintf_r+0x44>
 800ff90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff92:	f7ff fa6c 	bl	800f46e <__retarget_lock_release_recursive>
 800ff96:	e7f3      	b.n	800ff80 <_vfiprintf_r+0x44>
 800ff98:	2300      	movs	r3, #0
 800ff9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ff9c:	2320      	movs	r3, #32
 800ff9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ffa2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffa6:	2330      	movs	r3, #48	; 0x30
 800ffa8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801015c <_vfiprintf_r+0x220>
 800ffac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ffb0:	f04f 0901 	mov.w	r9, #1
 800ffb4:	4623      	mov	r3, r4
 800ffb6:	469a      	mov	sl, r3
 800ffb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffbc:	b10a      	cbz	r2, 800ffc2 <_vfiprintf_r+0x86>
 800ffbe:	2a25      	cmp	r2, #37	; 0x25
 800ffc0:	d1f9      	bne.n	800ffb6 <_vfiprintf_r+0x7a>
 800ffc2:	ebba 0b04 	subs.w	fp, sl, r4
 800ffc6:	d00b      	beq.n	800ffe0 <_vfiprintf_r+0xa4>
 800ffc8:	465b      	mov	r3, fp
 800ffca:	4622      	mov	r2, r4
 800ffcc:	4629      	mov	r1, r5
 800ffce:	4630      	mov	r0, r6
 800ffd0:	f7ff ffa1 	bl	800ff16 <__sfputs_r>
 800ffd4:	3001      	adds	r0, #1
 800ffd6:	f000 80a9 	beq.w	801012c <_vfiprintf_r+0x1f0>
 800ffda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffdc:	445a      	add	r2, fp
 800ffde:	9209      	str	r2, [sp, #36]	; 0x24
 800ffe0:	f89a 3000 	ldrb.w	r3, [sl]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	f000 80a1 	beq.w	801012c <_vfiprintf_r+0x1f0>
 800ffea:	2300      	movs	r3, #0
 800ffec:	f04f 32ff 	mov.w	r2, #4294967295
 800fff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fff4:	f10a 0a01 	add.w	sl, sl, #1
 800fff8:	9304      	str	r3, [sp, #16]
 800fffa:	9307      	str	r3, [sp, #28]
 800fffc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010000:	931a      	str	r3, [sp, #104]	; 0x68
 8010002:	4654      	mov	r4, sl
 8010004:	2205      	movs	r2, #5
 8010006:	f814 1b01 	ldrb.w	r1, [r4], #1
 801000a:	4854      	ldr	r0, [pc, #336]	; (801015c <_vfiprintf_r+0x220>)
 801000c:	f7f0 f900 	bl	8000210 <memchr>
 8010010:	9a04      	ldr	r2, [sp, #16]
 8010012:	b9d8      	cbnz	r0, 801004c <_vfiprintf_r+0x110>
 8010014:	06d1      	lsls	r1, r2, #27
 8010016:	bf44      	itt	mi
 8010018:	2320      	movmi	r3, #32
 801001a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801001e:	0713      	lsls	r3, r2, #28
 8010020:	bf44      	itt	mi
 8010022:	232b      	movmi	r3, #43	; 0x2b
 8010024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010028:	f89a 3000 	ldrb.w	r3, [sl]
 801002c:	2b2a      	cmp	r3, #42	; 0x2a
 801002e:	d015      	beq.n	801005c <_vfiprintf_r+0x120>
 8010030:	9a07      	ldr	r2, [sp, #28]
 8010032:	4654      	mov	r4, sl
 8010034:	2000      	movs	r0, #0
 8010036:	f04f 0c0a 	mov.w	ip, #10
 801003a:	4621      	mov	r1, r4
 801003c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010040:	3b30      	subs	r3, #48	; 0x30
 8010042:	2b09      	cmp	r3, #9
 8010044:	d94d      	bls.n	80100e2 <_vfiprintf_r+0x1a6>
 8010046:	b1b0      	cbz	r0, 8010076 <_vfiprintf_r+0x13a>
 8010048:	9207      	str	r2, [sp, #28]
 801004a:	e014      	b.n	8010076 <_vfiprintf_r+0x13a>
 801004c:	eba0 0308 	sub.w	r3, r0, r8
 8010050:	fa09 f303 	lsl.w	r3, r9, r3
 8010054:	4313      	orrs	r3, r2
 8010056:	9304      	str	r3, [sp, #16]
 8010058:	46a2      	mov	sl, r4
 801005a:	e7d2      	b.n	8010002 <_vfiprintf_r+0xc6>
 801005c:	9b03      	ldr	r3, [sp, #12]
 801005e:	1d19      	adds	r1, r3, #4
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	9103      	str	r1, [sp, #12]
 8010064:	2b00      	cmp	r3, #0
 8010066:	bfbb      	ittet	lt
 8010068:	425b      	neglt	r3, r3
 801006a:	f042 0202 	orrlt.w	r2, r2, #2
 801006e:	9307      	strge	r3, [sp, #28]
 8010070:	9307      	strlt	r3, [sp, #28]
 8010072:	bfb8      	it	lt
 8010074:	9204      	strlt	r2, [sp, #16]
 8010076:	7823      	ldrb	r3, [r4, #0]
 8010078:	2b2e      	cmp	r3, #46	; 0x2e
 801007a:	d10c      	bne.n	8010096 <_vfiprintf_r+0x15a>
 801007c:	7863      	ldrb	r3, [r4, #1]
 801007e:	2b2a      	cmp	r3, #42	; 0x2a
 8010080:	d134      	bne.n	80100ec <_vfiprintf_r+0x1b0>
 8010082:	9b03      	ldr	r3, [sp, #12]
 8010084:	1d1a      	adds	r2, r3, #4
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	9203      	str	r2, [sp, #12]
 801008a:	2b00      	cmp	r3, #0
 801008c:	bfb8      	it	lt
 801008e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010092:	3402      	adds	r4, #2
 8010094:	9305      	str	r3, [sp, #20]
 8010096:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801016c <_vfiprintf_r+0x230>
 801009a:	7821      	ldrb	r1, [r4, #0]
 801009c:	2203      	movs	r2, #3
 801009e:	4650      	mov	r0, sl
 80100a0:	f7f0 f8b6 	bl	8000210 <memchr>
 80100a4:	b138      	cbz	r0, 80100b6 <_vfiprintf_r+0x17a>
 80100a6:	9b04      	ldr	r3, [sp, #16]
 80100a8:	eba0 000a 	sub.w	r0, r0, sl
 80100ac:	2240      	movs	r2, #64	; 0x40
 80100ae:	4082      	lsls	r2, r0
 80100b0:	4313      	orrs	r3, r2
 80100b2:	3401      	adds	r4, #1
 80100b4:	9304      	str	r3, [sp, #16]
 80100b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100ba:	4829      	ldr	r0, [pc, #164]	; (8010160 <_vfiprintf_r+0x224>)
 80100bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80100c0:	2206      	movs	r2, #6
 80100c2:	f7f0 f8a5 	bl	8000210 <memchr>
 80100c6:	2800      	cmp	r0, #0
 80100c8:	d03f      	beq.n	801014a <_vfiprintf_r+0x20e>
 80100ca:	4b26      	ldr	r3, [pc, #152]	; (8010164 <_vfiprintf_r+0x228>)
 80100cc:	bb1b      	cbnz	r3, 8010116 <_vfiprintf_r+0x1da>
 80100ce:	9b03      	ldr	r3, [sp, #12]
 80100d0:	3307      	adds	r3, #7
 80100d2:	f023 0307 	bic.w	r3, r3, #7
 80100d6:	3308      	adds	r3, #8
 80100d8:	9303      	str	r3, [sp, #12]
 80100da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100dc:	443b      	add	r3, r7
 80100de:	9309      	str	r3, [sp, #36]	; 0x24
 80100e0:	e768      	b.n	800ffb4 <_vfiprintf_r+0x78>
 80100e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80100e6:	460c      	mov	r4, r1
 80100e8:	2001      	movs	r0, #1
 80100ea:	e7a6      	b.n	801003a <_vfiprintf_r+0xfe>
 80100ec:	2300      	movs	r3, #0
 80100ee:	3401      	adds	r4, #1
 80100f0:	9305      	str	r3, [sp, #20]
 80100f2:	4619      	mov	r1, r3
 80100f4:	f04f 0c0a 	mov.w	ip, #10
 80100f8:	4620      	mov	r0, r4
 80100fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100fe:	3a30      	subs	r2, #48	; 0x30
 8010100:	2a09      	cmp	r2, #9
 8010102:	d903      	bls.n	801010c <_vfiprintf_r+0x1d0>
 8010104:	2b00      	cmp	r3, #0
 8010106:	d0c6      	beq.n	8010096 <_vfiprintf_r+0x15a>
 8010108:	9105      	str	r1, [sp, #20]
 801010a:	e7c4      	b.n	8010096 <_vfiprintf_r+0x15a>
 801010c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010110:	4604      	mov	r4, r0
 8010112:	2301      	movs	r3, #1
 8010114:	e7f0      	b.n	80100f8 <_vfiprintf_r+0x1bc>
 8010116:	ab03      	add	r3, sp, #12
 8010118:	9300      	str	r3, [sp, #0]
 801011a:	462a      	mov	r2, r5
 801011c:	4b12      	ldr	r3, [pc, #72]	; (8010168 <_vfiprintf_r+0x22c>)
 801011e:	a904      	add	r1, sp, #16
 8010120:	4630      	mov	r0, r6
 8010122:	f3af 8000 	nop.w
 8010126:	4607      	mov	r7, r0
 8010128:	1c78      	adds	r0, r7, #1
 801012a:	d1d6      	bne.n	80100da <_vfiprintf_r+0x19e>
 801012c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801012e:	07d9      	lsls	r1, r3, #31
 8010130:	d405      	bmi.n	801013e <_vfiprintf_r+0x202>
 8010132:	89ab      	ldrh	r3, [r5, #12]
 8010134:	059a      	lsls	r2, r3, #22
 8010136:	d402      	bmi.n	801013e <_vfiprintf_r+0x202>
 8010138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801013a:	f7ff f998 	bl	800f46e <__retarget_lock_release_recursive>
 801013e:	89ab      	ldrh	r3, [r5, #12]
 8010140:	065b      	lsls	r3, r3, #25
 8010142:	f53f af1d 	bmi.w	800ff80 <_vfiprintf_r+0x44>
 8010146:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010148:	e71c      	b.n	800ff84 <_vfiprintf_r+0x48>
 801014a:	ab03      	add	r3, sp, #12
 801014c:	9300      	str	r3, [sp, #0]
 801014e:	462a      	mov	r2, r5
 8010150:	4b05      	ldr	r3, [pc, #20]	; (8010168 <_vfiprintf_r+0x22c>)
 8010152:	a904      	add	r1, sp, #16
 8010154:	4630      	mov	r0, r6
 8010156:	f7ff fc77 	bl	800fa48 <_printf_i>
 801015a:	e7e4      	b.n	8010126 <_vfiprintf_r+0x1ea>
 801015c:	08010d86 	.word	0x08010d86
 8010160:	08010d90 	.word	0x08010d90
 8010164:	00000000 	.word	0x00000000
 8010168:	0800ff17 	.word	0x0800ff17
 801016c:	08010d8c 	.word	0x08010d8c

08010170 <__swbuf_r>:
 8010170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010172:	460e      	mov	r6, r1
 8010174:	4614      	mov	r4, r2
 8010176:	4605      	mov	r5, r0
 8010178:	b118      	cbz	r0, 8010182 <__swbuf_r+0x12>
 801017a:	6a03      	ldr	r3, [r0, #32]
 801017c:	b90b      	cbnz	r3, 8010182 <__swbuf_r+0x12>
 801017e:	f7fe fff5 	bl	800f16c <__sinit>
 8010182:	69a3      	ldr	r3, [r4, #24]
 8010184:	60a3      	str	r3, [r4, #8]
 8010186:	89a3      	ldrh	r3, [r4, #12]
 8010188:	071a      	lsls	r2, r3, #28
 801018a:	d525      	bpl.n	80101d8 <__swbuf_r+0x68>
 801018c:	6923      	ldr	r3, [r4, #16]
 801018e:	b31b      	cbz	r3, 80101d8 <__swbuf_r+0x68>
 8010190:	6823      	ldr	r3, [r4, #0]
 8010192:	6922      	ldr	r2, [r4, #16]
 8010194:	1a98      	subs	r0, r3, r2
 8010196:	6963      	ldr	r3, [r4, #20]
 8010198:	b2f6      	uxtb	r6, r6
 801019a:	4283      	cmp	r3, r0
 801019c:	4637      	mov	r7, r6
 801019e:	dc04      	bgt.n	80101aa <__swbuf_r+0x3a>
 80101a0:	4621      	mov	r1, r4
 80101a2:	4628      	mov	r0, r5
 80101a4:	f7ff fdf8 	bl	800fd98 <_fflush_r>
 80101a8:	b9e0      	cbnz	r0, 80101e4 <__swbuf_r+0x74>
 80101aa:	68a3      	ldr	r3, [r4, #8]
 80101ac:	3b01      	subs	r3, #1
 80101ae:	60a3      	str	r3, [r4, #8]
 80101b0:	6823      	ldr	r3, [r4, #0]
 80101b2:	1c5a      	adds	r2, r3, #1
 80101b4:	6022      	str	r2, [r4, #0]
 80101b6:	701e      	strb	r6, [r3, #0]
 80101b8:	6962      	ldr	r2, [r4, #20]
 80101ba:	1c43      	adds	r3, r0, #1
 80101bc:	429a      	cmp	r2, r3
 80101be:	d004      	beq.n	80101ca <__swbuf_r+0x5a>
 80101c0:	89a3      	ldrh	r3, [r4, #12]
 80101c2:	07db      	lsls	r3, r3, #31
 80101c4:	d506      	bpl.n	80101d4 <__swbuf_r+0x64>
 80101c6:	2e0a      	cmp	r6, #10
 80101c8:	d104      	bne.n	80101d4 <__swbuf_r+0x64>
 80101ca:	4621      	mov	r1, r4
 80101cc:	4628      	mov	r0, r5
 80101ce:	f7ff fde3 	bl	800fd98 <_fflush_r>
 80101d2:	b938      	cbnz	r0, 80101e4 <__swbuf_r+0x74>
 80101d4:	4638      	mov	r0, r7
 80101d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101d8:	4621      	mov	r1, r4
 80101da:	4628      	mov	r0, r5
 80101dc:	f000 f806 	bl	80101ec <__swsetup_r>
 80101e0:	2800      	cmp	r0, #0
 80101e2:	d0d5      	beq.n	8010190 <__swbuf_r+0x20>
 80101e4:	f04f 37ff 	mov.w	r7, #4294967295
 80101e8:	e7f4      	b.n	80101d4 <__swbuf_r+0x64>
	...

080101ec <__swsetup_r>:
 80101ec:	b538      	push	{r3, r4, r5, lr}
 80101ee:	4b2a      	ldr	r3, [pc, #168]	; (8010298 <__swsetup_r+0xac>)
 80101f0:	4605      	mov	r5, r0
 80101f2:	6818      	ldr	r0, [r3, #0]
 80101f4:	460c      	mov	r4, r1
 80101f6:	b118      	cbz	r0, 8010200 <__swsetup_r+0x14>
 80101f8:	6a03      	ldr	r3, [r0, #32]
 80101fa:	b90b      	cbnz	r3, 8010200 <__swsetup_r+0x14>
 80101fc:	f7fe ffb6 	bl	800f16c <__sinit>
 8010200:	89a3      	ldrh	r3, [r4, #12]
 8010202:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010206:	0718      	lsls	r0, r3, #28
 8010208:	d422      	bmi.n	8010250 <__swsetup_r+0x64>
 801020a:	06d9      	lsls	r1, r3, #27
 801020c:	d407      	bmi.n	801021e <__swsetup_r+0x32>
 801020e:	2309      	movs	r3, #9
 8010210:	602b      	str	r3, [r5, #0]
 8010212:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010216:	81a3      	strh	r3, [r4, #12]
 8010218:	f04f 30ff 	mov.w	r0, #4294967295
 801021c:	e034      	b.n	8010288 <__swsetup_r+0x9c>
 801021e:	0758      	lsls	r0, r3, #29
 8010220:	d512      	bpl.n	8010248 <__swsetup_r+0x5c>
 8010222:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010224:	b141      	cbz	r1, 8010238 <__swsetup_r+0x4c>
 8010226:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801022a:	4299      	cmp	r1, r3
 801022c:	d002      	beq.n	8010234 <__swsetup_r+0x48>
 801022e:	4628      	mov	r0, r5
 8010230:	f7ff f944 	bl	800f4bc <_free_r>
 8010234:	2300      	movs	r3, #0
 8010236:	6363      	str	r3, [r4, #52]	; 0x34
 8010238:	89a3      	ldrh	r3, [r4, #12]
 801023a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801023e:	81a3      	strh	r3, [r4, #12]
 8010240:	2300      	movs	r3, #0
 8010242:	6063      	str	r3, [r4, #4]
 8010244:	6923      	ldr	r3, [r4, #16]
 8010246:	6023      	str	r3, [r4, #0]
 8010248:	89a3      	ldrh	r3, [r4, #12]
 801024a:	f043 0308 	orr.w	r3, r3, #8
 801024e:	81a3      	strh	r3, [r4, #12]
 8010250:	6923      	ldr	r3, [r4, #16]
 8010252:	b94b      	cbnz	r3, 8010268 <__swsetup_r+0x7c>
 8010254:	89a3      	ldrh	r3, [r4, #12]
 8010256:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801025a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801025e:	d003      	beq.n	8010268 <__swsetup_r+0x7c>
 8010260:	4621      	mov	r1, r4
 8010262:	4628      	mov	r0, r5
 8010264:	f000 f88c 	bl	8010380 <__smakebuf_r>
 8010268:	89a0      	ldrh	r0, [r4, #12]
 801026a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801026e:	f010 0301 	ands.w	r3, r0, #1
 8010272:	d00a      	beq.n	801028a <__swsetup_r+0x9e>
 8010274:	2300      	movs	r3, #0
 8010276:	60a3      	str	r3, [r4, #8]
 8010278:	6963      	ldr	r3, [r4, #20]
 801027a:	425b      	negs	r3, r3
 801027c:	61a3      	str	r3, [r4, #24]
 801027e:	6923      	ldr	r3, [r4, #16]
 8010280:	b943      	cbnz	r3, 8010294 <__swsetup_r+0xa8>
 8010282:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010286:	d1c4      	bne.n	8010212 <__swsetup_r+0x26>
 8010288:	bd38      	pop	{r3, r4, r5, pc}
 801028a:	0781      	lsls	r1, r0, #30
 801028c:	bf58      	it	pl
 801028e:	6963      	ldrpl	r3, [r4, #20]
 8010290:	60a3      	str	r3, [r4, #8]
 8010292:	e7f4      	b.n	801027e <__swsetup_r+0x92>
 8010294:	2000      	movs	r0, #0
 8010296:	e7f7      	b.n	8010288 <__swsetup_r+0x9c>
 8010298:	200001b4 	.word	0x200001b4

0801029c <_raise_r>:
 801029c:	291f      	cmp	r1, #31
 801029e:	b538      	push	{r3, r4, r5, lr}
 80102a0:	4604      	mov	r4, r0
 80102a2:	460d      	mov	r5, r1
 80102a4:	d904      	bls.n	80102b0 <_raise_r+0x14>
 80102a6:	2316      	movs	r3, #22
 80102a8:	6003      	str	r3, [r0, #0]
 80102aa:	f04f 30ff 	mov.w	r0, #4294967295
 80102ae:	bd38      	pop	{r3, r4, r5, pc}
 80102b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80102b2:	b112      	cbz	r2, 80102ba <_raise_r+0x1e>
 80102b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80102b8:	b94b      	cbnz	r3, 80102ce <_raise_r+0x32>
 80102ba:	4620      	mov	r0, r4
 80102bc:	f000 f830 	bl	8010320 <_getpid_r>
 80102c0:	462a      	mov	r2, r5
 80102c2:	4601      	mov	r1, r0
 80102c4:	4620      	mov	r0, r4
 80102c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102ca:	f000 b817 	b.w	80102fc <_kill_r>
 80102ce:	2b01      	cmp	r3, #1
 80102d0:	d00a      	beq.n	80102e8 <_raise_r+0x4c>
 80102d2:	1c59      	adds	r1, r3, #1
 80102d4:	d103      	bne.n	80102de <_raise_r+0x42>
 80102d6:	2316      	movs	r3, #22
 80102d8:	6003      	str	r3, [r0, #0]
 80102da:	2001      	movs	r0, #1
 80102dc:	e7e7      	b.n	80102ae <_raise_r+0x12>
 80102de:	2400      	movs	r4, #0
 80102e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80102e4:	4628      	mov	r0, r5
 80102e6:	4798      	blx	r3
 80102e8:	2000      	movs	r0, #0
 80102ea:	e7e0      	b.n	80102ae <_raise_r+0x12>

080102ec <raise>:
 80102ec:	4b02      	ldr	r3, [pc, #8]	; (80102f8 <raise+0xc>)
 80102ee:	4601      	mov	r1, r0
 80102f0:	6818      	ldr	r0, [r3, #0]
 80102f2:	f7ff bfd3 	b.w	801029c <_raise_r>
 80102f6:	bf00      	nop
 80102f8:	200001b4 	.word	0x200001b4

080102fc <_kill_r>:
 80102fc:	b538      	push	{r3, r4, r5, lr}
 80102fe:	4d07      	ldr	r5, [pc, #28]	; (801031c <_kill_r+0x20>)
 8010300:	2300      	movs	r3, #0
 8010302:	4604      	mov	r4, r0
 8010304:	4608      	mov	r0, r1
 8010306:	4611      	mov	r1, r2
 8010308:	602b      	str	r3, [r5, #0]
 801030a:	f7f2 fa65 	bl	80027d8 <_kill>
 801030e:	1c43      	adds	r3, r0, #1
 8010310:	d102      	bne.n	8010318 <_kill_r+0x1c>
 8010312:	682b      	ldr	r3, [r5, #0]
 8010314:	b103      	cbz	r3, 8010318 <_kill_r+0x1c>
 8010316:	6023      	str	r3, [r4, #0]
 8010318:	bd38      	pop	{r3, r4, r5, pc}
 801031a:	bf00      	nop
 801031c:	200047a8 	.word	0x200047a8

08010320 <_getpid_r>:
 8010320:	f7f2 ba52 	b.w	80027c8 <_getpid>

08010324 <_malloc_usable_size_r>:
 8010324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010328:	1f18      	subs	r0, r3, #4
 801032a:	2b00      	cmp	r3, #0
 801032c:	bfbc      	itt	lt
 801032e:	580b      	ldrlt	r3, [r1, r0]
 8010330:	18c0      	addlt	r0, r0, r3
 8010332:	4770      	bx	lr

08010334 <__swhatbuf_r>:
 8010334:	b570      	push	{r4, r5, r6, lr}
 8010336:	460c      	mov	r4, r1
 8010338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801033c:	2900      	cmp	r1, #0
 801033e:	b096      	sub	sp, #88	; 0x58
 8010340:	4615      	mov	r5, r2
 8010342:	461e      	mov	r6, r3
 8010344:	da0d      	bge.n	8010362 <__swhatbuf_r+0x2e>
 8010346:	89a3      	ldrh	r3, [r4, #12]
 8010348:	f013 0f80 	tst.w	r3, #128	; 0x80
 801034c:	f04f 0100 	mov.w	r1, #0
 8010350:	bf0c      	ite	eq
 8010352:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010356:	2340      	movne	r3, #64	; 0x40
 8010358:	2000      	movs	r0, #0
 801035a:	6031      	str	r1, [r6, #0]
 801035c:	602b      	str	r3, [r5, #0]
 801035e:	b016      	add	sp, #88	; 0x58
 8010360:	bd70      	pop	{r4, r5, r6, pc}
 8010362:	466a      	mov	r2, sp
 8010364:	f000 f848 	bl	80103f8 <_fstat_r>
 8010368:	2800      	cmp	r0, #0
 801036a:	dbec      	blt.n	8010346 <__swhatbuf_r+0x12>
 801036c:	9901      	ldr	r1, [sp, #4]
 801036e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010372:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010376:	4259      	negs	r1, r3
 8010378:	4159      	adcs	r1, r3
 801037a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801037e:	e7eb      	b.n	8010358 <__swhatbuf_r+0x24>

08010380 <__smakebuf_r>:
 8010380:	898b      	ldrh	r3, [r1, #12]
 8010382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010384:	079d      	lsls	r5, r3, #30
 8010386:	4606      	mov	r6, r0
 8010388:	460c      	mov	r4, r1
 801038a:	d507      	bpl.n	801039c <__smakebuf_r+0x1c>
 801038c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010390:	6023      	str	r3, [r4, #0]
 8010392:	6123      	str	r3, [r4, #16]
 8010394:	2301      	movs	r3, #1
 8010396:	6163      	str	r3, [r4, #20]
 8010398:	b002      	add	sp, #8
 801039a:	bd70      	pop	{r4, r5, r6, pc}
 801039c:	ab01      	add	r3, sp, #4
 801039e:	466a      	mov	r2, sp
 80103a0:	f7ff ffc8 	bl	8010334 <__swhatbuf_r>
 80103a4:	9900      	ldr	r1, [sp, #0]
 80103a6:	4605      	mov	r5, r0
 80103a8:	4630      	mov	r0, r6
 80103aa:	f7ff f8fb 	bl	800f5a4 <_malloc_r>
 80103ae:	b948      	cbnz	r0, 80103c4 <__smakebuf_r+0x44>
 80103b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103b4:	059a      	lsls	r2, r3, #22
 80103b6:	d4ef      	bmi.n	8010398 <__smakebuf_r+0x18>
 80103b8:	f023 0303 	bic.w	r3, r3, #3
 80103bc:	f043 0302 	orr.w	r3, r3, #2
 80103c0:	81a3      	strh	r3, [r4, #12]
 80103c2:	e7e3      	b.n	801038c <__smakebuf_r+0xc>
 80103c4:	89a3      	ldrh	r3, [r4, #12]
 80103c6:	6020      	str	r0, [r4, #0]
 80103c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103cc:	81a3      	strh	r3, [r4, #12]
 80103ce:	9b00      	ldr	r3, [sp, #0]
 80103d0:	6163      	str	r3, [r4, #20]
 80103d2:	9b01      	ldr	r3, [sp, #4]
 80103d4:	6120      	str	r0, [r4, #16]
 80103d6:	b15b      	cbz	r3, 80103f0 <__smakebuf_r+0x70>
 80103d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103dc:	4630      	mov	r0, r6
 80103de:	f000 f81d 	bl	801041c <_isatty_r>
 80103e2:	b128      	cbz	r0, 80103f0 <__smakebuf_r+0x70>
 80103e4:	89a3      	ldrh	r3, [r4, #12]
 80103e6:	f023 0303 	bic.w	r3, r3, #3
 80103ea:	f043 0301 	orr.w	r3, r3, #1
 80103ee:	81a3      	strh	r3, [r4, #12]
 80103f0:	89a3      	ldrh	r3, [r4, #12]
 80103f2:	431d      	orrs	r5, r3
 80103f4:	81a5      	strh	r5, [r4, #12]
 80103f6:	e7cf      	b.n	8010398 <__smakebuf_r+0x18>

080103f8 <_fstat_r>:
 80103f8:	b538      	push	{r3, r4, r5, lr}
 80103fa:	4d07      	ldr	r5, [pc, #28]	; (8010418 <_fstat_r+0x20>)
 80103fc:	2300      	movs	r3, #0
 80103fe:	4604      	mov	r4, r0
 8010400:	4608      	mov	r0, r1
 8010402:	4611      	mov	r1, r2
 8010404:	602b      	str	r3, [r5, #0]
 8010406:	f7f2 fa46 	bl	8002896 <_fstat>
 801040a:	1c43      	adds	r3, r0, #1
 801040c:	d102      	bne.n	8010414 <_fstat_r+0x1c>
 801040e:	682b      	ldr	r3, [r5, #0]
 8010410:	b103      	cbz	r3, 8010414 <_fstat_r+0x1c>
 8010412:	6023      	str	r3, [r4, #0]
 8010414:	bd38      	pop	{r3, r4, r5, pc}
 8010416:	bf00      	nop
 8010418:	200047a8 	.word	0x200047a8

0801041c <_isatty_r>:
 801041c:	b538      	push	{r3, r4, r5, lr}
 801041e:	4d06      	ldr	r5, [pc, #24]	; (8010438 <_isatty_r+0x1c>)
 8010420:	2300      	movs	r3, #0
 8010422:	4604      	mov	r4, r0
 8010424:	4608      	mov	r0, r1
 8010426:	602b      	str	r3, [r5, #0]
 8010428:	f7f2 fa45 	bl	80028b6 <_isatty>
 801042c:	1c43      	adds	r3, r0, #1
 801042e:	d102      	bne.n	8010436 <_isatty_r+0x1a>
 8010430:	682b      	ldr	r3, [r5, #0]
 8010432:	b103      	cbz	r3, 8010436 <_isatty_r+0x1a>
 8010434:	6023      	str	r3, [r4, #0]
 8010436:	bd38      	pop	{r3, r4, r5, pc}
 8010438:	200047a8 	.word	0x200047a8

0801043c <_init>:
 801043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801043e:	bf00      	nop
 8010440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010442:	bc08      	pop	{r3}
 8010444:	469e      	mov	lr, r3
 8010446:	4770      	bx	lr

08010448 <_fini>:
 8010448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801044a:	bf00      	nop
 801044c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801044e:	bc08      	pop	{r3}
 8010450:	469e      	mov	lr, r3
 8010452:	4770      	bx	lr
