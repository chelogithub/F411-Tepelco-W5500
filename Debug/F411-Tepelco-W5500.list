
F411-Tepelco-W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010480  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  08010620  08010620  00020620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f88  08010f88  000301b8  2**0
                  CONTENTS
  4 .ARM          00000008  08010f88  08010f88  00020f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f90  08010f90  000301b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f90  08010f90  00020f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010f94  08010f94  00020f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  08010f98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004618  200001b8  08011150  000301b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200047d0  08011150  000347d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001505d  00000000  00000000  0003022b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d89  00000000  00000000  00045288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00048018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e01  00000000  00000000  00049158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001858d  00000000  00000000  00049f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017849  00000000  00000000  000624e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093799  00000000  00000000  00079d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054cc  00000000  00000000  0010d4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00112994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001b8 	.word	0x200001b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010608 	.word	0x08010608

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001bc 	.word	0x200001bc
 80001dc:	08010608 	.word	0x08010608

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b08b      	sub	sp, #44	; 0x2c
 8000698:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5500 Environment-------------------------//
	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069a:	4bcf      	ldr	r3, [pc, #828]	; (80009d8 <main+0x344>)
 800069c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a0:	22c0      	movs	r2, #192	; 0xc0
 80006a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.GAR[1]=168;
 80006a6:	4bcc      	ldr	r3, [pc, #816]	; (80009d8 <main+0x344>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	22a8      	movs	r2, #168	; 0xa8
 80006ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.GAR[2]=0;
 80006b2:	4bc9      	ldr	r3, [pc, #804]	; (80009d8 <main+0x344>)
 80006b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.GAR[3]=1;
 80006be:	4bc6      	ldr	r3, [pc, #792]	; (80009d8 <main+0x344>)
 80006c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c4:	2201      	movs	r2, #1
 80006c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006ca:	4bc3      	ldr	r3, [pc, #780]	; (80009d8 <main+0x344>)
 80006cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d0:	22ff      	movs	r2, #255	; 0xff
 80006d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SUBR[1]=255;
 80006d6:	4bc0      	ldr	r3, [pc, #768]	; (80009d8 <main+0x344>)
 80006d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006dc:	22ff      	movs	r2, #255	; 0xff
 80006de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		ETH.SUBR[2]=255;
 80006e2:	4bbd      	ldr	r3, [pc, #756]	; (80009d8 <main+0x344>)
 80006e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e8:	22ff      	movs	r2, #255	; 0xff
 80006ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SUBR[3]=0;
 80006ee:	4bba      	ldr	r3, [pc, #744]	; (80009d8 <main+0x344>)
 80006f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006fa:	4bb7      	ldr	r3, [pc, #732]	; (80009d8 <main+0x344>)
 80006fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000700:	2200      	movs	r2, #0
 8000702:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SHAR[1]=0x08;
 8000706:	4bb4      	ldr	r3, [pc, #720]	; (80009d8 <main+0x344>)
 8000708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800070c:	2208      	movs	r2, #8
 800070e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		ETH.SHAR[2]=0xDC;
 8000712:	4bb1      	ldr	r3, [pc, #708]	; (80009d8 <main+0x344>)
 8000714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000718:	22dc      	movs	r2, #220	; 0xdc
 800071a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		ETH.SHAR[3]=0x00;
 800071e:	4bae      	ldr	r3, [pc, #696]	; (80009d8 <main+0x344>)
 8000720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000724:	2200      	movs	r2, #0
 8000726:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		ETH.SHAR[4]=0xC0;
 800072a:	4bab      	ldr	r3, [pc, #684]	; (80009d8 <main+0x344>)
 800072c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000730:	22c0      	movs	r2, #192	; 0xc0
 8000732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		ETH.SHAR[5]=0x03;
 8000736:	4ba8      	ldr	r3, [pc, #672]	; (80009d8 <main+0x344>)
 8000738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800073c:	2203      	movs	r2, #3
 800073e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 8000742:	4ba5      	ldr	r3, [pc, #660]	; (80009d8 <main+0x344>)
 8000744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000748:	22c0      	movs	r2, #192	; 0xc0
 800074a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		ETH.SIPR[1]=168;
 800074e:	4ba2      	ldr	r3, [pc, #648]	; (80009d8 <main+0x344>)
 8000750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000754:	22a8      	movs	r2, #168	; 0xa8
 8000756:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		ETH.SIPR[2]=0;
 800075a:	4b9f      	ldr	r3, [pc, #636]	; (80009d8 <main+0x344>)
 800075c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		ETH.SIPR[3]=34,//ETH.SIPR[3]=34,
 8000766:	4b9c      	ldr	r3, [pc, #624]	; (80009d8 <main+0x344>)
 8000768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800076c:	2222      	movs	r2, #34	; 0x22
 800076e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	//  Socket RX memory
		ETH.RMSR=0x55;
 8000772:	4b99      	ldr	r3, [pc, #612]	; (80009d8 <main+0x344>)
 8000774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000778:	2255      	movs	r2, #85	; 0x55
 800077a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	//  Socket TX memory
		ETH.TMSR=0x55;
 800077e:	4b96      	ldr	r3, [pc, #600]	; (80009d8 <main+0x344>)
 8000780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000784:	2255      	movs	r2, #85	; 0x55
 8000786:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	//  S0 Port Number
		ETH.S_PORT[0]=0x01; //01
 800078a:	4b93      	ldr	r3, [pc, #588]	; (80009d8 <main+0x344>)
 800078c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000790:	2201      	movs	r2, #1
 8000792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		ETH.S_PORT[1]=0xF6; //f6
 8000796:	4b90      	ldr	r3, [pc, #576]	; (80009d8 <main+0x344>)
 8000798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800079c:	22f6      	movs	r2, #246	; 0xf6
 800079e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	//	S0 Client IP ADDRESS
		ETH.S_DIPR[0]=192;
 80007a2:	4b8d      	ldr	r3, [pc, #564]	; (80009d8 <main+0x344>)
 80007a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a8:	22c0      	movs	r2, #192	; 0xc0
 80007aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		ETH.S_DIPR[1]=168;
 80007ae:	4b8a      	ldr	r3, [pc, #552]	; (80009d8 <main+0x344>)
 80007b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007b4:	22a8      	movs	r2, #168	; 0xa8
 80007b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		ETH.S_DIPR[2]=0;
 80007ba:	4b87      	ldr	r3, [pc, #540]	; (80009d8 <main+0x344>)
 80007bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		ETH.S_DIPR[3]=3;
 80007c6:	4b84      	ldr	r3, [pc, #528]	; (80009d8 <main+0x344>)
 80007c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007cc:	2203      	movs	r2, #3
 80007ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	//	S0 Client IP ADDRESS
		ETH.S_DPORT[0]=0x01;
 80007d2:	4b81      	ldr	r3, [pc, #516]	; (80009d8 <main+0x344>)
 80007d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d8:	2201      	movs	r2, #1
 80007da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		ETH.S_DPORT[1]=0xF6;
 80007de:	4b7e      	ldr	r3, [pc, #504]	; (80009d8 <main+0x344>)
 80007e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007e4:	22f6      	movs	r2, #246	; 0xf6
 80007e6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

		ETH.gS_RX_BASE = 0x0000;
 80007ea:	4b7b      	ldr	r3, [pc, #492]	; (80009d8 <main+0x344>)
 80007ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f0:	2200      	movs	r2, #0
 80007f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS_RX_MASK = 0x07FF;
 80007f6:	4b78      	ldr	r3, [pc, #480]	; (80009d8 <main+0x344>)
 80007f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007fc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000800:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS1_RX_BASE = 0x6800;
 8000804:	4b74      	ldr	r3, [pc, #464]	; (80009d8 <main+0x344>)
 8000806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800080a:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800080e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS1_RX_MASK = 0x07FF;
 8000812:	4b71      	ldr	r3, [pc, #452]	; (80009d8 <main+0x344>)
 8000814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000818:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800081c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS2_RX_BASE = 0x7000;
 8000820:	4b6d      	ldr	r3, [pc, #436]	; (80009d8 <main+0x344>)
 8000822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000826:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800082a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS2_RX_MASK = 0x07FF;
 800082e:	4b6a      	ldr	r3, [pc, #424]	; (80009d8 <main+0x344>)
 8000830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000834:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000838:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS3_RX_BASE = 0x7800;
 800083c:	4b66      	ldr	r3, [pc, #408]	; (80009d8 <main+0x344>)
 800083e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000842:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000846:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS3_RX_MASK = 0x07FF;
 800084a:	4b63      	ldr	r3, [pc, #396]	; (80009d8 <main+0x344>)
 800084c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000850:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000854:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS_TX_BASE = 0x0000;
 8000858:	4b5f      	ldr	r3, [pc, #380]	; (80009d8 <main+0x344>)
 800085a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085e:	2200      	movs	r2, #0
 8000860:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS_TX_MASK = 0x07FF;
 8000864:	4b5c      	ldr	r3, [pc, #368]	; (80009d8 <main+0x344>)
 8000866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800086a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS1_TX_BASE = 0x4800;
 8000872:	4b59      	ldr	r3, [pc, #356]	; (80009d8 <main+0x344>)
 8000874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000878:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		ETH.gS1_TX_MASK = 0x07FF;
 8000880:	4b55      	ldr	r3, [pc, #340]	; (80009d8 <main+0x344>)
 8000882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000886:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800088a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		ETH.gS2_TX_BASE = 0x5000;
 800088e:	4b52      	ldr	r3, [pc, #328]	; (80009d8 <main+0x344>)
 8000890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000894:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000898:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		ETH.gS2_TX_MASK = 0x07FF;
 800089c:	4b4e      	ldr	r3, [pc, #312]	; (80009d8 <main+0x344>)
 800089e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		ETH.gS3_TX_BASE = 0x5800;
 80008aa:	4b4b      	ldr	r3, [pc, #300]	; (80009d8 <main+0x344>)
 80008ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b0:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b4:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		ETH.gS3_TX_MASK = 0x07FF;
 80008b8:	4b47      	ldr	r3, [pc, #284]	; (80009d8 <main+0x344>)
 80008ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

		ETH.S_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c6:	4b44      	ldr	r3, [pc, #272]	; (80009d8 <main+0x344>)
 80008c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

		spi_no_debug=1;
 80008d2:	4b42      	ldr	r3, [pc, #264]	; (80009dc <main+0x348>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80008d8:	4b3f      	ldr	r3, [pc, #252]	; (80009d8 <main+0x344>)
 80008da:	4a41      	ldr	r2, [pc, #260]	; (80009e0 <main+0x34c>)
 80008dc:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80008de:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <main+0x344>)
 80008e0:	2210      	movs	r2, #16
 80008e2:	811a      	strh	r2, [r3, #8]
		ETH.RST_PORT=GPIOB;
 80008e4:	4b3c      	ldr	r3, [pc, #240]	; (80009d8 <main+0x344>)
 80008e6:	4a3f      	ldr	r2, [pc, #252]	; (80009e4 <main+0x350>)
 80008e8:	60da      	str	r2, [r3, #12]
		ETH.RST_PIN=GPIO_PIN_0;
 80008ea:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <main+0x344>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	821a      	strh	r2, [r3, #16]
		ETH.SPI= &hspi1;
 80008f0:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <main+0x344>)
 80008f2:	4a3d      	ldr	r2, [pc, #244]	; (80009e8 <main+0x354>)
 80008f4:	601a      	str	r2, [r3, #0]
	  //----------------------- ETHERNET W5500 Environment-------------------------//
	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008f6:	483d      	ldr	r0, [pc, #244]	; (80009ec <main+0x358>)
 80008f8:	f005 ff32 	bl	8006760 <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008fc:	493c      	ldr	r1, [pc, #240]	; (80009f0 <main+0x35c>)
 80008fe:	483d      	ldr	r0, [pc, #244]	; (80009f4 <main+0x360>)
 8000900:	f00e fe9c 	bl	800f63c <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 8000904:	493c      	ldr	r1, [pc, #240]	; (80009f8 <main+0x364>)
 8000906:	483d      	ldr	r0, [pc, #244]	; (80009fc <main+0x368>)
 8000908:	f00e fe98 	bl	800f63c <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 800090c:	493c      	ldr	r1, [pc, #240]	; (8000a00 <main+0x36c>)
 800090e:	483d      	ldr	r0, [pc, #244]	; (8000a04 <main+0x370>)
 8000910:	f00e fe94 	bl	800f63c <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 8000914:	493c      	ldr	r1, [pc, #240]	; (8000a08 <main+0x374>)
 8000916:	483d      	ldr	r0, [pc, #244]	; (8000a0c <main+0x378>)
 8000918:	f00e fe90 	bl	800f63c <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 800091c:	493c      	ldr	r1, [pc, #240]	; (8000a10 <main+0x37c>)
 800091e:	483d      	ldr	r0, [pc, #244]	; (8000a14 <main+0x380>)
 8000920:	f00e fe8c 	bl	800f63c <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 8000924:	493c      	ldr	r1, [pc, #240]	; (8000a18 <main+0x384>)
 8000926:	483d      	ldr	r0, [pc, #244]	; (8000a1c <main+0x388>)
 8000928:	f00e fe88 	bl	800f63c <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 800092c:	493c      	ldr	r1, [pc, #240]	; (8000a20 <main+0x38c>)
 800092e:	483d      	ldr	r0, [pc, #244]	; (8000a24 <main+0x390>)
 8000930:	f00e fe84 	bl	800f63c <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 8000934:	493c      	ldr	r1, [pc, #240]	; (8000a28 <main+0x394>)
 8000936:	483d      	ldr	r0, [pc, #244]	; (8000a2c <main+0x398>)
 8000938:	f00e fe80 	bl	800f63c <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 800093c:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <main+0x358>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000944:	4b29      	ldr	r3, [pc, #164]	; (80009ec <main+0x358>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <main+0x358>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 8000954:	4b25      	ldr	r3, [pc, #148]	; (80009ec <main+0x358>)
 8000956:	2200      	movs	r2, #0
 8000958:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 800095c:	4b23      	ldr	r3, [pc, #140]	; (80009ec <main+0x358>)
 800095e:	2200      	movs	r2, #0
 8000960:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <main+0x358>)
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <main+0x358>)
 800096e:	2206      	movs	r2, #6
 8000970:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <main+0x358>)
 8000976:	2201      	movs	r2, #1
 8000978:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <main+0x358>)
 800097e:	2203      	movs	r2, #3
 8000980:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <main+0x358>)
 8000986:	2200      	movs	r2, #0
 8000988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <main+0x358>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <main+0x358>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <main+0x358>)
 800099e:	220a      	movs	r2, #10
 80009a0:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <main+0x358>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <main+0x358>)
 80009ae:	2233      	movs	r2, #51	; 0x33
 80009b0:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <main+0x358>)
 80009b6:	2234      	movs	r2, #52	; 0x34
 80009b8:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <main+0x358>)
 80009be:	2235      	movs	r2, #53	; 0x35
 80009c0:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <main+0x358>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <main+0x358>)
 80009ce:	2264      	movs	r2, #100	; 0x64
 80009d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80009d4:	e02c      	b.n	8000a30 <main+0x39c>
 80009d6:	bf00      	nop
 80009d8:	20000304 	.word	0x20000304
 80009dc:	20004218 	.word	0x20004218
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020400 	.word	0x40020400
 80009e8:	200001d4 	.word	0x200001d4
 80009ec:	200023d4 	.word	0x200023d4
 80009f0:	20000044 	.word	0x20000044
 80009f4:	200023da 	.word	0x200023da
 80009f8:	2000004c 	.word	0x2000004c
 80009fc:	200023fa 	.word	0x200023fa
 8000a00:	20000058 	.word	0x20000058
 8000a04:	2000240a 	.word	0x2000240a
 8000a08:	20000068 	.word	0x20000068
 8000a0c:	2000241a 	.word	0x2000241a
 8000a10:	20000070 	.word	0x20000070
 8000a14:	20002420 	.word	0x20002420
 8000a18:	20000080 	.word	0x20000080
 8000a1c:	20002436 	.word	0x20002436
 8000a20:	20000090 	.word	0x20000090
 8000a24:	20002446 	.word	0x20002446
 8000a28:	200000a0 	.word	0x200000a0
 8000a2c:	20002430 	.word	0x20002430
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 8000a30:	4bb6      	ldr	r3, [pc, #728]	; (8000d0c <main+0x678>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._DBG_EN=1;
 8000a38:	4bb4      	ldr	r3, [pc, #720]	; (8000d0c <main+0x678>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f8c3 2d50 	str.w	r2, [r3, #3408]	; 0xd50
		wf._NO_IP=1;
 8000a40:	4bb2      	ldr	r3, [pc, #712]	; (8000d0c <main+0x678>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
		wf.RESET_PORT=GPIOA;
 8000a48:	4bb0      	ldr	r3, [pc, #704]	; (8000d0c <main+0x678>)
 8000a4a:	4ab1      	ldr	r2, [pc, #708]	; (8000d10 <main+0x67c>)
 8000a4c:	601a      	str	r2, [r3, #0]
		wf.RESET_PIN=GPIO_PIN_8;
 8000a4e:	4baf      	ldr	r3, [pc, #700]	; (8000d0c <main+0x678>)
 8000a50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a54:	809a      	strh	r2, [r3, #4]
	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//
		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a56:	48af      	ldr	r0, [pc, #700]	; (8000d14 <main+0x680>)
 8000a58:	f00b f840 	bl	800badc <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a5c:	4bad      	ldr	r3, [pc, #692]	; (8000d14 <main+0x680>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	711a      	strb	r2, [r3, #4]
		ModBUS_Config(&mb_wf);		//WIFI como servidor TCP, recibe comadno ModBUS
 8000a62:	48ad      	ldr	r0, [pc, #692]	; (8000d18 <main+0x684>)
 8000a64:	f00b f83a 	bl	800badc <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a68:	4bab      	ldr	r3, [pc, #684]	; (8000d18 <main+0x684>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	711a      	strb	r2, [r3, #4]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a6e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a72:	2103      	movs	r1, #3
 8000a74:	48a8      	ldr	r0, [pc, #672]	; (8000d18 <main+0x684>)
 8000a76:	f00b f8d4 	bl	800bc22 <ModBUS_F03_Assign>
		pos_decimal[0]=1;
 8000a7a:	4ba8      	ldr	r3, [pc, #672]	; (8000d1c <main+0x688>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
		pos_decimal[1]=1;
 8000a80:	4ba6      	ldr	r3, [pc, #664]	; (8000d1c <main+0x688>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	705a      	strb	r2, [r3, #1]
		pos_decimal[2]=1;
 8000a86:	4ba5      	ldr	r3, [pc, #660]	; (8000d1c <main+0x688>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	709a      	strb	r2, [r3, #2]
		pos_decimal[3]=1;
 8000a8c:	4ba3      	ldr	r3, [pc, #652]	; (8000d1c <main+0x688>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	70da      	strb	r2, [r3, #3]
		pos_decimal[4]=1;
 8000a92:	4ba2      	ldr	r3, [pc, #648]	; (8000d1c <main+0x688>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	711a      	strb	r2, [r3, #4]
		pos_decimal[5]=1;
 8000a98:	4ba0      	ldr	r3, [pc, #640]	; (8000d1c <main+0x688>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	715a      	strb	r2, [r3, #5]
		pos_decimal[6]=1;
 8000a9e:	4b9f      	ldr	r3, [pc, #636]	; (8000d1c <main+0x688>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	719a      	strb	r2, [r3, #6]
		pos_decimal[7]=1;
 8000aa4:	4b9d      	ldr	r3, [pc, #628]	; (8000d1c <main+0x688>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	71da      	strb	r2, [r3, #7]
		pos_decimal[8]=1;
 8000aaa:	4b9c      	ldr	r3, [pc, #624]	; (8000d1c <main+0x688>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	721a      	strb	r2, [r3, #8]
		pos_decimal[9]=1;
 8000ab0:	4b9a      	ldr	r3, [pc, #616]	; (8000d1c <main+0x688>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	725a      	strb	r2, [r3, #9]
		pos_decimal[10]=1;
 8000ab6:	4b99      	ldr	r3, [pc, #612]	; (8000d1c <main+0x688>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	729a      	strb	r2, [r3, #10]
		pos_decimal[11]=1;
 8000abc:	4b97      	ldr	r3, [pc, #604]	; (8000d1c <main+0x688>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	72da      	strb	r2, [r3, #11]
		pos_decimal[12]=1;
 8000ac2:	4b96      	ldr	r3, [pc, #600]	; (8000d1c <main+0x688>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	731a      	strb	r2, [r3, #12]
		pos_decimal[13]=1;
 8000ac8:	4b94      	ldr	r3, [pc, #592]	; (8000d1c <main+0x688>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	735a      	strb	r2, [r3, #13]
		pos_decimal[14]=1;
 8000ace:	4b93      	ldr	r3, [pc, #588]	; (8000d1c <main+0x688>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	739a      	strb	r2, [r3, #14]
		pos_decimal[15]=1;
 8000ad4:	4b91      	ldr	r3, [pc, #580]	; (8000d1c <main+0x688>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	73da      	strb	r2, [r3, #15]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ada:	f001 ffb1 	bl	8002a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ade:	f000 faf9 	bl	80010d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000ae2:	4b8f      	ldr	r3, [pc, #572]	; (8000d20 <main+0x68c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a8f      	ldr	r2, [pc, #572]	; (8000d24 <main+0x690>)
 8000ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8000aec:	099b      	lsrs	r3, r3, #6
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fd86 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af4:	f000 fc5a 	bl	80013ac <MX_GPIO_Init>
  MX_SPI1_Init();
 8000af8:	f000 fb54 	bl	80011a4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000afc:	f000 fb88 	bl	8001210 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b00:	f000 fc00 	bl	8001304 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b04:	f000 fc28 	bl	8001358 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

     ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000b08:	210e      	movs	r1, #14
 8000b0a:	4887      	ldr	r0, [pc, #540]	; (8000d28 <main+0x694>)
 8000b0c:	f000 fcf4 	bl	80014f8 <ITM0_Write>
     HAL_UART_Transmit_IT(&huart2,"\r\n INICIO OK \r\n",strlen("\r\n INICIO OK \r\n"));
 8000b10:	220f      	movs	r2, #15
 8000b12:	4986      	ldr	r1, [pc, #536]	; (8000d2c <main+0x698>)
 8000b14:	4886      	ldr	r0, [pc, #536]	; (8000d30 <main+0x69c>)
 8000b16:	f004 fd4b 	bl	80055b0 <HAL_UART_Transmit_IT>
	 HW_RESET(&wf);
 8000b1a:	487c      	ldr	r0, [pc, #496]	; (8000d0c <main+0x678>)
 8000b1c:	f005 fd1c 	bl	8006558 <HW_RESET>
	 if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000b20:	4b7a      	ldr	r3, [pc, #488]	; (8000d0c <main+0x678>)
 8000b22:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <main+0x49e>
 8000b2a:	2113      	movs	r1, #19
 8000b2c:	4881      	ldr	r0, [pc, #516]	; (8000d34 <main+0x6a0>)
 8000b2e:	f000 fce3 	bl	80014f8 <ITM0_Write>
	 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000b32:	2201      	movs	r2, #1
 8000b34:	4980      	ldr	r1, [pc, #512]	; (8000d38 <main+0x6a4>)
 8000b36:	4881      	ldr	r0, [pc, #516]	; (8000d3c <main+0x6a8>)
 8000b38:	f004 fd7f 	bl	800563a <HAL_UART_Receive_IT>
	 if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5500 \r\n",strlen("\r\n SET-UP W5500 \r\n"));
 8000b3c:	4b80      	ldr	r3, [pc, #512]	; (8000d40 <main+0x6ac>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d003      	beq.n	8000b4c <main+0x4b8>
 8000b44:	2112      	movs	r1, #18
 8000b46:	487f      	ldr	r0, [pc, #508]	; (8000d44 <main+0x6b0>)
 8000b48:	f000 fcd6 	bl	80014f8 <ITM0_Write>


     SPI_ETH_PHY_RESET(&ETH);
 8000b4c:	487e      	ldr	r0, [pc, #504]	; (8000d48 <main+0x6b4>)
 8000b4e:	f00c fb21 	bl	800d194 <SPI_ETH_PHY_RESET>
     HAL_Delay(800);
 8000b52:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000b56:	f001 ffe5 	bl	8002b24 <HAL_Delay>
     eth_init(&ETH);
 8000b5a:	487b      	ldr	r0, [pc, #492]	; (8000d48 <main+0x6b4>)
 8000b5c:	f00c fd04 	bl	800d568 <eth_init>
     SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b60:	4979      	ldr	r1, [pc, #484]	; (8000d48 <main+0x6b4>)
 8000b62:	487a      	ldr	r0, [pc, #488]	; (8000d4c <main+0x6b8>)
 8000b64:	f00d f885 	bl	800dc72 <SPI_ETH_SNIFF>
     HAL_Delay(800);
 8000b68:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000b6c:	f001 ffda 	bl	8002b24 <HAL_Delay>
   	 eth_socket_init(&ETH,S0_REG);
 8000b70:	2101      	movs	r1, #1
 8000b72:	4875      	ldr	r0, [pc, #468]	; (8000d48 <main+0x6b4>)
 8000b74:	f00c fdca 	bl	800d70c <eth_socket_init>
   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b78:	4973      	ldr	r1, [pc, #460]	; (8000d48 <main+0x6b4>)
 8000b7a:	4874      	ldr	r0, [pc, #464]	; (8000d4c <main+0x6b8>)
 8000b7c:	f00d f879 	bl	800dc72 <SPI_ETH_SNIFF>
	 uint16_t b=0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	81bb      	strh	r3, [r7, #12]
	 uint8_t spi_Data[2];
	 b = SPI_ETH_REG(&ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 8000b84:	2302      	movs	r3, #2
 8000b86:	9301      	str	r3, [sp, #4]
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	2300      	movs	r3, #0
 8000b90:	2201      	movs	r2, #1
 8000b92:	2124      	movs	r1, #36	; 0x24
 8000b94:	486c      	ldr	r0, [pc, #432]	; (8000d48 <main+0x6b4>)
 8000b96:	f00c fb54 	bl	800d242 <SPI_ETH_REG>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	81bb      	strh	r3, [r7, #12]
	 eth_wr_SOCKET_MODE(&ETH,S0_REG,MODE_TCP);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	4869      	ldr	r0, [pc, #420]	; (8000d48 <main+0x6b4>)
 8000ba4:	f00c fcbe 	bl	800d524 <eth_wr_SOCKET_MODE>
   	 SPI_ETH_REG(&ETH, S_DIPR, S0_REG,SPI_WRITE, ETH.S_DIPR,4);									// client
 8000ba8:	2304      	movs	r3, #4
 8000baa:	9301      	str	r3, [sp, #4]
 8000bac:	4b68      	ldr	r3, [pc, #416]	; (8000d50 <main+0x6bc>)
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	210c      	movs	r1, #12
 8000bb6:	4864      	ldr	r0, [pc, #400]	; (8000d48 <main+0x6b4>)
 8000bb8:	f00c fb43 	bl	800d242 <SPI_ETH_REG>
   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 8000bbc:	212e      	movs	r1, #46	; 0x2e
 8000bbe:	4865      	ldr	r0, [pc, #404]	; (8000d54 <main+0x6c0>)
 8000bc0:	f000 fc9a 	bl	80014f8 <ITM0_Write>
   	 SPI_ETH_REG(&ETH, S_DPORT, S0_REG,SPI_WRITE, ETH.S_DPORT,2);									// client
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	9301      	str	r3, [sp, #4]
 8000bc8:	4b63      	ldr	r3, [pc, #396]	; (8000d58 <main+0x6c4>)
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2110      	movs	r1, #16
 8000bd2:	485d      	ldr	r0, [pc, #372]	; (8000d48 <main+0x6b4>)
 8000bd4:	f00c fb35 	bl	800d242 <SPI_ETH_REG>
   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 8000bd8:	2120      	movs	r1, #32
 8000bda:	4860      	ldr	r0, [pc, #384]	; (8000d5c <main+0x6c8>)
 8000bdc:	f000 fc8c 	bl	80014f8 <ITM0_Write>
   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000be0:	4959      	ldr	r1, [pc, #356]	; (8000d48 <main+0x6b4>)
 8000be2:	485a      	ldr	r0, [pc, #360]	; (8000d4c <main+0x6b8>)
 8000be4:	f00d f845 	bl	800dc72 <SPI_ETH_SNIFF>
   	 eth_wr_SOCKET_CMD(&ETH, S0_REG,OPEN );
 8000be8:	2201      	movs	r2, #1
 8000bea:	2101      	movs	r1, #1
 8000bec:	4856      	ldr	r0, [pc, #344]	; (8000d48 <main+0x6b4>)
 8000bee:	f00c fc77 	bl	800d4e0 <eth_wr_SOCKET_CMD>

   	 HAL_Delay(1000);
 8000bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf6:	f001 ff95 	bl	8002b24 <HAL_Delay>
   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000bfa:	4953      	ldr	r1, [pc, #332]	; (8000d48 <main+0x6b4>)
 8000bfc:	4853      	ldr	r0, [pc, #332]	; (8000d4c <main+0x6b8>)
 8000bfe:	f00d f838 	bl	800dc72 <SPI_ETH_SNIFF>

	 //SPI_READ_EN=1;
   	 //------------------------ RUN ESP -----------------------------------//
     if(ESP8266_HW_Init(&huart1)==1)
 8000c02:	484e      	ldr	r0, [pc, #312]	; (8000d3c <main+0x6a8>)
 8000c04:	f001 fbca 	bl	800239c <ESP8266_HW_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d111      	bne.n	8000c32 <main+0x59e>
     {
		  ESP_HW_Init=1;
 8000c0e:	4b54      	ldr	r3, [pc, #336]	; (8000d60 <main+0x6cc>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000c14:	4b3d      	ldr	r3, [pc, #244]	; (8000d0c <main+0x678>)
 8000c16:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <main+0x592>
 8000c1e:	2113      	movs	r1, #19
 8000c20:	4850      	ldr	r0, [pc, #320]	; (8000d64 <main+0x6d0>)
 8000c22:	f000 fc69 	bl	80014f8 <ITM0_Write>
		  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000c26:	2213      	movs	r2, #19
 8000c28:	494e      	ldr	r1, [pc, #312]	; (8000d64 <main+0x6d0>)
 8000c2a:	4841      	ldr	r0, [pc, #260]	; (8000d30 <main+0x69c>)
 8000c2c:	f004 fcc0 	bl	80055b0 <HAL_UART_Transmit_IT>
 8000c30:	e02e      	b.n	8000c90 <main+0x5fc>
     }
     else
     {

    	 HW_RESET(&wf);
 8000c32:	4836      	ldr	r0, [pc, #216]	; (8000d0c <main+0x678>)
 8000c34:	f005 fc90 	bl	8006558 <HW_RESET>
		 ESP_REinit=0;
 8000c38:	4b4b      	ldr	r3, [pc, #300]	; (8000d68 <main+0x6d4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
			  if(ESP8266_HW_Init(&huart1)==1)
 8000c3e:	483f      	ldr	r0, [pc, #252]	; (8000d3c <main+0x6a8>)
 8000c40:	f001 fbac 	bl	800239c <ESP8266_HW_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d111      	bne.n	8000c6e <main+0x5da>
				  {
					  ESP_HW_Init=1;
 8000c4a:	4b45      	ldr	r3, [pc, #276]	; (8000d60 <main+0x6cc>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
					  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000c50:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <main+0x678>)
 8000c52:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <main+0x5ce>
 8000c5a:	2113      	movs	r1, #19
 8000c5c:	4841      	ldr	r0, [pc, #260]	; (8000d64 <main+0x6d0>)
 8000c5e:	f000 fc4b 	bl	80014f8 <ITM0_Write>
					  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init2 OK\r\n",strlen("\r\n ESP HW Init2 OK\r\n"));
 8000c62:	2214      	movs	r2, #20
 8000c64:	4941      	ldr	r1, [pc, #260]	; (8000d6c <main+0x6d8>)
 8000c66:	4832      	ldr	r0, [pc, #200]	; (8000d30 <main+0x69c>)
 8000c68:	f004 fca2 	bl	80055b0 <HAL_UART_Transmit_IT>
 8000c6c:	e010      	b.n	8000c90 <main+0x5fc>
				  }
				  else
				  {
					  ESP_HW_Init=0;
 8000c6e:	4b3c      	ldr	r3, [pc, #240]	; (8000d60 <main+0x6cc>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
					  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000c74:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <main+0x678>)
 8000c76:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <main+0x5f2>
 8000c7e:	2115      	movs	r1, #21
 8000c80:	483b      	ldr	r0, [pc, #236]	; (8000d70 <main+0x6dc>)
 8000c82:	f000 fc39 	bl	80014f8 <ITM0_Write>
					  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Fail\r\n",strlen("\r\n ESP HW Fail\r\n"));
 8000c86:	2210      	movs	r2, #16
 8000c88:	493a      	ldr	r1, [pc, #232]	; (8000d74 <main+0x6e0>)
 8000c8a:	4829      	ldr	r0, [pc, #164]	; (8000d30 <main+0x69c>)
 8000c8c:	f004 fc90 	bl	80055b0 <HAL_UART_Transmit_IT>
				  }
     }
     //------------------------ RUN ESP -----------------------------------//

     HAL_Delay(1000);
 8000c90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c94:	f001 ff46 	bl	8002b24 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 SPI_READ_EN=1;
 8000c98:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <main+0x6e4>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]





		  	  if (ESP_HW_Init==1)
 8000c9e:	4b30      	ldr	r3, [pc, #192]	; (8000d60 <main+0x6cc>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	f040 80bc 	bne.w	8000e20 <main+0x78c>
		  	  {
		  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S_data_available))
 8000ca8:	4b34      	ldr	r3, [pc, #208]	; (8000d7c <main+0x6e8>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	f040 80b7 	bne.w	8000e20 <main+0x78c>
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <main+0x678>)
 8000cb4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f040 80b1 	bne.w	8000e20 <main+0x78c>
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <main+0x678>)
 8000cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cc4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000cc8:	f340 80aa 	ble.w	8000e20 <main+0x78c>
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <main+0x6b4>)
 8000cce:	7e9b      	ldrb	r3, [r3, #26]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f000 80a5 	beq.w	8000e20 <main+0x78c>
		  			{	ETH.S_data_available=0;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <main+0x6b4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	769a      	strb	r2, [r3, #26]
		  				wf_snd_flag_ticks=0;
 8000cdc:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <main+0x6ec>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
		  				WF_SND_FLAG=0;
 8000ce2:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <main+0x6e8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
		  				HAL_UART_Transmit_IT(&huart2,"\r\n ENTER TO SEND DATA \r\n",strlen("\r\n ENTER TO SEND DATA \r\n"));
 8000ce8:	2218      	movs	r2, #24
 8000cea:	4926      	ldr	r1, [pc, #152]	; (8000d84 <main+0x6f0>)
 8000cec:	4810      	ldr	r0, [pc, #64]	; (8000d30 <main+0x69c>)
 8000cee:	f004 fc5f 	bl	80055b0 <HAL_UART_Transmit_IT>
		  				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000cf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf6:	4824      	ldr	r0, [pc, #144]	; (8000d88 <main+0x6f4>)
 8000cf8:	f002 fb8f 	bl	800341a <HAL_GPIO_TogglePin>
		  				ITM0_Write("\r\n#RED#WF-SE GENERA INFO Y ENVIA\r\n",strlen("\r\n#RED#WF-SE GENERA INFO Y ENVIA\r\n"));
 8000cfc:	2122      	movs	r1, #34	; 0x22
 8000cfe:	4823      	ldr	r0, [pc, #140]	; (8000d8c <main+0x6f8>)
 8000d00:	f000 fbfa 	bl	80014f8 <ITM0_Write>

		  				for(uint8_t i=0;i<=16;i++)
 8000d04:	2300      	movs	r3, #0
 8000d06:	73fb      	strb	r3, [r7, #15]
 8000d08:	e050      	b.n	8000dac <main+0x718>
 8000d0a:	bf00      	nop
 8000d0c:	200023d4 	.word	0x200023d4
 8000d10:	40020000 	.word	0x40020000
 8000d14:	20003128 	.word	0x20003128
 8000d18:	20003778 	.word	0x20003778
 8000d1c:	2000421c 	.word	0x2000421c
 8000d20:	200000a4 	.word	0x200000a4
 8000d24:	10624dd3 	.word	0x10624dd3
 8000d28:	08010620 	.word	0x08010620
 8000d2c:	08010630 	.word	0x08010630
 8000d30:	200002b8 	.word	0x200002b8
 8000d34:	08010640 	.word	0x08010640
 8000d38:	20004644 	.word	0x20004644
 8000d3c:	20000274 	.word	0x20000274
 8000d40:	200041c8 	.word	0x200041c8
 8000d44:	08010654 	.word	0x08010654
 8000d48:	20000304 	.word	0x20000304
 8000d4c:	20001378 	.word	0x20001378
 8000d50:	20001348 	.word	0x20001348
 8000d54:	08010668 	.word	0x08010668
 8000d58:	2000134c 	.word	0x2000134c
 8000d5c:	08010698 	.word	0x08010698
 8000d60:	2000422e 	.word	0x2000422e
 8000d64:	080106bc 	.word	0x080106bc
 8000d68:	2000422c 	.word	0x2000422c
 8000d6c:	080106d0 	.word	0x080106d0
 8000d70:	080106e8 	.word	0x080106e8
 8000d74:	08010700 	.word	0x08010700
 8000d78:	2000423c 	.word	0x2000423c
 8000d7c:	200041c9 	.word	0x200041c9
 8000d80:	200041cc 	.word	0x200041cc
 8000d84:	08010714 	.word	0x08010714
 8000d88:	40020800 	.word	0x40020800
 8000d8c:	08010730 	.word	0x08010730
		  				{
		  					datos[i]=ModBUS_F03_Read(&mb_eth,i);
 8000d90:	7bfc      	ldrb	r4, [r7, #15]
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	4619      	mov	r1, r3
 8000d96:	48a8      	ldr	r0, [pc, #672]	; (8001038 <main+0x9a4>)
 8000d98:	f00a ff71 	bl	800bc7e <ModBUS_F03_Read>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4ba6      	ldr	r3, [pc, #664]	; (800103c <main+0x9a8>)
 8000da2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		  				for(uint8_t i=0;i<=16;i++)
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	3301      	adds	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	2b10      	cmp	r3, #16
 8000db0:	d9ee      	bls.n	8000d90 <main+0x6fc>
		  				}

		  				if(httpPOST2(ENDPOINT, SERVER_IP,PORT,&datos,&pos_decimal,16,TEST_2,post, body, 512))
 8000db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db6:	9305      	str	r3, [sp, #20]
 8000db8:	4ba1      	ldr	r3, [pc, #644]	; (8001040 <main+0x9ac>)
 8000dba:	9304      	str	r3, [sp, #16]
 8000dbc:	4ba1      	ldr	r3, [pc, #644]	; (8001044 <main+0x9b0>)
 8000dbe:	9303      	str	r3, [sp, #12]
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	9302      	str	r3, [sp, #8]
 8000dc4:	2310      	movs	r3, #16
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	4b9f      	ldr	r3, [pc, #636]	; (8001048 <main+0x9b4>)
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	4b9b      	ldr	r3, [pc, #620]	; (800103c <main+0x9a8>)
 8000dce:	4a9f      	ldr	r2, [pc, #636]	; (800104c <main+0x9b8>)
 8000dd0:	499f      	ldr	r1, [pc, #636]	; (8001050 <main+0x9bc>)
 8000dd2:	48a0      	ldr	r0, [pc, #640]	; (8001054 <main+0x9c0>)
 8000dd4:	f00a fd1c 	bl	800b810 <httpPOST2>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d020      	beq.n	8000e20 <main+0x78c>
		  				{
  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000dde:	4899      	ldr	r0, [pc, #612]	; (8001044 <main+0x9b0>)
 8000de0:	f7ff fa08 	bl	80001f4 <strlen>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	2341      	movs	r3, #65	; 0x41
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2300      	movs	r3, #0
 8000dee:	4995      	ldr	r1, [pc, #596]	; (8001044 <main+0x9b0>)
 8000df0:	4899      	ldr	r0, [pc, #612]	; (8001058 <main+0x9c4>)
 8000df2:	f00e f94b 	bl	800f08c <CopiaVector>
  							wf._n_D2SND=strlen(post);
 8000df6:	4893      	ldr	r0, [pc, #588]	; (8001044 <main+0x9b0>)
 8000df8:	f7ff f9fc 	bl	80001f4 <strlen>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b96      	ldr	r3, [pc, #600]	; (800105c <main+0x9c8>)
 8000e02:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000e06:	4b95      	ldr	r3, [pc, #596]	; (800105c <main+0x9c8>)
 8000e08:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d807      	bhi.n	8000e20 <main+0x78c>
  							{
  								EnviarDatos(&wf);
 8000e10:	4892      	ldr	r0, [pc, #584]	; (800105c <main+0x9c8>)
 8000e12:	f005 fc8f 	bl	8006734 <EnviarDatos>
  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000e16:	4b91      	ldr	r3, [pc, #580]	; (800105c <main+0x9c8>)
 8000e18:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000e1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		  				}*/
		  			}
		  	  }
		  /**************[ FIN PIDO ENVIAR DATOS ]**************/

		  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000e20:	4b8f      	ldr	r3, [pc, #572]	; (8001060 <main+0x9cc>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d003      	beq.n	8000e30 <main+0x79c>
 8000e28:	4b8e      	ldr	r3, [pc, #568]	; (8001064 <main+0x9d0>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d175      	bne.n	8000f1c <main+0x888>
		  		{
		  			if(FLAG_UART1==1)
 8000e30:	4b8b      	ldr	r3, [pc, #556]	; (8001060 <main+0x9cc>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d11c      	bne.n	8000e72 <main+0x7de>
		  				{
		  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000e38:	4b8b      	ldr	r3, [pc, #556]	; (8001068 <main+0x9d4>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b8b      	ldr	r3, [pc, #556]	; (800106c <main+0x9d8>)
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2301      	movs	r3, #1
 8000e42:	498b      	ldr	r1, [pc, #556]	; (8001070 <main+0x9dc>)
 8000e44:	488b      	ldr	r0, [pc, #556]	; (8001074 <main+0x9e0>)
 8000e46:	f00e f921 	bl	800f08c <CopiaVector>
		  					FLAG_UART1=0;
 8000e4a:	4b85      	ldr	r3, [pc, #532]	; (8001060 <main+0x9cc>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]

		  						if (error_rxdata==3)
 8000e50:	4b89      	ldr	r3, [pc, #548]	; (8001078 <main+0x9e4>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d102      	bne.n	8000e5e <main+0x7ca>
		  						{
		  							error_rxdata=0;
 8000e58:	4b87      	ldr	r3, [pc, #540]	; (8001078 <main+0x9e4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
		  						}
		  						if (error_rxdata==1)
 8000e5e:	4b86      	ldr	r3, [pc, #536]	; (8001078 <main+0x9e4>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d105      	bne.n	8000e72 <main+0x7de>
		  						{
		  							error_rxdata=5;
 8000e66:	4b84      	ldr	r3, [pc, #528]	; (8001078 <main+0x9e4>)
 8000e68:	2205      	movs	r2, #5
 8000e6a:	701a      	strb	r2, [r3, #0]
		  							error_rxdata=0;
 8000e6c:	4b82      	ldr	r3, [pc, #520]	; (8001078 <main+0x9e4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
		  						}
		  				}
		  			if(FLAG_TIMEOUT==1)
 8000e72:	4b7c      	ldr	r3, [pc, #496]	; (8001064 <main+0x9d0>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d102      	bne.n	8000e80 <main+0x7ec>
		  					{
		  						FLAG_TIMEOUT=0;
 8000e7a:	4b7a      	ldr	r3, [pc, #488]	; (8001064 <main+0x9d0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
		  					}

		  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000e80:	4b7e      	ldr	r3, [pc, #504]	; (800107c <main+0x9e8>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d149      	bne.n	8000f1c <main+0x888>
		  				{
		  					/*************** Copio y proceso info recibida ***************/
		  					wf._n_orig=UART_RX_items;
 8000e88:	4b77      	ldr	r3, [pc, #476]	; (8001068 <main+0x9d4>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a73      	ldr	r2, [pc, #460]	; (800105c <main+0x9c8>)
 8000e8e:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
		  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000e92:	4b75      	ldr	r3, [pc, #468]	; (8001068 <main+0x9d4>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4b75      	ldr	r3, [pc, #468]	; (800106c <main+0x9d8>)
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	4974      	ldr	r1, [pc, #464]	; (8001070 <main+0x9dc>)
 8000e9e:	4875      	ldr	r0, [pc, #468]	; (8001074 <main+0x9e0>)
 8000ea0:	f00e f8f4 	bl	800f08c <CopiaVector>
		  					resultado=AT_ESP8266_ND(&wf);
 8000ea4:	486d      	ldr	r0, [pc, #436]	; (800105c <main+0x9c8>)
 8000ea6:	f005 fd2b 	bl	8006900 <AT_ESP8266_ND>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	4b74      	ldr	r3, [pc, #464]	; (8001080 <main+0x9ec>)
 8000eb0:	701a      	strb	r2, [r3, #0]

		  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

		  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000eb2:	4b6a      	ldr	r3, [pc, #424]	; (800105c <main+0x9c8>)
 8000eb4:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d12f      	bne.n	8000f1c <main+0x888>
 8000ebc:	4b67      	ldr	r3, [pc, #412]	; (800105c <main+0x9c8>)
 8000ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ec2:	2b63      	cmp	r3, #99	; 0x63
 8000ec4:	d12a      	bne.n	8000f1c <main+0x888>
		  					{

		  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000ec6:	4b65      	ldr	r3, [pc, #404]	; (800105c <main+0x9c8>)
 8000ec8:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000ecc:	2341      	movs	r3, #65	; 0x41
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	496c      	ldr	r1, [pc, #432]	; (8001084 <main+0x9f0>)
 8000ed4:	486c      	ldr	r0, [pc, #432]	; (8001088 <main+0x9f4>)
 8000ed6:	f00e f8d9 	bl	800f08c <CopiaVector>
		  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000eda:	4b60      	ldr	r3, [pc, #384]	; (800105c <main+0x9c8>)
 8000edc:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000ee0:	4a6a      	ldr	r2, [pc, #424]	; (800108c <main+0x9f8>)
 8000ee2:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

		  						ModBUS(&mb_wf);
 8000ee6:	4869      	ldr	r0, [pc, #420]	; (800108c <main+0x9f8>)
 8000ee8:	f00a ff4e 	bl	800bd88 <ModBUS>

		  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000eec:	4b67      	ldr	r3, [pc, #412]	; (800108c <main+0x9f8>)
 8000eee:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000ef2:	2341      	movs	r3, #65	; 0x41
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	4965      	ldr	r1, [pc, #404]	; (8001090 <main+0x9fc>)
 8000efa:	4857      	ldr	r0, [pc, #348]	; (8001058 <main+0x9c4>)
 8000efc:	f00e f8c6 	bl	800f08c <CopiaVector>
		  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000f00:	4b62      	ldr	r3, [pc, #392]	; (800108c <main+0x9f8>)
 8000f02:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000f06:	4a55      	ldr	r2, [pc, #340]	; (800105c <main+0x9c8>)
 8000f08:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
		  						wf._new_data_rcv=0;//
 8000f0c:	4b53      	ldr	r3, [pc, #332]	; (800105c <main+0x9c8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
		  						wf._send_data=1;
 8000f14:	4b51      	ldr	r3, [pc, #324]	; (800105c <main+0x9c8>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
		  						}
		  					}

		  		}

		  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000f1c:	4b57      	ldr	r3, [pc, #348]	; (800107c <main+0x9e8>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d108      	bne.n	8000f36 <main+0x8a2>
		  			{
		  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000f24:	2201      	movs	r2, #1
 8000f26:	495b      	ldr	r1, [pc, #364]	; (8001094 <main+0xa00>)
 8000f28:	484c      	ldr	r0, [pc, #304]	; (800105c <main+0x9c8>)
 8000f2a:	f008 ff91 	bl	8009e50 <WiFi_Conn_ND>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4b59      	ldr	r3, [pc, #356]	; (8001098 <main+0xa04>)
 8000f34:	701a      	strb	r2, [r3, #0]

		  			}
		  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000f36:	4b59      	ldr	r3, [pc, #356]	; (800109c <main+0xa08>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d10e      	bne.n	8000f5c <main+0x8c8>
		  			{

		  				HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Resetting \r\n",strlen("\r\n ESP HW Resetting \r\n"));
 8000f3e:	2216      	movs	r2, #22
 8000f40:	4957      	ldr	r1, [pc, #348]	; (80010a0 <main+0xa0c>)
 8000f42:	4858      	ldr	r0, [pc, #352]	; (80010a4 <main+0xa10>)
 8000f44:	f004 fb34 	bl	80055b0 <HAL_UART_Transmit_IT>
		  				HW_RESET(&wf);
 8000f48:	4844      	ldr	r0, [pc, #272]	; (800105c <main+0x9c8>)
 8000f4a:	f005 fb05 	bl	8006558 <HW_RESET>
		  				HAL_Delay(5000);//210419
 8000f4e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f52:	f001 fde7 	bl	8002b24 <HAL_Delay>
		  				esp_restart=0;
 8000f56:	4b51      	ldr	r3, [pc, #324]	; (800109c <main+0xa08>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
		  			}
		  		if(eth_reset==1)
 8000f5c:	4b52      	ldr	r3, [pc, #328]	; (80010a8 <main+0xa14>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	f47f ae99 	bne.w	8000c98 <main+0x604>
		  		{

		  		  SPI_ETH_PHY_RESET(&ETH);
 8000f66:	4851      	ldr	r0, [pc, #324]	; (80010ac <main+0xa18>)
 8000f68:	f00c f914 	bl	800d194 <SPI_ETH_PHY_RESET>
		  		  HAL_UART_Transmit_IT(&huart2,"\r\n PHY RESET \r\n",strlen("\r\n PHY RESET \r\n"));
 8000f6c:	220f      	movs	r2, #15
 8000f6e:	4950      	ldr	r1, [pc, #320]	; (80010b0 <main+0xa1c>)
 8000f70:	484c      	ldr	r0, [pc, #304]	; (80010a4 <main+0xa10>)
 8000f72:	f004 fb1d 	bl	80055b0 <HAL_UART_Transmit_IT>
		  	      HAL_Delay(800);
 8000f76:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000f7a:	f001 fdd3 	bl	8002b24 <HAL_Delay>
		  	      eth_init(&ETH);
 8000f7e:	484b      	ldr	r0, [pc, #300]	; (80010ac <main+0xa18>)
 8000f80:	f00c faf2 	bl	800d568 <eth_init>
		  	      HAL_UART_Transmit_IT(&huart2,"\r\n ETH INIT \r\n",strlen("\r\n ETH INIT \r\n"));
 8000f84:	220e      	movs	r2, #14
 8000f86:	494b      	ldr	r1, [pc, #300]	; (80010b4 <main+0xa20>)
 8000f88:	4846      	ldr	r0, [pc, #280]	; (80010a4 <main+0xa10>)
 8000f8a:	f004 fb11 	bl	80055b0 <HAL_UART_Transmit_IT>
		  	      SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000f8e:	4947      	ldr	r1, [pc, #284]	; (80010ac <main+0xa18>)
 8000f90:	4849      	ldr	r0, [pc, #292]	; (80010b8 <main+0xa24>)
 8000f92:	f00c fe6e 	bl	800dc72 <SPI_ETH_SNIFF>
		  	      HAL_Delay(800);
 8000f96:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000f9a:	f001 fdc3 	bl	8002b24 <HAL_Delay>
		  	   	  eth_socket_init(&ETH,S0_REG);
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4842      	ldr	r0, [pc, #264]	; (80010ac <main+0xa18>)
 8000fa2:	f00c fbb3 	bl	800d70c <eth_socket_init>
		  	   	  HAL_UART_Transmit_IT(&huart2,"\r\n ETH SOCKET INIT \r\n",strlen("\r\n ETH SOCKET INIT \r\n"));
 8000fa6:	2215      	movs	r2, #21
 8000fa8:	4944      	ldr	r1, [pc, #272]	; (80010bc <main+0xa28>)
 8000faa:	483e      	ldr	r0, [pc, #248]	; (80010a4 <main+0xa10>)
 8000fac:	f004 fb00 	bl	80055b0 <HAL_UART_Transmit_IT>

		  		 uint16_t b=0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	817b      	strh	r3, [r7, #10]
		  		 uint8_t spi_Data[2];
		  		 b = SPI_ETH_REG(&ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2124      	movs	r1, #36	; 0x24
 8000fc2:	483a      	ldr	r0, [pc, #232]	; (80010ac <main+0xa18>)
 8000fc4:	f00c f93d 	bl	800d242 <SPI_ETH_REG>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	817b      	strh	r3, [r7, #10]

		  		 eth_wr_SOCKET_MODE(&ETH,S0_REG,MODE_TCP);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2101      	movs	r1, #1
 8000fd0:	4836      	ldr	r0, [pc, #216]	; (80010ac <main+0xa18>)
 8000fd2:	f00c faa7 	bl	800d524 <eth_wr_SOCKET_MODE>
		  	   	 SPI_ETH_REG(&ETH, S_DIPR, S0_REG,SPI_WRITE, ETH.S_DIPR,4);									// client
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <main+0xa2c>)
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	210c      	movs	r1, #12
 8000fe4:	4831      	ldr	r0, [pc, #196]	; (80010ac <main+0xa18>)
 8000fe6:	f00c f92c 	bl	800d242 <SPI_ETH_REG>
		  	   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 8000fea:	212e      	movs	r1, #46	; 0x2e
 8000fec:	4835      	ldr	r0, [pc, #212]	; (80010c4 <main+0xa30>)
 8000fee:	f000 fa83 	bl	80014f8 <ITM0_Write>
		  	   	 SPI_ETH_REG(&ETH, S_DPORT, S0_REG,SPI_WRITE, ETH.S_DPORT,2);									// client
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <main+0xa34>)
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2110      	movs	r1, #16
 8001000:	482a      	ldr	r0, [pc, #168]	; (80010ac <main+0xa18>)
 8001002:	f00c f91e 	bl	800d242 <SPI_ETH_REG>
		  	   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 8001006:	2120      	movs	r1, #32
 8001008:	4830      	ldr	r0, [pc, #192]	; (80010cc <main+0xa38>)
 800100a:	f000 fa75 	bl	80014f8 <ITM0_Write>

		  	   	 HAL_Delay(800);
 800100e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001012:	f001 fd87 	bl	8002b24 <HAL_Delay>
		  	   	  eth_wr_SOCKET_CMD(&ETH, S0_REG ,OPEN );
 8001016:	2201      	movs	r2, #1
 8001018:	2101      	movs	r1, #1
 800101a:	4824      	ldr	r0, [pc, #144]	; (80010ac <main+0xa18>)
 800101c:	f00c fa60 	bl	800d4e0 <eth_wr_SOCKET_CMD>
		  	   	  HAL_UART_Transmit_IT(&huart2,"\r\n ETH OPEN \r\n",strlen("\r\n ETH OPEN \r\n"));
 8001020:	220e      	movs	r2, #14
 8001022:	492b      	ldr	r1, [pc, #172]	; (80010d0 <main+0xa3c>)
 8001024:	481f      	ldr	r0, [pc, #124]	; (80010a4 <main+0xa10>)
 8001026:	f004 fac3 	bl	80055b0 <HAL_UART_Transmit_IT>
		  	   	  ETH.ETH_WDG=0;
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <main+0xa18>)
 800102c:	2200      	movs	r2, #0
 800102e:	829a      	strh	r2, [r3, #20]
		  	   	  eth_reset=0;
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <main+0xa14>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
		 SPI_READ_EN=1;
 8001036:	e62f      	b.n	8000c98 <main+0x604>
 8001038:	20003128 	.word	0x20003128
 800103c:	20000024 	.word	0x20000024
 8001040:	20003fc8 	.word	0x20003fc8
 8001044:	20003dc8 	.word	0x20003dc8
 8001048:	2000421c 	.word	0x2000421c
 800104c:	2000001c 	.word	0x2000001c
 8001050:	2000000c 	.word	0x2000000c
 8001054:	20000000 	.word	0x20000000
 8001058:	20002668 	.word	0x20002668
 800105c:	200023d4 	.word	0x200023d4
 8001060:	20004232 	.word	0x20004232
 8001064:	20004231 	.word	0x20004231
 8001068:	20004648 	.word	0x20004648
 800106c:	20004640 	.word	0x20004640
 8001070:	20004440 	.word	0x20004440
 8001074:	20002a68 	.word	0x20002a68
 8001078:	20004235 	.word	0x20004235
 800107c:	2000422e 	.word	0x2000422e
 8001080:	20004234 	.word	0x20004234
 8001084:	20002468 	.word	0x20002468
 8001088:	2000378a 	.word	0x2000378a
 800108c:	20003778 	.word	0x20003778
 8001090:	20003990 	.word	0x20003990
 8001094:	20000274 	.word	0x20000274
 8001098:	20004237 	.word	0x20004237
 800109c:	20004236 	.word	0x20004236
 80010a0:	08010754 	.word	0x08010754
 80010a4:	200002b8 	.word	0x200002b8
 80010a8:	20004233 	.word	0x20004233
 80010ac:	20000304 	.word	0x20000304
 80010b0:	0801076c 	.word	0x0801076c
 80010b4:	0801077c 	.word	0x0801077c
 80010b8:	20001378 	.word	0x20001378
 80010bc:	0801078c 	.word	0x0801078c
 80010c0:	20001348 	.word	0x20001348
 80010c4:	08010668 	.word	0x08010668
 80010c8:	2000134c 	.word	0x2000134c
 80010cc:	08010698 	.word	0x08010698
 80010d0:	080107a4 	.word	0x080107a4

080010d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b094      	sub	sp, #80	; 0x50
 80010d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010da:	f107 0320 	add.w	r3, r7, #32
 80010de:	2230      	movs	r2, #48	; 0x30
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f00e f9c1 	bl	800f46a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	4b27      	ldr	r3, [pc, #156]	; (800119c <SystemClock_Config+0xc8>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	4a26      	ldr	r2, [pc, #152]	; (800119c <SystemClock_Config+0xc8>)
 8001102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001106:	6413      	str	r3, [r2, #64]	; 0x40
 8001108:	4b24      	ldr	r3, [pc, #144]	; (800119c <SystemClock_Config+0xc8>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001114:	2300      	movs	r3, #0
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	4b21      	ldr	r3, [pc, #132]	; (80011a0 <SystemClock_Config+0xcc>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a20      	ldr	r2, [pc, #128]	; (80011a0 <SystemClock_Config+0xcc>)
 800111e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001122:	6013      	str	r3, [r2, #0]
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <SystemClock_Config+0xcc>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001130:	2301      	movs	r3, #1
 8001132:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001134:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113a:	2302      	movs	r3, #2
 800113c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800113e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001144:	230c      	movs	r3, #12
 8001146:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001148:	2360      	movs	r3, #96	; 0x60
 800114a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800114c:	2302      	movs	r3, #2
 800114e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001150:	2304      	movs	r3, #4
 8001152:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001154:	f107 0320 	add.w	r3, r7, #32
 8001158:	4618      	mov	r0, r3
 800115a:	f002 f979 	bl	8003450 <HAL_RCC_OscConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001164:	f001 f9ca 	bl	80024fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001168:	230f      	movs	r3, #15
 800116a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116c:	2302      	movs	r3, #2
 800116e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001178:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	2103      	movs	r1, #3
 8001184:	4618      	mov	r0, r3
 8001186:	f002 fbdb 	bl	8003940 <HAL_RCC_ClockConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001190:	f001 f9b4 	bl	80024fc <Error_Handler>
  }
}
 8001194:	bf00      	nop
 8001196:	3750      	adds	r7, #80	; 0x50
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40023800 	.word	0x40023800
 80011a0:	40007000 	.word	0x40007000

080011a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <MX_SPI1_Init+0x64>)
 80011aa:	4a18      	ldr	r2, [pc, #96]	; (800120c <MX_SPI1_Init+0x68>)
 80011ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <MX_SPI1_Init+0x64>)
 80011b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_SPI1_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_SPI1_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_SPI1_Init+0x64>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_SPI1_Init+0x64>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_SPI1_Init+0x64>)
 80011d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_SPI1_Init+0x64>)
 80011d8:	2208      	movs	r2, #8
 80011da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <MX_SPI1_Init+0x64>)
 80011de:	2200      	movs	r2, #0
 80011e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_SPI1_Init+0x64>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <MX_SPI1_Init+0x64>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_SPI1_Init+0x64>)
 80011f0:	220a      	movs	r2, #10
 80011f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_SPI1_Init+0x64>)
 80011f6:	f002 fd83 	bl	8003d00 <HAL_SPI_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001200:	f001 f97c 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200001d4 	.word	0x200001d4
 800120c:	40013000 	.word	0x40013000

08001210 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08e      	sub	sp, #56	; 0x38
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	f107 0320 	add.w	r3, r7, #32
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
 800123c:	615a      	str	r2, [r3, #20]
 800123e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <MX_TIM2_Init+0xf0>)
 8001242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001246:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001248:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <MX_TIM2_Init+0xf0>)
 800124a:	2264      	movs	r2, #100	; 0x64
 800124c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <MX_TIM2_Init+0xf0>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001254:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <MX_TIM2_Init+0xf0>)
 8001256:	2264      	movs	r2, #100	; 0x64
 8001258:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MX_TIM2_Init+0xf0>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <MX_TIM2_Init+0xf0>)
 8001262:	2280      	movs	r2, #128	; 0x80
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001266:	4826      	ldr	r0, [pc, #152]	; (8001300 <MX_TIM2_Init+0xf0>)
 8001268:	f003 f840 	bl	80042ec <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001272:	f001 f943 	bl	80024fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800127c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001280:	4619      	mov	r1, r3
 8001282:	481f      	ldr	r0, [pc, #124]	; (8001300 <MX_TIM2_Init+0xf0>)
 8001284:	f003 fc48 	bl	8004b18 <HAL_TIM_ConfigClockSource>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800128e:	f001 f935 	bl	80024fc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001292:	481b      	ldr	r0, [pc, #108]	; (8001300 <MX_TIM2_Init+0xf0>)
 8001294:	f003 f879 	bl	800438a <HAL_TIM_OC_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800129e:	f001 f92d 	bl	80024fc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80012a2:	2108      	movs	r1, #8
 80012a4:	4816      	ldr	r0, [pc, #88]	; (8001300 <MX_TIM2_Init+0xf0>)
 80012a6:	f003 fa79 	bl	800479c <HAL_TIM_OnePulse_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80012b0:	f001 f924 	bl	80024fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012bc:	f107 0320 	add.w	r3, r7, #32
 80012c0:	4619      	mov	r1, r3
 80012c2:	480f      	ldr	r0, [pc, #60]	; (8001300 <MX_TIM2_Init+0xf0>)
 80012c4:	f003 ffe4 	bl	8005290 <HAL_TIMEx_MasterConfigSynchronization>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80012ce:	f001 f915 	bl	80024fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80012d2:	2320      	movs	r3, #32
 80012d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2200      	movs	r2, #0
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_TIM2_Init+0xf0>)
 80012ea:	f003 fbb9 	bl	8004a60 <HAL_TIM_OC_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80012f4:	f001 f902 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3738      	adds	r7, #56	; 0x38
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000022c 	.word	0x2000022c

08001304 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <MX_USART1_UART_Init+0x50>)
 800130c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800133c:	f004 f82a 	bl	8005394 <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001346:	f001 f8d9 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000274 	.word	0x20000274
 8001354:	40011000 	.word	0x40011000

08001358 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_USART2_UART_Init+0x4c>)
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <MX_USART2_UART_Init+0x50>)
 8001360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <MX_USART2_UART_Init+0x4c>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_USART2_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_USART2_UART_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <MX_USART2_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_USART2_UART_Init+0x4c>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <MX_USART2_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_USART2_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_USART2_UART_Init+0x4c>)
 8001390:	f004 f800 	bl	8005394 <HAL_UART_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800139a:	f001 f8af 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200002b8 	.word	0x200002b8
 80013a8:	40004400 	.word	0x40004400

080013ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <MX_GPIO_Init+0x13c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a47      	ldr	r2, [pc, #284]	; (80014e8 <MX_GPIO_Init+0x13c>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <MX_GPIO_Init+0x13c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <MX_GPIO_Init+0x13c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a40      	ldr	r2, [pc, #256]	; (80014e8 <MX_GPIO_Init+0x13c>)
 80013e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <MX_GPIO_Init+0x13c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	4b3a      	ldr	r3, [pc, #232]	; (80014e8 <MX_GPIO_Init+0x13c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a39      	ldr	r2, [pc, #228]	; (80014e8 <MX_GPIO_Init+0x13c>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <MX_GPIO_Init+0x13c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <MX_GPIO_Init+0x13c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a32      	ldr	r2, [pc, #200]	; (80014e8 <MX_GPIO_Init+0x13c>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <MX_GPIO_Init+0x13c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001438:	482c      	ldr	r0, [pc, #176]	; (80014ec <MX_GPIO_Init+0x140>)
 800143a:	f001 ffd5 	bl	80033e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|WiFi_EN_Pin, GPIO_PIN_SET);
 800143e:	2201      	movs	r2, #1
 8001440:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001444:	482a      	ldr	r0, [pc, #168]	; (80014f0 <MX_GPIO_Init+0x144>)
 8001446:	f001 ffcf 	bl	80033e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	2101      	movs	r1, #1
 800144e:	4829      	ldr	r0, [pc, #164]	; (80014f4 <MX_GPIO_Init+0x148>)
 8001450:	f001 ffca 	bl	80033e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 8001454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	481f      	ldr	r0, [pc, #124]	; (80014ec <MX_GPIO_Init+0x140>)
 800146e:	f001 fd53 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 8001472:	2301      	movs	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	481a      	ldr	r0, [pc, #104]	; (80014f0 <MX_GPIO_Init+0x144>)
 8001486:	f001 fd47 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 800148a:	2310      	movs	r3, #16
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148e:	2301      	movs	r3, #1
 8001490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	4813      	ldr	r0, [pc, #76]	; (80014f0 <MX_GPIO_Init+0x144>)
 80014a2:	f001 fd39 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_RST_Pin */
  GPIO_InitStruct.Pin = SPI_RST_Pin;
 80014a6:	2301      	movs	r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_RST_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	480d      	ldr	r0, [pc, #52]	; (80014f4 <MX_GPIO_Init+0x148>)
 80014be:	f001 fd2b 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : WiFi_EN_Pin */
  GPIO_InitStruct.Pin = WiFi_EN_Pin;
 80014c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WiFi_EN_GPIO_Port, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_GPIO_Init+0x144>)
 80014dc:	f001 fd1c 	bl	8002f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020400 	.word	0x40020400

080014f8 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e009      	b.n	800151c <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	607a      	str	r2, [r7, #4]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f897 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3301      	adds	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	dbf1      	blt.n	8001508 <ITM0_Write+0x10>
  }
  return len;
 8001524:	683b      	ldr	r3, [r7, #0]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8001536:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */
	unsigned char text[512];
	int ns=0;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	ms_ticks++;	//100 ms
 800153e:	4b68      	ldr	r3, [pc, #416]	; (80016e0 <SysTick_Handler+0x1b0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	3301      	adds	r3, #1
 8001544:	4a66      	ldr	r2, [pc, #408]	; (80016e0 <SysTick_Handler+0x1b0>)
 8001546:	6013      	str	r3, [r2, #0]

	if(wf._estado_conexion!=ESPstate)
 8001548:	4b66      	ldr	r3, [pc, #408]	; (80016e4 <SysTick_Handler+0x1b4>)
 800154a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800154e:	4b66      	ldr	r3, [pc, #408]	; (80016e8 <SysTick_Handler+0x1b8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d015      	beq.n	8001582 <SysTick_Handler+0x52>
	{
		ESPstate=wf._estado_conexion;
 8001556:	4b63      	ldr	r3, [pc, #396]	; (80016e4 <SysTick_Handler+0x1b4>)
 8001558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800155c:	4a62      	ldr	r2, [pc, #392]	; (80016e8 <SysTick_Handler+0x1b8>)
 800155e:	6013      	str	r3, [r2, #0]
		ns=INTOA(ESPstate,text);
 8001560:	4b61      	ldr	r3, [pc, #388]	; (80016e8 <SysTick_Handler+0x1b8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	463a      	mov	r2, r7
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f00d fce5 	bl	800ef38 <INTOA>
 800156e:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
		HAL_UART_Transmit_IT(&huart2,&text,ns);
 8001572:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001576:	b29a      	uxth	r2, r3
 8001578:	463b      	mov	r3, r7
 800157a:	4619      	mov	r1, r3
 800157c:	485b      	ldr	r0, [pc, #364]	; (80016ec <SysTick_Handler+0x1bc>)
 800157e:	f004 f817 	bl	80055b0 <HAL_UART_Transmit_IT>

	}

	ESP_ticks++;
 8001582:	4b5b      	ldr	r3, [pc, #364]	; (80016f0 <SysTick_Handler+0x1c0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3301      	adds	r3, #1
 8001588:	4a59      	ldr	r2, [pc, #356]	; (80016f0 <SysTick_Handler+0x1c0>)
 800158a:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 800158c:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <SysTick_Handler+0x1c4>)
 800158e:	7a1b      	ldrb	r3, [r3, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <SysTick_Handler+0x6e>
 8001594:	4b58      	ldr	r3, [pc, #352]	; (80016f8 <SysTick_Handler+0x1c8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	4a57      	ldr	r2, [pc, #348]	; (80016f8 <SysTick_Handler+0x1c8>)
 800159c:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 800159e:	4b55      	ldr	r3, [pc, #340]	; (80016f4 <SysTick_Handler+0x1c4>)
 80015a0:	7a1b      	ldrb	r3, [r3, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00c      	beq.n	80015c0 <SysTick_Handler+0x90>
 80015a6:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <SysTick_Handler+0x1c4>)
 80015a8:	88db      	ldrh	r3, [r3, #6]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b52      	ldr	r3, [pc, #328]	; (80016f8 <SysTick_Handler+0x1c8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	da05      	bge.n	80015c0 <SysTick_Handler+0x90>
		{
			mb_eth._w_answer=0;
 80015b4:	4b4f      	ldr	r3, [pc, #316]	; (80016f4 <SysTick_Handler+0x1c4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 80015ba:	4b4f      	ldr	r3, [pc, #316]	; (80016f8 <SysTick_Handler+0x1c8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
		}
	}*/
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 80015c0:	4b48      	ldr	r3, [pc, #288]	; (80016e4 <SysTick_Handler+0x1b4>)
 80015c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015c6:	f240 2261 	movw	r2, #609	; 0x261
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d005      	beq.n	80015da <SysTick_Handler+0xaa>
 80015ce:	4b45      	ldr	r3, [pc, #276]	; (80016e4 <SysTick_Handler+0x1b4>)
 80015d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015d4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80015d8:	d109      	bne.n	80015ee <SysTick_Handler+0xbe>
 80015da:	4b42      	ldr	r3, [pc, #264]	; (80016e4 <SysTick_Handler+0x1b4>)
 80015dc:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d104      	bne.n	80015ee <SysTick_Handler+0xbe>
 80015e4:	4b45      	ldr	r3, [pc, #276]	; (80016fc <SysTick_Handler+0x1cc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	4a44      	ldr	r2, [pc, #272]	; (80016fc <SysTick_Handler+0x1cc>)
 80015ec:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 5000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;					//230517 wf_snd_flag_ticks>= 2000
 80015ee:	4b43      	ldr	r3, [pc, #268]	; (80016fc <SysTick_Handler+0x1cc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f241 3287 	movw	r2, #4999	; 0x1387
 80015f6:	4293      	cmp	r3, r2
 80015f8:	dd0c      	ble.n	8001614 <SysTick_Handler+0xe4>
 80015fa:	4b3a      	ldr	r3, [pc, #232]	; (80016e4 <SysTick_Handler+0x1b4>)
 80015fc:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001600:	2b01      	cmp	r3, #1
 8001602:	d007      	beq.n	8001614 <SysTick_Handler+0xe4>
 8001604:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <SysTick_Handler+0x1b4>)
 8001606:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <SysTick_Handler+0xe4>
 800160e:	4b3c      	ldr	r3, [pc, #240]	; (8001700 <SysTick_Handler+0x1d0>)
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S_status == 0)
 8001614:	4b3b      	ldr	r3, [pc, #236]	; (8001704 <SysTick_Handler+0x1d4>)
 8001616:	7d9b      	ldrb	r3, [r3, #22]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d111      	bne.n	8001640 <SysTick_Handler+0x110>
	{
		ETH.ETH_WDG++;
 800161c:	4b39      	ldr	r3, [pc, #228]	; (8001704 <SysTick_Handler+0x1d4>)
 800161e:	8a9b      	ldrh	r3, [r3, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	b29a      	uxth	r2, r3
 8001624:	4b37      	ldr	r3, [pc, #220]	; (8001704 <SysTick_Handler+0x1d4>)
 8001626:	829a      	strh	r2, [r3, #20]
		if (ETH.ETH_WDG>=64000)
 8001628:	4b36      	ldr	r3, [pc, #216]	; (8001704 <SysTick_Handler+0x1d4>)
 800162a:	8a9b      	ldrh	r3, [r3, #20]
 800162c:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001630:	d306      	bcc.n	8001640 <SysTick_Handler+0x110>
		{
			eth_reset=1;
 8001632:	4b35      	ldr	r3, [pc, #212]	; (8001708 <SysTick_Handler+0x1d8>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
			ETH.ETH_WDG=64000;
 8001638:	4b32      	ldr	r3, [pc, #200]	; (8001704 <SysTick_Handler+0x1d4>)
 800163a:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800163e:	829a      	strh	r2, [r3, #20]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 8001640:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <SysTick_Handler+0x1b0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b64      	cmp	r3, #100	; 0x64
 8001646:	f040 84f0 	bne.w	800202a <SysTick_Handler+0xafa>
  {
	  dbgn++;
 800164a:	4b30      	ldr	r3, [pc, #192]	; (800170c <SysTick_Handler+0x1dc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	3301      	adds	r3, #1
 8001650:	4a2e      	ldr	r2, [pc, #184]	; (800170c <SysTick_Handler+0x1dc>)
 8001652:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <SysTick_Handler+0x1b0>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 800165a:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <SysTick_Handler+0x1e0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	4a2b      	ldr	r2, [pc, #172]	; (8001710 <SysTick_Handler+0x1e0>)
 8001662:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 8001664:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <SysTick_Handler+0x1e4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800166c:	d102      	bne.n	8001674 <SysTick_Handler+0x144>
 800166e:	4b29      	ldr	r3, [pc, #164]	; (8001714 <SysTick_Handler+0x1e4>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 8001674:	4b28      	ldr	r3, [pc, #160]	; (8001718 <SysTick_Handler+0x1e8>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d104      	bne.n	8001686 <SysTick_Handler+0x156>
 800167c:	4b25      	ldr	r3, [pc, #148]	; (8001714 <SysTick_Handler+0x1e4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	4a24      	ldr	r2, [pc, #144]	; (8001714 <SysTick_Handler+0x1e4>)
 8001684:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <SysTick_Handler+0x1e4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b64      	cmp	r3, #100	; 0x64
 800168c:	d102      	bne.n	8001694 <SysTick_Handler+0x164>
 800168e:	4b22      	ldr	r3, [pc, #136]	; (8001718 <SysTick_Handler+0x1e8>)
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 8001694:	4b20      	ldr	r3, [pc, #128]	; (8001718 <SysTick_Handler+0x1e8>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d104      	bne.n	80016a6 <SysTick_Handler+0x176>
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <SysTick_Handler+0x1e4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <SysTick_Handler+0x1e4>)
 80016a4:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 80016a6:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <SysTick_Handler+0x1e4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d102      	bne.n	80016b4 <SysTick_Handler+0x184>
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <SysTick_Handler+0x1e8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]


	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  if(spi_no_debug)
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <SysTick_Handler+0x1ec>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 84a6 	beq.w	800200a <SysTick_Handler+0xada>
	  	  {
	  if(SPI_READ_EN)
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <SysTick_Handler+0x1f0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 84a5 	beq.w	8002012 <SysTick_Handler+0xae2>
	  {
	     ETH.S_status=eth_rd_SOCKET_STAT(&ETH,S0_REG);  //este era el bardo
 80016c8:	2101      	movs	r1, #1
 80016ca:	480e      	ldr	r0, [pc, #56]	; (8001704 <SysTick_Handler+0x1d4>)
 80016cc:	f00c f966 	bl	800d99c <eth_rd_SOCKET_STAT>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <SysTick_Handler+0x1d4>)
 80016d6:	759a      	strb	r2, [r3, #22]

		  switch(ETH.S_status)	//Check Socket status
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <SysTick_Handler+0x1d4>)
 80016da:	7d9b      	ldrb	r3, [r3, #22]
 80016dc:	e022      	b.n	8001724 <SysTick_Handler+0x1f4>
 80016de:	bf00      	nop
 80016e0:	200002fc 	.word	0x200002fc
 80016e4:	200023d4 	.word	0x200023d4
 80016e8:	20004670 	.word	0x20004670
 80016ec:	200002b8 	.word	0x200002b8
 80016f0:	2000464c 	.word	0x2000464c
 80016f4:	20003128 	.word	0x20003128
 80016f8:	20004654 	.word	0x20004654
 80016fc:	200041cc 	.word	0x200041cc
 8001700:	200041c9 	.word	0x200041c9
 8001704:	20000304 	.word	0x20000304
 8001708:	20004233 	.word	0x20004233
 800170c:	20004678 	.word	0x20004678
 8001710:	20000300 	.word	0x20000300
 8001714:	20004650 	.word	0x20004650
 8001718:	20004238 	.word	0x20004238
 800171c:	20004218 	.word	0x20004218
 8001720:	2000423c 	.word	0x2000423c
 8001724:	2b5f      	cmp	r3, #95	; 0x5f
 8001726:	f200 8479 	bhi.w	800201c <SysTick_Handler+0xaec>
 800172a:	a201      	add	r2, pc, #4	; (adr r2, 8001730 <SysTick_Handler+0x200>)
 800172c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001730:	080018b1 	.word	0x080018b1
 8001734:	0800201d 	.word	0x0800201d
 8001738:	0800201d 	.word	0x0800201d
 800173c:	0800201d 	.word	0x0800201d
 8001740:	0800201d 	.word	0x0800201d
 8001744:	0800201d 	.word	0x0800201d
 8001748:	0800201d 	.word	0x0800201d
 800174c:	0800201d 	.word	0x0800201d
 8001750:	0800201d 	.word	0x0800201d
 8001754:	0800201d 	.word	0x0800201d
 8001758:	0800201d 	.word	0x0800201d
 800175c:	0800201d 	.word	0x0800201d
 8001760:	0800201d 	.word	0x0800201d
 8001764:	0800201d 	.word	0x0800201d
 8001768:	0800201d 	.word	0x0800201d
 800176c:	0800201d 	.word	0x0800201d
 8001770:	0800201d 	.word	0x0800201d
 8001774:	0800201d 	.word	0x0800201d
 8001778:	0800201d 	.word	0x0800201d
 800177c:	080018d7 	.word	0x080018d7
 8001780:	0800195d 	.word	0x0800195d
 8001784:	08001987 	.word	0x08001987
 8001788:	080019b1 	.word	0x080019b1
 800178c:	080019db 	.word	0x080019db
 8001790:	08001dd9 	.word	0x08001dd9
 8001794:	0800201d 	.word	0x0800201d
 8001798:	08001e03 	.word	0x08001e03
 800179c:	08001e99 	.word	0x08001e99
 80017a0:	08001ee9 	.word	0x08001ee9
 80017a4:	08001f39 	.word	0x08001f39
 80017a8:	0800201d 	.word	0x0800201d
 80017ac:	0800201d 	.word	0x0800201d
 80017b0:	0800201d 	.word	0x0800201d
 80017b4:	0800201d 	.word	0x0800201d
 80017b8:	08001f63 	.word	0x08001f63
 80017bc:	0800201d 	.word	0x0800201d
 80017c0:	0800201d 	.word	0x0800201d
 80017c4:	0800201d 	.word	0x0800201d
 80017c8:	0800201d 	.word	0x0800201d
 80017cc:	0800201d 	.word	0x0800201d
 80017d0:	0800201d 	.word	0x0800201d
 80017d4:	0800201d 	.word	0x0800201d
 80017d8:	0800201d 	.word	0x0800201d
 80017dc:	0800201d 	.word	0x0800201d
 80017e0:	0800201d 	.word	0x0800201d
 80017e4:	0800201d 	.word	0x0800201d
 80017e8:	0800201d 	.word	0x0800201d
 80017ec:	0800201d 	.word	0x0800201d
 80017f0:	0800201d 	.word	0x0800201d
 80017f4:	0800201d 	.word	0x0800201d
 80017f8:	08001f8d 	.word	0x08001f8d
 80017fc:	0800201d 	.word	0x0800201d
 8001800:	0800201d 	.word	0x0800201d
 8001804:	0800201d 	.word	0x0800201d
 8001808:	0800201d 	.word	0x0800201d
 800180c:	0800201d 	.word	0x0800201d
 8001810:	0800201d 	.word	0x0800201d
 8001814:	0800201d 	.word	0x0800201d
 8001818:	0800201d 	.word	0x0800201d
 800181c:	0800201d 	.word	0x0800201d
 8001820:	0800201d 	.word	0x0800201d
 8001824:	0800201d 	.word	0x0800201d
 8001828:	0800201d 	.word	0x0800201d
 800182c:	0800201d 	.word	0x0800201d
 8001830:	0800201d 	.word	0x0800201d
 8001834:	0800201d 	.word	0x0800201d
 8001838:	08001fb7 	.word	0x08001fb7
 800183c:	0800201d 	.word	0x0800201d
 8001840:	0800201d 	.word	0x0800201d
 8001844:	0800201d 	.word	0x0800201d
 8001848:	0800201d 	.word	0x0800201d
 800184c:	0800201d 	.word	0x0800201d
 8001850:	0800201d 	.word	0x0800201d
 8001854:	0800201d 	.word	0x0800201d
 8001858:	0800201d 	.word	0x0800201d
 800185c:	0800201d 	.word	0x0800201d
 8001860:	0800201d 	.word	0x0800201d
 8001864:	0800201d 	.word	0x0800201d
 8001868:	0800201d 	.word	0x0800201d
 800186c:	0800201d 	.word	0x0800201d
 8001870:	0800201d 	.word	0x0800201d
 8001874:	0800201d 	.word	0x0800201d
 8001878:	0800201d 	.word	0x0800201d
 800187c:	0800201d 	.word	0x0800201d
 8001880:	0800201d 	.word	0x0800201d
 8001884:	0800201d 	.word	0x0800201d
 8001888:	0800201d 	.word	0x0800201d
 800188c:	0800201d 	.word	0x0800201d
 8001890:	0800201d 	.word	0x0800201d
 8001894:	0800201d 	.word	0x0800201d
 8001898:	0800201d 	.word	0x0800201d
 800189c:	0800201d 	.word	0x0800201d
 80018a0:	0800201d 	.word	0x0800201d
 80018a4:	0800201d 	.word	0x0800201d
 80018a8:	0800201d 	.word	0x0800201d
 80018ac:	08001fe1 	.word	0x08001fe1
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 80018b0:	4b9b      	ldr	r3, [pc, #620]	; (8001b20 <SysTick_Handler+0x5f0>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <SysTick_Handler+0x390>
 80018b8:	2113      	movs	r1, #19
 80018ba:	489a      	ldr	r0, [pc, #616]	; (8001b24 <SysTick_Handler+0x5f4>)
 80018bc:	f7ff fe1c 	bl	80014f8 <ITM0_Write>
					 //if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_CLOSED \r\n",strlen("\r\n S0_SOCK_CLOSED \r\n"));
					 //eth_wr_SOCKET_CMD(&ETH, S0_REG ,OPEN );
					 if(ETH.ETH_WDG >= 15000)
 80018c0:	4b99      	ldr	r3, [pc, #612]	; (8001b28 <SysTick_Handler+0x5f8>)
 80018c2:	8a9b      	ldrh	r3, [r3, #20]
 80018c4:	f643 2297 	movw	r2, #14999	; 0x3a97
 80018c8:	4293      	cmp	r3, r2
 80018ca:	f240 83a4 	bls.w	8002016 <SysTick_Handler+0xae6>
					 {
						  eth_reset=1;
 80018ce:	4b97      	ldr	r3, [pc, #604]	; (8001b2c <SysTick_Handler+0x5fc>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]
					 }



				 }
			 break;
 80018d4:	e39f      	b.n	8002016 <SysTick_Handler+0xae6>
			 case  SOCK_INIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 80018d6:	4b92      	ldr	r3, [pc, #584]	; (8001b20 <SysTick_Handler+0x5f0>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <SysTick_Handler+0x3b6>
 80018de:	2111      	movs	r1, #17
 80018e0:	4893      	ldr	r0, [pc, #588]	; (8001b30 <SysTick_Handler+0x600>)
 80018e2:	f7ff fe09 	bl	80014f8 <ITM0_Write>
					 if(ETH.S_ENserver == 1)
 80018e6:	4b90      	ldr	r3, [pc, #576]	; (8001b28 <SysTick_Handler+0x5f8>)
 80018e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ec:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d119      	bne.n	8001928 <SysTick_Handler+0x3f8>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 80018f4:	4b8a      	ldr	r3, [pc, #552]	; (8001b20 <SysTick_Handler+0x5f0>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <SysTick_Handler+0x3d4>
 80018fc:	2111      	movs	r1, #17
 80018fe:	488c      	ldr	r0, [pc, #560]	; (8001b30 <SysTick_Handler+0x600>)
 8001900:	f7ff fdfa 	bl	80014f8 <ITM0_Write>
						 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_INIT \r\n",strlen("\r\n S0_SOCK_INIT \r\n"));
 8001904:	4b8b      	ldr	r3, [pc, #556]	; (8001b34 <SysTick_Handler+0x604>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d004      	beq.n	8001916 <SysTick_Handler+0x3e6>
 800190c:	2212      	movs	r2, #18
 800190e:	498a      	ldr	r1, [pc, #552]	; (8001b38 <SysTick_Handler+0x608>)
 8001910:	488a      	ldr	r0, [pc, #552]	; (8001b3c <SysTick_Handler+0x60c>)
 8001912:	f003 fe4d 	bl	80055b0 <HAL_UART_Transmit_IT>
							eth_wr_SOCKET_CMD(&ETH, S0_REG, LISTEN );
 8001916:	2202      	movs	r2, #2
 8001918:	2101      	movs	r1, #1
 800191a:	4883      	ldr	r0, [pc, #524]	; (8001b28 <SysTick_Handler+0x5f8>)
 800191c:	f00b fde0 	bl	800d4e0 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001920:	4b81      	ldr	r3, [pc, #516]	; (8001b28 <SysTick_Handler+0x5f8>)
 8001922:	2200      	movs	r2, #0
 8001924:	829a      	strh	r2, [r3, #20]
						 	if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n ETH-W5500-CONNECT \r\n",strlen("\r\n ETH-W5500-CONNECT \r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 8001926:	e379      	b.n	800201c <SysTick_Handler+0xaec>
						    eth_wr_SOCKET_CMD(&ETH,S0_REG, CONNECT);																				//only for server
 8001928:	2204      	movs	r2, #4
 800192a:	2101      	movs	r1, #1
 800192c:	487e      	ldr	r0, [pc, #504]	; (8001b28 <SysTick_Handler+0x5f8>)
 800192e:	f00b fdd7 	bl	800d4e0 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5500-CONNECT\r\n",strlen("\r\nETH-W5500-CONNECT\r\n"));
 8001932:	4b7b      	ldr	r3, [pc, #492]	; (8001b20 <SysTick_Handler+0x5f0>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <SysTick_Handler+0x412>
 800193a:	2115      	movs	r1, #21
 800193c:	4880      	ldr	r0, [pc, #512]	; (8001b40 <SysTick_Handler+0x610>)
 800193e:	f7ff fddb 	bl	80014f8 <ITM0_Write>
						 	if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n ETH-W5500-CONNECT \r\n",strlen("\r\n ETH-W5500-CONNECT \r\n"));
 8001942:	4b7c      	ldr	r3, [pc, #496]	; (8001b34 <SysTick_Handler+0x604>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <SysTick_Handler+0x424>
 800194a:	2217      	movs	r2, #23
 800194c:	497d      	ldr	r1, [pc, #500]	; (8001b44 <SysTick_Handler+0x614>)
 800194e:	487b      	ldr	r0, [pc, #492]	; (8001b3c <SysTick_Handler+0x60c>)
 8001950:	f003 fe2e 	bl	80055b0 <HAL_UART_Transmit_IT>
						 	ETH.ETH_WDG=0;
 8001954:	4b74      	ldr	r3, [pc, #464]	; (8001b28 <SysTick_Handler+0x5f8>)
 8001956:	2200      	movs	r2, #0
 8001958:	829a      	strh	r2, [r3, #20]
			 break;
 800195a:	e35f      	b.n	800201c <SysTick_Handler+0xaec>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 800195c:	4b70      	ldr	r3, [pc, #448]	; (8001b20 <SysTick_Handler+0x5f0>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <SysTick_Handler+0x43c>
 8001964:	2113      	movs	r1, #19
 8001966:	4878      	ldr	r0, [pc, #480]	; (8001b48 <SysTick_Handler+0x618>)
 8001968:	f7ff fdc6 	bl	80014f8 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_LISTEN \r\n",strlen("\r\n S0_SOCK_LISTEN \r\n"));
 800196c:	4b71      	ldr	r3, [pc, #452]	; (8001b34 <SysTick_Handler+0x604>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d004      	beq.n	800197e <SysTick_Handler+0x44e>
 8001974:	2214      	movs	r2, #20
 8001976:	4975      	ldr	r1, [pc, #468]	; (8001b4c <SysTick_Handler+0x61c>)
 8001978:	4870      	ldr	r0, [pc, #448]	; (8001b3c <SysTick_Handler+0x60c>)
 800197a:	f003 fe19 	bl	80055b0 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 800197e:	4b6a      	ldr	r3, [pc, #424]	; (8001b28 <SysTick_Handler+0x5f8>)
 8001980:	2200      	movs	r2, #0
 8001982:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001984:	e34a      	b.n	800201c <SysTick_Handler+0xaec>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 8001986:	4b66      	ldr	r3, [pc, #408]	; (8001b20 <SysTick_Handler+0x5f0>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <SysTick_Handler+0x466>
 800198e:	2114      	movs	r1, #20
 8001990:	486f      	ldr	r0, [pc, #444]	; (8001b50 <SysTick_Handler+0x620>)
 8001992:	f7ff fdb1 	bl	80014f8 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_SYNSENT \r\n",strlen("\r\n S0_SOCK_SYNSENT \r\n"));
 8001996:	4b67      	ldr	r3, [pc, #412]	; (8001b34 <SysTick_Handler+0x604>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <SysTick_Handler+0x478>
 800199e:	2215      	movs	r2, #21
 80019a0:	496c      	ldr	r1, [pc, #432]	; (8001b54 <SysTick_Handler+0x624>)
 80019a2:	4866      	ldr	r0, [pc, #408]	; (8001b3c <SysTick_Handler+0x60c>)
 80019a4:	f003 fe04 	bl	80055b0 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 80019a8:	4b5f      	ldr	r3, [pc, #380]	; (8001b28 <SysTick_Handler+0x5f8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 80019ae:	e335      	b.n	800201c <SysTick_Handler+0xaec>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 80019b0:	4b5b      	ldr	r3, [pc, #364]	; (8001b20 <SysTick_Handler+0x5f0>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <SysTick_Handler+0x490>
 80019b8:	2114      	movs	r1, #20
 80019ba:	4867      	ldr	r0, [pc, #412]	; (8001b58 <SysTick_Handler+0x628>)
 80019bc:	f7ff fd9c 	bl	80014f8 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_SYNRECV \r\n",strlen("\r\n S0_SOCK_SYNRECV \r\n"));
 80019c0:	4b5c      	ldr	r3, [pc, #368]	; (8001b34 <SysTick_Handler+0x604>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d004      	beq.n	80019d2 <SysTick_Handler+0x4a2>
 80019c8:	2215      	movs	r2, #21
 80019ca:	4964      	ldr	r1, [pc, #400]	; (8001b5c <SysTick_Handler+0x62c>)
 80019cc:	485b      	ldr	r0, [pc, #364]	; (8001b3c <SysTick_Handler+0x60c>)
 80019ce:	f003 fdef 	bl	80055b0 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 80019d2:	4b55      	ldr	r3, [pc, #340]	; (8001b28 <SysTick_Handler+0x5f8>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 80019d8:	e320      	b.n	800201c <SysTick_Handler+0xaec>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 80019da:	4b51      	ldr	r3, [pc, #324]	; (8001b20 <SysTick_Handler+0x5f0>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <SysTick_Handler+0x4ba>
 80019e2:	2118      	movs	r1, #24
 80019e4:	485e      	ldr	r0, [pc, #376]	; (8001b60 <SysTick_Handler+0x630>)
 80019e6:	f7ff fd87 	bl	80014f8 <ITM0_Write>
					 //if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_ESTABLISHED \r\n",strlen("\r\n S0_SOCK_ESTABLISHED \r\n"));
					 ETH.ETH_WDG=0;
 80019ea:	4b4f      	ldr	r3, [pc, #316]	; (8001b28 <SysTick_Handler+0x5f8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	829a      	strh	r2, [r3, #20]

					if (ETH.S_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 80019f0:	4b4d      	ldr	r3, [pc, #308]	; (8001b28 <SysTick_Handler+0x5f8>)
 80019f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f6:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	f040 80c6 	bne.w	8001b8c <SysTick_Handler+0x65c>
					{

						S0_get_size = SPI_ETH_REG(&ETH, S_RX_RSR ,S0_REG, SPI_READ, spi_Data,2);//S0_get_size = SPI_ETH_REG(&ETH, S_RX_SZ_ADDR_BASEHH,S_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 8001a00:	2302      	movs	r3, #2
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	4b57      	ldr	r3, [pc, #348]	; (8001b64 <SysTick_Handler+0x634>)
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	2126      	movs	r1, #38	; 0x26
 8001a0e:	4846      	ldr	r0, [pc, #280]	; (8001b28 <SysTick_Handler+0x5f8>)
 8001a10:	f00b fc17 	bl	800d242 <SPI_ETH_REG>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b53      	ldr	r3, [pc, #332]	; (8001b68 <SysTick_Handler+0x638>)
 8001a1a:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001a1c:	4b52      	ldr	r3, [pc, #328]	; (8001b68 <SysTick_Handler+0x638>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 82fa 	beq.w	800201a <SysTick_Handler+0xaea>
							{
								eth_rd_SOCKET_DATA(&ETH,S0_RX_BUFF,&rx_mem_pointer,S0_get_size); // read socket data
 8001a26:	4b50      	ldr	r3, [pc, #320]	; (8001b68 <SysTick_Handler+0x638>)
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	4a50      	ldr	r2, [pc, #320]	; (8001b6c <SysTick_Handler+0x63c>)
 8001a2c:	2103      	movs	r1, #3
 8001a2e:	483e      	ldr	r0, [pc, #248]	; (8001b28 <SysTick_Handler+0x5f8>)
 8001a30:	f00b ffea 	bl	800da08 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S_RX_RD0,rx_mem_pointer,S0_REG );		// write rx memory pointer
 8001a34:	4b4d      	ldr	r3, [pc, #308]	; (8001b6c <SysTick_Handler+0x63c>)
 8001a36:	881a      	ldrh	r2, [r3, #0]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	2128      	movs	r1, #40	; 0x28
 8001a3c:	483a      	ldr	r0, [pc, #232]	; (8001b28 <SysTick_Handler+0x5f8>)
 8001a3e:	f00b fc86 	bl	800d34e <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,RECV);							// write command to execute
 8001a42:	2240      	movs	r2, #64	; 0x40
 8001a44:	2101      	movs	r1, #1
 8001a46:	4838      	ldr	r0, [pc, #224]	; (8001b28 <SysTick_Handler+0x5f8>)
 8001a48:	f00b fd4a 	bl	800d4e0 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,S0_REG))						// wait until end of command execution
 8001a4c:	bf00      	nop
 8001a4e:	2101      	movs	r1, #1
 8001a50:	4835      	ldr	r0, [pc, #212]	; (8001b28 <SysTick_Handler+0x5f8>)
 8001a52:	f00b ffbe 	bl	800d9d2 <eth_rd_SOCKET_CMD>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f8      	bne.n	8001a4e <SysTick_Handler+0x51e>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001a5c:	4b42      	ldr	r3, [pc, #264]	; (8001b68 <SysTick_Handler+0x638>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	2300      	movs	r3, #0
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	2300      	movs	r3, #0
 8001a68:	4941      	ldr	r1, [pc, #260]	; (8001b70 <SysTick_Handler+0x640>)
 8001a6a:	4842      	ldr	r0, [pc, #264]	; (8001b74 <SysTick_Handler+0x644>)
 8001a6c:	f00d fb0e 	bl	800f08c <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001a70:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <SysTick_Handler+0x638>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	4b40      	ldr	r3, [pc, #256]	; (8001b78 <SysTick_Handler+0x648>)
 8001a78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

								if(S0_get_size > 0)	{ ETH.S_data_available=1;}					//Flag data received
 8001a7c:	4b3a      	ldr	r3, [pc, #232]	; (8001b68 <SysTick_Handler+0x638>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <SysTick_Handler+0x55a>
 8001a84:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <SysTick_Handler+0x5f8>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	769a      	strb	r2, [r3, #26]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001a8a:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <SysTick_Handler+0x648>)
 8001a8c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001a90:	4619      	mov	r1, r3
 8001a92:	4838      	ldr	r0, [pc, #224]	; (8001b74 <SysTick_Handler+0x644>)
 8001a94:	f00a f876 	bl	800bb84 <ModBUS_Check>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00d      	beq.n	8001aba <SysTick_Handler+0x58a>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001a9e:	4836      	ldr	r0, [pc, #216]	; (8001b78 <SysTick_Handler+0x648>)
 8001aa0:	f00a f972 	bl	800bd88 <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001aa4:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <SysTick_Handler+0x648>)
 8001aa6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8001aaa:	2300      	movs	r3, #0
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	4932      	ldr	r1, [pc, #200]	; (8001b7c <SysTick_Handler+0x64c>)
 8001ab2:	482f      	ldr	r0, [pc, #188]	; (8001b70 <SysTick_Handler+0x640>)
 8001ab4:	f00d faea 	bl	800f08c <CopiaVector>
 8001ab8:	e010      	b.n	8001adc <SysTick_Handler+0x5ac>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <SysTick_Handler+0x5f0>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <SysTick_Handler+0x59a>
 8001ac2:	2111      	movs	r1, #17
 8001ac4:	482e      	ldr	r0, [pc, #184]	; (8001b80 <SysTick_Handler+0x650>)
 8001ac6:	f7ff fd17 	bl	80014f8 <ITM0_Write>
									if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n NO MBUS \r\n",strlen("\r\n NO MBUS \r\n"));
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <SysTick_Handler+0x604>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d004      	beq.n	8001adc <SysTick_Handler+0x5ac>
 8001ad2:	220d      	movs	r2, #13
 8001ad4:	492a      	ldr	r1, [pc, #168]	; (8001b80 <SysTick_Handler+0x650>)
 8001ad6:	4819      	ldr	r0, [pc, #100]	; (8001b3c <SysTick_Handler+0x60c>)
 8001ad8:	f003 fd6a 	bl	80055b0 <HAL_UART_Transmit_IT>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001adc:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <SysTick_Handler+0x648>)
 8001ade:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <SysTick_Handler+0x654>)
 8001ae6:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,S0_RX_BUFF, &tx_mem_pointer, send_size);	// write socket data
 8001ae8:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <SysTick_Handler+0x654>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	4a26      	ldr	r2, [pc, #152]	; (8001b88 <SysTick_Handler+0x658>)
 8001aee:	2103      	movs	r1, #3
 8001af0:	480d      	ldr	r0, [pc, #52]	; (8001b28 <SysTick_Handler+0x5f8>)
 8001af2:	f00c f81a 	bl	800db2a <eth_wr_SOCKET_DATA>

								SPI_ETH_WR_REG_16(&ETH,S_TX_WR,tx_mem_pointer,S0_REG);			// write tx memory pointer//SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer,0);			// write tx memory pointer
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <SysTick_Handler+0x658>)
 8001af8:	881a      	ldrh	r2, [r3, #0]
 8001afa:	2301      	movs	r3, #1
 8001afc:	2124      	movs	r1, #36	; 0x24
 8001afe:	480a      	ldr	r0, [pc, #40]	; (8001b28 <SysTick_Handler+0x5f8>)
 8001b00:	f00b fc25 	bl	800d34e <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,SEND);							// write command to execute
 8001b04:	2220      	movs	r2, #32
 8001b06:	2101      	movs	r1, #1
 8001b08:	4807      	ldr	r0, [pc, #28]	; (8001b28 <SysTick_Handler+0x5f8>)
 8001b0a:	f00b fce9 	bl	800d4e0 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,S0_REG))						// wait until end of command execution
 8001b0e:	bf00      	nop
 8001b10:	2101      	movs	r1, #1
 8001b12:	4805      	ldr	r0, [pc, #20]	; (8001b28 <SysTick_Handler+0x5f8>)
 8001b14:	f00b ff5d 	bl	800d9d2 <eth_rd_SOCKET_CMD>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f8      	bne.n	8001b10 <SysTick_Handler+0x5e0>

							}
						}
					}
				 }
			 break;
 8001b1e:	e27c      	b.n	800201a <SysTick_Handler+0xaea>
 8001b20:	200041c8 	.word	0x200041c8
 8001b24:	080107b4 	.word	0x080107b4
 8001b28:	20000304 	.word	0x20000304
 8001b2c:	20004233 	.word	0x20004233
 8001b30:	080107c8 	.word	0x080107c8
 8001b34:	20000021 	.word	0x20000021
 8001b38:	080107dc 	.word	0x080107dc
 8001b3c:	200002b8 	.word	0x200002b8
 8001b40:	080107f0 	.word	0x080107f0
 8001b44:	08010808 	.word	0x08010808
 8001b48:	08010820 	.word	0x08010820
 8001b4c:	08010834 	.word	0x08010834
 8001b50:	0801084c 	.word	0x0801084c
 8001b54:	08010864 	.word	0x08010864
 8001b58:	0801087c 	.word	0x0801087c
 8001b5c:	08010894 	.word	0x08010894
 8001b60:	080108ac 	.word	0x080108ac
 8001b64:	200041d8 	.word	0x200041d8
 8001b68:	200041d0 	.word	0x200041d0
 8001b6c:	200041d4 	.word	0x200041d4
 8001b70:	20000328 	.word	0x20000328
 8001b74:	2000313a 	.word	0x2000313a
 8001b78:	20003128 	.word	0x20003128
 8001b7c:	20003340 	.word	0x20003340
 8001b80:	080108c8 	.word	0x080108c8
 8001b84:	200041d6 	.word	0x200041d6
 8001b88:	200041d2 	.word	0x200041d2
						if (mb_eth._w_answer==0)
 8001b8c:	4ba7      	ldr	r3, [pc, #668]	; (8001e2c <SysTick_Handler+0x8fc>)
 8001b8e:	7a1b      	ldrb	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f040 8088 	bne.w	8001ca6 <SysTick_Handler+0x776>
							ETH.data[0]=0x00;
 8001b96:	4ba6      	ldr	r3, [pc, #664]	; (8001e30 <SysTick_Handler+0x900>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[1]=0x00;
 8001b9e:	4ba4      	ldr	r3, [pc, #656]	; (8001e30 <SysTick_Handler+0x900>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[2]=0x00;
 8001ba6:	4ba2      	ldr	r3, [pc, #648]	; (8001e30 <SysTick_Handler+0x900>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[3]=0x00;
 8001bae:	4ba0      	ldr	r3, [pc, #640]	; (8001e30 <SysTick_Handler+0x900>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							ETH.data[4]=0x00;
 8001bb6:	4b9e      	ldr	r3, [pc, #632]	; (8001e30 <SysTick_Handler+0x900>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
							ETH.data[5]=0x06;
 8001bbe:	4b9c      	ldr	r3, [pc, #624]	; (8001e30 <SysTick_Handler+0x900>)
 8001bc0:	2206      	movs	r2, #6
 8001bc2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
							ETH.data[6]=0x01;
 8001bc6:	4b9a      	ldr	r3, [pc, #616]	; (8001e30 <SysTick_Handler+0x900>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
							ETH.data[7]=0x03;
 8001bce:	4b98      	ldr	r3, [pc, #608]	; (8001e30 <SysTick_Handler+0x900>)
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
							ETH.data[8]=0x00;
 8001bd6:	4b96      	ldr	r3, [pc, #600]	; (8001e30 <SysTick_Handler+0x900>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
							ETH.data[9]=0x00;
 8001bde:	4b94      	ldr	r3, [pc, #592]	; (8001e30 <SysTick_Handler+0x900>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
							ETH.data[10]=0x00;
 8001be6:	4b92      	ldr	r3, [pc, #584]	; (8001e30 <SysTick_Handler+0x900>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
							ETH.data[11]=0x0A;
 8001bee:	4b90      	ldr	r3, [pc, #576]	; (8001e30 <SysTick_Handler+0x900>)
 8001bf0:	220a      	movs	r2, #10
 8001bf2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
							send_size=12;
 8001bf6:	4b8f      	ldr	r3, [pc, #572]	; (8001e34 <SysTick_Handler+0x904>)
 8001bf8:	220c      	movs	r2, #12
 8001bfa:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,16);
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	2100      	movs	r1, #0
 8001c00:	488a      	ldr	r0, [pc, #552]	; (8001e2c <SysTick_Handler+0x8fc>)
 8001c02:	f00a f86a 	bl	800bcda <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001c06:	2300      	movs	r3, #0
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	220c      	movs	r2, #12
 8001c0e:	498a      	ldr	r1, [pc, #552]	; (8001e38 <SysTick_Handler+0x908>)
 8001c10:	488a      	ldr	r0, [pc, #552]	; (8001e3c <SysTick_Handler+0x90c>)
 8001c12:	f00d fa3b 	bl	800f08c <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,S0_TX_BUFF, &tx_mem_pointer, send_size);	// write socket data
 8001c16:	4b87      	ldr	r3, [pc, #540]	; (8001e34 <SysTick_Handler+0x904>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	4a89      	ldr	r2, [pc, #548]	; (8001e40 <SysTick_Handler+0x910>)
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	4884      	ldr	r0, [pc, #528]	; (8001e30 <SysTick_Handler+0x900>)
 8001c20:	f00b ff83 	bl	800db2a <eth_wr_SOCKET_DATA>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001c24:	4982      	ldr	r1, [pc, #520]	; (8001e30 <SysTick_Handler+0x900>)
 8001c26:	4887      	ldr	r0, [pc, #540]	; (8001e44 <SysTick_Handler+0x914>)
 8001c28:	f00c f823 	bl	800dc72 <SPI_ETH_SNIFF>
							SPI_ETH_WR_REG_16(&ETH,S_TX_WR,tx_mem_pointer,S0_REG);			// write tx memory pointer
 8001c2c:	4b84      	ldr	r3, [pc, #528]	; (8001e40 <SysTick_Handler+0x910>)
 8001c2e:	881a      	ldrh	r2, [r3, #0]
 8001c30:	2301      	movs	r3, #1
 8001c32:	2124      	movs	r1, #36	; 0x24
 8001c34:	487e      	ldr	r0, [pc, #504]	; (8001e30 <SysTick_Handler+0x900>)
 8001c36:	f00b fb8a 	bl	800d34e <SPI_ETH_WR_REG_16>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001c3a:	497d      	ldr	r1, [pc, #500]	; (8001e30 <SysTick_Handler+0x900>)
 8001c3c:	4881      	ldr	r0, [pc, #516]	; (8001e44 <SysTick_Handler+0x914>)
 8001c3e:	f00c f818 	bl	800dc72 <SPI_ETH_SNIFF>
							eth_wr_SOCKET_CMD(&ETH,S0_REG,SEND);							// write command to execute
 8001c42:	2220      	movs	r2, #32
 8001c44:	2101      	movs	r1, #1
 8001c46:	487a      	ldr	r0, [pc, #488]	; (8001e30 <SysTick_Handler+0x900>)
 8001c48:	f00b fc4a 	bl	800d4e0 <eth_wr_SOCKET_CMD>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001c4c:	4978      	ldr	r1, [pc, #480]	; (8001e30 <SysTick_Handler+0x900>)
 8001c4e:	487d      	ldr	r0, [pc, #500]	; (8001e44 <SysTick_Handler+0x914>)
 8001c50:	f00c f80f 	bl	800dc72 <SPI_ETH_SNIFF>
							uint16_t read=0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
								read=SPI_ETH_REG(&ETH, S_IR,S0_REG,SPI_READ, ETH.GAR,1);
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	9301      	str	r3, [sp, #4]
 8001c5e:	4b7a      	ldr	r3, [pc, #488]	; (8001e48 <SysTick_Handler+0x918>)
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	2300      	movs	r3, #0
 8001c64:	2201      	movs	r2, #1
 8001c66:	2102      	movs	r1, #2
 8001c68:	4871      	ldr	r0, [pc, #452]	; (8001e30 <SysTick_Handler+0x900>)
 8001c6a:	f00b faea 	bl	800d242 <SPI_ETH_REG>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
							mb_eth._w_answer=1;	// Waiting answer flag_w_answer=1;	// Waiting answer flag
 8001c74:	4b6d      	ldr	r3, [pc, #436]	; (8001e2c <SysTick_Handler+0x8fc>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	721a      	strb	r2, [r3, #8]
							MB_TOUT_ticks=0;	// restart counting
 8001c7a:	4b74      	ldr	r3, [pc, #464]	; (8001e4c <SysTick_Handler+0x91c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001c80:	4b73      	ldr	r3, [pc, #460]	; (8001e50 <SysTick_Handler+0x920>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <SysTick_Handler+0x760>
 8001c88:	2117      	movs	r1, #23
 8001c8a:	4872      	ldr	r0, [pc, #456]	; (8001e54 <SysTick_Handler+0x924>)
 8001c8c:	f7ff fc34 	bl	80014f8 <ITM0_Write>
							if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n SENT MBUS REQ \r\n",strlen("\r\n SENT MBUS REQ \r\n"));
 8001c90:	4b71      	ldr	r3, [pc, #452]	; (8001e58 <SysTick_Handler+0x928>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 81c0 	beq.w	800201a <SysTick_Handler+0xaea>
 8001c9a:	2213      	movs	r2, #19
 8001c9c:	496d      	ldr	r1, [pc, #436]	; (8001e54 <SysTick_Handler+0x924>)
 8001c9e:	486f      	ldr	r0, [pc, #444]	; (8001e5c <SysTick_Handler+0x92c>)
 8001ca0:	f003 fc86 	bl	80055b0 <HAL_UART_Transmit_IT>
			 break;
 8001ca4:	e1b9      	b.n	800201a <SysTick_Handler+0xaea>
						S0_get_size = SPI_ETH_REG(&ETH, S_RX_RSR ,S0_REG ,SPI_READ, spi_Data,2);
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	4b6d      	ldr	r3, [pc, #436]	; (8001e60 <SysTick_Handler+0x930>)
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2126      	movs	r1, #38	; 0x26
 8001cb4:	485e      	ldr	r0, [pc, #376]	; (8001e30 <SysTick_Handler+0x900>)
 8001cb6:	f00b fac4 	bl	800d242 <SPI_ETH_REG>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b69      	ldr	r3, [pc, #420]	; (8001e64 <SysTick_Handler+0x934>)
 8001cc0:	801a      	strh	r2, [r3, #0]
						if(S0_get_size != 0x00)
 8001cc2:	4b68      	ldr	r3, [pc, #416]	; (8001e64 <SysTick_Handler+0x934>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 81a7 	beq.w	800201a <SysTick_Handler+0xaea>
								eth_rd_SOCKET_DATA(&ETH,S0_RX_BUFF,&rx_mem_pointer,S0_get_size); // read socket data
 8001ccc:	4b65      	ldr	r3, [pc, #404]	; (8001e64 <SysTick_Handler+0x934>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	4a65      	ldr	r2, [pc, #404]	; (8001e68 <SysTick_Handler+0x938>)
 8001cd2:	2103      	movs	r1, #3
 8001cd4:	4856      	ldr	r0, [pc, #344]	; (8001e30 <SysTick_Handler+0x900>)
 8001cd6:	f00b fe97 	bl	800da08 <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S_RX_RD0,rx_mem_pointer,S0_REG);		// write rx memory pointer
 8001cda:	4b63      	ldr	r3, [pc, #396]	; (8001e68 <SysTick_Handler+0x938>)
 8001cdc:	881a      	ldrh	r2, [r3, #0]
 8001cde:	2301      	movs	r3, #1
 8001ce0:	2128      	movs	r1, #40	; 0x28
 8001ce2:	4853      	ldr	r0, [pc, #332]	; (8001e30 <SysTick_Handler+0x900>)
 8001ce4:	f00b fb33 	bl	800d34e <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,RECV);							// write command to execute
 8001ce8:	2240      	movs	r2, #64	; 0x40
 8001cea:	2101      	movs	r1, #1
 8001cec:	4850      	ldr	r0, [pc, #320]	; (8001e30 <SysTick_Handler+0x900>)
 8001cee:	f00b fbf7 	bl	800d4e0 <eth_wr_SOCKET_CMD>
								if (ETH_DBG_EN) ITM0_Write("\r\n RCVD DATA \r\n",strlen("\r\n RCVD DATA \r\n"));
 8001cf2:	4b57      	ldr	r3, [pc, #348]	; (8001e50 <SysTick_Handler+0x920>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <SysTick_Handler+0x7d2>
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	485b      	ldr	r0, [pc, #364]	; (8001e6c <SysTick_Handler+0x93c>)
 8001cfe:	f7ff fbfb 	bl	80014f8 <ITM0_Write>
								if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n RCVD DATA \r\n",strlen("\r\n RCVD DATA \r\n"));
 8001d02:	4b55      	ldr	r3, [pc, #340]	; (8001e58 <SysTick_Handler+0x928>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d004      	beq.n	8001d14 <SysTick_Handler+0x7e4>
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	4957      	ldr	r1, [pc, #348]	; (8001e6c <SysTick_Handler+0x93c>)
 8001d0e:	4853      	ldr	r0, [pc, #332]	; (8001e5c <SysTick_Handler+0x92c>)
 8001d10:	f003 fc4e 	bl	80055b0 <HAL_UART_Transmit_IT>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001d14:	4b53      	ldr	r3, [pc, #332]	; (8001e64 <SysTick_Handler+0x934>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	4946      	ldr	r1, [pc, #280]	; (8001e3c <SysTick_Handler+0x90c>)
 8001d22:	4853      	ldr	r0, [pc, #332]	; (8001e70 <SysTick_Handler+0x940>)
 8001d24:	f00d f9b2 	bl	800f08c <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001d28:	4b4e      	ldr	r3, [pc, #312]	; (8001e64 <SysTick_Handler+0x934>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b3f      	ldr	r3, [pc, #252]	; (8001e2c <SysTick_Handler+0x8fc>)
 8001d30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
								if(S0_get_size > 0)	{ ETH.S_data_available=1;}
 8001d34:	4b4b      	ldr	r3, [pc, #300]	; (8001e64 <SysTick_Handler+0x934>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <SysTick_Handler+0x812>
 8001d3c:	4b3c      	ldr	r3, [pc, #240]	; (8001e30 <SysTick_Handler+0x900>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	769a      	strb	r2, [r3, #26]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001d42:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <SysTick_Handler+0x8fc>)
 8001d44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4849      	ldr	r0, [pc, #292]	; (8001e70 <SysTick_Handler+0x940>)
 8001d4c:	f009 ff1a 	bl	800bb84 <ModBUS_Check>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d02d      	beq.n	8001db2 <SysTick_Handler+0x882>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001d56:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <SysTick_Handler+0x8fc>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	721a      	strb	r2, [r3, #8]
										MB_TOUT_ticks=0;
 8001d5c:	4b3b      	ldr	r3, [pc, #236]	; (8001e4c <SysTick_Handler+0x91c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001d62:	4832      	ldr	r0, [pc, #200]	; (8001e2c <SysTick_Handler+0x8fc>)
 8001d64:	f00a f810 	bl	800bd88 <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001d68:	4b30      	ldr	r3, [pc, #192]	; (8001e2c <SysTick_Handler+0x8fc>)
 8001d6a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d6e:	2300      	movs	r3, #0
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2300      	movs	r3, #0
 8001d74:	493e      	ldr	r1, [pc, #248]	; (8001e70 <SysTick_Handler+0x940>)
 8001d76:	483f      	ldr	r0, [pc, #252]	; (8001e74 <SysTick_Handler+0x944>)
 8001d78:	f00d f988 	bl	800f08c <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	2300      	movs	r3, #0
 8001d82:	2240      	movs	r2, #64	; 0x40
 8001d84:	493c      	ldr	r1, [pc, #240]	; (8001e78 <SysTick_Handler+0x948>)
 8001d86:	483d      	ldr	r0, [pc, #244]	; (8001e7c <SysTick_Handler+0x94c>)
 8001d88:	f00d f980 	bl	800f08c <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\ RCVD MBUS REQ \r\n"));
 8001d8c:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <SysTick_Handler+0x920>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <SysTick_Handler+0x86c>
 8001d94:	2113      	movs	r1, #19
 8001d96:	483a      	ldr	r0, [pc, #232]	; (8001e80 <SysTick_Handler+0x950>)
 8001d98:	f7ff fbae 	bl	80014f8 <ITM0_Write>
										if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n RCVD MBUS REQ \r\n",strlen("\r\n RCVD MBUS REQ \r\n"));
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <SysTick_Handler+0x928>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 813a 	beq.w	800201a <SysTick_Handler+0xaea>
 8001da6:	2213      	movs	r2, #19
 8001da8:	4935      	ldr	r1, [pc, #212]	; (8001e80 <SysTick_Handler+0x950>)
 8001daa:	482c      	ldr	r0, [pc, #176]	; (8001e5c <SysTick_Handler+0x92c>)
 8001dac:	f003 fc00 	bl	80055b0 <HAL_UART_Transmit_IT>
			 break;
 8001db0:	e133      	b.n	800201a <SysTick_Handler+0xaea>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n NO MBUS \r\n"));
 8001db2:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <SysTick_Handler+0x920>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <SysTick_Handler+0x892>
 8001dba:	210d      	movs	r1, #13
 8001dbc:	4831      	ldr	r0, [pc, #196]	; (8001e84 <SysTick_Handler+0x954>)
 8001dbe:	f7ff fb9b 	bl	80014f8 <ITM0_Write>
										if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n NO MBUS \r\n",strlen("\r\n NO MBUS \r\n"));
 8001dc2:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <SysTick_Handler+0x928>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8127 	beq.w	800201a <SysTick_Handler+0xaea>
 8001dcc:	220d      	movs	r2, #13
 8001dce:	492d      	ldr	r1, [pc, #180]	; (8001e84 <SysTick_Handler+0x954>)
 8001dd0:	4822      	ldr	r0, [pc, #136]	; (8001e5c <SysTick_Handler+0x92c>)
 8001dd2:	f003 fbed 	bl	80055b0 <HAL_UART_Transmit_IT>
			 break;
 8001dd6:	e120      	b.n	800201a <SysTick_Handler+0xaea>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	; (8001e50 <SysTick_Handler+0x920>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d003      	beq.n	8001de8 <SysTick_Handler+0x8b8>
 8001de0:	2115      	movs	r1, #21
 8001de2:	4829      	ldr	r0, [pc, #164]	; (8001e88 <SysTick_Handler+0x958>)
 8001de4:	f7ff fb88 	bl	80014f8 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_FIN_WAIT \r\n",strlen("\r\n S0_SOCK_FIN_WAIT \r\n"));
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <SysTick_Handler+0x928>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d004      	beq.n	8001dfa <SysTick_Handler+0x8ca>
 8001df0:	2216      	movs	r2, #22
 8001df2:	4926      	ldr	r1, [pc, #152]	; (8001e8c <SysTick_Handler+0x95c>)
 8001df4:	4819      	ldr	r0, [pc, #100]	; (8001e5c <SysTick_Handler+0x92c>)
 8001df6:	f003 fbdb 	bl	80055b0 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <SysTick_Handler+0x900>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001e00:	e10c      	b.n	800201c <SysTick_Handler+0xaec>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001e02:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <SysTick_Handler+0x920>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <SysTick_Handler+0x8e2>
 8001e0a:	2114      	movs	r1, #20
 8001e0c:	4820      	ldr	r0, [pc, #128]	; (8001e90 <SysTick_Handler+0x960>)
 8001e0e:	f7ff fb73 	bl	80014f8 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_CLOSING \r\n",strlen("\r\n S0_SOCK_CLOSING \r\n"));
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <SysTick_Handler+0x928>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d004      	beq.n	8001e24 <SysTick_Handler+0x8f4>
 8001e1a:	2215      	movs	r2, #21
 8001e1c:	491d      	ldr	r1, [pc, #116]	; (8001e94 <SysTick_Handler+0x964>)
 8001e1e:	480f      	ldr	r0, [pc, #60]	; (8001e5c <SysTick_Handler+0x92c>)
 8001e20:	f003 fbc6 	bl	80055b0 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001e24:	4b02      	ldr	r3, [pc, #8]	; (8001e30 <SysTick_Handler+0x900>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001e2a:	e0f7      	b.n	800201c <SysTick_Handler+0xaec>
 8001e2c:	20003128 	.word	0x20003128
 8001e30:	20000304 	.word	0x20000304
 8001e34:	200041d6 	.word	0x200041d6
 8001e38:	20003340 	.word	0x20003340
 8001e3c:	20000328 	.word	0x20000328
 8001e40:	200041d2 	.word	0x200041d2
 8001e44:	20001378 	.word	0x20001378
 8001e48:	20001328 	.word	0x20001328
 8001e4c:	20004654 	.word	0x20004654
 8001e50:	200041c8 	.word	0x200041c8
 8001e54:	080108d8 	.word	0x080108d8
 8001e58:	20000021 	.word	0x20000021
 8001e5c:	200002b8 	.word	0x200002b8
 8001e60:	200041d8 	.word	0x200041d8
 8001e64:	200041d0 	.word	0x200041d0
 8001e68:	200041d4 	.word	0x200041d4
 8001e6c:	080108ec 	.word	0x080108ec
 8001e70:	2000313a 	.word	0x2000313a
 8001e74:	20000b28 	.word	0x20000b28
 8001e78:	2000354c 	.word	0x2000354c
 8001e7c:	20003b9c 	.word	0x20003b9c
 8001e80:	080108fc 	.word	0x080108fc
 8001e84:	080108c8 	.word	0x080108c8
 8001e88:	08010910 	.word	0x08010910
 8001e8c:	08010928 	.word	0x08010928
 8001e90:	08010940 	.word	0x08010940
 8001e94:	08010958 	.word	0x08010958
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001e98:	4b79      	ldr	r3, [pc, #484]	; (8002080 <SysTick_Handler+0xb50>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <SysTick_Handler+0x978>
 8001ea0:	2116      	movs	r1, #22
 8001ea2:	4878      	ldr	r0, [pc, #480]	; (8002084 <SysTick_Handler+0xb54>)
 8001ea4:	f7ff fb28 	bl	80014f8 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n nS0_SOCK_TIME_WAIT \r\n",strlen("\r\n nS0_SOCK_TIME_WAIT \r\n"));
 8001ea8:	4b77      	ldr	r3, [pc, #476]	; (8002088 <SysTick_Handler+0xb58>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d004      	beq.n	8001eba <SysTick_Handler+0x98a>
 8001eb0:	2218      	movs	r2, #24
 8001eb2:	4976      	ldr	r1, [pc, #472]	; (800208c <SysTick_Handler+0xb5c>)
 8001eb4:	4876      	ldr	r0, [pc, #472]	; (8002090 <SysTick_Handler+0xb60>)
 8001eb6:	f003 fb7b 	bl	80055b0 <HAL_UART_Transmit_IT>
					eth_wr_SOCKET_CMD(&ETH,S0_REG, DISCON );
 8001eba:	2208      	movs	r2, #8
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	4875      	ldr	r0, [pc, #468]	; (8002094 <SysTick_Handler+0xb64>)
 8001ec0:	f00b fb0e 	bl	800d4e0 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH,S_CR ,S0_REG,SPI_READ, spi_Data,1))//while( SPI_ETH_REG(&ETH, S_CR_ADDR_BASEH,S_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001ec4:	bf00      	nop
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	4b73      	ldr	r3, [pc, #460]	; (8002098 <SysTick_Handler+0xb68>)
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	486f      	ldr	r0, [pc, #444]	; (8002094 <SysTick_Handler+0xb64>)
 8001ed6:	f00b f9b4 	bl	800d242 <SPI_ETH_REG>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f2      	bne.n	8001ec6 <SysTick_Handler+0x996>
					{}
					ETH.ETH_WDG=0;
 8001ee0:	4b6c      	ldr	r3, [pc, #432]	; (8002094 <SysTick_Handler+0xb64>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001ee6:	e099      	b.n	800201c <SysTick_Handler+0xaec>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001ee8:	4b65      	ldr	r3, [pc, #404]	; (8002080 <SysTick_Handler+0xb50>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <SysTick_Handler+0x9c8>
 8001ef0:	2117      	movs	r1, #23
 8001ef2:	486a      	ldr	r0, [pc, #424]	; (800209c <SysTick_Handler+0xb6c>)
 8001ef4:	f7ff fb00 	bl	80014f8 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_CLOSE_WAIT \r\n",strlen("\r\n S0_SOCK_CLOSE_WAIT \r\n"));
 8001ef8:	4b63      	ldr	r3, [pc, #396]	; (8002088 <SysTick_Handler+0xb58>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d004      	beq.n	8001f0a <SysTick_Handler+0x9da>
 8001f00:	2218      	movs	r2, #24
 8001f02:	4967      	ldr	r1, [pc, #412]	; (80020a0 <SysTick_Handler+0xb70>)
 8001f04:	4862      	ldr	r0, [pc, #392]	; (8002090 <SysTick_Handler+0xb60>)
 8001f06:	f003 fb53 	bl	80055b0 <HAL_UART_Transmit_IT>
					eth_wr_SOCKET_CMD(&ETH,S0_REG,DISCON );
 8001f0a:	2208      	movs	r2, #8
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	4861      	ldr	r0, [pc, #388]	; (8002094 <SysTick_Handler+0xb64>)
 8001f10:	f00b fae6 	bl	800d4e0 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH,S_CR,S0_REG,SPI_READ, spi_Data,1))
 8001f14:	bf00      	nop
 8001f16:	2301      	movs	r3, #1
 8001f18:	9301      	str	r3, [sp, #4]
 8001f1a:	4b5f      	ldr	r3, [pc, #380]	; (8002098 <SysTick_Handler+0xb68>)
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	2201      	movs	r2, #1
 8001f22:	2101      	movs	r1, #1
 8001f24:	485b      	ldr	r0, [pc, #364]	; (8002094 <SysTick_Handler+0xb64>)
 8001f26:	f00b f98c 	bl	800d242 <SPI_ETH_REG>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f2      	bne.n	8001f16 <SysTick_Handler+0x9e6>
					{}
					ETH.ETH_WDG=0;
 8001f30:	4b58      	ldr	r3, [pc, #352]	; (8002094 <SysTick_Handler+0xb64>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f36:	e071      	b.n	800201c <SysTick_Handler+0xaec>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_LAST_ACK \r\n",strlen("\r\n S0_SOCK_LAST_ACK \r\n"));
 8001f38:	4b51      	ldr	r3, [pc, #324]	; (8002080 <SysTick_Handler+0xb50>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <SysTick_Handler+0xa18>
 8001f40:	2116      	movs	r1, #22
 8001f42:	4858      	ldr	r0, [pc, #352]	; (80020a4 <SysTick_Handler+0xb74>)
 8001f44:	f7ff fad8 	bl	80014f8 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_LAST_ACK \r\n",strlen("\r\n S0_SOCK_LAST_ACK \r\n"));
 8001f48:	4b4f      	ldr	r3, [pc, #316]	; (8002088 <SysTick_Handler+0xb58>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d004      	beq.n	8001f5a <SysTick_Handler+0xa2a>
 8001f50:	2216      	movs	r2, #22
 8001f52:	4954      	ldr	r1, [pc, #336]	; (80020a4 <SysTick_Handler+0xb74>)
 8001f54:	484e      	ldr	r0, [pc, #312]	; (8002090 <SysTick_Handler+0xb60>)
 8001f56:	f003 fb2b 	bl	80055b0 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001f5a:	4b4e      	ldr	r3, [pc, #312]	; (8002094 <SysTick_Handler+0xb64>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f60:	e05c      	b.n	800201c <SysTick_Handler+0xaec>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_UDP \r\n",strlen("\r\n S0_SOCK_UDP \r\n"));
 8001f62:	4b47      	ldr	r3, [pc, #284]	; (8002080 <SysTick_Handler+0xb50>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <SysTick_Handler+0xa42>
 8001f6a:	2111      	movs	r1, #17
 8001f6c:	484e      	ldr	r0, [pc, #312]	; (80020a8 <SysTick_Handler+0xb78>)
 8001f6e:	f7ff fac3 	bl	80014f8 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_UDP \r\n",strlen("\r\n S0_SOCK_UDP \r\n"));
 8001f72:	4b45      	ldr	r3, [pc, #276]	; (8002088 <SysTick_Handler+0xb58>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d004      	beq.n	8001f84 <SysTick_Handler+0xa54>
 8001f7a:	2211      	movs	r2, #17
 8001f7c:	494a      	ldr	r1, [pc, #296]	; (80020a8 <SysTick_Handler+0xb78>)
 8001f7e:	4844      	ldr	r0, [pc, #272]	; (8002090 <SysTick_Handler+0xb60>)
 8001f80:	f003 fb16 	bl	80055b0 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001f84:	4b43      	ldr	r3, [pc, #268]	; (8002094 <SysTick_Handler+0xb64>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f8a:	e047      	b.n	800201c <SysTick_Handler+0xaec>
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_IPRAW \r\n",strlen("\r\n S0_SOCK_IPRAW \r\n"));
 8001f8c:	4b3c      	ldr	r3, [pc, #240]	; (8002080 <SysTick_Handler+0xb50>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <SysTick_Handler+0xa6c>
 8001f94:	2113      	movs	r1, #19
 8001f96:	4845      	ldr	r0, [pc, #276]	; (80020ac <SysTick_Handler+0xb7c>)
 8001f98:	f7ff faae 	bl	80014f8 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_IPRAW \r\n",strlen("\r\n S0_SOCK_IPRAW \r\n"));
 8001f9c:	4b3a      	ldr	r3, [pc, #232]	; (8002088 <SysTick_Handler+0xb58>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d004      	beq.n	8001fae <SysTick_Handler+0xa7e>
 8001fa4:	2213      	movs	r2, #19
 8001fa6:	4941      	ldr	r1, [pc, #260]	; (80020ac <SysTick_Handler+0xb7c>)
 8001fa8:	4839      	ldr	r0, [pc, #228]	; (8002090 <SysTick_Handler+0xb60>)
 8001faa:	f003 fb01 	bl	80055b0 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001fae:	4b39      	ldr	r3, [pc, #228]	; (8002094 <SysTick_Handler+0xb64>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001fb4:	e032      	b.n	800201c <SysTick_Handler+0xaec>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_MACRAW \r\n",strlen("\r\n S0_SOCK_MACRAW \r\n"));
 8001fb6:	4b32      	ldr	r3, [pc, #200]	; (8002080 <SysTick_Handler+0xb50>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <SysTick_Handler+0xa96>
 8001fbe:	2114      	movs	r1, #20
 8001fc0:	483b      	ldr	r0, [pc, #236]	; (80020b0 <SysTick_Handler+0xb80>)
 8001fc2:	f7ff fa99 	bl	80014f8 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_MACRAW \r\n",strlen("\r\n S0_SOCK_MACRAW \r\n"));
 8001fc6:	4b30      	ldr	r3, [pc, #192]	; (8002088 <SysTick_Handler+0xb58>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d004      	beq.n	8001fd8 <SysTick_Handler+0xaa8>
 8001fce:	2214      	movs	r2, #20
 8001fd0:	4937      	ldr	r1, [pc, #220]	; (80020b0 <SysTick_Handler+0xb80>)
 8001fd2:	482f      	ldr	r0, [pc, #188]	; (8002090 <SysTick_Handler+0xb60>)
 8001fd4:	f003 faec 	bl	80055b0 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001fd8:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <SysTick_Handler+0xb64>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001fde:	e01d      	b.n	800201c <SysTick_Handler+0xaec>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_PPOE \r\n",strlen("\r\n S0_SOCK_PPOE \r\n"));
 8001fe0:	4b27      	ldr	r3, [pc, #156]	; (8002080 <SysTick_Handler+0xb50>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <SysTick_Handler+0xac0>
 8001fe8:	2112      	movs	r1, #18
 8001fea:	4832      	ldr	r0, [pc, #200]	; (80020b4 <SysTick_Handler+0xb84>)
 8001fec:	f7ff fa84 	bl	80014f8 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_PPOE \r\n",strlen("\r\n S0_SOCK_UDP \r\n"));
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <SysTick_Handler+0xb58>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d004      	beq.n	8002002 <SysTick_Handler+0xad2>
 8001ff8:	2211      	movs	r2, #17
 8001ffa:	492e      	ldr	r1, [pc, #184]	; (80020b4 <SysTick_Handler+0xb84>)
 8001ffc:	4824      	ldr	r0, [pc, #144]	; (8002090 <SysTick_Handler+0xb60>)
 8001ffe:	f003 fad7 	bl	80055b0 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <SysTick_Handler+0xb64>)
 8002004:	2200      	movs	r2, #0
 8002006:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8002008:	e008      	b.n	800201c <SysTick_Handler+0xaec>
	  }
	  }else
	  	  {
		  //ETH.operacion=SPI_READ;
		  //ETH.TX[3]=0x00;
		  SPI_ETH(&ETH);
 800200a:	4822      	ldr	r0, [pc, #136]	; (8002094 <SysTick_Handler+0xb64>)
 800200c:	f00b f8f1 	bl	800d1f2 <SPI_ETH>
 8002010:	e004      	b.n	800201c <SysTick_Handler+0xaec>
			 default:
 8002012:	bf00      	nop
 8002014:	e002      	b.n	800201c <SysTick_Handler+0xaec>
			 break;
 8002016:	bf00      	nop
 8002018:	e000      	b.n	800201c <SysTick_Handler+0xaec>
			 break;
 800201a:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 800201c:	4b26      	ldr	r3, [pc, #152]	; (80020b8 <SysTick_Handler+0xb88>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d102      	bne.n	800202a <SysTick_Handler+0xafa>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <SysTick_Handler+0xb88>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
		  }
  }

if(EN_USART1_TMR==1) USART1_ticks++;
 800202a:	4b24      	ldr	r3, [pc, #144]	; (80020bc <SysTick_Handler+0xb8c>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d104      	bne.n	800203c <SysTick_Handler+0xb0c>
 8002032:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <SysTick_Handler+0xb90>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	3301      	adds	r3, #1
 8002038:	4a21      	ldr	r2, [pc, #132]	; (80020c0 <SysTick_Handler+0xb90>)
 800203a:	6013      	str	r3, [r2, #0]

if(USART1_ticks>=2)//if(USART1_ticks>=10)
 800203c:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <SysTick_Handler+0xb90>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	dd0f      	ble.n	8002064 <SysTick_Handler+0xb34>
{
	USART1_ticks=0;
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <SysTick_Handler+0xb90>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
	FLAG_USART1=1;
 800204a:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <SysTick_Handler+0xb94>)
 800204c:	2201      	movs	r2, #1
 800204e:	601a      	str	r2, [r3, #0]
	EN_USART1_TMR=0;
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <SysTick_Handler+0xb8c>)
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
	items_rx=uart1pass;
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <SysTick_Handler+0xb98>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a1c      	ldr	r2, [pc, #112]	; (80020cc <SysTick_Handler+0xb9c>)
 800205c:	6013      	str	r3, [r2, #0]
	uart1pass=0;
 800205e:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <SysTick_Handler+0xb98>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002064:	f000 fd3e 	bl	8002ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <SysTick_Handler+0xba0>)
 800206a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800206e:	2b04      	cmp	r3, #4
 8002070:	d132      	bne.n	80020d8 <SysTick_Handler+0xba8>
	{
		ticks++;
 8002072:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <SysTick_Handler+0xba4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	4a16      	ldr	r2, [pc, #88]	; (80020d4 <SysTick_Handler+0xba4>)
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	e02f      	b.n	80020de <SysTick_Handler+0xbae>
 800207e:	bf00      	nop
 8002080:	200041c8 	.word	0x200041c8
 8002084:	08010970 	.word	0x08010970
 8002088:	20000021 	.word	0x20000021
 800208c:	08010988 	.word	0x08010988
 8002090:	200002b8 	.word	0x200002b8
 8002094:	20000304 	.word	0x20000304
 8002098:	200041d8 	.word	0x200041d8
 800209c:	080109a4 	.word	0x080109a4
 80020a0:	080109bc 	.word	0x080109bc
 80020a4:	080109d8 	.word	0x080109d8
 80020a8:	080109f0 	.word	0x080109f0
 80020ac:	08010a04 	.word	0x08010a04
 80020b0:	08010a18 	.word	0x08010a18
 80020b4:	08010a30 	.word	0x08010a30
 80020b8:	20000300 	.word	0x20000300
 80020bc:	20004230 	.word	0x20004230
 80020c0:	20004664 	.word	0x20004664
 80020c4:	20004668 	.word	0x20004668
 80020c8:	20004660 	.word	0x20004660
 80020cc:	2000466c 	.word	0x2000466c
 80020d0:	200023d4 	.word	0x200023d4
 80020d4:	20004658 	.word	0x20004658
	}
	else
	{
		ticks=0;
 80020d8:	4b34      	ldr	r3, [pc, #208]	; (80021ac <SysTick_Handler+0xc7c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
	}

	if(wf._ejecucion==1)
 80020de:	4b34      	ldr	r3, [pc, #208]	; (80021b0 <SysTick_Handler+0xc80>)
 80020e0:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d158      	bne.n	800219a <SysTick_Handler+0xc6a>
		{
			if (FLAG_TIMEOUT!=1)
 80020e8:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <SysTick_Handler+0xc84>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d017      	beq.n	8002120 <SysTick_Handler+0xbf0>
			{
				if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 80020f0:	4b2f      	ldr	r3, [pc, #188]	; (80021b0 <SysTick_Handler+0xc80>)
 80020f2:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d006      	beq.n	8002108 <SysTick_Handler+0xbd8>
 80020fa:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <SysTick_Handler+0xc80>)
 80020fc:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8002100:	3301      	adds	r3, #1
 8002102:	4a2b      	ldr	r2, [pc, #172]	; (80021b0 <SysTick_Handler+0xc80>)
 8002104:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
				if(wf._instruccion==2) wf._ticks2++;
 8002108:	4b29      	ldr	r3, [pc, #164]	; (80021b0 <SysTick_Handler+0xc80>)
 800210a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800210e:	2b02      	cmp	r3, #2
 8002110:	d106      	bne.n	8002120 <SysTick_Handler+0xbf0>
 8002112:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <SysTick_Handler+0xc80>)
 8002114:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8002118:	3301      	adds	r3, #1
 800211a:	4a25      	ldr	r2, [pc, #148]	; (80021b0 <SysTick_Handler+0xc80>)
 800211c:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
			}


			if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8002120:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <SysTick_Handler+0xc80>)
 8002122:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8002126:	2b02      	cmp	r3, #2
 8002128:	d018      	beq.n	800215c <SysTick_Handler+0xc2c>
 800212a:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <SysTick_Handler+0xc80>)
 800212c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8002130:	f241 527c 	movw	r2, #5500	; 0x157c
 8002134:	4293      	cmp	r3, r2
 8002136:	dd11      	ble.n	800215c <SysTick_Handler+0xc2c>
			{
				FLAG_TIMEOUT=1;
 8002138:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <SysTick_Handler+0xc84>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
				if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <SysTick_Handler+0xc88>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f242 020c 	movw	r2, #8204	; 0x200c
 8002148:	4293      	cmp	r3, r2
 800214a:	d107      	bne.n	800215c <SysTick_Handler+0xc2c>
				{
					HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 800214c:	2201      	movs	r2, #1
 800214e:	491b      	ldr	r1, [pc, #108]	; (80021bc <SysTick_Handler+0xc8c>)
 8002150:	4819      	ldr	r0, [pc, #100]	; (80021b8 <SysTick_Handler+0xc88>)
 8002152:	f003 fa72 	bl	800563a <HAL_UART_Receive_IT>
					EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8002156:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <SysTick_Handler+0xc90>)
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
				}
				//wf._ticks=0;
			}
			if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <SysTick_Handler+0xc80>)
 800215e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8002162:	2b02      	cmp	r3, #2
 8002164:	d11d      	bne.n	80021a2 <SysTick_Handler+0xc72>
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <SysTick_Handler+0xc80>)
 8002168:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 800216c:	f245 0214 	movw	r2, #20500	; 0x5014
 8002170:	4293      	cmp	r3, r2
 8002172:	dd16      	ble.n	80021a2 <SysTick_Handler+0xc72>
			{
				FLAG_TIMEOUT=1;
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <SysTick_Handler+0xc84>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
				if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <SysTick_Handler+0xc88>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f242 020c 	movw	r2, #8204	; 0x200c
 8002184:	4293      	cmp	r3, r2
 8002186:	d10c      	bne.n	80021a2 <SysTick_Handler+0xc72>
				{
					HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8002188:	2201      	movs	r2, #1
 800218a:	490c      	ldr	r1, [pc, #48]	; (80021bc <SysTick_Handler+0xc8c>)
 800218c:	480a      	ldr	r0, [pc, #40]	; (80021b8 <SysTick_Handler+0xc88>)
 800218e:	f003 fa54 	bl	800563a <HAL_UART_Receive_IT>
					EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <SysTick_Handler+0xc90>)
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
		else
		{
			wf._ticks=0;
		}
  /* USER CODE END SysTick_IRQn 1 */
}
 8002198:	e003      	b.n	80021a2 <SysTick_Handler+0xc72>
			wf._ticks=0;
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <SysTick_Handler+0xc80>)
 800219c:	2200      	movs	r2, #0
 800219e:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 80021a2:	bf00      	nop
 80021a4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20004658 	.word	0x20004658
 80021b0:	200023d4 	.word	0x200023d4
 80021b4:	20004231 	.word	0x20004231
 80021b8:	20000274 	.word	0x20000274
 80021bc:	20004644 	.word	0x20004644
 80021c0:	2000422f 	.word	0x2000422f

080021c4 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a25      	ldr	r2, [pc, #148]	; (8002268 <HAL_UART_ErrorCallback+0xa4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d121      	bne.n	800221a <HAL_UART_ErrorCallback+0x56>
	{
		 volatile int aore=0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 80021de:	4b23      	ldr	r3, [pc, #140]	; (800226c <HAL_UART_ErrorCallback+0xa8>)
 80021e0:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 80021e4:	3301      	adds	r3, #1
 80021e6:	4a21      	ldr	r2, [pc, #132]	; (800226c <HAL_UART_ErrorCallback+0xa8>)
 80021e8:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	613b      	str	r3, [r7, #16]


		 HAL_UART_Transmit_IT(&huart2,"\r\n ERROR HW UARRT1 \r\n",strlen("\r\n ERROR HW UARRT1 \r\n"));
 80021fc:	2215      	movs	r2, #21
 80021fe:	491c      	ldr	r1, [pc, #112]	; (8002270 <HAL_UART_ErrorCallback+0xac>)
 8002200:	481c      	ldr	r0, [pc, #112]	; (8002274 <HAL_UART_ErrorCallback+0xb0>)
 8002202:	f003 f9d5 	bl	80055b0 <HAL_UART_Transmit_IT>
		 HAL_UART_DeInit(ERRUART);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f003 f911 	bl	800542e <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 800220c:	f7ff f87a 	bl	8001304 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8002210:	2201      	movs	r2, #1
 8002212:	4919      	ldr	r1, [pc, #100]	; (8002278 <HAL_UART_ErrorCallback+0xb4>)
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f003 fa10 	bl	800563a <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a17      	ldr	r2, [pc, #92]	; (800227c <HAL_UART_ErrorCallback+0xb8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d11c      	bne.n	800225e <HAL_UART_ErrorCallback+0x9a>
	{
		 volatile int aore=0;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 8002228:	2300      	movs	r3, #0
 800222a:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <HAL_UART_ErrorCallback+0xa8>)
 800222e:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8002232:	3301      	adds	r3, #1
 8002234:	4a0d      	ldr	r2, [pc, #52]	; (800226c <HAL_UART_ErrorCallback+0xa8>)
 8002236:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f003 f8ef 	bl	800542e <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 8002250:	f7ff f882 	bl	8001358 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8002254:	2201      	movs	r2, #1
 8002256:	4908      	ldr	r1, [pc, #32]	; (8002278 <HAL_UART_ErrorCallback+0xb4>)
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f003 f9ee 	bl	800563a <HAL_UART_Receive_IT>
	}
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40011000 	.word	0x40011000
 800226c:	200023d4 	.word	0x200023d4
 8002270:	08010a44 	.word	0x08010a44
 8002274:	200002b8 	.word	0x200002b8
 8002278:	20004644 	.word	0x20004644
 800227c:	40004400 	.word	0x40004400

08002280 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <HAL_UART_RxCpltCallback+0x64>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d123      	bne.n	80022da <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_UART_RxCpltCallback+0x68>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a15      	ldr	r2, [pc, #84]	; (80022ec <HAL_UART_RxCpltCallback+0x6c>)
 8002298:	7811      	ldrb	r1, [r2, #0]
 800229a:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <HAL_UART_RxCpltCallback+0x70>)
 800229c:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_UART_RxCpltCallback+0x68>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <HAL_UART_RxCpltCallback+0x68>)
 80022a6:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <HAL_UART_RxCpltCallback+0x68>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b0:	db03      	blt.n	80022ba <HAL_UART_RxCpltCallback+0x3a>
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <HAL_UART_RxCpltCallback+0x68>)
 80022b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b8:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 80022ba:	2100      	movs	r1, #0
 80022bc:	480d      	ldr	r0, [pc, #52]	; (80022f4 <HAL_UART_RxCpltCallback+0x74>)
 80022be:	f002 f8bd 	bl	800443c <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 80022c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022c6:	2201      	movs	r2, #1
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_UART_RxCpltCallback+0x78>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 80022d0:	2201      	movs	r2, #1
 80022d2:	4906      	ldr	r1, [pc, #24]	; (80022ec <HAL_UART_RxCpltCallback+0x6c>)
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f003 f9b0 	bl	800563a <HAL_UART_Receive_IT>
		 }
 }
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40011000 	.word	0x40011000
 80022e8:	20004674 	.word	0x20004674
 80022ec:	20004644 	.word	0x20004644
 80022f0:	20004240 	.word	0x20004240
 80022f4:	2000022c 	.word	0x2000022c
 80022f8:	2000422f 	.word	0x2000422f

080022fc <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af02      	add	r7, sp, #8
 8002302:	6078      	str	r0, [r7, #4]

		if(TIMER->Instance==TIM2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230c:	d12d      	bne.n	800236a <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 800230e:	2100      	movs	r1, #0
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f002 f991 	bl	8004638 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 800231c:	4b16      	ldr	r3, [pc, #88]	; (8002378 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 8002322:	4b16      	ldr	r3, [pc, #88]	; (800237c <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a16      	ldr	r2, [pc, #88]	; (8002380 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8002328:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 800232a:	4b14      	ldr	r3, [pc, #80]	; (800237c <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002330:	4b14      	ldr	r3, [pc, #80]	; (8002384 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2301      	movs	r3, #1
 8002342:	4910      	ldr	r1, [pc, #64]	; (8002384 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8002344:	4811      	ldr	r0, [pc, #68]	; (800238c <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002346:	f00c fea1 	bl	800f08c <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 800234a:	2201      	movs	r2, #1
 800234c:	4910      	ldr	r1, [pc, #64]	; (8002390 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 800234e:	4811      	ldr	r0, [pc, #68]	; (8002394 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002350:	f003 f973 	bl	800563a <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 8002354:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002356:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800235a:	2b01      	cmp	r3, #1
 800235c:	d105      	bne.n	800236a <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4619      	mov	r1, r3
 8002364:	4809      	ldr	r0, [pc, #36]	; (800238c <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002366:	f7ff f8c7 	bl	80014f8 <ITM0_Write>
				 }
		}
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20004232 	.word	0x20004232
 8002378:	2000422f 	.word	0x2000422f
 800237c:	20004674 	.word	0x20004674
 8002380:	20004648 	.word	0x20004648
 8002384:	20004240 	.word	0x20004240
 8002388:	20004640 	.word	0x20004640
 800238c:	20004440 	.word	0x20004440
 8002390:	20004644 	.word	0x20004644
 8002394:	20000274 	.word	0x20000274
 8002398:	200023d4 	.word	0x200023d4

0800239c <ESP8266_HW_Init>:

uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af06      	add	r7, sp, #24
 80023a2:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 80023a4:	2364      	movs	r3, #100	; 0x64
 80023a6:	220c      	movs	r2, #12
 80023a8:	4946      	ldr	r1, [pc, #280]	; (80024c4 <ESP8266_HW_Init+0x128>)
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f003 f86e 	bl	800548c <HAL_UART_Transmit>
		  HAL_Delay(500);
 80023b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023b4:	f000 fbb6 	bl	8002b24 <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 80023b8:	4b43      	ldr	r3, [pc, #268]	; (80024c8 <ESP8266_HW_Init+0x12c>)
 80023ba:	2205      	movs	r2, #5
 80023bc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART_RX_items;
 80023c0:	4b42      	ldr	r3, [pc, #264]	; (80024cc <ESP8266_HW_Init+0x130>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a40      	ldr	r2, [pc, #256]	; (80024c8 <ESP8266_HW_Init+0x12c>)
 80023c6:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,510,FIND)!=1)
 80023ca:	e00e      	b.n	80023ea <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 80023cc:	4b3f      	ldr	r3, [pc, #252]	; (80024cc <ESP8266_HW_Init+0x130>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a3d      	ldr	r2, [pc, #244]	; (80024c8 <ESP8266_HW_Init+0x12c>)
 80023d2:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  	  if (ESP_ticks>=5000)
 80023d6:	4b3e      	ldr	r3, [pc, #248]	; (80024d0 <ESP8266_HW_Init+0x134>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f241 3287 	movw	r2, #4999	; 0x1387
 80023de:	4293      	cmp	r3, r2
 80023e0:	dd03      	ble.n	80023ea <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 80023e2:	4b3c      	ldr	r3, [pc, #240]	; (80024d4 <ESP8266_HW_Init+0x138>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
			  		 break;
 80023e8:	e015      	b.n	8002416 <ESP8266_HW_Init+0x7a>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,510,FIND)!=1)
 80023ea:	2300      	movs	r3, #0
 80023ec:	9305      	str	r3, [sp, #20]
 80023ee:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80023f2:	9304      	str	r3, [sp, #16]
 80023f4:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <ESP8266_HW_Init+0x13c>)
 80023f6:	9303      	str	r3, [sp, #12]
 80023f8:	4b38      	ldr	r3, [pc, #224]	; (80024dc <ESP8266_HW_Init+0x140>)
 80023fa:	9302      	str	r3, [sp, #8]
 80023fc:	4b38      	ldr	r3, [pc, #224]	; (80024e0 <ESP8266_HW_Init+0x144>)
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	4b38      	ldr	r3, [pc, #224]	; (80024e4 <ESP8266_HW_Init+0x148>)
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	4b38      	ldr	r3, [pc, #224]	; (80024e8 <ESP8266_HW_Init+0x14c>)
 8002406:	4a39      	ldr	r2, [pc, #228]	; (80024ec <ESP8266_HW_Init+0x150>)
 8002408:	4939      	ldr	r1, [pc, #228]	; (80024f0 <ESP8266_HW_Init+0x154>)
 800240a:	483a      	ldr	r0, [pc, #232]	; (80024f4 <ESP8266_HW_Init+0x158>)
 800240c:	f00c fa4c 	bl	800e8a8 <FT_String_ND>
 8002410:	4603      	mov	r3, r0
 8002412:	2b01      	cmp	r3, #1
 8002414:	d1da      	bne.n	80023cc <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 8002416:	4b2f      	ldr	r3, [pc, #188]	; (80024d4 <ESP8266_HW_Init+0x138>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d12c      	bne.n	8002478 <ESP8266_HW_Init+0xdc>
		  {
			  wf._n_fcomp=strlen("ready");
 800241e:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <ESP8266_HW_Init+0x12c>)
 8002420:	2205      	movs	r2, #5
 8002422:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			  wf._n_orig=UART_RX_items;
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <ESP8266_HW_Init+0x130>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a27      	ldr	r2, [pc, #156]	; (80024c8 <ESP8266_HW_Init+0x12c>)
 800242c:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,510,FIND)!=1)
 8002430:	e00a      	b.n	8002448 <ESP8266_HW_Init+0xac>
			  {
				  wf._n_orig=UART_RX_items;
 8002432:	4b26      	ldr	r3, [pc, #152]	; (80024cc <ESP8266_HW_Init+0x130>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a24      	ldr	r2, [pc, #144]	; (80024c8 <ESP8266_HW_Init+0x12c>)
 8002438:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 800243c:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <ESP8266_HW_Init+0x134>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f241 3287 	movw	r2, #4999	; 0x1387
 8002444:	4293      	cmp	r3, r2
 8002446:	dc16      	bgt.n	8002476 <ESP8266_HW_Init+0xda>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,510,FIND)!=1)
 8002448:	2300      	movs	r3, #0
 800244a:	9305      	str	r3, [sp, #20]
 800244c:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8002450:	9304      	str	r3, [sp, #16]
 8002452:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <ESP8266_HW_Init+0x13c>)
 8002454:	9303      	str	r3, [sp, #12]
 8002456:	4b21      	ldr	r3, [pc, #132]	; (80024dc <ESP8266_HW_Init+0x140>)
 8002458:	9302      	str	r3, [sp, #8]
 800245a:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <ESP8266_HW_Init+0x144>)
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	4b21      	ldr	r3, [pc, #132]	; (80024e4 <ESP8266_HW_Init+0x148>)
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <ESP8266_HW_Init+0x14c>)
 8002464:	4a21      	ldr	r2, [pc, #132]	; (80024ec <ESP8266_HW_Init+0x150>)
 8002466:	4922      	ldr	r1, [pc, #136]	; (80024f0 <ESP8266_HW_Init+0x154>)
 8002468:	4822      	ldr	r0, [pc, #136]	; (80024f4 <ESP8266_HW_Init+0x158>)
 800246a:	f00c fa1d 	bl	800e8a8 <FT_String_ND>
 800246e:	4603      	mov	r3, r0
 8002470:	2b01      	cmp	r3, #1
 8002472:	d1de      	bne.n	8002432 <ESP8266_HW_Init+0x96>
 8002474:	e000      	b.n	8002478 <ESP8266_HW_Init+0xdc>
					 {
					 break;
 8002476:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 8002478:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <ESP8266_HW_Init+0x134>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002480:	4293      	cmp	r3, r2
 8002482:	dc06      	bgt.n	8002492 <ESP8266_HW_Init+0xf6>
		  {
			  ESP_REinit=10;
 8002484:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <ESP8266_HW_Init+0x15c>)
 8002486:	220a      	movs	r2, #10
 8002488:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <ESP8266_HW_Init+0x134>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	e008      	b.n	80024a4 <ESP8266_HW_Init+0x108>
		  }
		  else
		  {
			  ESP_REinit++;
 8002492:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <ESP8266_HW_Init+0x15c>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	3301      	adds	r3, #1
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4b17      	ldr	r3, [pc, #92]	; (80024f8 <ESP8266_HW_Init+0x15c>)
 800249c:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <ESP8266_HW_Init+0x134>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 80024a4:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <ESP8266_HW_Init+0x15c>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	f67f af7b 	bls.w	80023a4 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <ESP8266_HW_Init+0x15c>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b0a      	cmp	r3, #10
 80024b4:	d101      	bne.n	80024ba <ESP8266_HW_Init+0x11e>
	  {
		  return(1);
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <ESP8266_HW_Init+0x120>
	  }
	  else
	  {
		  return(0);
 80024ba:	2300      	movs	r3, #0
	  }
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	08010a5c 	.word	0x08010a5c
 80024c8:	200023d4 	.word	0x200023d4
 80024cc:	20004648 	.word	0x20004648
 80024d0:	2000464c 	.word	0x2000464c
 80024d4:	2000422d 	.word	0x2000422d
 80024d8:	20002e68 	.word	0x20002e68
 80024dc:	2000465c 	.word	0x2000465c
 80024e0:	200030b4 	.word	0x200030b4
 80024e4:	20002c68 	.word	0x20002c68
 80024e8:	200030c0 	.word	0x200030c0
 80024ec:	08010a6c 	.word	0x08010a6c
 80024f0:	200030ac 	.word	0x200030ac
 80024f4:	20004440 	.word	0x20004440
 80024f8:	2000422c 	.word	0x2000422c

080024fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002500:	b672      	cpsid	i
}
 8002502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002504:	e7fe      	b.n	8002504 <Error_Handler+0x8>
	...

08002508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	607b      	str	r3, [r7, #4]
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_MspInit+0x4c>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	4a0f      	ldr	r2, [pc, #60]	; (8002554 <HAL_MspInit+0x4c>)
 8002518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800251c:	6453      	str	r3, [r2, #68]	; 0x44
 800251e:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <HAL_MspInit+0x4c>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	603b      	str	r3, [r7, #0]
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_MspInit+0x4c>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	4a08      	ldr	r2, [pc, #32]	; (8002554 <HAL_MspInit+0x4c>)
 8002534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002538:	6413      	str	r3, [r2, #64]	; 0x40
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_MspInit+0x4c>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800

08002558 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a19      	ldr	r2, [pc, #100]	; (80025dc <HAL_SPI_MspInit+0x84>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d12b      	bne.n	80025d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <HAL_SPI_MspInit+0x88>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4a17      	ldr	r2, [pc, #92]	; (80025e0 <HAL_SPI_MspInit+0x88>)
 8002584:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <HAL_SPI_MspInit+0x88>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <HAL_SPI_MspInit+0x88>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a10      	ldr	r2, [pc, #64]	; (80025e0 <HAL_SPI_MspInit+0x88>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <HAL_SPI_MspInit+0x88>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025b2:	23e0      	movs	r3, #224	; 0xe0
 80025b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025be:	2303      	movs	r3, #3
 80025c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025c2:	2305      	movs	r3, #5
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	4619      	mov	r1, r3
 80025cc:	4805      	ldr	r0, [pc, #20]	; (80025e4 <HAL_SPI_MspInit+0x8c>)
 80025ce:	f000 fca3 	bl	8002f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025d2:	bf00      	nop
 80025d4:	3728      	adds	r7, #40	; 0x28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40013000 	.word	0x40013000
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020000 	.word	0x40020000

080025e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f8:	d115      	bne.n	8002626 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <HAL_TIM_Base_MspInit+0x48>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	4a0b      	ldr	r2, [pc, #44]	; (8002630 <HAL_TIM_Base_MspInit+0x48>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6413      	str	r3, [r2, #64]	; 0x40
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_TIM_Base_MspInit+0x48>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	201c      	movs	r0, #28
 800261c:	f000 fba5 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002620:	201c      	movs	r0, #28
 8002622:	f000 fbbe 	bl	8002da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002626:	bf00      	nop
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800

08002634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08c      	sub	sp, #48	; 0x30
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 031c 	add.w	r3, r7, #28
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a3a      	ldr	r2, [pc, #232]	; (800273c <HAL_UART_MspInit+0x108>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d135      	bne.n	80026c2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	4b39      	ldr	r3, [pc, #228]	; (8002740 <HAL_UART_MspInit+0x10c>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a38      	ldr	r2, [pc, #224]	; (8002740 <HAL_UART_MspInit+0x10c>)
 8002660:	f043 0310 	orr.w	r3, r3, #16
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b36      	ldr	r3, [pc, #216]	; (8002740 <HAL_UART_MspInit+0x10c>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	61bb      	str	r3, [r7, #24]
 8002670:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	4b32      	ldr	r3, [pc, #200]	; (8002740 <HAL_UART_MspInit+0x10c>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	4a31      	ldr	r2, [pc, #196]	; (8002740 <HAL_UART_MspInit+0x10c>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6313      	str	r3, [r2, #48]	; 0x30
 8002682:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <HAL_UART_MspInit+0x10c>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = WF_TX_Pin|WF_RX_Pin;
 800268e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269c:	2303      	movs	r3, #3
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026a0:	2307      	movs	r3, #7
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a4:	f107 031c 	add.w	r3, r7, #28
 80026a8:	4619      	mov	r1, r3
 80026aa:	4826      	ldr	r0, [pc, #152]	; (8002744 <HAL_UART_MspInit+0x110>)
 80026ac:	f000 fc34 	bl	8002f18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026b0:	2200      	movs	r2, #0
 80026b2:	2100      	movs	r1, #0
 80026b4:	2025      	movs	r0, #37	; 0x25
 80026b6:	f000 fb58 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026ba:	2025      	movs	r0, #37	; 0x25
 80026bc:	f000 fb71 	bl	8002da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026c0:	e038      	b.n	8002734 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a20      	ldr	r2, [pc, #128]	; (8002748 <HAL_UART_MspInit+0x114>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d133      	bne.n	8002734 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_UART_MspInit+0x10c>)
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	4a1a      	ldr	r2, [pc, #104]	; (8002740 <HAL_UART_MspInit+0x10c>)
 80026d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026da:	6413      	str	r3, [r2, #64]	; 0x40
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_UART_MspInit+0x10c>)
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <HAL_UART_MspInit+0x10c>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	4a13      	ldr	r2, [pc, #76]	; (8002740 <HAL_UART_MspInit+0x10c>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6313      	str	r3, [r2, #48]	; 0x30
 80026f8:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_UART_MspInit+0x10c>)
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PORT2TX_Pin|PORT2_RX_Pin;
 8002704:	230c      	movs	r3, #12
 8002706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2302      	movs	r3, #2
 800270a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002710:	2303      	movs	r3, #3
 8002712:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002714:	2307      	movs	r3, #7
 8002716:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002718:	f107 031c 	add.w	r3, r7, #28
 800271c:	4619      	mov	r1, r3
 800271e:	4809      	ldr	r0, [pc, #36]	; (8002744 <HAL_UART_MspInit+0x110>)
 8002720:	f000 fbfa 	bl	8002f18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002724:	2200      	movs	r2, #0
 8002726:	2100      	movs	r1, #0
 8002728:	2026      	movs	r0, #38	; 0x26
 800272a:	f000 fb1e 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800272e:	2026      	movs	r0, #38	; 0x26
 8002730:	f000 fb37 	bl	8002da2 <HAL_NVIC_EnableIRQ>
}
 8002734:	bf00      	nop
 8002736:	3730      	adds	r7, #48	; 0x30
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40011000 	.word	0x40011000
 8002740:	40023800 	.word	0x40023800
 8002744:	40020000 	.word	0x40020000
 8002748:	40004400 	.word	0x40004400

0800274c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <HAL_UART_MspDeInit+0x5c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d10e      	bne.n	800277c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800275e:	4b13      	ldr	r3, [pc, #76]	; (80027ac <HAL_UART_MspDeInit+0x60>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a12      	ldr	r2, [pc, #72]	; (80027ac <HAL_UART_MspDeInit+0x60>)
 8002764:	f023 0310 	bic.w	r3, r3, #16
 8002768:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, WF_TX_Pin|WF_RX_Pin);
 800276a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800276e:	4810      	ldr	r0, [pc, #64]	; (80027b0 <HAL_UART_MspDeInit+0x64>)
 8002770:	f000 fd56 	bl	8003220 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002774:	2025      	movs	r0, #37	; 0x25
 8002776:	f000 fb22 	bl	8002dbe <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800277a:	e011      	b.n	80027a0 <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0c      	ldr	r2, [pc, #48]	; (80027b4 <HAL_UART_MspDeInit+0x68>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10c      	bne.n	80027a0 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_UART_MspDeInit+0x60>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a08      	ldr	r2, [pc, #32]	; (80027ac <HAL_UART_MspDeInit+0x60>)
 800278c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PORT2TX_Pin|PORT2_RX_Pin);
 8002792:	210c      	movs	r1, #12
 8002794:	4806      	ldr	r0, [pc, #24]	; (80027b0 <HAL_UART_MspDeInit+0x64>)
 8002796:	f000 fd43 	bl	8003220 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800279a:	2026      	movs	r0, #38	; 0x26
 800279c:	f000 fb0f 	bl	8002dbe <HAL_NVIC_DisableIRQ>
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40011000 	.word	0x40011000
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40020000 	.word	0x40020000
 80027b4:	40004400 	.word	0x40004400

080027b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <NMI_Handler+0x4>

080027be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c2:	e7fe      	b.n	80027c2 <HardFault_Handler+0x4>

080027c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c8:	e7fe      	b.n	80027c8 <MemManage_Handler+0x4>

080027ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ca:	b480      	push	{r7}
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ce:	e7fe      	b.n	80027ce <BusFault_Handler+0x4>

080027d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d4:	e7fe      	b.n	80027d4 <UsageFault_Handler+0x4>

080027d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002804:	4802      	ldr	r0, [pc, #8]	; (8002810 <TIM2_IRQHandler+0x10>)
 8002806:	f002 f823 	bl	8004850 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	2000022c 	.word	0x2000022c

08002814 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002818:	4802      	ldr	r0, [pc, #8]	; (8002824 <USART1_IRQHandler+0x10>)
 800281a:	f002 ff3f 	bl	800569c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000274 	.word	0x20000274

08002828 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800282c:	4802      	ldr	r0, [pc, #8]	; (8002838 <USART2_IRQHandler+0x10>)
 800282e:	f002 ff35 	bl	800569c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	200002b8 	.word	0x200002b8

0800283c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
	return 1;
 8002840:	2301      	movs	r3, #1
}
 8002842:	4618      	mov	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <_kill>:

int _kill(int pid, int sig)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002856:	f00c fec5 	bl	800f5e4 <__errno>
 800285a:	4603      	mov	r3, r0
 800285c:	2216      	movs	r2, #22
 800285e:	601a      	str	r2, [r3, #0]
	return -1;
 8002860:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <_exit>:

void _exit (int status)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002874:	f04f 31ff 	mov.w	r1, #4294967295
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff ffe7 	bl	800284c <_kill>
	while (1) {}		/* Make sure we hang here */
 800287e:	e7fe      	b.n	800287e <_exit+0x12>

08002880 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	e00a      	b.n	80028a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002892:	f3af 8000 	nop.w
 8002896:	4601      	mov	r1, r0
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	1c5a      	adds	r2, r3, #1
 800289c:	60ba      	str	r2, [r7, #8]
 800289e:	b2ca      	uxtb	r2, r1
 80028a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	3301      	adds	r3, #1
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	dbf0      	blt.n	8002892 <_read+0x12>
	}

return len;
 80028b0:	687b      	ldr	r3, [r7, #4]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	e009      	b.n	80028e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	60ba      	str	r2, [r7, #8]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	3301      	adds	r3, #1
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	dbf1      	blt.n	80028cc <_write+0x12>
	}
	return len;
 80028e8:	687b      	ldr	r3, [r7, #4]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <_close>:

int _close(int file)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
	return -1;
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800291a:	605a      	str	r2, [r3, #4]
	return 0;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <_isatty>:

int _isatty(int file)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
	return 1;
 8002932:	2301      	movs	r3, #1
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
	return 0;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002964:	4a14      	ldr	r2, [pc, #80]	; (80029b8 <_sbrk+0x5c>)
 8002966:	4b15      	ldr	r3, [pc, #84]	; (80029bc <_sbrk+0x60>)
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002970:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <_sbrk+0x64>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <_sbrk+0x64>)
 800297a:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <_sbrk+0x68>)
 800297c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <_sbrk+0x64>)
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4413      	add	r3, r2
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	429a      	cmp	r2, r3
 800298a:	d207      	bcs.n	800299c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800298c:	f00c fe2a 	bl	800f5e4 <__errno>
 8002990:	4603      	mov	r3, r0
 8002992:	220c      	movs	r2, #12
 8002994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002996:	f04f 33ff 	mov.w	r3, #4294967295
 800299a:	e009      	b.n	80029b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <_sbrk+0x64>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029a2:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <_sbrk+0x64>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	4a05      	ldr	r2, [pc, #20]	; (80029c0 <_sbrk+0x64>)
 80029ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ae:	68fb      	ldr	r3, [r7, #12]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20020000 	.word	0x20020000
 80029bc:	00000400 	.word	0x00000400
 80029c0:	2000467c 	.word	0x2000467c
 80029c4:	200047d0 	.word	0x200047d0

080029c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <SystemInit+0x20>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	4a05      	ldr	r2, [pc, #20]	; (80029e8 <SystemInit+0x20>)
 80029d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029f0:	480d      	ldr	r0, [pc, #52]	; (8002a28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029f2:	490e      	ldr	r1, [pc, #56]	; (8002a2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029f4:	4a0e      	ldr	r2, [pc, #56]	; (8002a30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f8:	e002      	b.n	8002a00 <LoopCopyDataInit>

080029fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029fe:	3304      	adds	r3, #4

08002a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a04:	d3f9      	bcc.n	80029fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a06:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a08:	4c0b      	ldr	r4, [pc, #44]	; (8002a38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a0c:	e001      	b.n	8002a12 <LoopFillZerobss>

08002a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a10:	3204      	adds	r2, #4

08002a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a14:	d3fb      	bcc.n	8002a0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a16:	f7ff ffd7 	bl	80029c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a1a:	f00c fde9 	bl	800f5f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a1e:	f7fd fe39 	bl	8000694 <main>
  bx  lr    
 8002a22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a2c:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8002a30:	08010f98 	.word	0x08010f98
  ldr r2, =_sbss
 8002a34:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8002a38:	200047d0 	.word	0x200047d0

08002a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a3c:	e7fe      	b.n	8002a3c <ADC_IRQHandler>
	...

08002a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_Init+0x40>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <HAL_Init+0x40>)
 8002a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_Init+0x40>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <HAL_Init+0x40>)
 8002a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_Init+0x40>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <HAL_Init+0x40>)
 8002a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a68:	2003      	movs	r0, #3
 8002a6a:	f000 f973 	bl	8002d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a6e:	200f      	movs	r0, #15
 8002a70:	f000 f808 	bl	8002a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a74:	f7ff fd48 	bl	8002508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023c00 	.word	0x40023c00

08002a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_InitTick+0x54>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <HAL_InitTick+0x58>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	4619      	mov	r1, r3
 8002a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f999 	bl	8002dda <HAL_SYSTICK_Config>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e00e      	b.n	8002ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b0f      	cmp	r3, #15
 8002ab6:	d80a      	bhi.n	8002ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab8:	2200      	movs	r2, #0
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac0:	f000 f953 	bl	8002d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac4:	4a06      	ldr	r2, [pc, #24]	; (8002ae0 <HAL_InitTick+0x5c>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	200000a4 	.word	0x200000a4
 8002adc:	200000ac 	.word	0x200000ac
 8002ae0:	200000a8 	.word	0x200000a8

08002ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <HAL_IncTick+0x20>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <HAL_IncTick+0x24>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4413      	add	r3, r2
 8002af4:	4a04      	ldr	r2, [pc, #16]	; (8002b08 <HAL_IncTick+0x24>)
 8002af6:	6013      	str	r3, [r2, #0]
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	200000ac 	.word	0x200000ac
 8002b08:	20004680 	.word	0x20004680

08002b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <HAL_GetTick+0x14>)
 8002b12:	681b      	ldr	r3, [r3, #0]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	20004680 	.word	0x20004680

08002b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b2c:	f7ff ffee 	bl	8002b0c <HAL_GetTick>
 8002b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3c:	d005      	beq.n	8002b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <HAL_Delay+0x44>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b4a:	bf00      	nop
 8002b4c:	f7ff ffde 	bl	8002b0c <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d8f7      	bhi.n	8002b4c <HAL_Delay+0x28>
  {
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	200000ac 	.word	0x200000ac

08002b6c <__NVIC_SetPriorityGrouping>:
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b9e:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	60d3      	str	r3, [r2, #12]
}
 8002ba4:	bf00      	nop
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <__NVIC_GetPriorityGrouping>:
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <__NVIC_GetPriorityGrouping+0x18>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	0a1b      	lsrs	r3, r3, #8
 8002bbe:	f003 0307 	and.w	r3, r3, #7
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <__NVIC_EnableIRQ>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	db0b      	blt.n	8002bfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	f003 021f 	and.w	r2, r3, #31
 8002be8:	4907      	ldr	r1, [pc, #28]	; (8002c08 <__NVIC_EnableIRQ+0x38>)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	e000e100 	.word	0xe000e100

08002c0c <__NVIC_DisableIRQ>:
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	db12      	blt.n	8002c44 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	f003 021f 	and.w	r2, r3, #31
 8002c24:	490a      	ldr	r1, [pc, #40]	; (8002c50 <__NVIC_DisableIRQ+0x44>)
 8002c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c32:	3320      	adds	r3, #32
 8002c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c38:	f3bf 8f4f 	dsb	sy
}
 8002c3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c3e:	f3bf 8f6f 	isb	sy
}
 8002c42:	bf00      	nop
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000e100 	.word	0xe000e100

08002c54 <__NVIC_SetPriority>:
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	6039      	str	r1, [r7, #0]
 8002c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	db0a      	blt.n	8002c7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	490c      	ldr	r1, [pc, #48]	; (8002ca0 <__NVIC_SetPriority+0x4c>)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	0112      	lsls	r2, r2, #4
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	440b      	add	r3, r1
 8002c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c7c:	e00a      	b.n	8002c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	4908      	ldr	r1, [pc, #32]	; (8002ca4 <__NVIC_SetPriority+0x50>)
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	3b04      	subs	r3, #4
 8002c8c:	0112      	lsls	r2, r2, #4
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	440b      	add	r3, r1
 8002c92:	761a      	strb	r2, [r3, #24]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000e100 	.word	0xe000e100
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <NVIC_EncodePriority>:
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	; 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f1c3 0307 	rsb	r3, r3, #7
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	bf28      	it	cs
 8002cc6:	2304      	movcs	r3, #4
 8002cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	2b06      	cmp	r3, #6
 8002cd0:	d902      	bls.n	8002cd8 <NVIC_EncodePriority+0x30>
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3b03      	subs	r3, #3
 8002cd6:	e000      	b.n	8002cda <NVIC_EncodePriority+0x32>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	401a      	ands	r2, r3
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	43d9      	mvns	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d00:	4313      	orrs	r3, r2
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3724      	adds	r7, #36	; 0x24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <SysTick_Config>:
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d20:	d301      	bcc.n	8002d26 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002d22:	2301      	movs	r3, #1
 8002d24:	e00f      	b.n	8002d46 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d26:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <SysTick_Config+0x40>)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2e:	210f      	movs	r1, #15
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295
 8002d34:	f7ff ff8e 	bl	8002c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <SysTick_Config+0x40>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3e:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <SysTick_Config+0x40>)
 8002d40:	2207      	movs	r2, #7
 8002d42:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	e000e010 	.word	0xe000e010

08002d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ff05 	bl	8002b6c <__NVIC_SetPriorityGrouping>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b086      	sub	sp, #24
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4603      	mov	r3, r0
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d7c:	f7ff ff1a 	bl	8002bb4 <__NVIC_GetPriorityGrouping>
 8002d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	6978      	ldr	r0, [r7, #20]
 8002d88:	f7ff ff8e 	bl	8002ca8 <NVIC_EncodePriority>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff5d 	bl	8002c54 <__NVIC_SetPriority>
}
 8002d9a:	bf00      	nop
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	4603      	mov	r3, r0
 8002daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ff0d 	bl	8002bd0 <__NVIC_EnableIRQ>
}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff1d 	bl	8002c0c <__NVIC_DisableIRQ>
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff ff94 	bl	8002d10 <SysTick_Config>
 8002de8:	4603      	mov	r3, r0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e00:	f7ff fe84 	bl	8002b0c <HAL_GetTick>
 8002e04:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d008      	beq.n	8002e24 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2280      	movs	r2, #128	; 0x80
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e052      	b.n	8002eca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0216 	bic.w	r2, r2, #22
 8002e32:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e42:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d103      	bne.n	8002e54 <HAL_DMA_Abort+0x62>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d007      	beq.n	8002e64 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0208 	bic.w	r2, r2, #8
 8002e62:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e74:	e013      	b.n	8002e9e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e76:	f7ff fe49 	bl	8002b0c <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	d90c      	bls.n	8002e9e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e015      	b.n	8002eca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1e4      	bne.n	8002e76 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb0:	223f      	movs	r2, #63	; 0x3f
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2280      	movs	r2, #128	; 0x80
 8002eea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e00c      	b.n	8002f0a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2205      	movs	r2, #5
 8002ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b089      	sub	sp, #36	; 0x24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	e159      	b.n	80031e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f34:	2201      	movs	r2, #1
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	f040 8148 	bne.w	80031e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d005      	beq.n	8002f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d130      	bne.n	8002fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	2203      	movs	r2, #3
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	f003 0201 	and.w	r2, r3, #1
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d017      	beq.n	8003008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d123      	bne.n	800305c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	08da      	lsrs	r2, r3, #3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3208      	adds	r2, #8
 800301c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	220f      	movs	r2, #15
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	08da      	lsrs	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3208      	adds	r2, #8
 8003056:	69b9      	ldr	r1, [r7, #24]
 8003058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	2203      	movs	r2, #3
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0203 	and.w	r2, r3, #3
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80a2 	beq.w	80031e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	4b57      	ldr	r3, [pc, #348]	; (8003200 <HAL_GPIO_Init+0x2e8>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	4a56      	ldr	r2, [pc, #344]	; (8003200 <HAL_GPIO_Init+0x2e8>)
 80030a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ac:	6453      	str	r3, [r2, #68]	; 0x44
 80030ae:	4b54      	ldr	r3, [pc, #336]	; (8003200 <HAL_GPIO_Init+0x2e8>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ba:	4a52      	ldr	r2, [pc, #328]	; (8003204 <HAL_GPIO_Init+0x2ec>)
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	3302      	adds	r3, #2
 80030c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	220f      	movs	r2, #15
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4013      	ands	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a49      	ldr	r2, [pc, #292]	; (8003208 <HAL_GPIO_Init+0x2f0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d019      	beq.n	800311a <HAL_GPIO_Init+0x202>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a48      	ldr	r2, [pc, #288]	; (800320c <HAL_GPIO_Init+0x2f4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d013      	beq.n	8003116 <HAL_GPIO_Init+0x1fe>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a47      	ldr	r2, [pc, #284]	; (8003210 <HAL_GPIO_Init+0x2f8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00d      	beq.n	8003112 <HAL_GPIO_Init+0x1fa>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a46      	ldr	r2, [pc, #280]	; (8003214 <HAL_GPIO_Init+0x2fc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d007      	beq.n	800310e <HAL_GPIO_Init+0x1f6>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a45      	ldr	r2, [pc, #276]	; (8003218 <HAL_GPIO_Init+0x300>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d101      	bne.n	800310a <HAL_GPIO_Init+0x1f2>
 8003106:	2304      	movs	r3, #4
 8003108:	e008      	b.n	800311c <HAL_GPIO_Init+0x204>
 800310a:	2307      	movs	r3, #7
 800310c:	e006      	b.n	800311c <HAL_GPIO_Init+0x204>
 800310e:	2303      	movs	r3, #3
 8003110:	e004      	b.n	800311c <HAL_GPIO_Init+0x204>
 8003112:	2302      	movs	r3, #2
 8003114:	e002      	b.n	800311c <HAL_GPIO_Init+0x204>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <HAL_GPIO_Init+0x204>
 800311a:	2300      	movs	r3, #0
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	f002 0203 	and.w	r2, r2, #3
 8003122:	0092      	lsls	r2, r2, #2
 8003124:	4093      	lsls	r3, r2
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800312c:	4935      	ldr	r1, [pc, #212]	; (8003204 <HAL_GPIO_Init+0x2ec>)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	089b      	lsrs	r3, r3, #2
 8003132:	3302      	adds	r3, #2
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800313a:	4b38      	ldr	r3, [pc, #224]	; (800321c <HAL_GPIO_Init+0x304>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800315e:	4a2f      	ldr	r2, [pc, #188]	; (800321c <HAL_GPIO_Init+0x304>)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003164:	4b2d      	ldr	r3, [pc, #180]	; (800321c <HAL_GPIO_Init+0x304>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003188:	4a24      	ldr	r2, [pc, #144]	; (800321c <HAL_GPIO_Init+0x304>)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800318e:	4b23      	ldr	r3, [pc, #140]	; (800321c <HAL_GPIO_Init+0x304>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031b2:	4a1a      	ldr	r2, [pc, #104]	; (800321c <HAL_GPIO_Init+0x304>)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b8:	4b18      	ldr	r3, [pc, #96]	; (800321c <HAL_GPIO_Init+0x304>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031dc:	4a0f      	ldr	r2, [pc, #60]	; (800321c <HAL_GPIO_Init+0x304>)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3301      	adds	r3, #1
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2b0f      	cmp	r3, #15
 80031ec:	f67f aea2 	bls.w	8002f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	3724      	adds	r7, #36	; 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800
 8003204:	40013800 	.word	0x40013800
 8003208:	40020000 	.word	0x40020000
 800320c:	40020400 	.word	0x40020400
 8003210:	40020800 	.word	0x40020800
 8003214:	40020c00 	.word	0x40020c00
 8003218:	40021000 	.word	0x40021000
 800321c:	40013c00 	.word	0x40013c00

08003220 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003232:	2300      	movs	r3, #0
 8003234:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	e0bb      	b.n	80033b4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800323c:	2201      	movs	r2, #1
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4013      	ands	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	429a      	cmp	r2, r3
 8003254:	f040 80ab 	bne.w	80033ae <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003258:	4a5c      	ldr	r2, [pc, #368]	; (80033cc <HAL_GPIO_DeInit+0x1ac>)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	089b      	lsrs	r3, r3, #2
 800325e:	3302      	adds	r3, #2
 8003260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003264:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	220f      	movs	r2, #15
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	4013      	ands	r3, r2
 8003278:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a54      	ldr	r2, [pc, #336]	; (80033d0 <HAL_GPIO_DeInit+0x1b0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d019      	beq.n	80032b6 <HAL_GPIO_DeInit+0x96>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a53      	ldr	r2, [pc, #332]	; (80033d4 <HAL_GPIO_DeInit+0x1b4>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_GPIO_DeInit+0x92>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a52      	ldr	r2, [pc, #328]	; (80033d8 <HAL_GPIO_DeInit+0x1b8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00d      	beq.n	80032ae <HAL_GPIO_DeInit+0x8e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a51      	ldr	r2, [pc, #324]	; (80033dc <HAL_GPIO_DeInit+0x1bc>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d007      	beq.n	80032aa <HAL_GPIO_DeInit+0x8a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a50      	ldr	r2, [pc, #320]	; (80033e0 <HAL_GPIO_DeInit+0x1c0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d101      	bne.n	80032a6 <HAL_GPIO_DeInit+0x86>
 80032a2:	2304      	movs	r3, #4
 80032a4:	e008      	b.n	80032b8 <HAL_GPIO_DeInit+0x98>
 80032a6:	2307      	movs	r3, #7
 80032a8:	e006      	b.n	80032b8 <HAL_GPIO_DeInit+0x98>
 80032aa:	2303      	movs	r3, #3
 80032ac:	e004      	b.n	80032b8 <HAL_GPIO_DeInit+0x98>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e002      	b.n	80032b8 <HAL_GPIO_DeInit+0x98>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <HAL_GPIO_DeInit+0x98>
 80032b6:	2300      	movs	r3, #0
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	f002 0203 	and.w	r2, r2, #3
 80032be:	0092      	lsls	r2, r2, #2
 80032c0:	4093      	lsls	r3, r2
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d132      	bne.n	800332e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80032c8:	4b46      	ldr	r3, [pc, #280]	; (80033e4 <HAL_GPIO_DeInit+0x1c4>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	4944      	ldr	r1, [pc, #272]	; (80033e4 <HAL_GPIO_DeInit+0x1c4>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80032d6:	4b43      	ldr	r3, [pc, #268]	; (80033e4 <HAL_GPIO_DeInit+0x1c4>)
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	43db      	mvns	r3, r3
 80032de:	4941      	ldr	r1, [pc, #260]	; (80033e4 <HAL_GPIO_DeInit+0x1c4>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80032e4:	4b3f      	ldr	r3, [pc, #252]	; (80033e4 <HAL_GPIO_DeInit+0x1c4>)
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	493d      	ldr	r1, [pc, #244]	; (80033e4 <HAL_GPIO_DeInit+0x1c4>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80032f2:	4b3c      	ldr	r3, [pc, #240]	; (80033e4 <HAL_GPIO_DeInit+0x1c4>)
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	493a      	ldr	r1, [pc, #232]	; (80033e4 <HAL_GPIO_DeInit+0x1c4>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	220f      	movs	r2, #15
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003310:	4a2e      	ldr	r2, [pc, #184]	; (80033cc <HAL_GPIO_DeInit+0x1ac>)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	089b      	lsrs	r3, r3, #2
 8003316:	3302      	adds	r3, #2
 8003318:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	43da      	mvns	r2, r3
 8003320:	482a      	ldr	r0, [pc, #168]	; (80033cc <HAL_GPIO_DeInit+0x1ac>)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	089b      	lsrs	r3, r3, #2
 8003326:	400a      	ands	r2, r1
 8003328:	3302      	adds	r3, #2
 800332a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	2103      	movs	r1, #3
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	401a      	ands	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	08da      	lsrs	r2, r3, #3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3208      	adds	r2, #8
 800334c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	220f      	movs	r2, #15
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	08d2      	lsrs	r2, r2, #3
 8003364:	4019      	ands	r1, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3208      	adds	r2, #8
 800336a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	2103      	movs	r1, #3
 8003378:	fa01 f303 	lsl.w	r3, r1, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	401a      	ands	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	2101      	movs	r1, #1
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	fa01 f303 	lsl.w	r3, r1, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	401a      	ands	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	2103      	movs	r1, #3
 80033a2:	fa01 f303 	lsl.w	r3, r1, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	401a      	ands	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	3301      	adds	r3, #1
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b0f      	cmp	r3, #15
 80033b8:	f67f af40 	bls.w	800323c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40013800 	.word	0x40013800
 80033d0:	40020000 	.word	0x40020000
 80033d4:	40020400 	.word	0x40020400
 80033d8:	40020800 	.word	0x40020800
 80033dc:	40020c00 	.word	0x40020c00
 80033e0:	40021000 	.word	0x40021000
 80033e4:	40013c00 	.word	0x40013c00

080033e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	807b      	strh	r3, [r7, #2]
 80033f4:	4613      	mov	r3, r2
 80033f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033f8:	787b      	ldrb	r3, [r7, #1]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033fe:	887a      	ldrh	r2, [r7, #2]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003404:	e003      	b.n	800340e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003406:	887b      	ldrh	r3, [r7, #2]
 8003408:	041a      	lsls	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	619a      	str	r2, [r3, #24]
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	460b      	mov	r3, r1
 8003424:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800342c:	887a      	ldrh	r2, [r7, #2]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4013      	ands	r3, r2
 8003432:	041a      	lsls	r2, r3, #16
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	43d9      	mvns	r1, r3
 8003438:	887b      	ldrh	r3, [r7, #2]
 800343a:	400b      	ands	r3, r1
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	619a      	str	r2, [r3, #24]
}
 8003442:	bf00      	nop
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e267      	b.n	8003932 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d075      	beq.n	800355a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800346e:	4b88      	ldr	r3, [pc, #544]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	2b04      	cmp	r3, #4
 8003478:	d00c      	beq.n	8003494 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800347a:	4b85      	ldr	r3, [pc, #532]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003482:	2b08      	cmp	r3, #8
 8003484:	d112      	bne.n	80034ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003486:	4b82      	ldr	r3, [pc, #520]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800348e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003492:	d10b      	bne.n	80034ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003494:	4b7e      	ldr	r3, [pc, #504]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d05b      	beq.n	8003558 <HAL_RCC_OscConfig+0x108>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d157      	bne.n	8003558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e242      	b.n	8003932 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b4:	d106      	bne.n	80034c4 <HAL_RCC_OscConfig+0x74>
 80034b6:	4b76      	ldr	r3, [pc, #472]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a75      	ldr	r2, [pc, #468]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 80034bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	e01d      	b.n	8003500 <HAL_RCC_OscConfig+0xb0>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034cc:	d10c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x98>
 80034ce:	4b70      	ldr	r3, [pc, #448]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a6f      	ldr	r2, [pc, #444]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 80034d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	4b6d      	ldr	r3, [pc, #436]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a6c      	ldr	r2, [pc, #432]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 80034e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	e00b      	b.n	8003500 <HAL_RCC_OscConfig+0xb0>
 80034e8:	4b69      	ldr	r3, [pc, #420]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a68      	ldr	r2, [pc, #416]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 80034ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	4b66      	ldr	r3, [pc, #408]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a65      	ldr	r2, [pc, #404]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 80034fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d013      	beq.n	8003530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7ff fb00 	bl	8002b0c <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003510:	f7ff fafc 	bl	8002b0c <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b64      	cmp	r3, #100	; 0x64
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e207      	b.n	8003932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003522:	4b5b      	ldr	r3, [pc, #364]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0f0      	beq.n	8003510 <HAL_RCC_OscConfig+0xc0>
 800352e:	e014      	b.n	800355a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7ff faec 	bl	8002b0c <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003538:	f7ff fae8 	bl	8002b0c <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b64      	cmp	r3, #100	; 0x64
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e1f3      	b.n	8003932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800354a:	4b51      	ldr	r3, [pc, #324]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0xe8>
 8003556:	e000      	b.n	800355a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d063      	beq.n	800362e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003566:	4b4a      	ldr	r3, [pc, #296]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003572:	4b47      	ldr	r3, [pc, #284]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800357a:	2b08      	cmp	r3, #8
 800357c:	d11c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800357e:	4b44      	ldr	r3, [pc, #272]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d116      	bne.n	80035b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800358a:	4b41      	ldr	r3, [pc, #260]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <HAL_RCC_OscConfig+0x152>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d001      	beq.n	80035a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e1c7      	b.n	8003932 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a2:	4b3b      	ldr	r3, [pc, #236]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4937      	ldr	r1, [pc, #220]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b6:	e03a      	b.n	800362e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d020      	beq.n	8003602 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c0:	4b34      	ldr	r3, [pc, #208]	; (8003694 <HAL_RCC_OscConfig+0x244>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c6:	f7ff faa1 	bl	8002b0c <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ce:	f7ff fa9d 	bl	8002b0c <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e1a8      	b.n	8003932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e0:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ec:	4b28      	ldr	r3, [pc, #160]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	4925      	ldr	r1, [pc, #148]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]
 8003600:	e015      	b.n	800362e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003602:	4b24      	ldr	r3, [pc, #144]	; (8003694 <HAL_RCC_OscConfig+0x244>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7ff fa80 	bl	8002b0c <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003610:	f7ff fa7c 	bl	8002b0c <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e187      	b.n	8003932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003622:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d036      	beq.n	80036a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d016      	beq.n	8003670 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003642:	4b15      	ldr	r3, [pc, #84]	; (8003698 <HAL_RCC_OscConfig+0x248>)
 8003644:	2201      	movs	r2, #1
 8003646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003648:	f7ff fa60 	bl	8002b0c <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003650:	f7ff fa5c 	bl	8002b0c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e167      	b.n	8003932 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_RCC_OscConfig+0x240>)
 8003664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x200>
 800366e:	e01b      	b.n	80036a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003670:	4b09      	ldr	r3, [pc, #36]	; (8003698 <HAL_RCC_OscConfig+0x248>)
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003676:	f7ff fa49 	bl	8002b0c <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800367c:	e00e      	b.n	800369c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800367e:	f7ff fa45 	bl	8002b0c <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d907      	bls.n	800369c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e150      	b.n	8003932 <HAL_RCC_OscConfig+0x4e2>
 8003690:	40023800 	.word	0x40023800
 8003694:	42470000 	.word	0x42470000
 8003698:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800369c:	4b88      	ldr	r3, [pc, #544]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 800369e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1ea      	bne.n	800367e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 8097 	beq.w	80037e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b6:	2300      	movs	r3, #0
 80036b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ba:	4b81      	ldr	r3, [pc, #516]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10f      	bne.n	80036e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	60bb      	str	r3, [r7, #8]
 80036ca:	4b7d      	ldr	r3, [pc, #500]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	4a7c      	ldr	r2, [pc, #496]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 80036d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d4:	6413      	str	r3, [r2, #64]	; 0x40
 80036d6:	4b7a      	ldr	r3, [pc, #488]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e6:	4b77      	ldr	r3, [pc, #476]	; (80038c4 <HAL_RCC_OscConfig+0x474>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d118      	bne.n	8003724 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036f2:	4b74      	ldr	r3, [pc, #464]	; (80038c4 <HAL_RCC_OscConfig+0x474>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a73      	ldr	r2, [pc, #460]	; (80038c4 <HAL_RCC_OscConfig+0x474>)
 80036f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fe:	f7ff fa05 	bl	8002b0c <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003704:	e008      	b.n	8003718 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003706:	f7ff fa01 	bl	8002b0c <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b02      	cmp	r3, #2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e10c      	b.n	8003932 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003718:	4b6a      	ldr	r3, [pc, #424]	; (80038c4 <HAL_RCC_OscConfig+0x474>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0f0      	beq.n	8003706 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d106      	bne.n	800373a <HAL_RCC_OscConfig+0x2ea>
 800372c:	4b64      	ldr	r3, [pc, #400]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4a63      	ldr	r2, [pc, #396]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6713      	str	r3, [r2, #112]	; 0x70
 8003738:	e01c      	b.n	8003774 <HAL_RCC_OscConfig+0x324>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b05      	cmp	r3, #5
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x30c>
 8003742:	4b5f      	ldr	r3, [pc, #380]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4a5e      	ldr	r2, [pc, #376]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 8003748:	f043 0304 	orr.w	r3, r3, #4
 800374c:	6713      	str	r3, [r2, #112]	; 0x70
 800374e:	4b5c      	ldr	r3, [pc, #368]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a5b      	ldr	r2, [pc, #364]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6713      	str	r3, [r2, #112]	; 0x70
 800375a:	e00b      	b.n	8003774 <HAL_RCC_OscConfig+0x324>
 800375c:	4b58      	ldr	r3, [pc, #352]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	4a57      	ldr	r2, [pc, #348]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	6713      	str	r3, [r2, #112]	; 0x70
 8003768:	4b55      	ldr	r3, [pc, #340]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 800376a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376c:	4a54      	ldr	r2, [pc, #336]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 800376e:	f023 0304 	bic.w	r3, r3, #4
 8003772:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d015      	beq.n	80037a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377c:	f7ff f9c6 	bl	8002b0c <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003782:	e00a      	b.n	800379a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003784:	f7ff f9c2 	bl	8002b0c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e0cb      	b.n	8003932 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379a:	4b49      	ldr	r3, [pc, #292]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0ee      	beq.n	8003784 <HAL_RCC_OscConfig+0x334>
 80037a6:	e014      	b.n	80037d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a8:	f7ff f9b0 	bl	8002b0c <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b0:	f7ff f9ac 	bl	8002b0c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e0b5      	b.n	8003932 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c6:	4b3e      	ldr	r3, [pc, #248]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1ee      	bne.n	80037b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d105      	bne.n	80037e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d8:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	4a38      	ldr	r2, [pc, #224]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 80037de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80a1 	beq.w	8003930 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ee:	4b34      	ldr	r3, [pc, #208]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b08      	cmp	r3, #8
 80037f8:	d05c      	beq.n	80038b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d141      	bne.n	8003886 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003802:	4b31      	ldr	r3, [pc, #196]	; (80038c8 <HAL_RCC_OscConfig+0x478>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7ff f980 	bl	8002b0c <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003810:	f7ff f97c 	bl	8002b0c <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e087      	b.n	8003932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003822:	4b27      	ldr	r3, [pc, #156]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69da      	ldr	r2, [r3, #28]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	019b      	lsls	r3, r3, #6
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	3b01      	subs	r3, #1
 8003848:	041b      	lsls	r3, r3, #16
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	061b      	lsls	r3, r3, #24
 8003852:	491b      	ldr	r1, [pc, #108]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 8003854:	4313      	orrs	r3, r2
 8003856:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003858:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <HAL_RCC_OscConfig+0x478>)
 800385a:	2201      	movs	r2, #1
 800385c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385e:	f7ff f955 	bl	8002b0c <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003866:	f7ff f951 	bl	8002b0c <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e05c      	b.n	8003932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003878:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x416>
 8003884:	e054      	b.n	8003930 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003886:	4b10      	ldr	r3, [pc, #64]	; (80038c8 <HAL_RCC_OscConfig+0x478>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388c:	f7ff f93e 	bl	8002b0c <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003894:	f7ff f93a 	bl	8002b0c <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e045      	b.n	8003932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a6:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_RCC_OscConfig+0x470>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x444>
 80038b2:	e03d      	b.n	8003930 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d107      	bne.n	80038cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e038      	b.n	8003932 <HAL_RCC_OscConfig+0x4e2>
 80038c0:	40023800 	.word	0x40023800
 80038c4:	40007000 	.word	0x40007000
 80038c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038cc:	4b1b      	ldr	r3, [pc, #108]	; (800393c <HAL_RCC_OscConfig+0x4ec>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d028      	beq.n	800392c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d121      	bne.n	800392c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d11a      	bne.n	800392c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038fc:	4013      	ands	r3, r2
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003902:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003904:	4293      	cmp	r3, r2
 8003906:	d111      	bne.n	800392c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003912:	085b      	lsrs	r3, r3, #1
 8003914:	3b01      	subs	r3, #1
 8003916:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d107      	bne.n	800392c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800

08003940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0cc      	b.n	8003aee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003954:	4b68      	ldr	r3, [pc, #416]	; (8003af8 <HAL_RCC_ClockConfig+0x1b8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d90c      	bls.n	800397c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b65      	ldr	r3, [pc, #404]	; (8003af8 <HAL_RCC_ClockConfig+0x1b8>)
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396a:	4b63      	ldr	r3, [pc, #396]	; (8003af8 <HAL_RCC_ClockConfig+0x1b8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d001      	beq.n	800397c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0b8      	b.n	8003aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d020      	beq.n	80039ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003994:	4b59      	ldr	r3, [pc, #356]	; (8003afc <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	4a58      	ldr	r2, [pc, #352]	; (8003afc <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800399e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0308 	and.w	r3, r3, #8
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039ac:	4b53      	ldr	r3, [pc, #332]	; (8003afc <HAL_RCC_ClockConfig+0x1bc>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	4a52      	ldr	r2, [pc, #328]	; (8003afc <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b8:	4b50      	ldr	r3, [pc, #320]	; (8003afc <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	494d      	ldr	r1, [pc, #308]	; (8003afc <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d044      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d107      	bne.n	80039ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039de:	4b47      	ldr	r3, [pc, #284]	; (8003afc <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d119      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e07f      	b.n	8003aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d003      	beq.n	80039fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d107      	bne.n	8003a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fe:	4b3f      	ldr	r3, [pc, #252]	; (8003afc <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d109      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e06f      	b.n	8003aee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0e:	4b3b      	ldr	r3, [pc, #236]	; (8003afc <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e067      	b.n	8003aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a1e:	4b37      	ldr	r3, [pc, #220]	; (8003afc <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f023 0203 	bic.w	r2, r3, #3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	4934      	ldr	r1, [pc, #208]	; (8003afc <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a30:	f7ff f86c 	bl	8002b0c <HAL_GetTick>
 8003a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a36:	e00a      	b.n	8003a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a38:	f7ff f868 	bl	8002b0c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e04f      	b.n	8003aee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4e:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 020c 	and.w	r2, r3, #12
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d1eb      	bne.n	8003a38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a60:	4b25      	ldr	r3, [pc, #148]	; (8003af8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d20c      	bcs.n	8003a88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6e:	4b22      	ldr	r3, [pc, #136]	; (8003af8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e032      	b.n	8003aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a94:	4b19      	ldr	r3, [pc, #100]	; (8003afc <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	4916      	ldr	r1, [pc, #88]	; (8003afc <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d009      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ab2:	4b12      	ldr	r3, [pc, #72]	; (8003afc <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	490e      	ldr	r1, [pc, #56]	; (8003afc <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ac6:	f000 f821 	bl	8003b0c <HAL_RCC_GetSysClockFreq>
 8003aca:	4602      	mov	r2, r0
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	091b      	lsrs	r3, r3, #4
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	490a      	ldr	r1, [pc, #40]	; (8003b00 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad8:	5ccb      	ldrb	r3, [r1, r3]
 8003ada:	fa22 f303 	lsr.w	r3, r2, r3
 8003ade:	4a09      	ldr	r2, [pc, #36]	; (8003b04 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ae2:	4b09      	ldr	r3, [pc, #36]	; (8003b08 <HAL_RCC_ClockConfig+0x1c8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fe ffcc 	bl	8002a84 <HAL_InitTick>

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40023c00 	.word	0x40023c00
 8003afc:	40023800 	.word	0x40023800
 8003b00:	08010d8c 	.word	0x08010d8c
 8003b04:	200000a4 	.word	0x200000a4
 8003b08:	200000a8 	.word	0x200000a8

08003b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b10:	b090      	sub	sp, #64	; 0x40
 8003b12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	637b      	str	r3, [r7, #52]	; 0x34
 8003b18:	2300      	movs	r3, #0
 8003b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b24:	4b59      	ldr	r3, [pc, #356]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 030c 	and.w	r3, r3, #12
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d00d      	beq.n	8003b4c <HAL_RCC_GetSysClockFreq+0x40>
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	f200 80a1 	bhi.w	8003c78 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <HAL_RCC_GetSysClockFreq+0x34>
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d003      	beq.n	8003b46 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b3e:	e09b      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b40:	4b53      	ldr	r3, [pc, #332]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b42:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b44:	e09b      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b46:	4b53      	ldr	r3, [pc, #332]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b4a:	e098      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b4c:	4b4f      	ldr	r3, [pc, #316]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b54:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b56:	4b4d      	ldr	r3, [pc, #308]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d028      	beq.n	8003bb4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b62:	4b4a      	ldr	r3, [pc, #296]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	099b      	lsrs	r3, r3, #6
 8003b68:	2200      	movs	r2, #0
 8003b6a:	623b      	str	r3, [r7, #32]
 8003b6c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b74:	2100      	movs	r1, #0
 8003b76:	4b47      	ldr	r3, [pc, #284]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b78:	fb03 f201 	mul.w	r2, r3, r1
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	fb00 f303 	mul.w	r3, r0, r3
 8003b82:	4413      	add	r3, r2
 8003b84:	4a43      	ldr	r2, [pc, #268]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b86:	fba0 1202 	umull	r1, r2, r0, r2
 8003b8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b8c:	460a      	mov	r2, r1
 8003b8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b92:	4413      	add	r3, r2
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b98:	2200      	movs	r2, #0
 8003b9a:	61bb      	str	r3, [r7, #24]
 8003b9c:	61fa      	str	r2, [r7, #28]
 8003b9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ba2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ba6:	f7fc fb83 	bl	80002b0 <__aeabi_uldivmod>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4613      	mov	r3, r2
 8003bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb2:	e053      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bb4:	4b35      	ldr	r3, [pc, #212]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	099b      	lsrs	r3, r3, #6
 8003bba:	2200      	movs	r2, #0
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	617a      	str	r2, [r7, #20]
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003bc6:	f04f 0b00 	mov.w	fp, #0
 8003bca:	4652      	mov	r2, sl
 8003bcc:	465b      	mov	r3, fp
 8003bce:	f04f 0000 	mov.w	r0, #0
 8003bd2:	f04f 0100 	mov.w	r1, #0
 8003bd6:	0159      	lsls	r1, r3, #5
 8003bd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bdc:	0150      	lsls	r0, r2, #5
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	ebb2 080a 	subs.w	r8, r2, sl
 8003be6:	eb63 090b 	sbc.w	r9, r3, fp
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bf6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bfa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bfe:	ebb2 0408 	subs.w	r4, r2, r8
 8003c02:	eb63 0509 	sbc.w	r5, r3, r9
 8003c06:	f04f 0200 	mov.w	r2, #0
 8003c0a:	f04f 0300 	mov.w	r3, #0
 8003c0e:	00eb      	lsls	r3, r5, #3
 8003c10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c14:	00e2      	lsls	r2, r4, #3
 8003c16:	4614      	mov	r4, r2
 8003c18:	461d      	mov	r5, r3
 8003c1a:	eb14 030a 	adds.w	r3, r4, sl
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	eb45 030b 	adc.w	r3, r5, fp
 8003c24:	607b      	str	r3, [r7, #4]
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c32:	4629      	mov	r1, r5
 8003c34:	028b      	lsls	r3, r1, #10
 8003c36:	4621      	mov	r1, r4
 8003c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	028a      	lsls	r2, r1, #10
 8003c40:	4610      	mov	r0, r2
 8003c42:	4619      	mov	r1, r3
 8003c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c46:	2200      	movs	r2, #0
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	60fa      	str	r2, [r7, #12]
 8003c4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c50:	f7fc fb2e 	bl	80002b0 <__aeabi_uldivmod>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4613      	mov	r3, r2
 8003c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	3301      	adds	r3, #1
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c76:	e002      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c7a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3740      	adds	r7, #64	; 0x40
 8003c84:	46bd      	mov	sp, r7
 8003c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	00f42400 	.word	0x00f42400
 8003c94:	017d7840 	.word	0x017d7840

08003c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c9c:	4b03      	ldr	r3, [pc, #12]	; (8003cac <HAL_RCC_GetHCLKFreq+0x14>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	200000a4 	.word	0x200000a4

08003cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cb4:	f7ff fff0 	bl	8003c98 <HAL_RCC_GetHCLKFreq>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	0a9b      	lsrs	r3, r3, #10
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	4903      	ldr	r1, [pc, #12]	; (8003cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc6:	5ccb      	ldrb	r3, [r1, r3]
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	08010d9c 	.word	0x08010d9c

08003cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cdc:	f7ff ffdc 	bl	8003c98 <HAL_RCC_GetHCLKFreq>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	0b5b      	lsrs	r3, r3, #13
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	4903      	ldr	r1, [pc, #12]	; (8003cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cee:	5ccb      	ldrb	r3, [r1, r3]
 8003cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	08010d9c 	.word	0x08010d9c

08003d00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e07b      	b.n	8003e0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d108      	bne.n	8003d2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d22:	d009      	beq.n	8003d38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	61da      	str	r2, [r3, #28]
 8003d2a:	e005      	b.n	8003d38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d106      	bne.n	8003d58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fe fc00 	bl	8002558 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d80:	431a      	orrs	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbc:	ea42 0103 	orr.w	r1, r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	0c1b      	lsrs	r3, r3, #16
 8003dd6:	f003 0104 	and.w	r1, r3, #4
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	f003 0210 	and.w	r2, r3, #16
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b08c      	sub	sp, #48	; 0x30
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e20:	2301      	movs	r3, #1
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_SPI_TransmitReceive+0x26>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e18a      	b.n	800414e <HAL_SPI_TransmitReceive+0x33c>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e40:	f7fe fe64 	bl	8002b0c <HAL_GetTick>
 8003e44:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e56:	887b      	ldrh	r3, [r7, #2]
 8003e58:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d00f      	beq.n	8003e82 <HAL_SPI_TransmitReceive+0x70>
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e68:	d107      	bne.n	8003e7a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d103      	bne.n	8003e7a <HAL_SPI_TransmitReceive+0x68>
 8003e72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d003      	beq.n	8003e82 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e80:	e15b      	b.n	800413a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_SPI_TransmitReceive+0x82>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <HAL_SPI_TransmitReceive+0x82>
 8003e8e:	887b      	ldrh	r3, [r7, #2]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d103      	bne.n	8003e9c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e9a:	e14e      	b.n	800413a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d003      	beq.n	8003eb0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2205      	movs	r2, #5
 8003eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	887a      	ldrh	r2, [r7, #2]
 8003ec0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	887a      	ldrh	r2, [r7, #2]
 8003ec6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	68ba      	ldr	r2, [r7, #8]
 8003ecc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	887a      	ldrh	r2, [r7, #2]
 8003ed2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	887a      	ldrh	r2, [r7, #2]
 8003ed8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d007      	beq.n	8003f04 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f0c:	d178      	bne.n	8004000 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_SPI_TransmitReceive+0x10a>
 8003f16:	8b7b      	ldrh	r3, [r7, #26]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d166      	bne.n	8003fea <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	881a      	ldrh	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	1c9a      	adds	r2, r3, #2
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f40:	e053      	b.n	8003fea <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d11b      	bne.n	8003f88 <HAL_SPI_TransmitReceive+0x176>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d016      	beq.n	8003f88 <HAL_SPI_TransmitReceive+0x176>
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d113      	bne.n	8003f88 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	881a      	ldrh	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	1c9a      	adds	r2, r3, #2
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d119      	bne.n	8003fca <HAL_SPI_TransmitReceive+0x1b8>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d014      	beq.n	8003fca <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	b292      	uxth	r2, r2
 8003fac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	1c9a      	adds	r2, r3, #2
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fca:	f7fe fd9f 	bl	8002b0c <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d807      	bhi.n	8003fea <HAL_SPI_TransmitReceive+0x1d8>
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe0:	d003      	beq.n	8003fea <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003fe8:	e0a7      	b.n	800413a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1a6      	bne.n	8003f42 <HAL_SPI_TransmitReceive+0x130>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1a1      	bne.n	8003f42 <HAL_SPI_TransmitReceive+0x130>
 8003ffe:	e07c      	b.n	80040fa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <HAL_SPI_TransmitReceive+0x1fc>
 8004008:	8b7b      	ldrh	r3, [r7, #26]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d16b      	bne.n	80040e6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	330c      	adds	r3, #12
 8004018:	7812      	ldrb	r2, [r2, #0]
 800401a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004034:	e057      	b.n	80040e6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b02      	cmp	r3, #2
 8004042:	d11c      	bne.n	800407e <HAL_SPI_TransmitReceive+0x26c>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d017      	beq.n	800407e <HAL_SPI_TransmitReceive+0x26c>
 800404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004050:	2b01      	cmp	r3, #1
 8004052:	d114      	bne.n	800407e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	7812      	ldrb	r2, [r2, #0]
 8004060:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b01      	cmp	r3, #1
 800408a:	d119      	bne.n	80040c0 <HAL_SPI_TransmitReceive+0x2ae>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d014      	beq.n	80040c0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040bc:	2301      	movs	r3, #1
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040c0:	f7fe fd24 	bl	8002b0c <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d803      	bhi.n	80040d8 <HAL_SPI_TransmitReceive+0x2c6>
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d6:	d102      	bne.n	80040de <HAL_SPI_TransmitReceive+0x2cc>
 80040d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040e4:	e029      	b.n	800413a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1a2      	bne.n	8004036 <HAL_SPI_TransmitReceive+0x224>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d19d      	bne.n	8004036 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f8b2 	bl	8004268 <SPI_EndRxTxTransaction>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d006      	beq.n	8004118 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004116:	e010      	b.n	800413a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10b      	bne.n	8004138 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	e000      	b.n	800413a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004138:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800414a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800414e:	4618      	mov	r0, r3
 8004150:	3730      	adds	r7, #48	; 0x30
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	4613      	mov	r3, r2
 8004166:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004168:	f7fe fcd0 	bl	8002b0c <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	4413      	add	r3, r2
 8004176:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004178:	f7fe fcc8 	bl	8002b0c <HAL_GetTick>
 800417c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800417e:	4b39      	ldr	r3, [pc, #228]	; (8004264 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	015b      	lsls	r3, r3, #5
 8004184:	0d1b      	lsrs	r3, r3, #20
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	fb02 f303 	mul.w	r3, r2, r3
 800418c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800418e:	e054      	b.n	800423a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004196:	d050      	beq.n	800423a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004198:	f7fe fcb8 	bl	8002b0c <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d902      	bls.n	80041ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d13d      	bne.n	800422a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c6:	d111      	bne.n	80041ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041d0:	d004      	beq.n	80041dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041da:	d107      	bne.n	80041ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041f4:	d10f      	bne.n	8004216 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004214:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e017      	b.n	800425a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	3b01      	subs	r3, #1
 8004238:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4013      	ands	r3, r2
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	429a      	cmp	r2, r3
 8004248:	bf0c      	ite	eq
 800424a:	2301      	moveq	r3, #1
 800424c:	2300      	movne	r3, #0
 800424e:	b2db      	uxtb	r3, r3
 8004250:	461a      	mov	r2, r3
 8004252:	79fb      	ldrb	r3, [r7, #7]
 8004254:	429a      	cmp	r2, r3
 8004256:	d19b      	bne.n	8004190 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3720      	adds	r7, #32
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	200000a4 	.word	0x200000a4

08004268 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b088      	sub	sp, #32
 800426c:	af02      	add	r7, sp, #8
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004274:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <SPI_EndRxTxTransaction+0x7c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1b      	ldr	r2, [pc, #108]	; (80042e8 <SPI_EndRxTxTransaction+0x80>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	0d5b      	lsrs	r3, r3, #21
 8004280:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004284:	fb02 f303 	mul.w	r3, r2, r3
 8004288:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004292:	d112      	bne.n	80042ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2200      	movs	r2, #0
 800429c:	2180      	movs	r1, #128	; 0x80
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f7ff ff5a 	bl	8004158 <SPI_WaitFlagStateUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d016      	beq.n	80042d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ae:	f043 0220 	orr.w	r2, r3, #32
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e00f      	b.n	80042da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d0:	2b80      	cmp	r3, #128	; 0x80
 80042d2:	d0f2      	beq.n	80042ba <SPI_EndRxTxTransaction+0x52>
 80042d4:	e000      	b.n	80042d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80042d6:	bf00      	nop
  }

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	200000a4 	.word	0x200000a4
 80042e8:	165e9f81 	.word	0x165e9f81

080042ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e041      	b.n	8004382 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fe f968 	bl	80025e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f000 fce4 	bl	8004cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e041      	b.n	8004420 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f839 	bl	8004428 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2202      	movs	r2, #2
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	4619      	mov	r1, r3
 80043c8:	4610      	mov	r0, r2
 80043ca:	f000 fc95 	bl	8004cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d109      	bne.n	8004464 <HAL_TIM_OC_Start_IT+0x28>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b01      	cmp	r3, #1
 800445a:	bf14      	ite	ne
 800445c:	2301      	movne	r3, #1
 800445e:	2300      	moveq	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	e022      	b.n	80044aa <HAL_TIM_OC_Start_IT+0x6e>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b04      	cmp	r3, #4
 8004468:	d109      	bne.n	800447e <HAL_TIM_OC_Start_IT+0x42>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b01      	cmp	r3, #1
 8004474:	bf14      	ite	ne
 8004476:	2301      	movne	r3, #1
 8004478:	2300      	moveq	r3, #0
 800447a:	b2db      	uxtb	r3, r3
 800447c:	e015      	b.n	80044aa <HAL_TIM_OC_Start_IT+0x6e>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d109      	bne.n	8004498 <HAL_TIM_OC_Start_IT+0x5c>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	bf14      	ite	ne
 8004490:	2301      	movne	r3, #1
 8004492:	2300      	moveq	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	e008      	b.n	80044aa <HAL_TIM_OC_Start_IT+0x6e>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	bf14      	ite	ne
 80044a4:	2301      	movne	r3, #1
 80044a6:	2300      	moveq	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e0b3      	b.n	800461a <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d104      	bne.n	80044c2 <HAL_TIM_OC_Start_IT+0x86>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044c0:	e013      	b.n	80044ea <HAL_TIM_OC_Start_IT+0xae>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d104      	bne.n	80044d2 <HAL_TIM_OC_Start_IT+0x96>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044d0:	e00b      	b.n	80044ea <HAL_TIM_OC_Start_IT+0xae>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d104      	bne.n	80044e2 <HAL_TIM_OC_Start_IT+0xa6>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044e0:	e003      	b.n	80044ea <HAL_TIM_OC_Start_IT+0xae>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2202      	movs	r2, #2
 80044e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b0c      	cmp	r3, #12
 80044ee:	d841      	bhi.n	8004574 <HAL_TIM_OC_Start_IT+0x138>
 80044f0:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <HAL_TIM_OC_Start_IT+0xbc>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	0800452d 	.word	0x0800452d
 80044fc:	08004575 	.word	0x08004575
 8004500:	08004575 	.word	0x08004575
 8004504:	08004575 	.word	0x08004575
 8004508:	0800453f 	.word	0x0800453f
 800450c:	08004575 	.word	0x08004575
 8004510:	08004575 	.word	0x08004575
 8004514:	08004575 	.word	0x08004575
 8004518:	08004551 	.word	0x08004551
 800451c:	08004575 	.word	0x08004575
 8004520:	08004575 	.word	0x08004575
 8004524:	08004575 	.word	0x08004575
 8004528:	08004563 	.word	0x08004563
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0202 	orr.w	r2, r2, #2
 800453a:	60da      	str	r2, [r3, #12]
      break;
 800453c:	e01d      	b.n	800457a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0204 	orr.w	r2, r2, #4
 800454c:	60da      	str	r2, [r3, #12]
      break;
 800454e:	e014      	b.n	800457a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0208 	orr.w	r2, r2, #8
 800455e:	60da      	str	r2, [r3, #12]
      break;
 8004560:	e00b      	b.n	800457a <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0210 	orr.w	r2, r2, #16
 8004570:	60da      	str	r2, [r3, #12]
      break;
 8004572:	e002      	b.n	800457a <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
      break;
 8004578:	bf00      	nop
  }

  if (status == HAL_OK)
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d14b      	bne.n	8004618 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2201      	movs	r2, #1
 8004586:	6839      	ldr	r1, [r7, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f000 fe5b 	bl	8005244 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a24      	ldr	r2, [pc, #144]	; (8004624 <HAL_TIM_OC_Start_IT+0x1e8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d107      	bne.n	80045a8 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <HAL_TIM_OC_Start_IT+0x1e8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d018      	beq.n	80045e4 <HAL_TIM_OC_Start_IT+0x1a8>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ba:	d013      	beq.n	80045e4 <HAL_TIM_OC_Start_IT+0x1a8>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a19      	ldr	r2, [pc, #100]	; (8004628 <HAL_TIM_OC_Start_IT+0x1ec>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00e      	beq.n	80045e4 <HAL_TIM_OC_Start_IT+0x1a8>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a18      	ldr	r2, [pc, #96]	; (800462c <HAL_TIM_OC_Start_IT+0x1f0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d009      	beq.n	80045e4 <HAL_TIM_OC_Start_IT+0x1a8>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a16      	ldr	r2, [pc, #88]	; (8004630 <HAL_TIM_OC_Start_IT+0x1f4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d004      	beq.n	80045e4 <HAL_TIM_OC_Start_IT+0x1a8>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a15      	ldr	r2, [pc, #84]	; (8004634 <HAL_TIM_OC_Start_IT+0x1f8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d111      	bne.n	8004608 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b06      	cmp	r3, #6
 80045f4:	d010      	beq.n	8004618 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0201 	orr.w	r2, r2, #1
 8004604:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004606:	e007      	b.n	8004618 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004618:	7bfb      	ldrb	r3, [r7, #15]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40010000 	.word	0x40010000
 8004628:	40000400 	.word	0x40000400
 800462c:	40000800 	.word	0x40000800
 8004630:	40000c00 	.word	0x40000c00
 8004634:	40014000 	.word	0x40014000

08004638 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b0c      	cmp	r3, #12
 800464a:	d841      	bhi.n	80046d0 <HAL_TIM_OC_Stop_IT+0x98>
 800464c:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <HAL_TIM_OC_Stop_IT+0x1c>)
 800464e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004652:	bf00      	nop
 8004654:	08004689 	.word	0x08004689
 8004658:	080046d1 	.word	0x080046d1
 800465c:	080046d1 	.word	0x080046d1
 8004660:	080046d1 	.word	0x080046d1
 8004664:	0800469b 	.word	0x0800469b
 8004668:	080046d1 	.word	0x080046d1
 800466c:	080046d1 	.word	0x080046d1
 8004670:	080046d1 	.word	0x080046d1
 8004674:	080046ad 	.word	0x080046ad
 8004678:	080046d1 	.word	0x080046d1
 800467c:	080046d1 	.word	0x080046d1
 8004680:	080046d1 	.word	0x080046d1
 8004684:	080046bf 	.word	0x080046bf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0202 	bic.w	r2, r2, #2
 8004696:	60da      	str	r2, [r3, #12]
      break;
 8004698:	e01d      	b.n	80046d6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0204 	bic.w	r2, r2, #4
 80046a8:	60da      	str	r2, [r3, #12]
      break;
 80046aa:	e014      	b.n	80046d6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0208 	bic.w	r2, r2, #8
 80046ba:	60da      	str	r2, [r3, #12]
      break;
 80046bc:	e00b      	b.n	80046d6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0210 	bic.w	r2, r2, #16
 80046cc:	60da      	str	r2, [r3, #12]
      break;
 80046ce:	e002      	b.n	80046d6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	73fb      	strb	r3, [r7, #15]
      break;
 80046d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d157      	bne.n	800478c <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2200      	movs	r2, #0
 80046e2:	6839      	ldr	r1, [r7, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fdad 	bl	8005244 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a2a      	ldr	r2, [pc, #168]	; (8004798 <HAL_TIM_OC_Stop_IT+0x160>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d117      	bne.n	8004724 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6a1a      	ldr	r2, [r3, #32]
 80046fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10f      	bne.n	8004724 <HAL_TIM_OC_Stop_IT+0xec>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6a1a      	ldr	r2, [r3, #32]
 800470a:	f240 4344 	movw	r3, #1092	; 0x444
 800470e:	4013      	ands	r3, r2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d107      	bne.n	8004724 <HAL_TIM_OC_Stop_IT+0xec>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004722:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6a1a      	ldr	r2, [r3, #32]
 800472a:	f241 1311 	movw	r3, #4369	; 0x1111
 800472e:	4013      	ands	r3, r2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10f      	bne.n	8004754 <HAL_TIM_OC_Stop_IT+0x11c>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6a1a      	ldr	r2, [r3, #32]
 800473a:	f240 4344 	movw	r3, #1092	; 0x444
 800473e:	4013      	ands	r3, r2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d107      	bne.n	8004754 <HAL_TIM_OC_Stop_IT+0x11c>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0201 	bic.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d104      	bne.n	8004764 <HAL_TIM_OC_Stop_IT+0x12c>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004762:	e013      	b.n	800478c <HAL_TIM_OC_Stop_IT+0x154>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b04      	cmp	r3, #4
 8004768:	d104      	bne.n	8004774 <HAL_TIM_OC_Stop_IT+0x13c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004772:	e00b      	b.n	800478c <HAL_TIM_OC_Stop_IT+0x154>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b08      	cmp	r3, #8
 8004778:	d104      	bne.n	8004784 <HAL_TIM_OC_Stop_IT+0x14c>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004782:	e003      	b.n	800478c <HAL_TIM_OC_Stop_IT+0x154>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800478c:	7bfb      	ldrb	r3, [r7, #15]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000

0800479c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e041      	b.n	8004834 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d106      	bne.n	80047ca <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f839 	bl	800483c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2202      	movs	r2, #2
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3304      	adds	r3, #4
 80047da:	4619      	mov	r1, r3
 80047dc:	4610      	mov	r0, r2
 80047de:	f000 fa8b 	bl	8004cf8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0208 	bic.w	r2, r2, #8
 80047f0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6819      	ldr	r1, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b02      	cmp	r3, #2
 8004864:	d122      	bne.n	80048ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b02      	cmp	r3, #2
 8004872:	d11b      	bne.n	80048ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f06f 0202 	mvn.w	r2, #2
 800487c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fa11 	bl	8004cba <HAL_TIM_IC_CaptureCallback>
 8004898:	e005      	b.n	80048a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fd fd2e 	bl	80022fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fa14 	bl	8004cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d122      	bne.n	8004900 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d11b      	bne.n	8004900 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0204 	mvn.w	r2, #4
 80048d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2202      	movs	r2, #2
 80048d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f9e7 	bl	8004cba <HAL_TIM_IC_CaptureCallback>
 80048ec:	e005      	b.n	80048fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fd fd04 	bl	80022fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f9ea 	bl	8004cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b08      	cmp	r3, #8
 800490c:	d122      	bne.n	8004954 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	2b08      	cmp	r3, #8
 800491a:	d11b      	bne.n	8004954 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f06f 0208 	mvn.w	r2, #8
 8004924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2204      	movs	r2, #4
 800492a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f9bd 	bl	8004cba <HAL_TIM_IC_CaptureCallback>
 8004940:	e005      	b.n	800494e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fd fcda 	bl	80022fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f9c0 	bl	8004cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0310 	and.w	r3, r3, #16
 800495e:	2b10      	cmp	r3, #16
 8004960:	d122      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0310 	and.w	r3, r3, #16
 800496c:	2b10      	cmp	r3, #16
 800496e:	d11b      	bne.n	80049a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0210 	mvn.w	r2, #16
 8004978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2208      	movs	r2, #8
 800497e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f993 	bl	8004cba <HAL_TIM_IC_CaptureCallback>
 8004994:	e005      	b.n	80049a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fd fcb0 	bl	80022fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f996 	bl	8004cce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d10e      	bne.n	80049d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d107      	bne.n	80049d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f06f 0201 	mvn.w	r2, #1
 80049cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f969 	bl	8004ca6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049de:	2b80      	cmp	r3, #128	; 0x80
 80049e0:	d10e      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ec:	2b80      	cmp	r3, #128	; 0x80
 80049ee:	d107      	bne.n	8004a00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fcc0 	bl	8005380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0a:	2b40      	cmp	r3, #64	; 0x40
 8004a0c:	d10e      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a18:	2b40      	cmp	r3, #64	; 0x40
 8004a1a:	d107      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f95b 	bl	8004ce2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0320 	and.w	r3, r3, #32
 8004a36:	2b20      	cmp	r3, #32
 8004a38:	d10e      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d107      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0220 	mvn.w	r2, #32
 8004a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fc8a 	bl	800536c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a58:	bf00      	nop
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d101      	bne.n	8004a7e <HAL_TIM_OC_ConfigChannel+0x1e>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e048      	b.n	8004b10 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b0c      	cmp	r3, #12
 8004a8a:	d839      	bhi.n	8004b00 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004a8c:	a201      	add	r2, pc, #4	; (adr r2, 8004a94 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a92:	bf00      	nop
 8004a94:	08004ac9 	.word	0x08004ac9
 8004a98:	08004b01 	.word	0x08004b01
 8004a9c:	08004b01 	.word	0x08004b01
 8004aa0:	08004b01 	.word	0x08004b01
 8004aa4:	08004ad7 	.word	0x08004ad7
 8004aa8:	08004b01 	.word	0x08004b01
 8004aac:	08004b01 	.word	0x08004b01
 8004ab0:	08004b01 	.word	0x08004b01
 8004ab4:	08004ae5 	.word	0x08004ae5
 8004ab8:	08004b01 	.word	0x08004b01
 8004abc:	08004b01 	.word	0x08004b01
 8004ac0:	08004b01 	.word	0x08004b01
 8004ac4:	08004af3 	.word	0x08004af3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 f992 	bl	8004df8 <TIM_OC1_SetConfig>
      break;
 8004ad4:	e017      	b.n	8004b06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 f9f1 	bl	8004ec4 <TIM_OC2_SetConfig>
      break;
 8004ae2:	e010      	b.n	8004b06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68b9      	ldr	r1, [r7, #8]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fa56 	bl	8004f9c <TIM_OC3_SetConfig>
      break;
 8004af0:	e009      	b.n	8004b06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fab9 	bl	8005070 <TIM_OC4_SetConfig>
      break;
 8004afe:	e002      	b.n	8004b06 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	75fb      	strb	r3, [r7, #23]
      break;
 8004b04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_TIM_ConfigClockSource+0x1c>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e0b4      	b.n	8004c9e <HAL_TIM_ConfigClockSource+0x186>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b6c:	d03e      	beq.n	8004bec <HAL_TIM_ConfigClockSource+0xd4>
 8004b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b72:	f200 8087 	bhi.w	8004c84 <HAL_TIM_ConfigClockSource+0x16c>
 8004b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7a:	f000 8086 	beq.w	8004c8a <HAL_TIM_ConfigClockSource+0x172>
 8004b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b82:	d87f      	bhi.n	8004c84 <HAL_TIM_ConfigClockSource+0x16c>
 8004b84:	2b70      	cmp	r3, #112	; 0x70
 8004b86:	d01a      	beq.n	8004bbe <HAL_TIM_ConfigClockSource+0xa6>
 8004b88:	2b70      	cmp	r3, #112	; 0x70
 8004b8a:	d87b      	bhi.n	8004c84 <HAL_TIM_ConfigClockSource+0x16c>
 8004b8c:	2b60      	cmp	r3, #96	; 0x60
 8004b8e:	d050      	beq.n	8004c32 <HAL_TIM_ConfigClockSource+0x11a>
 8004b90:	2b60      	cmp	r3, #96	; 0x60
 8004b92:	d877      	bhi.n	8004c84 <HAL_TIM_ConfigClockSource+0x16c>
 8004b94:	2b50      	cmp	r3, #80	; 0x50
 8004b96:	d03c      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0xfa>
 8004b98:	2b50      	cmp	r3, #80	; 0x50
 8004b9a:	d873      	bhi.n	8004c84 <HAL_TIM_ConfigClockSource+0x16c>
 8004b9c:	2b40      	cmp	r3, #64	; 0x40
 8004b9e:	d058      	beq.n	8004c52 <HAL_TIM_ConfigClockSource+0x13a>
 8004ba0:	2b40      	cmp	r3, #64	; 0x40
 8004ba2:	d86f      	bhi.n	8004c84 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba4:	2b30      	cmp	r3, #48	; 0x30
 8004ba6:	d064      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0x15a>
 8004ba8:	2b30      	cmp	r3, #48	; 0x30
 8004baa:	d86b      	bhi.n	8004c84 <HAL_TIM_ConfigClockSource+0x16c>
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d060      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0x15a>
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d867      	bhi.n	8004c84 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d05c      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0x15a>
 8004bb8:	2b10      	cmp	r3, #16
 8004bba:	d05a      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0x15a>
 8004bbc:	e062      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6899      	ldr	r1, [r3, #8]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f000 fb19 	bl	8005204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004be0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	609a      	str	r2, [r3, #8]
      break;
 8004bea:	e04f      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	6899      	ldr	r1, [r3, #8]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f000 fb02 	bl	8005204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c0e:	609a      	str	r2, [r3, #8]
      break;
 8004c10:	e03c      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	6859      	ldr	r1, [r3, #4]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	f000 fa76 	bl	8005110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2150      	movs	r1, #80	; 0x50
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 facf 	bl	80051ce <TIM_ITRx_SetConfig>
      break;
 8004c30:	e02c      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6859      	ldr	r1, [r3, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f000 fa95 	bl	800516e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2160      	movs	r1, #96	; 0x60
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fabf 	bl	80051ce <TIM_ITRx_SetConfig>
      break;
 8004c50:	e01c      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	6859      	ldr	r1, [r3, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f000 fa56 	bl	8005110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2140      	movs	r1, #64	; 0x40
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 faaf 	bl	80051ce <TIM_ITRx_SetConfig>
      break;
 8004c70:	e00c      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	f000 faa6 	bl	80051ce <TIM_ITRx_SetConfig>
      break;
 8004c82:	e003      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	73fb      	strb	r3, [r7, #15]
      break;
 8004c88:	e000      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
	...

08004cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a34      	ldr	r2, [pc, #208]	; (8004ddc <TIM_Base_SetConfig+0xe4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00f      	beq.n	8004d30 <TIM_Base_SetConfig+0x38>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d16:	d00b      	beq.n	8004d30 <TIM_Base_SetConfig+0x38>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a31      	ldr	r2, [pc, #196]	; (8004de0 <TIM_Base_SetConfig+0xe8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d007      	beq.n	8004d30 <TIM_Base_SetConfig+0x38>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a30      	ldr	r2, [pc, #192]	; (8004de4 <TIM_Base_SetConfig+0xec>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d003      	beq.n	8004d30 <TIM_Base_SetConfig+0x38>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a2f      	ldr	r2, [pc, #188]	; (8004de8 <TIM_Base_SetConfig+0xf0>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d108      	bne.n	8004d42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a25      	ldr	r2, [pc, #148]	; (8004ddc <TIM_Base_SetConfig+0xe4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d01b      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d50:	d017      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a22      	ldr	r2, [pc, #136]	; (8004de0 <TIM_Base_SetConfig+0xe8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a21      	ldr	r2, [pc, #132]	; (8004de4 <TIM_Base_SetConfig+0xec>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00f      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a20      	ldr	r2, [pc, #128]	; (8004de8 <TIM_Base_SetConfig+0xf0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00b      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1f      	ldr	r2, [pc, #124]	; (8004dec <TIM_Base_SetConfig+0xf4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d007      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a1e      	ldr	r2, [pc, #120]	; (8004df0 <TIM_Base_SetConfig+0xf8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_Base_SetConfig+0x8a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a1d      	ldr	r2, [pc, #116]	; (8004df4 <TIM_Base_SetConfig+0xfc>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d108      	bne.n	8004d94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a08      	ldr	r2, [pc, #32]	; (8004ddc <TIM_Base_SetConfig+0xe4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d103      	bne.n	8004dc8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	615a      	str	r2, [r3, #20]
}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40010000 	.word	0x40010000
 8004de0:	40000400 	.word	0x40000400
 8004de4:	40000800 	.word	0x40000800
 8004de8:	40000c00 	.word	0x40000c00
 8004dec:	40014000 	.word	0x40014000
 8004df0:	40014400 	.word	0x40014400
 8004df4:	40014800 	.word	0x40014800

08004df8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	f023 0201 	bic.w	r2, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0303 	bic.w	r3, r3, #3
 8004e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f023 0302 	bic.w	r3, r3, #2
 8004e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a1c      	ldr	r2, [pc, #112]	; (8004ec0 <TIM_OC1_SetConfig+0xc8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d10c      	bne.n	8004e6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f023 0308 	bic.w	r3, r3, #8
 8004e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f023 0304 	bic.w	r3, r3, #4
 8004e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a13      	ldr	r2, [pc, #76]	; (8004ec0 <TIM_OC1_SetConfig+0xc8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d111      	bne.n	8004e9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	621a      	str	r2, [r3, #32]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	40010000 	.word	0x40010000

08004ec4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f023 0210 	bic.w	r2, r3, #16
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f023 0320 	bic.w	r3, r3, #32
 8004f0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a1e      	ldr	r2, [pc, #120]	; (8004f98 <TIM_OC2_SetConfig+0xd4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d10d      	bne.n	8004f40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a15      	ldr	r2, [pc, #84]	; (8004f98 <TIM_OC2_SetConfig+0xd4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d113      	bne.n	8004f70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	621a      	str	r2, [r3, #32]
}
 8004f8a:	bf00      	nop
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40010000 	.word	0x40010000

08004f9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0303 	bic.w	r3, r3, #3
 8004fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a1d      	ldr	r2, [pc, #116]	; (800506c <TIM_OC3_SetConfig+0xd0>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d10d      	bne.n	8005016 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005000:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	021b      	lsls	r3, r3, #8
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	4313      	orrs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a14      	ldr	r2, [pc, #80]	; (800506c <TIM_OC3_SetConfig+0xd0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d113      	bne.n	8005046 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800502c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	621a      	str	r2, [r3, #32]
}
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	40010000 	.word	0x40010000

08005070 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005070:	b480      	push	{r7}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	031b      	lsls	r3, r3, #12
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a10      	ldr	r2, [pc, #64]	; (800510c <TIM_OC4_SetConfig+0x9c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d109      	bne.n	80050e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	019b      	lsls	r3, r3, #6
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40010000 	.word	0x40010000

08005110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f023 0201 	bic.w	r2, r3, #1
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800513a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f023 030a 	bic.w	r3, r3, #10
 800514c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800516e:	b480      	push	{r7}
 8005170:	b087      	sub	sp, #28
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	60b9      	str	r1, [r7, #8]
 8005178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f023 0210 	bic.w	r2, r3, #16
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	031b      	lsls	r3, r3, #12
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	621a      	str	r2, [r3, #32]
}
 80051c2:	bf00      	nop
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f043 0307 	orr.w	r3, r3, #7
 80051f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	609a      	str	r2, [r3, #8]
}
 80051f8:	bf00      	nop
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800521e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	021a      	lsls	r2, r3, #8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	431a      	orrs	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	4313      	orrs	r3, r2
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	609a      	str	r2, [r3, #8]
}
 8005238:	bf00      	nop
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f003 031f 	and.w	r3, r3, #31
 8005256:	2201      	movs	r2, #1
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a1a      	ldr	r2, [r3, #32]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	43db      	mvns	r3, r3
 8005266:	401a      	ands	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a1a      	ldr	r2, [r3, #32]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f003 031f 	and.w	r3, r3, #31
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	fa01 f303 	lsl.w	r3, r1, r3
 800527c:	431a      	orrs	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	621a      	str	r2, [r3, #32]
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e050      	b.n	800534a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1c      	ldr	r2, [pc, #112]	; (8005358 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d018      	beq.n	800531e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f4:	d013      	beq.n	800531e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a18      	ldr	r2, [pc, #96]	; (800535c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d00e      	beq.n	800531e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a16      	ldr	r2, [pc, #88]	; (8005360 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d009      	beq.n	800531e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a15      	ldr	r2, [pc, #84]	; (8005364 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d004      	beq.n	800531e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a13      	ldr	r2, [pc, #76]	; (8005368 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d10c      	bne.n	8005338 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005324:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	4313      	orrs	r3, r2
 800532e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40010000 	.word	0x40010000
 800535c:	40000400 	.word	0x40000400
 8005360:	40000800 	.word	0x40000800
 8005364:	40000c00 	.word	0x40000c00
 8005368:	40014000 	.word	0x40014000

0800536c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e03f      	b.n	8005426 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fd f93a 	bl	8002634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2224      	movs	r2, #36	; 0x24
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fe49 	bl	8006070 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695a      	ldr	r2, [r3, #20]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800540c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2220      	movs	r2, #32
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b082      	sub	sp, #8
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e021      	b.n	8005484 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2224      	movs	r2, #36	; 0x24
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005456:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7fd f977 	bl	800274c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08a      	sub	sp, #40	; 0x28
 8005490:	af02      	add	r7, sp, #8
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d17c      	bne.n	80055a6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_UART_Transmit+0x2c>
 80054b2:	88fb      	ldrh	r3, [r7, #6]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e075      	b.n	80055a8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d101      	bne.n	80054ca <HAL_UART_Transmit+0x3e>
 80054c6:	2302      	movs	r3, #2
 80054c8:	e06e      	b.n	80055a8 <HAL_UART_Transmit+0x11c>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2221      	movs	r2, #33	; 0x21
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054e0:	f7fd fb14 	bl	8002b0c <HAL_GetTick>
 80054e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	88fa      	ldrh	r2, [r7, #6]
 80054ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	88fa      	ldrh	r2, [r7, #6]
 80054f0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fa:	d108      	bne.n	800550e <HAL_UART_Transmit+0x82>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d104      	bne.n	800550e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005504:	2300      	movs	r3, #0
 8005506:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	61bb      	str	r3, [r7, #24]
 800550c:	e003      	b.n	8005516 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005512:	2300      	movs	r3, #0
 8005514:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800551e:	e02a      	b.n	8005576 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	2200      	movs	r2, #0
 8005528:	2180      	movs	r1, #128	; 0x80
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 fb5a 	bl	8005be4 <UART_WaitOnFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e036      	b.n	80055a8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10b      	bne.n	8005558 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800554e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	3302      	adds	r3, #2
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	e007      	b.n	8005568 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	781a      	ldrb	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	3301      	adds	r3, #1
 8005566:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800556c:	b29b      	uxth	r3, r3
 800556e:	3b01      	subs	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800557a:	b29b      	uxth	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1cf      	bne.n	8005520 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2200      	movs	r2, #0
 8005588:	2140      	movs	r1, #64	; 0x40
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 fb2a 	bl	8005be4 <UART_WaitOnFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e006      	b.n	80055a8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	e000      	b.n	80055a8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80055a6:	2302      	movs	r3, #2
  }
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3720      	adds	r7, #32
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	4613      	mov	r3, r2
 80055bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b20      	cmp	r3, #32
 80055c8:	d130      	bne.n	800562c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <HAL_UART_Transmit_IT+0x26>
 80055d0:	88fb      	ldrh	r3, [r7, #6]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e029      	b.n	800562e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_UART_Transmit_IT+0x38>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e022      	b.n	800562e <HAL_UART_Transmit_IT+0x7e>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	88fa      	ldrh	r2, [r7, #6]
 80055fa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	88fa      	ldrh	r2, [r7, #6]
 8005600:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2221      	movs	r2, #33	; 0x21
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005626:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005628:	2300      	movs	r3, #0
 800562a:	e000      	b.n	800562e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800562c:	2302      	movs	r3, #2
  }
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	4613      	mov	r3, r2
 8005646:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b20      	cmp	r3, #32
 8005652:	d11d      	bne.n	8005690 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <HAL_UART_Receive_IT+0x26>
 800565a:	88fb      	ldrh	r3, [r7, #6]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e016      	b.n	8005692 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_UART_Receive_IT+0x38>
 800566e:	2302      	movs	r3, #2
 8005670:	e00f      	b.n	8005692 <HAL_UART_Receive_IT+0x58>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005680:	88fb      	ldrh	r3, [r7, #6]
 8005682:	461a      	mov	r2, r3
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 fb1a 	bl	8005cc0 <UART_Start_Receive_IT>
 800568c:	4603      	mov	r3, r0
 800568e:	e000      	b.n	8005692 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005690:	2302      	movs	r3, #2
  }
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b0ba      	sub	sp, #232	; 0xe8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80056da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10f      	bne.n	8005702 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e6:	f003 0320 	and.w	r3, r3, #32
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <HAL_UART_IRQHandler+0x66>
 80056ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056f2:	f003 0320 	and.w	r3, r3, #32
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fbfd 	bl	8005efa <UART_Receive_IT>
      return;
 8005700:	e256      	b.n	8005bb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005702:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 80de 	beq.w	80058c8 <HAL_UART_IRQHandler+0x22c>
 800570c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d106      	bne.n	8005726 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800571c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 80d1 	beq.w	80058c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00b      	beq.n	800574a <HAL_UART_IRQHandler+0xae>
 8005732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	2b00      	cmp	r3, #0
 800573c:	d005      	beq.n	800574a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	f043 0201 	orr.w	r2, r3, #1
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800574a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00b      	beq.n	800576e <HAL_UART_IRQHandler+0xd2>
 8005756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	f043 0202 	orr.w	r2, r3, #2
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800576e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00b      	beq.n	8005792 <HAL_UART_IRQHandler+0xf6>
 800577a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f043 0204 	orr.w	r2, r3, #4
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d011      	beq.n	80057c2 <HAL_UART_IRQHandler+0x126>
 800579e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d105      	bne.n	80057b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f043 0208 	orr.w	r2, r3, #8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 81ed 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d008      	beq.n	80057ea <HAL_UART_IRQHandler+0x14e>
 80057d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057dc:	f003 0320 	and.w	r3, r3, #32
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fb88 	bl	8005efa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f4:	2b40      	cmp	r3, #64	; 0x40
 80057f6:	bf0c      	ite	eq
 80057f8:	2301      	moveq	r3, #1
 80057fa:	2300      	movne	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	f003 0308 	and.w	r3, r3, #8
 800580a:	2b00      	cmp	r3, #0
 800580c:	d103      	bne.n	8005816 <HAL_UART_IRQHandler+0x17a>
 800580e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005812:	2b00      	cmp	r3, #0
 8005814:	d04f      	beq.n	80058b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fa90 	bl	8005d3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005826:	2b40      	cmp	r3, #64	; 0x40
 8005828:	d141      	bne.n	80058ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3314      	adds	r3, #20
 8005830:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005834:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005840:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005848:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3314      	adds	r3, #20
 8005852:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005856:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800585a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005862:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800586e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1d9      	bne.n	800582a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	2b00      	cmp	r3, #0
 800587c:	d013      	beq.n	80058a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	4a7d      	ldr	r2, [pc, #500]	; (8005a78 <HAL_UART_IRQHandler+0x3dc>)
 8005884:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	4618      	mov	r0, r3
 800588c:	f7fd fb21 	bl	8002ed2 <HAL_DMA_Abort_IT>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d016      	beq.n	80058c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058a0:	4610      	mov	r0, r2
 80058a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a4:	e00e      	b.n	80058c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fc fc8c 	bl	80021c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ac:	e00a      	b.n	80058c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fc fc88 	bl	80021c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b4:	e006      	b.n	80058c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fc fc84 	bl	80021c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80058c2:	e170      	b.n	8005ba6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c4:	bf00      	nop
    return;
 80058c6:	e16e      	b.n	8005ba6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	f040 814a 	bne.w	8005b66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 8143 	beq.w	8005b66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e4:	f003 0310 	and.w	r3, r3, #16
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 813c 	beq.w	8005b66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058ee:	2300      	movs	r3, #0
 80058f0:	60bb      	str	r3, [r7, #8]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	60bb      	str	r3, [r7, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	60bb      	str	r3, [r7, #8]
 8005902:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590e:	2b40      	cmp	r3, #64	; 0x40
 8005910:	f040 80b4 	bne.w	8005a7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005920:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 8140 	beq.w	8005baa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800592e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005932:	429a      	cmp	r2, r3
 8005934:	f080 8139 	bcs.w	8005baa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800593e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800594a:	f000 8088 	beq.w	8005a5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	330c      	adds	r3, #12
 8005954:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800595c:	e853 3f00 	ldrex	r3, [r3]
 8005960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005964:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800596c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	330c      	adds	r3, #12
 8005976:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800597a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800597e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005982:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005986:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005992:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1d9      	bne.n	800594e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3314      	adds	r3, #20
 80059a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a4:	e853 3f00 	ldrex	r3, [r3]
 80059a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059ac:	f023 0301 	bic.w	r3, r3, #1
 80059b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3314      	adds	r3, #20
 80059ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e1      	bne.n	800599a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3314      	adds	r3, #20
 80059dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059e0:	e853 3f00 	ldrex	r3, [r3]
 80059e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3314      	adds	r3, #20
 80059f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e3      	bne.n	80059d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2220      	movs	r2, #32
 8005a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	330c      	adds	r3, #12
 8005a22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a26:	e853 3f00 	ldrex	r3, [r3]
 8005a2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a2e:	f023 0310 	bic.w	r3, r3, #16
 8005a32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	330c      	adds	r3, #12
 8005a3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a40:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a48:	e841 2300 	strex	r3, r2, [r1]
 8005a4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1e3      	bne.n	8005a1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fd f9ca 	bl	8002df2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f8ac 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a74:	e099      	b.n	8005baa <HAL_UART_IRQHandler+0x50e>
 8005a76:	bf00      	nop
 8005a78:	08005e03 	.word	0x08005e03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 808b 	beq.w	8005bae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f000 8086 	beq.w	8005bae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	330c      	adds	r3, #12
 8005aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005ac6:	647a      	str	r2, [r7, #68]	; 0x44
 8005ac8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005acc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e3      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3314      	adds	r3, #20
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	f023 0301 	bic.w	r3, r3, #1
 8005af0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	3314      	adds	r3, #20
 8005afa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005afe:	633a      	str	r2, [r7, #48]	; 0x30
 8005b00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e3      	bne.n	8005ada <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	330c      	adds	r3, #12
 8005b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	e853 3f00 	ldrex	r3, [r3]
 8005b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0310 	bic.w	r3, r3, #16
 8005b36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	330c      	adds	r3, #12
 8005b40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b44:	61fa      	str	r2, [r7, #28]
 8005b46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b48:	69b9      	ldr	r1, [r7, #24]
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	e841 2300 	strex	r3, r2, [r1]
 8005b50:	617b      	str	r3, [r7, #20]
   return(result);
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e3      	bne.n	8005b20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f834 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b64:	e023      	b.n	8005bae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d009      	beq.n	8005b86 <HAL_UART_IRQHandler+0x4ea>
 8005b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f953 	bl	8005e2a <UART_Transmit_IT>
    return;
 8005b84:	e014      	b.n	8005bb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00e      	beq.n	8005bb0 <HAL_UART_IRQHandler+0x514>
 8005b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d008      	beq.n	8005bb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f993 	bl	8005eca <UART_EndTransmit_IT>
    return;
 8005ba4:	e004      	b.n	8005bb0 <HAL_UART_IRQHandler+0x514>
    return;
 8005ba6:	bf00      	nop
 8005ba8:	e002      	b.n	8005bb0 <HAL_UART_IRQHandler+0x514>
      return;
 8005baa:	bf00      	nop
 8005bac:	e000      	b.n	8005bb0 <HAL_UART_IRQHandler+0x514>
      return;
 8005bae:	bf00      	nop
  }
}
 8005bb0:	37e8      	adds	r7, #232	; 0xe8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop

08005bb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b090      	sub	sp, #64	; 0x40
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	603b      	str	r3, [r7, #0]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf4:	e050      	b.n	8005c98 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfc:	d04c      	beq.n	8005c98 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d007      	beq.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c04:	f7fc ff82 	bl	8002b0c <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d241      	bcs.n	8005c98 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	330c      	adds	r3, #12
 8005c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	e853 3f00 	ldrex	r3, [r3]
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	330c      	adds	r3, #12
 8005c32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c34:	637a      	str	r2, [r7, #52]	; 0x34
 8005c36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c3c:	e841 2300 	strex	r3, r2, [r1]
 8005c40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e5      	bne.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3314      	adds	r3, #20
 8005c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	613b      	str	r3, [r7, #16]
   return(result);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f023 0301 	bic.w	r3, r3, #1
 8005c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3314      	adds	r3, #20
 8005c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c68:	623a      	str	r2, [r7, #32]
 8005c6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	69f9      	ldr	r1, [r7, #28]
 8005c6e:	6a3a      	ldr	r2, [r7, #32]
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e5      	bne.n	8005c48 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e00f      	b.n	8005cb8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	bf0c      	ite	eq
 8005ca8:	2301      	moveq	r3, #1
 8005caa:	2300      	movne	r3, #0
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	461a      	mov	r2, r3
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d09f      	beq.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3740      	adds	r7, #64	; 0x40
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	88fa      	ldrh	r2, [r7, #6]
 8005cd8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	88fa      	ldrh	r2, [r7, #6]
 8005cde:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2222      	movs	r2, #34	; 0x22
 8005cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d007      	beq.n	8005d0e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d0c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	695a      	ldr	r2, [r3, #20]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f042 0201 	orr.w	r2, r2, #1
 8005d1c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f042 0220 	orr.w	r2, r2, #32
 8005d2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b095      	sub	sp, #84	; 0x54
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	330c      	adds	r3, #12
 8005d4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4e:	e853 3f00 	ldrex	r3, [r3]
 8005d52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	330c      	adds	r3, #12
 8005d62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d64:	643a      	str	r2, [r7, #64]	; 0x40
 8005d66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d6c:	e841 2300 	strex	r3, r2, [r1]
 8005d70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e5      	bne.n	8005d44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3314      	adds	r3, #20
 8005d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	f023 0301 	bic.w	r3, r3, #1
 8005d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3314      	adds	r3, #20
 8005d96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e5      	bne.n	8005d78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d119      	bne.n	8005de8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	330c      	adds	r3, #12
 8005dba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	e853 3f00 	ldrex	r3, [r3]
 8005dc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f023 0310 	bic.w	r3, r3, #16
 8005dca:	647b      	str	r3, [r7, #68]	; 0x44
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	330c      	adds	r3, #12
 8005dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dd4:	61ba      	str	r2, [r7, #24]
 8005dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	6979      	ldr	r1, [r7, #20]
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	613b      	str	r3, [r7, #16]
   return(result);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e5      	bne.n	8005db4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005df6:	bf00      	nop
 8005df8:	3754      	adds	r7, #84	; 0x54
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b084      	sub	sp, #16
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f7fc f9d1 	bl	80021c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e22:	bf00      	nop
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b21      	cmp	r3, #33	; 0x21
 8005e3c:	d13e      	bne.n	8005ebc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e46:	d114      	bne.n	8005e72 <UART_Transmit_IT+0x48>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d110      	bne.n	8005e72 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	1c9a      	adds	r2, r3, #2
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	621a      	str	r2, [r3, #32]
 8005e70:	e008      	b.n	8005e84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	1c59      	adds	r1, r3, #1
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6211      	str	r1, [r2, #32]
 8005e7c:	781a      	ldrb	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	4619      	mov	r1, r3
 8005e92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10f      	bne.n	8005eb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ea6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	e000      	b.n	8005ebe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ebc:	2302      	movs	r3, #2
  }
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b082      	sub	sp, #8
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7ff fe64 	bl	8005bb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b08c      	sub	sp, #48	; 0x30
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b22      	cmp	r3, #34	; 0x22
 8005f0c:	f040 80ab 	bne.w	8006066 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f18:	d117      	bne.n	8005f4a <UART_Receive_IT+0x50>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d113      	bne.n	8005f4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f42:	1c9a      	adds	r2, r3, #2
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	629a      	str	r2, [r3, #40]	; 0x28
 8005f48:	e026      	b.n	8005f98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f50:	2300      	movs	r3, #0
 8005f52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f5c:	d007      	beq.n	8005f6e <UART_Receive_IT+0x74>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10a      	bne.n	8005f7c <UART_Receive_IT+0x82>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d106      	bne.n	8005f7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	701a      	strb	r2, [r3, #0]
 8005f7a:	e008      	b.n	8005f8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d15a      	bne.n	8006062 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0220 	bic.w	r2, r2, #32
 8005fba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695a      	ldr	r2, [r3, #20]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f022 0201 	bic.w	r2, r2, #1
 8005fda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d135      	bne.n	8006058 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	330c      	adds	r3, #12
 8005ff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	613b      	str	r3, [r7, #16]
   return(result);
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f023 0310 	bic.w	r3, r3, #16
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	330c      	adds	r3, #12
 8006010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006012:	623a      	str	r2, [r7, #32]
 8006014:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	69f9      	ldr	r1, [r7, #28]
 8006018:	6a3a      	ldr	r2, [r7, #32]
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e5      	bne.n	8005ff2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	2b10      	cmp	r3, #16
 8006032:	d10a      	bne.n	800604a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff fdbb 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
 8006056:	e002      	b.n	800605e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7fc f911 	bl	8002280 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	e002      	b.n	8006068 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	e000      	b.n	8006068 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006066:	2302      	movs	r3, #2
  }
}
 8006068:	4618      	mov	r0, r3
 800606a:	3730      	adds	r7, #48	; 0x30
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006074:	b0c0      	sub	sp, #256	; 0x100
 8006076:	af00      	add	r7, sp, #0
 8006078:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608c:	68d9      	ldr	r1, [r3, #12]
 800608e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	ea40 0301 	orr.w	r3, r0, r1
 8006098:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800609a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060c8:	f021 010c 	bic.w	r1, r1, #12
 80060cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060d6:	430b      	orrs	r3, r1
 80060d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ea:	6999      	ldr	r1, [r3, #24]
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	ea40 0301 	orr.w	r3, r0, r1
 80060f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4b8f      	ldr	r3, [pc, #572]	; (800633c <UART_SetConfig+0x2cc>)
 8006100:	429a      	cmp	r2, r3
 8006102:	d005      	beq.n	8006110 <UART_SetConfig+0xa0>
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b8d      	ldr	r3, [pc, #564]	; (8006340 <UART_SetConfig+0x2d0>)
 800610c:	429a      	cmp	r2, r3
 800610e:	d104      	bne.n	800611a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006110:	f7fd fde2 	bl	8003cd8 <HAL_RCC_GetPCLK2Freq>
 8006114:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006118:	e003      	b.n	8006122 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800611a:	f7fd fdc9 	bl	8003cb0 <HAL_RCC_GetPCLK1Freq>
 800611e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800612c:	f040 810c 	bne.w	8006348 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006134:	2200      	movs	r2, #0
 8006136:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800613a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800613e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006142:	4622      	mov	r2, r4
 8006144:	462b      	mov	r3, r5
 8006146:	1891      	adds	r1, r2, r2
 8006148:	65b9      	str	r1, [r7, #88]	; 0x58
 800614a:	415b      	adcs	r3, r3
 800614c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800614e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006152:	4621      	mov	r1, r4
 8006154:	eb12 0801 	adds.w	r8, r2, r1
 8006158:	4629      	mov	r1, r5
 800615a:	eb43 0901 	adc.w	r9, r3, r1
 800615e:	f04f 0200 	mov.w	r2, #0
 8006162:	f04f 0300 	mov.w	r3, #0
 8006166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800616a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800616e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006172:	4690      	mov	r8, r2
 8006174:	4699      	mov	r9, r3
 8006176:	4623      	mov	r3, r4
 8006178:	eb18 0303 	adds.w	r3, r8, r3
 800617c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006180:	462b      	mov	r3, r5
 8006182:	eb49 0303 	adc.w	r3, r9, r3
 8006186:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006196:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800619a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800619e:	460b      	mov	r3, r1
 80061a0:	18db      	adds	r3, r3, r3
 80061a2:	653b      	str	r3, [r7, #80]	; 0x50
 80061a4:	4613      	mov	r3, r2
 80061a6:	eb42 0303 	adc.w	r3, r2, r3
 80061aa:	657b      	str	r3, [r7, #84]	; 0x54
 80061ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80061b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80061b4:	f7fa f87c 	bl	80002b0 <__aeabi_uldivmod>
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	4b61      	ldr	r3, [pc, #388]	; (8006344 <UART_SetConfig+0x2d4>)
 80061be:	fba3 2302 	umull	r2, r3, r3, r2
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	011c      	lsls	r4, r3, #4
 80061c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80061d8:	4642      	mov	r2, r8
 80061da:	464b      	mov	r3, r9
 80061dc:	1891      	adds	r1, r2, r2
 80061de:	64b9      	str	r1, [r7, #72]	; 0x48
 80061e0:	415b      	adcs	r3, r3
 80061e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061e8:	4641      	mov	r1, r8
 80061ea:	eb12 0a01 	adds.w	sl, r2, r1
 80061ee:	4649      	mov	r1, r9
 80061f0:	eb43 0b01 	adc.w	fp, r3, r1
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006200:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006204:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006208:	4692      	mov	sl, r2
 800620a:	469b      	mov	fp, r3
 800620c:	4643      	mov	r3, r8
 800620e:	eb1a 0303 	adds.w	r3, sl, r3
 8006212:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006216:	464b      	mov	r3, r9
 8006218:	eb4b 0303 	adc.w	r3, fp, r3
 800621c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800622c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006230:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006234:	460b      	mov	r3, r1
 8006236:	18db      	adds	r3, r3, r3
 8006238:	643b      	str	r3, [r7, #64]	; 0x40
 800623a:	4613      	mov	r3, r2
 800623c:	eb42 0303 	adc.w	r3, r2, r3
 8006240:	647b      	str	r3, [r7, #68]	; 0x44
 8006242:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006246:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800624a:	f7fa f831 	bl	80002b0 <__aeabi_uldivmod>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4611      	mov	r1, r2
 8006254:	4b3b      	ldr	r3, [pc, #236]	; (8006344 <UART_SetConfig+0x2d4>)
 8006256:	fba3 2301 	umull	r2, r3, r3, r1
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	2264      	movs	r2, #100	; 0x64
 800625e:	fb02 f303 	mul.w	r3, r2, r3
 8006262:	1acb      	subs	r3, r1, r3
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800626a:	4b36      	ldr	r3, [pc, #216]	; (8006344 <UART_SetConfig+0x2d4>)
 800626c:	fba3 2302 	umull	r2, r3, r3, r2
 8006270:	095b      	lsrs	r3, r3, #5
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006278:	441c      	add	r4, r3
 800627a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800627e:	2200      	movs	r2, #0
 8006280:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006284:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006288:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800628c:	4642      	mov	r2, r8
 800628e:	464b      	mov	r3, r9
 8006290:	1891      	adds	r1, r2, r2
 8006292:	63b9      	str	r1, [r7, #56]	; 0x38
 8006294:	415b      	adcs	r3, r3
 8006296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006298:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800629c:	4641      	mov	r1, r8
 800629e:	1851      	adds	r1, r2, r1
 80062a0:	6339      	str	r1, [r7, #48]	; 0x30
 80062a2:	4649      	mov	r1, r9
 80062a4:	414b      	adcs	r3, r1
 80062a6:	637b      	str	r3, [r7, #52]	; 0x34
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	f04f 0300 	mov.w	r3, #0
 80062b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80062b4:	4659      	mov	r1, fp
 80062b6:	00cb      	lsls	r3, r1, #3
 80062b8:	4651      	mov	r1, sl
 80062ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062be:	4651      	mov	r1, sl
 80062c0:	00ca      	lsls	r2, r1, #3
 80062c2:	4610      	mov	r0, r2
 80062c4:	4619      	mov	r1, r3
 80062c6:	4603      	mov	r3, r0
 80062c8:	4642      	mov	r2, r8
 80062ca:	189b      	adds	r3, r3, r2
 80062cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062d0:	464b      	mov	r3, r9
 80062d2:	460a      	mov	r2, r1
 80062d4:	eb42 0303 	adc.w	r3, r2, r3
 80062d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062f0:	460b      	mov	r3, r1
 80062f2:	18db      	adds	r3, r3, r3
 80062f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062f6:	4613      	mov	r3, r2
 80062f8:	eb42 0303 	adc.w	r3, r2, r3
 80062fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006302:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006306:	f7f9 ffd3 	bl	80002b0 <__aeabi_uldivmod>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <UART_SetConfig+0x2d4>)
 8006310:	fba3 1302 	umull	r1, r3, r3, r2
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	2164      	movs	r1, #100	; 0x64
 8006318:	fb01 f303 	mul.w	r3, r1, r3
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	3332      	adds	r3, #50	; 0x32
 8006322:	4a08      	ldr	r2, [pc, #32]	; (8006344 <UART_SetConfig+0x2d4>)
 8006324:	fba2 2303 	umull	r2, r3, r2, r3
 8006328:	095b      	lsrs	r3, r3, #5
 800632a:	f003 0207 	and.w	r2, r3, #7
 800632e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4422      	add	r2, r4
 8006336:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006338:	e106      	b.n	8006548 <UART_SetConfig+0x4d8>
 800633a:	bf00      	nop
 800633c:	40011000 	.word	0x40011000
 8006340:	40011400 	.word	0x40011400
 8006344:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006348:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800634c:	2200      	movs	r2, #0
 800634e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006352:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006356:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800635a:	4642      	mov	r2, r8
 800635c:	464b      	mov	r3, r9
 800635e:	1891      	adds	r1, r2, r2
 8006360:	6239      	str	r1, [r7, #32]
 8006362:	415b      	adcs	r3, r3
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
 8006366:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800636a:	4641      	mov	r1, r8
 800636c:	1854      	adds	r4, r2, r1
 800636e:	4649      	mov	r1, r9
 8006370:	eb43 0501 	adc.w	r5, r3, r1
 8006374:	f04f 0200 	mov.w	r2, #0
 8006378:	f04f 0300 	mov.w	r3, #0
 800637c:	00eb      	lsls	r3, r5, #3
 800637e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006382:	00e2      	lsls	r2, r4, #3
 8006384:	4614      	mov	r4, r2
 8006386:	461d      	mov	r5, r3
 8006388:	4643      	mov	r3, r8
 800638a:	18e3      	adds	r3, r4, r3
 800638c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006390:	464b      	mov	r3, r9
 8006392:	eb45 0303 	adc.w	r3, r5, r3
 8006396:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800639a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063aa:	f04f 0200 	mov.w	r2, #0
 80063ae:	f04f 0300 	mov.w	r3, #0
 80063b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80063b6:	4629      	mov	r1, r5
 80063b8:	008b      	lsls	r3, r1, #2
 80063ba:	4621      	mov	r1, r4
 80063bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063c0:	4621      	mov	r1, r4
 80063c2:	008a      	lsls	r2, r1, #2
 80063c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80063c8:	f7f9 ff72 	bl	80002b0 <__aeabi_uldivmod>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4b60      	ldr	r3, [pc, #384]	; (8006554 <UART_SetConfig+0x4e4>)
 80063d2:	fba3 2302 	umull	r2, r3, r3, r2
 80063d6:	095b      	lsrs	r3, r3, #5
 80063d8:	011c      	lsls	r4, r3, #4
 80063da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063de:	2200      	movs	r2, #0
 80063e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063ec:	4642      	mov	r2, r8
 80063ee:	464b      	mov	r3, r9
 80063f0:	1891      	adds	r1, r2, r2
 80063f2:	61b9      	str	r1, [r7, #24]
 80063f4:	415b      	adcs	r3, r3
 80063f6:	61fb      	str	r3, [r7, #28]
 80063f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063fc:	4641      	mov	r1, r8
 80063fe:	1851      	adds	r1, r2, r1
 8006400:	6139      	str	r1, [r7, #16]
 8006402:	4649      	mov	r1, r9
 8006404:	414b      	adcs	r3, r1
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006414:	4659      	mov	r1, fp
 8006416:	00cb      	lsls	r3, r1, #3
 8006418:	4651      	mov	r1, sl
 800641a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800641e:	4651      	mov	r1, sl
 8006420:	00ca      	lsls	r2, r1, #3
 8006422:	4610      	mov	r0, r2
 8006424:	4619      	mov	r1, r3
 8006426:	4603      	mov	r3, r0
 8006428:	4642      	mov	r2, r8
 800642a:	189b      	adds	r3, r3, r2
 800642c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006430:	464b      	mov	r3, r9
 8006432:	460a      	mov	r2, r1
 8006434:	eb42 0303 	adc.w	r3, r2, r3
 8006438:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800643c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	67bb      	str	r3, [r7, #120]	; 0x78
 8006446:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006454:	4649      	mov	r1, r9
 8006456:	008b      	lsls	r3, r1, #2
 8006458:	4641      	mov	r1, r8
 800645a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800645e:	4641      	mov	r1, r8
 8006460:	008a      	lsls	r2, r1, #2
 8006462:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006466:	f7f9 ff23 	bl	80002b0 <__aeabi_uldivmod>
 800646a:	4602      	mov	r2, r0
 800646c:	460b      	mov	r3, r1
 800646e:	4611      	mov	r1, r2
 8006470:	4b38      	ldr	r3, [pc, #224]	; (8006554 <UART_SetConfig+0x4e4>)
 8006472:	fba3 2301 	umull	r2, r3, r3, r1
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	2264      	movs	r2, #100	; 0x64
 800647a:	fb02 f303 	mul.w	r3, r2, r3
 800647e:	1acb      	subs	r3, r1, r3
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	3332      	adds	r3, #50	; 0x32
 8006484:	4a33      	ldr	r2, [pc, #204]	; (8006554 <UART_SetConfig+0x4e4>)
 8006486:	fba2 2303 	umull	r2, r3, r2, r3
 800648a:	095b      	lsrs	r3, r3, #5
 800648c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006490:	441c      	add	r4, r3
 8006492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006496:	2200      	movs	r2, #0
 8006498:	673b      	str	r3, [r7, #112]	; 0x70
 800649a:	677a      	str	r2, [r7, #116]	; 0x74
 800649c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80064a0:	4642      	mov	r2, r8
 80064a2:	464b      	mov	r3, r9
 80064a4:	1891      	adds	r1, r2, r2
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	415b      	adcs	r3, r3
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064b0:	4641      	mov	r1, r8
 80064b2:	1851      	adds	r1, r2, r1
 80064b4:	6039      	str	r1, [r7, #0]
 80064b6:	4649      	mov	r1, r9
 80064b8:	414b      	adcs	r3, r1
 80064ba:	607b      	str	r3, [r7, #4]
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	f04f 0300 	mov.w	r3, #0
 80064c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064c8:	4659      	mov	r1, fp
 80064ca:	00cb      	lsls	r3, r1, #3
 80064cc:	4651      	mov	r1, sl
 80064ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064d2:	4651      	mov	r1, sl
 80064d4:	00ca      	lsls	r2, r1, #3
 80064d6:	4610      	mov	r0, r2
 80064d8:	4619      	mov	r1, r3
 80064da:	4603      	mov	r3, r0
 80064dc:	4642      	mov	r2, r8
 80064de:	189b      	adds	r3, r3, r2
 80064e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80064e2:	464b      	mov	r3, r9
 80064e4:	460a      	mov	r2, r1
 80064e6:	eb42 0303 	adc.w	r3, r2, r3
 80064ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	663b      	str	r3, [r7, #96]	; 0x60
 80064f6:	667a      	str	r2, [r7, #100]	; 0x64
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006504:	4649      	mov	r1, r9
 8006506:	008b      	lsls	r3, r1, #2
 8006508:	4641      	mov	r1, r8
 800650a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800650e:	4641      	mov	r1, r8
 8006510:	008a      	lsls	r2, r1, #2
 8006512:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006516:	f7f9 fecb 	bl	80002b0 <__aeabi_uldivmod>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	4b0d      	ldr	r3, [pc, #52]	; (8006554 <UART_SetConfig+0x4e4>)
 8006520:	fba3 1302 	umull	r1, r3, r3, r2
 8006524:	095b      	lsrs	r3, r3, #5
 8006526:	2164      	movs	r1, #100	; 0x64
 8006528:	fb01 f303 	mul.w	r3, r1, r3
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	3332      	adds	r3, #50	; 0x32
 8006532:	4a08      	ldr	r2, [pc, #32]	; (8006554 <UART_SetConfig+0x4e4>)
 8006534:	fba2 2303 	umull	r2, r3, r2, r3
 8006538:	095b      	lsrs	r3, r3, #5
 800653a:	f003 020f 	and.w	r2, r3, #15
 800653e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4422      	add	r2, r4
 8006546:	609a      	str	r2, [r3, #8]
}
 8006548:	bf00      	nop
 800654a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800654e:	46bd      	mov	sp, r7
 8006550:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006554:	51eb851f 	.word	0x51eb851f

08006558 <HW_RESET>:


//No se puede quedar esperano en las funciones, hay que detectar a situaci�n y salir del bucle.
//pensar que solo entra cuando recibe datos, si no vuelve a entrar queda ah� eternamentes.
void HW_RESET(struct WIFI *a)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_RESET);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6818      	ldr	r0, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	889b      	ldrh	r3, [r3, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	4619      	mov	r1, r3
 800656c:	f7fc ff3c 	bl	80033e8 <HAL_GPIO_WritePin>
    ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8006570:	2115      	movs	r1, #21
 8006572:	480b      	ldr	r0, [pc, #44]	; (80065a0 <HW_RESET+0x48>)
 8006574:	f7fa ffc0 	bl	80014f8 <ITM0_Write>
    HAL_Delay(2000);											//Tiempo de reset del módulo
 8006578:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800657c:	f7fc fad2 	bl	8002b24 <HAL_Delay>
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
 8006580:	210e      	movs	r1, #14
 8006582:	4808      	ldr	r0, [pc, #32]	; (80065a4 <HW_RESET+0x4c>)
 8006584:	f7fa ffb8 	bl	80014f8 <ITM0_Write>
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6818      	ldr	r0, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	889b      	ldrh	r3, [r3, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	4619      	mov	r1, r3
 8006594:	f7fc ff28 	bl	80033e8 <HAL_GPIO_WritePin>
}
 8006598:	bf00      	nop
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	08010a74 	.word	0x08010a74
 80065a4:	08010a8c 	.word	0x08010a8c

080065a8 <NOP>:
void NOP(struct WIFI *a)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <MUX>:
void MUX(struct WIFI *a)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2204      	movs	r2, #4
 8006638:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <IPDef>:
void IPDef(struct WIFI *a)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2205      	movs	r2, #5
 8006664:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2206      	movs	r2, #6
 80066bc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2208      	movs	r2, #8
 80066e8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2209      	movs	r2, #9
 8006714:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2207      	movs	r2, #7
 8006740:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <Inicializar>:
void Inicializar(struct WIFI *a)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
a->_overflowVector=512;			//Maximo tamaño del vector al procesar un +IPD
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ee:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
}
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
	...

08006900 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 8006900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006902:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006906:	af06      	add	r7, sp, #24
 8006908:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800690c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006910:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 8006912:	2300      	movs	r3, #0
 8006914:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006918:	2300      	movs	r3, #0
 800691a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800691e:	2300      	movs	r3, #0
 8006920:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8006924:	2300      	movs	r3, #0
 8006926:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800692a:	2300      	movs	r3, #0
 800692c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 8006930:	2320      	movs	r3, #32
 8006932:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 8006936:	2322      	movs	r3, #34	; 0x22
 8006938:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 800693c:	4b7c      	ldr	r3, [pc, #496]	; (8006b30 <AT_ESP8266_ND+0x230>)
 800693e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 8006942:	4a7c      	ldr	r2, [pc, #496]	; (8006b34 <AT_ESP8266_ND+0x234>)
 8006944:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8006948:	6812      	ldr	r2, [r2, #0]
 800694a:	4611      	mov	r1, r2
 800694c:	8019      	strh	r1, [r3, #0]
 800694e:	3302      	adds	r3, #2
 8006950:	0c12      	lsrs	r2, r2, #16
 8006952:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 8006954:	f642 4322 	movw	r3, #11298	; 0x2c22
 8006958:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 800695c:	f640 230d 	movw	r3, #2573	; 0xa0d
 8006960:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8006964:	2300      	movs	r3, #0
 8006966:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800696a:	2300      	movs	r3, #0
 800696c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 8006970:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006974:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 8006980:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006984:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f203 6394 	addw	r3, r3, #1684	; 0x694
 800698e:	4618      	mov	r0, r3
 8006990:	f7f9 fc30 	bl	80001f4 <strlen>
 8006994:	4603      	mov	r3, r0
 8006996:	461a      	mov	r2, r3
 8006998:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800699c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 80069a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 80069b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f203 6394 	addw	r3, r3, #1684	; 0x694
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7f9 fc15 	bl	80001f4 <strlen>
 80069ca:	4603      	mov	r3, r0
 80069cc:	461a      	mov	r2, r3
 80069ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 80069dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2206      	movs	r2, #6
 80069e8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80069ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80069fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006a08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006a16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006a24:	603b      	str	r3, [r7, #0]
 8006a26:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a2a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006a2e:	6812      	ldr	r2, [r2, #0]
 8006a30:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006a34:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006a38:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006a3c:	6809      	ldr	r1, [r1, #0]
 8006a3e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006a42:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006a46:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006a4a:	6800      	ldr	r0, [r0, #0]
 8006a4c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006a50:	2300      	movs	r3, #0
 8006a52:	9305      	str	r3, [sp, #20]
 8006a54:	9004      	str	r0, [sp, #16]
 8006a56:	9103      	str	r1, [sp, #12]
 8006a58:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006a5c:	9102      	str	r1, [sp, #8]
 8006a5e:	9201      	str	r2, [sp, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	4633      	mov	r3, r6
 8006a66:	4a34      	ldr	r2, [pc, #208]	; (8006b38 <AT_ESP8266_ND+0x238>)
 8006a68:	4629      	mov	r1, r5
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f007 ff1c 	bl	800e8a8 <FT_String_ND>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	f040 8140 	bne.w	8006cf8 <AT_ESP8266_ND+0x3f8>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006a78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2206      	movs	r2, #6
 8006a84:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 8006a88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d150      	bne.n	8006b3c <AT_ESP8266_ND+0x23c>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATA);
 8006a9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006aa8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006ab6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006ac4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ac8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ad2:	603b      	str	r3, [r7, #0]
 8006ad4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ad8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006adc:	6812      	ldr	r2, [r2, #0]
 8006ade:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ae2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ae6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006aea:	6809      	ldr	r1, [r1, #0]
 8006aec:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006af0:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006af4:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006af8:	6800      	ldr	r0, [r0, #0]
 8006afa:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006afe:	2304      	movs	r3, #4
 8006b00:	9305      	str	r3, [sp, #20]
 8006b02:	9004      	str	r0, [sp, #16]
 8006b04:	9103      	str	r1, [sp, #12]
 8006b06:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b0a:	9102      	str	r1, [sp, #8]
 8006b0c:	9201      	str	r2, [sp, #4]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	4633      	mov	r3, r6
 8006b14:	4a08      	ldr	r2, [pc, #32]	; (8006b38 <AT_ESP8266_ND+0x238>)
 8006b16:	4629      	mov	r1, r5
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f007 fec5 	bl	800e8a8 <FT_String_ND>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 8006b2e:	e04f      	b.n	8006bd0 <AT_ESP8266_ND+0x2d0>
 8006b30:	00222c22 	.word	0x00222c22
 8006b34:	08010c74 	.word	0x08010c74
 8006b38:	08010a9c 	.word	0x08010a9c
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATASRVR);
 8006b3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006b4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006b58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006b66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006b74:	603b      	str	r3, [r7, #0]
 8006b76:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b7a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b7e:	6812      	ldr	r2, [r2, #0]
 8006b80:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b84:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b88:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b8c:	6809      	ldr	r1, [r1, #0]
 8006b8e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006b92:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006b96:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006b9a:	6800      	ldr	r0, [r0, #0]
 8006b9c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006ba0:	2305      	movs	r3, #5
 8006ba2:	9305      	str	r3, [sp, #20]
 8006ba4:	9004      	str	r0, [sp, #16]
 8006ba6:	9103      	str	r1, [sp, #12]
 8006ba8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006bac:	9102      	str	r1, [sp, #8]
 8006bae:	9201      	str	r2, [sp, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	4633      	mov	r3, r6
 8006bb6:	4ad2      	ldr	r2, [pc, #840]	; (8006f00 <AT_ESP8266_ND+0x600>)
 8006bb8:	4629      	mov	r1, r5
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f007 fe74 	bl	800e8a8 <FT_String_ND>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 8006bd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006bde:	2b04      	cmp	r3, #4
 8006be0:	d15a      	bne.n	8006c98 <AT_ESP8266_ND+0x398>
	 	{
	 		a->_estado_rcv_data=99;
 8006be2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006be6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2263      	movs	r2, #99	; 0x63
 8006bee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 8006bf2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bf6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006c00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006c0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8006c1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006c2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006c38:	2341      	movs	r3, #65	; 0x41
 8006c3a:	9300      	str	r3, [sp, #0]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f008 fa25 	bl	800f08c <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006c42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8006c50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006c5e:	2341      	movs	r3, #65	; 0x41
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	2300      	movs	r3, #0
 8006c64:	2205      	movs	r2, #5
 8006c66:	f008 fa11 	bl	800f08c <CopiaVector>

	 		a->_debug_rx_ok++;
 8006c6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 8006c88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 8006c98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006ca6:	2b05      	cmp	r3, #5
 8006ca8:	d126      	bne.n	8006cf8 <AT_ESP8266_ND+0x3f8>
	 	{
	 		a->_estado_rcv_data=55;
 8006caa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2237      	movs	r2, #55	; 0x37
 8006cb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 8006cba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 8006cca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 8006ce8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006cf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2204      	movs	r2, #4
 8006d04:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006d08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006d16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006d24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006d32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006d40:	603b      	str	r3, [r7, #0]
 8006d42:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d46:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d4a:	6812      	ldr	r2, [r2, #0]
 8006d4c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006d50:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d54:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d58:	6809      	ldr	r1, [r1, #0]
 8006d5a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006d5e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006d62:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006d66:	6800      	ldr	r0, [r0, #0]
 8006d68:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9305      	str	r3, [sp, #20]
 8006d70:	9004      	str	r0, [sp, #16]
 8006d72:	9103      	str	r1, [sp, #12]
 8006d74:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d78:	9102      	str	r1, [sp, #8]
 8006d7a:	9201      	str	r2, [sp, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	4633      	mov	r3, r6
 8006d82:	4a60      	ldr	r2, [pc, #384]	; (8006f04 <AT_ESP8266_ND+0x604>)
 8006d84:	4629      	mov	r1, r5
 8006d86:	4620      	mov	r0, r4
 8006d88:	f007 fd8e 	bl	800e8a8 <FT_String_ND>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	f040 83b4 	bne.w	80074fc <AT_ESP8266_ND+0xbfc>
	{

		AT_decode=at_ok;
 8006d94:	2301      	movs	r3, #1
 8006d96:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 8006d9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2206      	movs	r2, #6
 8006da6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Transmision ok
 8006daa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006db8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006dc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006dd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006de2:	603b      	str	r3, [r7, #0]
 8006de4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006de8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006dec:	6812      	ldr	r2, [r2, #0]
 8006dee:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006df2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006df6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006dfa:	6809      	ldr	r1, [r1, #0]
 8006dfc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006e00:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006e04:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006e08:	6800      	ldr	r0, [r0, #0]
 8006e0a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006e0e:	2300      	movs	r3, #0
 8006e10:	9305      	str	r3, [sp, #20]
 8006e12:	9004      	str	r0, [sp, #16]
 8006e14:	9103      	str	r1, [sp, #12]
 8006e16:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e1a:	9102      	str	r1, [sp, #8]
 8006e1c:	9201      	str	r2, [sp, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	4633      	mov	r3, r6
 8006e24:	4a38      	ldr	r2, [pc, #224]	; (8006f08 <AT_ESP8266_ND+0x608>)
 8006e26:	4629      	mov	r1, r5
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f007 fd3d 	bl	800e8a8 <FT_String_ND>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d113      	bne.n	8006e5c <AT_ESP8266_ND+0x55c>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8006e34:	2313      	movs	r3, #19
 8006e36:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8006e3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 8006e58:	f001 bae1 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 8006e5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2208      	movs	r2, #8
 8006e68:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006e6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006e7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006e88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006e96:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e9a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ea4:	603b      	str	r3, [r7, #0]
 8006ea6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006eaa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006eae:	6812      	ldr	r2, [r2, #0]
 8006eb0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006eb4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006eb8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ebc:	6809      	ldr	r1, [r1, #0]
 8006ebe:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ec2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006ec6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006eca:	6800      	ldr	r0, [r0, #0]
 8006ecc:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	9305      	str	r3, [sp, #20]
 8006ed4:	9004      	str	r0, [sp, #16]
 8006ed6:	9103      	str	r1, [sp, #12]
 8006ed8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006edc:	9102      	str	r1, [sp, #8]
 8006ede:	9201      	str	r2, [sp, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	4633      	mov	r3, r6
 8006ee6:	4a09      	ldr	r2, [pc, #36]	; (8006f0c <AT_ESP8266_ND+0x60c>)
 8006ee8:	4629      	mov	r1, r5
 8006eea:	4620      	mov	r0, r4
 8006eec:	f007 fcdc 	bl	800e8a8 <FT_String_ND>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d10c      	bne.n	8006f10 <AT_ESP8266_ND+0x610>
			{
			AT_decode=at_deconectar_ok;
 8006ef6:	230d      	movs	r3, #13
 8006ef8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006efc:	f001 ba8f 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
 8006f00:	08010a9c 	.word	0x08010a9c
 8006f04:	08010aa4 	.word	0x08010aa4
 8006f08:	08010aac 	.word	0x08010aac
 8006f0c:	08010ab4 	.word	0x08010ab4
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006f10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	220a      	movs	r2, #10
 8006f1c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8006f20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006f2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006f3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006f4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f58:	603b      	str	r3, [r7, #0]
 8006f5a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f5e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f62:	6812      	ldr	r2, [r2, #0]
 8006f64:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f68:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f6c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f70:	6809      	ldr	r1, [r1, #0]
 8006f72:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f76:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006f7a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006f7e:	6800      	ldr	r0, [r0, #0]
 8006f80:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006f84:	2300      	movs	r3, #0
 8006f86:	9305      	str	r3, [sp, #20]
 8006f88:	9004      	str	r0, [sp, #16]
 8006f8a:	9103      	str	r1, [sp, #12]
 8006f8c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f90:	9102      	str	r1, [sp, #8]
 8006f92:	9201      	str	r2, [sp, #4]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	4633      	mov	r3, r6
 8006f9a:	4aaa      	ldr	r2, [pc, #680]	; (8007244 <AT_ESP8266_ND+0x944>)
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f007 fc82 	bl	800e8a8 <FT_String_ND>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d104      	bne.n	8006fb4 <AT_ESP8266_ND+0x6b4>
			{
				AT_decode=at_cambiar_modo_ok;
 8006faa:	231c      	movs	r3, #28
 8006fac:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006fb0:	f001 ba35 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8006fb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	220f      	movs	r2, #15
 8006fc0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8006fc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006fd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006fe0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fe4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006fee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ff2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ffc:	603b      	str	r3, [r7, #0]
 8006ffe:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007002:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007006:	6812      	ldr	r2, [r2, #0]
 8007008:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800700c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007010:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007014:	6809      	ldr	r1, [r1, #0]
 8007016:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800701a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800701e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007022:	6800      	ldr	r0, [r0, #0]
 8007024:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007028:	2300      	movs	r3, #0
 800702a:	9305      	str	r3, [sp, #20]
 800702c:	9004      	str	r0, [sp, #16]
 800702e:	9103      	str	r1, [sp, #12]
 8007030:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007034:	9102      	str	r1, [sp, #8]
 8007036:	9201      	str	r2, [sp, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	4633      	mov	r3, r6
 800703e:	4a82      	ldr	r2, [pc, #520]	; (8007248 <AT_ESP8266_ND+0x948>)
 8007040:	4629      	mov	r1, r5
 8007042:	4620      	mov	r0, r4
 8007044:	f007 fc30 	bl	800e8a8 <FT_String_ND>
 8007048:	4603      	mov	r3, r0
 800704a:	2b01      	cmp	r3, #1
 800704c:	d104      	bne.n	8007058 <AT_ESP8266_ND+0x758>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 800704e:	2317      	movs	r3, #23
 8007050:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007054:	f001 b9e3 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 8007058:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800705c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2203      	movs	r2, #3
 8007064:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007068:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800706c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007076:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800707a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007084:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007088:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007092:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007096:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80070a0:	603b      	str	r3, [r7, #0]
 80070a2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80070a6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80070aa:	6812      	ldr	r2, [r2, #0]
 80070ac:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80070b0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80070b4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80070b8:	6809      	ldr	r1, [r1, #0]
 80070ba:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80070be:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80070c2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80070c6:	6800      	ldr	r0, [r0, #0]
 80070c8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80070cc:	2300      	movs	r3, #0
 80070ce:	9305      	str	r3, [sp, #20]
 80070d0:	9004      	str	r0, [sp, #16]
 80070d2:	9103      	str	r1, [sp, #12]
 80070d4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80070d8:	9102      	str	r1, [sp, #8]
 80070da:	9201      	str	r2, [sp, #4]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	4633      	mov	r3, r6
 80070e2:	4a5a      	ldr	r2, [pc, #360]	; (800724c <AT_ESP8266_ND+0x94c>)
 80070e4:	4629      	mov	r1, r5
 80070e6:	4620      	mov	r0, r4
 80070e8:	f007 fbde 	bl	800e8a8 <FT_String_ND>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d104      	bne.n	80070fc <AT_ESP8266_ND+0x7fc>
			{
				AT_decode=at_tcp_ok_to_send;
 80070f2:	2314      	movs	r3, #20
 80070f4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80070f8:	f001 b991 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 80070fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007100:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	220c      	movs	r2, #12
 8007108:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800710c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007110:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800711a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800711e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007128:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800712c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007136:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800713a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007144:	603b      	str	r3, [r7, #0]
 8007146:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800714a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800714e:	6812      	ldr	r2, [r2, #0]
 8007150:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007154:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007158:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800715c:	6809      	ldr	r1, [r1, #0]
 800715e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007162:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007166:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800716a:	6800      	ldr	r0, [r0, #0]
 800716c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007170:	2300      	movs	r3, #0
 8007172:	9305      	str	r3, [sp, #20]
 8007174:	9004      	str	r0, [sp, #16]
 8007176:	9103      	str	r1, [sp, #12]
 8007178:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800717c:	9102      	str	r1, [sp, #8]
 800717e:	9201      	str	r2, [sp, #4]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	4633      	mov	r3, r6
 8007186:	4a32      	ldr	r2, [pc, #200]	; (8007250 <AT_ESP8266_ND+0x950>)
 8007188:	4629      	mov	r1, r5
 800718a:	4620      	mov	r0, r4
 800718c:	f007 fb8c 	bl	800e8a8 <FT_String_ND>
 8007190:	4603      	mov	r3, r0
 8007192:	2b01      	cmp	r3, #1
 8007194:	d104      	bne.n	80071a0 <AT_ESP8266_ND+0x8a0>
		{
			AT_decode=at_tcp_srvr_ok;
 8007196:	2315      	movs	r3, #21
 8007198:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800719c:	f001 b93f 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 80071a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	220b      	movs	r2, #11
 80071ac:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80071b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80071be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80071cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80071da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80071e8:	603b      	str	r3, [r7, #0]
 80071ea:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80071ee:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80071f2:	6812      	ldr	r2, [r2, #0]
 80071f4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80071f8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80071fc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007200:	6809      	ldr	r1, [r1, #0]
 8007202:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007206:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800720a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800720e:	6800      	ldr	r0, [r0, #0]
 8007210:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007214:	2300      	movs	r3, #0
 8007216:	9305      	str	r3, [sp, #20]
 8007218:	9004      	str	r0, [sp, #16]
 800721a:	9103      	str	r1, [sp, #12]
 800721c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007220:	9102      	str	r1, [sp, #8]
 8007222:	9201      	str	r2, [sp, #4]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	4633      	mov	r3, r6
 800722a:	4a0a      	ldr	r2, [pc, #40]	; (8007254 <AT_ESP8266_ND+0x954>)
 800722c:	4629      	mov	r1, r5
 800722e:	4620      	mov	r0, r4
 8007230:	f007 fb3a 	bl	800e8a8 <FT_String_ND>
 8007234:	4603      	mov	r3, r0
 8007236:	2b01      	cmp	r3, #1
 8007238:	d10e      	bne.n	8007258 <AT_ESP8266_ND+0x958>
			{
				AT_decode=at_tcp_closed_ok;
 800723a:	2309      	movs	r3, #9
 800723c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007240:	f001 b8ed 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
 8007244:	08010ac0 	.word	0x08010ac0
 8007248:	08010acc 	.word	0x08010acc
 800724c:	08010adc 	.word	0x08010adc
 8007250:	08010ae0 	.word	0x08010ae0
 8007254:	08010af0 	.word	0x08010af0
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007258:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800725c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	220b      	movs	r2, #11
 8007264:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007268:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800726c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007276:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800727a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007284:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007288:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007292:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007296:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80072a0:	603b      	str	r3, [r7, #0]
 80072a2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80072a6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80072aa:	6812      	ldr	r2, [r2, #0]
 80072ac:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80072b0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80072b4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80072b8:	6809      	ldr	r1, [r1, #0]
 80072ba:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80072be:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80072c2:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80072c6:	6800      	ldr	r0, [r0, #0]
 80072c8:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80072cc:	2300      	movs	r3, #0
 80072ce:	9305      	str	r3, [sp, #20]
 80072d0:	9004      	str	r0, [sp, #16]
 80072d2:	9103      	str	r1, [sp, #12]
 80072d4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80072d8:	9102      	str	r1, [sp, #8]
 80072da:	9201      	str	r2, [sp, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	4633      	mov	r3, r6
 80072e2:	4a82      	ldr	r2, [pc, #520]	; (80074ec <AT_ESP8266_ND+0xbec>)
 80072e4:	4629      	mov	r1, r5
 80072e6:	4620      	mov	r0, r4
 80072e8:	f007 fade 	bl	800e8a8 <FT_String_ND>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d104      	bne.n	80072fc <AT_ESP8266_ND+0x9fc>
			{
				AT_decode=at_multiple_conn_ok;
 80072f2:	2307      	movs	r3, #7
 80072f4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80072f8:	f001 b891 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 80072fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007300:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	220b      	movs	r2, #11
 8007308:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800730c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007310:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800731a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800731e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007328:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800732c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007336:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800733a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007344:	603b      	str	r3, [r7, #0]
 8007346:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800734a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800734e:	6812      	ldr	r2, [r2, #0]
 8007350:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007354:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007358:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800735c:	6809      	ldr	r1, [r1, #0]
 800735e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007362:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007366:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800736a:	6800      	ldr	r0, [r0, #0]
 800736c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007370:	2300      	movs	r3, #0
 8007372:	9305      	str	r3, [sp, #20]
 8007374:	9004      	str	r0, [sp, #16]
 8007376:	9103      	str	r1, [sp, #12]
 8007378:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800737c:	9102      	str	r1, [sp, #8]
 800737e:	9201      	str	r2, [sp, #4]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	4633      	mov	r3, r6
 8007386:	4a5a      	ldr	r2, [pc, #360]	; (80074f0 <AT_ESP8266_ND+0xbf0>)
 8007388:	4629      	mov	r1, r5
 800738a:	4620      	mov	r0, r4
 800738c:	f007 fa8c 	bl	800e8a8 <FT_String_ND>
 8007390:	4603      	mov	r3, r0
 8007392:	2b01      	cmp	r3, #1
 8007394:	d104      	bne.n	80073a0 <AT_ESP8266_ND+0xaa0>
			{
				AT_decode=at_no_multiple_conn_ok;
 8007396:	2308      	movs	r3, #8
 8007398:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800739c:	f001 b83f 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 80073a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	220a      	movs	r2, #10
 80073ac:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80073b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80073be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80073cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80073da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80073e8:	603b      	str	r3, [r7, #0]
 80073ea:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073ee:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80073f2:	6812      	ldr	r2, [r2, #0]
 80073f4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80073f8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80073fc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007400:	6809      	ldr	r1, [r1, #0]
 8007402:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007406:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800740a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800740e:	6800      	ldr	r0, [r0, #0]
 8007410:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007414:	2300      	movs	r3, #0
 8007416:	9305      	str	r3, [sp, #20]
 8007418:	9004      	str	r0, [sp, #16]
 800741a:	9103      	str	r1, [sp, #12]
 800741c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007420:	9102      	str	r1, [sp, #8]
 8007422:	9201      	str	r2, [sp, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	4633      	mov	r3, r6
 800742a:	4a32      	ldr	r2, [pc, #200]	; (80074f4 <AT_ESP8266_ND+0xbf4>)
 800742c:	4629      	mov	r1, r5
 800742e:	4620      	mov	r0, r4
 8007430:	f007 fa3a 	bl	800e8a8 <FT_String_ND>
 8007434:	4603      	mov	r3, r0
 8007436:	2b01      	cmp	r3, #1
 8007438:	d104      	bne.n	8007444 <AT_ESP8266_ND+0xb44>
			{
				AT_decode=at_def_ip_ok;
 800743a:	231b      	movs	r3, #27
 800743c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007440:	f000 bfed 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 8007444:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007448:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2207      	movs	r2, #7
 8007450:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007454:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007458:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007462:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007466:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007470:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007474:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800747e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007482:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800748c:	603b      	str	r3, [r7, #0]
 800748e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007492:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007496:	6812      	ldr	r2, [r2, #0]
 8007498:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800749c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80074a0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80074a4:	6809      	ldr	r1, [r1, #0]
 80074a6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80074aa:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80074ae:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80074b2:	6800      	ldr	r0, [r0, #0]
 80074b4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80074b8:	2300      	movs	r3, #0
 80074ba:	9305      	str	r3, [sp, #20]
 80074bc:	9004      	str	r0, [sp, #16]
 80074be:	9103      	str	r1, [sp, #12]
 80074c0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80074c4:	9102      	str	r1, [sp, #8]
 80074c6:	9201      	str	r2, [sp, #4]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	4633      	mov	r3, r6
 80074ce:	4a0a      	ldr	r2, [pc, #40]	; (80074f8 <AT_ESP8266_ND+0xbf8>)
 80074d0:	4629      	mov	r1, r5
 80074d2:	4620      	mov	r0, r4
 80074d4:	f007 f9e8 	bl	800e8a8 <FT_String_ND>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b01      	cmp	r3, #1
 80074dc:	f040 879f 	bne.w	800841e <AT_ESP8266_ND+0x1b1e>
			{
			AT_decode=at_tcp_conectado;
 80074e0:	230f      	movs	r3, #15
 80074e2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80074e6:	f000 bf9a 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
 80074ea:	bf00      	nop
 80074ec:	08010afc 	.word	0x08010afc
 80074f0:	08010b08 	.word	0x08010b08
 80074f4:	08010b14 	.word	0x08010b14
 80074f8:	08010b20 	.word	0x08010b20
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 80074fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007500:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2207      	movs	r2, #7
 8007508:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800750c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007510:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800751a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800751e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007528:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800752c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007536:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800753a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007544:	603b      	str	r3, [r7, #0]
 8007546:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800754a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800754e:	6812      	ldr	r2, [r2, #0]
 8007550:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007554:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007558:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800755c:	6809      	ldr	r1, [r1, #0]
 800755e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007562:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007566:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800756a:	6800      	ldr	r0, [r0, #0]
 800756c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007570:	2300      	movs	r3, #0
 8007572:	9305      	str	r3, [sp, #20]
 8007574:	9004      	str	r0, [sp, #16]
 8007576:	9103      	str	r1, [sp, #12]
 8007578:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800757c:	9102      	str	r1, [sp, #8]
 800757e:	9201      	str	r2, [sp, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	4633      	mov	r3, r6
 8007586:	4aaa      	ldr	r2, [pc, #680]	; (8007830 <AT_ESP8266_ND+0xf30>)
 8007588:	4629      	mov	r1, r5
 800758a:	4620      	mov	r0, r4
 800758c:	f007 f98c 	bl	800e8a8 <FT_String_ND>
 8007590:	4603      	mov	r3, r0
 8007592:	2b01      	cmp	r3, #1
 8007594:	f040 839d 	bne.w	8007cd2 <AT_ESP8266_ND+0x13d2>
		{
				AT_decode=at_error;
 8007598:	2302      	movs	r3, #2
 800759a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 800759e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2208      	movs	r2, #8
 80075aa:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Intentando conectar con servidor TCP caido
 80075ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80075bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80075ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80075d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80075e6:	603b      	str	r3, [r7, #0]
 80075e8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80075ec:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80075f0:	6812      	ldr	r2, [r2, #0]
 80075f2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80075f6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80075fa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80075fe:	6809      	ldr	r1, [r1, #0]
 8007600:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007604:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007608:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800760c:	6800      	ldr	r0, [r0, #0]
 800760e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007612:	2300      	movs	r3, #0
 8007614:	9305      	str	r3, [sp, #20]
 8007616:	9004      	str	r0, [sp, #16]
 8007618:	9103      	str	r1, [sp, #12]
 800761a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800761e:	9102      	str	r1, [sp, #8]
 8007620:	9201      	str	r2, [sp, #4]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	4633      	mov	r3, r6
 8007628:	4a82      	ldr	r2, [pc, #520]	; (8007834 <AT_ESP8266_ND+0xf34>)
 800762a:	4629      	mov	r1, r5
 800762c:	4620      	mov	r0, r4
 800762e:	f007 f93b 	bl	800e8a8 <FT_String_ND>
 8007632:	4603      	mov	r3, r0
 8007634:	2b01      	cmp	r3, #1
 8007636:	d104      	bne.n	8007642 <AT_ESP8266_ND+0xd42>
				{
						AT_decode=at_tcp_conn_err;
 8007638:	2306      	movs	r3, #6
 800763a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800763e:	f000 beee 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 8007642:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007646:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2215      	movs	r2, #21
 800764e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007652:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007656:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007660:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007664:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800766e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007672:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800767c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007680:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800768a:	603b      	str	r3, [r7, #0]
 800768c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007690:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007694:	6812      	ldr	r2, [r2, #0]
 8007696:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800769a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800769e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80076a2:	6809      	ldr	r1, [r1, #0]
 80076a4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80076a8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80076ac:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80076b0:	6800      	ldr	r0, [r0, #0]
 80076b2:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80076b6:	2300      	movs	r3, #0
 80076b8:	9305      	str	r3, [sp, #20]
 80076ba:	9004      	str	r0, [sp, #16]
 80076bc:	9103      	str	r1, [sp, #12]
 80076be:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076c2:	9102      	str	r1, [sp, #8]
 80076c4:	9201      	str	r2, [sp, #4]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	4633      	mov	r3, r6
 80076cc:	4a5a      	ldr	r2, [pc, #360]	; (8007838 <AT_ESP8266_ND+0xf38>)
 80076ce:	4629      	mov	r1, r5
 80076d0:	4620      	mov	r0, r4
 80076d2:	f007 f8e9 	bl	800e8a8 <FT_String_ND>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d104      	bne.n	80076e6 <AT_ESP8266_ND+0xde6>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 80076dc:	230e      	movs	r3, #14
 80076de:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80076e2:	f000 be9c 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 80076e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	220c      	movs	r2, #12
 80076f2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80076f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007704:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007708:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007712:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007716:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007720:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007724:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800772e:	603b      	str	r3, [r7, #0]
 8007730:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007734:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007738:	6812      	ldr	r2, [r2, #0]
 800773a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800773e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007742:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007746:	6809      	ldr	r1, [r1, #0]
 8007748:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800774c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007750:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007754:	6800      	ldr	r0, [r0, #0]
 8007756:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800775a:	2300      	movs	r3, #0
 800775c:	9305      	str	r3, [sp, #20]
 800775e:	9004      	str	r0, [sp, #16]
 8007760:	9103      	str	r1, [sp, #12]
 8007762:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007766:	9102      	str	r1, [sp, #8]
 8007768:	9201      	str	r2, [sp, #4]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	4633      	mov	r3, r6
 8007770:	4a32      	ldr	r2, [pc, #200]	; (800783c <AT_ESP8266_ND+0xf3c>)
 8007772:	4629      	mov	r1, r5
 8007774:	4620      	mov	r0, r4
 8007776:	f007 f897 	bl	800e8a8 <FT_String_ND>
 800777a:	4603      	mov	r3, r0
 800777c:	2b01      	cmp	r3, #1
 800777e:	d104      	bne.n	800778a <AT_ESP8266_ND+0xe8a>
				{
					AT_decode=at_tcp_srvr_err;
 8007780:	2316      	movs	r3, #22
 8007782:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007786:	f000 be4a 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 800778a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800778e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	220b      	movs	r2, #11
 8007796:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 800779a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800779e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80077a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80077b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80077c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80077d2:	603b      	str	r3, [r7, #0]
 80077d4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80077d8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80077dc:	6812      	ldr	r2, [r2, #0]
 80077de:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80077e2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80077e6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80077ea:	6809      	ldr	r1, [r1, #0]
 80077ec:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80077f0:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80077f4:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80077f8:	6800      	ldr	r0, [r0, #0]
 80077fa:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80077fe:	2300      	movs	r3, #0
 8007800:	9305      	str	r3, [sp, #20]
 8007802:	9004      	str	r0, [sp, #16]
 8007804:	9103      	str	r1, [sp, #12]
 8007806:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800780a:	9102      	str	r1, [sp, #8]
 800780c:	9201      	str	r2, [sp, #4]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	4633      	mov	r3, r6
 8007814:	4a0a      	ldr	r2, [pc, #40]	; (8007840 <AT_ESP8266_ND+0xf40>)
 8007816:	4629      	mov	r1, r5
 8007818:	4620      	mov	r0, r4
 800781a:	f007 f845 	bl	800e8a8 <FT_String_ND>
 800781e:	4603      	mov	r3, r0
 8007820:	2b01      	cmp	r3, #1
 8007822:	d10f      	bne.n	8007844 <AT_ESP8266_ND+0xf44>
					{
						AT_decode=at_tcp_close_err;
 8007824:	231a      	movs	r3, #26
 8007826:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800782a:	f000 bdf8 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
 800782e:	bf00      	nop
 8007830:	08010b28 	.word	0x08010b28
 8007834:	08010b30 	.word	0x08010b30
 8007838:	08010b3c 	.word	0x08010b3c
 800783c:	08010ae0 	.word	0x08010ae0
 8007840:	08010af0 	.word	0x08010af0
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 8007844:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007848:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2211      	movs	r2, #17
 8007850:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007854:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007858:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007862:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007866:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007870:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007874:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800787e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007882:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800788c:	603b      	str	r3, [r7, #0]
 800788e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007892:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007896:	6812      	ldr	r2, [r2, #0]
 8007898:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800789c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80078a0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80078a4:	6809      	ldr	r1, [r1, #0]
 80078a6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80078aa:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80078ae:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80078b2:	6800      	ldr	r0, [r0, #0]
 80078b4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80078b8:	2300      	movs	r3, #0
 80078ba:	9305      	str	r3, [sp, #20]
 80078bc:	9004      	str	r0, [sp, #16]
 80078be:	9103      	str	r1, [sp, #12]
 80078c0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078c4:	9102      	str	r1, [sp, #8]
 80078c6:	9201      	str	r2, [sp, #4]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	4633      	mov	r3, r6
 80078ce:	4aaa      	ldr	r2, [pc, #680]	; (8007b78 <AT_ESP8266_ND+0x1278>)
 80078d0:	4629      	mov	r1, r5
 80078d2:	4620      	mov	r0, r4
 80078d4:	f006 ffe8 	bl	800e8a8 <FT_String_ND>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d104      	bne.n	80078e8 <AT_ESP8266_ND+0xfe8>
					{
						AT_decode=at_tcp_snd_err;
 80078de:	2311      	movs	r3, #17
 80078e0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80078e4:	f000 bd9b 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 80078e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	220a      	movs	r2, #10
 80078f4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 80078f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007906:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800790a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007914:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007918:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007922:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007926:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007930:	603b      	str	r3, [r7, #0]
 8007932:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007936:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800793a:	6812      	ldr	r2, [r2, #0]
 800793c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007940:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007944:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007948:	6809      	ldr	r1, [r1, #0]
 800794a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800794e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007952:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007956:	6800      	ldr	r0, [r0, #0]
 8007958:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800795c:	2300      	movs	r3, #0
 800795e:	9305      	str	r3, [sp, #20]
 8007960:	9004      	str	r0, [sp, #16]
 8007962:	9103      	str	r1, [sp, #12]
 8007964:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007968:	9102      	str	r1, [sp, #8]
 800796a:	9201      	str	r2, [sp, #4]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	4633      	mov	r3, r6
 8007972:	4a82      	ldr	r2, [pc, #520]	; (8007b7c <AT_ESP8266_ND+0x127c>)
 8007974:	4629      	mov	r1, r5
 8007976:	4620      	mov	r0, r4
 8007978:	f006 ff96 	bl	800e8a8 <FT_String_ND>
 800797c:	4603      	mov	r3, r0
 800797e:	2b01      	cmp	r3, #1
 8007980:	d104      	bne.n	800798c <AT_ESP8266_ND+0x108c>
					{
						AT_decode=at_cambiar_modo_err;
 8007982:	231d      	movs	r3, #29
 8007984:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007988:	f000 bd49 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 800798c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007990:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	220b      	movs	r2, #11
 8007998:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 800799c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80079aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80079b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80079c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80079d4:	603b      	str	r3, [r7, #0]
 80079d6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80079da:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80079de:	6812      	ldr	r2, [r2, #0]
 80079e0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80079e4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80079e8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80079ec:	6809      	ldr	r1, [r1, #0]
 80079ee:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80079f2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80079f6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80079fa:	6800      	ldr	r0, [r0, #0]
 80079fc:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007a00:	2300      	movs	r3, #0
 8007a02:	9305      	str	r3, [sp, #20]
 8007a04:	9004      	str	r0, [sp, #16]
 8007a06:	9103      	str	r1, [sp, #12]
 8007a08:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a0c:	9102      	str	r1, [sp, #8]
 8007a0e:	9201      	str	r2, [sp, #4]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	9300      	str	r3, [sp, #0]
 8007a14:	4633      	mov	r3, r6
 8007a16:	4a5a      	ldr	r2, [pc, #360]	; (8007b80 <AT_ESP8266_ND+0x1280>)
 8007a18:	4629      	mov	r1, r5
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f006 ff44 	bl	800e8a8 <FT_String_ND>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d104      	bne.n	8007a30 <AT_ESP8266_ND+0x1130>
					{
						AT_decode=at_multiple_conn_err;
 8007a26:	231e      	movs	r3, #30
 8007a28:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a2c:	f000 bcf7 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007a30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	220b      	movs	r2, #11
 8007a3c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007a40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007a4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007a5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007a6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a78:	603b      	str	r3, [r7, #0]
 8007a7a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a7e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a82:	6812      	ldr	r2, [r2, #0]
 8007a84:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007a88:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a8c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a90:	6809      	ldr	r1, [r1, #0]
 8007a92:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a96:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007a9a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007a9e:	6800      	ldr	r0, [r0, #0]
 8007aa0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	9305      	str	r3, [sp, #20]
 8007aa8:	9004      	str	r0, [sp, #16]
 8007aaa:	9103      	str	r1, [sp, #12]
 8007aac:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ab0:	9102      	str	r1, [sp, #8]
 8007ab2:	9201      	str	r2, [sp, #4]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	4633      	mov	r3, r6
 8007aba:	4a32      	ldr	r2, [pc, #200]	; (8007b84 <AT_ESP8266_ND+0x1284>)
 8007abc:	4629      	mov	r1, r5
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f006 fef2 	bl	800e8a8 <FT_String_ND>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d104      	bne.n	8007ad4 <AT_ESP8266_ND+0x11d4>
					{
						AT_decode=at_no_multiple_conn_err;
 8007aca:	231f      	movs	r3, #31
 8007acc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007ad0:	f000 bca5 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 8007ad4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ad8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2208      	movs	r2, #8
 8007ae0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007ae4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ae8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007af2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007af6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007b00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007b0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b1c:	603b      	str	r3, [r7, #0]
 8007b1e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b22:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b26:	6812      	ldr	r2, [r2, #0]
 8007b28:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b2c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b30:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b34:	6809      	ldr	r1, [r1, #0]
 8007b36:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007b3a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007b3e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007b42:	6800      	ldr	r0, [r0, #0]
 8007b44:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007b48:	2300      	movs	r3, #0
 8007b4a:	9305      	str	r3, [sp, #20]
 8007b4c:	9004      	str	r0, [sp, #16]
 8007b4e:	9103      	str	r1, [sp, #12]
 8007b50:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b54:	9102      	str	r1, [sp, #8]
 8007b56:	9201      	str	r2, [sp, #4]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	4633      	mov	r3, r6
 8007b5e:	4a0a      	ldr	r2, [pc, #40]	; (8007b88 <AT_ESP8266_ND+0x1288>)
 8007b60:	4629      	mov	r1, r5
 8007b62:	4620      	mov	r0, r4
 8007b64:	f006 fea0 	bl	800e8a8 <FT_String_ND>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d10e      	bne.n	8007b8c <AT_ESP8266_ND+0x128c>
					{
						AT_decode=at_conn_wifi_err;
 8007b6e:	2320      	movs	r3, #32
 8007b70:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007b74:	f000 bc53 	b.w	800841e <AT_ESP8266_ND+0x1b1e>
 8007b78:	08010b54 	.word	0x08010b54
 8007b7c:	08010ac0 	.word	0x08010ac0
 8007b80:	08010afc 	.word	0x08010afc
 8007b84:	08010b08 	.word	0x08010b08
 8007b88:	08010b68 	.word	0x08010b68
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 8007b8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	220a      	movs	r2, #10
 8007b98:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007b9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ba0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007baa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007bb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007bc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007bd4:	603b      	str	r3, [r7, #0]
 8007bd6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007bda:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007bde:	6812      	ldr	r2, [r2, #0]
 8007be0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007be4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007be8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007bec:	6809      	ldr	r1, [r1, #0]
 8007bee:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007bf2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007bf6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007bfa:	6800      	ldr	r0, [r0, #0]
 8007bfc:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007c00:	2300      	movs	r3, #0
 8007c02:	9305      	str	r3, [sp, #20]
 8007c04:	9004      	str	r0, [sp, #16]
 8007c06:	9103      	str	r1, [sp, #12]
 8007c08:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c0c:	9102      	str	r1, [sp, #8]
 8007c0e:	9201      	str	r2, [sp, #4]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	4633      	mov	r3, r6
 8007c16:	4ab7      	ldr	r2, [pc, #732]	; (8007ef4 <AT_ESP8266_ND+0x15f4>)
 8007c18:	4629      	mov	r1, r5
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f006 fe44 	bl	800e8a8 <FT_String_ND>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d103      	bne.n	8007c2e <AT_ESP8266_ND+0x132e>
					{
						AT_decode=at_def_ip_err;
 8007c26:	2321      	movs	r3, #33	; 0x21
 8007c28:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007c2c:	e3f7      	b.n	800841e <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 8007c2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2205      	movs	r2, #5
 8007c3a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007c3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007c4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007c5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007c68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007c76:	603b      	str	r3, [r7, #0]
 8007c78:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c7c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c80:	6812      	ldr	r2, [r2, #0]
 8007c82:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007c86:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c8a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c8e:	6809      	ldr	r1, [r1, #0]
 8007c90:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007c94:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007c98:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007c9c:	6800      	ldr	r0, [r0, #0]
 8007c9e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	9305      	str	r3, [sp, #20]
 8007ca6:	9004      	str	r0, [sp, #16]
 8007ca8:	9103      	str	r1, [sp, #12]
 8007caa:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007cae:	9102      	str	r1, [sp, #8]
 8007cb0:	9201      	str	r2, [sp, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	4633      	mov	r3, r6
 8007cb8:	4a8f      	ldr	r2, [pc, #572]	; (8007ef8 <AT_ESP8266_ND+0x15f8>)
 8007cba:	4629      	mov	r1, r5
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f006 fdf3 	bl	800e8a8 <FT_String_ND>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	f040 83aa 	bne.w	800841e <AT_ESP8266_ND+0x1b1e>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 8007cca:	2322      	movs	r3, #34	; 0x22
 8007ccc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007cd0:	e3a5      	b.n	800841e <AT_ESP8266_ND+0x1b1e>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007cd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	220f      	movs	r2, #15
 8007cde:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007ce2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ce6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007cf0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cf4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007cfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007d0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007d1a:	603b      	str	r3, [r7, #0]
 8007d1c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d20:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d24:	6812      	ldr	r2, [r2, #0]
 8007d26:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007d2a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d2e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d32:	6809      	ldr	r1, [r1, #0]
 8007d34:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007d38:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007d3c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007d40:	6800      	ldr	r0, [r0, #0]
 8007d42:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007d46:	2300      	movs	r3, #0
 8007d48:	9305      	str	r3, [sp, #20]
 8007d4a:	9004      	str	r0, [sp, #16]
 8007d4c:	9103      	str	r1, [sp, #12]
 8007d4e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d52:	9102      	str	r1, [sp, #8]
 8007d54:	9201      	str	r2, [sp, #4]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	4633      	mov	r3, r6
 8007d5c:	4a67      	ldr	r2, [pc, #412]	; (8007efc <AT_ESP8266_ND+0x15fc>)
 8007d5e:	4629      	mov	r1, r5
 8007d60:	4620      	mov	r0, r4
 8007d62:	f006 fda1 	bl	800e8a8 <FT_String_ND>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d112      	bne.n	8007d92 <AT_ESP8266_ND+0x1492>
				{
					 AT_decode=at_wifi_disconnect;
 8007d6c:	230a      	movs	r3, #10
 8007d6e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 8007d72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8007d90:	e345      	b.n	800841e <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 8007d92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2209      	movs	r2, #9
 8007d9e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007da2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007da6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007db0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007db4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007dbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007dcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007de0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007de4:	6812      	ldr	r2, [r2, #0]
 8007de6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007dea:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007dee:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007df2:	6809      	ldr	r1, [r1, #0]
 8007df4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007df8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007dfc:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007e00:	6800      	ldr	r0, [r0, #0]
 8007e02:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007e06:	2300      	movs	r3, #0
 8007e08:	9305      	str	r3, [sp, #20]
 8007e0a:	9004      	str	r0, [sp, #16]
 8007e0c:	9103      	str	r1, [sp, #12]
 8007e0e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e12:	9102      	str	r1, [sp, #8]
 8007e14:	9201      	str	r2, [sp, #4]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	4633      	mov	r3, r6
 8007e1c:	4a38      	ldr	r2, [pc, #224]	; (8007f00 <AT_ESP8266_ND+0x1600>)
 8007e1e:	4629      	mov	r1, r5
 8007e20:	4620      	mov	r0, r4
 8007e22:	f006 fd41 	bl	800e8a8 <FT_String_ND>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d112      	bne.n	8007e52 <AT_ESP8266_ND+0x1552>
				{
					AT_decode=at_tcp_client_desc;
 8007e2c:	2319      	movs	r3, #25
 8007e2e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 8007e32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 8007e50:	e2e5      	b.n	800841e <AT_ESP8266_ND+0x1b1e>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 8007e52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2208      	movs	r2, #8
 8007e5e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007e62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007e70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007e7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007e8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007e9a:	603b      	str	r3, [r7, #0]
 8007e9c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ea0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ea4:	6812      	ldr	r2, [r2, #0]
 8007ea6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007eaa:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007eae:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007eb2:	6809      	ldr	r1, [r1, #0]
 8007eb4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007eb8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007ebc:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007ec0:	6800      	ldr	r0, [r0, #0]
 8007ec2:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	9305      	str	r3, [sp, #20]
 8007eca:	9004      	str	r0, [sp, #16]
 8007ecc:	9103      	str	r1, [sp, #12]
 8007ece:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ed2:	9102      	str	r1, [sp, #8]
 8007ed4:	9201      	str	r2, [sp, #4]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	4633      	mov	r3, r6
 8007edc:	4a09      	ldr	r2, [pc, #36]	; (8007f04 <AT_ESP8266_ND+0x1604>)
 8007ede:	4629      	mov	r1, r5
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f006 fce1 	bl	800e8a8 <FT_String_ND>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d10d      	bne.n	8007f08 <AT_ESP8266_ND+0x1608>
				{
					AT_decode=at_tcp_desconectado;
 8007eec:	2310      	movs	r3, #16
 8007eee:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007ef2:	e294      	b.n	800841e <AT_ESP8266_ND+0x1b1e>
 8007ef4:	08010b14 	.word	0x08010b14
 8007ef8:	08010b74 	.word	0x08010b74
 8007efc:	08010b7c 	.word	0x08010b7c
 8007f00:	08010b8c 	.word	0x08010b8c
 8007f04:	08010b30 	.word	0x08010b30
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007f08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007f16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007f24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f203 4694 	addw	r6, r3, #1172	; 0x494
 8007f32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f603 4cdc 	addw	ip, r3, #3292	; 0xcdc
 8007f40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007f4e:	603b      	str	r3, [r7, #0]
 8007f50:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f54:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f58:	6812      	ldr	r2, [r2, #0]
 8007f5a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007f5e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007f62:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007f66:	6809      	ldr	r1, [r1, #0]
 8007f68:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007f6c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007f70:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007f74:	6800      	ldr	r0, [r0, #0]
 8007f76:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	9305      	str	r3, [sp, #20]
 8007f7e:	9004      	str	r0, [sp, #16]
 8007f80:	9103      	str	r1, [sp, #12]
 8007f82:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f86:	9102      	str	r1, [sp, #8]
 8007f88:	9201      	str	r2, [sp, #4]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	4663      	mov	r3, ip
 8007f90:	4632      	mov	r2, r6
 8007f92:	4629      	mov	r1, r5
 8007f94:	4620      	mov	r0, r4
 8007f96:	f006 fc87 	bl	800e8a8 <FT_String_ND>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d112      	bne.n	8007fc6 <AT_ESP8266_ND+0x16c6>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8007fa0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fa4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f000 8235 	beq.w	800841e <AT_ESP8266_ND+0x1b1e>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8007fb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 8007fc4:	e22b      	b.n	800841e <AT_ESP8266_ND+0x1b1e>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007fc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	220d      	movs	r2, #13
 8007fd2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8007fd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fda:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007fe4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fe8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007ff2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ff6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8008000:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008004:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800800e:	603b      	str	r3, [r7, #0]
 8008010:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008014:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008018:	6812      	ldr	r2, [r2, #0]
 800801a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800801e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008022:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008026:	6809      	ldr	r1, [r1, #0]
 8008028:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800802c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008030:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008034:	6800      	ldr	r0, [r0, #0]
 8008036:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800803a:	2300      	movs	r3, #0
 800803c:	9305      	str	r3, [sp, #20]
 800803e:	9004      	str	r0, [sp, #16]
 8008040:	9103      	str	r1, [sp, #12]
 8008042:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008046:	9102      	str	r1, [sp, #8]
 8008048:	9201      	str	r2, [sp, #4]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	4633      	mov	r3, r6
 8008050:	4ac5      	ldr	r2, [pc, #788]	; (8008368 <AT_ESP8266_ND+0x1a68>)
 8008052:	4629      	mov	r1, r5
 8008054:	4620      	mov	r0, r4
 8008056:	f006 fc27 	bl	800e8a8 <FT_String_ND>
 800805a:	4603      	mov	r3, r0
 800805c:	2b01      	cmp	r3, #1
 800805e:	d112      	bne.n	8008086 <AT_ESP8266_ND+0x1786>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8008060:	2312      	movs	r3, #18
 8008062:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 8008066:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800806a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800807a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8008084:	e1cb      	b.n	800841e <AT_ESP8266_ND+0x1b1e>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 8008086:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800808a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	220d      	movs	r2, #13
 8008092:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Obtiene IP
 8008096:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800809a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80080a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80080b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80080c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80080ce:	603b      	str	r3, [r7, #0]
 80080d0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80080d4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80080d8:	6812      	ldr	r2, [r2, #0]
 80080da:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80080de:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80080e2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80080e6:	6809      	ldr	r1, [r1, #0]
 80080e8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80080ec:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80080f0:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80080f4:	6800      	ldr	r0, [r0, #0]
 80080f6:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80080fa:	2300      	movs	r3, #0
 80080fc:	9305      	str	r3, [sp, #20]
 80080fe:	9004      	str	r0, [sp, #16]
 8008100:	9103      	str	r1, [sp, #12]
 8008102:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008106:	9102      	str	r1, [sp, #8]
 8008108:	9201      	str	r2, [sp, #4]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	4633      	mov	r3, r6
 8008110:	4a96      	ldr	r2, [pc, #600]	; (800836c <AT_ESP8266_ND+0x1a6c>)
 8008112:	4629      	mov	r1, r5
 8008114:	4620      	mov	r0, r4
 8008116:	f006 fbc7 	bl	800e8a8 <FT_String_ND>
 800811a:	4603      	mov	r3, r0
 800811c:	2b01      	cmp	r3, #1
 800811e:	d112      	bne.n	8008146 <AT_ESP8266_ND+0x1846>
				{
					a->_debug_WF_GOTIP++;
 8008120:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008124:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800812e:	1c5a      	adds	r2, r3, #1
 8008130:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008134:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 800813e:	230c      	movs	r3, #12
 8008140:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8008144:	e16b      	b.n	800841e <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 8008146:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800814a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	220e      	movs	r2, #14
 8008152:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//WIFI CONECTADA
 8008156:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800815a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008164:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008168:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8008172:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008176:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8008180:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008184:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800818e:	603b      	str	r3, [r7, #0]
 8008190:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008194:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008198:	6812      	ldr	r2, [r2, #0]
 800819a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800819e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80081a2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80081a6:	6809      	ldr	r1, [r1, #0]
 80081a8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80081ac:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80081b0:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80081b4:	6800      	ldr	r0, [r0, #0]
 80081b6:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80081ba:	2300      	movs	r3, #0
 80081bc:	9305      	str	r3, [sp, #20]
 80081be:	9004      	str	r0, [sp, #16]
 80081c0:	9103      	str	r1, [sp, #12]
 80081c2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80081c6:	9102      	str	r1, [sp, #8]
 80081c8:	9201      	str	r2, [sp, #4]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	4633      	mov	r3, r6
 80081d0:	4a67      	ldr	r2, [pc, #412]	; (8008370 <AT_ESP8266_ND+0x1a70>)
 80081d2:	4629      	mov	r1, r5
 80081d4:	4620      	mov	r0, r4
 80081d6:	f006 fb67 	bl	800e8a8 <FT_String_ND>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d112      	bne.n	8008206 <AT_ESP8266_ND+0x1906>
				{
					a->_debug_WF_CNNCTD++;
 80081e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 80081ee:	1c5a      	adds	r2, r3, #1
 80081f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 80081fe:	230b      	movs	r3, #11
 8008200:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8008204:	e10b      	b.n	800841e <AT_ESP8266_ND+0x1b1e>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 8008206:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800820a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	220a      	movs	r2, #10
 8008212:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8008216:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800821a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008224:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008228:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8008232:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008236:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8008240:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008244:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800824e:	603b      	str	r3, [r7, #0]
 8008250:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008254:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008258:	6812      	ldr	r2, [r2, #0]
 800825a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800825e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008262:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008266:	6809      	ldr	r1, [r1, #0]
 8008268:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800826c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008270:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008274:	6800      	ldr	r0, [r0, #0]
 8008276:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800827a:	2300      	movs	r3, #0
 800827c:	9305      	str	r3, [sp, #20]
 800827e:	9004      	str	r0, [sp, #16]
 8008280:	9103      	str	r1, [sp, #12]
 8008282:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008286:	9102      	str	r1, [sp, #8]
 8008288:	9201      	str	r2, [sp, #4]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	4633      	mov	r3, r6
 8008290:	4a38      	ldr	r2, [pc, #224]	; (8008374 <AT_ESP8266_ND+0x1a74>)
 8008292:	4629      	mov	r1, r5
 8008294:	4620      	mov	r0, r4
 8008296:	f006 fb07 	bl	800e8a8 <FT_String_ND>
 800829a:	4603      	mov	r3, r0
 800829c:	2b01      	cmp	r3, #1
 800829e:	d112      	bne.n	80082c6 <AT_ESP8266_ND+0x19c6>
				  {
					  AT_decode=at_tcp_client_conectado;
 80082a0:	2318      	movs	r3, #24
 80082a2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 80082a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 80082b4:	1c5a      	adds	r2, r3, #1
 80082b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 80082c4:	e0ab      	b.n	800841e <AT_ESP8266_ND+0x1b1e>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 80082c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2208      	movs	r2, #8
 80082d2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80082d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80082e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80082f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8008300:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008304:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800830e:	603b      	str	r3, [r7, #0]
 8008310:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8008314:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008318:	6812      	ldr	r2, [r2, #0]
 800831a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800831e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8008322:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8008326:	6809      	ldr	r1, [r1, #0]
 8008328:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800832c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008330:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8008334:	6800      	ldr	r0, [r0, #0]
 8008336:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800833a:	2300      	movs	r3, #0
 800833c:	9305      	str	r3, [sp, #20]
 800833e:	9004      	str	r0, [sp, #16]
 8008340:	9103      	str	r1, [sp, #12]
 8008342:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8008346:	9102      	str	r1, [sp, #8]
 8008348:	9201      	str	r2, [sp, #4]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	4633      	mov	r3, r6
 8008350:	4a09      	ldr	r2, [pc, #36]	; (8008378 <AT_ESP8266_ND+0x1a78>)
 8008352:	4629      	mov	r1, r5
 8008354:	4620      	mov	r0, r4
 8008356:	f006 faa7 	bl	800e8a8 <FT_String_ND>
 800835a:	4603      	mov	r3, r0
 800835c:	2b01      	cmp	r3, #1
 800835e:	d10d      	bne.n	800837c <AT_ESP8266_ND+0x1a7c>
				{
					AT_decode=at_fail;
 8008360:	2303      	movs	r3, #3
 8008362:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8008366:	e05a      	b.n	800841e <AT_ESP8266_ND+0x1b1e>
 8008368:	08010b98 	.word	0x08010b98
 800836c:	08010ba8 	.word	0x08010ba8
 8008370:	08010bb8 	.word	0x08010bb8
 8008374:	08010bc8 	.word	0x08010bc8
 8008378:	08010bd4 	.word	0x08010bd4
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 800837c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008380:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2209      	movs	r2, #9
 8008388:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 800838c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008390:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800839a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800839e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80083a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80083b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80083c4:	603b      	str	r3, [r7, #0]
 80083c6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80083ca:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80083ce:	6812      	ldr	r2, [r2, #0]
 80083d0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80083d4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80083d8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80083dc:	6809      	ldr	r1, [r1, #0]
 80083de:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80083e2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80083e6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80083ea:	6800      	ldr	r0, [r0, #0]
 80083ec:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80083f0:	2300      	movs	r3, #0
 80083f2:	9305      	str	r3, [sp, #20]
 80083f4:	9004      	str	r0, [sp, #16]
 80083f6:	9103      	str	r1, [sp, #12]
 80083f8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80083fc:	9102      	str	r1, [sp, #8]
 80083fe:	9201      	str	r2, [sp, #4]
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	4633      	mov	r3, r6
 8008406:	4a78      	ldr	r2, [pc, #480]	; (80085e8 <AT_ESP8266_ND+0x1ce8>)
 8008408:	4629      	mov	r1, r5
 800840a:	4620      	mov	r0, r4
 800840c:	f006 fa4c 	bl	800e8a8 <FT_String_ND>
 8008410:	4603      	mov	r3, r0
 8008412:	2b01      	cmp	r3, #1
 8008414:	d103      	bne.n	800841e <AT_ESP8266_ND+0x1b1e>
					{
					AT_decode=at_busy_p;
 8008416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800841a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 800841e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008422:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800842c:	3b01      	subs	r3, #1
 800842e:	2b08      	cmp	r3, #8
 8008430:	f201 84d7 	bhi.w	8009de2 <AT_ESP8266_ND+0x34e2>
 8008434:	a201      	add	r2, pc, #4	; (adr r2, 800843c <AT_ESP8266_ND+0x1b3c>)
 8008436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843a:	bf00      	nop
 800843c:	08008461 	.word	0x08008461
 8008440:	080085f1 	.word	0x080085f1
 8008444:	08008873 	.word	0x08008873
 8008448:	080089f1 	.word	0x080089f1
 800844c:	08008bc9 	.word	0x08008bc9
 8008450:	08008e9d 	.word	0x08008e9d
 8008454:	0800915d 	.word	0x0800915d
 8008458:	08009685 	.word	0x08009685
 800845c:	0800985b 	.word	0x0800985b
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008460:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008464:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008470:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008474:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800847e:	2b01      	cmp	r3, #1
 8008480:	d14f      	bne.n	8008522 <AT_ESP8266_ND+0x1c22>
 8008482:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008486:	2b01      	cmp	r3, #1
 8008488:	d04b      	beq.n	8008522 <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_error)
 800848a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800848e:	2b02      	cmp	r3, #2
 8008490:	d047      	beq.n	8008522 <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_restart)
 8008492:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008496:	2b04      	cmp	r3, #4
 8008498:	d043      	beq.n	8008522 <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_tcp_enviado_ok))
 800849a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800849e:	2b13      	cmp	r3, #19
 80084a0:	d03f      	beq.n	8008522 <AT_ESP8266_ND+0x1c22>
						{
						a->_pasos=0;
 80084a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80084b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2201      	movs	r2, #1
 80084be:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 80084c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80084d0:	4620      	mov	r0, r4
 80084d2:	f7f7 fe8f 	bl	80001f4 <strlen>
 80084d6:	4603      	mov	r3, r0
 80084d8:	4423      	add	r3, r4
 80084da:	4a44      	ldr	r2, [pc, #272]	; (80085ec <AT_ESP8266_ND+0x1cec>)
 80084dc:	461c      	mov	r4, r3
 80084de:	4613      	mov	r3, r2
 80084e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80084e2:	6020      	str	r0, [r4, #0]
 80084e4:	6061      	str	r1, [r4, #4]
 80084e6:	60a2      	str	r2, [r4, #8]
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 80084ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7f7 fe7a 	bl	80001f4 <strlen>
 8008500:	4603      	mov	r3, r0
 8008502:	461a      	mov	r2, r3
 8008504:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008508:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 8008512:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008516:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2264      	movs	r2, #100	; 0x64
 800851e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 8008522:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008526:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008530:	1c5a      	adds	r2, r3, #1
 8008532:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008536:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 8008540:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008544:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800854e:	2b00      	cmp	r3, #0
 8008550:	d11b      	bne.n	800858a <AT_ESP8266_ND+0x1c8a>
 8008552:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008556:	2b01      	cmp	r3, #1
 8008558:	d023      	beq.n	80085a2 <AT_ESP8266_ND+0x1ca2>
 800855a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800855e:	2b1c      	cmp	r3, #28
 8008560:	d01f      	beq.n	80085a2 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_error)
 8008562:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008566:	2b02      	cmp	r3, #2
 8008568:	d01b      	beq.n	80085a2 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_restart)
 800856a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800856e:	2b04      	cmp	r3, #4
 8008570:	d017      	beq.n	80085a2 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_connected)
 8008572:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008576:	2b0b      	cmp	r3, #11
 8008578:	d013      	beq.n	80085a2 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_gotip)
 800857a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800857e:	2b0c      	cmp	r3, #12
 8008580:	d00f      	beq.n	80085a2 <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_tcp_enviado_ok)))
 8008582:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008586:	2b13      	cmp	r3, #19
 8008588:	d00b      	beq.n	80085a2 <AT_ESP8266_ND+0x1ca2>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 800858a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800858e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008598:	f241 3288 	movw	r2, #5000	; 0x1388
 800859c:	4293      	cmp	r3, r2
 800859e:	f341 842a 	ble.w	8009df6 <AT_ESP8266_ND+0x34f6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80085a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80085b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80085b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2200      	movs	r2, #0
 80085c0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80085c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80085d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2200      	movs	r2, #0
 80085e0:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 80085e4:	f001 bc07 	b.w	8009df6 <AT_ESP8266_ND+0x34f6>
 80085e8:	08010be0 	.word	0x08010be0
 80085ec:	08010bec 	.word	0x08010bec
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80085f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008600:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008604:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800860e:	2b01      	cmp	r3, #1
 8008610:	f040 80c8 	bne.w	80087a4 <AT_ESP8266_ND+0x1ea4>
 8008614:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008618:	2b01      	cmp	r3, #1
 800861a:	f000 80c3 	beq.w	80087a4 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_error)
 800861e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008622:	2b02      	cmp	r3, #2
 8008624:	f000 80be 	beq.w	80087a4 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_fail)
 8008628:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800862c:	2b03      	cmp	r3, #3
 800862e:	f000 80b9 	beq.w	80087a4 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_restart)
 8008632:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008636:	2b04      	cmp	r3, #4
 8008638:	f000 80b4 	beq.w	80087a4 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_disconnect)
 800863c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008640:	2b0a      	cmp	r3, #10
 8008642:	f000 80af 	beq.w	80087a4 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_connected)
 8008646:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800864a:	2b0b      	cmp	r3, #11
 800864c:	f000 80aa 	beq.w	80087a4 <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_gotip))
 8008650:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008654:	2b0c      	cmp	r3, #12
 8008656:	f000 80a5 	beq.w	80087a4 <AT_ESP8266_ND+0x1ea4>
						{
						a->_pasos=0;
 800865a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800865e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2200      	movs	r2, #0
 8008666:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 800866a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800866e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2201      	movs	r2, #1
 8008676:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 800867a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800867e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008688:	4620      	mov	r0, r4
 800868a:	f7f7 fdb3 	bl	80001f4 <strlen>
 800868e:	4603      	mov	r3, r0
 8008690:	4423      	add	r3, r4
 8008692:	49d5      	ldr	r1, [pc, #852]	; (80089e8 <AT_ESP8266_ND+0x20e8>)
 8008694:	461a      	mov	r2, r3
 8008696:	460b      	mov	r3, r1
 8008698:	cb03      	ldmia	r3!, {r0, r1}
 800869a:	6010      	str	r0, [r2, #0]
 800869c:	6051      	str	r1, [r2, #4]
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 80086a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80086b0:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80086b4:	2201      	movs	r2, #1
 80086b6:	4618      	mov	r0, r3
 80086b8:	f006 fedf 	bl	800f47a <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 80086bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80086ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	1d9d      	adds	r5, r3, #6
 80086d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3306      	adds	r3, #6
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7f7 fd86 	bl	80001f4 <strlen>
 80086e8:	4603      	mov	r3, r0
 80086ea:	461a      	mov	r2, r3
 80086ec:	4629      	mov	r1, r5
 80086ee:	4620      	mov	r0, r4
 80086f0:	f006 fec3 	bl	800f47a <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 80086f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008702:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008706:	4618      	mov	r0, r3
 8008708:	f7f7 fd74 	bl	80001f4 <strlen>
 800870c:	4602      	mov	r2, r0
 800870e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008712:	4619      	mov	r1, r3
 8008714:	4620      	mov	r0, r4
 8008716:	f006 feb0 	bl	800f47a <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 800871a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800871e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008728:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800872c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8008736:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800873a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3326      	adds	r3, #38	; 0x26
 8008742:	4618      	mov	r0, r3
 8008744:	f7f7 fd56 	bl	80001f4 <strlen>
 8008748:	4603      	mov	r3, r0
 800874a:	461a      	mov	r2, r3
 800874c:	4629      	mov	r1, r5
 800874e:	4620      	mov	r0, r4
 8008750:	f006 fe93 	bl	800f47a <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 8008754:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008758:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008762:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8008766:	2203      	movs	r2, #3
 8008768:	4618      	mov	r0, r3
 800876a:	f006 fe86 	bl	800f47a <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 800876e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008772:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800877c:	4618      	mov	r0, r3
 800877e:	f7f7 fd39 	bl	80001f4 <strlen>
 8008782:	4603      	mov	r3, r0
 8008784:	461a      	mov	r2, r3
 8008786:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800878a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 8008794:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008798:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	22c8      	movs	r2, #200	; 0xc8
 80087a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 80087a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80087b2:	1c5a      	adds	r2, r3, #1
 80087b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 80087c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d11b      	bne.n	800880c <AT_ESP8266_ND+0x1f0c>
 80087d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d023      	beq.n	8008824 <AT_ESP8266_ND+0x1f24>
 80087dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d01f      	beq.n	8008824 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_fail)
 80087e4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087e8:	2b03      	cmp	r3, #3
 80087ea:	d01b      	beq.n	8008824 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_restart)
 80087ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087f0:	2b04      	cmp	r3, #4
 80087f2:	d017      	beq.n	8008824 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_disconnect)
 80087f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087f8:	2b0a      	cmp	r3, #10
 80087fa:	d013      	beq.n	8008824 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_connected)
 80087fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008800:	2b0b      	cmp	r3, #11
 8008802:	d00f      	beq.n	8008824 <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_gotip)))
 8008804:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008808:	2b0c      	cmp	r3, #12
 800880a:	d00b      	beq.n	8008824 <AT_ESP8266_ND+0x1f24>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 800880c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008810:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 800881a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800881e:	4293      	cmp	r3, r2
 8008820:	f341 82eb 	ble.w	8009dfa <AT_ESP8266_ND+0x34fa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008824:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008828:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 8008836:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800883a:	2b0a      	cmp	r3, #10
 800883c:	d00f      	beq.n	800885e <AT_ESP8266_ND+0x1f5e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 800883e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008842:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2200      	movs	r2, #0
 800884a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 800884e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008852:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2200      	movs	r2, #0
 800885a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 800885e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008862:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2200      	movs	r2, #0
 800886a:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 800886e:	f001 bac4 	b.w	8009dfa <AT_ESP8266_ND+0x34fa>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008872:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008876:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 8008882:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008886:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008890:	2b01      	cmp	r3, #1
 8008892:	d14d      	bne.n	8008930 <AT_ESP8266_ND+0x2030>
 8008894:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008898:	2b04      	cmp	r3, #4
 800889a:	d049      	beq.n	8008930 <AT_ESP8266_ND+0x2030>
 800889c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088a0:	2b0a      	cmp	r3, #10
 80088a2:	d045      	beq.n	8008930 <AT_ESP8266_ND+0x2030>
 80088a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088a8:	2b0d      	cmp	r3, #13
 80088aa:	d041      	beq.n	8008930 <AT_ESP8266_ND+0x2030>
						{
						a->_pasos=0;
 80088ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80088bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"));
 80088cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80088da:	4620      	mov	r0, r4
 80088dc:	f7f7 fc8a 	bl	80001f4 <strlen>
 80088e0:	4603      	mov	r3, r0
 80088e2:	4423      	add	r3, r4
 80088e4:	4941      	ldr	r1, [pc, #260]	; (80089ec <AT_ESP8266_ND+0x20ec>)
 80088e6:	461a      	mov	r2, r3
 80088e8:	460b      	mov	r3, r1
 80088ea:	cb03      	ldmia	r3!, {r0, r1}
 80088ec:	6010      	str	r0, [r2, #0]
 80088ee:	6051      	str	r1, [r2, #4]
 80088f0:	8819      	ldrh	r1, [r3, #0]
 80088f2:	789b      	ldrb	r3, [r3, #2]
 80088f4:	8111      	strh	r1, [r2, #8]
 80088f6:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 80088f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008906:	4618      	mov	r0, r3
 8008908:	f7f7 fc74 	bl	80001f4 <strlen>
 800890c:	4603      	mov	r3, r0
 800890e:	461a      	mov	r2, r3
 8008910:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008914:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 800891e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008922:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800892c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008930:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008934:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800893e:	1c5a      	adds	r2, r3, #1
 8008940:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008944:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 800894e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008952:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800895c:	2b00      	cmp	r3, #0
 800895e:	d113      	bne.n	8008988 <AT_ESP8266_ND+0x2088>
 8008960:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008964:	2b0a      	cmp	r3, #10
 8008966:	d01b      	beq.n	80089a0 <AT_ESP8266_ND+0x20a0>
 8008968:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800896c:	2b0b      	cmp	r3, #11
 800896e:	d017      	beq.n	80089a0 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_wifi_gotip)
 8008970:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008974:	2b0c      	cmp	r3, #12
 8008976:	d013      	beq.n	80089a0 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_restart	)
 8008978:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800897c:	2b04      	cmp	r3, #4
 800897e:	d00f      	beq.n	80089a0 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_deconectar_ok )))
 8008980:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008984:	2b0d      	cmp	r3, #13
 8008986:	d00b      	beq.n	80089a0 <AT_ESP8266_ND+0x20a0>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008988:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800898c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008996:	f241 3288 	movw	r2, #5000	; 0x1388
 800899a:	4293      	cmp	r3, r2
 800899c:	f341 822f 	ble.w	8009dfe <AT_ESP8266_ND+0x34fe>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80089a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80089ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80089b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2200      	movs	r2, #0
 80089be:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80089c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80089d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2200      	movs	r2, #0
 80089de:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 80089e2:	f001 ba0c 	b.w	8009dfe <AT_ESP8266_ND+0x34fe>
 80089e6:	bf00      	nop
 80089e8:	08010bfc 	.word	0x08010bfc
 80089ec:	08010c08 	.word	0x08010c08
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80089f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 8008a00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d16b      	bne.n	8008aea <AT_ESP8266_ND+0x21ea>
 8008a12:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a16:	2b04      	cmp	r3, #4
 8008a18:	d067      	beq.n	8008aea <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_ok)
 8008a1a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d063      	beq.n	8008aea <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_error))
 8008a22:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d05f      	beq.n	8008aea <AT_ESP8266_ND+0x21ea>
						{
						a->_pasos=0;
 8008a2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008a3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 8008a4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d115      	bne.n	8008a88 <AT_ESP8266_ND+0x2188>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 8008a5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f7f7 fbc2 	bl	80001f4 <strlen>
 8008a70:	4603      	mov	r3, r0
 8008a72:	4423      	add	r3, r4
 8008a74:	4a52      	ldr	r2, [pc, #328]	; (8008bc0 <AT_ESP8266_ND+0x22c0>)
 8008a76:	461c      	mov	r4, r3
 8008a78:	4613      	mov	r3, r2
 8008a7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a7c:	6020      	str	r0, [r4, #0]
 8008a7e:	6061      	str	r1, [r4, #4]
 8008a80:	60a2      	str	r2, [r4, #8]
 8008a82:	881b      	ldrh	r3, [r3, #0]
 8008a84:	81a3      	strh	r3, [r4, #12]
 8008a86:	e014      	b.n	8008ab2 <AT_ESP8266_ND+0x21b2>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8008a88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008a96:	4620      	mov	r0, r4
 8008a98:	f7f7 fbac 	bl	80001f4 <strlen>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	4423      	add	r3, r4
 8008aa0:	4a48      	ldr	r2, [pc, #288]	; (8008bc4 <AT_ESP8266_ND+0x22c4>)
 8008aa2:	461c      	mov	r4, r3
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008aa8:	6020      	str	r0, [r4, #0]
 8008aaa:	6061      	str	r1, [r4, #4]
 8008aac:	60a2      	str	r2, [r4, #8]
 8008aae:	881b      	ldrh	r3, [r3, #0]
 8008ab0:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008ab2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ab6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7f7 fb97 	bl	80001f4 <strlen>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	461a      	mov	r2, r3
 8008aca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ace:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 8008ad8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008adc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008ae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008aea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008af8:	1c5a      	adds	r2, r3, #1
 8008afa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008afe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008b08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d123      	bne.n	8008b62 <AT_ESP8266_ND+0x2262>
 8008b1a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d02b      	beq.n	8008b7a <AT_ESP8266_ND+0x227a>
 8008b22:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b26:	2b0b      	cmp	r3, #11
 8008b28:	d027      	beq.n	8008b7a <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_wifi_gotip)
 8008b2a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b2e:	2b0c      	cmp	r3, #12
 8008b30:	d023      	beq.n	8008b7a <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_restart)
 8008b32:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	d01f      	beq.n	8008b7a <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_error)
 8008b3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d01b      	beq.n	8008b7a <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_ok)
 8008b42:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b46:	2b07      	cmp	r3, #7
 8008b48:	d017      	beq.n	8008b7a <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_ok)
 8008b4a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b4e:	2b08      	cmp	r3, #8
 8008b50:	d013      	beq.n	8008b7a <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_err)
 8008b52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b56:	2b1e      	cmp	r3, #30
 8008b58:	d00f      	beq.n	8008b7a <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_err)))
 8008b5a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b5e:	2b1f      	cmp	r3, #31
 8008b60:	d00b      	beq.n	8008b7a <AT_ESP8266_ND+0x227a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008b62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b74:	4293      	cmp	r3, r2
 8008b76:	f341 8144 	ble.w	8009e02 <AT_ESP8266_ND+0x3502>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008b7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008b8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008b9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ba0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008bac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008bbc:	f001 b921 	b.w	8009e02 <AT_ESP8266_ND+0x3502>
 8008bc0:	08010c14 	.word	0x08010c14
 8008bc4:	08010c24 	.word	0x08010c24
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008bc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8008bd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	f040 80f3 	bne.w	8008dd2 <AT_ESP8266_ND+0x24d2>
 8008bec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bf0:	2b04      	cmp	r3, #4
 8008bf2:	f000 80ee 	beq.w	8008dd2 <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_ok)
 8008bf6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	f000 80e9 	beq.w	8008dd2 <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_error)
 8008c00:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	f000 80e4 	beq.w	8008dd2 <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_err)
 8008c0a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c0e:	2b21      	cmp	r3, #33	; 0x21
 8008c10:	f000 80df 	beq.w	8008dd2 <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_ok))
 8008c14:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c18:	2b1b      	cmp	r3, #27
 8008c1a:	f000 80da 	beq.w	8008dd2 <AT_ESP8266_ND+0x24d2>
						{
						a->_pasos=0;
 8008c1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008c2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8008c3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008c4c:	4620      	mov	r0, r4
 8008c4e:	f7f7 fad1 	bl	80001f4 <strlen>
 8008c52:	4603      	mov	r3, r0
 8008c54:	4423      	add	r3, r4
 8008c56:	4990      	ldr	r1, [pc, #576]	; (8008e98 <AT_ESP8266_ND+0x2598>)
 8008c58:	461a      	mov	r2, r3
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	cb03      	ldmia	r3!, {r0, r1}
 8008c5e:	6010      	str	r0, [r2, #0]
 8008c60:	6051      	str	r1, [r2, #4]
 8008c62:	8819      	ldrh	r1, [r3, #0]
 8008c64:	789b      	ldrb	r3, [r3, #2]
 8008c66:	8111      	strh	r1, [r2, #8]
 8008c68:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 8008c6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008c78:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f006 fbfb 	bl	800f47a <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008c84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008c92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8008ca0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ca4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	334c      	adds	r3, #76	; 0x4c
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7f7 faa1 	bl	80001f4 <strlen>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f006 fbde 	bl	800f47a <strncat>
						strncat(a->_uart2snd,separador,3);
 8008cbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ccc:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008cd0:	2203      	movs	r2, #3
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f006 fbd1 	bl	800f47a <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008cd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008ce6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8008cf4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cf8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	3362      	adds	r3, #98	; 0x62
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7f7 fa77 	bl	80001f4 <strlen>
 8008d06:	4603      	mov	r3, r0
 8008d08:	461a      	mov	r2, r3
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f006 fbb4 	bl	800f47a <strncat>
						strncat(a->_uart2snd,separador,3);
 8008d12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d20:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008d24:	2203      	movs	r2, #3
 8008d26:	4618      	mov	r0, r3
 8008d28:	f006 fba7 	bl	800f47a <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008d2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008d3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8008d48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3372      	adds	r3, #114	; 0x72
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7f7 fa4d 	bl	80001f4 <strlen>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	4629      	mov	r1, r5
 8008d60:	4620      	mov	r0, r4
 8008d62:	f006 fb8a 	bl	800f47a <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008d66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d74:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008d78:	2201      	movs	r2, #1
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f006 fb7d 	bl	800f47a <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008d80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d8e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008d92:	2202      	movs	r2, #2
 8008d94:	4618      	mov	r0, r3
 8008d96:	f006 fb70 	bl	800f47a <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008d9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7f7 fa23 	bl	80001f4 <strlen>
 8008dae:	4603      	mov	r3, r0
 8008db0:	461a      	mov	r2, r3
 8008db2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008db6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008dc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008dd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008de6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008df0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008df4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d11b      	bne.n	8008e3a <AT_ESP8266_ND+0x253a>
 8008e02:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d023      	beq.n	8008e52 <AT_ESP8266_ND+0x2552>
 8008e0a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e0e:	2b0b      	cmp	r3, #11
 8008e10:	d01f      	beq.n	8008e52 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_wifi_gotip)
 8008e12:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e16:	2b0c      	cmp	r3, #12
 8008e18:	d01b      	beq.n	8008e52 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_restart)
 8008e1a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e1e:	2b04      	cmp	r3, #4
 8008e20:	d017      	beq.n	8008e52 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_error)
 8008e22:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d013      	beq.n	8008e52 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_err)
 8008e2a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e2e:	2b21      	cmp	r3, #33	; 0x21
 8008e30:	d00f      	beq.n	8008e52 <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_ok)))
 8008e32:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e36:	2b1b      	cmp	r3, #27
 8008e38:	d00b      	beq.n	8008e52 <AT_ESP8266_ND+0x2552>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008e3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	f340 87da 	ble.w	8009e06 <AT_ESP8266_ND+0x3506>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008e52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008e60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008e64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008e74:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e78:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008e84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008e94:	f000 bfb7 	b.w	8009e06 <AT_ESP8266_ND+0x3506>
 8008e98:	08010b14 	.word	0x08010b14
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008e9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ea0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008eac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008eb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	f040 80e2 	bne.w	8009084 <AT_ESP8266_ND+0x2784>
 8008ec0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ec4:	2b0b      	cmp	r3, #11
 8008ec6:	f000 80dd 	beq.w	8009084 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_wifi_gotip)
 8008eca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ece:	2b0c      	cmp	r3, #12
 8008ed0:	f000 80d8 	beq.w	8009084 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008ed4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ed8:	2b0e      	cmp	r3, #14
 8008eda:	f000 80d3 	beq.w	8009084 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_conectado)
 8008ede:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ee2:	2b0f      	cmp	r3, #15
 8008ee4:	f000 80ce 	beq.w	8009084 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_desconectado)
 8008ee8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008eec:	2b10      	cmp	r3, #16
 8008eee:	f000 80c9 	beq.w	8009084 <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_error))
 8008ef2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	f000 80c4 	beq.w	8009084 <AT_ESP8266_ND+0x2784>
						{
						a->_pasos=0;
 8008efc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008f0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008f1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f7f7 f962 	bl	80001f4 <strlen>
 8008f30:	4603      	mov	r3, r0
 8008f32:	4423      	add	r3, r4
 8008f34:	4aa5      	ldr	r2, [pc, #660]	; (80091cc <AT_ESP8266_ND+0x28cc>)
 8008f36:	461c      	mov	r4, r3
 8008f38:	4613      	mov	r3, r2
 8008f3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f3c:	6020      	str	r0, [r4, #0]
 8008f3e:	6061      	str	r1, [r4, #4]
 8008f40:	60a2      	str	r2, [r4, #8]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008f46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008f54:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008f58:	2201      	movs	r2, #1
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f006 fa8d 	bl	800f47a <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008f60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f7f7 f940 	bl	80001f4 <strlen>
 8008f74:	4603      	mov	r3, r0
 8008f76:	4423      	add	r3, r4
 8008f78:	4a95      	ldr	r2, [pc, #596]	; (80091d0 <AT_ESP8266_ND+0x28d0>)
 8008f7a:	6810      	ldr	r0, [r2, #0]
 8008f7c:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008f7e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f82:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008f8c:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008f90:	2203      	movs	r2, #3
 8008f92:	4618      	mov	r0, r3
 8008f94:	f006 fa71 	bl	800f47a <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008f98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008fa6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008faa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8008fb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3336      	adds	r3, #54	; 0x36
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7f7 f917 	bl	80001f4 <strlen>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	461a      	mov	r2, r3
 8008fca:	4629      	mov	r1, r5
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f006 fa54 	bl	800f47a <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008fd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008fe0:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008fe4:	2202      	movs	r2, #2
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f006 fa47 	bl	800f47a <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8008fec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ff0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008ffa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ffe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8009008:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800900c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3346      	adds	r3, #70	; 0x46
 8009014:	4618      	mov	r0, r3
 8009016:	f7f7 f8ed 	bl	80001f4 <strlen>
 800901a:	4603      	mov	r3, r0
 800901c:	461a      	mov	r2, r3
 800901e:	4629      	mov	r1, r5
 8009020:	4620      	mov	r0, r4
 8009022:	f006 fa2a 	bl	800f47a <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009026:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800902a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009034:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009038:	4618      	mov	r0, r3
 800903a:	f7f7 f8db 	bl	80001f4 <strlen>
 800903e:	4602      	mov	r2, r0
 8009040:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009044:	4619      	mov	r1, r3
 8009046:	4620      	mov	r0, r4
 8009048:	f006 fa17 	bl	800f47a <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 800904c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009050:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800905a:	4618      	mov	r0, r3
 800905c:	f7f7 f8ca 	bl	80001f4 <strlen>
 8009060:	4603      	mov	r3, r0
 8009062:	461a      	mov	r2, r3
 8009064:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009068:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 8009072:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009076:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8009084:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009088:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009098:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 80090a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d124      	bne.n	80090fe <AT_ESP8266_ND+0x27fe>
 80090b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090b8:	2b0a      	cmp	r3, #10
 80090ba:	d02c      	beq.n	8009116 <AT_ESP8266_ND+0x2816>
 80090bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090c0:	2b0b      	cmp	r3, #11
 80090c2:	d028      	beq.n	8009116 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_fail)
 80090c4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d024      	beq.n	8009116 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_wifi_gotip)
 80090cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090d0:	2b0c      	cmp	r3, #12
 80090d2:	d020      	beq.n	8009116 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 80090d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090d8:	2b0e      	cmp	r3, #14
 80090da:	d01c      	beq.n	8009116 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_tcp_conectado)
 80090dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090e0:	2b0f      	cmp	r3, #15
 80090e2:	d018      	beq.n	8009116 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_tcp_desconectado)
 80090e4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090e8:	2b10      	cmp	r3, #16
 80090ea:	d014      	beq.n	8009116 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_error)
 80090ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d010      	beq.n	8009116 <AT_ESP8266_ND+0x2816>
																		  ||(AT_decode==at_busy_p)))
 80090f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090fc:	d00b      	beq.n	8009116 <AT_ESP8266_ND+0x2816>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80090fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009102:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800910c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009110:	4293      	cmp	r3, r2
 8009112:	f340 867a 	ble.w	8009e0a <AT_ESP8266_ND+0x350a>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8009116:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800911a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009128:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800912c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2200      	movs	r2, #0
 8009134:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8009138:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800913c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2200      	movs	r2, #0
 8009144:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8009148:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800914c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2200      	movs	r2, #0
 8009154:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009158:	f000 be57 	b.w	8009e0a <AT_ESP8266_ND+0x350a>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 800915c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009160:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8009164:	2200      	movs	r2, #0
 8009166:	601a      	str	r2, [r3, #0]
 8009168:	2200      	movs	r2, #0
 800916a:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 800916c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009170:	2b10      	cmp	r3, #16
 8009172:	d007      	beq.n	8009184 <AT_ESP8266_ND+0x2884>
 8009174:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009178:	2b0a      	cmp	r3, #10
 800917a:	d003      	beq.n	8009184 <AT_ESP8266_ND+0x2884>
 800917c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009180:	2b03      	cmp	r3, #3
 8009182:	d127      	bne.n	80091d4 <AT_ESP8266_ND+0x28d4>
				{
					a->_estado=AT_decode;
 8009184:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009188:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009196:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800919a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 80091a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2200      	movs	r2, #0
 80091b2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 80091b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80091c6:	f000 be22 	b.w	8009e0e <AT_ESP8266_ND+0x350e>
 80091ca:	bf00      	nop
 80091cc:	08010c34 	.word	0x08010c34
 80091d0:	08010c44 	.word	0x08010c44
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80091d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	f040 80d1 	bne.w	800938a <AT_ESP8266_ND+0x2a8a>
 80091e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f040 80c7 	bne.w	800938a <AT_ESP8266_ND+0x2a8a>
										a->_ejecucion=1;
 80091fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009200:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2201      	movs	r2, #1
 8009208:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 800920c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009210:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2218      	movs	r2, #24
 8009218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800921c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009220:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 800922c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009230:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009240:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 800924a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800924e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2200      	movs	r2, #0
 8009256:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 800925a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800925e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 800926a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800926e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009278:	4620      	mov	r0, r4
 800927a:	f7f6 ffbb 	bl	80001f4 <strlen>
 800927e:	4603      	mov	r3, r0
 8009280:	4423      	add	r3, r4
 8009282:	4ac0      	ldr	r2, [pc, #768]	; (8009584 <AT_ESP8266_ND+0x2c84>)
 8009284:	461c      	mov	r4, r3
 8009286:	4613      	mov	r3, r2
 8009288:	cb07      	ldmia	r3!, {r0, r1, r2}
 800928a:	6020      	str	r0, [r4, #0]
 800928c:	6061      	str	r1, [r4, #4]
 800928e:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8009290:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009294:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800929e:	f107 0214 	add.w	r2, r7, #20
 80092a2:	4611      	mov	r1, r2
 80092a4:	4618      	mov	r0, r3
 80092a6:	f005 fe47 	bl	800ef38 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 80092aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80092b8:	f107 0314 	add.w	r3, r7, #20
 80092bc:	4618      	mov	r0, r3
 80092be:	f7f6 ff99 	bl	80001f4 <strlen>
 80092c2:	4602      	mov	r2, r0
 80092c4:	f107 0314 	add.w	r3, r7, #20
 80092c8:	4619      	mov	r1, r3
 80092ca:	4620      	mov	r0, r4
 80092cc:	f006 f8d5 	bl	800f47a <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 80092d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 80092de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80092ec:	4619      	mov	r1, r3
 80092ee:	4610      	mov	r0, r2
 80092f0:	f006 f9a4 	bl	800f63c <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80092f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009302:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009306:	2202      	movs	r2, #2
 8009308:	4618      	mov	r0, r3
 800930a:	f006 f8b6 	bl	800f47a <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 800930e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009312:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800931c:	4618      	mov	r0, r3
 800931e:	f7f6 ff69 	bl	80001f4 <strlen>
 8009322:	4603      	mov	r3, r0
 8009324:	461a      	mov	r2, r3
 8009326:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800932a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009334:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009338:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8009342:	4620      	mov	r0, r4
 8009344:	f7f6 ff56 	bl	80001f4 <strlen>
 8009348:	4603      	mov	r3, r0
 800934a:	4423      	add	r3, r4
 800934c:	4a8e      	ldr	r2, [pc, #568]	; (8009588 <AT_ESP8266_ND+0x2c88>)
 800934e:	461c      	mov	r4, r3
 8009350:	4613      	mov	r3, r2
 8009352:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009354:	6020      	str	r0, [r4, #0]
 8009356:	6061      	str	r1, [r4, #4]
 8009358:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 800935a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800935e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800936e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 8009378:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800937c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8009386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 800938a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800938e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009398:	1c5a      	adds	r2, r3, #1
 800939a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800939e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 80093a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f040 80a6 	bne.w	8009508 <AT_ESP8266_ND+0x2c08>
 80093bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093c0:	2b13      	cmp	r3, #19
 80093c2:	f000 80a1 	beq.w	8009508 <AT_ESP8266_ND+0x2c08>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 80093c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f203 6294 	addw	r2, r3, #1684	; 0x694
 80093d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 80093e2:	4619      	mov	r1, r3
 80093e4:	4610      	mov	r0, r2
 80093e6:	f7f6 fefb 	bl	80001e0 <strcmp>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d01b      	beq.n	8009428 <AT_ESP8266_ND+0x2b28>
 80093f0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d017      	beq.n	8009428 <AT_ESP8266_ND+0x2b28>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 80093f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093fc:	2b14      	cmp	r3, #20
 80093fe:	d013      	beq.n	8009428 <AT_ESP8266_ND+0x2b28>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009400:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009404:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800940e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009412:	4293      	cmp	r3, r2
 8009414:	dd78      	ble.n	8009508 <AT_ESP8266_ND+0x2c08>
 8009416:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800941a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009424:	2b01      	cmp	r3, #1
 8009426:	d16f      	bne.n	8009508 <AT_ESP8266_ND+0x2c08>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8009428:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800942c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009436:	f241 3288 	movw	r2, #5000	; 0x1388
 800943a:	4293      	cmp	r3, r2
 800943c:	dd0e      	ble.n	800945c <AT_ESP8266_ND+0x2b5c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 800943e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009442:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 800944c:	1c5a      	adds	r2, r3, #1
 800944e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009452:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 800945c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009460:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009470:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 800947a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800947e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009488:	1c5a      	adds	r2, r3, #1
 800948a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800948e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009498:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800949c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 80094a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f203 4094 	addw	r0, r3, #1172	; 0x494
 80094b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f503 7125 	add.w	r1, r3, #660	; 0x294
 80094c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80094d2:	2361      	movs	r3, #97	; 0x61
 80094d4:	9300      	str	r3, [sp, #0]
 80094d6:	2301      	movs	r3, #1
 80094d8:	f005 fdd8 	bl	800f08c <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 80094dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80094ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 80094f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2200      	movs	r2, #0
 8009504:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 8009508:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800950c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009516:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800951a:	f040 8478 	bne.w	8009e0e <AT_ESP8266_ND+0x350e>
 800951e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009522:	2b13      	cmp	r3, #19
 8009524:	d032      	beq.n	800958c <AT_ESP8266_ND+0x2c8c>
 8009526:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800952a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009534:	f241 3288 	movw	r2, #5000	; 0x1388
 8009538:	4293      	cmp	r3, r2
 800953a:	dc27      	bgt.n	800958c <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_wifi_disconnect)
 800953c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009540:	2b0a      	cmp	r3, #10
 8009542:	d023      	beq.n	800958c <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_fail)
 8009544:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009548:	2b03      	cmp	r3, #3
 800954a:	d01f      	beq.n	800958c <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_wifi_connected)
 800954c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009550:	2b0b      	cmp	r3, #11
 8009552:	d01b      	beq.n	800958c <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_wifi_gotip)
 8009554:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009558:	2b0c      	cmp	r3, #12
 800955a:	d017      	beq.n	800958c <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_tcp_desconectado)
 800955c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009560:	2b10      	cmp	r3, #16
 8009562:	d013      	beq.n	800958c <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_tcp_snd_err)
 8009564:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009568:	2b11      	cmp	r3, #17
 800956a:	d00f      	beq.n	800958c <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_tcp_enviado_error)
 800956c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009570:	2b12      	cmp	r3, #18
 8009572:	d00b      	beq.n	800958c <AT_ESP8266_ND+0x2c8c>
																				 ||(AT_decode==at_busy_p)))
 8009574:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009578:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800957c:	f040 8447 	bne.w	8009e0e <AT_ESP8266_ND+0x350e>
 8009580:	e004      	b.n	800958c <AT_ESP8266_ND+0x2c8c>
 8009582:	bf00      	nop
 8009584:	08010c48 	.word	0x08010c48
 8009588:	08010c54 	.word	0x08010c54
									a->_debug_count5++;
 800958c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009590:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 80095aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80095b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095bc:	4293      	cmp	r3, r2
 80095be:	dd25      	ble.n	800960c <AT_ESP8266_ND+0x2d0c>
										a->_debug_count8++;
 80095c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 80095de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80095ec:	1c5a      	adds	r2, r3, #1
 80095ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 80095fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009600:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2200      	movs	r2, #0
 8009608:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 800960c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009610:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800961a:	2b02      	cmp	r3, #2
 800961c:	dd10      	ble.n	8009640 <AT_ESP8266_ND+0x2d40>
 800961e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009622:	2b10      	cmp	r3, #16
 8009624:	d00c      	beq.n	8009640 <AT_ESP8266_ND+0x2d40>
 8009626:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800962a:	2b0a      	cmp	r3, #10
 800962c:	d008      	beq.n	8009640 <AT_ESP8266_ND+0x2d40>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 800962e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009632:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	220f      	movs	r2, #15
 800963a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800963e:	e008      	b.n	8009652 <AT_ESP8266_ND+0x2d52>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009640:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009644:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800964e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009652:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009656:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2200      	movs	r2, #0
 800965e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009662:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009666:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2200      	movs	r2, #0
 800966e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009672:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009676:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2200      	movs	r2, #0
 800967e:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009682:	e3c4      	b.n	8009e0e <AT_ESP8266_ND+0x350e>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009684:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009688:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2200      	movs	r2, #0
 8009690:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 8009694:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009698:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d16f      	bne.n	8009786 <AT_ESP8266_ND+0x2e86>
						{
						a->_pasos=0;
 80096a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80096b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 80096c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80096d4:	4620      	mov	r0, r4
 80096d6:	f7f6 fd8d 	bl	80001f4 <strlen>
 80096da:	4603      	mov	r3, r0
 80096dc:	4423      	add	r3, r4
 80096de:	4a7a      	ldr	r2, [pc, #488]	; (80098c8 <AT_ESP8266_ND+0x2fc8>)
 80096e0:	461c      	mov	r4, r3
 80096e2:	4615      	mov	r5, r2
 80096e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80096e6:	6020      	str	r0, [r4, #0]
 80096e8:	6061      	str	r1, [r4, #4]
 80096ea:	60a2      	str	r2, [r4, #8]
 80096ec:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 80096ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80096fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009700:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 800970a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800970e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	335c      	adds	r3, #92	; 0x5c
 8009716:	4618      	mov	r0, r3
 8009718:	f7f6 fd6c 	bl	80001f4 <strlen>
 800971c:	4603      	mov	r3, r0
 800971e:	461a      	mov	r2, r3
 8009720:	4629      	mov	r1, r5
 8009722:	4620      	mov	r0, r4
 8009724:	f005 fea9 	bl	800f47a <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009728:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800972c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009736:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800973a:	4618      	mov	r0, r3
 800973c:	f7f6 fd5a 	bl	80001f4 <strlen>
 8009740:	4602      	mov	r2, r0
 8009742:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009746:	4619      	mov	r1, r3
 8009748:	4620      	mov	r0, r4
 800974a:	f005 fe96 	bl	800f47a <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 800974e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009752:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800975c:	4618      	mov	r0, r3
 800975e:	f7f6 fd49 	bl	80001f4 <strlen>
 8009762:	4603      	mov	r3, r0
 8009764:	461a      	mov	r2, r3
 8009766:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800976a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 8009774:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009778:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 8009786:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800978a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009794:	1c5a      	adds	r2, r3, #1
 8009796:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800979a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80097a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d123      	bne.n	80097fe <AT_ESP8266_ND+0x2efe>
 80097b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097ba:	2b0a      	cmp	r3, #10
 80097bc:	d02b      	beq.n	8009816 <AT_ESP8266_ND+0x2f16>
 80097be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097c2:	2b0b      	cmp	r3, #11
 80097c4:	d027      	beq.n	8009816 <AT_ESP8266_ND+0x2f16>
 80097c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097ca:	2b0c      	cmp	r3, #12
 80097cc:	d023      	beq.n	8009816 <AT_ESP8266_ND+0x2f16>
 80097ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097d2:	2b0e      	cmp	r3, #14
 80097d4:	d01f      	beq.n	8009816 <AT_ESP8266_ND+0x2f16>
 80097d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097da:	2b0f      	cmp	r3, #15
 80097dc:	d01b      	beq.n	8009816 <AT_ESP8266_ND+0x2f16>
 80097de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097e2:	2b10      	cmp	r3, #16
 80097e4:	d017      	beq.n	8009816 <AT_ESP8266_ND+0x2f16>
 80097e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097ea:	2b15      	cmp	r3, #21
 80097ec:	d013      	beq.n	8009816 <AT_ESP8266_ND+0x2f16>
 80097ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097f2:	2b16      	cmp	r3, #22
 80097f4:	d00f      	beq.n	8009816 <AT_ESP8266_ND+0x2f16>
 80097f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097fa:	2b17      	cmp	r3, #23
 80097fc:	d00b      	beq.n	8009816 <AT_ESP8266_ND+0x2f16>
 80097fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009802:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800980c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009810:	4293      	cmp	r3, r2
 8009812:	f340 82fe 	ble.w	8009e12 <AT_ESP8266_ND+0x3512>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8009816:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800981a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009828:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800982c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2200      	movs	r2, #0
 8009834:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8009838:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800983c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2200      	movs	r2, #0
 8009844:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8009848:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800984c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2200      	movs	r2, #0
 8009854:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 8009858:	e2db      	b.n	8009e12 <AT_ESP8266_ND+0x3512>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 800985a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800985e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]
 8009866:	2200      	movs	r2, #0
 8009868:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_fail))
 800986a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800986e:	2b10      	cmp	r3, #16
 8009870:	d007      	beq.n	8009882 <AT_ESP8266_ND+0x2f82>
 8009872:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009876:	2b0a      	cmp	r3, #10
 8009878:	d003      	beq.n	8009882 <AT_ESP8266_ND+0x2f82>
 800987a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800987e:	2b03      	cmp	r3, #3
 8009880:	d124      	bne.n	80098cc <AT_ESP8266_ND+0x2fcc>
				{
					a->_estado=AT_decode;
 8009882:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009886:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009894:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009898:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2200      	movs	r2, #0
 80098a0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 80098a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 80098b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2200      	movs	r2, #0
 80098c0:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80098c4:	e2a7      	b.n	8009e16 <AT_ESP8266_ND+0x3516>
 80098c6:	bf00      	nop
 80098c8:	08010c60 	.word	0x08010c60
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80098cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80098da:	2b01      	cmp	r3, #1
 80098dc:	f040 8102 	bne.w	8009ae4 <AT_ESP8266_ND+0x31e4>
 80098e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	f040 80f8 	bne.w	8009ae4 <AT_ESP8266_ND+0x31e4>
										a->_ejecucion=1;
 80098f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2201      	movs	r2, #1
 8009900:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8009904:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009908:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2218      	movs	r2, #24
 8009910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009914:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009918:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2200      	movs	r2, #0
 8009920:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009924:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009928:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009932:	1c5a      	adds	r2, r3, #1
 8009934:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009938:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8009942:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009946:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2200      	movs	r2, #0
 800994e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8009952:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009956:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2200      	movs	r2, #0
 800995e:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 8009962:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009966:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009970:	4620      	mov	r0, r4
 8009972:	f7f6 fc3f 	bl	80001f4 <strlen>
 8009976:	4603      	mov	r3, r0
 8009978:	4423      	add	r3, r4
 800997a:	4a83      	ldr	r2, [pc, #524]	; (8009b88 <AT_ESP8266_ND+0x3288>)
 800997c:	461c      	mov	r4, r3
 800997e:	4613      	mov	r3, r2
 8009980:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009982:	6020      	str	r0, [r4, #0]
 8009984:	6061      	str	r1, [r4, #4]
 8009986:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 8009988:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800998c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 8009996:	f107 020c 	add.w	r2, r7, #12
 800999a:	4611      	mov	r1, r2
 800999c:	4618      	mov	r0, r3
 800999e:	f005 facb 	bl	800ef38 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 80099a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80099b0:	f107 030c 	add.w	r3, r7, #12
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7f6 fc1d 	bl	80001f4 <strlen>
 80099ba:	4602      	mov	r2, r0
 80099bc:	f107 030c 	add.w	r3, r7, #12
 80099c0:	4619      	mov	r1, r3
 80099c2:	4620      	mov	r0, r4
 80099c4:	f005 fd59 	bl	800f47a <strncat>
										strncat(a->_uart2snd,",",1);
 80099c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80099d6:	4620      	mov	r0, r4
 80099d8:	f7f6 fc0c 	bl	80001f4 <strlen>
 80099dc:	4603      	mov	r3, r0
 80099de:	4423      	add	r3, r4
 80099e0:	496a      	ldr	r1, [pc, #424]	; (8009b8c <AT_ESP8266_ND+0x328c>)
 80099e2:	461a      	mov	r2, r3
 80099e4:	460b      	mov	r3, r1
 80099e6:	881b      	ldrh	r3, [r3, #0]
 80099e8:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 80099ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 80099f8:	f107 020c 	add.w	r2, r7, #12
 80099fc:	4611      	mov	r1, r2
 80099fe:	4618      	mov	r0, r3
 8009a00:	f005 fa9a 	bl	800ef38 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009a04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009a12:	f107 030c 	add.w	r3, r7, #12
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7f6 fbec 	bl	80001f4 <strlen>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	f107 030c 	add.w	r3, r7, #12
 8009a22:	4619      	mov	r1, r3
 8009a24:	4620      	mov	r0, r4
 8009a26:	f005 fd28 	bl	800f47a <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8009a2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8009a38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009a46:	4619      	mov	r1, r3
 8009a48:	4610      	mov	r0, r2
 8009a4a:	f005 fdf7 	bl	800f63c <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009a4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009a5c:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009a60:	2202      	movs	r2, #2
 8009a62:	4618      	mov	r0, r3
 8009a64:	f005 fd09 	bl	800f47a <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8009a68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7f6 fbbc 	bl	80001f4 <strlen>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009a8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8009a9c:	4620      	mov	r0, r4
 8009a9e:	f7f6 fba9 	bl	80001f4 <strlen>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	4423      	add	r3, r4
 8009aa6:	4a3a      	ldr	r2, [pc, #232]	; (8009b90 <AT_ESP8266_ND+0x3290>)
 8009aa8:	461c      	mov	r4, r3
 8009aaa:	4613      	mov	r3, r2
 8009aac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009aae:	6020      	str	r0, [r4, #0]
 8009ab0:	6061      	str	r1, [r4, #4]
 8009ab2:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009ab4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ab8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009ac2:	1c5a      	adds	r2, r3, #1
 8009ac4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ac8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 8009ad2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ad6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009ae0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009ae4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ae8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009af8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009b02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f040 80b8 	bne.w	8009c86 <AT_ESP8266_ND+0x3386>
 8009b16:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009b1a:	2b13      	cmp	r3, #19
 8009b1c:	f000 80b3 	beq.w	8009c86 <AT_ESP8266_ND+0x3386>
 8009b20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009b2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4610      	mov	r0, r2
 8009b40:	f7f6 fb4e 	bl	80001e0 <strcmp>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d024      	beq.n	8009b94 <AT_ESP8266_ND+0x3294>
 8009b4a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d020      	beq.n	8009b94 <AT_ESP8266_ND+0x3294>
 8009b52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009b56:	2b14      	cmp	r3, #20
 8009b58:	d01c      	beq.n	8009b94 <AT_ESP8266_ND+0x3294>
 8009b5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	f340 808a 	ble.w	8009c86 <AT_ESP8266_ND+0x3386>
 8009b72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	f040 8080 	bne.w	8009c86 <AT_ESP8266_ND+0x3386>
 8009b86:	e005      	b.n	8009b94 <AT_ESP8266_ND+0x3294>
 8009b88:	08010c48 	.word	0x08010c48
 8009b8c:	08010c70 	.word	0x08010c70
 8009b90:	08010c54 	.word	0x08010c54
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8009b94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	dd17      	ble.n	8009bda <AT_ESP8266_ND+0x32da>
 8009baa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d10e      	bne.n	8009bda <AT_ESP8266_ND+0x32da>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009bbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8009bda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8009be8:	1c5a      	adds	r2, r3, #1
 8009bea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8009bf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009c16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009c26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009c34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009c42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009c50:	2361      	movs	r3, #97	; 0x61
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	2301      	movs	r3, #1
 8009c56:	f005 fa19 	bl	800f08c <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009c5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009c68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009c76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8009c86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c94:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009c98:	f040 80bd 	bne.w	8009e16 <AT_ESP8266_ND+0x3516>
 8009c9c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ca0:	2b13      	cmp	r3, #19
 8009ca2:	d02b      	beq.n	8009cfc <AT_ESP8266_ND+0x33fc>
 8009ca4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ca8:	2b0b      	cmp	r3, #11
 8009caa:	d027      	beq.n	8009cfc <AT_ESP8266_ND+0x33fc>
 8009cac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009cb0:	2b0c      	cmp	r3, #12
 8009cb2:	d023      	beq.n	8009cfc <AT_ESP8266_ND+0x33fc>
 8009cb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	dc18      	bgt.n	8009cfc <AT_ESP8266_ND+0x33fc>
 8009cca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009cce:	2b0a      	cmp	r3, #10
 8009cd0:	d014      	beq.n	8009cfc <AT_ESP8266_ND+0x33fc>
 8009cd2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009cd6:	2b10      	cmp	r3, #16
 8009cd8:	d010      	beq.n	8009cfc <AT_ESP8266_ND+0x33fc>
 8009cda:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009cde:	2b11      	cmp	r3, #17
 8009ce0:	d00c      	beq.n	8009cfc <AT_ESP8266_ND+0x33fc>
 8009ce2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ce6:	2b12      	cmp	r3, #18
 8009ce8:	d008      	beq.n	8009cfc <AT_ESP8266_ND+0x33fc>
 8009cea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009cee:	2b16      	cmp	r3, #22
 8009cf0:	d004      	beq.n	8009cfc <AT_ESP8266_ND+0x33fc>
 8009cf2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009cf6:	2b19      	cmp	r3, #25
 8009cf8:	f040 808d 	bne.w	8009e16 <AT_ESP8266_ND+0x3516>
									a->_debug_count5++;
 8009cfc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009d0a:	1c5a      	adds	r2, r3, #1
 8009d0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009d1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	dd25      	ble.n	8009d7c <AT_ESP8266_ND+0x347c>
										a->_debug_count8++;
 8009d30:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d34:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009d3e:	1c5a      	adds	r2, r3, #1
 8009d40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009d4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009d5c:	1c5a      	adds	r2, r3, #1
 8009d5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009d6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009d7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	dd07      	ble.n	8009d9e <AT_ESP8266_ND+0x349e>
 8009d8e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d92:	2b10      	cmp	r3, #16
 8009d94:	d003      	beq.n	8009d9e <AT_ESP8266_ND+0x349e>
 8009d96:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d9a:	2b0a      	cmp	r3, #10
 8009d9c:	d108      	bne.n	8009db0 <AT_ESP8266_ND+0x34b0>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009d9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009da2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009db0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009db4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009dc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009dd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009de0:	e019      	b.n	8009e16 <AT_ESP8266_ND+0x3516>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009de2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009de6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009df0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009df4:	e010      	b.n	8009e18 <AT_ESP8266_ND+0x3518>
			break;
 8009df6:	bf00      	nop
 8009df8:	e00e      	b.n	8009e18 <AT_ESP8266_ND+0x3518>
			break;
 8009dfa:	bf00      	nop
 8009dfc:	e00c      	b.n	8009e18 <AT_ESP8266_ND+0x3518>
			break;
 8009dfe:	bf00      	nop
 8009e00:	e00a      	b.n	8009e18 <AT_ESP8266_ND+0x3518>
			break;
 8009e02:	bf00      	nop
 8009e04:	e008      	b.n	8009e18 <AT_ESP8266_ND+0x3518>
			break;
 8009e06:	bf00      	nop
 8009e08:	e006      	b.n	8009e18 <AT_ESP8266_ND+0x3518>
			break;
 8009e0a:	bf00      	nop
 8009e0c:	e004      	b.n	8009e18 <AT_ESP8266_ND+0x3518>
			break;
 8009e0e:	bf00      	nop
 8009e10:	e002      	b.n	8009e18 <AT_ESP8266_ND+0x3518>
			break;
 8009e12:	bf00      	nop
 8009e14:	e000      	b.n	8009e18 <AT_ESP8266_ND+0x3518>
			break;
 8009e16:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009e18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 8009e28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 8009e38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8009e46:	4618      	mov	r0, r3
 8009e48:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e50 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e62:	f240 328d 	movw	r2, #909	; 0x38d
 8009e66:	4293      	cmp	r3, r2
 8009e68:	f001 8430 	beq.w	800b6cc <WiFi_Conn_ND+0x187c>
 8009e6c:	f240 328d 	movw	r2, #909	; 0x38d
 8009e70:	4293      	cmp	r3, r2
 8009e72:	f301 84c5 	bgt.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009e76:	f240 3289 	movw	r2, #905	; 0x389
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	f001 839d 	beq.w	800b5ba <WiFi_Conn_ND+0x176a>
 8009e80:	f240 3289 	movw	r2, #905	; 0x389
 8009e84:	4293      	cmp	r3, r2
 8009e86:	f301 84bb 	bgt.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009e8a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009e8e:	f001 828c 	beq.w	800b3aa <WiFi_Conn_ND+0x155a>
 8009e92:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009e96:	f301 84b3 	bgt.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009e9a:	f240 3229 	movw	r2, #809	; 0x329
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	f301 84ae 	bgt.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009ea4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009ea8:	f280 80a5 	bge.w	8009ff6 <WiFi_Conn_ND+0x1a6>
 8009eac:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	f000 87c0 	beq.w	800ae36 <WiFi_Conn_ND+0xfe6>
 8009eb6:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	f301 84a0 	bgt.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009ec0:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	f000 8741 	beq.w	800ad4c <WiFi_Conn_ND+0xefc>
 8009eca:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	f301 8496 	bgt.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009ed4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009ed8:	f000 866b 	beq.w	800abb2 <WiFi_Conn_ND+0xd62>
 8009edc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009ee0:	f301 848e 	bgt.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009ee4:	f240 2261 	movw	r2, #609	; 0x261
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	f000 85ec 	beq.w	800aac6 <WiFi_Conn_ND+0xc76>
 8009eee:	f240 2261 	movw	r2, #609	; 0x261
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	f301 8484 	bgt.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009ef8:	f240 225d 	movw	r2, #605	; 0x25d
 8009efc:	4293      	cmp	r3, r2
 8009efe:	f000 8582 	beq.w	800aa06 <WiFi_Conn_ND+0xbb6>
 8009f02:	f240 225d 	movw	r2, #605	; 0x25d
 8009f06:	4293      	cmp	r3, r2
 8009f08:	f301 847a 	bgt.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009f0c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009f10:	f000 8500 	beq.w	800a914 <WiFi_Conn_ND+0xac4>
 8009f14:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009f18:	f301 8472 	bgt.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009f1c:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009f20:	4293      	cmp	r3, r2
 8009f22:	f000 8496 	beq.w	800a852 <WiFi_Conn_ND+0xa02>
 8009f26:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009f2a:	f281 8469 	bge.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009f2e:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009f32:	4293      	cmp	r3, r2
 8009f34:	f000 844c 	beq.w	800a7d0 <WiFi_Conn_ND+0x980>
 8009f38:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009f3c:	f281 8460 	bge.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009f40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009f44:	f000 83d7 	beq.w	800a6f6 <WiFi_Conn_ND+0x8a6>
 8009f48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009f4c:	f301 8458 	bgt.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009f50:	f240 1299 	movw	r2, #409	; 0x199
 8009f54:	4293      	cmp	r3, r2
 8009f56:	f000 8378 	beq.w	800a64a <WiFi_Conn_ND+0x7fa>
 8009f5a:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8009f5e:	f281 844f 	bge.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009f62:	f240 1295 	movw	r2, #405	; 0x195
 8009f66:	4293      	cmp	r3, r2
 8009f68:	f000 8333 	beq.w	800a5d2 <WiFi_Conn_ND+0x782>
 8009f6c:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009f70:	f281 8446 	bge.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009f74:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009f78:	f000 82aa 	beq.w	800a4d0 <WiFi_Conn_ND+0x680>
 8009f7c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009f80:	f301 843e 	bgt.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009f84:	f240 1235 	movw	r2, #309	; 0x135
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	f000 827b 	beq.w	800a484 <WiFi_Conn_ND+0x634>
 8009f8e:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009f92:	f281 8435 	bge.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009f96:	f240 1231 	movw	r2, #305	; 0x131
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	f000 826d 	beq.w	800a47a <WiFi_Conn_ND+0x62a>
 8009fa0:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009fa4:	f281 842c 	bge.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009fa8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009fac:	f000 8211 	beq.w	800a3d2 <WiFi_Conn_ND+0x582>
 8009fb0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009fb4:	f301 8424 	bgt.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009fb8:	2bd1      	cmp	r3, #209	; 0xd1
 8009fba:	f000 81a5 	beq.w	800a308 <WiFi_Conn_ND+0x4b8>
 8009fbe:	2bd1      	cmp	r3, #209	; 0xd1
 8009fc0:	f301 841e 	bgt.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009fc4:	2bcd      	cmp	r3, #205	; 0xcd
 8009fc6:	f000 8175 	beq.w	800a2b4 <WiFi_Conn_ND+0x464>
 8009fca:	2bcd      	cmp	r3, #205	; 0xcd
 8009fcc:	f301 8418 	bgt.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009fd0:	2bc8      	cmp	r3, #200	; 0xc8
 8009fd2:	f000 80f1 	beq.w	800a1b8 <WiFi_Conn_ND+0x368>
 8009fd6:	2bc8      	cmp	r3, #200	; 0xc8
 8009fd8:	f301 8412 	bgt.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009fdc:	2b6d      	cmp	r3, #109	; 0x6d
 8009fde:	f000 80b3 	beq.w	800a148 <WiFi_Conn_ND+0x2f8>
 8009fe2:	2b6d      	cmp	r3, #109	; 0x6d
 8009fe4:	f301 840c 	bgt.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009fe8:	2b64      	cmp	r3, #100	; 0x64
 8009fea:	d021      	beq.n	800a030 <WiFi_Conn_ND+0x1e0>
 8009fec:	2b69      	cmp	r3, #105	; 0x69
 8009fee:	f000 8096 	beq.w	800a11e <WiFi_Conn_ND+0x2ce>
 8009ff2:	f001 bc05 	b.w	800b800 <WiFi_Conn_ND+0x19b0>
 8009ff6:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009ffa:	2b09      	cmp	r3, #9
 8009ffc:	f201 8400 	bhi.w	800b800 <WiFi_Conn_ND+0x19b0>
 800a000:	a201      	add	r2, pc, #4	; (adr r2, 800a008 <WiFi_Conn_ND+0x1b8>)
 800a002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a006:	bf00      	nop
 800a008:	0800af4d 	.word	0x0800af4d
 800a00c:	0800b801 	.word	0x0800b801
 800a010:	0800b801 	.word	0x0800b801
 800a014:	0800b801 	.word	0x0800b801
 800a018:	0800b801 	.word	0x0800b801
 800a01c:	0800b01b 	.word	0x0800b01b
 800a020:	0800b0c5 	.word	0x0800b0c5
 800a024:	0800b16f 	.word	0x0800b16f
 800a028:	0800b219 	.word	0x0800b219
 800a02c:	0800b2c3 	.word	0x0800b2c3
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a036:	2b64      	cmp	r3, #100	; 0x64
 800a038:	d046      	beq.n	800a0c8 <WiFi_Conn_ND+0x278>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a040:	2b01      	cmp	r3, #1
 800a042:	d041      	beq.n	800a0c8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a04a:	2b1c      	cmp	r3, #28
 800a04c:	d03c      	beq.n	800a0c8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a054:	2b02      	cmp	r3, #2
 800a056:	d037      	beq.n	800a0c8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a05e:	2b04      	cmp	r3, #4
 800a060:	d032      	beq.n	800a0c8 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a068:	2b13      	cmp	r3, #19
 800a06a:	d02d      	beq.n	800a0c8 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 800a06c:	68f8      	ldr	r0, [r7, #12]
 800a06e:	f7fc fab1 	bl	80065d4 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d14e      	bne.n	800a11a <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f7fc fc3f 	bl	8006900 <AT_ESP8266_ND>
 800a082:	4602      	mov	r2, r0
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d109      	bne.n	800a0b0 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	f7f7 fa24 	bl	80014f8 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	2364      	movs	r3, #100	; 0x64
 800a0c0:	68b8      	ldr	r0, [r7, #8]
 800a0c2:	f7fb f9e3 	bl	800548c <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 800a0c6:	e028      	b.n	800a11a <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d004      	beq.n	800a0dc <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 800a0d8:	2b1c      	cmp	r3, #28
 800a0da:	d103      	bne.n	800a0e4 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	226d      	movs	r2, #109	; 0x6d
 800a0e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d00f      	beq.n	800a10e <WiFi_Conn_ND+0x2be>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0f4:	2b04      	cmp	r3, #4
 800a0f6:	d00a      	beq.n	800a10e <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0fe:	2b0b      	cmp	r3, #11
 800a100:	d005      	beq.n	800a10e <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a108:	2b0c      	cmp	r3, #12
 800a10a:	f041 834a 	bne.w	800b7a2 <WiFi_Conn_ND+0x1952>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2269      	movs	r2, #105	; 0x69
 800a112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 800a116:	f001 bb44 	b.w	800b7a2 <WiFi_Conn_ND+0x1952>
 800a11a:	f001 bb42 	b.w	800b7a2 <WiFi_Conn_ND+0x1952>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f7fc fa58 	bl	80065d4 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2264      	movs	r2, #100	; 0x64
 800a128:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2200      	movs	r2, #0
 800a130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2200      	movs	r2, #0
 800a138:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 800a144:	f001 bb5c 	b.w	800b800 <WiFi_Conn_ND+0x19b0>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00c      	beq.n	800a16c <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f7fc fa6a 	bl	800662c <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a15e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2200      	movs	r2, #0
 800a166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800a16a:	e00e      	b.n	800a18a <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f7fc fa47 	bl	8006600 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	22c8      	movs	r2, #200	; 0xc8
 800a176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a190:	2b04      	cmp	r3, #4
 800a192:	f041 8308 	bne.w	800b7a6 <WiFi_Conn_ND+0x1956>
					{
						Cambiar_CWMODE(b);
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f7fc fa1c 	bl	80065d4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2264      	movs	r2, #100	; 0x64
 800a1a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a1b4:	f001 baf7 	b.w	800b7a6 <WiFi_Conn_ND+0x1956>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1be:	2bc8      	cmp	r3, #200	; 0xc8
 800a1c0:	d04f      	beq.n	800a262 <WiFi_Conn_ND+0x412>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d04a      	beq.n	800a262 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d045      	beq.n	800a262 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1dc:	2b03      	cmp	r3, #3
 800a1de:	d040      	beq.n	800a262 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1e6:	2b04      	cmp	r3, #4
 800a1e8:	d03b      	beq.n	800a262 <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1f0:	2b0a      	cmp	r3, #10
 800a1f2:	d036      	beq.n	800a262 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1fa:	2b0b      	cmp	r3, #11
 800a1fc:	d031      	beq.n	800a262 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a204:	2b0c      	cmp	r3, #12
 800a206:	d02c      	beq.n	800a262 <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f7fc f9f9 	bl	8006600 <ConectarWIFI>
						if(b->_enviaruart==1)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a214:	2b01      	cmp	r3, #1
 800a216:	d124      	bne.n	800a262 <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	f7fc fb71 	bl	8006900 <AT_ESP8266_ND>
 800a21e:	4602      	mov	r2, r0
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a234:	2b01      	cmp	r3, #1
 800a236:	d109      	bne.n	800a24c <WiFi_Conn_ND+0x3fc>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a244:	4619      	mov	r1, r3
 800a246:	4610      	mov	r0, r2
 800a248:	f7f7 f956 	bl	80014f8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a258:	b29a      	uxth	r2, r3
 800a25a:	2364      	movs	r3, #100	; 0x64
 800a25c:	68b8      	ldr	r0, [r7, #8]
 800a25e:	f7fb f915 	bl	800548c <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d004      	beq.n	800a276 <WiFi_Conn_ND+0x426>
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a272:	2b0c      	cmp	r3, #12
 800a274:	d103      	bne.n	800a27e <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	22d1      	movs	r2, #209	; 0xd1
 800a27a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)||(b->_estado==at_wifi_disconnect)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a284:	2b02      	cmp	r3, #2
 800a286:	d00f      	beq.n	800a2a8 <WiFi_Conn_ND+0x458>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a28e:	2b03      	cmp	r3, #3
 800a290:	d00a      	beq.n	800a2a8 <WiFi_Conn_ND+0x458>
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a298:	2b20      	cmp	r3, #32
 800a29a:	d005      	beq.n	800a2a8 <WiFi_Conn_ND+0x458>
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a2:	2b0a      	cmp	r3, #10
 800a2a4:	f041 8281 	bne.w	800b7aa <WiFi_Conn_ND+0x195a>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	22cd      	movs	r2, #205	; 0xcd
 800a2ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a2b0:	f001 ba7b 	b.w	800b7aa <WiFi_Conn_ND+0x195a>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 800a2b4:	f241 3088 	movw	r0, #5000	; 0x1388
 800a2b8:	f7f8 fc34 	bl	8002b24 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f7fc f99f 	bl	8006600 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	22c8      	movs	r2, #200	; 0xc8
 800a2c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e0:	2b04      	cmp	r3, #4
 800a2e2:	f041 8264 	bne.w	800b7ae <WiFi_Conn_ND+0x195e>
					{
						Cambiar_CWMODE(b);
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f7fc f974 	bl	80065d4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2264      	movs	r2, #100	; 0x64
 800a2f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a304:	f001 ba53 	b.w	800b7ae <WiFi_Conn_ND+0x195e>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800a316:	2b01      	cmp	r3, #1
 800a318:	d108      	bne.n	800a32c <WiFi_Conn_ND+0x4dc>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f240 3229 	movw	r2, #809	; 0x329
 800a320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a332:	2b0a      	cmp	r3, #10
 800a334:	d009      	beq.n	800a34a <WiFi_Conn_ND+0x4fa>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a33c:	2b0d      	cmp	r3, #13
 800a33e:	d004      	beq.n	800a34a <WiFi_Conn_ND+0x4fa>
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a346:	2b03      	cmp	r3, #3
 800a348:	d10a      	bne.n	800a360 <WiFi_Conn_ND+0x510>
				{
					ConectarWIFI(b);
 800a34a:	68f8      	ldr	r0, [r7, #12]
 800a34c:	f7fc f958 	bl	8006600 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	22c8      	movs	r2, #200	; 0xc8
 800a354:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a366:	2b04      	cmp	r3, #4
 800a368:	d10e      	bne.n	800a388 <WiFi_Conn_ND+0x538>
					{
						Cambiar_CWMODE(b);
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f7fc f932 	bl	80065d4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2264      	movs	r2, #100	; 0x64
 800a374:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d011      	beq.n	800a3b6 <WiFi_Conn_ND+0x566>
				{//
					CrearServidorTCP(b);
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f7fc f9a2 	bl	80066dc <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a39e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800a3b2:	f001 ba25 	b.w	800b800 <WiFi_Conn_ND+0x19b0>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f7fc f938 	bl	800662c <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a3c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a3ce:	f001 ba17 	b.w	800b800 <WiFi_Conn_ND+0x19b0>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a3dc:	d03b      	beq.n	800a456 <WiFi_Conn_ND+0x606>
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e4:	2b04      	cmp	r3, #4
 800a3e6:	d036      	beq.n	800a456 <WiFi_Conn_ND+0x606>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ee:	2b0a      	cmp	r3, #10
 800a3f0:	d031      	beq.n	800a456 <WiFi_Conn_ND+0x606>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3f8:	2b0d      	cmp	r3, #13
 800a3fa:	d02c      	beq.n	800a456 <WiFi_Conn_ND+0x606>
				{
						DesconectarWIFI(b);
 800a3fc:	68f8      	ldr	r0, [r7, #12]
 800a3fe:	f7fc f941 	bl	8006684 <DesconectarWIFI>
						if(b->_enviaruart==1)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d124      	bne.n	800a456 <WiFi_Conn_ND+0x606>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f7fc fa77 	bl	8006900 <AT_ESP8266_ND>
 800a412:	4602      	mov	r2, r0
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d109      	bne.n	800a440 <WiFi_Conn_ND+0x5f0>
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a438:	4619      	mov	r1, r3
 800a43a:	4610      	mov	r0, r2
 800a43c:	f7f7 f85c 	bl	80014f8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	2364      	movs	r3, #100	; 0x64
 800a450:	68b8      	ldr	r0, [r7, #8]
 800a452:	f7fb f81b 	bl	800548c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a45c:	2b0a      	cmp	r3, #10
 800a45e:	d005      	beq.n	800a46c <WiFi_Conn_ND+0x61c>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a466:	2b0d      	cmp	r3, #13
 800a468:	f041 81a3 	bne.w	800b7b2 <WiFi_Conn_ND+0x1962>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f240 1235 	movw	r2, #309	; 0x135
 800a472:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a476:	f001 b99c 	b.w	800b7b2 <WiFi_Conn_ND+0x1962>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f7fc f894 	bl	80065a8 <NOP>
			}
			break;
 800a480:	f001 b9be 	b.w	800b800 <WiFi_Conn_ND+0x19b0>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f7fc f8b7 	bl	8006600 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	22c8      	movs	r2, #200	; 0xc8
 800a496:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4a8:	2b04      	cmp	r3, #4
 800a4aa:	f041 8184 	bne.w	800b7b6 <WiFi_Conn_ND+0x1966>
					{
						Cambiar_CWMODE(b);
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f7fc f890 	bl	80065d4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2264      	movs	r2, #100	; 0x64
 800a4b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a4cc:	f001 b973 	b.w	800b7b6 <WiFi_Conn_ND+0x1966>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4d6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a4da:	d04f      	beq.n	800a57c <WiFi_Conn_ND+0x72c>
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e2:	2b04      	cmp	r3, #4
 800a4e4:	d04a      	beq.n	800a57c <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_ok)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d045      	beq.n	800a57c <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_error)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d040      	beq.n	800a57c <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_ok)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a500:	2b07      	cmp	r3, #7
 800a502:	d03b      	beq.n	800a57c <WiFi_Conn_ND+0x72c>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a50a:	2b08      	cmp	r3, #8
 800a50c:	d036      	beq.n	800a57c <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_multiple_conn_err)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a514:	2b1e      	cmp	r3, #30
 800a516:	d031      	beq.n	800a57c <WiFi_Conn_ND+0x72c>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a51e:	2b1f      	cmp	r3, #31
 800a520:	d02c      	beq.n	800a57c <WiFi_Conn_ND+0x72c>
				{
						MUX(b);
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f7fc f882 	bl	800662c <MUX>
						if(b->_enviaruart==1)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d124      	bne.n	800a57c <WiFi_Conn_ND+0x72c>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f7fc f9e4 	bl	8006900 <AT_ESP8266_ND>
 800a538:	4602      	mov	r2, r0
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d109      	bne.n	800a566 <WiFi_Conn_ND+0x716>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a55e:	4619      	mov	r1, r3
 800a560:	4610      	mov	r0, r2
 800a562:	f7f6 ffc9 	bl	80014f8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a572:	b29a      	uxth	r2, r3
 800a574:	2364      	movs	r3, #100	; 0x64
 800a576:	68b8      	ldr	r0, [r7, #8]
 800a578:	f7fa ff88 	bl	800548c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a582:	2b01      	cmp	r3, #1
 800a584:	d009      	beq.n	800a59a <WiFi_Conn_ND+0x74a>
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a58c:	2b07      	cmp	r3, #7
 800a58e:	d004      	beq.n	800a59a <WiFi_Conn_ND+0x74a>
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a596:	2b08      	cmp	r3, #8
 800a598:	d104      	bne.n	800a5a4 <WiFi_Conn_ND+0x754>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f240 1299 	movw	r2, #409	; 0x199
 800a5a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d00a      	beq.n	800a5c4 <WiFi_Conn_ND+0x774>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b4:	2b1e      	cmp	r3, #30
 800a5b6:	d005      	beq.n	800a5c4 <WiFi_Conn_ND+0x774>
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5be:	2b1f      	cmp	r3, #31
 800a5c0:	f041 80fb 	bne.w	800b7ba <WiFi_Conn_ND+0x196a>
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f240 1295 	movw	r2, #405	; 0x195
 800a5ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a5ce:	f001 b8f4 	b.w	800b7ba <WiFi_Conn_ND+0x196a>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f7fb ffe8 	bl	80065a8 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5de:	2b04      	cmp	r3, #4
 800a5e0:	d112      	bne.n	800a608 <WiFi_Conn_ND+0x7b8>
				{
					Cambiar_CWMODE(b);
 800a5e2:	68f8      	ldr	r0, [r7, #12]
 800a5e4:	f7fb fff6 	bl	80065d4 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2264      	movs	r2, #100	; 0x64
 800a5ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a60e:	2b0a      	cmp	r3, #10
 800a610:	d00a      	beq.n	800a628 <WiFi_Conn_ND+0x7d8>
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a618:	2b0d      	cmp	r3, #13
 800a61a:	d005      	beq.n	800a628 <WiFi_Conn_ND+0x7d8>
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a622:	2b03      	cmp	r3, #3
 800a624:	f041 80cb 	bne.w	800b7be <WiFi_Conn_ND+0x196e>
				{
					ConectarWIFI(b);
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f7fb ffe9 	bl	8006600 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	22c8      	movs	r2, #200	; 0xc8
 800a632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2200      	movs	r2, #0
 800a642:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a646:	f001 b8ba 	b.w	800b7be <WiFi_Conn_ND+0x196e>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f7fb ffac 	bl	80065a8 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a65e:	2b04      	cmp	r3, #4
 800a660:	d10e      	bne.n	800a680 <WiFi_Conn_ND+0x830>
					{
						Cambiar_CWMODE(b);
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f7fb ffb6 	bl	80065d4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2264      	movs	r2, #100	; 0x64
 800a66c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2200      	movs	r2, #0
 800a674:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a686:	2b0a      	cmp	r3, #10
 800a688:	d009      	beq.n	800a69e <WiFi_Conn_ND+0x84e>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a690:	2b0d      	cmp	r3, #13
 800a692:	d004      	beq.n	800a69e <WiFi_Conn_ND+0x84e>
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a69a:	2b03      	cmp	r3, #3
 800a69c:	d10a      	bne.n	800a6b4 <WiFi_Conn_ND+0x864>
					{
						ConectarWIFI(b);
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f7fb ffae 	bl	8006600 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	22c8      	movs	r2, #200	; 0xc8
 800a6a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}
					if(b->_NO_IP==0)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d10d      	bne.n	800a6da <WiFi_Conn_ND+0x88a>
					{
						IPDef(b);
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f7fb ffca 	bl	8006658 <IPDef>
						b->_estado_conexion=DEF_IP_EN_CURSO;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a6ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_estado=0;
					}


			}
			break;
 800a6d6:	f001 b893 	b.w	800b800 <WiFi_Conn_ND+0x19b0>
						IPDef(b);
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f7fb ffbc 	bl	8006658 <IPDef>
						b->_estado_conexion=DEF_IP_OK;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a6e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a6f2:	f001 b885 	b.w	800b800 <WiFi_Conn_ND+0x19b0>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a700:	d045      	beq.n	800a78e <WiFi_Conn_ND+0x93e>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a708:	2b04      	cmp	r3, #4
 800a70a:	d040      	beq.n	800a78e <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_ok)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a712:	2b01      	cmp	r3, #1
 800a714:	d03b      	beq.n	800a78e <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_error)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	d036      	beq.n	800a78e <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_ok)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a726:	2b1b      	cmp	r3, #27
 800a728:	d031      	beq.n	800a78e <WiFi_Conn_ND+0x93e>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a730:	2b21      	cmp	r3, #33	; 0x21
 800a732:	d02c      	beq.n	800a78e <WiFi_Conn_ND+0x93e>
				{
						IPDef(b);
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f7fb ff8f 	bl	8006658 <IPDef>
						if(b->_enviaruart==1)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a740:	2b01      	cmp	r3, #1
 800a742:	d124      	bne.n	800a78e <WiFi_Conn_ND+0x93e>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f7fc f8db 	bl	8006900 <AT_ESP8266_ND>
 800a74a:	4602      	mov	r2, r0
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a760:	2b01      	cmp	r3, #1
 800a762:	d109      	bne.n	800a778 <WiFi_Conn_ND+0x928>
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a770:	4619      	mov	r1, r3
 800a772:	4610      	mov	r0, r2
 800a774:	f7f6 fec0 	bl	80014f8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a784:	b29a      	uxth	r2, r3
 800a786:	2364      	movs	r3, #100	; 0x64
 800a788:	68b8      	ldr	r0, [r7, #8]
 800a78a:	f7fa fe7f 	bl	800548c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a794:	2b01      	cmp	r3, #1
 800a796:	d004      	beq.n	800a7a2 <WiFi_Conn_ND+0x952>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a79e:	2b1b      	cmp	r3, #27
 800a7a0:	d104      	bne.n	800a7ac <WiFi_Conn_ND+0x95c>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a7a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	d005      	beq.n	800a7c2 <WiFi_Conn_ND+0x972>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7bc:	2b21      	cmp	r3, #33	; 0x21
 800a7be:	f041 8000 	bne.w	800b7c2 <WiFi_Conn_ND+0x1972>
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a7c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a7cc:	f000 bff9 	b.w	800b7c2 <WiFi_Conn_ND+0x1972>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f7fb fee9 	bl	80065a8 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7dc:	2b04      	cmp	r3, #4
 800a7de:	d004      	beq.n	800a7ea <WiFi_Conn_ND+0x99a>
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d112      	bne.n	800a810 <WiFi_Conn_ND+0x9c0>
				{
					Cambiar_CWMODE(b);
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f7fb fef2 	bl	80065d4 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2264      	movs	r2, #100	; 0x64
 800a7f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2200      	movs	r2, #0
 800a804:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a816:	2b0a      	cmp	r3, #10
 800a818:	d00a      	beq.n	800a830 <WiFi_Conn_ND+0x9e0>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a820:	2b0d      	cmp	r3, #13
 800a822:	d005      	beq.n	800a830 <WiFi_Conn_ND+0x9e0>
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a82a:	2b03      	cmp	r3, #3
 800a82c:	f040 87cb 	bne.w	800b7c6 <WiFi_Conn_ND+0x1976>
				{
					ConectarWIFI(b);
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f7fb fee5 	bl	8006600 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	22c8      	movs	r2, #200	; 0xc8
 800a83a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2200      	movs	r2, #0
 800a842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a84e:	f000 bfba 	b.w	800b7c6 <WiFi_Conn_ND+0x1976>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f7fb fea8 	bl	80065a8 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a85e:	2b04      	cmp	r3, #4
 800a860:	d112      	bne.n	800a888 <WiFi_Conn_ND+0xa38>
					{
						Cambiar_CWMODE(b);
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f7fb feb6 	bl	80065d4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2264      	movs	r2, #100	; 0x64
 800a86c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a88e:	2b0a      	cmp	r3, #10
 800a890:	d009      	beq.n	800a8a6 <WiFi_Conn_ND+0xa56>
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a898:	2b0d      	cmp	r3, #13
 800a89a:	d004      	beq.n	800a8a6 <WiFi_Conn_ND+0xa56>
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8a2:	2b03      	cmp	r3, #3
 800a8a4:	d10e      	bne.n	800a8c4 <WiFi_Conn_ND+0xa74>
					{
						ConectarWIFI(b);
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f7fb feaa 	bl	8006600 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	22c8      	movs	r2, #200	; 0xc8
 800a8b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d111      	bne.n	800a8f2 <WiFi_Conn_ND+0xaa2>
					{
						ConectarTCP(b);
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	f7fb feee 	bl	80066b0 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a8da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						b->_estado=0;//
						b->_n_orig=0;// //Borro el vector RX

					}
			}
			break;
 800a8ee:	f000 bf87 	b.w	800b800 <WiFi_Conn_ND+0x19b0>
						ConectarWIFI(b);//
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f7fb fe84 	bl	8006600 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	22c8      	movs	r2, #200	; 0xc8
 800a8fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2200      	movs	r2, #0
 800a904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a910:	f000 bf76 	b.w	800b800 <WiFi_Conn_ND+0x19b0>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a91a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a91e:	d04a      	beq.n	800a9b6 <WiFi_Conn_ND+0xb66>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a926:	2b02      	cmp	r3, #2
 800a928:	d045      	beq.n	800a9b6 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_ok)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a930:	2b01      	cmp	r3, #1
 800a932:	d040      	beq.n	800a9b6 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_wifi_disconnect)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a93a:	2b0a      	cmp	r3, #10
 800a93c:	d03b      	beq.n	800a9b6 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a944:	2b0e      	cmp	r3, #14
 800a946:	d036      	beq.n	800a9b6 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_conectado)
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a94e:	2b0f      	cmp	r3, #15
 800a950:	d031      	beq.n	800a9b6 <WiFi_Conn_ND+0xb66>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a958:	2b10      	cmp	r3, #16
 800a95a:	d02c      	beq.n	800a9b6 <WiFi_Conn_ND+0xb66>
				{
					ConectarTCP(b);
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f7fb fea7 	bl	80066b0 <ConectarTCP>
						if(b->_enviaruart==1)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d124      	bne.n	800a9b6 <WiFi_Conn_ND+0xb66>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f7fb ffc7 	bl	8006900 <AT_ESP8266_ND>
 800a972:	4602      	mov	r2, r0
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d109      	bne.n	800a9a0 <WiFi_Conn_ND+0xb50>
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a998:	4619      	mov	r1, r3
 800a99a:	4610      	mov	r0, r2
 800a99c:	f7f6 fdac 	bl	80014f8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a9ac:	b29a      	uxth	r2, r3
 800a9ae:	2364      	movs	r3, #100	; 0x64
 800a9b0:	68b8      	ldr	r0, [r7, #8]
 800a9b2:	f7fa fd6b 	bl	800548c <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d009      	beq.n	800a9d4 <WiFi_Conn_ND+0xb84>
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c6:	2b0e      	cmp	r3, #14
 800a9c8:	d004      	beq.n	800a9d4 <WiFi_Conn_ND+0xb84>
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9d0:	2b0f      	cmp	r3, #15
 800a9d2:	d106      	bne.n	800a9e2 <WiFi_Conn_ND+0xb92>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f240 2261 	movw	r2, #609	; 0x261
 800a9da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800a9de:	f000 bef4 	b.w	800b7ca <WiFi_Conn_ND+0x197a>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9e8:	2b02      	cmp	r3, #2
 800a9ea:	d005      	beq.n	800a9f8 <WiFi_Conn_ND+0xba8>
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9f2:	2b10      	cmp	r3, #16
 800a9f4:	f040 86e9 	bne.w	800b7ca <WiFi_Conn_ND+0x197a>
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f240 225d 	movw	r2, #605	; 0x25d
 800a9fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800aa02:	f000 bee2 	b.w	800b7ca <WiFi_Conn_ND+0x197a>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800aa06:	68f8      	ldr	r0, [r7, #12]
 800aa08:	f7fb fdce 	bl	80065a8 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa12:	2b04      	cmp	r3, #4
 800aa14:	d112      	bne.n	800aa3c <WiFi_Conn_ND+0xbec>
				{
					Cambiar_CWMODE(b);
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	f7fb fddc 	bl	80065d4 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2264      	movs	r2, #100	; 0x64
 800aa20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2200      	movs	r2, #0
 800aa38:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_tcp_noip_err)||(b->_estado==at_error)||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa42:	2b0a      	cmp	r3, #10
 800aa44:	d013      	beq.n	800aa6e <WiFi_Conn_ND+0xc1e>
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa4c:	2b0d      	cmp	r3, #13
 800aa4e:	d00e      	beq.n	800aa6e <WiFi_Conn_ND+0xc1e>
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa56:	2b22      	cmp	r3, #34	; 0x22
 800aa58:	d009      	beq.n	800aa6e <WiFi_Conn_ND+0xc1e>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d004      	beq.n	800aa6e <WiFi_Conn_ND+0xc1e>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa6a:	2b03      	cmp	r3, #3
 800aa6c:	d10e      	bne.n	800aa8c <WiFi_Conn_ND+0xc3c>
				{
					ConectarWIFI(b);
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	f7fb fdc6 	bl	8006600 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	22c8      	movs	r2, #200	; 0xc8
 800aa78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa92:	2b10      	cmp	r3, #16
 800aa94:	d005      	beq.n	800aaa2 <WiFi_Conn_ND+0xc52>
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa9c:	2b0e      	cmp	r3, #14
 800aa9e:	f040 8696 	bne.w	800b7ce <WiFi_Conn_ND+0x197e>
				{
					ConectarTCP(b);
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f7fb fe04 	bl	80066b0 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aaae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2200      	movs	r2, #0
 800aabe:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800aac2:	f000 be84 	b.w	800b7ce <WiFi_Conn_ND+0x197e>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	f7fb fd6e 	bl	80065a8 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aad2:	2b04      	cmp	r3, #4
 800aad4:	d112      	bne.n	800aafc <WiFi_Conn_ND+0xcac>
					{
						Cambiar_CWMODE(b);
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f7fb fd7c 	bl	80065d4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2264      	movs	r2, #100	; 0x64
 800aae0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab02:	2b0a      	cmp	r3, #10
 800ab04:	d009      	beq.n	800ab1a <WiFi_Conn_ND+0xcca>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab0c:	2b0d      	cmp	r3, #13
 800ab0e:	d004      	beq.n	800ab1a <WiFi_Conn_ND+0xcca>
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab16:	2b03      	cmp	r3, #3
 800ab18:	d10e      	bne.n	800ab38 <WiFi_Conn_ND+0xce8>
					{
						ConectarWIFI(b);
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f7fb fd70 	bl	8006600 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	22c8      	movs	r2, #200	; 0xc8
 800ab24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d004      	beq.n	800ab4c <WiFi_Conn_ND+0xcfc>
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab48:	2b10      	cmp	r3, #16
 800ab4a:	d10f      	bne.n	800ab6c <WiFi_Conn_ND+0xd1c>
					{
						ConectarTCP(b);
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f7fb fdaf 	bl	80066b0 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ab58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab72:	2b0e      	cmp	r3, #14
 800ab74:	d005      	beq.n	800ab82 <WiFi_Conn_ND+0xd32>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab7c:	2b0f      	cmp	r3, #15
 800ab7e:	f040 8628 	bne.w	800b7d2 <WiFi_Conn_ND+0x1982>
					{
						if(b->_automatizacion >= WF_SEND )
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	f240 8622 	bls.w	800b7d2 <WiFi_Conn_ND+0x1982>
						{
							EnviarDatos(b);
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	f7fb fdd0 	bl	8006734 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800ab9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800abae:	f000 be10 	b.w	800b7d2 <WiFi_Conn_ND+0x1982>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abb8:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800abbc:	d054      	beq.n	800ac68 <WiFi_Conn_ND+0xe18>
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d04f      	beq.n	800ac68 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_wifi_disconnect)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abce:	2b0a      	cmp	r3, #10
 800abd0:	d04a      	beq.n	800ac68 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_desconectado)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abd8:	2b10      	cmp	r3, #16
 800abda:	d045      	beq.n	800ac68 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_snd_err)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abe2:	2b11      	cmp	r3, #17
 800abe4:	d040      	beq.n	800ac68 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_ok_to_send)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abec:	2b14      	cmp	r3, #20
 800abee:	d03b      	beq.n	800ac68 <WiFi_Conn_ND+0xe18>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf6:	2b12      	cmp	r3, #18
 800abf8:	d036      	beq.n	800ac68 <WiFi_Conn_ND+0xe18>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d907      	bls.n	800ac14 <WiFi_Conn_ND+0xdc4>
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d002      	beq.n	800ac14 <WiFi_Conn_ND+0xdc4>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800ac0e:	68f8      	ldr	r0, [r7, #12]
 800ac10:	f7fb fd90 	bl	8006734 <EnviarDatos>
					}
						if(b->_enviaruart==1)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d124      	bne.n	800ac68 <WiFi_Conn_ND+0xe18>
							{
								b->_estado=AT_ESP8266_ND(b);
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f7fb fe6e 	bl	8006900 <AT_ESP8266_ND>
 800ac24:	4602      	mov	r2, r0
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d109      	bne.n	800ac52 <WiFi_Conn_ND+0xe02>
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	f7f6 fc53 	bl	80014f8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	2364      	movs	r3, #100	; 0x64
 800ac62:	68b8      	ldr	r0, [r7, #8]
 800ac64:	f7fa fc12 	bl	800548c <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac6e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800ac72:	d13b      	bne.n	800acec <WiFi_Conn_ND+0xe9c>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d136      	bne.n	800acec <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_error)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d031      	beq.n	800acec <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_wifi_disconnect)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac8e:	2b0a      	cmp	r3, #10
 800ac90:	d02c      	beq.n	800acec <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_tcp_desconectado)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac98:	2b10      	cmp	r3, #16
 800ac9a:	d027      	beq.n	800acec <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_tcp_snd_err)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aca2:	2b11      	cmp	r3, #17
 800aca4:	d022      	beq.n	800acec <WiFi_Conn_ND+0xe9c>
											&&(b->_estado!=at_tcp_enviado_error))
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acac:	2b12      	cmp	r3, #18
 800acae:	d01d      	beq.n	800acec <WiFi_Conn_ND+0xe9c>
							{
								b->_enviaruart=0;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2200      	movs	r2, #0
 800acb4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d109      	bne.n	800acd6 <WiFi_Conn_ND+0xe86>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800acce:	4619      	mov	r1, r3
 800acd0:	4610      	mov	r0, r2
 800acd2:	f7f6 fc11 	bl	80014f8 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ace2:	b29a      	uxth	r2, r3
 800ace4:	2364      	movs	r3, #100	; 0x64
 800ace6:	68b8      	ldr	r0, [r7, #8]
 800ace8:	f7fa fbd0 	bl	800548c <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acf2:	2b13      	cmp	r3, #19
 800acf4:	d104      	bne.n	800ad00 <WiFi_Conn_ND+0xeb0>
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f240 22c5 	movw	r2, #709	; 0x2c5
 800acfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d019      	beq.n	800ad3e <WiFi_Conn_ND+0xeee>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad10:	2b0a      	cmp	r3, #10
 800ad12:	d014      	beq.n	800ad3e <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_fail)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad1a:	2b03      	cmp	r3, #3
 800ad1c:	d00f      	beq.n	800ad3e <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_tcp_desconectado)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad24:	2b10      	cmp	r3, #16
 800ad26:	d00a      	beq.n	800ad3e <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_tcp_snd_err)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad2e:	2b11      	cmp	r3, #17
 800ad30:	d005      	beq.n	800ad3e <WiFi_Conn_ND+0xeee>
										 ||(b->_estado==at_tcp_enviado_error))
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad38:	2b12      	cmp	r3, #18
 800ad3a:	f040 854c 	bne.w	800b7d6 <WiFi_Conn_ND+0x1986>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f240 22c1 	movw	r2, #705	; 0x2c1
 800ad44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800ad48:	f000 bd45 	b.w	800b7d6 <WiFi_Conn_ND+0x1986>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f7fb fc2b 	bl	80065a8 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad58:	2b04      	cmp	r3, #4
 800ad5a:	d112      	bne.n	800ad82 <WiFi_Conn_ND+0xf32>
				{
					Cambiar_CWMODE(b);
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f7fb fc39 	bl	80065d4 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2264      	movs	r2, #100	; 0x64
 800ad66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad88:	2b0a      	cmp	r3, #10
 800ad8a:	d009      	beq.n	800ada0 <WiFi_Conn_ND+0xf50>
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad92:	2b0d      	cmp	r3, #13
 800ad94:	d004      	beq.n	800ada0 <WiFi_Conn_ND+0xf50>
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad9c:	2b03      	cmp	r3, #3
 800ad9e:	d10e      	bne.n	800adbe <WiFi_Conn_ND+0xf6e>
				{
					ConectarWIFI(b);
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f7fb fc2d 	bl	8006600 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	22c8      	movs	r2, #200	; 0xc8
 800adaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2200      	movs	r2, #0
 800adba:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adc4:	2b0c      	cmp	r3, #12
 800adc6:	d10f      	bne.n	800ade8 <WiFi_Conn_ND+0xf98>
				{
					ConectarTCP(b);
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f7fb fc71 	bl	80066b0 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f44f 7216 	mov.w	r2, #600	; 0x258
 800add4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2200      	movs	r2, #0
 800addc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d00f      	beq.n	800ae12 <WiFi_Conn_ND+0xfc2>
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adf8:	2b10      	cmp	r3, #16
 800adfa:	d00a      	beq.n	800ae12 <WiFi_Conn_ND+0xfc2>
										 ||(b->_estado==at_tcp_snd_err)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae02:	2b11      	cmp	r3, #17
 800ae04:	d005      	beq.n	800ae12 <WiFi_Conn_ND+0xfc2>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae0c:	2b12      	cmp	r3, #18
 800ae0e:	f040 84e4 	bne.w	800b7da <WiFi_Conn_ND+0x198a>
				{
					ConectarTCP(b);
 800ae12:	68f8      	ldr	r0, [r7, #12]
 800ae14:	f7fb fc4c 	bl	80066b0 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ae1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800ae32:	f000 bcd2 	b.w	800b7da <WiFi_Conn_ND+0x198a>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f7fb fbb6 	bl	80065a8 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae42:	2b04      	cmp	r3, #4
 800ae44:	d112      	bne.n	800ae6c <WiFi_Conn_ND+0x101c>
					{
						Cambiar_CWMODE(b);
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f7fb fbc4 	bl	80065d4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2264      	movs	r2, #100	; 0x64
 800ae50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae72:	2b0a      	cmp	r3, #10
 800ae74:	d009      	beq.n	800ae8a <WiFi_Conn_ND+0x103a>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae7c:	2b0d      	cmp	r3, #13
 800ae7e:	d004      	beq.n	800ae8a <WiFi_Conn_ND+0x103a>
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	d10e      	bne.n	800aea8 <WiFi_Conn_ND+0x1058>
					{
						ConectarWIFI(b);
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f7fb fbb8 	bl	8006600 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	22c8      	movs	r2, #200	; 0xc8
 800ae94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2200      	movs	r2, #0
 800aea4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d00e      	beq.n	800aed0 <WiFi_Conn_ND+0x1080>
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb8:	2b0b      	cmp	r3, #11
 800aeba:	d009      	beq.n	800aed0 <WiFi_Conn_ND+0x1080>
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aec2:	2b0c      	cmp	r3, #12
 800aec4:	d004      	beq.n	800aed0 <WiFi_Conn_ND+0x1080>
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aecc:	2b10      	cmp	r3, #16
 800aece:	d10f      	bne.n	800aef0 <WiFi_Conn_ND+0x10a0>
					{
						ConectarTCP(b);
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f7fb fbed 	bl	80066b0 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aedc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2200      	movs	r2, #0
 800aee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800aef0:	20c8      	movs	r0, #200	; 0xc8
 800aef2:	f7f7 fe17 	bl	8002b24 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d916      	bls.n	800af2e <WiFi_Conn_ND+0x10de>
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800af06:	2b00      	cmp	r3, #0
 800af08:	d011      	beq.n	800af2e <WiFi_Conn_ND+0x10de>
					{
							EnviarDatos(b);
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f7fb fc12 	bl	8006734 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800af16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2200      	movs	r2, #0
 800af1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2200      	movs	r2, #0
 800af26:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800af2a:	f000 bc69 	b.w	800b800 <WiFi_Conn_ND+0x19b0>
							b->_estado_conexion=TCP_CONN_OK;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	f240 2261 	movw	r2, #609	; 0x261
 800af34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800af48:	f000 bc5a 	b.w	800b800 <WiFi_Conn_ND+0x19b0>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af52:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800af56:	d045      	beq.n	800afe4 <WiFi_Conn_ND+0x1194>
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d040      	beq.n	800afe4 <WiFi_Conn_ND+0x1194>
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af68:	2b0a      	cmp	r3, #10
 800af6a:	d03b      	beq.n	800afe4 <WiFi_Conn_ND+0x1194>
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af72:	2b15      	cmp	r3, #21
 800af74:	d036      	beq.n	800afe4 <WiFi_Conn_ND+0x1194>
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af7c:	2b16      	cmp	r3, #22
 800af7e:	d031      	beq.n	800afe4 <WiFi_Conn_ND+0x1194>
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af86:	2b17      	cmp	r3, #23
 800af88:	d02c      	beq.n	800afe4 <WiFi_Conn_ND+0x1194>
							{
								CrearServidorTCP(b);
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f7fb fba6 	bl	80066dc <CrearServidorTCP>
									if(b->_enviaruart==1)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800af96:	2b01      	cmp	r3, #1
 800af98:	d124      	bne.n	800afe4 <WiFi_Conn_ND+0x1194>
										{
											b->_estado=AT_ESP8266_ND(b);
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f7fb fcb0 	bl	8006900 <AT_ESP8266_ND>
 800afa0:	4602      	mov	r2, r0
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2200      	movs	r2, #0
 800afac:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d109      	bne.n	800afce <WiFi_Conn_ND+0x117e>
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800afc6:	4619      	mov	r1, r3
 800afc8:	4610      	mov	r0, r2
 800afca:	f7f6 fa95 	bl	80014f8 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800afda:	b29a      	uxth	r2, r3
 800afdc:	2364      	movs	r3, #100	; 0x64
 800afde:	68b8      	ldr	r0, [r7, #8]
 800afe0:	f7fa fa54 	bl	800548c <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afea:	2b15      	cmp	r3, #21
 800afec:	d004      	beq.n	800aff8 <WiFi_Conn_ND+0x11a8>
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aff4:	2b17      	cmp	r3, #23
 800aff6:	d104      	bne.n	800b002 <WiFi_Conn_ND+0x11b2>
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f240 3229 	movw	r2, #809	; 0x329
 800affe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b008:	2b16      	cmp	r3, #22
 800b00a:	f040 83e8 	bne.w	800b7de <WiFi_Conn_ND+0x198e>
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f240 3225 	movw	r2, #805	; 0x325
 800b014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800b018:	e3e1      	b.n	800b7de <WiFi_Conn_ND+0x198e>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f7fb fac4 	bl	80065a8 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b026:	2b04      	cmp	r3, #4
 800b028:	d112      	bne.n	800b050 <WiFi_Conn_ND+0x1200>
							{
								Cambiar_CWMODE(b);
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f7fb fad2 	bl	80065d4 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2264      	movs	r2, #100	; 0x64
 800b034:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	2200      	movs	r2, #0
 800b044:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b056:	2b0a      	cmp	r3, #10
 800b058:	d009      	beq.n	800b06e <WiFi_Conn_ND+0x121e>
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b060:	2b0d      	cmp	r3, #13
 800b062:	d004      	beq.n	800b06e <WiFi_Conn_ND+0x121e>
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b06a:	2b03      	cmp	r3, #3
 800b06c:	d10e      	bne.n	800b08c <WiFi_Conn_ND+0x123c>
							{
								ConectarWIFI(b);
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f7fb fac6 	bl	8006600 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	22c8      	movs	r2, #200	; 0xc8
 800b078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2200      	movs	r2, #0
 800b080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2200      	movs	r2, #0
 800b088:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b092:	2b02      	cmp	r3, #2
 800b094:	d005      	beq.n	800b0a2 <WiFi_Conn_ND+0x1252>
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b09c:	2b10      	cmp	r3, #16
 800b09e:	f040 83a0 	bne.w	800b7e2 <WiFi_Conn_ND+0x1992>
							{
								ConectarTCP(b);
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f7fb fb04 	bl	80066b0 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b0ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800b0c2:	e38e      	b.n	800b7e2 <WiFi_Conn_ND+0x1992>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f7fb fa6f 	bl	80065a8 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d0:	2b04      	cmp	r3, #4
 800b0d2:	d112      	bne.n	800b0fa <WiFi_Conn_ND+0x12aa>
							{
								Cambiar_CWMODE(b);
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f7fb fa7d 	bl	80065d4 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2264      	movs	r2, #100	; 0x64
 800b0de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b100:	2b0a      	cmp	r3, #10
 800b102:	d009      	beq.n	800b118 <WiFi_Conn_ND+0x12c8>
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b10a:	2b0d      	cmp	r3, #13
 800b10c:	d004      	beq.n	800b118 <WiFi_Conn_ND+0x12c8>
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b114:	2b03      	cmp	r3, #3
 800b116:	d10e      	bne.n	800b136 <WiFi_Conn_ND+0x12e6>
							{
								ConectarWIFI(b);
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f7fb fa71 	bl	8006600 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	22c8      	movs	r2, #200	; 0xc8
 800b122:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2200      	movs	r2, #0
 800b12a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2200      	movs	r2, #0
 800b132:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	d005      	beq.n	800b14c <WiFi_Conn_ND+0x12fc>
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b146:	2b10      	cmp	r3, #16
 800b148:	f040 834d 	bne.w	800b7e6 <WiFi_Conn_ND+0x1996>
							{
								ConectarTCP(b);
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f7fb faaf 	bl	80066b0 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2200      	movs	r2, #0
 800b168:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b16c:	e33b      	b.n	800b7e6 <WiFi_Conn_ND+0x1996>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	f7fb fa1a 	bl	80065a8 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b17a:	2b04      	cmp	r3, #4
 800b17c:	d112      	bne.n	800b1a4 <WiFi_Conn_ND+0x1354>
							{
								Cambiar_CWMODE(b);
 800b17e:	68f8      	ldr	r0, [r7, #12]
 800b180:	f7fb fa28 	bl	80065d4 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2264      	movs	r2, #100	; 0x64
 800b188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2200      	movs	r2, #0
 800b190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1aa:	2b0a      	cmp	r3, #10
 800b1ac:	d009      	beq.n	800b1c2 <WiFi_Conn_ND+0x1372>
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1b4:	2b0d      	cmp	r3, #13
 800b1b6:	d004      	beq.n	800b1c2 <WiFi_Conn_ND+0x1372>
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	d10e      	bne.n	800b1e0 <WiFi_Conn_ND+0x1390>
							{
								ConectarWIFI(b);
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f7fb fa1c 	bl	8006600 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	22c8      	movs	r2, #200	; 0xc8
 800b1cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d005      	beq.n	800b1f6 <WiFi_Conn_ND+0x13a6>
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1f0:	2b10      	cmp	r3, #16
 800b1f2:	f040 82fa 	bne.w	800b7ea <WiFi_Conn_ND+0x199a>
							{
								ConectarTCP(b);
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f7fb fa5a 	bl	80066b0 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2200      	movs	r2, #0
 800b20a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b216:	e2e8      	b.n	800b7ea <WiFi_Conn_ND+0x199a>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f7fb f9c5 	bl	80065a8 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b224:	2b04      	cmp	r3, #4
 800b226:	d112      	bne.n	800b24e <WiFi_Conn_ND+0x13fe>
							{
								Cambiar_CWMODE(b);
 800b228:	68f8      	ldr	r0, [r7, #12]
 800b22a:	f7fb f9d3 	bl	80065d4 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2264      	movs	r2, #100	; 0x64
 800b232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2200      	movs	r2, #0
 800b23a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2200      	movs	r2, #0
 800b24a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b254:	2b0a      	cmp	r3, #10
 800b256:	d009      	beq.n	800b26c <WiFi_Conn_ND+0x141c>
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b25e:	2b0d      	cmp	r3, #13
 800b260:	d004      	beq.n	800b26c <WiFi_Conn_ND+0x141c>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b268:	2b03      	cmp	r3, #3
 800b26a:	d10e      	bne.n	800b28a <WiFi_Conn_ND+0x143a>
							{
								ConectarWIFI(b);
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f7fb f9c7 	bl	8006600 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	22c8      	movs	r2, #200	; 0xc8
 800b276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2200      	movs	r2, #0
 800b286:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b290:	2b02      	cmp	r3, #2
 800b292:	d005      	beq.n	800b2a0 <WiFi_Conn_ND+0x1450>
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b29a:	2b10      	cmp	r3, #16
 800b29c:	f040 82a7 	bne.w	800b7ee <WiFi_Conn_ND+0x199e>
							{
								ConectarTCP(b);
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f7fb fa05 	bl	80066b0 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b2ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b2c0:	e295      	b.n	800b7ee <WiFi_Conn_ND+0x199e>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800b2c2:	68f8      	ldr	r0, [r7, #12]
 800b2c4:	f7fb f970 	bl	80065a8 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2d6:	2b04      	cmp	r3, #4
 800b2d8:	d112      	bne.n	800b300 <WiFi_Conn_ND+0x14b0>
								{
									Cambiar_CWMODE(b);
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f7fb f97a 	bl	80065d4 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2264      	movs	r2, #100	; 0x64
 800b2e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b306:	2b0a      	cmp	r3, #10
 800b308:	d009      	beq.n	800b31e <WiFi_Conn_ND+0x14ce>
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b310:	2b0d      	cmp	r3, #13
 800b312:	d004      	beq.n	800b31e <WiFi_Conn_ND+0x14ce>
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b31a:	2b03      	cmp	r3, #3
 800b31c:	d10e      	bne.n	800b33c <WiFi_Conn_ND+0x14ec>
								{
									ConectarWIFI(b);
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f7fb f96e 	bl	8006600 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	22c8      	movs	r2, #200	; 0xc8
 800b328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2200      	movs	r2, #0
 800b330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b342:	2b02      	cmp	r3, #2
 800b344:	d004      	beq.n	800b350 <WiFi_Conn_ND+0x1500>
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b34c:	2b10      	cmp	r3, #16
 800b34e:	d10f      	bne.n	800b370 <WiFi_Conn_ND+0x1520>
								{
									ConectarTCP(b);
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f7fb f9ad 	bl	80066b0 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b35c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2200      	movs	r2, #0
 800b364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b376:	2b01      	cmp	r3, #1
 800b378:	f040 823b 	bne.w	800b7f2 <WiFi_Conn_ND+0x19a2>
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b382:	2b00      	cmp	r3, #0
 800b384:	f000 8235 	beq.w	800b7f2 <WiFi_Conn_ND+0x19a2>
								{
									EnviarDatosSRVR(b);
 800b388:	68f8      	ldr	r0, [r7, #12]
 800b38a:	f7fb f9bd 	bl	8006708 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b394:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800b3a8:	e223      	b.n	800b7f2 <WiFi_Conn_ND+0x19a2>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3b0:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b3b4:	d063      	beq.n	800b47e <WiFi_Conn_ND+0x162e>
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3bc:	2b02      	cmp	r3, #2
 800b3be:	d05e      	beq.n	800b47e <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_wifi_disconnect)&&
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b3c6:	2b0a      	cmp	r3, #10
 800b3c8:	d059      	beq.n	800b47e <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_wifi_connected)&&
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800b3d0:	2b0b      	cmp	r3, #11
 800b3d2:	d054      	beq.n	800b47e <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_wifi_gotip)&&
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800b3da:	2b0c      	cmp	r3, #12
 800b3dc:	d04f      	beq.n	800b47e <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_desconectado)&&
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800b3e4:	2b10      	cmp	r3, #16
 800b3e6:	d04a      	beq.n	800b47e <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_snd_err)&&
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800b3ee:	2b11      	cmp	r3, #17
 800b3f0:	d045      	beq.n	800b47e <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800b3f8:	2b12      	cmp	r3, #18
 800b3fa:	d040      	beq.n	800b47e <WiFi_Conn_ND+0x162e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800b402:	2b13      	cmp	r3, #19
 800b404:	d03b      	beq.n	800b47e <WiFi_Conn_ND+0x162e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b40c:	2b16      	cmp	r3, #22
 800b40e:	d036      	beq.n	800b47e <WiFi_Conn_ND+0x162e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b416:	2b19      	cmp	r3, #25
 800b418:	d031      	beq.n	800b47e <WiFi_Conn_ND+0x162e>
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b420:	2b00      	cmp	r3, #0
 800b422:	d02c      	beq.n	800b47e <WiFi_Conn_ND+0x162e>
								{
								EnviarDatosSRVR(b);
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f7fb f96f 	bl	8006708 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b430:	2b01      	cmp	r3, #1
 800b432:	d124      	bne.n	800b47e <WiFi_Conn_ND+0x162e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	f7fb fa63 	bl	8006900 <AT_ESP8266_ND>
 800b43a:	4602      	mov	r2, r0
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2200      	movs	r2, #0
 800b446:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800b450:	2b01      	cmp	r3, #1
 800b452:	d109      	bne.n	800b468 <WiFi_Conn_ND+0x1618>
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b460:	4619      	mov	r1, r3
 800b462:	4610      	mov	r0, r2
 800b464:	f7f6 f848 	bl	80014f8 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b474:	b29a      	uxth	r2, r3
 800b476:	2364      	movs	r3, #100	; 0x64
 800b478:	68b8      	ldr	r0, [r7, #8]
 800b47a:	f7fa f807 	bl	800548c <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b484:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b488:	d154      	bne.n	800b534 <WiFi_Conn_ND+0x16e4>
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b490:	2b01      	cmp	r3, #1
 800b492:	d14f      	bne.n	800b534 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_error)&&
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	d04a      	beq.n	800b534 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_wifi_disconnect)&&
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800b4a4:	2b0a      	cmp	r3, #10
 800b4a6:	d045      	beq.n	800b534 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_wifi_connected)&&
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b4ae:	2b0b      	cmp	r3, #11
 800b4b0:	d040      	beq.n	800b534 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_wifi_gotip)&&
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b4b8:	2b0c      	cmp	r3, #12
 800b4ba:	d03b      	beq.n	800b534 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_desconectado)&&
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b4c2:	2b10      	cmp	r3, #16
 800b4c4:	d036      	beq.n	800b534 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_snd_err)&&
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b4cc:	2b11      	cmp	r3, #17
 800b4ce:	d031      	beq.n	800b534 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b4d6:	2b12      	cmp	r3, #18
 800b4d8:	d02c      	beq.n	800b534 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b4e0:	2b13      	cmp	r3, #19
 800b4e2:	d027      	beq.n	800b534 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b4ea:	2b16      	cmp	r3, #22
 800b4ec:	d022      	beq.n	800b534 <WiFi_Conn_ND+0x16e4>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4f4:	2b19      	cmp	r3, #25
 800b4f6:	d01d      	beq.n	800b534 <WiFi_Conn_ND+0x16e4>
										{
											b->_enviaruart=0;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f8d3 3d50 	ldr.w	r3, [r3, #3408]	; 0xd50
 800b506:	2b01      	cmp	r3, #1
 800b508:	d109      	bne.n	800b51e <WiFi_Conn_ND+0x16ce>
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b516:	4619      	mov	r1, r3
 800b518:	4610      	mov	r0, r2
 800b51a:	f7f5 ffed 	bl	80014f8 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b52a:	b29a      	uxth	r2, r3
 800b52c:	2364      	movs	r3, #100	; 0x64
 800b52e:	68b8      	ldr	r0, [r7, #8]
 800b530:	f7f9 ffac 	bl	800548c <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b53a:	2b13      	cmp	r3, #19
 800b53c:	d104      	bne.n	800b548 <WiFi_Conn_ND+0x16f8>
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f240 328d 	movw	r2, #909	; 0x38d
 800b544:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d02d      	beq.n	800b5ae <WiFi_Conn_ND+0x175e>
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b558:	2b04      	cmp	r3, #4
 800b55a:	d028      	beq.n	800b5ae <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b562:	2b0a      	cmp	r3, #10
 800b564:	d023      	beq.n	800b5ae <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b56c:	2b0b      	cmp	r3, #11
 800b56e:	d01e      	beq.n	800b5ae <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b576:	2b0c      	cmp	r3, #12
 800b578:	d019      	beq.n	800b5ae <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b580:	2b10      	cmp	r3, #16
 800b582:	d014      	beq.n	800b5ae <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b58a:	2b11      	cmp	r3, #17
 800b58c:	d00f      	beq.n	800b5ae <WiFi_Conn_ND+0x175e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b594:	2b12      	cmp	r3, #18
 800b596:	d00a      	beq.n	800b5ae <WiFi_Conn_ND+0x175e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b59e:	2b16      	cmp	r3, #22
 800b5a0:	d005      	beq.n	800b5ae <WiFi_Conn_ND+0x175e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5a8:	2b19      	cmp	r3, #25
 800b5aa:	f040 8124 	bne.w	800b7f6 <WiFi_Conn_ND+0x19a6>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f240 3289 	movw	r2, #905	; 0x389
 800b5b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b5b8:	e11d      	b.n	800b7f6 <WiFi_Conn_ND+0x19a6>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f7fa fff4 	bl	80065a8 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5c6:	2b04      	cmp	r3, #4
 800b5c8:	d009      	beq.n	800b5de <WiFi_Conn_ND+0x178e>
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5d0:	2b0b      	cmp	r3, #11
 800b5d2:	d004      	beq.n	800b5de <WiFi_Conn_ND+0x178e>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5da:	2b0c      	cmp	r3, #12
 800b5dc:	d112      	bne.n	800b604 <WiFi_Conn_ND+0x17b4>
							{
								Cambiar_CWMODE(b);
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f7fa fff8 	bl	80065d4 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2264      	movs	r2, #100	; 0x64
 800b5e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2200      	movs	r2, #0
 800b600:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b60a:	2b0a      	cmp	r3, #10
 800b60c:	d009      	beq.n	800b622 <WiFi_Conn_ND+0x17d2>
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b614:	2b0d      	cmp	r3, #13
 800b616:	d004      	beq.n	800b622 <WiFi_Conn_ND+0x17d2>
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b61e:	2b03      	cmp	r3, #3
 800b620:	d10e      	bne.n	800b640 <WiFi_Conn_ND+0x17f0>
							{
								ConectarWIFI(b);
 800b622:	68f8      	ldr	r0, [r7, #12]
 800b624:	f7fa ffec 	bl	8006600 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	22c8      	movs	r2, #200	; 0xc8
 800b62c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2200      	movs	r2, #0
 800b634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b646:	2b16      	cmp	r3, #22
 800b648:	d10c      	bne.n	800b664 <WiFi_Conn_ND+0x1814>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f240 3225 	movw	r2, #805	; 0x325
 800b650:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2200      	movs	r2, #0
 800b660:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b66a:	2b18      	cmp	r3, #24
 800b66c:	d10c      	bne.n	800b688 <WiFi_Conn_ND+0x1838>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f240 3229 	movw	r2, #809	; 0x329
 800b674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2200      	movs	r2, #0
 800b684:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b68e:	2b19      	cmp	r3, #25
 800b690:	d008      	beq.n	800b6a4 <WiFi_Conn_ND+0x1854>
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b698:	2b11      	cmp	r3, #17
 800b69a:	d003      	beq.n	800b6a4 <WiFi_Conn_ND+0x1854>
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2212      	movs	r2, #18
 800b6a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	f040 80a5 	bne.w	800b7fa <WiFi_Conn_ND+0x19aa>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b6b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800b6ca:	e096      	b.n	800b7fa <WiFi_Conn_ND+0x19aa>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f7fa ff6b 	bl	80065a8 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6d8:	2b04      	cmp	r3, #4
 800b6da:	d009      	beq.n	800b6f0 <WiFi_Conn_ND+0x18a0>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6e2:	2b0b      	cmp	r3, #11
 800b6e4:	d004      	beq.n	800b6f0 <WiFi_Conn_ND+0x18a0>
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6ec:	2b0c      	cmp	r3, #12
 800b6ee:	d112      	bne.n	800b716 <WiFi_Conn_ND+0x18c6>
								{
									Cambiar_CWMODE(b);
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f7fa ff6f 	bl	80065d4 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2264      	movs	r2, #100	; 0x64
 800b6fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2200      	movs	r2, #0
 800b702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2200      	movs	r2, #0
 800b70a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2200      	movs	r2, #0
 800b712:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )||(b->_estado==at_fail)) //Si me desconecto, me vuelvo a conectar
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b71c:	2b0a      	cmp	r3, #10
 800b71e:	d009      	beq.n	800b734 <WiFi_Conn_ND+0x18e4>
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b726:	2b0d      	cmp	r3, #13
 800b728:	d004      	beq.n	800b734 <WiFi_Conn_ND+0x18e4>
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b730:	2b03      	cmp	r3, #3
 800b732:	d10e      	bne.n	800b752 <WiFi_Conn_ND+0x1902>
								{
									ConectarWIFI(b);
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f7fa ff63 	bl	8006600 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	22c8      	movs	r2, #200	; 0xc8
 800b73e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2200      	movs	r2, #0
 800b746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d004      	beq.n	800b766 <WiFi_Conn_ND+0x1916>
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b762:	2b01      	cmp	r3, #1
 800b764:	d14b      	bne.n	800b7fe <WiFi_Conn_ND+0x19ae>
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d046      	beq.n	800b7fe <WiFi_Conn_ND+0x19ae>
								{
									EnviarDatosSRVR(b);
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f7fa ffc9 	bl	8006708 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b77c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2200      	movs	r2, #0
 800b784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2200      	movs	r2, #0
 800b78c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2200      	movs	r2, #0
 800b794:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2200      	movs	r2, #0
 800b79c:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b7a0:	e02d      	b.n	800b7fe <WiFi_Conn_ND+0x19ae>
			break;
 800b7a2:	bf00      	nop
 800b7a4:	e02c      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
			break;
 800b7a6:	bf00      	nop
 800b7a8:	e02a      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
			break;
 800b7aa:	bf00      	nop
 800b7ac:	e028      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
			break;
 800b7ae:	bf00      	nop
 800b7b0:	e026      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
			break;
 800b7b2:	bf00      	nop
 800b7b4:	e024      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
			break;
 800b7b6:	bf00      	nop
 800b7b8:	e022      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
			break;
 800b7ba:	bf00      	nop
 800b7bc:	e020      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
			break;
 800b7be:	bf00      	nop
 800b7c0:	e01e      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
			break;
 800b7c2:	bf00      	nop
 800b7c4:	e01c      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
			break;
 800b7c6:	bf00      	nop
 800b7c8:	e01a      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
			break;
 800b7ca:	bf00      	nop
 800b7cc:	e018      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
			break;
 800b7ce:	bf00      	nop
 800b7d0:	e016      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
			break;
 800b7d2:	bf00      	nop
 800b7d4:	e014      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
			break;
 800b7d6:	bf00      	nop
 800b7d8:	e012      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
			break;
 800b7da:	bf00      	nop
 800b7dc:	e010      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
						break;
 800b7de:	bf00      	nop
 800b7e0:	e00e      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
						break;
 800b7e2:	bf00      	nop
 800b7e4:	e00c      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
						break;
 800b7e6:	bf00      	nop
 800b7e8:	e00a      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
						break;
 800b7ea:	bf00      	nop
 800b7ec:	e008      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
						break;
 800b7ee:	bf00      	nop
 800b7f0:	e006      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
						break;
 800b7f2:	bf00      	nop
 800b7f4:	e004      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
						break;
 800b7f6:	bf00      	nop
 800b7f8:	e002      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
						break;
 800b7fa:	bf00      	nop
 800b7fc:	e000      	b.n	800b800 <WiFi_Conn_ND+0x19b0>
						break;
 800b7fe:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b806:	4618      	mov	r0, r3
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop

0800b810 <httpPOST2>:
			return 0;
		}
}

httpPOST2(char * endpoint, char* server_ip, char * port,  uint16_t * vect_data, uint8_t * decimal,int cdad, uint16_t devId, char  * post, char * body, int max_char)
{
 800b810:	b5b0      	push	{r4, r5, r7, lr}
 800b812:	b08c      	sub	sp, #48	; 0x30
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	607a      	str	r2, [r7, #4]
 800b81c:	603b      	str	r3, [r7, #0]
	post[0]='\0';
 800b81e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b820:	2200      	movs	r2, #0
 800b822:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b826:	2200      	movs	r2, #0
 800b828:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b82a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b82c:	f7f4 fce2 	bl	80001f4 <strlen>
 800b830:	4603      	mov	r3, r0
 800b832:	461a      	mov	r2, r3
 800b834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b836:	4413      	add	r3, r2
 800b838:	4a9d      	ldr	r2, [pc, #628]	; (800bab0 <httpPOST2+0x2a0>)
 800b83a:	6810      	ldr	r0, [r2, #0]
 800b83c:	6018      	str	r0, [r3, #0]
 800b83e:	8892      	ldrh	r2, [r2, #4]
 800b840:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	f7f4 fcd6 	bl	80001f4 <strlen>
 800b848:	4603      	mov	r3, r0
 800b84a:	461a      	mov	r2, r3
 800b84c:	68f9      	ldr	r1, [r7, #12]
 800b84e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b850:	f003 fe13 	bl	800f47a <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b854:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b856:	f7f4 fccd 	bl	80001f4 <strlen>
 800b85a:	4603      	mov	r3, r0
 800b85c:	461a      	mov	r2, r3
 800b85e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b860:	4413      	add	r3, r2
 800b862:	4994      	ldr	r1, [pc, #592]	; (800bab4 <httpPOST2+0x2a4>)
 800b864:	461a      	mov	r2, r3
 800b866:	460b      	mov	r3, r1
 800b868:	cb03      	ldmia	r3!, {r0, r1}
 800b86a:	6010      	str	r0, [r2, #0]
 800b86c:	6051      	str	r1, [r2, #4]
 800b86e:	8819      	ldrh	r1, [r3, #0]
 800b870:	789b      	ldrb	r3, [r3, #2]
 800b872:	8111      	strh	r1, [r2, #8]
 800b874:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b876:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b878:	f7f4 fcbc 	bl	80001f4 <strlen>
 800b87c:	4603      	mov	r3, r0
 800b87e:	461a      	mov	r2, r3
 800b880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b882:	4413      	add	r3, r2
 800b884:	4a8c      	ldr	r2, [pc, #560]	; (800bab8 <httpPOST2+0x2a8>)
 800b886:	8811      	ldrh	r1, [r2, #0]
 800b888:	7892      	ldrb	r2, [r2, #2]
 800b88a:	8019      	strh	r1, [r3, #0]
 800b88c:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b88e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b890:	f7f4 fcb0 	bl	80001f4 <strlen>
 800b894:	4603      	mov	r3, r0
 800b896:	461a      	mov	r2, r3
 800b898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b89a:	4413      	add	r3, r2
 800b89c:	4a87      	ldr	r2, [pc, #540]	; (800babc <httpPOST2+0x2ac>)
 800b89e:	6810      	ldr	r0, [r2, #0]
 800b8a0:	6018      	str	r0, [r3, #0]
 800b8a2:	8891      	ldrh	r1, [r2, #4]
 800b8a4:	7992      	ldrb	r2, [r2, #6]
 800b8a6:	8099      	strh	r1, [r3, #4]
 800b8a8:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b8aa:	68b8      	ldr	r0, [r7, #8]
 800b8ac:	f7f4 fca2 	bl	80001f4 <strlen>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	68b9      	ldr	r1, [r7, #8]
 800b8b6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b8b8:	f003 fddf 	bl	800f47a <strncat>
	strncat(post,":",1);
 800b8bc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b8be:	f7f4 fc99 	bl	80001f4 <strlen>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8c8:	4413      	add	r3, r2
 800b8ca:	497d      	ldr	r1, [pc, #500]	; (800bac0 <httpPOST2+0x2b0>)
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	881b      	ldrh	r3, [r3, #0]
 800b8d2:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f7f4 fc8d 	bl	80001f4 <strlen>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	461a      	mov	r2, r3
 800b8de:	6879      	ldr	r1, [r7, #4]
 800b8e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b8e2:	f003 fdca 	bl	800f47a <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b8e6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b8e8:	f7f4 fc84 	bl	80001f4 <strlen>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8f2:	4413      	add	r3, r2
 800b8f4:	4a70      	ldr	r2, [pc, #448]	; (800bab8 <httpPOST2+0x2a8>)
 800b8f6:	8811      	ldrh	r1, [r2, #0]
 800b8f8:	7892      	ldrb	r2, [r2, #2]
 800b8fa:	8019      	strh	r1, [r3, #0]
 800b8fc:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b8fe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b900:	f7f4 fc78 	bl	80001f4 <strlen>
 800b904:	4603      	mov	r3, r0
 800b906:	461a      	mov	r2, r3
 800b908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b90a:	4413      	add	r3, r2
 800b90c:	4a6d      	ldr	r2, [pc, #436]	; (800bac4 <httpPOST2+0x2b4>)
 800b90e:	461d      	mov	r5, r3
 800b910:	4614      	mov	r4, r2
 800b912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b914:	6028      	str	r0, [r5, #0]
 800b916:	6069      	str	r1, [r5, #4]
 800b918:	60aa      	str	r2, [r5, #8]
 800b91a:	60eb      	str	r3, [r5, #12]
 800b91c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b91e:	6128      	str	r0, [r5, #16]
 800b920:	6169      	str	r1, [r5, #20]
 800b922:	61aa      	str	r2, [r5, #24]
 800b924:	8823      	ldrh	r3, [r4, #0]
 800b926:	78a2      	ldrb	r2, [r4, #2]
 800b928:	83ab      	strh	r3, [r5, #28]
 800b92a:	4613      	mov	r3, r2
 800b92c:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b92e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b930:	f7f4 fc60 	bl	80001f4 <strlen>
 800b934:	4603      	mov	r3, r0
 800b936:	461a      	mov	r2, r3
 800b938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b93a:	4413      	add	r3, r2
 800b93c:	4a5e      	ldr	r2, [pc, #376]	; (800bab8 <httpPOST2+0x2a8>)
 800b93e:	8811      	ldrh	r1, [r2, #0]
 800b940:	7892      	ldrb	r2, [r2, #2]
 800b942:	8019      	strh	r1, [r3, #0]
 800b944:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b946:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b948:	f7f4 fc54 	bl	80001f4 <strlen>
 800b94c:	4603      	mov	r3, r0
 800b94e:	461a      	mov	r2, r3
 800b950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b952:	4413      	add	r3, r2
 800b954:	4a5c      	ldr	r2, [pc, #368]	; (800bac8 <httpPOST2+0x2b8>)
 800b956:	461c      	mov	r4, r3
 800b958:	4615      	mov	r5, r2
 800b95a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b95c:	6020      	str	r0, [r4, #0]
 800b95e:	6061      	str	r1, [r4, #4]
 800b960:	60a2      	str	r2, [r4, #8]
 800b962:	60e3      	str	r3, [r4, #12]

	char _devId[8];
	_devId[0]='\0';
 800b964:	2300      	movs	r3, #0
 800b966:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	INTOA(devId, _devId);
 800b96a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b96e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b972:	4611      	mov	r1, r2
 800b974:	4618      	mov	r0, r3
 800b976:	f003 fadf 	bl	800ef38 <INTOA>
	char d[8];
	d[0]='\0';
 800b97a:	2300      	movs	r3, #0
 800b97c:	773b      	strb	r3, [r7, #28]
	for (int i=0; i < cdad;i++)
 800b97e:	2300      	movs	r3, #0
 800b980:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b982:	e037      	b.n	800b9f4 <httpPOST2+0x1e4>
	{
		FTOA(vect_data[i],d,decimal[i]);
 800b984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b986:	005b      	lsls	r3, r3, #1
 800b988:	683a      	ldr	r2, [r7, #0]
 800b98a:	4413      	add	r3, r2
 800b98c:	881b      	ldrh	r3, [r3, #0]
 800b98e:	4618      	mov	r0, r3
 800b990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b992:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b994:	4413      	add	r3, r2
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	461a      	mov	r2, r3
 800b99a:	f107 031c 	add.w	r3, r7, #28
 800b99e:	4619      	mov	r1, r3
 800b9a0:	f003 fafe 	bl	800efa0 <FTOA>
		strncat(body,data[i],strlen(data[i]));
 800b9a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	4413      	add	r3, r2
 800b9ac:	005b      	lsls	r3, r3, #1
 800b9ae:	4a47      	ldr	r2, [pc, #284]	; (800bacc <httpPOST2+0x2bc>)
 800b9b0:	189c      	adds	r4, r3, r2
 800b9b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	4413      	add	r3, r2
 800b9ba:	005b      	lsls	r3, r3, #1
 800b9bc:	4a43      	ldr	r2, [pc, #268]	; (800bacc <httpPOST2+0x2bc>)
 800b9be:	4413      	add	r3, r2
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7f4 fc17 	bl	80001f4 <strlen>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	4621      	mov	r1, r4
 800b9cc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b9ce:	f003 fd54 	bl	800f47a <strncat>
		strncat(body,d,strlen(d));
 800b9d2:	f107 031c 	add.w	r3, r7, #28
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7f4 fc0c 	bl	80001f4 <strlen>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	f107 031c 	add.w	r3, r7, #28
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b9e6:	f003 fd48 	bl	800f47a <strncat>
		d[0]='\0';
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	773b      	strb	r3, [r7, #28]
	for (int i=0; i < cdad;i++)
 800b9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	dbc3      	blt.n	800b984 <httpPOST2+0x174>
	}
	// Conversión de datos recibido por ModBUS

	strncat(body,deviceId,strlen(deviceId));
 800b9fc:	4834      	ldr	r0, [pc, #208]	; (800bad0 <httpPOST2+0x2c0>)
 800b9fe:	f7f4 fbf9 	bl	80001f4 <strlen>
 800ba02:	4603      	mov	r3, r0
 800ba04:	461a      	mov	r2, r3
 800ba06:	4932      	ldr	r1, [pc, #200]	; (800bad0 <httpPOST2+0x2c0>)
 800ba08:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ba0a:	f003 fd36 	bl	800f47a <strncat>
	strncat(body,_devId,strlen(_devId));
 800ba0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7f4 fbee 	bl	80001f4 <strlen>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba1e:	4619      	mov	r1, r3
 800ba20:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ba22:	f003 fd2a 	bl	800f47a <strncat>

	strncat(body,"}",strlen("}"));
 800ba26:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ba28:	f7f4 fbe4 	bl	80001f4 <strlen>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	461a      	mov	r2, r3
 800ba30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba32:	4413      	add	r3, r2
 800ba34:	4927      	ldr	r1, [pc, #156]	; (800bad4 <httpPOST2+0x2c4>)
 800ba36:	461a      	mov	r2, r3
 800ba38:	460b      	mov	r3, r1
 800ba3a:	881b      	ldrh	r3, [r3, #0]
 800ba3c:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800ba3e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ba40:	f7f4 fbd8 	bl	80001f4 <strlen>
 800ba44:	4602      	mov	r2, r0
 800ba46:	f107 0314 	add.w	r3, r7, #20
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	f003 fa73 	bl	800ef38 <INTOA>
	strncat(post,length,strlen(length));
 800ba52:	f107 0314 	add.w	r3, r7, #20
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7f4 fbcc 	bl	80001f4 <strlen>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	f107 0314 	add.w	r3, r7, #20
 800ba62:	4619      	mov	r1, r3
 800ba64:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ba66:	f003 fd08 	bl	800f47a <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800ba6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ba6c:	f7f4 fbc2 	bl	80001f4 <strlen>
 800ba70:	4603      	mov	r3, r0
 800ba72:	461a      	mov	r2, r3
 800ba74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba76:	4413      	add	r3, r2
 800ba78:	4a17      	ldr	r2, [pc, #92]	; (800bad8 <httpPOST2+0x2c8>)
 800ba7a:	6810      	ldr	r0, [r2, #0]
 800ba7c:	6018      	str	r0, [r3, #0]
 800ba7e:	7912      	ldrb	r2, [r2, #4]
 800ba80:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800ba82:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ba84:	f7f4 fbb6 	bl	80001f4 <strlen>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d20a      	bcs.n	800baa6 <httpPOST2+0x296>
	{
		strncat(post,body,strlen(body));
 800ba90:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ba92:	f7f4 fbaf 	bl	80001f4 <strlen>
 800ba96:	4603      	mov	r3, r0
 800ba98:	461a      	mov	r2, r3
 800ba9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba9c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ba9e:	f003 fcec 	bl	800f47a <strncat>
		return 1 ;
 800baa2:	2301      	movs	r3, #1
 800baa4:	e000      	b.n	800baa8 <httpPOST2+0x298>
	}
		else
		{
			return 0;
 800baa6:	2300      	movs	r3, #0
		}
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3730      	adds	r7, #48	; 0x30
 800baac:	46bd      	mov	sp, r7
 800baae:	bdb0      	pop	{r4, r5, r7, pc}
 800bab0:	08010c88 	.word	0x08010c88
 800bab4:	08010c90 	.word	0x08010c90
 800bab8:	08010c9c 	.word	0x08010c9c
 800babc:	08010ca0 	.word	0x08010ca0
 800bac0:	08010ca8 	.word	0x08010ca8
 800bac4:	08010cac 	.word	0x08010cac
 800bac8:	08010ccc 	.word	0x08010ccc
 800bacc:	200000b0 	.word	0x200000b0
 800bad0:	20000150 	.word	0x20000150
 800bad4:	08010cdc 	.word	0x08010cdc
 800bad8:	08010ce0 	.word	0x08010ce0

0800badc <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800badc:	b480      	push	{r7}
 800bade:	b083      	sub	sp, #12
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800baf6:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2201      	movs	r2, #1
 800bafc:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2220      	movs	r2, #32
 800bb02:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
	m->_Coils=0xF0F0AF5A;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a1c      	ldr	r2, [pc, #112]	; (800bb7c <ModBUS_Config+0xa0>)
 800bb0a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2201      	movs	r2, #1
 800bb12:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2220      	movs	r2, #32
 800bb18:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
	m->_Inputs=0xA5FA0F0F;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	4a18      	ldr	r2, [pc, #96]	; (800bb80 <ModBUS_Config+0xa4>)
 800bb20:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2201      	movs	r2, #1
 800bb28:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2210      	movs	r2, #16
 800bb2e:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2201      	movs	r2, #1
 800bb36:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2210      	movs	r2, #16
 800bb3c:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2220      	movs	r2, #32
 800bb4a:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2201      	movs	r2, #1
 800bb52:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2220      	movs	r2, #32
 800bb5e:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2201      	movs	r2, #1
 800bb66:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2220      	movs	r2, #32
 800bb6c:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
}
 800bb70:	bf00      	nop
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr
 800bb7c:	f0f0af5a 	.word	0xf0f0af5a
 800bb80:	a5fa0f0f 	.word	0xa5fa0f0f

0800bb84 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	3305      	adds	r3, #5
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	3306      	adds	r3, #6
 800bb96:	683a      	ldr	r2, [r7, #0]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d10b      	bne.n	800bbb4 <ModBUS_Check+0x30>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	3302      	adds	r3, #2
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	461a      	mov	r2, r3
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	3303      	adds	r3, #3
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	4413      	add	r3, r2
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d101      	bne.n	800bbb4 <ModBUS_Check+0x30>
	{
		return(1);
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e000      	b.n	800bbb6 <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800bbb4:	2300      	movs	r3, #0
	}
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	370c      	adds	r7, #12
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr

0800bbc2 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800bbc2:	b480      	push	{r7}
 800bbc4:	b083      	sub	sp, #12
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f893 2218 	ldrb.w	r2, [r3, #536]	; 0x218
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	7c9b      	ldrb	r3, [r3, #18]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d11d      	bne.n	800bc14 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f893 2219 	ldrb.w	r2, [r3, #537]	; 0x219
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	7cdb      	ldrb	r3, [r3, #19]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d116      	bne.n	800bc14 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d10f      	bne.n	800bc14 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f893 221b 	ldrb.w	r2, [r3, #539]	; 0x21b
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	7d5b      	ldrb	r3, [r3, #21]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d108      	bne.n	800bc14 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 221f 	ldrb.w	r2, [r3, #543]	; 0x21f
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	7e5b      	ldrb	r3, [r3, #25]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d101      	bne.n	800bc14 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800bc10:	2301      	movs	r3, #1
 800bc12:	e000      	b.n	800bc16 <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800bc14:	2300      	movs	r3, #0
	}
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t a, uint16_t b)
{
 800bc22:	b480      	push	{r7}
 800bc24:	b085      	sub	sp, #20
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	70fb      	strb	r3, [r7, #3]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	803b      	strh	r3, [r7, #0]
	uint8_t c=0;
 800bc32:	2300      	movs	r3, #0
 800bc34:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800bc3c:	78fa      	ldrb	r2, [r7, #3]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d901      	bls.n	800bc46 <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800bc42:	2301      	movs	r3, #1
 800bc44:	e015      	b.n	800bc72 <ModBUS_F03_Assign+0x50>
	}
	else
	{
		m2->_Holding_Registers[(a*2)+1]=b;
 800bc46:	78fb      	ldrb	r3, [r7, #3]
 800bc48:	005b      	lsls	r3, r3, #1
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	883a      	ldrh	r2, [r7, #0]
 800bc4e:	b2d1      	uxtb	r1, r2
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	4413      	add	r3, r2
 800bc54:	460a      	mov	r2, r1
 800bc56:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		c=b>>8;
 800bc5a:	883b      	ldrh	r3, [r7, #0]
 800bc5c:	0a1b      	lsrs	r3, r3, #8
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(a*2)]=c;
 800bc62:	78fb      	ldrb	r3, [r7, #3]
 800bc64:	005b      	lsls	r3, r3, #1
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	4413      	add	r3, r2
 800bc6a:	7bfa      	ldrb	r2, [r7, #15]
 800bc6c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

		return(0);
 800bc70:	2300      	movs	r3, #0
	}
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3714      	adds	r7, #20
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr

0800bc7e <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t a)
{
 800bc7e:	b480      	push	{r7}
 800bc80:	b085      	sub	sp, #20
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
 800bc86:	460b      	mov	r3, r1
 800bc88:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800bc98:	78fa      	ldrb	r2, [r7, #3]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d901      	bls.n	800bca2 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e015      	b.n	800bcce <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(a*2)];
 800bca2:	78fb      	ldrb	r3, [r7, #3]
 800bca4:	005b      	lsls	r3, r3, #1
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	4413      	add	r3, r2
 800bcaa:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800bcae:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800bcb0:	89fb      	ldrh	r3, [r7, #14]
 800bcb2:	021b      	lsls	r3, r3, #8
 800bcb4:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(a*2)+1];
 800bcb6:	78fb      	ldrb	r3, [r7, #3]
 800bcb8:	005b      	lsls	r3, r3, #1
 800bcba:	3301      	adds	r3, #1
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800bcc4:	b29a      	uxth	r2, r3
 800bcc6:	89fb      	ldrh	r3, [r7, #14]
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	81fb      	strh	r3, [r7, #14]

		/*m2->_Holding_Registers[(a*2)+1]=b;
		c=b>>8;
		m2->_Holding_Registers[(a*2)]=c;*/
		return(n);
 800bccc:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3714      	adds	r7, #20
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr

0800bcda <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b083      	sub	sp, #12
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
 800bce2:	460b      	mov	r3, r1
 800bce4:	807b      	strh	r3, [r7, #2]
 800bce6:	4613      	mov	r3, r2
 800bce8:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800bcea:	887b      	ldrh	r3, [r7, #2]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	bf14      	ite	ne
 800bcf0:	2301      	movne	r3, #1
 800bcf2:	2300      	moveq	r3, #0
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
	addr&=0xF0;
 800bcfe:	887b      	ldrh	r3, [r7, #2]
 800bd00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd04:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800bd06:	887b      	ldrh	r3, [r7, #2]
 800bd08:	0a1b      	lsrs	r3, r3, #8
 800bd0a:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800bd0c:	887b      	ldrh	r3, [r7, #2]
 800bd0e:	f003 030f 	and.w	r3, r3, #15
 800bd12:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	m2->_MBUS_2SND[1]=0x00;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	m2->_MBUS_2SND[2]=0x00;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2200      	movs	r2, #0
 800bd28:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
	m2->_MBUS_2SND[3]=0x00;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
	m2->_MBUS_2SND[4]=0x00;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2200      	movs	r2, #0
 800bd38:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	m2->_MBUS_2SND[5]=0x06;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2206      	movs	r2, #6
 800bd40:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	m2->_MBUS_2SND[6]=m2->_address;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	781a      	ldrb	r2, [r3, #0]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	m2->_MBUS_2SND[7]=0x03;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2203      	movs	r2, #3
 800bd52:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
	m2->_MBUS_2SND[8]=addr;
 800bd56:	887b      	ldrh	r3, [r7, #2]
 800bd58:	b2da      	uxtb	r2, r3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220

	m2->_MBUS_2SND[10]=0x00;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
	m2->_MBUS_2SND[11]=qty;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	787a      	ldrb	r2, [r7, #1]
 800bd6c:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	220c      	movs	r2, #12
 800bd74:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

}
 800bd78:	bf00      	nop
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	370c      	adds	r7, #12
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr
	...

0800bd88 <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b09c      	sub	sp, #112	; 0x70
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	791b      	ldrb	r3, [r3, #4]
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	f041 813f 	bne.w	800d018 <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f103 0212 	add.w	r2, r3, #18
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bda6:	4619      	mov	r1, r3
 800bda8:	4610      	mov	r0, r2
 800bdaa:	f7ff feeb 	bl	800bb84 <ModBUS_Check>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f001 812f 	beq.w	800d014 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	7e5b      	ldrb	r3, [r3, #25]
 800bdba:	3b01      	subs	r3, #1
 800bdbc:	2b0f      	cmp	r3, #15
 800bdbe:	f201 80f3 	bhi.w	800cfa8 <ModBUS+0x1220>
 800bdc2:	a201      	add	r2, pc, #4	; (adr r2, 800bdc8 <ModBUS+0x40>)
 800bdc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc8:	0800be09 	.word	0x0800be09
 800bdcc:	0800c049 	.word	0x0800c049
 800bdd0:	0800c289 	.word	0x0800c289
 800bdd4:	0800c4c1 	.word	0x0800c4c1
 800bdd8:	0800c6f9 	.word	0x0800c6f9
 800bddc:	0800c90f 	.word	0x0800c90f
 800bde0:	0800cfa9 	.word	0x0800cfa9
 800bde4:	0800cfa9 	.word	0x0800cfa9
 800bde8:	0800cfa9 	.word	0x0800cfa9
 800bdec:	0800cfa9 	.word	0x0800cfa9
 800bdf0:	0800cfa9 	.word	0x0800cfa9
 800bdf4:	0800cfa9 	.word	0x0800cfa9
 800bdf8:	0800cfa9 	.word	0x0800cfa9
 800bdfc:	0800cfa9 	.word	0x0800cfa9
 800be00:	0800cacb 	.word	0x0800cacb
 800be04:	0800cd5b 	.word	0x0800cd5b

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	7d9a      	ldrb	r2, [r3, #22]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	7d5a      	ldrb	r2, [r3, #21]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	7d1a      	ldrb	r2, [r3, #20]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	7cda      	ldrb	r2, [r3, #19]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	7c9a      	ldrb	r2, [r3, #18]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800be3a:	2300      	movs	r3, #0
 800be3c:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	7a9b      	ldrb	r3, [r3, #10]
 800be42:	2b01      	cmp	r3, #1
 800be44:	f040 80e6 	bne.w	800c014 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	7e9b      	ldrb	r3, [r3, #26]
 800be4c:	b29a      	uxth	r2, r3
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800be5a:	021b      	lsls	r3, r3, #8
 800be5c:	b29a      	uxth	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800be6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800be6e:	b29a      	uxth	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	7edb      	ldrb	r3, [r3, #27]
 800be80:	b29b      	uxth	r3, r3
 800be82:	4313      	orrs	r3, r2
 800be84:	b29a      	uxth	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	7f1b      	ldrb	r3, [r3, #28]
 800be90:	b29a      	uxth	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800be9e:	021b      	lsls	r3, r3, #8
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800beae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	7f5b      	ldrb	r3, [r3, #29]
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	4313      	orrs	r3, r2
 800bec8:	b29a      	uxth	r2, r3
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800bedc:	b29b      	uxth	r3, r3
 800bede:	429a      	cmp	r2, r3
 800bee0:	d87e      	bhi.n	800bfe0 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800bee8:	461a      	mov	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bef0:	4413      	add	r3, r2
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	f892 2620 	ldrb.w	r2, [r2, #1568]	; 0x620
 800bef8:	4293      	cmp	r3, r2
 800befa:	dc57      	bgt.n	800bfac <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800befc:	2300      	movs	r3, #0
 800befe:	613b      	str	r3, [r7, #16]
 800bf00:	2300      	movs	r3, #0
 800bf02:	60fb      	str	r3, [r7, #12]
 800bf04:	2300      	movs	r3, #0
 800bf06:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf08:	2300      	movs	r3, #0
 800bf0a:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	f8b2 2622 	ldrh.w	r2, [r2, #1570]	; 0x622
 800bf1c:	40d3      	lsrs	r3, r2
 800bf1e:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bf26:	08db      	lsrs	r3, r3, #3
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bf32:	f003 0307 	and.w	r3, r3, #7
 800bf36:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d102      	bne.n	800bf44 <ModBUS+0x1bc>
									{
										bytes=div;
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf42:	e002      	b.n	800bf4a <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	3301      	adds	r3, #1
 800bf48:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800bf4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf4c:	b2da      	uxtb	r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800bf54:	e00e      	b.n	800bf74 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800bf56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf58:	3308      	adds	r3, #8
 800bf5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf5c:	b2d1      	uxtb	r1, r2
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	4413      	add	r3, r2
 800bf62:	460a      	mov	r2, r1
 800bf64:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800bf68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf6a:	0a1b      	lsrs	r3, r3, #8
 800bf6c:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800bf6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf70:	3b01      	subs	r3, #1
 800bf72:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800bf74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	dced      	bgt.n	800bf56 <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2201      	movs	r2, #1
 800bf86:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800bf90:	3303      	adds	r3, #3
 800bf92:	b2da      	uxtb	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bfa0:	1d9a      	adds	r2, r3, #6
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bfa8:	f001 b8d4 	b.w	800d154 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2202      	movs	r2, #2
 800bfb0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x81;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2281      	movs	r2, #129	; 0x81
 800bfb8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2203      	movs	r2, #3
 800bfc8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bfd2:	1d9a      	adds	r2, r3, #6
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800bfda:	2302      	movs	r3, #2
 800bfdc:	f001 b8ba 	b.w	800d154 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2203      	movs	r2, #3
 800bfe4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x81;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2281      	movs	r2, #129	; 0x81
 800bfec:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2201      	movs	r2, #1
 800bff4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2203      	movs	r2, #3
 800bffc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c006:	1d9a      	adds	r2, r3, #6
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c00e:	2303      	movs	r3, #3
 800c010:	f001 b8a0 	b.w	800d154 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2201      	movs	r2, #1
 800c018:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x81;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2281      	movs	r2, #129	; 0x81
 800c020:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2201      	movs	r2, #1
 800c028:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2203      	movs	r2, #3
 800c030:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c03a:	1d9a      	adds	r2, r3, #6
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c042:	2301      	movs	r3, #1
 800c044:	f001 b886 	b.w	800d154 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	7d9a      	ldrb	r2, [r3, #22]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	7d5a      	ldrb	r2, [r3, #21]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	7d1a      	ldrb	r2, [r3, #20]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	7cda      	ldrb	r2, [r3, #19]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	7c9a      	ldrb	r2, [r3, #18]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c07a:	2300      	movs	r3, #0
 800c07c:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	7adb      	ldrb	r3, [r3, #11]
 800c082:	2b01      	cmp	r3, #1
 800c084:	f040 80e6 	bne.w	800c254 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	7e9b      	ldrb	r3, [r3, #26]
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c09a:	021b      	lsls	r3, r3, #8
 800c09c:	b29a      	uxth	r2, r3
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c0aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	7edb      	ldrb	r3, [r3, #27]
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	b29a      	uxth	r2, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	7f1b      	ldrb	r3, [r3, #28]
 800c0d0:	b29a      	uxth	r2, r3
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c0de:	021b      	lsls	r3, r3, #8
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c0ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	7f5b      	ldrb	r3, [r3, #29]
 800c104:	b29b      	uxth	r3, r3
 800c106:	4313      	orrs	r3, r2
 800c108:	b29a      	uxth	r2, r3
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	429a      	cmp	r2, r3
 800c120:	d87e      	bhi.n	800c220 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c128:	461a      	mov	r2, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c130:	4413      	add	r3, r2
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	f892 2626 	ldrb.w	r2, [r2, #1574]	; 0x626
 800c138:	4293      	cmp	r3, r2
 800c13a:	dc57      	bgt.n	800c1ec <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800c13c:	2300      	movs	r3, #0
 800c13e:	623b      	str	r3, [r7, #32]
 800c140:	2300      	movs	r3, #0
 800c142:	61fb      	str	r3, [r7, #28]
 800c144:	2300      	movs	r3, #0
 800c146:	667b      	str	r3, [r7, #100]	; 0x64
 800c148:	2300      	movs	r3, #0
 800c14a:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800c14c:	2300      	movs	r3, #0
 800c14e:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	f8b2 2628 	ldrh.w	r2, [r2, #1576]	; 0x628
 800c15c:	40d3      	lsrs	r3, r2
 800c15e:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c166:	08db      	lsrs	r3, r3, #3
 800c168:	b29b      	uxth	r3, r3
 800c16a:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c172:	f003 0307 	and.w	r3, r3, #7
 800c176:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d102      	bne.n	800c184 <ModBUS+0x3fc>
									{
										bytes=div;
 800c17e:	6a3b      	ldr	r3, [r7, #32]
 800c180:	667b      	str	r3, [r7, #100]	; 0x64
 800c182:	e002      	b.n	800c18a <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800c184:	6a3b      	ldr	r3, [r7, #32]
 800c186:	3301      	adds	r3, #1
 800c188:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800c18a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c18c:	b2da      	uxtb	r2, r3
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800c194:	e00e      	b.n	800c1b4 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800c196:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c198:	3308      	adds	r3, #8
 800c19a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c19c:	b2d1      	uxtb	r1, r2
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	460a      	mov	r2, r1
 800c1a4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800c1a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c1aa:	0a1b      	lsrs	r3, r3, #8
 800c1ac:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800c1ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1b0:	3b01      	subs	r3, #1
 800c1b2:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800c1b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	dced      	bgt.n	800c196 <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2202      	movs	r2, #2
 800c1be:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c1d0:	3303      	adds	r3, #3
 800c1d2:	b2da      	uxtb	r2, r3
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c1e0:	1d9a      	adds	r2, r3, #6
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c1e8:	f000 bfb4 	b.w	800d154 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2202      	movs	r2, #2
 800c1f0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x82;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2282      	movs	r2, #130	; 0x82
 800c1f8:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2201      	movs	r2, #1
 800c200:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2203      	movs	r2, #3
 800c208:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c212:	1d9a      	adds	r2, r3, #6
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c21a:	2302      	movs	r3, #2
 800c21c:	f000 bf9a 	b.w	800d154 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2203      	movs	r2, #3
 800c224:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x82;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2282      	movs	r2, #130	; 0x82
 800c22c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2203      	movs	r2, #3
 800c23c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c246:	1d9a      	adds	r2, r3, #6
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c24e:	2303      	movs	r3, #3
 800c250:	f000 bf80 	b.w	800d154 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2201      	movs	r2, #1
 800c258:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x82;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2282      	movs	r2, #130	; 0x82
 800c260:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2201      	movs	r2, #1
 800c268:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2203      	movs	r2, #3
 800c270:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c27a:	1d9a      	adds	r2, r3, #6
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c282:	2301      	movs	r3, #1
 800c284:	f000 bf66 	b.w	800d154 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	7d9a      	ldrb	r2, [r3, #22]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	7d5a      	ldrb	r2, [r3, #21]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	7d1a      	ldrb	r2, [r3, #20]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	7cda      	ldrb	r2, [r3, #19]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	7c9a      	ldrb	r2, [r3, #18]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	7b1b      	ldrb	r3, [r3, #12]
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	f040 80e2 	bne.w	800c48c <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	7e9b      	ldrb	r3, [r3, #26]
 800c2cc:	b29a      	uxth	r2, r3
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c2da:	021b      	lsls	r3, r3, #8
 800c2dc:	b29a      	uxth	r2, r3
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c2ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f8b3 262e 	ldrh.w	r2, [r3, #1582]	; 0x62e
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	7edb      	ldrb	r3, [r3, #27]
 800c300:	b29b      	uxth	r3, r3
 800c302:	4313      	orrs	r3, r2
 800c304:	b29a      	uxth	r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	7f1b      	ldrb	r3, [r3, #28]
 800c310:	b29a      	uxth	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c31e:	021b      	lsls	r3, r3, #8
 800c320:	b29a      	uxth	r2, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c32e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c332:	b29a      	uxth	r2, r3
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	7f5b      	ldrb	r3, [r3, #29]
 800c344:	b29b      	uxth	r3, r3
 800c346:	4313      	orrs	r3, r2
 800c348:	b29a      	uxth	r2, r3
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	429a      	cmp	r2, r3
 800c360:	d87a      	bhi.n	800c458 <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c368:	461a      	mov	r2, r3
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c370:	4413      	add	r3, r2
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	f892 262c 	ldrb.w	r2, [r2, #1580]	; 0x62c
 800c378:	4293      	cmp	r3, r2
 800c37a:	dc53      	bgt.n	800c424 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c37c:	e029      	b.n	800c3d2 <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c384:	461a      	mov	r2, r3
 800c386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c388:	4413      	add	r3, r2
 800c38a:	005a      	lsls	r2, r3, #1
 800c38c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c38e:	005b      	lsls	r3, r3, #1
 800c390:	3309      	adds	r3, #9
 800c392:	6879      	ldr	r1, [r7, #4]
 800c394:	440a      	add	r2, r1
 800c396:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	4413      	add	r3, r2
 800c39e:	460a      	mov	r2, r1
 800c3a0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3ae:	4413      	add	r3, r2
 800c3b0:	005b      	lsls	r3, r3, #1
 800c3b2:	1c5a      	adds	r2, r3, #1
 800c3b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3b6:	3305      	adds	r3, #5
 800c3b8:	005b      	lsls	r3, r3, #1
 800c3ba:	6879      	ldr	r1, [r7, #4]
 800c3bc:	440a      	add	r2, r1
 800c3be:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	460a      	mov	r2, r1
 800c3c8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800c3cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c3d8:	461a      	mov	r2, r3
 800c3da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	dbce      	blt.n	800c37e <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	005b      	lsls	r3, r3, #1
 800c3ea:	b2da      	uxtb	r2, r3
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x03;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2203      	movs	r2, #3
 800c3f6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c408:	3303      	adds	r3, #3
 800c40a:	b2da      	uxtb	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c418:	1d9a      	adds	r2, r3, #6
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c420:	f000 be98 	b.w	800d154 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2202      	movs	r2, #2
 800c428:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x83;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2283      	movs	r2, #131	; 0x83
 800c430:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2201      	movs	r2, #1
 800c438:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2203      	movs	r2, #3
 800c440:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c44a:	1d9a      	adds	r2, r3, #6
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c452:	2302      	movs	r3, #2
 800c454:	f000 be7e 	b.w	800d154 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2203      	movs	r2, #3
 800c45c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x83;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2283      	movs	r2, #131	; 0x83
 800c464:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2203      	movs	r2, #3
 800c474:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c47e:	1d9a      	adds	r2, r3, #6
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c486:	2303      	movs	r3, #3
 800c488:	f000 be64 	b.w	800d154 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x83;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2283      	movs	r2, #131	; 0x83
 800c498:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2203      	movs	r2, #3
 800c4a8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c4b2:	1d9a      	adds	r2, r3, #6
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	f000 be4a 	b.w	800d154 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	7d9a      	ldrb	r2, [r3, #22]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	7d5a      	ldrb	r2, [r3, #21]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	7d1a      	ldrb	r2, [r3, #20]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	7cda      	ldrb	r2, [r3, #19]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	7c9a      	ldrb	r2, [r3, #18]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	7b5b      	ldrb	r3, [r3, #13]
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	f040 80e2 	bne.w	800c6c4 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	7e9b      	ldrb	r3, [r3, #26]
 800c504:	b29a      	uxth	r2, r3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c512:	021b      	lsls	r3, r3, #8
 800c514:	b29a      	uxth	r2, r3
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c522:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c526:	b29a      	uxth	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f8b3 2634 	ldrh.w	r2, [r3, #1588]	; 0x634
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	7edb      	ldrb	r3, [r3, #27]
 800c538:	b29b      	uxth	r3, r3
 800c53a:	4313      	orrs	r3, r2
 800c53c:	b29a      	uxth	r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	7f1b      	ldrb	r3, [r3, #28]
 800c548:	b29a      	uxth	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c556:	021b      	lsls	r3, r3, #8
 800c558:	b29a      	uxth	r2, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c566:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c56a:	b29a      	uxth	r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	7f5b      	ldrb	r3, [r3, #29]
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	4313      	orrs	r3, r2
 800c580:	b29a      	uxth	r2, r3
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f893 3632 	ldrb.w	r3, [r3, #1586]	; 0x632
 800c594:	b29b      	uxth	r3, r3
 800c596:	429a      	cmp	r2, r3
 800c598:	d87a      	bhi.n	800c690 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c5a8:	4413      	add	r3, r2
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	f892 2632 	ldrb.w	r2, [r2, #1586]	; 0x632
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	dc53      	bgt.n	800c65c <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c5b4:	e029      	b.n	800c60a <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c5bc:	461a      	mov	r2, r3
 800c5be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5c0:	4413      	add	r3, r2
 800c5c2:	005a      	lsls	r2, r3, #1
 800c5c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5c6:	005b      	lsls	r3, r3, #1
 800c5c8:	3309      	adds	r3, #9
 800c5ca:	6879      	ldr	r1, [r7, #4]
 800c5cc:	440a      	add	r2, r1
 800c5ce:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	460a      	mov	r2, r1
 800c5d8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5e6:	4413      	add	r3, r2
 800c5e8:	005b      	lsls	r3, r3, #1
 800c5ea:	1c5a      	adds	r2, r3, #1
 800c5ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5ee:	3305      	adds	r3, #5
 800c5f0:	005b      	lsls	r3, r3, #1
 800c5f2:	6879      	ldr	r1, [r7, #4]
 800c5f4:	440a      	add	r2, r1
 800c5f6:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	4413      	add	r3, r2
 800c5fe:	460a      	mov	r2, r1
 800c600:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800c604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c606:	3301      	adds	r3, #1
 800c608:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c610:	461a      	mov	r2, r3
 800c612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c614:	4293      	cmp	r3, r2
 800c616:	dbce      	blt.n	800c5b6 <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	005b      	lsls	r3, r3, #1
 800c622:	b2da      	uxtb	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x04;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2204      	movs	r2, #4
 800c62e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2201      	movs	r2, #1
 800c636:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c640:	3303      	adds	r3, #3
 800c642:	b2da      	uxtb	r2, r3
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c650:	1d9a      	adds	r2, r3, #6
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c658:	f000 bd7c 	b.w	800d154 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2202      	movs	r2, #2
 800c660:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x84;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2284      	movs	r2, #132	; 0x84
 800c668:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2201      	movs	r2, #1
 800c670:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2203      	movs	r2, #3
 800c678:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c682:	1d9a      	adds	r2, r3, #6
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c68a:	2302      	movs	r3, #2
 800c68c:	f000 bd62 	b.w	800d154 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2203      	movs	r2, #3
 800c694:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x84;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2284      	movs	r2, #132	; 0x84
 800c69c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2203      	movs	r2, #3
 800c6ac:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c6b6:	1d9a      	adds	r2, r3, #6
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c6be:	2303      	movs	r3, #3
 800c6c0:	f000 bd48 	b.w	800d154 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x84;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2284      	movs	r2, #132	; 0x84
 800c6d0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2203      	movs	r2, #3
 800c6e0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c6ea:	1d9a      	adds	r2, r3, #6
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	f000 bd2e 	b.w	800d154 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	7d9a      	ldrb	r2, [r3, #22]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	7d5a      	ldrb	r2, [r3, #21]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	7d1a      	ldrb	r2, [r3, #20]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	7cda      	ldrb	r2, [r3, #19]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	7c9a      	ldrb	r2, [r3, #18]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

								int qty_reg=0;
 800c72a:	2300      	movs	r3, #0
 800c72c:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	7b9b      	ldrb	r3, [r3, #14]
 800c732:	2b01      	cmp	r3, #1
 800c734:	f040 80d1 	bne.w	800c8da <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	7e9b      	ldrb	r3, [r3, #26]
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c74a:	021b      	lsls	r3, r3, #8
 800c74c:	b29a      	uxth	r2, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c75a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c75e:	b29a      	uxth	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8b3 263a 	ldrh.w	r2, [r3, #1594]	; 0x63a
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	7edb      	ldrb	r3, [r3, #27]
 800c770:	b29b      	uxth	r3, r3
 800c772:	4313      	orrs	r3, r2
 800c774:	b29a      	uxth	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	7f1b      	ldrb	r3, [r3, #28]
 800c780:	b29a      	uxth	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c78e:	021b      	lsls	r3, r3, #8
 800c790:	b29a      	uxth	r2, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c79e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c7a2:	b29a      	uxth	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8b3 263c 	ldrh.w	r2, [r3, #1596]	; 0x63c
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	7f5b      	ldrb	r3, [r3, #29]
 800c7b4:	b29b      	uxth	r3, r3
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	b29a      	uxth	r2, r3
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f893 3638 	ldrb.w	r3, [r3, #1592]	; 0x638
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	dd69      	ble.n	800c8a6 <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d005      	beq.n	800c7e8 <ModBUS+0xa60>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c7e2:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c7e6:	d144      	bne.n	800c872 <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c7ee:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c7f2:	d10d      	bne.n	800c810 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	f8b2 263a 	ldrh.w	r2, [r2, #1594]	; 0x63a
 800c800:	4611      	mov	r1, r2
 800c802:	2201      	movs	r2, #1
 800c804:	408a      	lsls	r2, r1
 800c806:	431a      	orrs	r2, r3
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800c80e:	e003      	b.n	800c818 <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	7f5a      	ldrb	r2, [r3, #29]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	7f1a      	ldrb	r2, [r3, #28]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	7eda      	ldrb	r2, [r3, #27]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	7e9a      	ldrb	r2, [r3, #26]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x05;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2205      	movs	r2, #5
 800c844:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c856:	3306      	adds	r3, #6
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c866:	1d9a      	adds	r2, r3, #6
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800c86e:	f000 bc71 	b.w	800d154 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2202      	movs	r2, #2
 800c876:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x85;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2285      	movs	r2, #133	; 0x85
 800c87e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2201      	movs	r2, #1
 800c886:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2203      	movs	r2, #3
 800c88e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c898:	1d9a      	adds	r2, r3, #6
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
												return(2);//Error excepcion 02
 800c8a0:	2302      	movs	r3, #2
 800c8a2:	f000 bc57 	b.w	800d154 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2203      	movs	r2, #3
 800c8aa:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
											m3->_MBUS_2SND[7]=0x85;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2285      	movs	r2, #133	; 0x85
 800c8b2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2203      	movs	r2, #3
 800c8c2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c8cc:	1d9a      	adds	r2, r3, #6
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
											return(3);//Erroe excepcion 03
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	f000 bc3d 	b.w	800d154 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x85;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2285      	movs	r2, #133	; 0x85
 800c8e6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2203      	movs	r2, #3
 800c8f6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c900:	1d9a      	adds	r2, r3, #6
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(1);//Error excepcion 01
 800c908:	2301      	movs	r3, #1
 800c90a:	f000 bc23 	b.w	800d154 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	7d9a      	ldrb	r2, [r3, #22]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	7d5a      	ldrb	r2, [r3, #21]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	7d1a      	ldrb	r2, [r3, #20]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	7cda      	ldrb	r2, [r3, #19]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	7c9a      	ldrb	r2, [r3, #18]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800c940:	2300      	movs	r3, #0
 800c942:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c944:	2300      	movs	r3, #0
 800c946:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	7bdb      	ldrb	r3, [r3, #15]
 800c94c:	2b01      	cmp	r3, #1
 800c94e:	f040 80a3 	bne.w	800ca98 <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	7e9b      	ldrb	r3, [r3, #26]
 800c956:	b29a      	uxth	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c964:	021b      	lsls	r3, r3, #8
 800c966:	b29a      	uxth	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c974:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c978:	b29a      	uxth	r2, r3
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	7edb      	ldrb	r3, [r3, #27]
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	4313      	orrs	r3, r2
 800c98e:	b29a      	uxth	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646

							start_address=m3->_06_WriteSingleRegister_Addr;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c99c:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	7f1b      	ldrb	r3, [r3, #28]
 800c9a2:	b29a      	uxth	r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800c9b0:	021b      	lsls	r3, r3, #8
 800c9b2:	b29a      	uxth	r2, r3
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800c9c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c9c4:	b29a      	uxth	r2, r3
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8b3 2648 	ldrh.w	r2, [r3, #1608]	; 0x648
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	7f5b      	ldrb	r3, [r3, #29]
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	b29a      	uxth	r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d838      	bhi.n	800ca66 <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800c9f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	7f11      	ldrb	r1, [r2, #28]
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	460a      	mov	r2, r1
 800ca00:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800ca04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ca06:	3301      	adds	r3, #1
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	7f51      	ldrb	r1, [r2, #29]
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	4413      	add	r3, r2
 800ca10:	460a      	mov	r2, r1
 800ca12:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	7f5a      	ldrb	r2, [r3, #29]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	7f1a      	ldrb	r2, [r3, #28]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	7eda      	ldrb	r2, [r3, #27]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	7e9a      	ldrb	r2, [r3, #26]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x06;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2206      	movs	r2, #6
 800ca42:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2206      	movs	r2, #6
 800ca52:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ca5c:	1d9a      	adds	r2, r3, #6
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800ca64:	e376      	b.n	800d154 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2202      	movs	r2, #2
 800ca6a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x86;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2286      	movs	r2, #134	; 0x86
 800ca72:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2203      	movs	r2, #3
 800ca82:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ca8c:	1d9a      	adds	r2, r3, #6
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800ca94:	2302      	movs	r3, #2
 800ca96:	e35d      	b.n	800d154 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x86;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2286      	movs	r2, #134	; 0x86
 800caa4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2201      	movs	r2, #1
 800caac:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2203      	movs	r2, #3
 800cab4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cabe:	1d9a      	adds	r2, r3, #6
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cac6:	2301      	movs	r3, #1
 800cac8:	e344      	b.n	800d154 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	7d9a      	ldrb	r2, [r3, #22]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	7d5a      	ldrb	r2, [r3, #21]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	7d1a      	ldrb	r2, [r3, #20]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	7cda      	ldrb	r2, [r3, #19]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	7c9a      	ldrb	r2, [r3, #18]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800cafc:	2300      	movs	r3, #0
 800cafe:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	7c1b      	ldrb	r3, [r3, #16]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	f040 810f 	bne.w	800cd28 <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	7e9b      	ldrb	r3, [r3, #26]
 800cb0e:	b29a      	uxth	r2, r3
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cb1c:	021b      	lsls	r3, r3, #8
 800cb1e:	b29a      	uxth	r2, r3
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cb2c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cb30:	b29a      	uxth	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8b3 2640 	ldrh.w	r2, [r3, #1600]	; 0x640
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	7edb      	ldrb	r3, [r3, #27]
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	4313      	orrs	r3, r2
 800cb46:	b29a      	uxth	r2, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	7f1b      	ldrb	r3, [r3, #28]
 800cb52:	b29a      	uxth	r2, r3
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cb60:	021b      	lsls	r3, r3, #8
 800cb62:	b29a      	uxth	r2, r3
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cb70:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cb74:	b29a      	uxth	r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	7f5b      	ldrb	r3, [r3, #29]
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f893 363e 	ldrb.w	r3, [r3, #1598]	; 0x63e
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	429a      	cmp	r2, r3
 800cba2:	f200 80a8 	bhi.w	800ccf6 <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cbac:	461a      	mov	r2, r3
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cbb4:	4413      	add	r3, r2
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	f892 263e 	ldrb.w	r2, [r2, #1598]	; 0x63e
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	f300 8081 	bgt.w	800ccc4 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	657b      	str	r3, [r7, #84]	; 0x54
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	653b      	str	r3, [r7, #80]	; 0x50
 800cbca:	2300      	movs	r3, #0
 800cbcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cbce:	2300      	movs	r3, #0
 800cbd0:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	7f9b      	ldrb	r3, [r3, #30]
 800cbd6:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800cbd8:	e00e      	b.n	800cbf8 <ModBUS+0xe70>
									{
										data=data<<8;
 800cbda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbdc:	021b      	lsls	r3, r3, #8
 800cbde:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800cbe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbe2:	330c      	adds	r3, #12
 800cbe4:	687a      	ldr	r2, [r7, #4]
 800cbe6:	4413      	add	r3, r2
 800cbe8:	7c9b      	ldrb	r3, [r3, #18]
 800cbea:	461a      	mov	r2, r3
 800cbec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800cbf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbf4:	3b01      	subs	r3, #1
 800cbf6:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800cbf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d1ed      	bne.n	800cbda <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cc04:	461a      	mov	r2, r3
 800cc06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc08:	4093      	lsls	r3, r2
 800cc0a:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800cc0c:	e00f      	b.n	800cc2e <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cc14:	461a      	mov	r2, r3
 800cc16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc18:	4413      	add	r3, r2
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc20:	461a      	mov	r2, r3
 800cc22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc24:	4313      	orrs	r3, r2
 800cc26:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800cc28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cc34:	461a      	mov	r2, r3
 800cc36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d3e8      	bcc.n	800cc0e <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800cc3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc3e:	43db      	mvns	r3, r3
 800cc40:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800cc48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc4a:	401a      	ands	r2, r3
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c


									data &= ~mascara;
 800cc52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc54:	43db      	mvns	r3, r3
 800cc56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cc58:	4013      	ands	r3, r2
 800cc5a:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800cc62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc64:	431a      	orrs	r2, r3
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	7f5a      	ldrb	r2, [r3, #29]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	7f1a      	ldrb	r2, [r3, #28]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	7eda      	ldrb	r2, [r3, #27]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	7e9a      	ldrb	r2, [r3, #26]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x0F;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	220f      	movs	r2, #15
 800cc98:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2201      	movs	r2, #1
 800cca0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800ccaa:	3306      	adds	r3, #6
 800ccac:	b2da      	uxtb	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ccba:	1d9a      	adds	r2, r3, #6
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800ccc2:	e247      	b.n	800d154 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2202      	movs	r2, #2
 800ccc8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x8F;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	228f      	movs	r2, #143	; 0x8f
 800ccd0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2203      	movs	r2, #3
 800cce0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ccea:	1d9a      	adds	r2, r3, #6
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800ccf2:	2302      	movs	r3, #2
 800ccf4:	e22e      	b.n	800d154 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2203      	movs	r2, #3
 800ccfa:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x8F;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	228f      	movs	r2, #143	; 0x8f
 800cd02:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2203      	movs	r2, #3
 800cd12:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cd1c:	1d9a      	adds	r2, r3, #6
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cd24:	2303      	movs	r3, #3
 800cd26:	e215      	b.n	800d154 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x8F;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	228f      	movs	r2, #143	; 0x8f
 800cd34:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2203      	movs	r2, #3
 800cd44:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cd4e:	1d9a      	adds	r2, r3, #6
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cd56:	2301      	movs	r3, #1
 800cd58:	e1fc      	b.n	800d154 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	7d9a      	ldrb	r2, [r3, #22]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	7d5a      	ldrb	r2, [r3, #21]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	7d1a      	ldrb	r2, [r3, #20]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	7cda      	ldrb	r2, [r3, #19]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	7c9a      	ldrb	r2, [r3, #18]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800cd92:	2300      	movs	r3, #0
 800cd94:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	7c5b      	ldrb	r3, [r3, #17]
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	f040 80eb 	bne.w	800cf76 <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	7e9b      	ldrb	r3, [r3, #26]
 800cda4:	b29a      	uxth	r2, r3
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cdb2:	021b      	lsls	r3, r3, #8
 800cdb4:	b29a      	uxth	r2, r3
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cdc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8b3 264c 	ldrh.w	r2, [r3, #1612]	; 0x64c
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	7edb      	ldrb	r3, [r3, #27]
 800cdd8:	b29b      	uxth	r3, r3
 800cdda:	4313      	orrs	r3, r2
 800cddc:	b29a      	uxth	r2, r3
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cdea:	005b      	lsls	r3, r3, #1
 800cdec:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	7f1b      	ldrb	r3, [r3, #28]
 800cdf2:	b29a      	uxth	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800ce00:	021b      	lsls	r3, r3, #8
 800ce02:	b29a      	uxth	r2, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800ce10:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ce14:	b29a      	uxth	r2, r3
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	7f5b      	ldrb	r3, [r3, #29]
 800ce26:	b29b      	uxth	r3, r3
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	b29a      	uxth	r2, r3
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d87f      	bhi.n	800cf44 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800ce52:	4413      	add	r3, r2
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	f892 264a 	ldrb.w	r2, [r2, #1610]	; 0x64a
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	dc59      	bgt.n	800cf12 <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800ce5e:	e029      	b.n	800ceb4 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800ce60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce64:	f103 020d 	add.w	r2, r3, #13
 800ce68:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800ce6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce6e:	440b      	add	r3, r1
 800ce70:	6879      	ldr	r1, [r7, #4]
 800ce72:	440a      	add	r2, r1
 800ce74:	7c91      	ldrb	r1, [r2, #18]
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	4413      	add	r3, r2
 800ce7a:	460a      	mov	r2, r1
 800ce7c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800ce80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce84:	3301      	adds	r3, #1
 800ce86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800ce8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce8e:	f103 020d 	add.w	r2, r3, #13
 800ce92:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800ce94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ce98:	440b      	add	r3, r1
 800ce9a:	6879      	ldr	r1, [r7, #4]
 800ce9c:	440a      	add	r2, r1
 800ce9e:	7c91      	ldrb	r1, [r2, #18]
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	4413      	add	r3, r2
 800cea4:	460a      	mov	r2, r1
 800cea6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										qty_reg++;
 800ceaa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ceae:	3301      	adds	r3, #1
 800ceb0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	7f9b      	ldrb	r3, [r3, #30]
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d3ce      	bcc.n	800ce60 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	7f5a      	ldrb	r2, [r3, #29]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	7f1a      	ldrb	r2, [r3, #28]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	7eda      	ldrb	r2, [r3, #27]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	7e9a      	ldrb	r2, [r3, #26]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x10;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2210      	movs	r2, #16
 800ceee:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2201      	movs	r2, #1
 800cef6:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2206      	movs	r2, #6
 800cefe:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf08:	1d9a      	adds	r2, r3, #6
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cf10:	e120      	b.n	800d154 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2202      	movs	r2, #2
 800cf16:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x90;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2290      	movs	r2, #144	; 0x90
 800cf1e:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2201      	movs	r2, #1
 800cf26:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2203      	movs	r2, #3
 800cf2e:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf38:	1d9a      	adds	r2, r3, #6
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800cf40:	2302      	movs	r3, #2
 800cf42:	e107      	b.n	800d154 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2203      	movs	r2, #3
 800cf48:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x90;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2290      	movs	r2, #144	; 0x90
 800cf50:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2201      	movs	r2, #1
 800cf58:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2203      	movs	r2, #3
 800cf60:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf6a:	1d9a      	adds	r2, r3, #6
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cf72:	2303      	movs	r3, #3
 800cf74:	e0ee      	b.n	800d154 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x90;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2290      	movs	r2, #144	; 0x90
 800cf82:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2203      	movs	r2, #3
 800cf92:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cf9c:	1d9a      	adds	r2, r3, #6
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e0d5      	b.n	800d154 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2201      	movs	r2, #1
 800cfac:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	7e5b      	ldrb	r3, [r3, #25]
 800cfb4:	3b80      	subs	r3, #128	; 0x80
 800cfb6:	b2da      	uxtb	r2, r3
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	7e1a      	ldrb	r2, [r3, #24]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
					m3->_MBUS_2SND[5]=0x03;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2203      	movs	r2, #3
 800cfcc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	7d9a      	ldrb	r2, [r3, #22]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	7d5a      	ldrb	r2, [r3, #21]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	7d1a      	ldrb	r2, [r3, #20]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	7cda      	ldrb	r2, [r3, #19]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	7c9a      	ldrb	r2, [r3, #18]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800d008:	1d9a      	adds	r2, r3, #6
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
					return(1);
 800d010:	2301      	movs	r3, #1
 800d012:	e09f      	b.n	800d154 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800d014:	2301      	movs	r3, #1
 800d016:	e09d      	b.n	800d154 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	791b      	ldrb	r3, [r3, #4]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f040 8099 	bne.w	800d154 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f103 0212 	add.w	r2, r3, #18
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d02e:	4619      	mov	r1, r3
 800d030:	4610      	mov	r0, r2
 800d032:	f7fe fda7 	bl	800bb84 <ModBUS_Check>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	f000 808b 	beq.w	800d154 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f7fe fdbf 	bl	800bbc2 <ModBUS_Check_tid>
 800d044:	4603      	mov	r3, r0
 800d046:	2b00      	cmp	r3, #0
 800d048:	d04f      	beq.n	800d0ea <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	7e5b      	ldrb	r3, [r3, #25]
 800d04e:	2b03      	cmp	r3, #3
 800d050:	d143      	bne.n	800d0da <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800d052:	2300      	movs	r3, #0
 800d054:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800d056:	2300      	movs	r3, #0
 800d058:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800d062:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800d064:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d066:	021b      	lsls	r3, r3, #8
 800d068:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 800d070:	b29a      	uxth	r2, r3
 800d072:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d074:	4313      	orrs	r3, r2
 800d076:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 800d07e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800d082:	2300      	movs	r3, #0
 800d084:	643b      	str	r3, [r7, #64]	; 0x40
 800d086:	e022      	b.n	800d0ce <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800d088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d08a:	005b      	lsls	r3, r3, #1
 800d08c:	f103 0209 	add.w	r2, r3, #9
 800d090:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d094:	440b      	add	r3, r1
 800d096:	005b      	lsls	r3, r3, #1
 800d098:	6879      	ldr	r1, [r7, #4]
 800d09a:	440a      	add	r2, r1
 800d09c:	7c91      	ldrb	r1, [r2, #18]
 800d09e:	687a      	ldr	r2, [r7, #4]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	460a      	mov	r2, r1
 800d0a4:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800d0a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0aa:	3305      	adds	r3, #5
 800d0ac:	005a      	lsls	r2, r3, #1
 800d0ae:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800d0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0b2:	440b      	add	r3, r1
 800d0b4:	005b      	lsls	r3, r3, #1
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	6879      	ldr	r1, [r7, #4]
 800d0ba:	440a      	add	r2, r1
 800d0bc:	7c91      	ldrb	r1, [r2, #18]
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	460a      	mov	r2, r1
 800d0c4:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
						for (int i=0;i< qty; i++)
 800d0c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	643b      	str	r3, [r7, #64]	; 0x40
 800d0ce:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d0d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	dbd7      	blt.n	800d088 <ModBUS+0x1300>

						}


					}
					break;
 800d0d8:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	7ddb      	ldrb	r3, [r3, #23]
 800d0de:	461a      	mov	r2, r3
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	7e9b      	ldrb	r3, [r3, #26]
 800d0e4:	1ad3      	subs	r3, r2, r3
 800d0e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d0e8:	e034      	b.n	800d154 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	7e5b      	ldrb	r3, [r3, #25]
 800d0ee:	3b81      	subs	r3, #129	; 0x81
 800d0f0:	2b15      	cmp	r3, #21
 800d0f2:	d82f      	bhi.n	800d154 <ModBUS+0x13cc>
 800d0f4:	a201      	add	r2, pc, #4	; (adr r2, 800d0fc <ModBUS+0x1374>)
 800d0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0fa:	bf00      	nop
 800d0fc:	0800d155 	.word	0x0800d155
 800d100:	0800d155 	.word	0x0800d155
 800d104:	0800d155 	.word	0x0800d155
 800d108:	0800d155 	.word	0x0800d155
 800d10c:	0800d155 	.word	0x0800d155
 800d110:	0800d155 	.word	0x0800d155
 800d114:	0800d155 	.word	0x0800d155
 800d118:	0800d155 	.word	0x0800d155
 800d11c:	0800d155 	.word	0x0800d155
 800d120:	0800d155 	.word	0x0800d155
 800d124:	0800d155 	.word	0x0800d155
 800d128:	0800d155 	.word	0x0800d155
 800d12c:	0800d155 	.word	0x0800d155
 800d130:	0800d155 	.word	0x0800d155
 800d134:	0800d155 	.word	0x0800d155
 800d138:	0800d155 	.word	0x0800d155
 800d13c:	0800d155 	.word	0x0800d155
 800d140:	0800d155 	.word	0x0800d155
 800d144:	0800d155 	.word	0x0800d155
 800d148:	0800d155 	.word	0x0800d155
 800d14c:	0800d155 	.word	0x0800d155
 800d150:	0800d155 	.word	0x0800d155
			}
		}
	}


}
 800d154:	4618      	mov	r0, r3
 800d156:	3770      	adds	r7, #112	; 0x70
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <SPI_ETH_RESET>:
 */

#include "ETH_W5500.h"

SPI_ETH_RESET(struct W5500_SPI * x)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->RST_PORT, x->RST_PIN , GPIO_PIN_RESET);		//RST LOW
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	68d8      	ldr	r0, [r3, #12]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	8a1b      	ldrh	r3, [r3, #16]
 800d16c:	2200      	movs	r2, #0
 800d16e:	4619      	mov	r1, r3
 800d170:	f7f6 f93a 	bl	80033e8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800d174:	2064      	movs	r0, #100	; 0x64
 800d176:	f7f5 fcd5 	bl	8002b24 <HAL_Delay>
	HAL_GPIO_WritePin(x->RST_PORT, x->RST_PIN , GPIO_PIN_SET);			//RST HIGH
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	68d8      	ldr	r0, [r3, #12]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	8a1b      	ldrh	r3, [r3, #16]
 800d182:	2201      	movs	r2, #1
 800d184:	4619      	mov	r1, r3
 800d186:	f7f6 f92f 	bl	80033e8 <HAL_GPIO_WritePin>
}
 800d18a:	bf00      	nop
 800d18c:	4618      	mov	r0, r3
 800d18e:	3708      	adds	r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <SPI_ETH_PHY_RESET>:

SPI_ETH_PHY_RESET(struct W5500_SPI * x)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
uint8_t a;

	x->TX[0]=0x00;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	771a      	strb	r2, [r3, #28]
	x->TX[1]=0x2E;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	222e      	movs	r2, #46	; 0x2e
 800d1a6:	775a      	strb	r2, [r3, #29]
	x->TX[2]=0x00;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	779a      	strb	r2, [r3, #30]
	x->TX[3]=0x00;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	77da      	strb	r2, [r3, #31]
	SPI_ETH(x);			//Realizo la letura de PHYCFGR
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 f81c 	bl	800d1f2 <SPI_ETH>
	a=x->RX[3];
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d1c0:	73fb      	strb	r3, [r7, #15]
	a=a&0xFE;
 800d1c2:	7bfb      	ldrb	r3, [r7, #15]
 800d1c4:	f023 0301 	bic.w	r3, r3, #1
 800d1c8:	73fb      	strb	r3, [r7, #15]
	x->TX[0]=0x00;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	771a      	strb	r2, [r3, #28]
	x->TX[1]=0x2E;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	222e      	movs	r2, #46	; 0x2e
 800d1d4:	775a      	strb	r2, [r3, #29]
	x->TX[2]=0x04;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2204      	movs	r2, #4
 800d1da:	779a      	strb	r2, [r3, #30]
	x->TX[3]=a;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	7bfa      	ldrb	r2, [r7, #15]
 800d1e0:	77da      	strb	r2, [r3, #31]
	SPI_ETH(x);
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 f805 	bl	800d1f2 <SPI_ETH>
}
 800d1e8:	bf00      	nop
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <SPI_ETH>:

uint8_t  SPI_ETH(struct  W5500_SPI * x )
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b084      	sub	sp, #16
 800d1f6:	af02      	add	r7, sp, #8
 800d1f8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6858      	ldr	r0, [r3, #4]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	891b      	ldrh	r3, [r3, #8]
 800d202:	2200      	movs	r2, #0
 800d204:	4619      	mov	r1, r3
 800d206:	f7f6 f8ef 	bl	80033e8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6818      	ldr	r0, [r3, #0]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f103 011c 	add.w	r1, r3, #28
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f103 0220 	add.w	r2, r3, #32
 800d21a:	2364      	movs	r3, #100	; 0x64
 800d21c:	9300      	str	r3, [sp, #0]
 800d21e:	2304      	movs	r3, #4
 800d220:	f7f6 fdf7 	bl	8003e12 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6858      	ldr	r0, [r3, #4]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	891b      	ldrh	r3, [r3, #8]
 800d22c:	2201      	movs	r2, #1
 800d22e:	4619      	mov	r1, r3
 800d230:	f7f6 f8da 	bl	80033e8 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3708      	adds	r7, #8
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}

0800d242 <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5500_SPI * x,  uint16_t ph_addr, uint8_t addr,uint8_t op, uint8_t * data, uint8_t lnght)
{
 800d242:	b580      	push	{r7, lr}
 800d244:	b086      	sub	sp, #24
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
 800d24a:	4608      	mov	r0, r1
 800d24c:	4611      	mov	r1, r2
 800d24e:	461a      	mov	r2, r3
 800d250:	4603      	mov	r3, r0
 800d252:	807b      	strh	r3, [r7, #2]
 800d254:	460b      	mov	r3, r1
 800d256:	707b      	strb	r3, [r7, #1]
 800d258:	4613      	mov	r3, r2
 800d25a:	703b      	strb	r3, [r7, #0]
 uint16_t res=0;
 800d25c:	2300      	movs	r3, #0
 800d25e:	82fb      	strh	r3, [r7, #22]
 uint8_t  a=op;
 800d260:	783b      	ldrb	r3, [r7, #0]
 800d262:	72fb      	strb	r3, [r7, #11]

 x->TX[0]= (ph_addr & 0xFF00)>>8; 				//High Address Phase
 800d264:	887b      	ldrh	r3, [r7, #2]
 800d266:	0a1b      	lsrs	r3, r3, #8
 800d268:	b29b      	uxth	r3, r3
 800d26a:	b2da      	uxtb	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	771a      	strb	r2, [r3, #28]
 x->TX[1]= ph_addr & 0x00FF;					//Low Address Phase
 800d270:	887b      	ldrh	r3, [r7, #2]
 800d272:	b2da      	uxtb	r2, r3
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	775a      	strb	r2, [r3, #29]
 x->TX[2]= ((addr)<<3)|((op)<<2);
 800d278:	787b      	ldrb	r3, [r7, #1]
 800d27a:	00db      	lsls	r3, r3, #3
 800d27c:	b25a      	sxtb	r2, r3
 800d27e:	783b      	ldrb	r3, [r7, #0]
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	b25b      	sxtb	r3, r3
 800d284:	4313      	orrs	r3, r2
 800d286:	b25b      	sxtb	r3, r3
 800d288:	b2da      	uxtb	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	779a      	strb	r2, [r3, #30]
 x->TX[3]=0x00;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2200      	movs	r2, #0
 800d292:	77da      	strb	r2, [r3, #31]
 if(op == 1)								//Write operation
 800d294:	783b      	ldrb	r3, [r7, #0]
 800d296:	2b01      	cmp	r3, #1
 800d298:	d11d      	bne.n	800d2d6 <SPI_ETH_REG+0x94>
 {
	 for(int i=0; i<(lnght); i++)			//Esto solo incrementa 256 ubicaciones
 800d29a:	2300      	movs	r3, #0
 800d29c:	613b      	str	r3, [r7, #16]
 800d29e:	e013      	b.n	800d2c8 <SPI_ETH_REG+0x86>
	 {
		x->TX[3]=data[i];					//Put data to be sent
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	6a3a      	ldr	r2, [r7, #32]
 800d2a4:	4413      	add	r3, r2
 800d2a6:	781a      	ldrb	r2, [r3, #0]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	77da      	strb	r2, [r3, #31]
		res=SPI_ETH(x);						//Send data to device
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f7ff ffa0 	bl	800d1f2 <SPI_ETH>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	82fb      	strh	r3, [r7, #22]
		x->TX[1]++;							//Address increased once
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	7f5b      	ldrb	r3, [r3, #29]
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	b2da      	uxtb	r2, r3
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	775a      	strb	r2, [r3, #29]
	 for(int i=0; i<(lnght); i++)			//Esto solo incrementa 256 ubicaciones
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	613b      	str	r3, [r7, #16]
 800d2c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d2cc:	693a      	ldr	r2, [r7, #16]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	dbe6      	blt.n	800d2a0 <SPI_ETH_REG+0x5e>
	 }
	 return(res);
 800d2d2:	8afb      	ldrh	r3, [r7, #22]
 800d2d4:	e037      	b.n	800d346 <SPI_ETH_REG+0x104>
 }
	 if(op == 0)							//Read operation
 800d2d6:	783b      	ldrb	r3, [r7, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d134      	bne.n	800d346 <SPI_ETH_REG+0x104>
	 {
		 x->TX[3]=0x00;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	77da      	strb	r2, [r3, #31]
		 if (lnght==2)
 800d2e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d2e6:	2b02      	cmp	r3, #2
 800d2e8:	d120      	bne.n	800d32c <SPI_ETH_REG+0xea>
		{
		for(int i=0; i<(lnght); i++)
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	60fb      	str	r3, [r7, #12]
 800d2ee:	e016      	b.n	800d31e <SPI_ETH_REG+0xdc>
			{
			res|=SPI_ETH(x);
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f7ff ff7e 	bl	800d1f2 <SPI_ETH>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	8afb      	ldrh	r3, [r7, #22]
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	82fb      	strh	r3, [r7, #22]
			x->TX[1]++;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	7f5b      	ldrb	r3, [r3, #29]
 800d304:	3301      	adds	r3, #1
 800d306:	b2da      	uxtb	r2, r3
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	775a      	strb	r2, [r3, #29]
			if (i==0)res=res<<8;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d102      	bne.n	800d318 <SPI_ETH_REG+0xd6>
 800d312:	8afb      	ldrh	r3, [r7, #22]
 800d314:	021b      	lsls	r3, r3, #8
 800d316:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	3301      	adds	r3, #1
 800d31c:	60fb      	str	r3, [r7, #12]
 800d31e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	429a      	cmp	r2, r3
 800d326:	dbe3      	blt.n	800d2f0 <SPI_ETH_REG+0xae>
			}
		 return(res);
 800d328:	8afb      	ldrh	r3, [r7, #22]
 800d32a:	e00c      	b.n	800d346 <SPI_ETH_REG+0x104>
		}else
		{
			res=SPI_ETH(x);
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f7ff ff60 	bl	800d1f2 <SPI_ETH>
 800d332:	4603      	mov	r3, r0
 800d334:	82fb      	strh	r3, [r7, #22]
			x->TX[1]++;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	7f5b      	ldrb	r3, [r3, #29]
 800d33a:	3301      	adds	r3, #1
 800d33c:	b2da      	uxtb	r2, r3
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	775a      	strb	r2, [r3, #29]
			return(res);
 800d342:	8afb      	ldrh	r3, [r7, #22]
 800d344:	e7ff      	b.n	800d346 <SPI_ETH_REG+0x104>
		}
 	 }
}
 800d346:	4618      	mov	r0, r3
 800d348:	3718      	adds	r7, #24
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}

0800d34e <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5500_SPI * x, uint16_t addr, uint16_t  data, uint8_t socket)
{
 800d34e:	b580      	push	{r7, lr}
 800d350:	b088      	sub	sp, #32
 800d352:	af00      	add	r7, sp, #0
 800d354:	60f8      	str	r0, [r7, #12]
 800d356:	4608      	mov	r0, r1
 800d358:	4611      	mov	r1, r2
 800d35a:	461a      	mov	r2, r3
 800d35c:	4603      	mov	r3, r0
 800d35e:	817b      	strh	r3, [r7, #10]
 800d360:	460b      	mov	r3, r1
 800d362:	813b      	strh	r3, [r7, #8]
 800d364:	4613      	mov	r3, r2
 800d366:	71fb      	strb	r3, [r7, #7]
	uint16_t res=0;
 800d368:	2300      	movs	r3, #0
 800d36a:	83fb      	strh	r3, [r7, #30]
	uint8_t num[2];
			x->TX[2]= ((socket)<<3)|0x04;
 800d36c:	79fb      	ldrb	r3, [r7, #7]
 800d36e:	00db      	lsls	r3, r3, #3
 800d370:	b25b      	sxtb	r3, r3
 800d372:	f043 0304 	orr.w	r3, r3, #4
 800d376:	b25b      	sxtb	r3, r3
 800d378:	b2da      	uxtb	r2, r3
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	779a      	strb	r2, [r3, #30]
			num[1] = data & 0x00FF ;
 800d37e:	893b      	ldrh	r3, [r7, #8]
 800d380:	b2db      	uxtb	r3, r3
 800d382:	757b      	strb	r3, [r7, #21]
			num[0] = (data & 0xFF00)>>8 ;
 800d384:	893b      	ldrh	r3, [r7, #8]
 800d386:	0a1b      	lsrs	r3, r3, #8
 800d388:	b29b      	uxth	r3, r3
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	753b      	strb	r3, [r7, #20]

			 for(int i=0; i<(2); i++)
 800d38e:	2300      	movs	r3, #0
 800d390:	61bb      	str	r3, [r7, #24]
 800d392:	e01b      	b.n	800d3cc <SPI_ETH_WR_REG_16+0x7e>
				 {
				 	x->TX[1]= addr & 0x00FF;//x->TX[2]= addr & 0x00FF;
 800d394:	897b      	ldrh	r3, [r7, #10]
 800d396:	b2da      	uxtb	r2, r3
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	775a      	strb	r2, [r3, #29]
				 	x->TX[0]=(addr & 0xFF00)>>8;//x->TX[1]=(addr & 0xFF00)>>8;
 800d39c:	897b      	ldrh	r3, [r7, #10]
 800d39e:	0a1b      	lsrs	r3, r3, #8
 800d3a0:	b29b      	uxth	r3, r3
 800d3a2:	b2da      	uxtb	r2, r3
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	771a      	strb	r2, [r3, #28]
					addr++;
 800d3a8:	897b      	ldrh	r3, [r7, #10]
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	817b      	strh	r3, [r7, #10]
					x->TX[3]=num[i];
 800d3ae:	f107 0214 	add.w	r2, r7, #20
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	781a      	ldrb	r2, [r3, #0]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	77da      	strb	r2, [r3, #31]
					res=SPI_ETH(x);
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	f7ff ff18 	bl	800d1f2 <SPI_ETH>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	83fb      	strh	r3, [r7, #30]
			 for(int i=0; i<(2); i++)
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	61bb      	str	r3, [r7, #24]
 800d3cc:	69bb      	ldr	r3, [r7, #24]
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	dde0      	ble.n	800d394 <SPI_ETH_WR_REG_16+0x46>
				 }
			 return(res);
 800d3d2:	8bfb      	ldrh	r3, [r7, #30]
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3720      	adds	r7, #32
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5500_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght, uint8_t socket )
{
 800d3dc:	b590      	push	{r4, r7, lr}
 800d3de:	b087      	sub	sp, #28
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	607a      	str	r2, [r7, #4]
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	817b      	strh	r3, [r7, #10]
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	813b      	strh	r3, [r7, #8]
		x->TX[2]= ((socket)<<3)|0x00;
 800d3f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d3f4:	00db      	lsls	r3, r3, #3
 800d3f6:	b2da      	uxtb	r2, r3
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	779a      	strb	r2, [r3, #30]
	if(lnght < 2048)
 800d3fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d3fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d402:	d226      	bcs.n	800d452 <SPI_ETH_RD_RCV_REG_16+0x76>
	{
			x->TX[3]=0x00;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2200      	movs	r2, #0
 800d408:	77da      	strb	r2, [r3, #31]
			for(int i=0; i<(lnght); i++)
 800d40a:	2300      	movs	r3, #0
 800d40c:	617b      	str	r3, [r7, #20]
 800d40e:	e01a      	b.n	800d446 <SPI_ETH_RD_RCV_REG_16+0x6a>
				{
				x->TX[1] = addr & 0x00FF;
 800d410:	897b      	ldrh	r3, [r7, #10]
 800d412:	b2da      	uxtb	r2, r3
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	775a      	strb	r2, [r3, #29]
				x->TX[0] = (addr & 0xFF00)>>8;
 800d418:	897b      	ldrh	r3, [r7, #10]
 800d41a:	0a1b      	lsrs	r3, r3, #8
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	b2da      	uxtb	r2, r3
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	771a      	strb	r2, [r3, #28]
				data[i+offset]=SPI_ETH(x);
 800d424:	893a      	ldrh	r2, [r7, #8]
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	4413      	add	r3, r2
 800d42a:	461a      	mov	r2, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	189c      	adds	r4, r3, r2
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	f7ff fede 	bl	800d1f2 <SPI_ETH>
 800d436:	4603      	mov	r3, r0
 800d438:	7023      	strb	r3, [r4, #0]
				addr++;
 800d43a:	897b      	ldrh	r3, [r7, #10]
 800d43c:	3301      	adds	r3, #1
 800d43e:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	3301      	adds	r3, #1
 800d444:	617b      	str	r3, [r7, #20]
 800d446:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d448:	697a      	ldr	r2, [r7, #20]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	dbe0      	blt.n	800d410 <SPI_ETH_RD_RCV_REG_16+0x34>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d44e:	2300      	movs	r3, #0
 800d450:	e000      	b.n	800d454 <SPI_ETH_RD_RCV_REG_16+0x78>
	}
	else
	{
	return(1);
 800d452:	2301      	movs	r3, #1
	}
}
 800d454:	4618      	mov	r0, r3
 800d456:	371c      	adds	r7, #28
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd90      	pop	{r4, r7, pc}

0800d45c <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5500_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght, uint8_t socket )
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b086      	sub	sp, #24
 800d460:	af00      	add	r7, sp, #0
 800d462:	60f8      	str	r0, [r7, #12]
 800d464:	607a      	str	r2, [r7, #4]
 800d466:	461a      	mov	r2, r3
 800d468:	460b      	mov	r3, r1
 800d46a:	817b      	strh	r3, [r7, #10]
 800d46c:	4613      	mov	r3, r2
 800d46e:	813b      	strh	r3, [r7, #8]
		x->TX[2]= ((socket)<<3)|0x04;
 800d470:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d474:	00db      	lsls	r3, r3, #3
 800d476:	b25b      	sxtb	r3, r3
 800d478:	f043 0304 	orr.w	r3, r3, #4
 800d47c:	b25b      	sxtb	r3, r3
 800d47e:	b2da      	uxtb	r2, r3
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	779a      	strb	r2, [r3, #30]
	if(lnght < 2048)
 800d484:	8c3b      	ldrh	r3, [r7, #32]
 800d486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d48a:	d224      	bcs.n	800d4d6 <SPI_ETH_WR_TX_REG_16+0x7a>
	{

			for(int i=0; i<(lnght); i++)
 800d48c:	2300      	movs	r3, #0
 800d48e:	617b      	str	r3, [r7, #20]
 800d490:	e01b      	b.n	800d4ca <SPI_ETH_WR_TX_REG_16+0x6e>
				{
				x->TX[1] = addr & 0x00FF;
 800d492:	897b      	ldrh	r3, [r7, #10]
 800d494:	b2da      	uxtb	r2, r3
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	775a      	strb	r2, [r3, #29]
				x->TX[0] = (addr & 0xFF00)>>8;
 800d49a:	897b      	ldrh	r3, [r7, #10]
 800d49c:	0a1b      	lsrs	r3, r3, #8
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	b2da      	uxtb	r2, r3
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	771a      	strb	r2, [r3, #28]
				x->TX[3]= x->data[i+offset];
 800d4a6:	893a      	ldrh	r2, [r7, #8]
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	77da      	strb	r2, [r3, #31]
				SPI_ETH(x);
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f7ff fe9a 	bl	800d1f2 <SPI_ETH>
				addr++;
 800d4be:	897b      	ldrh	r3, [r7, #10]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	617b      	str	r3, [r7, #20]
 800d4ca:	8c3b      	ldrh	r3, [r7, #32]
 800d4cc:	697a      	ldr	r2, [r7, #20]
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	dbdf      	blt.n	800d492 <SPI_ETH_WR_TX_REG_16+0x36>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	e000      	b.n	800d4d8 <SPI_ETH_WR_TX_REG_16+0x7c>
	}
	else
	{
	return(1);
 800d4d6:	2301      	movs	r3, #1
	}
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3718      	adds	r7, #24
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5500_SPI * y, uint8_t socket, uint8_t z)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	70fb      	strb	r3, [r7, #3]
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= 0x00; 				//High Address Phase Hardcoded MR Register
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	771a      	strb	r2, [r3, #28]
	y->TX[1]= 0x01;					//Low Address Phase Command
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	775a      	strb	r2, [r3, #29]
	y->TX[2]= ((socket<<3)|0x04);	//Control Phase address + R/W + OP Mode
 800d4fc:	78fb      	ldrb	r3, [r7, #3]
 800d4fe:	00db      	lsls	r3, r3, #3
 800d500:	b25b      	sxtb	r3, r3
 800d502:	f043 0304 	orr.w	r3, r3, #4
 800d506:	b25b      	sxtb	r3, r3
 800d508:	b2da      	uxtb	r2, r3
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	779a      	strb	r2, [r3, #30]
	y->TX[3]= z ;		//Load data to save
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	78ba      	ldrb	r2, [r7, #2]
 800d512:	77da      	strb	r2, [r3, #31]
	SPI_ETH(y);
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f7ff fe6c 	bl	800d1f2 <SPI_ETH>
}
 800d51a:	bf00      	nop
 800d51c:	4618      	mov	r0, r3
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5500_SPI * y, uint8_t socket, uint8_t z)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	460b      	mov	r3, r1
 800d52e:	70fb      	strb	r3, [r7, #3]
 800d530:	4613      	mov	r3, r2
 800d532:	70bb      	strb	r3, [r7, #2]
		y->TX[0]= 0x00; 				//High Address Phase Hardcoded MR Register
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	771a      	strb	r2, [r3, #28]
		y->TX[1]= 0x00;					//Low Address Phase Mode
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	775a      	strb	r2, [r3, #29]
		y->TX[2]= ((socket)<<3)|0x04;	//Control Phase address + R/W + OP Mode
 800d540:	78fb      	ldrb	r3, [r7, #3]
 800d542:	00db      	lsls	r3, r3, #3
 800d544:	b25b      	sxtb	r3, r3
 800d546:	f043 0304 	orr.w	r3, r3, #4
 800d54a:	b25b      	sxtb	r3, r3
 800d54c:	b2da      	uxtb	r2, r3
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	779a      	strb	r2, [r3, #30]
		y->TX[3]= z ;		//Load data to save
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	78ba      	ldrb	r2, [r7, #2]
 800d556:	77da      	strb	r2, [r3, #31]

	SPI_ETH(y);
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f7ff fe4a 	bl	800d1f2 <SPI_ETH>
}
 800d55e:	bf00      	nop
 800d560:	4618      	mov	r0, r3
 800d562:	3708      	adds	r7, #8
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <eth_init>:


uint8_t eth_init(struct W5500_SPI * ETH)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b084      	sub	sp, #16
 800d56c:	af02      	add	r7, sp, #8
 800d56e:	6078      	str	r0, [r7, #4]
  	 SPI_ETH_RESET(ETH);	//Reset W5500 por hardware
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f7ff fdf3 	bl	800d15c <SPI_ETH_RESET>
  	 HAL_Delay(800);
 800d576:	f44f 7048 	mov.w	r0, #800	; 0x320
 800d57a:	f7f5 fad3 	bl	8002b24 <HAL_Delay>

  	 SPI_ETH_REG(ETH, GAR,COMM_REG,SPI_WRITE, ETH->GAR,4);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d584:	3304      	adds	r3, #4
 800d586:	2204      	movs	r2, #4
 800d588:	9201      	str	r2, [sp, #4]
 800d58a:	9300      	str	r3, [sp, #0]
 800d58c:	2301      	movs	r3, #1
 800d58e:	2200      	movs	r2, #0
 800d590:	2101      	movs	r1, #1
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f7ff fe55 	bl	800d242 <SPI_ETH_REG>

	 ETH->T8=0x00;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d59e:	2200      	movs	r2, #0
 800d5a0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, IMR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	9301      	str	r3, [sp, #4]
 800d5b4:	9200      	str	r2, [sp, #0]
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	2116      	movs	r1, #22
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f7ff fe40 	bl	800d242 <SPI_ETH_REG>

	 ETH->T8=0x0F;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5c8:	220f      	movs	r2, #15
 800d5ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RTR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5d4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d5d8:	461a      	mov	r2, r3
 800d5da:	2301      	movs	r3, #1
 800d5dc:	9301      	str	r3, [sp, #4]
 800d5de:	9200      	str	r2, [sp, #0]
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	2119      	movs	r1, #25
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f7ff fe2b 	bl	800d242 <SPI_ETH_REG>

	 ETH->T8=0xA0;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5f2:	22a0      	movs	r2, #160	; 0xa0
 800d5f4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RTR+1,COMM_REG,SPI_WRITE, ETH->T8,1);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d5fe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d602:	461a      	mov	r2, r3
 800d604:	2301      	movs	r3, #1
 800d606:	9301      	str	r3, [sp, #4]
 800d608:	9200      	str	r2, [sp, #0]
 800d60a:	2301      	movs	r3, #1
 800d60c:	2200      	movs	r2, #0
 800d60e:	211a      	movs	r1, #26
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f7ff fe16 	bl	800d242 <SPI_ETH_REG>

	 ETH->T8=0x07;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d61c:	2207      	movs	r2, #7
 800d61e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RCR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d628:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d62c:	461a      	mov	r2, r3
 800d62e:	2301      	movs	r3, #1
 800d630:	9301      	str	r3, [sp, #4]
 800d632:	9200      	str	r2, [sp, #0]
 800d634:	2301      	movs	r3, #1
 800d636:	2200      	movs	r2, #0
 800d638:	211b      	movs	r1, #27
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f7ff fe01 	bl	800d242 <SPI_ETH_REG>

	 ETH->T8=0x00;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d646:	2200      	movs	r2, #0
 800d648:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, SIMR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d652:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d656:	461a      	mov	r2, r3
 800d658:	2301      	movs	r3, #1
 800d65a:	9301      	str	r3, [sp, #4]
 800d65c:	9200      	str	r2, [sp, #0]
 800d65e:	2301      	movs	r3, #1
 800d660:	2200      	movs	r2, #0
 800d662:	2118      	movs	r1, #24
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7ff fdec 	bl	800d242 <SPI_ETH_REG>

	 SPI_ETH_REG(ETH, SHAR,COMM_REG,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d670:	330c      	adds	r3, #12
 800d672:	2206      	movs	r2, #6
 800d674:	9201      	str	r2, [sp, #4]
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	2301      	movs	r3, #1
 800d67a:	2200      	movs	r2, #0
 800d67c:	2109      	movs	r1, #9
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f7ff fddf 	bl	800d242 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-MAC SET\r\n",strlen("\r\nETH-W5500-MAC SET"));
 800d684:	2113      	movs	r1, #19
 800d686:	481d      	ldr	r0, [pc, #116]	; (800d6fc <eth_init+0x194>)
 800d688:	f7f3 ff36 	bl	80014f8 <ITM0_Write>
	 SPI_ETH_REG(ETH, GAR,COMM_REG,SPI_WRITE, ETH->GAR,4);	//SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d692:	3304      	adds	r3, #4
 800d694:	2204      	movs	r2, #4
 800d696:	9201      	str	r2, [sp, #4]
 800d698:	9300      	str	r3, [sp, #0]
 800d69a:	2301      	movs	r3, #1
 800d69c:	2200      	movs	r2, #0
 800d69e:	2101      	movs	r1, #1
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f7ff fdce 	bl	800d242 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-GATEWAY SET\r\n",strlen("\r\nETH-W5500-GATEWAY SET\r\n"));									//same for server and client
 800d6a6:	2119      	movs	r1, #25
 800d6a8:	4815      	ldr	r0, [pc, #84]	; (800d700 <eth_init+0x198>)
 800d6aa:	f7f3 ff25 	bl	80014f8 <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR,COMM_REG,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d6b4:	3308      	adds	r3, #8
 800d6b6:	2204      	movs	r2, #4
 800d6b8:	9201      	str	r2, [sp, #4]
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	2301      	movs	r3, #1
 800d6be:	2200      	movs	r2, #0
 800d6c0:	2105      	movs	r1, #5
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f7ff fdbd 	bl	800d242 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-SUBNET SET\r\n",strlen("\r\nETH-W5500-SUBNET SET"));											//same for server and client
 800d6c8:	2116      	movs	r1, #22
 800d6ca:	480e      	ldr	r0, [pc, #56]	; (800d704 <eth_init+0x19c>)
 800d6cc:	f7f3 ff14 	bl	80014f8 <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR,COMM_REG,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d6d6:	3312      	adds	r3, #18
 800d6d8:	2204      	movs	r2, #4
 800d6da:	9201      	str	r2, [sp, #4]
 800d6dc:	9300      	str	r3, [sp, #0]
 800d6de:	2301      	movs	r3, #1
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	210f      	movs	r1, #15
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f7ff fdac 	bl	800d242 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-IP SET\r\n",strlen("\r\nETH-W5500-IP SET"));
 800d6ea:	2112      	movs	r1, #18
 800d6ec:	4806      	ldr	r0, [pc, #24]	; (800d708 <eth_init+0x1a0>)
 800d6ee:	f7f3 ff03 	bl	80014f8 <ITM0_Write>

}
 800d6f2:	bf00      	nop
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3708      	adds	r7, #8
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	08010ce8 	.word	0x08010ce8
 800d700:	08010d00 	.word	0x08010d00
 800d704:	08010d1c 	.word	0x08010d1c
 800d708:	08010d38 	.word	0x08010d38

0800d70c <eth_socket_init>:

uint8_t eth_socket_init(struct W5500_SPI * ETH, uint8_t socket)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af02      	add	r7, sp, #8
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	460b      	mov	r3, r1
 800d716:	70fb      	strb	r3, [r7, #3]

	 ETH->T8=0x02;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d71e:	2202      	movs	r2, #2
 800d720:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S0_REG,SPI_WRITE, ETH->T8,1);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d72a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d72e:	461a      	mov	r2, r3
 800d730:	2301      	movs	r3, #1
 800d732:	9301      	str	r3, [sp, #4]
 800d734:	9200      	str	r2, [sp, #0]
 800d736:	2301      	movs	r3, #1
 800d738:	2201      	movs	r2, #1
 800d73a:	211e      	movs	r1, #30
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f7ff fd80 	bl	800d242 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S0_REG,SPI_WRITE, ETH->T8,1);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d748:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d74c:	461a      	mov	r2, r3
 800d74e:	2301      	movs	r3, #1
 800d750:	9301      	str	r3, [sp, #4]
 800d752:	9200      	str	r2, [sp, #0]
 800d754:	2301      	movs	r3, #1
 800d756:	2201      	movs	r2, #1
 800d758:	211f      	movs	r1, #31
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f7ff fd71 	bl	800d242 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S1_REG,SPI_WRITE, ETH->T8,1);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d766:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d76a:	461a      	mov	r2, r3
 800d76c:	2301      	movs	r3, #1
 800d76e:	9301      	str	r3, [sp, #4]
 800d770:	9200      	str	r2, [sp, #0]
 800d772:	2301      	movs	r3, #1
 800d774:	2205      	movs	r2, #5
 800d776:	211e      	movs	r1, #30
 800d778:	6878      	ldr	r0, [r7, #4]
 800d77a:	f7ff fd62 	bl	800d242 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S1_REG,SPI_WRITE, ETH->T8,1);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d784:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d788:	461a      	mov	r2, r3
 800d78a:	2301      	movs	r3, #1
 800d78c:	9301      	str	r3, [sp, #4]
 800d78e:	9200      	str	r2, [sp, #0]
 800d790:	2301      	movs	r3, #1
 800d792:	2205      	movs	r2, #5
 800d794:	211f      	movs	r1, #31
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f7ff fd53 	bl	800d242 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S2_REG,SPI_WRITE, ETH->T8,1);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7a2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	9301      	str	r3, [sp, #4]
 800d7ac:	9200      	str	r2, [sp, #0]
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	2209      	movs	r2, #9
 800d7b2:	211e      	movs	r1, #30
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f7ff fd44 	bl	800d242 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S2_REG,SPI_WRITE, ETH->T8,1);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7c0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	9301      	str	r3, [sp, #4]
 800d7ca:	9200      	str	r2, [sp, #0]
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	2209      	movs	r2, #9
 800d7d0:	211f      	movs	r1, #31
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7ff fd35 	bl	800d242 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S3_REG,SPI_WRITE, ETH->T8,1);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7de:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	9301      	str	r3, [sp, #4]
 800d7e8:	9200      	str	r2, [sp, #0]
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	220d      	movs	r2, #13
 800d7ee:	211e      	movs	r1, #30
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f7ff fd26 	bl	800d242 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S3_REG,SPI_WRITE, ETH->T8,1);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7fc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d800:	461a      	mov	r2, r3
 800d802:	2301      	movs	r3, #1
 800d804:	9301      	str	r3, [sp, #4]
 800d806:	9200      	str	r2, [sp, #0]
 800d808:	2301      	movs	r3, #1
 800d80a:	220d      	movs	r2, #13
 800d80c:	211f      	movs	r1, #31
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7ff fd17 	bl	800d242 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S4_REG,SPI_WRITE, ETH->T8,1);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d81a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d81e:	461a      	mov	r2, r3
 800d820:	2301      	movs	r3, #1
 800d822:	9301      	str	r3, [sp, #4]
 800d824:	9200      	str	r2, [sp, #0]
 800d826:	2301      	movs	r3, #1
 800d828:	2211      	movs	r2, #17
 800d82a:	211e      	movs	r1, #30
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f7ff fd08 	bl	800d242 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S4_REG,SPI_WRITE, ETH->T8,1);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d838:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d83c:	461a      	mov	r2, r3
 800d83e:	2301      	movs	r3, #1
 800d840:	9301      	str	r3, [sp, #4]
 800d842:	9200      	str	r2, [sp, #0]
 800d844:	2301      	movs	r3, #1
 800d846:	2211      	movs	r2, #17
 800d848:	211f      	movs	r1, #31
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f7ff fcf9 	bl	800d242 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S5_REG,SPI_WRITE, ETH->T8,1);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d856:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d85a:	461a      	mov	r2, r3
 800d85c:	2301      	movs	r3, #1
 800d85e:	9301      	str	r3, [sp, #4]
 800d860:	9200      	str	r2, [sp, #0]
 800d862:	2301      	movs	r3, #1
 800d864:	2215      	movs	r2, #21
 800d866:	211e      	movs	r1, #30
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7ff fcea 	bl	800d242 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S5_REG,SPI_WRITE, ETH->T8,1);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d874:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d878:	461a      	mov	r2, r3
 800d87a:	2301      	movs	r3, #1
 800d87c:	9301      	str	r3, [sp, #4]
 800d87e:	9200      	str	r2, [sp, #0]
 800d880:	2301      	movs	r3, #1
 800d882:	2215      	movs	r2, #21
 800d884:	211f      	movs	r1, #31
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f7ff fcdb 	bl	800d242 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S6_REG,SPI_WRITE, ETH->T8,1);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d892:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d896:	461a      	mov	r2, r3
 800d898:	2301      	movs	r3, #1
 800d89a:	9301      	str	r3, [sp, #4]
 800d89c:	9200      	str	r2, [sp, #0]
 800d89e:	2301      	movs	r3, #1
 800d8a0:	2219      	movs	r2, #25
 800d8a2:	211e      	movs	r1, #30
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f7ff fccc 	bl	800d242 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S6_REG,SPI_WRITE, ETH->T8,1);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8b0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	9301      	str	r3, [sp, #4]
 800d8ba:	9200      	str	r2, [sp, #0]
 800d8bc:	2301      	movs	r3, #1
 800d8be:	2219      	movs	r2, #25
 800d8c0:	211f      	movs	r1, #31
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f7ff fcbd 	bl	800d242 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S7_REG,SPI_WRITE, ETH->T8,1);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8ce:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	9301      	str	r3, [sp, #4]
 800d8d8:	9200      	str	r2, [sp, #0]
 800d8da:	2301      	movs	r3, #1
 800d8dc:	221d      	movs	r2, #29
 800d8de:	211e      	movs	r1, #30
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f7ff fcae 	bl	800d242 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S7_REG,SPI_WRITE, ETH->T8,1);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d8ec:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	9301      	str	r3, [sp, #4]
 800d8f6:	9200      	str	r2, [sp, #0]
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	221d      	movs	r2, #29
 800d8fc:	211f      	movs	r1, #31
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f7ff fc9f 	bl	800d242 <SPI_ETH_REG>
	 ETH->T8=0x00;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d90a:	2200      	movs	r2, #0
 800d90c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, S_TX_WR,S0_REG,SPI_WRITE, ETH->T8,1);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d916:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d91a:	461a      	mov	r2, r3
 800d91c:	2301      	movs	r3, #1
 800d91e:	9301      	str	r3, [sp, #4]
 800d920:	9200      	str	r2, [sp, #0]
 800d922:	2301      	movs	r3, #1
 800d924:	2201      	movs	r2, #1
 800d926:	2124      	movs	r1, #36	; 0x24
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f7ff fc8a 	bl	800d242 <SPI_ETH_REG>
	 SPI_ETH_REG(ETH, S_TX_WR+1,S0_REG,SPI_WRITE, ETH->T8,1);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d934:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d938:	461a      	mov	r2, r3
 800d93a:	2301      	movs	r3, #1
 800d93c:	9301      	str	r3, [sp, #4]
 800d93e:	9200      	str	r2, [sp, #0]
 800d940:	2301      	movs	r3, #1
 800d942:	2201      	movs	r2, #1
 800d944:	2125      	movs	r1, #37	; 0x25
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f7ff fc7b 	bl	800d242 <SPI_ETH_REG>
	 uint16_t b=0;
 800d94c:	2300      	movs	r3, #0
 800d94e:	81fb      	strh	r3, [r7, #14]
	 uint8_t spi_Data[2];
	 b = SPI_ETH_REG(ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 800d950:	2302      	movs	r3, #2
 800d952:	9301      	str	r3, [sp, #4]
 800d954:	f107 030c 	add.w	r3, r7, #12
 800d958:	9300      	str	r3, [sp, #0]
 800d95a:	2300      	movs	r3, #0
 800d95c:	2201      	movs	r2, #1
 800d95e:	2124      	movs	r1, #36	; 0x24
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f7ff fc6e 	bl	800d242 <SPI_ETH_REG>
 800d966:	4603      	mov	r3, r0
 800d968:	81fb      	strh	r3, [r7, #14]
	 //ITM0_Write("\r\nETH-W5500-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP SET"));									//same for server and client
	 SPI_ETH_REG(ETH, S_PORT, S0_REG,SPI_WRITE, ETH->S_PORT,2);									//same for server and client
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d970:	3302      	adds	r3, #2
 800d972:	2202      	movs	r2, #2
 800d974:	9201      	str	r2, [sp, #4]
 800d976:	9300      	str	r3, [sp, #0]
 800d978:	2301      	movs	r3, #1
 800d97a:	2201      	movs	r2, #1
 800d97c:	2104      	movs	r1, #4
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f7ff fc5f 	bl	800d242 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800d984:	212c      	movs	r1, #44	; 0x2c
 800d986:	4804      	ldr	r0, [pc, #16]	; (800d998 <eth_socket_init+0x28c>)
 800d988:	f7f3 fdb6 	bl	80014f8 <ITM0_Write>


}
 800d98c:	bf00      	nop
 800d98e:	4618      	mov	r0, r3
 800d990:	3710      	adds	r7, #16
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	08010d50 	.word	0x08010d50

0800d99c <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5500_SPI * y, uint8_t socket)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	70fb      	strb	r3, [r7, #3]
			y->TX[0]= 0x00; 				//High Address Phase Hardcoded Stat Register
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	771a      	strb	r2, [r3, #28]
			y->TX[1]= 0x03;					//Low Address Phase Mode
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2203      	movs	r2, #3
 800d9b2:	775a      	strb	r2, [r3, #29]
			y->TX[2]= ((socket)<<3)|0x00;	   //Control Phase address + R/W + OP Mode
 800d9b4:	78fb      	ldrb	r3, [r7, #3]
 800d9b6:	00db      	lsls	r3, r3, #3
 800d9b8:	b2da      	uxtb	r2, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	779a      	strb	r2, [r3, #30]
			SPI_ETH(y);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f7ff fc17 	bl	800d1f2 <SPI_ETH>
			return(y->RX[3]);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23

}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3708      	adds	r7, #8
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5500_SPI * y, uint8_t socket)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b082      	sub	sp, #8
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
 800d9da:	460b      	mov	r3, r1
 800d9dc:	70fb      	strb	r3, [r7, #3]
			y->TX[0]= 0x00; 				//High Address Phase Hardcoded Command Register
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	771a      	strb	r2, [r3, #28]
			y->TX[1]= 0x01;					//Low Address Phase Mode
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	775a      	strb	r2, [r3, #29]
			y->TX[2]= ((socket)<<3)|0x00;	   //Control Phase address + R/W + OP Mode
 800d9ea:	78fb      	ldrb	r3, [r7, #3]
 800d9ec:	00db      	lsls	r3, r3, #3
 800d9ee:	b2da      	uxtb	r2, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	779a      	strb	r2, [r3, #30]
			SPI_ETH(y);
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f7ff fbfc 	bl	800d1f2 <SPI_ETH>
			return(y->RX[3]);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23

}
 800da00:	4618      	mov	r0, r3
 800da02:	3708      	adds	r7, #8
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5500_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b08c      	sub	sp, #48	; 0x30
 800da0c:	af02      	add	r7, sp, #8
 800da0e:	60f8      	str	r0, [r7, #12]
 800da10:	607a      	str	r2, [r7, #4]
 800da12:	461a      	mov	r2, r3
 800da14:	460b      	mov	r3, r1
 800da16:	72fb      	strb	r3, [r7, #11]
 800da18:	4613      	mov	r3, r2
 800da1a:	813b      	strh	r3, [r7, #8]
	uint16_t S_bf_rcv_offset=0,
 800da1c:	2300      	movs	r3, #0
 800da1e:	84fb      	strh	r3, [r7, #38]	; 0x26
			 left_size=0,
 800da20:	2300      	movs	r3, #0
 800da22:	84bb      	strh	r3, [r7, #36]	; 0x24
			 upper_size=0,
 800da24:	2300      	movs	r3, #0
 800da26:	847b      	strh	r3, [r7, #34]	; 0x22
			 destination_addr=0,
 800da28:	2300      	movs	r3, #0
 800da2a:	843b      	strh	r3, [r7, #32]
			 S_RX_RD=0,
 800da2c:	2300      	movs	r3, #0
 800da2e:	83fb      	strh	r3, [r7, #30]
			 S_get_offset=0,
 800da30:	2300      	movs	r3, #0
 800da32:	83bb      	strh	r3, [r7, #28]
			 S_get_start_address=0,
 800da34:	2300      	movs	r3, #0
 800da36:	837b      	strh	r3, [r7, #26]
			 S_mem_pointer=0,
 800da38:	2300      	movs	r3, #0
 800da3a:	833b      	strh	r3, [r7, #24]
			 RX_MASK=0,
 800da3c:	2300      	movs	r3, #0
 800da3e:	82fb      	strh	r3, [r7, #22]
			 RX_BASE=0;
 800da40:	2300      	movs	r3, #0
 800da42:	82bb      	strh	r3, [r7, #20]
			RX_BASE=ETH->gS3_RX_BASE;
		}
		break;*/
		default :
		{
			RX_MASK=ETH->gS_RX_MASK;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800da4e:	82fb      	strh	r3, [r7, #22]
			RX_BASE=ETH->gS_RX_BASE;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da5a:	82bb      	strh	r3, [r7, #20]
		}
		break;
 800da5c:	bf00      	nop
	}

	S_RX_RD = SPI_ETH_REG(ETH, S_RX_RD0 ,S0_REG ,SPI_READ, spi_Data,2);//S_RX_RD = SPI_ETH_REG(ETH, S_RX_RD_ADDR_BASEHH + socket ,S_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800da5e:	2302      	movs	r3, #2
 800da60:	9301      	str	r3, [sp, #4]
 800da62:	f107 0310 	add.w	r3, r7, #16
 800da66:	9300      	str	r3, [sp, #0]
 800da68:	2300      	movs	r3, #0
 800da6a:	2201      	movs	r2, #1
 800da6c:	2128      	movs	r1, #40	; 0x28
 800da6e:	68f8      	ldr	r0, [r7, #12]
 800da70:	f7ff fbe7 	bl	800d242 <SPI_ETH_REG>
 800da74:	4603      	mov	r3, r0
 800da76:	83fb      	strh	r3, [r7, #30]
	S_get_offset = S_RX_RD & RX_MASK;
 800da78:	8bfa      	ldrh	r2, [r7, #30]
 800da7a:	8afb      	ldrh	r3, [r7, #22]
 800da7c:	4013      	ands	r3, r2
 800da7e:	83bb      	strh	r3, [r7, #28]
	S_get_start_address  = RX_BASE + S_get_offset;
 800da80:	8aba      	ldrh	r2, [r7, #20]
 800da82:	8bbb      	ldrh	r3, [r7, #28]
 800da84:	4413      	add	r3, r2
 800da86:	837b      	strh	r3, [r7, #26]
	if((S_get_offset  + sizedata )>(RX_MASK + 1))
 800da88:	8bba      	ldrh	r2, [r7, #28]
 800da8a:	893b      	ldrh	r3, [r7, #8]
 800da8c:	441a      	add	r2, r3
 800da8e:	8afb      	ldrh	r3, [r7, #22]
 800da90:	3301      	adds	r3, #1
 800da92:	429a      	cmp	r2, r3
 800da94:	dd30      	ble.n	800daf8 <eth_rd_SOCKET_DATA+0xf0>
		{
			upper_size = (RX_MASK + 1) - S_get_offset ;
 800da96:	8afa      	ldrh	r2, [r7, #22]
 800da98:	8bbb      	ldrh	r3, [r7, #28]
 800da9a:	1ad3      	subs	r3, r2, r3
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	3301      	adds	r3, #1
 800daa0:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , S_get_start_address , ETH->data , S_bf_rcv_offset, upper_size, socket);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800daa8:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800daaa:	8b79      	ldrh	r1, [r7, #26]
 800daac:	7afb      	ldrb	r3, [r7, #11]
 800daae:	9301      	str	r3, [sp, #4]
 800dab0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dab2:	9300      	str	r3, [sp, #0]
 800dab4:	4603      	mov	r3, r0
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f7ff fc90 	bl	800d3dc <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800dabc:	8c3a      	ldrh	r2, [r7, #32]
 800dabe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dac0:	4413      	add	r3, r2
 800dac2:	843b      	strh	r3, [r7, #32]
			left_size=sizedata-upper_size;
 800dac4:	893a      	ldrh	r2, [r7, #8]
 800dac6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dac8:	1ad3      	subs	r3, r2, r3
 800daca:	84bb      	strh	r3, [r7, #36]	; 0x24
			S_bf_rcv_offset=upper_size;
 800dacc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dace:	84fb      	strh	r3, [r7, #38]	; 0x26
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S_bf_rcv_offset, left_size, socket);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800dad6:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800dad8:	8ab9      	ldrh	r1, [r7, #20]
 800dada:	7afb      	ldrb	r3, [r7, #11]
 800dadc:	9301      	str	r3, [sp, #4]
 800dade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dae0:	9300      	str	r3, [sp, #0]
 800dae2:	4603      	mov	r3, r0
 800dae4:	68f8      	ldr	r0, [r7, #12]
 800dae6:	f7ff fc79 	bl	800d3dc <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S_RX_RD + sizedata;
 800daea:	8bfa      	ldrh	r2, [r7, #30]
 800daec:	893b      	ldrh	r3, [r7, #8]
 800daee:	4413      	add	r3, r2
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	801a      	strh	r2, [r3, #0]
 800daf6:	e012      	b.n	800db1e <eth_rd_SOCKET_DATA+0x116>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S_get_start_address , ETH->data , S_bf_rcv_offset, sizedata, socket);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800dafe:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800db00:	8b79      	ldrh	r1, [r7, #26]
 800db02:	7afb      	ldrb	r3, [r7, #11]
 800db04:	9301      	str	r3, [sp, #4]
 800db06:	893b      	ldrh	r3, [r7, #8]
 800db08:	9300      	str	r3, [sp, #0]
 800db0a:	4603      	mov	r3, r0
 800db0c:	68f8      	ldr	r0, [r7, #12]
 800db0e:	f7ff fc65 	bl	800d3dc <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S_RX_RD + sizedata;
 800db12:	8bfa      	ldrh	r2, [r7, #30]
 800db14:	893b      	ldrh	r3, [r7, #8]
 800db16:	4413      	add	r3, r2
 800db18:	b29a      	uxth	r2, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	b29b      	uxth	r3, r3
}
 800db22:	4618      	mov	r0, r3
 800db24:	3728      	adds	r7, #40	; 0x28
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5500_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b08c      	sub	sp, #48	; 0x30
 800db2e:	af02      	add	r7, sp, #8
 800db30:	60f8      	str	r0, [r7, #12]
 800db32:	607a      	str	r2, [r7, #4]
 800db34:	461a      	mov	r2, r3
 800db36:	460b      	mov	r3, r1
 800db38:	72fb      	strb	r3, [r7, #11]
 800db3a:	4613      	mov	r3, r2
 800db3c:	813b      	strh	r3, [r7, #8]
	uint16_t S_bf_rcv_offset=0,
 800db3e:	2300      	movs	r3, #0
 800db40:	84bb      	strh	r3, [r7, #36]	; 0x24
			 left_size=0,
 800db42:	2300      	movs	r3, #0
 800db44:	847b      	strh	r3, [r7, #34]	; 0x22
			 upper_size=0,
 800db46:	2300      	movs	r3, #0
 800db48:	843b      	strh	r3, [r7, #32]
			 source_addr=0,
 800db4a:	2300      	movs	r3, #0
 800db4c:	83fb      	strh	r3, [r7, #30]
			 Sn_TX_WR=0,
 800db4e:	2300      	movs	r3, #0
 800db50:	83bb      	strh	r3, [r7, #28]
			 get_offset=0,
 800db52:	2300      	movs	r3, #0
 800db54:	837b      	strh	r3, [r7, #26]
			 get_free_size=0,
 800db56:	2300      	movs	r3, #0
 800db58:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800db5a:	2300      	movs	r3, #0
 800db5c:	833b      	strh	r3, [r7, #24]
			 S_mem_pointer=0,
 800db5e:	2300      	movs	r3, #0
 800db60:	82fb      	strh	r3, [r7, #22]
			 TX_MASK=0,
 800db62:	2300      	movs	r3, #0
 800db64:	82bb      	strh	r3, [r7, #20]
			 TX_BASE=0;
 800db66:	2300      	movs	r3, #0
 800db68:	827b      	strh	r3, [r7, #18]
			TX_BASE=ETH->gS3_TX_BASE;
		}
		break;*/
		default :
		{
			TX_MASK=ETH->gS_TX_MASK;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db74:	82bb      	strh	r3, [r7, #20]
			TX_BASE=ETH->gS_TX_BASE;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db80:	827b      	strh	r3, [r7, #18]
		}
		break;
 800db82:	bf00      	nop
	}

	while(get_free_size<send_size)
 800db84:	e00c      	b.n	800dba0 <eth_wr_SOCKET_DATA+0x76>
			{
				get_free_size=SPI_ETH_REG(ETH, S_TX_FSR, S0_REG ,SPI_READ, spi_Data,2);//get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S_TX_FSR	=   0x420,
 800db86:	2302      	movs	r3, #2
 800db88:	9301      	str	r3, [sp, #4]
 800db8a:	f107 0310 	add.w	r3, r7, #16
 800db8e:	9300      	str	r3, [sp, #0]
 800db90:	2300      	movs	r3, #0
 800db92:	2201      	movs	r2, #1
 800db94:	2120      	movs	r1, #32
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	f7ff fb53 	bl	800d242 <SPI_ETH_REG>
 800db9c:	4603      	mov	r3, r0
 800db9e:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800dba0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dba2:	893b      	ldrh	r3, [r7, #8]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d3ee      	bcc.n	800db86 <eth_wr_SOCKET_DATA+0x5c>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2); // S_TX_RD =   0x424,Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S_TX_RD =   0x424,
 800dba8:	2302      	movs	r3, #2
 800dbaa:	9301      	str	r3, [sp, #4]
 800dbac:	f107 0310 	add.w	r3, r7, #16
 800dbb0:	9300      	str	r3, [sp, #0]
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	2124      	movs	r1, #36	; 0x24
 800dbb8:	68f8      	ldr	r0, [r7, #12]
 800dbba:	f7ff fb42 	bl	800d242 <SPI_ETH_REG>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	83bb      	strh	r3, [r7, #28]
				get_offset= Sn_TX_WR & TX_MASK;
 800dbc2:	8bba      	ldrh	r2, [r7, #28]
 800dbc4:	8abb      	ldrh	r3, [r7, #20]
 800dbc6:	4013      	ands	r3, r2
 800dbc8:	837b      	strh	r3, [r7, #26]
				get_start_address=TX_BASE + get_offset;
 800dbca:	8a7a      	ldrh	r2, [r7, #18]
 800dbcc:	8b7b      	ldrh	r3, [r7, #26]
 800dbce:	4413      	add	r3, r2
 800dbd0:	833b      	strh	r3, [r7, #24]

				if((get_offset + send_size)>(TX_MASK + 1))
 800dbd2:	8b7a      	ldrh	r2, [r7, #26]
 800dbd4:	893b      	ldrh	r3, [r7, #8]
 800dbd6:	441a      	add	r2, r3
 800dbd8:	8abb      	ldrh	r3, [r7, #20]
 800dbda:	3301      	adds	r3, #1
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	dd30      	ble.n	800dc42 <eth_wr_SOCKET_DATA+0x118>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800dbe0:	8aba      	ldrh	r2, [r7, #20]
 800dbe2:	8b7b      	ldrh	r3, [r7, #26]
 800dbe4:	1ad3      	subs	r3, r2, r3
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	3301      	adds	r3, #1
 800dbea:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S_bf_rcv_offset, upper_size,socket);
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800dbf2:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800dbf4:	8b39      	ldrh	r1, [r7, #24]
 800dbf6:	7afb      	ldrb	r3, [r7, #11]
 800dbf8:	9301      	str	r3, [sp, #4]
 800dbfa:	8c3b      	ldrh	r3, [r7, #32]
 800dbfc:	9300      	str	r3, [sp, #0]
 800dbfe:	4603      	mov	r3, r0
 800dc00:	68f8      	ldr	r0, [r7, #12]
 800dc02:	f7ff fc2b 	bl	800d45c <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800dc06:	8bfa      	ldrh	r2, [r7, #30]
 800dc08:	8c3b      	ldrh	r3, [r7, #32]
 800dc0a:	4413      	add	r3, r2
 800dc0c:	83fb      	strh	r3, [r7, #30]
						left_size=send_size-upper_size;
 800dc0e:	893a      	ldrh	r2, [r7, #8]
 800dc10:	8c3b      	ldrh	r3, [r7, #32]
 800dc12:	1ad3      	subs	r3, r2, r3
 800dc14:	847b      	strh	r3, [r7, #34]	; 0x22
						S_bf_rcv_offset=upper_size;
 800dc16:	8c3b      	ldrh	r3, [r7, #32]
 800dc18:	84bb      	strh	r3, [r7, #36]	; 0x24
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S_bf_rcv_offset, left_size, socket);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800dc20:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800dc22:	8a79      	ldrh	r1, [r7, #18]
 800dc24:	7afb      	ldrb	r3, [r7, #11]
 800dc26:	9301      	str	r3, [sp, #4]
 800dc28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc2a:	9300      	str	r3, [sp, #0]
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	68f8      	ldr	r0, [r7, #12]
 800dc30:	f7ff fc14 	bl	800d45c <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800dc34:	8bba      	ldrh	r2, [r7, #28]
 800dc36:	893b      	ldrh	r3, [r7, #8]
 800dc38:	4413      	add	r3, r2
 800dc3a:	b29a      	uxth	r2, r3
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	801a      	strh	r2, [r3, #0]
 800dc40:	e012      	b.n	800dc68 <eth_wr_SOCKET_DATA+0x13e>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S_bf_rcv_offset, send_size, socket);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800dc48:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800dc4a:	8b39      	ldrh	r1, [r7, #24]
 800dc4c:	7afb      	ldrb	r3, [r7, #11]
 800dc4e:	9301      	str	r3, [sp, #4]
 800dc50:	893b      	ldrh	r3, [r7, #8]
 800dc52:	9300      	str	r3, [sp, #0]
 800dc54:	4603      	mov	r3, r0
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f7ff fc00 	bl	800d45c <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800dc5c:	8bba      	ldrh	r2, [r7, #28]
 800dc5e:	893b      	ldrh	r3, [r7, #8]
 800dc60:	4413      	add	r3, r2
 800dc62:	b29a      	uxth	r2, r3
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	801a      	strh	r2, [r3, #0]
					}

}
 800dc68:	bf00      	nop
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3728      	adds	r7, #40	; 0x28
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}

0800dc72 <SPI_ETH_SNIFF>:

uint8_t SPI_ETH_SNIFF(struct W5500_SPY * Y,struct W5500_SPI * X)
{
 800dc72:	b580      	push	{r7, lr}
 800dc74:	b084      	sub	sp, #16
 800dc76:	af02      	add	r7, sp, #8
 800dc78:	6078      	str	r0, [r7, #4]
 800dc7a:	6039      	str	r1, [r7, #0]
	Y->MR=SPI_ETH_REG(X, 0 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc82:	3318      	adds	r3, #24
 800dc84:	2201      	movs	r2, #1
 800dc86:	9201      	str	r2, [sp, #4]
 800dc88:	9300      	str	r3, [sp, #0]
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	2100      	movs	r1, #0
 800dc90:	6838      	ldr	r0, [r7, #0]
 800dc92:	f7ff fad6 	bl	800d242 <SPI_ETH_REG>
 800dc96:	4603      	mov	r3, r0
 800dc98:	b2da      	uxtb	r2, r3
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	701a      	strb	r2, [r3, #0]

	Y->GAR[0]=SPI_ETH_REG(X, 1 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dca4:	3318      	adds	r3, #24
 800dca6:	2201      	movs	r2, #1
 800dca8:	9201      	str	r2, [sp, #4]
 800dcaa:	9300      	str	r3, [sp, #0]
 800dcac:	2300      	movs	r3, #0
 800dcae:	2200      	movs	r2, #0
 800dcb0:	2101      	movs	r1, #1
 800dcb2:	6838      	ldr	r0, [r7, #0]
 800dcb4:	f7ff fac5 	bl	800d242 <SPI_ETH_REG>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	b2da      	uxtb	r2, r3
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	705a      	strb	r2, [r3, #1]
	Y->GAR[1]=SPI_ETH_REG(X, 2 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dcc6:	3318      	adds	r3, #24
 800dcc8:	2201      	movs	r2, #1
 800dcca:	9201      	str	r2, [sp, #4]
 800dccc:	9300      	str	r3, [sp, #0]
 800dcce:	2300      	movs	r3, #0
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	2102      	movs	r1, #2
 800dcd4:	6838      	ldr	r0, [r7, #0]
 800dcd6:	f7ff fab4 	bl	800d242 <SPI_ETH_REG>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	b2da      	uxtb	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	709a      	strb	r2, [r3, #2]
	Y->GAR[2]=SPI_ETH_REG(X, 3 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dce8:	3318      	adds	r3, #24
 800dcea:	2201      	movs	r2, #1
 800dcec:	9201      	str	r2, [sp, #4]
 800dcee:	9300      	str	r3, [sp, #0]
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	2103      	movs	r1, #3
 800dcf6:	6838      	ldr	r0, [r7, #0]
 800dcf8:	f7ff faa3 	bl	800d242 <SPI_ETH_REG>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	b2da      	uxtb	r2, r3
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	70da      	strb	r2, [r3, #3]
	Y->GAR[3]=SPI_ETH_REG(X, 4 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd0a:	3318      	adds	r3, #24
 800dd0c:	2201      	movs	r2, #1
 800dd0e:	9201      	str	r2, [sp, #4]
 800dd10:	9300      	str	r3, [sp, #0]
 800dd12:	2300      	movs	r3, #0
 800dd14:	2200      	movs	r2, #0
 800dd16:	2104      	movs	r1, #4
 800dd18:	6838      	ldr	r0, [r7, #0]
 800dd1a:	f7ff fa92 	bl	800d242 <SPI_ETH_REG>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	b2da      	uxtb	r2, r3
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	711a      	strb	r2, [r3, #4]

	Y->SUBR[0]=SPI_ETH_REG(X, 5 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd2c:	3318      	adds	r3, #24
 800dd2e:	2201      	movs	r2, #1
 800dd30:	9201      	str	r2, [sp, #4]
 800dd32:	9300      	str	r3, [sp, #0]
 800dd34:	2300      	movs	r3, #0
 800dd36:	2200      	movs	r2, #0
 800dd38:	2105      	movs	r1, #5
 800dd3a:	6838      	ldr	r0, [r7, #0]
 800dd3c:	f7ff fa81 	bl	800d242 <SPI_ETH_REG>
 800dd40:	4603      	mov	r3, r0
 800dd42:	b2da      	uxtb	r2, r3
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	715a      	strb	r2, [r3, #5]
	Y->SUBR[1]=SPI_ETH_REG(X, 6 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd4e:	3318      	adds	r3, #24
 800dd50:	2201      	movs	r2, #1
 800dd52:	9201      	str	r2, [sp, #4]
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	2300      	movs	r3, #0
 800dd58:	2200      	movs	r2, #0
 800dd5a:	2106      	movs	r1, #6
 800dd5c:	6838      	ldr	r0, [r7, #0]
 800dd5e:	f7ff fa70 	bl	800d242 <SPI_ETH_REG>
 800dd62:	4603      	mov	r3, r0
 800dd64:	b2da      	uxtb	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	719a      	strb	r2, [r3, #6]
	Y->SUBR[2]=SPI_ETH_REG(X, 7 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd70:	3318      	adds	r3, #24
 800dd72:	2201      	movs	r2, #1
 800dd74:	9201      	str	r2, [sp, #4]
 800dd76:	9300      	str	r3, [sp, #0]
 800dd78:	2300      	movs	r3, #0
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	2107      	movs	r1, #7
 800dd7e:	6838      	ldr	r0, [r7, #0]
 800dd80:	f7ff fa5f 	bl	800d242 <SPI_ETH_REG>
 800dd84:	4603      	mov	r3, r0
 800dd86:	b2da      	uxtb	r2, r3
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	71da      	strb	r2, [r3, #7]
	Y->SUBR[3]=SPI_ETH_REG(X, 8 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd92:	3318      	adds	r3, #24
 800dd94:	2201      	movs	r2, #1
 800dd96:	9201      	str	r2, [sp, #4]
 800dd98:	9300      	str	r3, [sp, #0]
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	2108      	movs	r1, #8
 800dda0:	6838      	ldr	r0, [r7, #0]
 800dda2:	f7ff fa4e 	bl	800d242 <SPI_ETH_REG>
 800dda6:	4603      	mov	r3, r0
 800dda8:	b2da      	uxtb	r2, r3
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	721a      	strb	r2, [r3, #8]

	Y->SHAR[0]=SPI_ETH_REG(X, 9 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddb4:	3318      	adds	r3, #24
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	9201      	str	r2, [sp, #4]
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	2109      	movs	r1, #9
 800ddc2:	6838      	ldr	r0, [r7, #0]
 800ddc4:	f7ff fa3d 	bl	800d242 <SPI_ETH_REG>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	b2da      	uxtb	r2, r3
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	725a      	strb	r2, [r3, #9]
	Y->SHAR[1]=SPI_ETH_REG(X, 10 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddd6:	3318      	adds	r3, #24
 800ddd8:	2201      	movs	r2, #1
 800ddda:	9201      	str	r2, [sp, #4]
 800dddc:	9300      	str	r3, [sp, #0]
 800ddde:	2300      	movs	r3, #0
 800dde0:	2200      	movs	r2, #0
 800dde2:	210a      	movs	r1, #10
 800dde4:	6838      	ldr	r0, [r7, #0]
 800dde6:	f7ff fa2c 	bl	800d242 <SPI_ETH_REG>
 800ddea:	4603      	mov	r3, r0
 800ddec:	b2da      	uxtb	r2, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	729a      	strb	r2, [r3, #10]
	Y->SHAR[2]=SPI_ETH_REG(X, 11 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddf8:	3318      	adds	r3, #24
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	9201      	str	r2, [sp, #4]
 800ddfe:	9300      	str	r3, [sp, #0]
 800de00:	2300      	movs	r3, #0
 800de02:	2200      	movs	r2, #0
 800de04:	210b      	movs	r1, #11
 800de06:	6838      	ldr	r0, [r7, #0]
 800de08:	f7ff fa1b 	bl	800d242 <SPI_ETH_REG>
 800de0c:	4603      	mov	r3, r0
 800de0e:	b2da      	uxtb	r2, r3
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	72da      	strb	r2, [r3, #11]
	Y->SHAR[3]=SPI_ETH_REG(X, 12 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de1a:	3318      	adds	r3, #24
 800de1c:	2201      	movs	r2, #1
 800de1e:	9201      	str	r2, [sp, #4]
 800de20:	9300      	str	r3, [sp, #0]
 800de22:	2300      	movs	r3, #0
 800de24:	2200      	movs	r2, #0
 800de26:	210c      	movs	r1, #12
 800de28:	6838      	ldr	r0, [r7, #0]
 800de2a:	f7ff fa0a 	bl	800d242 <SPI_ETH_REG>
 800de2e:	4603      	mov	r3, r0
 800de30:	b2da      	uxtb	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	731a      	strb	r2, [r3, #12]
	Y->SHAR[4]=SPI_ETH_REG(X, 13 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de3c:	3318      	adds	r3, #24
 800de3e:	2201      	movs	r2, #1
 800de40:	9201      	str	r2, [sp, #4]
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	2300      	movs	r3, #0
 800de46:	2200      	movs	r2, #0
 800de48:	210d      	movs	r1, #13
 800de4a:	6838      	ldr	r0, [r7, #0]
 800de4c:	f7ff f9f9 	bl	800d242 <SPI_ETH_REG>
 800de50:	4603      	mov	r3, r0
 800de52:	b2da      	uxtb	r2, r3
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	735a      	strb	r2, [r3, #13]
	Y->SHAR[5]=SPI_ETH_REG(X, 14 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de5e:	3318      	adds	r3, #24
 800de60:	2201      	movs	r2, #1
 800de62:	9201      	str	r2, [sp, #4]
 800de64:	9300      	str	r3, [sp, #0]
 800de66:	2300      	movs	r3, #0
 800de68:	2200      	movs	r2, #0
 800de6a:	210e      	movs	r1, #14
 800de6c:	6838      	ldr	r0, [r7, #0]
 800de6e:	f7ff f9e8 	bl	800d242 <SPI_ETH_REG>
 800de72:	4603      	mov	r3, r0
 800de74:	b2da      	uxtb	r2, r3
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	739a      	strb	r2, [r3, #14]

	Y->SIPR[0]=SPI_ETH_REG(X, 15 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de80:	3318      	adds	r3, #24
 800de82:	2201      	movs	r2, #1
 800de84:	9201      	str	r2, [sp, #4]
 800de86:	9300      	str	r3, [sp, #0]
 800de88:	2300      	movs	r3, #0
 800de8a:	2200      	movs	r2, #0
 800de8c:	210f      	movs	r1, #15
 800de8e:	6838      	ldr	r0, [r7, #0]
 800de90:	f7ff f9d7 	bl	800d242 <SPI_ETH_REG>
 800de94:	4603      	mov	r3, r0
 800de96:	b2da      	uxtb	r2, r3
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	73da      	strb	r2, [r3, #15]
	Y->SIPR[1]=SPI_ETH_REG(X, 16 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dea2:	3318      	adds	r3, #24
 800dea4:	2201      	movs	r2, #1
 800dea6:	9201      	str	r2, [sp, #4]
 800dea8:	9300      	str	r3, [sp, #0]
 800deaa:	2300      	movs	r3, #0
 800deac:	2200      	movs	r2, #0
 800deae:	2110      	movs	r1, #16
 800deb0:	6838      	ldr	r0, [r7, #0]
 800deb2:	f7ff f9c6 	bl	800d242 <SPI_ETH_REG>
 800deb6:	4603      	mov	r3, r0
 800deb8:	b2da      	uxtb	r2, r3
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	741a      	strb	r2, [r3, #16]
	Y->SIPR[2]=SPI_ETH_REG(X, 17 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dec4:	3318      	adds	r3, #24
 800dec6:	2201      	movs	r2, #1
 800dec8:	9201      	str	r2, [sp, #4]
 800deca:	9300      	str	r3, [sp, #0]
 800decc:	2300      	movs	r3, #0
 800dece:	2200      	movs	r2, #0
 800ded0:	2111      	movs	r1, #17
 800ded2:	6838      	ldr	r0, [r7, #0]
 800ded4:	f7ff f9b5 	bl	800d242 <SPI_ETH_REG>
 800ded8:	4603      	mov	r3, r0
 800deda:	b2da      	uxtb	r2, r3
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	745a      	strb	r2, [r3, #17]
	Y->SIPR[3]=SPI_ETH_REG(X, 18 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dee6:	3318      	adds	r3, #24
 800dee8:	2201      	movs	r2, #1
 800deea:	9201      	str	r2, [sp, #4]
 800deec:	9300      	str	r3, [sp, #0]
 800deee:	2300      	movs	r3, #0
 800def0:	2200      	movs	r2, #0
 800def2:	2112      	movs	r1, #18
 800def4:	6838      	ldr	r0, [r7, #0]
 800def6:	f7ff f9a4 	bl	800d242 <SPI_ETH_REG>
 800defa:	4603      	mov	r3, r0
 800defc:	b2da      	uxtb	r2, r3
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	749a      	strb	r2, [r3, #18]

	Y->INTLEVEL[0]=SPI_ETH_REG(X, 19 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df08:	3318      	adds	r3, #24
 800df0a:	2201      	movs	r2, #1
 800df0c:	9201      	str	r2, [sp, #4]
 800df0e:	9300      	str	r3, [sp, #0]
 800df10:	2300      	movs	r3, #0
 800df12:	2200      	movs	r2, #0
 800df14:	2113      	movs	r1, #19
 800df16:	6838      	ldr	r0, [r7, #0]
 800df18:	f7ff f993 	bl	800d242 <SPI_ETH_REG>
 800df1c:	4603      	mov	r3, r0
 800df1e:	b2da      	uxtb	r2, r3
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	74da      	strb	r2, [r3, #19]
	Y->INTLEVEL[1]=SPI_ETH_REG(X, 20 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df2a:	3318      	adds	r3, #24
 800df2c:	2201      	movs	r2, #1
 800df2e:	9201      	str	r2, [sp, #4]
 800df30:	9300      	str	r3, [sp, #0]
 800df32:	2300      	movs	r3, #0
 800df34:	2200      	movs	r2, #0
 800df36:	2114      	movs	r1, #20
 800df38:	6838      	ldr	r0, [r7, #0]
 800df3a:	f7ff f982 	bl	800d242 <SPI_ETH_REG>
 800df3e:	4603      	mov	r3, r0
 800df40:	b2da      	uxtb	r2, r3
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	751a      	strb	r2, [r3, #20]

	Y->IR=SPI_ETH_REG(X, 21 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df4c:	3318      	adds	r3, #24
 800df4e:	2201      	movs	r2, #1
 800df50:	9201      	str	r2, [sp, #4]
 800df52:	9300      	str	r3, [sp, #0]
 800df54:	2300      	movs	r3, #0
 800df56:	2200      	movs	r2, #0
 800df58:	2115      	movs	r1, #21
 800df5a:	6838      	ldr	r0, [r7, #0]
 800df5c:	f7ff f971 	bl	800d242 <SPI_ETH_REG>
 800df60:	4603      	mov	r3, r0
 800df62:	b2da      	uxtb	r2, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	755a      	strb	r2, [r3, #21]

	Y->IMR=SPI_ETH_REG(X, 22 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df6e:	3318      	adds	r3, #24
 800df70:	2201      	movs	r2, #1
 800df72:	9201      	str	r2, [sp, #4]
 800df74:	9300      	str	r3, [sp, #0]
 800df76:	2300      	movs	r3, #0
 800df78:	2200      	movs	r2, #0
 800df7a:	2116      	movs	r1, #22
 800df7c:	6838      	ldr	r0, [r7, #0]
 800df7e:	f7ff f960 	bl	800d242 <SPI_ETH_REG>
 800df82:	4603      	mov	r3, r0
 800df84:	b2da      	uxtb	r2, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	759a      	strb	r2, [r3, #22]

	Y->SIR=SPI_ETH_REG(X, 23 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df90:	3318      	adds	r3, #24
 800df92:	2201      	movs	r2, #1
 800df94:	9201      	str	r2, [sp, #4]
 800df96:	9300      	str	r3, [sp, #0]
 800df98:	2300      	movs	r3, #0
 800df9a:	2200      	movs	r2, #0
 800df9c:	2117      	movs	r1, #23
 800df9e:	6838      	ldr	r0, [r7, #0]
 800dfa0:	f7ff f94f 	bl	800d242 <SPI_ETH_REG>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	b2da      	uxtb	r2, r3
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	75da      	strb	r2, [r3, #23]

	Y->SIMR=SPI_ETH_REG(X, 24 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dfb2:	3318      	adds	r3, #24
 800dfb4:	2201      	movs	r2, #1
 800dfb6:	9201      	str	r2, [sp, #4]
 800dfb8:	9300      	str	r3, [sp, #0]
 800dfba:	2300      	movs	r3, #0
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	2118      	movs	r1, #24
 800dfc0:	6838      	ldr	r0, [r7, #0]
 800dfc2:	f7ff f93e 	bl	800d242 <SPI_ETH_REG>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	b2da      	uxtb	r2, r3
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	761a      	strb	r2, [r3, #24]

	Y->RTR[0]=SPI_ETH_REG(X, 25 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dfd4:	3318      	adds	r3, #24
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	9201      	str	r2, [sp, #4]
 800dfda:	9300      	str	r3, [sp, #0]
 800dfdc:	2300      	movs	r3, #0
 800dfde:	2200      	movs	r2, #0
 800dfe0:	2119      	movs	r1, #25
 800dfe2:	6838      	ldr	r0, [r7, #0]
 800dfe4:	f7ff f92d 	bl	800d242 <SPI_ETH_REG>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	b2da      	uxtb	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	765a      	strb	r2, [r3, #25]
	Y->RTR[1]=SPI_ETH_REG(X, 26 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dff6:	3318      	adds	r3, #24
 800dff8:	2201      	movs	r2, #1
 800dffa:	9201      	str	r2, [sp, #4]
 800dffc:	9300      	str	r3, [sp, #0]
 800dffe:	2300      	movs	r3, #0
 800e000:	2200      	movs	r2, #0
 800e002:	211a      	movs	r1, #26
 800e004:	6838      	ldr	r0, [r7, #0]
 800e006:	f7ff f91c 	bl	800d242 <SPI_ETH_REG>
 800e00a:	4603      	mov	r3, r0
 800e00c:	b2da      	uxtb	r2, r3
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	769a      	strb	r2, [r3, #26]

	Y->RCR=SPI_ETH_REG(X, 27 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e018:	3318      	adds	r3, #24
 800e01a:	2201      	movs	r2, #1
 800e01c:	9201      	str	r2, [sp, #4]
 800e01e:	9300      	str	r3, [sp, #0]
 800e020:	2300      	movs	r3, #0
 800e022:	2200      	movs	r2, #0
 800e024:	211b      	movs	r1, #27
 800e026:	6838      	ldr	r0, [r7, #0]
 800e028:	f7ff f90b 	bl	800d242 <SPI_ETH_REG>
 800e02c:	4603      	mov	r3, r0
 800e02e:	b2da      	uxtb	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	76da      	strb	r2, [r3, #27]

	Y->PTIMER=SPI_ETH_REG(X, 28 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e03a:	3318      	adds	r3, #24
 800e03c:	2201      	movs	r2, #1
 800e03e:	9201      	str	r2, [sp, #4]
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	2300      	movs	r3, #0
 800e044:	2200      	movs	r2, #0
 800e046:	211c      	movs	r1, #28
 800e048:	6838      	ldr	r0, [r7, #0]
 800e04a:	f7ff f8fa 	bl	800d242 <SPI_ETH_REG>
 800e04e:	4603      	mov	r3, r0
 800e050:	b2da      	uxtb	r2, r3
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	771a      	strb	r2, [r3, #28]

	Y->PMAGIC=SPI_ETH_REG(X, 29 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e05c:	3318      	adds	r3, #24
 800e05e:	2201      	movs	r2, #1
 800e060:	9201      	str	r2, [sp, #4]
 800e062:	9300      	str	r3, [sp, #0]
 800e064:	2300      	movs	r3, #0
 800e066:	2200      	movs	r2, #0
 800e068:	211d      	movs	r1, #29
 800e06a:	6838      	ldr	r0, [r7, #0]
 800e06c:	f7ff f8e9 	bl	800d242 <SPI_ETH_REG>
 800e070:	4603      	mov	r3, r0
 800e072:	b2da      	uxtb	r2, r3
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	775a      	strb	r2, [r3, #29]

	Y->PHAR[0]=SPI_ETH_REG(X, 30 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e07e:	3318      	adds	r3, #24
 800e080:	2201      	movs	r2, #1
 800e082:	9201      	str	r2, [sp, #4]
 800e084:	9300      	str	r3, [sp, #0]
 800e086:	2300      	movs	r3, #0
 800e088:	2200      	movs	r2, #0
 800e08a:	211e      	movs	r1, #30
 800e08c:	6838      	ldr	r0, [r7, #0]
 800e08e:	f7ff f8d8 	bl	800d242 <SPI_ETH_REG>
 800e092:	4603      	mov	r3, r0
 800e094:	b2da      	uxtb	r2, r3
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	779a      	strb	r2, [r3, #30]
	Y->PHAR[1]=SPI_ETH_REG(X, 31 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0a0:	3318      	adds	r3, #24
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	9201      	str	r2, [sp, #4]
 800e0a6:	9300      	str	r3, [sp, #0]
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	211f      	movs	r1, #31
 800e0ae:	6838      	ldr	r0, [r7, #0]
 800e0b0:	f7ff f8c7 	bl	800d242 <SPI_ETH_REG>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	b2da      	uxtb	r2, r3
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	77da      	strb	r2, [r3, #31]
	Y->PHAR[2]=SPI_ETH_REG(X, 32 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0c2:	3318      	adds	r3, #24
 800e0c4:	2201      	movs	r2, #1
 800e0c6:	9201      	str	r2, [sp, #4]
 800e0c8:	9300      	str	r3, [sp, #0]
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	2120      	movs	r1, #32
 800e0d0:	6838      	ldr	r0, [r7, #0]
 800e0d2:	f7ff f8b6 	bl	800d242 <SPI_ETH_REG>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	b2da      	uxtb	r2, r3
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f883 2020 	strb.w	r2, [r3, #32]
	Y->PHAR[3]=SPI_ETH_REG(X, 33 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0e6:	3318      	adds	r3, #24
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	9201      	str	r2, [sp, #4]
 800e0ec:	9300      	str	r3, [sp, #0]
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	2121      	movs	r1, #33	; 0x21
 800e0f4:	6838      	ldr	r0, [r7, #0]
 800e0f6:	f7ff f8a4 	bl	800d242 <SPI_ETH_REG>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	b2da      	uxtb	r2, r3
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Y->PHAR[4]=SPI_ETH_REG(X, 34 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e10a:	3318      	adds	r3, #24
 800e10c:	2201      	movs	r2, #1
 800e10e:	9201      	str	r2, [sp, #4]
 800e110:	9300      	str	r3, [sp, #0]
 800e112:	2300      	movs	r3, #0
 800e114:	2200      	movs	r2, #0
 800e116:	2122      	movs	r1, #34	; 0x22
 800e118:	6838      	ldr	r0, [r7, #0]
 800e11a:	f7ff f892 	bl	800d242 <SPI_ETH_REG>
 800e11e:	4603      	mov	r3, r0
 800e120:	b2da      	uxtb	r2, r3
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Y->PHAR[5]=SPI_ETH_REG(X, 35 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e12e:	3318      	adds	r3, #24
 800e130:	2201      	movs	r2, #1
 800e132:	9201      	str	r2, [sp, #4]
 800e134:	9300      	str	r3, [sp, #0]
 800e136:	2300      	movs	r3, #0
 800e138:	2200      	movs	r2, #0
 800e13a:	2123      	movs	r1, #35	; 0x23
 800e13c:	6838      	ldr	r0, [r7, #0]
 800e13e:	f7ff f880 	bl	800d242 <SPI_ETH_REG>
 800e142:	4603      	mov	r3, r0
 800e144:	b2da      	uxtb	r2, r3
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	Y->PSID[0]=SPI_ETH_REG(X, 36 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e152:	3318      	adds	r3, #24
 800e154:	2201      	movs	r2, #1
 800e156:	9201      	str	r2, [sp, #4]
 800e158:	9300      	str	r3, [sp, #0]
 800e15a:	2300      	movs	r3, #0
 800e15c:	2200      	movs	r2, #0
 800e15e:	2124      	movs	r1, #36	; 0x24
 800e160:	6838      	ldr	r0, [r7, #0]
 800e162:	f7ff f86e 	bl	800d242 <SPI_ETH_REG>
 800e166:	4603      	mov	r3, r0
 800e168:	b2da      	uxtb	r2, r3
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Y->PSID[1]=SPI_ETH_REG(X, 37 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e176:	3318      	adds	r3, #24
 800e178:	2201      	movs	r2, #1
 800e17a:	9201      	str	r2, [sp, #4]
 800e17c:	9300      	str	r3, [sp, #0]
 800e17e:	2300      	movs	r3, #0
 800e180:	2200      	movs	r2, #0
 800e182:	2125      	movs	r1, #37	; 0x25
 800e184:	6838      	ldr	r0, [r7, #0]
 800e186:	f7ff f85c 	bl	800d242 <SPI_ETH_REG>
 800e18a:	4603      	mov	r3, r0
 800e18c:	b2da      	uxtb	r2, r3
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	Y->PMRU[0]=SPI_ETH_REG(X, 38 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e19a:	3318      	adds	r3, #24
 800e19c:	2201      	movs	r2, #1
 800e19e:	9201      	str	r2, [sp, #4]
 800e1a0:	9300      	str	r3, [sp, #0]
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	2126      	movs	r1, #38	; 0x26
 800e1a8:	6838      	ldr	r0, [r7, #0]
 800e1aa:	f7ff f84a 	bl	800d242 <SPI_ETH_REG>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	b2da      	uxtb	r2, r3
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Y->PMRU[1]=SPI_ETH_REG(X, 39 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e1be:	3318      	adds	r3, #24
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	9201      	str	r2, [sp, #4]
 800e1c4:	9300      	str	r3, [sp, #0]
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	2127      	movs	r1, #39	; 0x27
 800e1cc:	6838      	ldr	r0, [r7, #0]
 800e1ce:	f7ff f838 	bl	800d242 <SPI_ETH_REG>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	b2da      	uxtb	r2, r3
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	Y->UIPR[0]=SPI_ETH_REG(X, 40 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e1e2:	3318      	adds	r3, #24
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	9201      	str	r2, [sp, #4]
 800e1e8:	9300      	str	r3, [sp, #0]
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	2128      	movs	r1, #40	; 0x28
 800e1f0:	6838      	ldr	r0, [r7, #0]
 800e1f2:	f7ff f826 	bl	800d242 <SPI_ETH_REG>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	b2da      	uxtb	r2, r3
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Y->UIPR[1]=SPI_ETH_REG(X, 41 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e206:	3318      	adds	r3, #24
 800e208:	2201      	movs	r2, #1
 800e20a:	9201      	str	r2, [sp, #4]
 800e20c:	9300      	str	r3, [sp, #0]
 800e20e:	2300      	movs	r3, #0
 800e210:	2200      	movs	r2, #0
 800e212:	2129      	movs	r1, #41	; 0x29
 800e214:	6838      	ldr	r0, [r7, #0]
 800e216:	f7ff f814 	bl	800d242 <SPI_ETH_REG>
 800e21a:	4603      	mov	r3, r0
 800e21c:	b2da      	uxtb	r2, r3
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	Y->UIPR[2]=SPI_ETH_REG(X, 42 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e22a:	3318      	adds	r3, #24
 800e22c:	2201      	movs	r2, #1
 800e22e:	9201      	str	r2, [sp, #4]
 800e230:	9300      	str	r3, [sp, #0]
 800e232:	2300      	movs	r3, #0
 800e234:	2200      	movs	r2, #0
 800e236:	212a      	movs	r1, #42	; 0x2a
 800e238:	6838      	ldr	r0, [r7, #0]
 800e23a:	f7ff f802 	bl	800d242 <SPI_ETH_REG>
 800e23e:	4603      	mov	r3, r0
 800e240:	b2da      	uxtb	r2, r3
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Y->UIPR[3]=SPI_ETH_REG(X, 43 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e24e:	3318      	adds	r3, #24
 800e250:	2201      	movs	r2, #1
 800e252:	9201      	str	r2, [sp, #4]
 800e254:	9300      	str	r3, [sp, #0]
 800e256:	2300      	movs	r3, #0
 800e258:	2200      	movs	r2, #0
 800e25a:	212b      	movs	r1, #43	; 0x2b
 800e25c:	6838      	ldr	r0, [r7, #0]
 800e25e:	f7fe fff0 	bl	800d242 <SPI_ETH_REG>
 800e262:	4603      	mov	r3, r0
 800e264:	b2da      	uxtb	r2, r3
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	Y->UPORT[0]=SPI_ETH_REG(X, 44 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e272:	3318      	adds	r3, #24
 800e274:	2201      	movs	r2, #1
 800e276:	9201      	str	r2, [sp, #4]
 800e278:	9300      	str	r3, [sp, #0]
 800e27a:	2300      	movs	r3, #0
 800e27c:	2200      	movs	r2, #0
 800e27e:	212c      	movs	r1, #44	; 0x2c
 800e280:	6838      	ldr	r0, [r7, #0]
 800e282:	f7fe ffde 	bl	800d242 <SPI_ETH_REG>
 800e286:	4603      	mov	r3, r0
 800e288:	b2da      	uxtb	r2, r3
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	Y->UPORT[1]=SPI_ETH_REG(X, 45 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e296:	3318      	adds	r3, #24
 800e298:	2201      	movs	r2, #1
 800e29a:	9201      	str	r2, [sp, #4]
 800e29c:	9300      	str	r3, [sp, #0]
 800e29e:	2300      	movs	r3, #0
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	212d      	movs	r1, #45	; 0x2d
 800e2a4:	6838      	ldr	r0, [r7, #0]
 800e2a6:	f7fe ffcc 	bl	800d242 <SPI_ETH_REG>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	b2da      	uxtb	r2, r3
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	Y->PHYCFGR=SPI_ETH_REG(X, 46 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e2ba:	3318      	adds	r3, #24
 800e2bc:	2201      	movs	r2, #1
 800e2be:	9201      	str	r2, [sp, #4]
 800e2c0:	9300      	str	r3, [sp, #0]
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	212e      	movs	r1, #46	; 0x2e
 800e2c8:	6838      	ldr	r0, [r7, #0]
 800e2ca:	f7fe ffba 	bl	800d242 <SPI_ETH_REG>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	b2da      	uxtb	r2, r3
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	Y->VERSIONR=SPI_ETH_REG(X, 57 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e2de:	3318      	adds	r3, #24
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	9201      	str	r2, [sp, #4]
 800e2e4:	9300      	str	r3, [sp, #0]
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	2139      	movs	r1, #57	; 0x39
 800e2ec:	6838      	ldr	r0, [r7, #0]
 800e2ee:	f7fe ffa8 	bl	800d242 <SPI_ETH_REG>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	b2da      	uxtb	r2, r3
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	//---------------------------port -------------------------//
	Y->Sn_MR=SPI_ETH_REG(X, 0x00 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e302:	3318      	adds	r3, #24
 800e304:	2201      	movs	r2, #1
 800e306:	9201      	str	r2, [sp, #4]
 800e308:	9300      	str	r3, [sp, #0]
 800e30a:	2300      	movs	r3, #0
 800e30c:	2201      	movs	r2, #1
 800e30e:	2100      	movs	r1, #0
 800e310:	6838      	ldr	r0, [r7, #0]
 800e312:	f7fe ff96 	bl	800d242 <SPI_ETH_REG>
 800e316:	4603      	mov	r3, r0
 800e318:	b2da      	uxtb	r2, r3
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	Y->Sn_CR=SPI_ETH_REG(X, 0x01 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e326:	3318      	adds	r3, #24
 800e328:	2201      	movs	r2, #1
 800e32a:	9201      	str	r2, [sp, #4]
 800e32c:	9300      	str	r3, [sp, #0]
 800e32e:	2300      	movs	r3, #0
 800e330:	2201      	movs	r2, #1
 800e332:	2101      	movs	r1, #1
 800e334:	6838      	ldr	r0, [r7, #0]
 800e336:	f7fe ff84 	bl	800d242 <SPI_ETH_REG>
 800e33a:	4603      	mov	r3, r0
 800e33c:	b2da      	uxtb	r2, r3
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	Y->Sn_IR=SPI_ETH_REG(X, 0x02 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e34a:	3318      	adds	r3, #24
 800e34c:	2201      	movs	r2, #1
 800e34e:	9201      	str	r2, [sp, #4]
 800e350:	9300      	str	r3, [sp, #0]
 800e352:	2300      	movs	r3, #0
 800e354:	2201      	movs	r2, #1
 800e356:	2102      	movs	r1, #2
 800e358:	6838      	ldr	r0, [r7, #0]
 800e35a:	f7fe ff72 	bl	800d242 <SPI_ETH_REG>
 800e35e:	4603      	mov	r3, r0
 800e360:	b2da      	uxtb	r2, r3
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	Y->Sn_SR=SPI_ETH_REG(X, 0x03 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e36e:	3318      	adds	r3, #24
 800e370:	2201      	movs	r2, #1
 800e372:	9201      	str	r2, [sp, #4]
 800e374:	9300      	str	r3, [sp, #0]
 800e376:	2300      	movs	r3, #0
 800e378:	2201      	movs	r2, #1
 800e37a:	2103      	movs	r1, #3
 800e37c:	6838      	ldr	r0, [r7, #0]
 800e37e:	f7fe ff60 	bl	800d242 <SPI_ETH_REG>
 800e382:	4603      	mov	r3, r0
 800e384:	b2da      	uxtb	r2, r3
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	Y->Sn_PORT[0]=SPI_ETH_REG(X, 0x04 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e392:	3318      	adds	r3, #24
 800e394:	2201      	movs	r2, #1
 800e396:	9201      	str	r2, [sp, #4]
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	2300      	movs	r3, #0
 800e39c:	2201      	movs	r2, #1
 800e39e:	2104      	movs	r1, #4
 800e3a0:	6838      	ldr	r0, [r7, #0]
 800e3a2:	f7fe ff4e 	bl	800d242 <SPI_ETH_REG>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	b2da      	uxtb	r2, r3
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Y->Sn_PORT[1]=SPI_ETH_REG(X, 0x05 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e3b6:	3318      	adds	r3, #24
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	9201      	str	r2, [sp, #4]
 800e3bc:	9300      	str	r3, [sp, #0]
 800e3be:	2300      	movs	r3, #0
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	2105      	movs	r1, #5
 800e3c4:	6838      	ldr	r0, [r7, #0]
 800e3c6:	f7fe ff3c 	bl	800d242 <SPI_ETH_REG>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	b2da      	uxtb	r2, r3
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	Y->Sn_DHAR[0]=SPI_ETH_REG(X, 0x06 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e3da:	3318      	adds	r3, #24
 800e3dc:	2201      	movs	r2, #1
 800e3de:	9201      	str	r2, [sp, #4]
 800e3e0:	9300      	str	r3, [sp, #0]
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	2106      	movs	r1, #6
 800e3e8:	6838      	ldr	r0, [r7, #0]
 800e3ea:	f7fe ff2a 	bl	800d242 <SPI_ETH_REG>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	b2da      	uxtb	r2, r3
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Y->Sn_DHAR[1]=SPI_ETH_REG(X, 0x07 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e3fe:	3318      	adds	r3, #24
 800e400:	2201      	movs	r2, #1
 800e402:	9201      	str	r2, [sp, #4]
 800e404:	9300      	str	r3, [sp, #0]
 800e406:	2300      	movs	r3, #0
 800e408:	2201      	movs	r2, #1
 800e40a:	2107      	movs	r1, #7
 800e40c:	6838      	ldr	r0, [r7, #0]
 800e40e:	f7fe ff18 	bl	800d242 <SPI_ETH_REG>
 800e412:	4603      	mov	r3, r0
 800e414:	b2da      	uxtb	r2, r3
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	Y->Sn_DHAR[2]=SPI_ETH_REG(X, 0x08 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e422:	3318      	adds	r3, #24
 800e424:	2201      	movs	r2, #1
 800e426:	9201      	str	r2, [sp, #4]
 800e428:	9300      	str	r3, [sp, #0]
 800e42a:	2300      	movs	r3, #0
 800e42c:	2201      	movs	r2, #1
 800e42e:	2108      	movs	r1, #8
 800e430:	6838      	ldr	r0, [r7, #0]
 800e432:	f7fe ff06 	bl	800d242 <SPI_ETH_REG>
 800e436:	4603      	mov	r3, r0
 800e438:	b2da      	uxtb	r2, r3
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	Y->Sn_DHAR[3]=SPI_ETH_REG(X, 0x09 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e446:	3318      	adds	r3, #24
 800e448:	2201      	movs	r2, #1
 800e44a:	9201      	str	r2, [sp, #4]
 800e44c:	9300      	str	r3, [sp, #0]
 800e44e:	2300      	movs	r3, #0
 800e450:	2201      	movs	r2, #1
 800e452:	2109      	movs	r1, #9
 800e454:	6838      	ldr	r0, [r7, #0]
 800e456:	f7fe fef4 	bl	800d242 <SPI_ETH_REG>
 800e45a:	4603      	mov	r3, r0
 800e45c:	b2da      	uxtb	r2, r3
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	Y->Sn_DHAR[4]=SPI_ETH_REG(X, 0x0A ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e46a:	3318      	adds	r3, #24
 800e46c:	2201      	movs	r2, #1
 800e46e:	9201      	str	r2, [sp, #4]
 800e470:	9300      	str	r3, [sp, #0]
 800e472:	2300      	movs	r3, #0
 800e474:	2201      	movs	r2, #1
 800e476:	210a      	movs	r1, #10
 800e478:	6838      	ldr	r0, [r7, #0]
 800e47a:	f7fe fee2 	bl	800d242 <SPI_ETH_REG>
 800e47e:	4603      	mov	r3, r0
 800e480:	b2da      	uxtb	r2, r3
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Y->Sn_DHAR[5]=SPI_ETH_REG(X, 0x0B ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e48e:	3318      	adds	r3, #24
 800e490:	2201      	movs	r2, #1
 800e492:	9201      	str	r2, [sp, #4]
 800e494:	9300      	str	r3, [sp, #0]
 800e496:	2300      	movs	r3, #0
 800e498:	2201      	movs	r2, #1
 800e49a:	210b      	movs	r1, #11
 800e49c:	6838      	ldr	r0, [r7, #0]
 800e49e:	f7fe fed0 	bl	800d242 <SPI_ETH_REG>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	b2da      	uxtb	r2, r3
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	Y->Sn_DIPR[0]=SPI_ETH_REG(X, 0x0C ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e4b2:	3318      	adds	r3, #24
 800e4b4:	2201      	movs	r2, #1
 800e4b6:	9201      	str	r2, [sp, #4]
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	2201      	movs	r2, #1
 800e4be:	210c      	movs	r1, #12
 800e4c0:	6838      	ldr	r0, [r7, #0]
 800e4c2:	f7fe febe 	bl	800d242 <SPI_ETH_REG>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	b2da      	uxtb	r2, r3
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Y->Sn_DIPR[1]=SPI_ETH_REG(X, 0x0D ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e4d6:	3318      	adds	r3, #24
 800e4d8:	2201      	movs	r2, #1
 800e4da:	9201      	str	r2, [sp, #4]
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	2300      	movs	r3, #0
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	210d      	movs	r1, #13
 800e4e4:	6838      	ldr	r0, [r7, #0]
 800e4e6:	f7fe feac 	bl	800d242 <SPI_ETH_REG>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	b2da      	uxtb	r2, r3
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Y->Sn_DIPR[2]=SPI_ETH_REG(X, 0x0E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e4fa:	3318      	adds	r3, #24
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	9201      	str	r2, [sp, #4]
 800e500:	9300      	str	r3, [sp, #0]
 800e502:	2300      	movs	r3, #0
 800e504:	2201      	movs	r2, #1
 800e506:	210e      	movs	r1, #14
 800e508:	6838      	ldr	r0, [r7, #0]
 800e50a:	f7fe fe9a 	bl	800d242 <SPI_ETH_REG>
 800e50e:	4603      	mov	r3, r0
 800e510:	b2da      	uxtb	r2, r3
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Y->Sn_DIPR[3]=SPI_ETH_REG(X, 0x0F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e51e:	3318      	adds	r3, #24
 800e520:	2201      	movs	r2, #1
 800e522:	9201      	str	r2, [sp, #4]
 800e524:	9300      	str	r3, [sp, #0]
 800e526:	2300      	movs	r3, #0
 800e528:	2201      	movs	r2, #1
 800e52a:	210f      	movs	r1, #15
 800e52c:	6838      	ldr	r0, [r7, #0]
 800e52e:	f7fe fe88 	bl	800d242 <SPI_ETH_REG>
 800e532:	4603      	mov	r3, r0
 800e534:	b2da      	uxtb	r2, r3
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	Y->Sn_DPORT[0]=SPI_ETH_REG(X, 0x10 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e542:	3318      	adds	r3, #24
 800e544:	2201      	movs	r2, #1
 800e546:	9201      	str	r2, [sp, #4]
 800e548:	9300      	str	r3, [sp, #0]
 800e54a:	2300      	movs	r3, #0
 800e54c:	2201      	movs	r2, #1
 800e54e:	2110      	movs	r1, #16
 800e550:	6838      	ldr	r0, [r7, #0]
 800e552:	f7fe fe76 	bl	800d242 <SPI_ETH_REG>
 800e556:	4603      	mov	r3, r0
 800e558:	b2da      	uxtb	r2, r3
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	Y->Sn_DPORT[1]=SPI_ETH_REG(X, 0x11 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e566:	3318      	adds	r3, #24
 800e568:	2201      	movs	r2, #1
 800e56a:	9201      	str	r2, [sp, #4]
 800e56c:	9300      	str	r3, [sp, #0]
 800e56e:	2300      	movs	r3, #0
 800e570:	2201      	movs	r2, #1
 800e572:	2111      	movs	r1, #17
 800e574:	6838      	ldr	r0, [r7, #0]
 800e576:	f7fe fe64 	bl	800d242 <SPI_ETH_REG>
 800e57a:	4603      	mov	r3, r0
 800e57c:	b2da      	uxtb	r2, r3
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	Y->Sn_MSSR[0]=SPI_ETH_REG(X, 0x12 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e58a:	3318      	adds	r3, #24
 800e58c:	2201      	movs	r2, #1
 800e58e:	9201      	str	r2, [sp, #4]
 800e590:	9300      	str	r3, [sp, #0]
 800e592:	2300      	movs	r3, #0
 800e594:	2201      	movs	r2, #1
 800e596:	2112      	movs	r1, #18
 800e598:	6838      	ldr	r0, [r7, #0]
 800e59a:	f7fe fe52 	bl	800d242 <SPI_ETH_REG>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	b2da      	uxtb	r2, r3
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Y->Sn_MSSR[1]=SPI_ETH_REG(X, 0x13 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e5ae:	3318      	adds	r3, #24
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	9201      	str	r2, [sp, #4]
 800e5b4:	9300      	str	r3, [sp, #0]
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	2113      	movs	r1, #19
 800e5bc:	6838      	ldr	r0, [r7, #0]
 800e5be:	f7fe fe40 	bl	800d242 <SPI_ETH_REG>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	b2da      	uxtb	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	Y->Sn_TOS=SPI_ETH_REG(X, 0x15 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e5d2:	3318      	adds	r3, #24
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	9201      	str	r2, [sp, #4]
 800e5d8:	9300      	str	r3, [sp, #0]
 800e5da:	2300      	movs	r3, #0
 800e5dc:	2201      	movs	r2, #1
 800e5de:	2115      	movs	r1, #21
 800e5e0:	6838      	ldr	r0, [r7, #0]
 800e5e2:	f7fe fe2e 	bl	800d242 <SPI_ETH_REG>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	b2da      	uxtb	r2, r3
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Y->Sn_TTL=SPI_ETH_REG(X, 0x16 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e5f6:	3318      	adds	r3, #24
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	9201      	str	r2, [sp, #4]
 800e5fc:	9300      	str	r3, [sp, #0]
 800e5fe:	2300      	movs	r3, #0
 800e600:	2201      	movs	r2, #1
 800e602:	2116      	movs	r1, #22
 800e604:	6838      	ldr	r0, [r7, #0]
 800e606:	f7fe fe1c 	bl	800d242 <SPI_ETH_REG>
 800e60a:	4603      	mov	r3, r0
 800e60c:	b2da      	uxtb	r2, r3
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	Y->Sn_RXBUF_SIZE=SPI_ETH_REG(X, 0x1E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e61a:	3318      	adds	r3, #24
 800e61c:	2201      	movs	r2, #1
 800e61e:	9201      	str	r2, [sp, #4]
 800e620:	9300      	str	r3, [sp, #0]
 800e622:	2300      	movs	r3, #0
 800e624:	2201      	movs	r2, #1
 800e626:	211e      	movs	r1, #30
 800e628:	6838      	ldr	r0, [r7, #0]
 800e62a:	f7fe fe0a 	bl	800d242 <SPI_ETH_REG>
 800e62e:	4603      	mov	r3, r0
 800e630:	b2da      	uxtb	r2, r3
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	Y->Sn_TXBUF_SIZE=SPI_ETH_REG(X, 0x1F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e63e:	3318      	adds	r3, #24
 800e640:	2201      	movs	r2, #1
 800e642:	9201      	str	r2, [sp, #4]
 800e644:	9300      	str	r3, [sp, #0]
 800e646:	2300      	movs	r3, #0
 800e648:	2201      	movs	r2, #1
 800e64a:	211f      	movs	r1, #31
 800e64c:	6838      	ldr	r0, [r7, #0]
 800e64e:	f7fe fdf8 	bl	800d242 <SPI_ETH_REG>
 800e652:	4603      	mov	r3, r0
 800e654:	b2da      	uxtb	r2, r3
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	Y->Sn_TX_FSR[0]=SPI_ETH_REG(X, 0x20 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e662:	3318      	adds	r3, #24
 800e664:	2201      	movs	r2, #1
 800e666:	9201      	str	r2, [sp, #4]
 800e668:	9300      	str	r3, [sp, #0]
 800e66a:	2300      	movs	r3, #0
 800e66c:	2201      	movs	r2, #1
 800e66e:	2120      	movs	r1, #32
 800e670:	6838      	ldr	r0, [r7, #0]
 800e672:	f7fe fde6 	bl	800d242 <SPI_ETH_REG>
 800e676:	4603      	mov	r3, r0
 800e678:	b2da      	uxtb	r2, r3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Y->Sn_TX_FSR[1]=SPI_ETH_REG(X, 0x21 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e686:	3318      	adds	r3, #24
 800e688:	2201      	movs	r2, #1
 800e68a:	9201      	str	r2, [sp, #4]
 800e68c:	9300      	str	r3, [sp, #0]
 800e68e:	2300      	movs	r3, #0
 800e690:	2201      	movs	r2, #1
 800e692:	2121      	movs	r1, #33	; 0x21
 800e694:	6838      	ldr	r0, [r7, #0]
 800e696:	f7fe fdd4 	bl	800d242 <SPI_ETH_REG>
 800e69a:	4603      	mov	r3, r0
 800e69c:	b2da      	uxtb	r2, r3
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	Y->Sn_TX_RD[0]=SPI_ETH_REG(X, 0x22 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e6aa:	3318      	adds	r3, #24
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	9201      	str	r2, [sp, #4]
 800e6b0:	9300      	str	r3, [sp, #0]
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	2122      	movs	r1, #34	; 0x22
 800e6b8:	6838      	ldr	r0, [r7, #0]
 800e6ba:	f7fe fdc2 	bl	800d242 <SPI_ETH_REG>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	b2da      	uxtb	r2, r3
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Y->Sn_TX_RD[1]=SPI_ETH_REG(X, 0x23 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e6ce:	3318      	adds	r3, #24
 800e6d0:	2201      	movs	r2, #1
 800e6d2:	9201      	str	r2, [sp, #4]
 800e6d4:	9300      	str	r3, [sp, #0]
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	2201      	movs	r2, #1
 800e6da:	2123      	movs	r1, #35	; 0x23
 800e6dc:	6838      	ldr	r0, [r7, #0]
 800e6de:	f7fe fdb0 	bl	800d242 <SPI_ETH_REG>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	b2da      	uxtb	r2, r3
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	Y->Sn_TX_WR[0]=SPI_ETH_REG(X, 0x24 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e6f2:	3318      	adds	r3, #24
 800e6f4:	2201      	movs	r2, #1
 800e6f6:	9201      	str	r2, [sp, #4]
 800e6f8:	9300      	str	r3, [sp, #0]
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	2201      	movs	r2, #1
 800e6fe:	2124      	movs	r1, #36	; 0x24
 800e700:	6838      	ldr	r0, [r7, #0]
 800e702:	f7fe fd9e 	bl	800d242 <SPI_ETH_REG>
 800e706:	4603      	mov	r3, r0
 800e708:	b2da      	uxtb	r2, r3
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Y->Sn_TX_WR[1]=SPI_ETH_REG(X, 0x25 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e716:	3318      	adds	r3, #24
 800e718:	2201      	movs	r2, #1
 800e71a:	9201      	str	r2, [sp, #4]
 800e71c:	9300      	str	r3, [sp, #0]
 800e71e:	2300      	movs	r3, #0
 800e720:	2201      	movs	r2, #1
 800e722:	2125      	movs	r1, #37	; 0x25
 800e724:	6838      	ldr	r0, [r7, #0]
 800e726:	f7fe fd8c 	bl	800d242 <SPI_ETH_REG>
 800e72a:	4603      	mov	r3, r0
 800e72c:	b2da      	uxtb	r2, r3
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	Y->Sn_RX_RSR[0]=SPI_ETH_REG(X, 0x26 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e73a:	3318      	adds	r3, #24
 800e73c:	2201      	movs	r2, #1
 800e73e:	9201      	str	r2, [sp, #4]
 800e740:	9300      	str	r3, [sp, #0]
 800e742:	2300      	movs	r3, #0
 800e744:	2201      	movs	r2, #1
 800e746:	2126      	movs	r1, #38	; 0x26
 800e748:	6838      	ldr	r0, [r7, #0]
 800e74a:	f7fe fd7a 	bl	800d242 <SPI_ETH_REG>
 800e74e:	4603      	mov	r3, r0
 800e750:	b2da      	uxtb	r2, r3
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Y->Sn_RX_RSR[1]=SPI_ETH_REG(X, 0x27 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e75e:	3318      	adds	r3, #24
 800e760:	2201      	movs	r2, #1
 800e762:	9201      	str	r2, [sp, #4]
 800e764:	9300      	str	r3, [sp, #0]
 800e766:	2300      	movs	r3, #0
 800e768:	2201      	movs	r2, #1
 800e76a:	2127      	movs	r1, #39	; 0x27
 800e76c:	6838      	ldr	r0, [r7, #0]
 800e76e:	f7fe fd68 	bl	800d242 <SPI_ETH_REG>
 800e772:	4603      	mov	r3, r0
 800e774:	b2da      	uxtb	r2, r3
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

	Y->Sn_RX_RD[0]=SPI_ETH_REG(X, 0x28 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e782:	3318      	adds	r3, #24
 800e784:	2201      	movs	r2, #1
 800e786:	9201      	str	r2, [sp, #4]
 800e788:	9300      	str	r3, [sp, #0]
 800e78a:	2300      	movs	r3, #0
 800e78c:	2201      	movs	r2, #1
 800e78e:	2128      	movs	r1, #40	; 0x28
 800e790:	6838      	ldr	r0, [r7, #0]
 800e792:	f7fe fd56 	bl	800d242 <SPI_ETH_REG>
 800e796:	4603      	mov	r3, r0
 800e798:	b2da      	uxtb	r2, r3
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Y->Sn_RX_RD[1]=SPI_ETH_REG(X, 0x29 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e7a6:	3318      	adds	r3, #24
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	9201      	str	r2, [sp, #4]
 800e7ac:	9300      	str	r3, [sp, #0]
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	2129      	movs	r1, #41	; 0x29
 800e7b4:	6838      	ldr	r0, [r7, #0]
 800e7b6:	f7fe fd44 	bl	800d242 <SPI_ETH_REG>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	b2da      	uxtb	r2, r3
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	Y->Sn_RX_WR[0]=SPI_ETH_REG(X, 0x2A ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e7ca:	3318      	adds	r3, #24
 800e7cc:	2201      	movs	r2, #1
 800e7ce:	9201      	str	r2, [sp, #4]
 800e7d0:	9300      	str	r3, [sp, #0]
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	212a      	movs	r1, #42	; 0x2a
 800e7d8:	6838      	ldr	r0, [r7, #0]
 800e7da:	f7fe fd32 	bl	800d242 <SPI_ETH_REG>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	b2da      	uxtb	r2, r3
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Y->Sn_RX_WR[1]=SPI_ETH_REG(X, 0x2B ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e7ee:	3318      	adds	r3, #24
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	9201      	str	r2, [sp, #4]
 800e7f4:	9300      	str	r3, [sp, #0]
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	2201      	movs	r2, #1
 800e7fa:	212b      	movs	r1, #43	; 0x2b
 800e7fc:	6838      	ldr	r0, [r7, #0]
 800e7fe:	f7fe fd20 	bl	800d242 <SPI_ETH_REG>
 800e802:	4603      	mov	r3, r0
 800e804:	b2da      	uxtb	r2, r3
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	Y->Sn_IMR=SPI_ETH_REG(X, 0x2C ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e812:	3318      	adds	r3, #24
 800e814:	2201      	movs	r2, #1
 800e816:	9201      	str	r2, [sp, #4]
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	2300      	movs	r3, #0
 800e81c:	2201      	movs	r2, #1
 800e81e:	212c      	movs	r1, #44	; 0x2c
 800e820:	6838      	ldr	r0, [r7, #0]
 800e822:	f7fe fd0e 	bl	800d242 <SPI_ETH_REG>
 800e826:	4603      	mov	r3, r0
 800e828:	b2da      	uxtb	r2, r3
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	Y->Sn_FRAG[0]=SPI_ETH_REG(X, 0x2D ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e836:	3318      	adds	r3, #24
 800e838:	2201      	movs	r2, #1
 800e83a:	9201      	str	r2, [sp, #4]
 800e83c:	9300      	str	r3, [sp, #0]
 800e83e:	2300      	movs	r3, #0
 800e840:	2201      	movs	r2, #1
 800e842:	212d      	movs	r1, #45	; 0x2d
 800e844:	6838      	ldr	r0, [r7, #0]
 800e846:	f7fe fcfc 	bl	800d242 <SPI_ETH_REG>
 800e84a:	4603      	mov	r3, r0
 800e84c:	b2da      	uxtb	r2, r3
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Y->Sn_FRAG[1]=SPI_ETH_REG(X, 0x2E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e85a:	3318      	adds	r3, #24
 800e85c:	2201      	movs	r2, #1
 800e85e:	9201      	str	r2, [sp, #4]
 800e860:	9300      	str	r3, [sp, #0]
 800e862:	2300      	movs	r3, #0
 800e864:	2201      	movs	r2, #1
 800e866:	212e      	movs	r1, #46	; 0x2e
 800e868:	6838      	ldr	r0, [r7, #0]
 800e86a:	f7fe fcea 	bl	800d242 <SPI_ETH_REG>
 800e86e:	4603      	mov	r3, r0
 800e870:	b2da      	uxtb	r2, r3
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56


	Y->Sn_KPALVTR=SPI_ETH_REG(X, 0x2F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e87e:	3318      	adds	r3, #24
 800e880:	2201      	movs	r2, #1
 800e882:	9201      	str	r2, [sp, #4]
 800e884:	9300      	str	r3, [sp, #0]
 800e886:	2300      	movs	r3, #0
 800e888:	2201      	movs	r2, #1
 800e88a:	212f      	movs	r1, #47	; 0x2f
 800e88c:	6838      	ldr	r0, [r7, #0]
 800e88e:	f7fe fcd8 	bl	800d242 <SPI_ETH_REG>
 800e892:	4603      	mov	r3, r0
 800e894:	b2da      	uxtb	r2, r3
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
};
 800e89c:	bf00      	nop
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3708      	adds	r7, #8
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}
	...

0800e8a8 <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b090      	sub	sp, #64	; 0x40
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	60f8      	str	r0, [r7, #12]
 800e8b0:	60b9      	str	r1, [r7, #8]
 800e8b2:	607a      	str	r2, [r7, #4]
 800e8b4:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8be:	2300      	movs	r3, #0
 800e8c0:	637b      	str	r3, [r7, #52]	; 0x34
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	633b      	str	r3, [r7, #48]	; 0x30
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	61fb      	str	r3, [r7, #28]
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	61bb      	str	r3, [r7, #24]
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	627b      	str	r3, [r7, #36]	; 0x24
 800e8da:	2300      	movs	r3, #0
 800e8dc:	617b      	str	r3, [r7, #20]
 800e8de:	2300      	movs	r3, #0
 800e8e0:	623b      	str	r3, [r7, #32]
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800e8f2:	69fa      	ldr	r2, [r7, #28]
 800e8f4:	69bb      	ldr	r3, [r7, #24]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	f2c0 8315 	blt.w	800ef26 <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800e900:	e00c      	b.n	800e91c <FT_String_ND+0x74>
							{
								n++;
 800e902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e904:	3301      	adds	r3, #1
 800e906:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800e908:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e90a:	69bb      	ldr	r3, [r7, #24]
 800e90c:	441a      	add	r2, r3
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	3301      	adds	r3, #1
 800e912:	429a      	cmp	r2, r3
 800e914:	dd02      	ble.n	800e91c <FT_String_ND+0x74>
								{
									estado=0;
 800e916:	2300      	movs	r3, #0
 800e918:	623b      	str	r3, [r7, #32]
									break;
 800e91a:	e009      	b.n	800e930 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800e91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e91e:	68fa      	ldr	r2, [r7, #12]
 800e920:	4413      	add	r3, r2
 800e922:	781a      	ldrb	r2, [r3, #0]
 800e924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e926:	6879      	ldr	r1, [r7, #4]
 800e928:	440b      	add	r3, r1
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d1e8      	bne.n	800e902 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800e930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e932:	3301      	adds	r3, #1
 800e934:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800e936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e938:	3301      	adds	r3, #1
 800e93a:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800e93c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e93e:	69bb      	ldr	r3, [r7, #24]
 800e940:	429a      	cmp	r2, r3
 800e942:	d108      	bne.n	800e956 <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800e944:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e946:	69bb      	ldr	r3, [r7, #24]
 800e948:	1ad3      	subs	r3, r2, r3
 800e94a:	1c5a      	adds	r2, r3, #1
 800e94c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e94e:	601a      	str	r2, [r3, #0]
									estado=1;
 800e950:	2301      	movs	r3, #1
 800e952:	623b      	str	r3, [r7, #32]
									break;
 800e954:	e010      	b.n	800e978 <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800e956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e958:	69bb      	ldr	r3, [r7, #24]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	dd02      	ble.n	800e964 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800e95e:	2300      	movs	r3, #0
 800e960:	623b      	str	r3, [r7, #32]
									 break;
 800e962:	e009      	b.n	800e978 <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800e964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e966:	68fa      	ldr	r2, [r7, #12]
 800e968:	4413      	add	r3, r2
 800e96a:	781a      	ldrb	r2, [r3, #0]
 800e96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96e:	6879      	ldr	r1, [r7, #4]
 800e970:	440b      	add	r3, r1
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	429a      	cmp	r2, r3
 800e976:	d0db      	beq.n	800e930 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800e978:	69bb      	ldr	r3, [r7, #24]
 800e97a:	1e5a      	subs	r2, r3, #1
 800e97c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e97e:	4413      	add	r3, r2
 800e980:	69fa      	ldr	r2, [r7, #28]
 800e982:	429a      	cmp	r2, r3
 800e984:	dd02      	ble.n	800e98c <FT_String_ND+0xe4>
 800e986:	6a3b      	ldr	r3, [r7, #32]
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d1b7      	bne.n	800e8fc <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800e98c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d101      	bne.n	800e996 <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800e992:	6a3b      	ldr	r3, [r7, #32]
 800e994:	e2c8      	b.n	800ef28 <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800e996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d12c      	bne.n	800e9f6 <FT_String_ND+0x14e>
 800e99c:	6a3b      	ldr	r3, [r7, #32]
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	d129      	bne.n	800e9f6 <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800e9a2:	e014      	b.n	800e9ce <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800e9a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9a6:	681a      	ldr	r2, [r3, #0]
 800e9a8:	69bb      	ldr	r3, [r7, #24]
 800e9aa:	441a      	add	r2, r3
 800e9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ae:	4413      	add	r3, r2
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	68fa      	ldr	r2, [r7, #12]
 800e9b4:	441a      	add	r2, r3
 800e9b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9b8:	6819      	ldr	r1, [r3, #0]
 800e9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9bc:	440b      	add	r3, r1
 800e9be:	3b01      	subs	r3, #1
 800e9c0:	68f9      	ldr	r1, [r7, #12]
 800e9c2:	440b      	add	r3, r1
 800e9c4:	7812      	ldrb	r2, [r2, #0]
 800e9c6:	701a      	strb	r2, [r3, #0]
										n3++;
 800e9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800e9ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9d0:	681a      	ldr	r2, [r3, #0]
 800e9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d4:	441a      	add	r2, r3
 800e9d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9d8:	4413      	add	r3, r2
 800e9da:	69fa      	ldr	r2, [r7, #28]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	dae1      	bge.n	800e9a4 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800e9e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9e6:	4413      	add	r3, r2
 800e9e8:	1e5a      	subs	r2, r3, #1
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	601a      	str	r2, [r3, #0]
							estado=3;
 800e9ee:	2303      	movs	r3, #3
 800e9f0:	623b      	str	r3, [r7, #32]
							return(estado);
 800e9f2:	6a3b      	ldr	r3, [r7, #32]
 800e9f4:	e298      	b.n	800ef28 <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800e9f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9f8:	2b02      	cmp	r3, #2
 800e9fa:	f040 80be 	bne.w	800eb7a <FT_String_ND+0x2d2>
 800e9fe:	6a3b      	ldr	r3, [r7, #32]
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	f040 80ba 	bne.w	800eb7a <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ea06:	e012      	b.n	800ea2e <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800ea08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea0a:	69bb      	ldr	r3, [r7, #24]
 800ea0c:	1ad2      	subs	r2, r2, r3
 800ea0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea10:	4413      	add	r3, r2
 800ea12:	461a      	mov	r2, r3
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	441a      	add	r2, r3
 800ea18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ea1c:	440b      	add	r3, r1
 800ea1e:	7812      	ldrb	r2, [r2, #0]
 800ea20:	701a      	strb	r2, [r3, #0]
								n4++;
 800ea22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea24:	3301      	adds	r3, #1
 800ea26:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800ea28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea2c:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ea2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	1ad2      	subs	r2, r2, r3
 800ea34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea36:	4413      	add	r3, r2
 800ea38:	69fa      	ldr	r2, [r7, #28]
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	dae4      	bge.n	800ea08 <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800ea3e:	499d      	ldr	r1, [pc, #628]	; (800ecb4 <FT_String_ND+0x40c>)
 800ea40:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ea42:	f000 fd2d 	bl	800f4a0 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800ea46:	499c      	ldr	r1, [pc, #624]	; (800ecb8 <FT_String_ND+0x410>)
 800ea48:	2000      	movs	r0, #0
 800ea4a:	f000 fd29 	bl	800f4a0 <strtok>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	4618      	mov	r0, r3
 800ea52:	f000 fb66 	bl	800f122 <atoi>
 800ea56:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800ea58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea5a:	3b01      	subs	r3, #1
 800ea5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	db02      	blt.n	800ea68 <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 800ea62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea64:	3b01      	subs	r3, #1
 800ea66:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ea68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea6a:	3306      	adds	r3, #6
 800ea6c:	222c      	movs	r2, #44	; 0x2c
 800ea6e:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ea70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea72:	2b09      	cmp	r3, #9
 800ea74:	dc0d      	bgt.n	800ea92 <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800ea76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea78:	3308      	adds	r3, #8
 800ea7a:	223a      	movs	r2, #58	; 0x3a
 800ea7c:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800ea7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea80:	3309      	adds	r3, #9
 800ea82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea84:	4413      	add	r3, r2
 800ea86:	2200      	movs	r2, #0
 800ea88:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800ea8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8c:	3309      	adds	r3, #9
 800ea8e:	627b      	str	r3, [r7, #36]	; 0x24
 800ea90:	e021      	b.n	800ead6 <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 800ea92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea94:	2b63      	cmp	r3, #99	; 0x63
 800ea96:	dc0d      	bgt.n	800eab4 <FT_String_ND+0x20c>
														{
															c[9]=':';
 800ea98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea9a:	3309      	adds	r3, #9
 800ea9c:	223a      	movs	r2, #58	; 0x3a
 800ea9e:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800eaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa2:	330a      	adds	r3, #10
 800eaa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaa6:	4413      	add	r3, r2
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800eaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaae:	330a      	adds	r3, #10
 800eab0:	627b      	str	r3, [r7, #36]	; 0x24
 800eab2:	e010      	b.n	800ead6 <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 800eab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eab6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eaba:	da0c      	bge.n	800ead6 <FT_String_ND+0x22e>
														{
															c[10]=':';
 800eabc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eabe:	330a      	adds	r3, #10
 800eac0:	223a      	movs	r2, #58	; 0x3a
 800eac2:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800eac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac6:	330b      	adds	r3, #11
 800eac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaca:	4413      	add	r3, r2
 800eacc:	2200      	movs	r2, #0
 800eace:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800ead0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead2:	330b      	adds	r3, #11
 800ead4:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800ead6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ead8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eada:	601a      	str	r2, [r3, #0]
							n4=0;
 800eadc:	2300      	movs	r3, #0
 800eade:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800eae0:	e016      	b.n	800eb10 <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800eae2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eae4:	69bb      	ldr	r3, [r7, #24]
 800eae6:	1ad2      	subs	r2, r2, r3
 800eae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaea:	441a      	add	r2, r3
 800eaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaee:	4413      	add	r3, r2
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	441a      	add	r2, r3
 800eaf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	1ac9      	subs	r1, r1, r3
 800eafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eafe:	440b      	add	r3, r1
 800eb00:	4619      	mov	r1, r3
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	440b      	add	r3, r1
 800eb06:	7812      	ldrb	r2, [r2, #0]
 800eb08:	701a      	strb	r2, [r3, #0]
								n4++;
 800eb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800eb10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb12:	69bb      	ldr	r3, [r7, #24]
 800eb14:	1ad2      	subs	r2, r2, r3
 800eb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb18:	441a      	add	r2, r3
 800eb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1c:	4413      	add	r3, r2
 800eb1e:	69fa      	ldr	r2, [r7, #28]
 800eb20:	429a      	cmp	r2, r3
 800eb22:	dade      	bge.n	800eae2 <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 800eb24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb28:	441a      	add	r2, r3
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	1ad3      	subs	r3, r2, r3
 800eb2e:	1e5a      	subs	r2, r3, #1
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800eb34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb36:	69bb      	ldr	r3, [r7, #24]
 800eb38:	1ad2      	subs	r2, r2, r3
 800eb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3c:	441a      	add	r2, r3
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb40:	4413      	add	r3, r2
 800eb42:	461a      	mov	r2, r3
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	4413      	add	r3, r2
 800eb48:	2200      	movs	r2, #0
 800eb4a:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800eb4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb4e:	69bb      	ldr	r3, [r7, #24]
 800eb50:	1ad2      	subs	r2, r2, r3
 800eb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb54:	4413      	add	r3, r2
 800eb56:	461a      	mov	r2, r3
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	4413      	add	r3, r2
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800eb60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb62:	69bb      	ldr	r3, [r7, #24]
 800eb64:	1ad2      	subs	r2, r2, r3
 800eb66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6a:	440b      	add	r3, r1
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d102      	bne.n	800eb76 <FT_String_ND+0x2ce>
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2200      	movs	r2, #0
 800eb74:	701a      	strb	r2, [r3, #0]
							estado=3;
 800eb76:	2303      	movs	r3, #3
 800eb78:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800eb7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb7c:	2b03      	cmp	r3, #3
 800eb7e:	d146      	bne.n	800ec0e <FT_String_ND+0x366>
 800eb80:	6a3b      	ldr	r3, [r7, #32]
 800eb82:	2b01      	cmp	r3, #1
 800eb84:	d143      	bne.n	800ec0e <FT_String_ND+0x366>
						{
						n3=0;
 800eb86:	2300      	movs	r3, #0
 800eb88:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800eb8a:	e00e      	b.n	800ebaa <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 800eb8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb8e:	681a      	ldr	r2, [r3, #0]
 800eb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb92:	4413      	add	r3, r2
 800eb94:	3b01      	subs	r3, #1
 800eb96:	68fa      	ldr	r2, [r7, #12]
 800eb98:	441a      	add	r2, r3
 800eb9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb9c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eb9e:	440b      	add	r3, r1
 800eba0:	7812      	ldrb	r2, [r2, #0]
 800eba2:	701a      	strb	r2, [r3, #0]
										n3++;
 800eba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eba6:	3301      	adds	r3, #1
 800eba8:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800ebaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ebac:	69bb      	ldr	r3, [r7, #24]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	dbec      	blt.n	800eb8c <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800ebb6:	e014      	b.n	800ebe2 <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800ebb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebba:	681a      	ldr	r2, [r3, #0]
 800ebbc:	69bb      	ldr	r3, [r7, #24]
 800ebbe:	441a      	add	r2, r3
 800ebc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc2:	4413      	add	r3, r2
 800ebc4:	3b01      	subs	r3, #1
 800ebc6:	68fa      	ldr	r2, [r7, #12]
 800ebc8:	441a      	add	r2, r3
 800ebca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebcc:	6819      	ldr	r1, [r3, #0]
 800ebce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd0:	440b      	add	r3, r1
 800ebd2:	3b01      	subs	r3, #1
 800ebd4:	68f9      	ldr	r1, [r7, #12]
 800ebd6:	440b      	add	r3, r1
 800ebd8:	7812      	ldrb	r2, [r2, #0]
 800ebda:	701a      	strb	r2, [r3, #0]
										n5++;
 800ebdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebde:	3301      	adds	r3, #1
 800ebe0:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800ebe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	69bb      	ldr	r3, [r7, #24]
 800ebe8:	441a      	add	r2, r3
 800ebea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebec:	441a      	add	r2, r3
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	dde0      	ble.n	800ebb8 <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800ebf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfc:	4413      	add	r3, r2
 800ebfe:	1e5a      	subs	r2, r3, #1
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800ec04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec08:	601a      	str	r2, [r3, #0]
							estado=3;
 800ec0a:	2303      	movs	r3, #3
 800ec0c:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800ec0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec10:	2b04      	cmp	r3, #4
 800ec12:	f040 80bd 	bne.w	800ed90 <FT_String_ND+0x4e8>
 800ec16:	6a3b      	ldr	r3, [r7, #32]
 800ec18:	2b01      	cmp	r3, #1
 800ec1a:	f040 80b9 	bne.w	800ed90 <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ec1e:	e012      	b.n	800ec46 <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800ec20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec22:	69bb      	ldr	r3, [r7, #24]
 800ec24:	1ad2      	subs	r2, r2, r3
 800ec26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec28:	4413      	add	r3, r2
 800ec2a:	461a      	mov	r2, r3
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	441a      	add	r2, r3
 800ec30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec32:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ec34:	440b      	add	r3, r1
 800ec36:	7812      	ldrb	r2, [r2, #0]
 800ec38:	701a      	strb	r2, [r3, #0]
								n4++;
 800ec3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 800ec40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec44:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ec46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec48:	69bb      	ldr	r3, [r7, #24]
 800ec4a:	1ad2      	subs	r2, r2, r3
 800ec4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec4e:	4413      	add	r3, r2
 800ec50:	69fa      	ldr	r2, [r7, #28]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	dae4      	bge.n	800ec20 <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800ec56:	4917      	ldr	r1, [pc, #92]	; (800ecb4 <FT_String_ND+0x40c>)
 800ec58:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ec5a:	f000 fc21 	bl	800f4a0 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800ec5e:	4916      	ldr	r1, [pc, #88]	; (800ecb8 <FT_String_ND+0x410>)
 800ec60:	2000      	movs	r0, #0
 800ec62:	f000 fc1d 	bl	800f4a0 <strtok>
 800ec66:	4603      	mov	r3, r0
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f000 fa5a 	bl	800f122 <atoi>
 800ec6e:	62b8      	str	r0, [r7, #40]	; 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 800ec70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec72:	3b01      	subs	r3, #1
 800ec74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec76:	429a      	cmp	r2, r3
 800ec78:	db02      	blt.n	800ec80 <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800ec7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec7c:	3b01      	subs	r3, #1
 800ec7e:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ec80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec82:	3306      	adds	r3, #6
 800ec84:	222c      	movs	r2, #44	; 0x2c
 800ec86:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ec88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec8a:	2b09      	cmp	r3, #9
 800ec8c:	dc07      	bgt.n	800ec9e <FT_String_ND+0x3f6>
											{
												c[8]=':';
 800ec8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec90:	3308      	adds	r3, #8
 800ec92:	223a      	movs	r2, #58	; 0x3a
 800ec94:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800ec96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec98:	3309      	adds	r3, #9
 800ec9a:	627b      	str	r3, [r7, #36]	; 0x24
 800ec9c:	e019      	b.n	800ecd2 <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 800ec9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca0:	2b63      	cmp	r3, #99	; 0x63
 800eca2:	dc0b      	bgt.n	800ecbc <FT_String_ND+0x414>
														{
															c[9]=':';
 800eca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eca6:	3309      	adds	r3, #9
 800eca8:	223a      	movs	r2, #58	; 0x3a
 800ecaa:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800ecac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecae:	330a      	adds	r3, #10
 800ecb0:	627b      	str	r3, [r7, #36]	; 0x24
 800ecb2:	e00e      	b.n	800ecd2 <FT_String_ND+0x42a>
 800ecb4:	08010d80 	.word	0x08010d80
 800ecb8:	08010d84 	.word	0x08010d84
														}
														else
														{
														if (lngd < 1000)
 800ecbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ecc2:	da06      	bge.n	800ecd2 <FT_String_ND+0x42a>
														{
															c[10]=':';
 800ecc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecc6:	330a      	adds	r3, #10
 800ecc8:	223a      	movs	r2, #58	; 0x3a
 800ecca:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800eccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecce:	330b      	adds	r3, #11
 800ecd0:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ecd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecd6:	601a      	str	r2, [r3, #0]
							n4=0;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ecdc:	e016      	b.n	800ed0c <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ecde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ece0:	69bb      	ldr	r3, [r7, #24]
 800ece2:	1ad2      	subs	r2, r2, r3
 800ece4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece6:	441a      	add	r2, r3
 800ece8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecea:	4413      	add	r3, r2
 800ecec:	461a      	mov	r2, r3
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	441a      	add	r2, r3
 800ecf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	1ac9      	subs	r1, r1, r3
 800ecf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfa:	440b      	add	r3, r1
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	440b      	add	r3, r1
 800ed02:	7812      	ldrb	r2, [r2, #0]
 800ed04:	701a      	strb	r2, [r3, #0]
								n4++;
 800ed06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed08:	3301      	adds	r3, #1
 800ed0a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ed0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed0e:	69bb      	ldr	r3, [r7, #24]
 800ed10:	1ad2      	subs	r2, r2, r3
 800ed12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed14:	441a      	add	r2, r3
 800ed16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed18:	4413      	add	r3, r2
 800ed1a:	69fa      	ldr	r2, [r7, #28]
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	dade      	bge.n	800ecde <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800ed20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed24:	441a      	add	r2, r3
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	1ad3      	subs	r3, r2, r3
 800ed2a:	1e5a      	subs	r2, r3, #1
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	601a      	str	r2, [r3, #0]
							n5=0;
 800ed30:	2300      	movs	r3, #0
 800ed32:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ed34:	e00f      	b.n	800ed56 <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ed36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3a:	1ad2      	subs	r2, r2, r3
 800ed3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed3e:	4413      	add	r3, r2
 800ed40:	461a      	mov	r2, r3
 800ed42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed44:	441a      	add	r2, r3
 800ed46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed48:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ed4a:	440b      	add	r3, r1
 800ed4c:	7812      	ldrb	r2, [r2, #0]
 800ed4e:	701a      	strb	r2, [r3, #0]
								n5++;
 800ed50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed52:	3301      	adds	r3, #1
 800ed54:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ed56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5a:	1ad2      	subs	r2, r2, r3
 800ed5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5e:	441a      	add	r2, r3
 800ed60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	dbe6      	blt.n	800ed36 <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ed68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed6c:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ed6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed70:	681a      	ldr	r2, [r3, #0]
 800ed72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed74:	441a      	add	r2, r3
 800ed76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed78:	1ad2      	subs	r2, r2, r3
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	4413      	add	r3, r2
 800ed80:	69fa      	ldr	r2, [r7, #28]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d102      	bne.n	800ed8c <FT_String_ND+0x4e4>
							{
								estado=4;
 800ed86:	2304      	movs	r3, #4
 800ed88:	623b      	str	r3, [r7, #32]
 800ed8a:	e001      	b.n	800ed90 <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 800ed8c:	2305      	movs	r3, #5
 800ed8e:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800ed90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed92:	2b05      	cmp	r3, #5
 800ed94:	f040 80c5 	bne.w	800ef22 <FT_String_ND+0x67a>
 800ed98:	6a3b      	ldr	r3, [r7, #32]
 800ed9a:	2b01      	cmp	r3, #1
 800ed9c:	f040 80c1 	bne.w	800ef22 <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eda0:	e012      	b.n	800edc8 <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800eda2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eda4:	69bb      	ldr	r3, [r7, #24]
 800eda6:	1ad2      	subs	r2, r2, r3
 800eda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edaa:	4413      	add	r3, r2
 800edac:	461a      	mov	r2, r3
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	441a      	add	r2, r3
 800edb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800edb6:	440b      	add	r3, r1
 800edb8:	7812      	ldrb	r2, [r2, #0]
 800edba:	701a      	strb	r2, [r3, #0]
								n4++;
 800edbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edbe:	3301      	adds	r3, #1
 800edc0:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800edc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edc6:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800edc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	1ad2      	subs	r2, r2, r3
 800edce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd0:	4413      	add	r3, r2
 800edd2:	69fa      	ldr	r2, [r7, #28]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	dae4      	bge.n	800eda2 <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800edd8:	4955      	ldr	r1, [pc, #340]	; (800ef30 <FT_String_ND+0x688>)
 800edda:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800eddc:	f000 fb60 	bl	800f4a0 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800ede0:	4954      	ldr	r1, [pc, #336]	; (800ef34 <FT_String_ND+0x68c>)
 800ede2:	2000      	movs	r0, #0
 800ede4:	f000 fb5c 	bl	800f4a0 <strtok>
 800ede8:	4603      	mov	r3, r0
 800edea:	4618      	mov	r0, r3
 800edec:	f000 f999 	bl	800f122 <atoi>
 800edf0:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800edf2:	4950      	ldr	r1, [pc, #320]	; (800ef34 <FT_String_ND+0x68c>)
 800edf4:	2000      	movs	r0, #0
 800edf6:	f000 fb53 	bl	800f4a0 <strtok>
 800edfa:	4603      	mov	r3, r0
 800edfc:	4618      	mov	r0, r3
 800edfe:	f000 f990 	bl	800f122 <atoi>
 800ee02:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800ee04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee06:	3b01      	subs	r3, #1
 800ee08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	db02      	blt.n	800ee14 <FT_String_ND+0x56c>
							{
								lngd=of-1;
 800ee0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee10:	3b01      	subs	r3, #1
 800ee12:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ee14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee16:	3306      	adds	r3, #6
 800ee18:	222c      	movs	r2, #44	; 0x2c
 800ee1a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ee1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1e:	2b09      	cmp	r3, #9
 800ee20:	dc07      	bgt.n	800ee32 <FT_String_ND+0x58a>
											{
												c[10]=':';
 800ee22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee24:	330a      	adds	r3, #10
 800ee26:	223a      	movs	r2, #58	; 0x3a
 800ee28:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800ee2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2c:	330b      	adds	r3, #11
 800ee2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ee30:	e015      	b.n	800ee5e <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 800ee32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee34:	2b63      	cmp	r3, #99	; 0x63
 800ee36:	dc07      	bgt.n	800ee48 <FT_String_ND+0x5a0>
														{
															c[11]=':';
 800ee38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee3a:	330b      	adds	r3, #11
 800ee3c:	223a      	movs	r2, #58	; 0x3a
 800ee3e:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800ee40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee42:	330c      	adds	r3, #12
 800ee44:	627b      	str	r3, [r7, #36]	; 0x24
 800ee46:	e00a      	b.n	800ee5e <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 800ee48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ee4e:	da06      	bge.n	800ee5e <FT_String_ND+0x5b6>
														{
															c[12]=':';
 800ee50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee52:	330c      	adds	r3, #12
 800ee54:	223a      	movs	r2, #58	; 0x3a
 800ee56:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800ee58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee5a:	330d      	adds	r3, #13
 800ee5c:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ee5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee62:	601a      	str	r2, [r3, #0]
							n4=0;
 800ee64:	2300      	movs	r3, #0
 800ee66:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ee68:	e016      	b.n	800ee98 <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ee6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee6c:	69bb      	ldr	r3, [r7, #24]
 800ee6e:	1ad2      	subs	r2, r2, r3
 800ee70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee72:	441a      	add	r2, r3
 800ee74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee76:	4413      	add	r3, r2
 800ee78:	461a      	mov	r2, r3
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	441a      	add	r2, r3
 800ee7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ee80:	69bb      	ldr	r3, [r7, #24]
 800ee82:	1ac9      	subs	r1, r1, r3
 800ee84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee86:	440b      	add	r3, r1
 800ee88:	4619      	mov	r1, r3
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	440b      	add	r3, r1
 800ee8e:	7812      	ldrb	r2, [r2, #0]
 800ee90:	701a      	strb	r2, [r3, #0]
								n4++;
 800ee92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee94:	3301      	adds	r3, #1
 800ee96:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ee98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee9a:	69bb      	ldr	r3, [r7, #24]
 800ee9c:	1ad2      	subs	r2, r2, r3
 800ee9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea0:	441a      	add	r2, r3
 800eea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea4:	4413      	add	r3, r2
 800eea6:	69fa      	ldr	r2, [r7, #28]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	dade      	bge.n	800ee6a <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800eeac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb0:	441a      	add	r2, r3
 800eeb2:	69bb      	ldr	r3, [r7, #24]
 800eeb4:	1ad3      	subs	r3, r2, r3
 800eeb6:	1e5a      	subs	r2, r3, #1
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	601a      	str	r2, [r3, #0]
							n5=0;
 800eebc:	2300      	movs	r3, #0
 800eebe:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800eec0:	e00f      	b.n	800eee2 <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800eec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec6:	1ad2      	subs	r2, r2, r3
 800eec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeca:	4413      	add	r3, r2
 800eecc:	461a      	mov	r2, r3
 800eece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eed0:	441a      	add	r2, r3
 800eed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eed6:	440b      	add	r3, r1
 800eed8:	7812      	ldrb	r2, [r2, #0]
 800eeda:	701a      	strb	r2, [r3, #0]
								n5++;
 800eedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eede:	3301      	adds	r3, #1
 800eee0:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800eee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee6:	1ad2      	subs	r2, r2, r3
 800eee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeea:	441a      	add	r2, r3
 800eeec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	429a      	cmp	r2, r3
 800eef2:	dbe6      	blt.n	800eec2 <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800eef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eef8:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800eefa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef00:	441a      	add	r2, r3
 800ef02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef04:	1ad2      	subs	r2, r2, r3
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4413      	add	r3, r2
 800ef0c:	69fa      	ldr	r2, [r7, #28]
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d105      	bne.n	800ef1e <FT_String_ND+0x676>
							{
								estado=4;
 800ef12:	2304      	movs	r3, #4
 800ef14:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 800ef16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef18:	693a      	ldr	r2, [r7, #16]
 800ef1a:	601a      	str	r2, [r3, #0]
 800ef1c:	e001      	b.n	800ef22 <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 800ef1e:	2305      	movs	r3, #5
 800ef20:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800ef22:	6a3b      	ldr	r3, [r7, #32]
 800ef24:	e000      	b.n	800ef28 <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 800ef26:	2302      	movs	r3, #2
			}
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3740      	adds	r7, #64	; 0x40
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	08010d80 	.word	0x08010d80
 800ef34:	08010d84 	.word	0x08010d84

0800ef38 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b088      	sub	sp, #32
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800ef42:	2330      	movs	r3, #48	; 0x30
 800ef44:	60bb      	str	r3, [r7, #8]
 800ef46:	f107 030c 	add.w	r3, r7, #12
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	601a      	str	r2, [r3, #0]
 800ef4e:	605a      	str	r2, [r3, #4]
 800ef50:	609a      	str	r2, [r3, #8]
 800ef52:	60da      	str	r2, [r3, #12]
int i=0;	
 800ef54:	2300      	movs	r3, #0
 800ef56:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800ef58:	f107 0308 	add.w	r3, r7, #8
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	490f      	ldr	r1, [pc, #60]	; (800ef9c <INTOA+0x64>)
 800ef60:	4618      	mov	r0, r3
 800ef62:	f000 fa1f 	bl	800f3a4 <siprintf>
		while(i<=strlen(origbuff))
 800ef66:	e00b      	b.n	800ef80 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	1c5a      	adds	r2, r3, #1
 800ef6c:	603a      	str	r2, [r7, #0]
 800ef6e:	f107 0108 	add.w	r1, r7, #8
 800ef72:	69fa      	ldr	r2, [r7, #28]
 800ef74:	440a      	add	r2, r1
 800ef76:	7812      	ldrb	r2, [r2, #0]
 800ef78:	701a      	strb	r2, [r3, #0]
		i++;
 800ef7a:	69fb      	ldr	r3, [r7, #28]
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800ef80:	f107 0308 	add.w	r3, r7, #8
 800ef84:	4618      	mov	r0, r3
 800ef86:	f7f1 f935 	bl	80001f4 <strlen>
 800ef8a:	4602      	mov	r2, r0
 800ef8c:	69fb      	ldr	r3, [r7, #28]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d2ea      	bcs.n	800ef68 <INTOA+0x30>
		}
		return(i);
 800ef92:	69fb      	ldr	r3, [r7, #28]
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3720      	adds	r7, #32
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}
 800ef9c:	08010d88 	.word	0x08010d88

0800efa0 <FTOA>:

int FTOA( int a,  unsigned char *v1, int comma)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b08c      	sub	sp, #48	; 0x30
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	60f8      	str	r0, [r7, #12]
 800efa8:	60b9      	str	r1, [r7, #8]
 800efaa:	607a      	str	r2, [r7, #4]
//char origbuff[20]="0";
char origbuff[20];
origbuff[0]='\0';
 800efac:	2300      	movs	r3, #0
 800efae:	753b      	strb	r3, [r7, #20]

int i=0;
 800efb0:	2300      	movs	r3, #0
 800efb2:	62fb      	str	r3, [r7, #44]	; 0x2c
int b=0;
 800efb4:	2300      	movs	r3, #0
 800efb6:	62bb      	str	r3, [r7, #40]	; 0x28

		sprintf(origbuff,"%i",a); 	//Paso el entreo a cadena de caracteres
 800efb8:	f107 0314 	add.w	r3, r7, #20
 800efbc:	68fa      	ldr	r2, [r7, #12]
 800efbe:	4932      	ldr	r1, [pc, #200]	; (800f088 <FTOA+0xe8>)
 800efc0:	4618      	mov	r0, r3
 800efc2:	f000 f9ef 	bl	800f3a4 <siprintf>
		b=strlen(origbuff);
 800efc6:	f107 0314 	add.w	r3, r7, #20
 800efca:	4618      	mov	r0, r3
 800efcc:	f7f1 f912 	bl	80001f4 <strlen>
 800efd0:	4603      	mov	r3, r0
 800efd2:	62bb      	str	r3, [r7, #40]	; 0x28
		if(comma<b)					//Si la posición de la coma es menor a la posición de los caracteres ejemplo int= 2 comma=0 resultado = 0,02
 800efd4:	687a      	ldr	r2, [r7, #4]
 800efd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd8:	429a      	cmp	r2, r3
 800efda:	da25      	bge.n	800f028 <FTOA+0x88>
		{
			while(i<=((b)+1))
 800efdc:	e01d      	b.n	800f01a <FTOA+0x7a>
			{
				if((i==(b-comma))&&(comma<(b))&&(comma!=0))
 800efde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	1ad3      	subs	r3, r2, r3
 800efe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d10b      	bne.n	800f002 <FTOA+0x62>
 800efea:	687a      	ldr	r2, [r7, #4]
 800efec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efee:	429a      	cmp	r2, r3
 800eff0:	da07      	bge.n	800f002 <FTOA+0x62>
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d004      	beq.n	800f002 <FTOA+0x62>
				{
					*v1++='.';
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	1c5a      	adds	r2, r3, #1
 800effc:	60ba      	str	r2, [r7, #8]
 800effe:	222e      	movs	r2, #46	; 0x2e
 800f000:	701a      	strb	r2, [r3, #0]
				}
				*v1++=(unsigned char)origbuff[i];
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	1c5a      	adds	r2, r3, #1
 800f006:	60ba      	str	r2, [r7, #8]
 800f008:	f107 0114 	add.w	r1, r7, #20
 800f00c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f00e:	440a      	add	r2, r1
 800f010:	7812      	ldrb	r2, [r2, #0]
 800f012:	701a      	strb	r2, [r3, #0]
				i++;
 800f014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f016:	3301      	adds	r3, #1
 800f018:	62fb      	str	r3, [r7, #44]	; 0x2c
			while(i<=((b)+1))
 800f01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f01c:	3301      	adds	r3, #1
 800f01e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f020:	429a      	cmp	r2, r3
 800f022:	dddc      	ble.n	800efde <FTOA+0x3e>
			}
			//*v1++='\0';
			return(i);
 800f024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f026:	e02a      	b.n	800f07e <FTOA+0xde>
		  }
		else
		{
			if(b==1)
 800f028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f02a:	2b01      	cmp	r3, #1
 800f02c:	d10f      	bne.n	800f04e <FTOA+0xae>
			{
				v1[0]='0';
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	2230      	movs	r2, #48	; 0x30
 800f032:	701a      	strb	r2, [r3, #0]
				v1[1]='.';
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	3301      	adds	r3, #1
 800f038:	222e      	movs	r2, #46	; 0x2e
 800f03a:	701a      	strb	r2, [r3, #0]
				v1[2]=origbuff[0];
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	3302      	adds	r3, #2
 800f040:	7d3a      	ldrb	r2, [r7, #20]
 800f042:	701a      	strb	r2, [r3, #0]
				v1[3]='\0';
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	3303      	adds	r3, #3
 800f048:	2200      	movs	r2, #0
 800f04a:	701a      	strb	r2, [r3, #0]
 800f04c:	e016      	b.n	800f07c <FTOA+0xdc>
			}
			else
			{
				if(b==0)
 800f04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f050:	2b00      	cmp	r3, #0
 800f052:	d113      	bne.n	800f07c <FTOA+0xdc>
				{
					*v1++='0';
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	1c5a      	adds	r2, r3, #1
 800f058:	60ba      	str	r2, [r7, #8]
 800f05a:	2230      	movs	r2, #48	; 0x30
 800f05c:	701a      	strb	r2, [r3, #0]
					*v1++='.';
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	1c5a      	adds	r2, r3, #1
 800f062:	60ba      	str	r2, [r7, #8]
 800f064:	222e      	movs	r2, #46	; 0x2e
 800f066:	701a      	strb	r2, [r3, #0]
					*v1++='0';
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	1c5a      	adds	r2, r3, #1
 800f06c:	60ba      	str	r2, [r7, #8]
 800f06e:	2230      	movs	r2, #48	; 0x30
 800f070:	701a      	strb	r2, [r3, #0]
					*v1++='\0';
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	1c5a      	adds	r2, r3, #1
 800f076:	60ba      	str	r2, [r7, #8]
 800f078:	2200      	movs	r2, #0
 800f07a:	701a      	strb	r2, [r3, #0]
				}
			}

		}

		return(0);
 800f07c:	2300      	movs	r3, #0
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3730      	adds	r7, #48	; 0x30
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	08010d88 	.word	0x08010d88

0800f08c <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b088      	sub	sp, #32
 800f090:	af00      	add	r7, sp, #0
 800f092:	60f8      	str	r0, [r7, #12]
 800f094:	60b9      	str	r1, [r7, #8]
 800f096:	607a      	str	r2, [r7, #4]
 800f098:	603b      	str	r3, [r7, #0]
int x =0;
 800f09a:	2300      	movs	r3, #0
 800f09c:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800f09e:	2300      	movs	r3, #0
 800f0a0:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800f0a2:	f107 0310 	add.w	r3, r7, #16
 800f0a6:	617b      	str	r3, [r7, #20]
if (c==0)
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d105      	bne.n	800f0ba <CopiaVector+0x2e>
{
	x=strlen(b);
 800f0ae:	68b8      	ldr	r0, [r7, #8]
 800f0b0:	f7f1 f8a0 	bl	80001f4 <strlen>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	61bb      	str	r3, [r7, #24]
 800f0b8:	e02e      	b.n	800f118 <CopiaVector+0x8c>
}
else
	{
		x=c;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800f0be:	69bb      	ldr	r3, [r7, #24]
 800f0c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0c4:	dd01      	ble.n	800f0ca <CopiaVector+0x3e>
			{
				return(1);
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	e027      	b.n	800f11a <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800f0ce:	e00a      	b.n	800f0e6 <CopiaVector+0x5a>
				{
					*a++=*b++;
 800f0d0:	68ba      	ldr	r2, [r7, #8]
 800f0d2:	1c53      	adds	r3, r2, #1
 800f0d4:	60bb      	str	r3, [r7, #8]
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	1c59      	adds	r1, r3, #1
 800f0da:	60f9      	str	r1, [r7, #12]
 800f0dc:	7812      	ldrb	r2, [r2, #0]
 800f0de:	701a      	strb	r2, [r3, #0]
					p++;
 800f0e0:	69fb      	ldr	r3, [r7, #28]
 800f0e2:	3301      	adds	r3, #1
 800f0e4:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800f0e6:	69fa      	ldr	r2, [r7, #28]
 800f0e8:	69bb      	ldr	r3, [r7, #24]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	dbf0      	blt.n	800f0d0 <CopiaVector+0x44>
				}


			if (d==1)
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	2b01      	cmp	r3, #1
 800f0f2:	d111      	bne.n	800f118 <CopiaVector+0x8c>
			{
			  p=c;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	61fb      	str	r3, [r7, #28]
			  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800f0f8:	e008      	b.n	800f10c <CopiaVector+0x80>
			  {

				  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	1c5a      	adds	r2, r3, #1
 800f0fe:	60fa      	str	r2, [r7, #12]
 800f100:	697a      	ldr	r2, [r7, #20]
 800f102:	7812      	ldrb	r2, [r2, #0]
 800f104:	701a      	strb	r2, [r3, #0]
				  p++;
 800f106:	69fb      	ldr	r3, [r7, #28]
 800f108:	3301      	adds	r3, #1
 800f10a:	61fb      	str	r3, [r7, #28]
			  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800f10c:	687a      	ldr	r2, [r7, #4]
 800f10e:	69fb      	ldr	r3, [r7, #28]
 800f110:	429a      	cmp	r2, r3
 800f112:	daf2      	bge.n	800f0fa <CopiaVector+0x6e>
				  //&a[p]="/0";

			  }
			return (0);
 800f114:	2300      	movs	r3, #0
 800f116:	e000      	b.n	800f11a <CopiaVector+0x8e>
			}

			}
	}
return (1);
 800f118:	2301      	movs	r3, #1
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3720      	adds	r7, #32
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}

0800f122 <atoi>:
 800f122:	220a      	movs	r2, #10
 800f124:	2100      	movs	r1, #0
 800f126:	f000 b883 	b.w	800f230 <strtol>
	...

0800f12c <_strtol_l.constprop.0>:
 800f12c:	2b01      	cmp	r3, #1
 800f12e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f132:	d001      	beq.n	800f138 <_strtol_l.constprop.0+0xc>
 800f134:	2b24      	cmp	r3, #36	; 0x24
 800f136:	d906      	bls.n	800f146 <_strtol_l.constprop.0+0x1a>
 800f138:	f000 fa54 	bl	800f5e4 <__errno>
 800f13c:	2316      	movs	r3, #22
 800f13e:	6003      	str	r3, [r0, #0]
 800f140:	2000      	movs	r0, #0
 800f142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f146:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f22c <_strtol_l.constprop.0+0x100>
 800f14a:	460d      	mov	r5, r1
 800f14c:	462e      	mov	r6, r5
 800f14e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f152:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800f156:	f017 0708 	ands.w	r7, r7, #8
 800f15a:	d1f7      	bne.n	800f14c <_strtol_l.constprop.0+0x20>
 800f15c:	2c2d      	cmp	r4, #45	; 0x2d
 800f15e:	d132      	bne.n	800f1c6 <_strtol_l.constprop.0+0x9a>
 800f160:	782c      	ldrb	r4, [r5, #0]
 800f162:	2701      	movs	r7, #1
 800f164:	1cb5      	adds	r5, r6, #2
 800f166:	2b00      	cmp	r3, #0
 800f168:	d05b      	beq.n	800f222 <_strtol_l.constprop.0+0xf6>
 800f16a:	2b10      	cmp	r3, #16
 800f16c:	d109      	bne.n	800f182 <_strtol_l.constprop.0+0x56>
 800f16e:	2c30      	cmp	r4, #48	; 0x30
 800f170:	d107      	bne.n	800f182 <_strtol_l.constprop.0+0x56>
 800f172:	782c      	ldrb	r4, [r5, #0]
 800f174:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f178:	2c58      	cmp	r4, #88	; 0x58
 800f17a:	d14d      	bne.n	800f218 <_strtol_l.constprop.0+0xec>
 800f17c:	786c      	ldrb	r4, [r5, #1]
 800f17e:	2310      	movs	r3, #16
 800f180:	3502      	adds	r5, #2
 800f182:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f186:	f108 38ff 	add.w	r8, r8, #4294967295
 800f18a:	f04f 0e00 	mov.w	lr, #0
 800f18e:	fbb8 f9f3 	udiv	r9, r8, r3
 800f192:	4676      	mov	r6, lr
 800f194:	fb03 8a19 	mls	sl, r3, r9, r8
 800f198:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f19c:	f1bc 0f09 	cmp.w	ip, #9
 800f1a0:	d816      	bhi.n	800f1d0 <_strtol_l.constprop.0+0xa4>
 800f1a2:	4664      	mov	r4, ip
 800f1a4:	42a3      	cmp	r3, r4
 800f1a6:	dd24      	ble.n	800f1f2 <_strtol_l.constprop.0+0xc6>
 800f1a8:	f1be 3fff 	cmp.w	lr, #4294967295
 800f1ac:	d008      	beq.n	800f1c0 <_strtol_l.constprop.0+0x94>
 800f1ae:	45b1      	cmp	r9, r6
 800f1b0:	d31c      	bcc.n	800f1ec <_strtol_l.constprop.0+0xc0>
 800f1b2:	d101      	bne.n	800f1b8 <_strtol_l.constprop.0+0x8c>
 800f1b4:	45a2      	cmp	sl, r4
 800f1b6:	db19      	blt.n	800f1ec <_strtol_l.constprop.0+0xc0>
 800f1b8:	fb06 4603 	mla	r6, r6, r3, r4
 800f1bc:	f04f 0e01 	mov.w	lr, #1
 800f1c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f1c4:	e7e8      	b.n	800f198 <_strtol_l.constprop.0+0x6c>
 800f1c6:	2c2b      	cmp	r4, #43	; 0x2b
 800f1c8:	bf04      	itt	eq
 800f1ca:	782c      	ldrbeq	r4, [r5, #0]
 800f1cc:	1cb5      	addeq	r5, r6, #2
 800f1ce:	e7ca      	b.n	800f166 <_strtol_l.constprop.0+0x3a>
 800f1d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f1d4:	f1bc 0f19 	cmp.w	ip, #25
 800f1d8:	d801      	bhi.n	800f1de <_strtol_l.constprop.0+0xb2>
 800f1da:	3c37      	subs	r4, #55	; 0x37
 800f1dc:	e7e2      	b.n	800f1a4 <_strtol_l.constprop.0+0x78>
 800f1de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f1e2:	f1bc 0f19 	cmp.w	ip, #25
 800f1e6:	d804      	bhi.n	800f1f2 <_strtol_l.constprop.0+0xc6>
 800f1e8:	3c57      	subs	r4, #87	; 0x57
 800f1ea:	e7db      	b.n	800f1a4 <_strtol_l.constprop.0+0x78>
 800f1ec:	f04f 3eff 	mov.w	lr, #4294967295
 800f1f0:	e7e6      	b.n	800f1c0 <_strtol_l.constprop.0+0x94>
 800f1f2:	f1be 3fff 	cmp.w	lr, #4294967295
 800f1f6:	d105      	bne.n	800f204 <_strtol_l.constprop.0+0xd8>
 800f1f8:	2322      	movs	r3, #34	; 0x22
 800f1fa:	6003      	str	r3, [r0, #0]
 800f1fc:	4646      	mov	r6, r8
 800f1fe:	b942      	cbnz	r2, 800f212 <_strtol_l.constprop.0+0xe6>
 800f200:	4630      	mov	r0, r6
 800f202:	e79e      	b.n	800f142 <_strtol_l.constprop.0+0x16>
 800f204:	b107      	cbz	r7, 800f208 <_strtol_l.constprop.0+0xdc>
 800f206:	4276      	negs	r6, r6
 800f208:	2a00      	cmp	r2, #0
 800f20a:	d0f9      	beq.n	800f200 <_strtol_l.constprop.0+0xd4>
 800f20c:	f1be 0f00 	cmp.w	lr, #0
 800f210:	d000      	beq.n	800f214 <_strtol_l.constprop.0+0xe8>
 800f212:	1e69      	subs	r1, r5, #1
 800f214:	6011      	str	r1, [r2, #0]
 800f216:	e7f3      	b.n	800f200 <_strtol_l.constprop.0+0xd4>
 800f218:	2430      	movs	r4, #48	; 0x30
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d1b1      	bne.n	800f182 <_strtol_l.constprop.0+0x56>
 800f21e:	2308      	movs	r3, #8
 800f220:	e7af      	b.n	800f182 <_strtol_l.constprop.0+0x56>
 800f222:	2c30      	cmp	r4, #48	; 0x30
 800f224:	d0a5      	beq.n	800f172 <_strtol_l.constprop.0+0x46>
 800f226:	230a      	movs	r3, #10
 800f228:	e7ab      	b.n	800f182 <_strtol_l.constprop.0+0x56>
 800f22a:	bf00      	nop
 800f22c:	08010da5 	.word	0x08010da5

0800f230 <strtol>:
 800f230:	4613      	mov	r3, r2
 800f232:	460a      	mov	r2, r1
 800f234:	4601      	mov	r1, r0
 800f236:	4802      	ldr	r0, [pc, #8]	; (800f240 <strtol+0x10>)
 800f238:	6800      	ldr	r0, [r0, #0]
 800f23a:	f7ff bf77 	b.w	800f12c <_strtol_l.constprop.0>
 800f23e:	bf00      	nop
 800f240:	200001b4 	.word	0x200001b4

0800f244 <std>:
 800f244:	2300      	movs	r3, #0
 800f246:	b510      	push	{r4, lr}
 800f248:	4604      	mov	r4, r0
 800f24a:	e9c0 3300 	strd	r3, r3, [r0]
 800f24e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f252:	6083      	str	r3, [r0, #8]
 800f254:	8181      	strh	r1, [r0, #12]
 800f256:	6643      	str	r3, [r0, #100]	; 0x64
 800f258:	81c2      	strh	r2, [r0, #14]
 800f25a:	6183      	str	r3, [r0, #24]
 800f25c:	4619      	mov	r1, r3
 800f25e:	2208      	movs	r2, #8
 800f260:	305c      	adds	r0, #92	; 0x5c
 800f262:	f000 f902 	bl	800f46a <memset>
 800f266:	4b05      	ldr	r3, [pc, #20]	; (800f27c <std+0x38>)
 800f268:	6263      	str	r3, [r4, #36]	; 0x24
 800f26a:	4b05      	ldr	r3, [pc, #20]	; (800f280 <std+0x3c>)
 800f26c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f26e:	4b05      	ldr	r3, [pc, #20]	; (800f284 <std+0x40>)
 800f270:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f272:	4b05      	ldr	r3, [pc, #20]	; (800f288 <std+0x44>)
 800f274:	6224      	str	r4, [r4, #32]
 800f276:	6323      	str	r3, [r4, #48]	; 0x30
 800f278:	bd10      	pop	{r4, pc}
 800f27a:	bf00      	nop
 800f27c:	0800f3e5 	.word	0x0800f3e5
 800f280:	0800f407 	.word	0x0800f407
 800f284:	0800f43f 	.word	0x0800f43f
 800f288:	0800f463 	.word	0x0800f463

0800f28c <stdio_exit_handler>:
 800f28c:	4a02      	ldr	r2, [pc, #8]	; (800f298 <stdio_exit_handler+0xc>)
 800f28e:	4903      	ldr	r1, [pc, #12]	; (800f29c <stdio_exit_handler+0x10>)
 800f290:	4803      	ldr	r0, [pc, #12]	; (800f2a0 <stdio_exit_handler+0x14>)
 800f292:	f000 b869 	b.w	800f368 <_fwalk_sglue>
 800f296:	bf00      	nop
 800f298:	2000015c 	.word	0x2000015c
 800f29c:	0800ff65 	.word	0x0800ff65
 800f2a0:	20000168 	.word	0x20000168

0800f2a4 <cleanup_stdio>:
 800f2a4:	6841      	ldr	r1, [r0, #4]
 800f2a6:	4b0c      	ldr	r3, [pc, #48]	; (800f2d8 <cleanup_stdio+0x34>)
 800f2a8:	4299      	cmp	r1, r3
 800f2aa:	b510      	push	{r4, lr}
 800f2ac:	4604      	mov	r4, r0
 800f2ae:	d001      	beq.n	800f2b4 <cleanup_stdio+0x10>
 800f2b0:	f000 fe58 	bl	800ff64 <_fflush_r>
 800f2b4:	68a1      	ldr	r1, [r4, #8]
 800f2b6:	4b09      	ldr	r3, [pc, #36]	; (800f2dc <cleanup_stdio+0x38>)
 800f2b8:	4299      	cmp	r1, r3
 800f2ba:	d002      	beq.n	800f2c2 <cleanup_stdio+0x1e>
 800f2bc:	4620      	mov	r0, r4
 800f2be:	f000 fe51 	bl	800ff64 <_fflush_r>
 800f2c2:	68e1      	ldr	r1, [r4, #12]
 800f2c4:	4b06      	ldr	r3, [pc, #24]	; (800f2e0 <cleanup_stdio+0x3c>)
 800f2c6:	4299      	cmp	r1, r3
 800f2c8:	d004      	beq.n	800f2d4 <cleanup_stdio+0x30>
 800f2ca:	4620      	mov	r0, r4
 800f2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2d0:	f000 be48 	b.w	800ff64 <_fflush_r>
 800f2d4:	bd10      	pop	{r4, pc}
 800f2d6:	bf00      	nop
 800f2d8:	20004684 	.word	0x20004684
 800f2dc:	200046ec 	.word	0x200046ec
 800f2e0:	20004754 	.word	0x20004754

0800f2e4 <global_stdio_init.part.0>:
 800f2e4:	b510      	push	{r4, lr}
 800f2e6:	4b0b      	ldr	r3, [pc, #44]	; (800f314 <global_stdio_init.part.0+0x30>)
 800f2e8:	4c0b      	ldr	r4, [pc, #44]	; (800f318 <global_stdio_init.part.0+0x34>)
 800f2ea:	4a0c      	ldr	r2, [pc, #48]	; (800f31c <global_stdio_init.part.0+0x38>)
 800f2ec:	601a      	str	r2, [r3, #0]
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	2104      	movs	r1, #4
 800f2f4:	f7ff ffa6 	bl	800f244 <std>
 800f2f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f2fc:	2201      	movs	r2, #1
 800f2fe:	2109      	movs	r1, #9
 800f300:	f7ff ffa0 	bl	800f244 <std>
 800f304:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f308:	2202      	movs	r2, #2
 800f30a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f30e:	2112      	movs	r1, #18
 800f310:	f7ff bf98 	b.w	800f244 <std>
 800f314:	200047bc 	.word	0x200047bc
 800f318:	20004684 	.word	0x20004684
 800f31c:	0800f28d 	.word	0x0800f28d

0800f320 <__sfp_lock_acquire>:
 800f320:	4801      	ldr	r0, [pc, #4]	; (800f328 <__sfp_lock_acquire+0x8>)
 800f322:	f000 b989 	b.w	800f638 <__retarget_lock_acquire_recursive>
 800f326:	bf00      	nop
 800f328:	200047c5 	.word	0x200047c5

0800f32c <__sfp_lock_release>:
 800f32c:	4801      	ldr	r0, [pc, #4]	; (800f334 <__sfp_lock_release+0x8>)
 800f32e:	f000 b984 	b.w	800f63a <__retarget_lock_release_recursive>
 800f332:	bf00      	nop
 800f334:	200047c5 	.word	0x200047c5

0800f338 <__sinit>:
 800f338:	b510      	push	{r4, lr}
 800f33a:	4604      	mov	r4, r0
 800f33c:	f7ff fff0 	bl	800f320 <__sfp_lock_acquire>
 800f340:	6a23      	ldr	r3, [r4, #32]
 800f342:	b11b      	cbz	r3, 800f34c <__sinit+0x14>
 800f344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f348:	f7ff bff0 	b.w	800f32c <__sfp_lock_release>
 800f34c:	4b04      	ldr	r3, [pc, #16]	; (800f360 <__sinit+0x28>)
 800f34e:	6223      	str	r3, [r4, #32]
 800f350:	4b04      	ldr	r3, [pc, #16]	; (800f364 <__sinit+0x2c>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d1f5      	bne.n	800f344 <__sinit+0xc>
 800f358:	f7ff ffc4 	bl	800f2e4 <global_stdio_init.part.0>
 800f35c:	e7f2      	b.n	800f344 <__sinit+0xc>
 800f35e:	bf00      	nop
 800f360:	0800f2a5 	.word	0x0800f2a5
 800f364:	200047bc 	.word	0x200047bc

0800f368 <_fwalk_sglue>:
 800f368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f36c:	4607      	mov	r7, r0
 800f36e:	4688      	mov	r8, r1
 800f370:	4614      	mov	r4, r2
 800f372:	2600      	movs	r6, #0
 800f374:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f378:	f1b9 0901 	subs.w	r9, r9, #1
 800f37c:	d505      	bpl.n	800f38a <_fwalk_sglue+0x22>
 800f37e:	6824      	ldr	r4, [r4, #0]
 800f380:	2c00      	cmp	r4, #0
 800f382:	d1f7      	bne.n	800f374 <_fwalk_sglue+0xc>
 800f384:	4630      	mov	r0, r6
 800f386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f38a:	89ab      	ldrh	r3, [r5, #12]
 800f38c:	2b01      	cmp	r3, #1
 800f38e:	d907      	bls.n	800f3a0 <_fwalk_sglue+0x38>
 800f390:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f394:	3301      	adds	r3, #1
 800f396:	d003      	beq.n	800f3a0 <_fwalk_sglue+0x38>
 800f398:	4629      	mov	r1, r5
 800f39a:	4638      	mov	r0, r7
 800f39c:	47c0      	blx	r8
 800f39e:	4306      	orrs	r6, r0
 800f3a0:	3568      	adds	r5, #104	; 0x68
 800f3a2:	e7e9      	b.n	800f378 <_fwalk_sglue+0x10>

0800f3a4 <siprintf>:
 800f3a4:	b40e      	push	{r1, r2, r3}
 800f3a6:	b500      	push	{lr}
 800f3a8:	b09c      	sub	sp, #112	; 0x70
 800f3aa:	ab1d      	add	r3, sp, #116	; 0x74
 800f3ac:	9002      	str	r0, [sp, #8]
 800f3ae:	9006      	str	r0, [sp, #24]
 800f3b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f3b4:	4809      	ldr	r0, [pc, #36]	; (800f3dc <siprintf+0x38>)
 800f3b6:	9107      	str	r1, [sp, #28]
 800f3b8:	9104      	str	r1, [sp, #16]
 800f3ba:	4909      	ldr	r1, [pc, #36]	; (800f3e0 <siprintf+0x3c>)
 800f3bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3c0:	9105      	str	r1, [sp, #20]
 800f3c2:	6800      	ldr	r0, [r0, #0]
 800f3c4:	9301      	str	r3, [sp, #4]
 800f3c6:	a902      	add	r1, sp, #8
 800f3c8:	f000 fab8 	bl	800f93c <_svfiprintf_r>
 800f3cc:	9b02      	ldr	r3, [sp, #8]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	701a      	strb	r2, [r3, #0]
 800f3d2:	b01c      	add	sp, #112	; 0x70
 800f3d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3d8:	b003      	add	sp, #12
 800f3da:	4770      	bx	lr
 800f3dc:	200001b4 	.word	0x200001b4
 800f3e0:	ffff0208 	.word	0xffff0208

0800f3e4 <__sread>:
 800f3e4:	b510      	push	{r4, lr}
 800f3e6:	460c      	mov	r4, r1
 800f3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3ec:	f000 f8d6 	bl	800f59c <_read_r>
 800f3f0:	2800      	cmp	r0, #0
 800f3f2:	bfab      	itete	ge
 800f3f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f3f6:	89a3      	ldrhlt	r3, [r4, #12]
 800f3f8:	181b      	addge	r3, r3, r0
 800f3fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f3fe:	bfac      	ite	ge
 800f400:	6563      	strge	r3, [r4, #84]	; 0x54
 800f402:	81a3      	strhlt	r3, [r4, #12]
 800f404:	bd10      	pop	{r4, pc}

0800f406 <__swrite>:
 800f406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f40a:	461f      	mov	r7, r3
 800f40c:	898b      	ldrh	r3, [r1, #12]
 800f40e:	05db      	lsls	r3, r3, #23
 800f410:	4605      	mov	r5, r0
 800f412:	460c      	mov	r4, r1
 800f414:	4616      	mov	r6, r2
 800f416:	d505      	bpl.n	800f424 <__swrite+0x1e>
 800f418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f41c:	2302      	movs	r3, #2
 800f41e:	2200      	movs	r2, #0
 800f420:	f000 f8aa 	bl	800f578 <_lseek_r>
 800f424:	89a3      	ldrh	r3, [r4, #12]
 800f426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f42a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f42e:	81a3      	strh	r3, [r4, #12]
 800f430:	4632      	mov	r2, r6
 800f432:	463b      	mov	r3, r7
 800f434:	4628      	mov	r0, r5
 800f436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f43a:	f000 b8c1 	b.w	800f5c0 <_write_r>

0800f43e <__sseek>:
 800f43e:	b510      	push	{r4, lr}
 800f440:	460c      	mov	r4, r1
 800f442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f446:	f000 f897 	bl	800f578 <_lseek_r>
 800f44a:	1c43      	adds	r3, r0, #1
 800f44c:	89a3      	ldrh	r3, [r4, #12]
 800f44e:	bf15      	itete	ne
 800f450:	6560      	strne	r0, [r4, #84]	; 0x54
 800f452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f45a:	81a3      	strheq	r3, [r4, #12]
 800f45c:	bf18      	it	ne
 800f45e:	81a3      	strhne	r3, [r4, #12]
 800f460:	bd10      	pop	{r4, pc}

0800f462 <__sclose>:
 800f462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f466:	f000 b877 	b.w	800f558 <_close_r>

0800f46a <memset>:
 800f46a:	4402      	add	r2, r0
 800f46c:	4603      	mov	r3, r0
 800f46e:	4293      	cmp	r3, r2
 800f470:	d100      	bne.n	800f474 <memset+0xa>
 800f472:	4770      	bx	lr
 800f474:	f803 1b01 	strb.w	r1, [r3], #1
 800f478:	e7f9      	b.n	800f46e <memset+0x4>

0800f47a <strncat>:
 800f47a:	b530      	push	{r4, r5, lr}
 800f47c:	4604      	mov	r4, r0
 800f47e:	7825      	ldrb	r5, [r4, #0]
 800f480:	4623      	mov	r3, r4
 800f482:	3401      	adds	r4, #1
 800f484:	2d00      	cmp	r5, #0
 800f486:	d1fa      	bne.n	800f47e <strncat+0x4>
 800f488:	3a01      	subs	r2, #1
 800f48a:	d304      	bcc.n	800f496 <strncat+0x1c>
 800f48c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f490:	f803 4b01 	strb.w	r4, [r3], #1
 800f494:	b904      	cbnz	r4, 800f498 <strncat+0x1e>
 800f496:	bd30      	pop	{r4, r5, pc}
 800f498:	2a00      	cmp	r2, #0
 800f49a:	d1f5      	bne.n	800f488 <strncat+0xe>
 800f49c:	701a      	strb	r2, [r3, #0]
 800f49e:	e7f3      	b.n	800f488 <strncat+0xe>

0800f4a0 <strtok>:
 800f4a0:	4b16      	ldr	r3, [pc, #88]	; (800f4fc <strtok+0x5c>)
 800f4a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f4a4:	681e      	ldr	r6, [r3, #0]
 800f4a6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800f4a8:	4605      	mov	r5, r0
 800f4aa:	b9fc      	cbnz	r4, 800f4ec <strtok+0x4c>
 800f4ac:	2050      	movs	r0, #80	; 0x50
 800f4ae:	9101      	str	r1, [sp, #4]
 800f4b0:	f000 f936 	bl	800f720 <malloc>
 800f4b4:	9901      	ldr	r1, [sp, #4]
 800f4b6:	6470      	str	r0, [r6, #68]	; 0x44
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	b920      	cbnz	r0, 800f4c6 <strtok+0x26>
 800f4bc:	4b10      	ldr	r3, [pc, #64]	; (800f500 <strtok+0x60>)
 800f4be:	4811      	ldr	r0, [pc, #68]	; (800f504 <strtok+0x64>)
 800f4c0:	215b      	movs	r1, #91	; 0x5b
 800f4c2:	f000 f8c3 	bl	800f64c <__assert_func>
 800f4c6:	e9c0 4400 	strd	r4, r4, [r0]
 800f4ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f4ce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f4d2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f4d6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f4da:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f4de:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f4e2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f4e6:	6184      	str	r4, [r0, #24]
 800f4e8:	7704      	strb	r4, [r0, #28]
 800f4ea:	6244      	str	r4, [r0, #36]	; 0x24
 800f4ec:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	4628      	mov	r0, r5
 800f4f2:	b002      	add	sp, #8
 800f4f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4f8:	f000 b806 	b.w	800f508 <__strtok_r>
 800f4fc:	200001b4 	.word	0x200001b4
 800f500:	08010ea5 	.word	0x08010ea5
 800f504:	08010ebc 	.word	0x08010ebc

0800f508 <__strtok_r>:
 800f508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f50a:	b908      	cbnz	r0, 800f510 <__strtok_r+0x8>
 800f50c:	6810      	ldr	r0, [r2, #0]
 800f50e:	b188      	cbz	r0, 800f534 <__strtok_r+0x2c>
 800f510:	4604      	mov	r4, r0
 800f512:	4620      	mov	r0, r4
 800f514:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f518:	460f      	mov	r7, r1
 800f51a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f51e:	b91e      	cbnz	r6, 800f528 <__strtok_r+0x20>
 800f520:	b965      	cbnz	r5, 800f53c <__strtok_r+0x34>
 800f522:	6015      	str	r5, [r2, #0]
 800f524:	4628      	mov	r0, r5
 800f526:	e005      	b.n	800f534 <__strtok_r+0x2c>
 800f528:	42b5      	cmp	r5, r6
 800f52a:	d1f6      	bne.n	800f51a <__strtok_r+0x12>
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d1f0      	bne.n	800f512 <__strtok_r+0xa>
 800f530:	6014      	str	r4, [r2, #0]
 800f532:	7003      	strb	r3, [r0, #0]
 800f534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f536:	461c      	mov	r4, r3
 800f538:	e00c      	b.n	800f554 <__strtok_r+0x4c>
 800f53a:	b915      	cbnz	r5, 800f542 <__strtok_r+0x3a>
 800f53c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f540:	460e      	mov	r6, r1
 800f542:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f546:	42ab      	cmp	r3, r5
 800f548:	d1f7      	bne.n	800f53a <__strtok_r+0x32>
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d0f3      	beq.n	800f536 <__strtok_r+0x2e>
 800f54e:	2300      	movs	r3, #0
 800f550:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f554:	6014      	str	r4, [r2, #0]
 800f556:	e7ed      	b.n	800f534 <__strtok_r+0x2c>

0800f558 <_close_r>:
 800f558:	b538      	push	{r3, r4, r5, lr}
 800f55a:	4d06      	ldr	r5, [pc, #24]	; (800f574 <_close_r+0x1c>)
 800f55c:	2300      	movs	r3, #0
 800f55e:	4604      	mov	r4, r0
 800f560:	4608      	mov	r0, r1
 800f562:	602b      	str	r3, [r5, #0]
 800f564:	f7f3 f9c5 	bl	80028f2 <_close>
 800f568:	1c43      	adds	r3, r0, #1
 800f56a:	d102      	bne.n	800f572 <_close_r+0x1a>
 800f56c:	682b      	ldr	r3, [r5, #0]
 800f56e:	b103      	cbz	r3, 800f572 <_close_r+0x1a>
 800f570:	6023      	str	r3, [r4, #0]
 800f572:	bd38      	pop	{r3, r4, r5, pc}
 800f574:	200047c0 	.word	0x200047c0

0800f578 <_lseek_r>:
 800f578:	b538      	push	{r3, r4, r5, lr}
 800f57a:	4d07      	ldr	r5, [pc, #28]	; (800f598 <_lseek_r+0x20>)
 800f57c:	4604      	mov	r4, r0
 800f57e:	4608      	mov	r0, r1
 800f580:	4611      	mov	r1, r2
 800f582:	2200      	movs	r2, #0
 800f584:	602a      	str	r2, [r5, #0]
 800f586:	461a      	mov	r2, r3
 800f588:	f7f3 f9da 	bl	8002940 <_lseek>
 800f58c:	1c43      	adds	r3, r0, #1
 800f58e:	d102      	bne.n	800f596 <_lseek_r+0x1e>
 800f590:	682b      	ldr	r3, [r5, #0]
 800f592:	b103      	cbz	r3, 800f596 <_lseek_r+0x1e>
 800f594:	6023      	str	r3, [r4, #0]
 800f596:	bd38      	pop	{r3, r4, r5, pc}
 800f598:	200047c0 	.word	0x200047c0

0800f59c <_read_r>:
 800f59c:	b538      	push	{r3, r4, r5, lr}
 800f59e:	4d07      	ldr	r5, [pc, #28]	; (800f5bc <_read_r+0x20>)
 800f5a0:	4604      	mov	r4, r0
 800f5a2:	4608      	mov	r0, r1
 800f5a4:	4611      	mov	r1, r2
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	602a      	str	r2, [r5, #0]
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	f7f3 f968 	bl	8002880 <_read>
 800f5b0:	1c43      	adds	r3, r0, #1
 800f5b2:	d102      	bne.n	800f5ba <_read_r+0x1e>
 800f5b4:	682b      	ldr	r3, [r5, #0]
 800f5b6:	b103      	cbz	r3, 800f5ba <_read_r+0x1e>
 800f5b8:	6023      	str	r3, [r4, #0]
 800f5ba:	bd38      	pop	{r3, r4, r5, pc}
 800f5bc:	200047c0 	.word	0x200047c0

0800f5c0 <_write_r>:
 800f5c0:	b538      	push	{r3, r4, r5, lr}
 800f5c2:	4d07      	ldr	r5, [pc, #28]	; (800f5e0 <_write_r+0x20>)
 800f5c4:	4604      	mov	r4, r0
 800f5c6:	4608      	mov	r0, r1
 800f5c8:	4611      	mov	r1, r2
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	602a      	str	r2, [r5, #0]
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	f7f3 f973 	bl	80028ba <_write>
 800f5d4:	1c43      	adds	r3, r0, #1
 800f5d6:	d102      	bne.n	800f5de <_write_r+0x1e>
 800f5d8:	682b      	ldr	r3, [r5, #0]
 800f5da:	b103      	cbz	r3, 800f5de <_write_r+0x1e>
 800f5dc:	6023      	str	r3, [r4, #0]
 800f5de:	bd38      	pop	{r3, r4, r5, pc}
 800f5e0:	200047c0 	.word	0x200047c0

0800f5e4 <__errno>:
 800f5e4:	4b01      	ldr	r3, [pc, #4]	; (800f5ec <__errno+0x8>)
 800f5e6:	6818      	ldr	r0, [r3, #0]
 800f5e8:	4770      	bx	lr
 800f5ea:	bf00      	nop
 800f5ec:	200001b4 	.word	0x200001b4

0800f5f0 <__libc_init_array>:
 800f5f0:	b570      	push	{r4, r5, r6, lr}
 800f5f2:	4d0d      	ldr	r5, [pc, #52]	; (800f628 <__libc_init_array+0x38>)
 800f5f4:	4c0d      	ldr	r4, [pc, #52]	; (800f62c <__libc_init_array+0x3c>)
 800f5f6:	1b64      	subs	r4, r4, r5
 800f5f8:	10a4      	asrs	r4, r4, #2
 800f5fa:	2600      	movs	r6, #0
 800f5fc:	42a6      	cmp	r6, r4
 800f5fe:	d109      	bne.n	800f614 <__libc_init_array+0x24>
 800f600:	4d0b      	ldr	r5, [pc, #44]	; (800f630 <__libc_init_array+0x40>)
 800f602:	4c0c      	ldr	r4, [pc, #48]	; (800f634 <__libc_init_array+0x44>)
 800f604:	f001 f800 	bl	8010608 <_init>
 800f608:	1b64      	subs	r4, r4, r5
 800f60a:	10a4      	asrs	r4, r4, #2
 800f60c:	2600      	movs	r6, #0
 800f60e:	42a6      	cmp	r6, r4
 800f610:	d105      	bne.n	800f61e <__libc_init_array+0x2e>
 800f612:	bd70      	pop	{r4, r5, r6, pc}
 800f614:	f855 3b04 	ldr.w	r3, [r5], #4
 800f618:	4798      	blx	r3
 800f61a:	3601      	adds	r6, #1
 800f61c:	e7ee      	b.n	800f5fc <__libc_init_array+0xc>
 800f61e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f622:	4798      	blx	r3
 800f624:	3601      	adds	r6, #1
 800f626:	e7f2      	b.n	800f60e <__libc_init_array+0x1e>
 800f628:	08010f90 	.word	0x08010f90
 800f62c:	08010f90 	.word	0x08010f90
 800f630:	08010f90 	.word	0x08010f90
 800f634:	08010f94 	.word	0x08010f94

0800f638 <__retarget_lock_acquire_recursive>:
 800f638:	4770      	bx	lr

0800f63a <__retarget_lock_release_recursive>:
 800f63a:	4770      	bx	lr

0800f63c <strcpy>:
 800f63c:	4603      	mov	r3, r0
 800f63e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f642:	f803 2b01 	strb.w	r2, [r3], #1
 800f646:	2a00      	cmp	r2, #0
 800f648:	d1f9      	bne.n	800f63e <strcpy+0x2>
 800f64a:	4770      	bx	lr

0800f64c <__assert_func>:
 800f64c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f64e:	4614      	mov	r4, r2
 800f650:	461a      	mov	r2, r3
 800f652:	4b09      	ldr	r3, [pc, #36]	; (800f678 <__assert_func+0x2c>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	4605      	mov	r5, r0
 800f658:	68d8      	ldr	r0, [r3, #12]
 800f65a:	b14c      	cbz	r4, 800f670 <__assert_func+0x24>
 800f65c:	4b07      	ldr	r3, [pc, #28]	; (800f67c <__assert_func+0x30>)
 800f65e:	9100      	str	r1, [sp, #0]
 800f660:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f664:	4906      	ldr	r1, [pc, #24]	; (800f680 <__assert_func+0x34>)
 800f666:	462b      	mov	r3, r5
 800f668:	f000 fca4 	bl	800ffb4 <fiprintf>
 800f66c:	f000 fcec 	bl	8010048 <abort>
 800f670:	4b04      	ldr	r3, [pc, #16]	; (800f684 <__assert_func+0x38>)
 800f672:	461c      	mov	r4, r3
 800f674:	e7f3      	b.n	800f65e <__assert_func+0x12>
 800f676:	bf00      	nop
 800f678:	200001b4 	.word	0x200001b4
 800f67c:	08010f16 	.word	0x08010f16
 800f680:	08010f23 	.word	0x08010f23
 800f684:	08010f51 	.word	0x08010f51

0800f688 <_free_r>:
 800f688:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f68a:	2900      	cmp	r1, #0
 800f68c:	d044      	beq.n	800f718 <_free_r+0x90>
 800f68e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f692:	9001      	str	r0, [sp, #4]
 800f694:	2b00      	cmp	r3, #0
 800f696:	f1a1 0404 	sub.w	r4, r1, #4
 800f69a:	bfb8      	it	lt
 800f69c:	18e4      	addlt	r4, r4, r3
 800f69e:	f000 f8e7 	bl	800f870 <__malloc_lock>
 800f6a2:	4a1e      	ldr	r2, [pc, #120]	; (800f71c <_free_r+0x94>)
 800f6a4:	9801      	ldr	r0, [sp, #4]
 800f6a6:	6813      	ldr	r3, [r2, #0]
 800f6a8:	b933      	cbnz	r3, 800f6b8 <_free_r+0x30>
 800f6aa:	6063      	str	r3, [r4, #4]
 800f6ac:	6014      	str	r4, [r2, #0]
 800f6ae:	b003      	add	sp, #12
 800f6b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6b4:	f000 b8e2 	b.w	800f87c <__malloc_unlock>
 800f6b8:	42a3      	cmp	r3, r4
 800f6ba:	d908      	bls.n	800f6ce <_free_r+0x46>
 800f6bc:	6825      	ldr	r5, [r4, #0]
 800f6be:	1961      	adds	r1, r4, r5
 800f6c0:	428b      	cmp	r3, r1
 800f6c2:	bf01      	itttt	eq
 800f6c4:	6819      	ldreq	r1, [r3, #0]
 800f6c6:	685b      	ldreq	r3, [r3, #4]
 800f6c8:	1949      	addeq	r1, r1, r5
 800f6ca:	6021      	streq	r1, [r4, #0]
 800f6cc:	e7ed      	b.n	800f6aa <_free_r+0x22>
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	685b      	ldr	r3, [r3, #4]
 800f6d2:	b10b      	cbz	r3, 800f6d8 <_free_r+0x50>
 800f6d4:	42a3      	cmp	r3, r4
 800f6d6:	d9fa      	bls.n	800f6ce <_free_r+0x46>
 800f6d8:	6811      	ldr	r1, [r2, #0]
 800f6da:	1855      	adds	r5, r2, r1
 800f6dc:	42a5      	cmp	r5, r4
 800f6de:	d10b      	bne.n	800f6f8 <_free_r+0x70>
 800f6e0:	6824      	ldr	r4, [r4, #0]
 800f6e2:	4421      	add	r1, r4
 800f6e4:	1854      	adds	r4, r2, r1
 800f6e6:	42a3      	cmp	r3, r4
 800f6e8:	6011      	str	r1, [r2, #0]
 800f6ea:	d1e0      	bne.n	800f6ae <_free_r+0x26>
 800f6ec:	681c      	ldr	r4, [r3, #0]
 800f6ee:	685b      	ldr	r3, [r3, #4]
 800f6f0:	6053      	str	r3, [r2, #4]
 800f6f2:	440c      	add	r4, r1
 800f6f4:	6014      	str	r4, [r2, #0]
 800f6f6:	e7da      	b.n	800f6ae <_free_r+0x26>
 800f6f8:	d902      	bls.n	800f700 <_free_r+0x78>
 800f6fa:	230c      	movs	r3, #12
 800f6fc:	6003      	str	r3, [r0, #0]
 800f6fe:	e7d6      	b.n	800f6ae <_free_r+0x26>
 800f700:	6825      	ldr	r5, [r4, #0]
 800f702:	1961      	adds	r1, r4, r5
 800f704:	428b      	cmp	r3, r1
 800f706:	bf04      	itt	eq
 800f708:	6819      	ldreq	r1, [r3, #0]
 800f70a:	685b      	ldreq	r3, [r3, #4]
 800f70c:	6063      	str	r3, [r4, #4]
 800f70e:	bf04      	itt	eq
 800f710:	1949      	addeq	r1, r1, r5
 800f712:	6021      	streq	r1, [r4, #0]
 800f714:	6054      	str	r4, [r2, #4]
 800f716:	e7ca      	b.n	800f6ae <_free_r+0x26>
 800f718:	b003      	add	sp, #12
 800f71a:	bd30      	pop	{r4, r5, pc}
 800f71c:	200047c8 	.word	0x200047c8

0800f720 <malloc>:
 800f720:	4b02      	ldr	r3, [pc, #8]	; (800f72c <malloc+0xc>)
 800f722:	4601      	mov	r1, r0
 800f724:	6818      	ldr	r0, [r3, #0]
 800f726:	f000 b823 	b.w	800f770 <_malloc_r>
 800f72a:	bf00      	nop
 800f72c:	200001b4 	.word	0x200001b4

0800f730 <sbrk_aligned>:
 800f730:	b570      	push	{r4, r5, r6, lr}
 800f732:	4e0e      	ldr	r6, [pc, #56]	; (800f76c <sbrk_aligned+0x3c>)
 800f734:	460c      	mov	r4, r1
 800f736:	6831      	ldr	r1, [r6, #0]
 800f738:	4605      	mov	r5, r0
 800f73a:	b911      	cbnz	r1, 800f742 <sbrk_aligned+0x12>
 800f73c:	f000 fc66 	bl	801000c <_sbrk_r>
 800f740:	6030      	str	r0, [r6, #0]
 800f742:	4621      	mov	r1, r4
 800f744:	4628      	mov	r0, r5
 800f746:	f000 fc61 	bl	801000c <_sbrk_r>
 800f74a:	1c43      	adds	r3, r0, #1
 800f74c:	d00a      	beq.n	800f764 <sbrk_aligned+0x34>
 800f74e:	1cc4      	adds	r4, r0, #3
 800f750:	f024 0403 	bic.w	r4, r4, #3
 800f754:	42a0      	cmp	r0, r4
 800f756:	d007      	beq.n	800f768 <sbrk_aligned+0x38>
 800f758:	1a21      	subs	r1, r4, r0
 800f75a:	4628      	mov	r0, r5
 800f75c:	f000 fc56 	bl	801000c <_sbrk_r>
 800f760:	3001      	adds	r0, #1
 800f762:	d101      	bne.n	800f768 <sbrk_aligned+0x38>
 800f764:	f04f 34ff 	mov.w	r4, #4294967295
 800f768:	4620      	mov	r0, r4
 800f76a:	bd70      	pop	{r4, r5, r6, pc}
 800f76c:	200047cc 	.word	0x200047cc

0800f770 <_malloc_r>:
 800f770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f774:	1ccd      	adds	r5, r1, #3
 800f776:	f025 0503 	bic.w	r5, r5, #3
 800f77a:	3508      	adds	r5, #8
 800f77c:	2d0c      	cmp	r5, #12
 800f77e:	bf38      	it	cc
 800f780:	250c      	movcc	r5, #12
 800f782:	2d00      	cmp	r5, #0
 800f784:	4607      	mov	r7, r0
 800f786:	db01      	blt.n	800f78c <_malloc_r+0x1c>
 800f788:	42a9      	cmp	r1, r5
 800f78a:	d905      	bls.n	800f798 <_malloc_r+0x28>
 800f78c:	230c      	movs	r3, #12
 800f78e:	603b      	str	r3, [r7, #0]
 800f790:	2600      	movs	r6, #0
 800f792:	4630      	mov	r0, r6
 800f794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f798:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f86c <_malloc_r+0xfc>
 800f79c:	f000 f868 	bl	800f870 <__malloc_lock>
 800f7a0:	f8d8 3000 	ldr.w	r3, [r8]
 800f7a4:	461c      	mov	r4, r3
 800f7a6:	bb5c      	cbnz	r4, 800f800 <_malloc_r+0x90>
 800f7a8:	4629      	mov	r1, r5
 800f7aa:	4638      	mov	r0, r7
 800f7ac:	f7ff ffc0 	bl	800f730 <sbrk_aligned>
 800f7b0:	1c43      	adds	r3, r0, #1
 800f7b2:	4604      	mov	r4, r0
 800f7b4:	d155      	bne.n	800f862 <_malloc_r+0xf2>
 800f7b6:	f8d8 4000 	ldr.w	r4, [r8]
 800f7ba:	4626      	mov	r6, r4
 800f7bc:	2e00      	cmp	r6, #0
 800f7be:	d145      	bne.n	800f84c <_malloc_r+0xdc>
 800f7c0:	2c00      	cmp	r4, #0
 800f7c2:	d048      	beq.n	800f856 <_malloc_r+0xe6>
 800f7c4:	6823      	ldr	r3, [r4, #0]
 800f7c6:	4631      	mov	r1, r6
 800f7c8:	4638      	mov	r0, r7
 800f7ca:	eb04 0903 	add.w	r9, r4, r3
 800f7ce:	f000 fc1d 	bl	801000c <_sbrk_r>
 800f7d2:	4581      	cmp	r9, r0
 800f7d4:	d13f      	bne.n	800f856 <_malloc_r+0xe6>
 800f7d6:	6821      	ldr	r1, [r4, #0]
 800f7d8:	1a6d      	subs	r5, r5, r1
 800f7da:	4629      	mov	r1, r5
 800f7dc:	4638      	mov	r0, r7
 800f7de:	f7ff ffa7 	bl	800f730 <sbrk_aligned>
 800f7e2:	3001      	adds	r0, #1
 800f7e4:	d037      	beq.n	800f856 <_malloc_r+0xe6>
 800f7e6:	6823      	ldr	r3, [r4, #0]
 800f7e8:	442b      	add	r3, r5
 800f7ea:	6023      	str	r3, [r4, #0]
 800f7ec:	f8d8 3000 	ldr.w	r3, [r8]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d038      	beq.n	800f866 <_malloc_r+0xf6>
 800f7f4:	685a      	ldr	r2, [r3, #4]
 800f7f6:	42a2      	cmp	r2, r4
 800f7f8:	d12b      	bne.n	800f852 <_malloc_r+0xe2>
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	605a      	str	r2, [r3, #4]
 800f7fe:	e00f      	b.n	800f820 <_malloc_r+0xb0>
 800f800:	6822      	ldr	r2, [r4, #0]
 800f802:	1b52      	subs	r2, r2, r5
 800f804:	d41f      	bmi.n	800f846 <_malloc_r+0xd6>
 800f806:	2a0b      	cmp	r2, #11
 800f808:	d917      	bls.n	800f83a <_malloc_r+0xca>
 800f80a:	1961      	adds	r1, r4, r5
 800f80c:	42a3      	cmp	r3, r4
 800f80e:	6025      	str	r5, [r4, #0]
 800f810:	bf18      	it	ne
 800f812:	6059      	strne	r1, [r3, #4]
 800f814:	6863      	ldr	r3, [r4, #4]
 800f816:	bf08      	it	eq
 800f818:	f8c8 1000 	streq.w	r1, [r8]
 800f81c:	5162      	str	r2, [r4, r5]
 800f81e:	604b      	str	r3, [r1, #4]
 800f820:	4638      	mov	r0, r7
 800f822:	f104 060b 	add.w	r6, r4, #11
 800f826:	f000 f829 	bl	800f87c <__malloc_unlock>
 800f82a:	f026 0607 	bic.w	r6, r6, #7
 800f82e:	1d23      	adds	r3, r4, #4
 800f830:	1af2      	subs	r2, r6, r3
 800f832:	d0ae      	beq.n	800f792 <_malloc_r+0x22>
 800f834:	1b9b      	subs	r3, r3, r6
 800f836:	50a3      	str	r3, [r4, r2]
 800f838:	e7ab      	b.n	800f792 <_malloc_r+0x22>
 800f83a:	42a3      	cmp	r3, r4
 800f83c:	6862      	ldr	r2, [r4, #4]
 800f83e:	d1dd      	bne.n	800f7fc <_malloc_r+0x8c>
 800f840:	f8c8 2000 	str.w	r2, [r8]
 800f844:	e7ec      	b.n	800f820 <_malloc_r+0xb0>
 800f846:	4623      	mov	r3, r4
 800f848:	6864      	ldr	r4, [r4, #4]
 800f84a:	e7ac      	b.n	800f7a6 <_malloc_r+0x36>
 800f84c:	4634      	mov	r4, r6
 800f84e:	6876      	ldr	r6, [r6, #4]
 800f850:	e7b4      	b.n	800f7bc <_malloc_r+0x4c>
 800f852:	4613      	mov	r3, r2
 800f854:	e7cc      	b.n	800f7f0 <_malloc_r+0x80>
 800f856:	230c      	movs	r3, #12
 800f858:	603b      	str	r3, [r7, #0]
 800f85a:	4638      	mov	r0, r7
 800f85c:	f000 f80e 	bl	800f87c <__malloc_unlock>
 800f860:	e797      	b.n	800f792 <_malloc_r+0x22>
 800f862:	6025      	str	r5, [r4, #0]
 800f864:	e7dc      	b.n	800f820 <_malloc_r+0xb0>
 800f866:	605b      	str	r3, [r3, #4]
 800f868:	deff      	udf	#255	; 0xff
 800f86a:	bf00      	nop
 800f86c:	200047c8 	.word	0x200047c8

0800f870 <__malloc_lock>:
 800f870:	4801      	ldr	r0, [pc, #4]	; (800f878 <__malloc_lock+0x8>)
 800f872:	f7ff bee1 	b.w	800f638 <__retarget_lock_acquire_recursive>
 800f876:	bf00      	nop
 800f878:	200047c4 	.word	0x200047c4

0800f87c <__malloc_unlock>:
 800f87c:	4801      	ldr	r0, [pc, #4]	; (800f884 <__malloc_unlock+0x8>)
 800f87e:	f7ff bedc 	b.w	800f63a <__retarget_lock_release_recursive>
 800f882:	bf00      	nop
 800f884:	200047c4 	.word	0x200047c4

0800f888 <__ssputs_r>:
 800f888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f88c:	688e      	ldr	r6, [r1, #8]
 800f88e:	461f      	mov	r7, r3
 800f890:	42be      	cmp	r6, r7
 800f892:	680b      	ldr	r3, [r1, #0]
 800f894:	4682      	mov	sl, r0
 800f896:	460c      	mov	r4, r1
 800f898:	4690      	mov	r8, r2
 800f89a:	d82c      	bhi.n	800f8f6 <__ssputs_r+0x6e>
 800f89c:	898a      	ldrh	r2, [r1, #12]
 800f89e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f8a2:	d026      	beq.n	800f8f2 <__ssputs_r+0x6a>
 800f8a4:	6965      	ldr	r5, [r4, #20]
 800f8a6:	6909      	ldr	r1, [r1, #16]
 800f8a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f8ac:	eba3 0901 	sub.w	r9, r3, r1
 800f8b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f8b4:	1c7b      	adds	r3, r7, #1
 800f8b6:	444b      	add	r3, r9
 800f8b8:	106d      	asrs	r5, r5, #1
 800f8ba:	429d      	cmp	r5, r3
 800f8bc:	bf38      	it	cc
 800f8be:	461d      	movcc	r5, r3
 800f8c0:	0553      	lsls	r3, r2, #21
 800f8c2:	d527      	bpl.n	800f914 <__ssputs_r+0x8c>
 800f8c4:	4629      	mov	r1, r5
 800f8c6:	f7ff ff53 	bl	800f770 <_malloc_r>
 800f8ca:	4606      	mov	r6, r0
 800f8cc:	b360      	cbz	r0, 800f928 <__ssputs_r+0xa0>
 800f8ce:	6921      	ldr	r1, [r4, #16]
 800f8d0:	464a      	mov	r2, r9
 800f8d2:	f000 fbab 	bl	801002c <memcpy>
 800f8d6:	89a3      	ldrh	r3, [r4, #12]
 800f8d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f8dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8e0:	81a3      	strh	r3, [r4, #12]
 800f8e2:	6126      	str	r6, [r4, #16]
 800f8e4:	6165      	str	r5, [r4, #20]
 800f8e6:	444e      	add	r6, r9
 800f8e8:	eba5 0509 	sub.w	r5, r5, r9
 800f8ec:	6026      	str	r6, [r4, #0]
 800f8ee:	60a5      	str	r5, [r4, #8]
 800f8f0:	463e      	mov	r6, r7
 800f8f2:	42be      	cmp	r6, r7
 800f8f4:	d900      	bls.n	800f8f8 <__ssputs_r+0x70>
 800f8f6:	463e      	mov	r6, r7
 800f8f8:	6820      	ldr	r0, [r4, #0]
 800f8fa:	4632      	mov	r2, r6
 800f8fc:	4641      	mov	r1, r8
 800f8fe:	f000 fb6b 	bl	800ffd8 <memmove>
 800f902:	68a3      	ldr	r3, [r4, #8]
 800f904:	1b9b      	subs	r3, r3, r6
 800f906:	60a3      	str	r3, [r4, #8]
 800f908:	6823      	ldr	r3, [r4, #0]
 800f90a:	4433      	add	r3, r6
 800f90c:	6023      	str	r3, [r4, #0]
 800f90e:	2000      	movs	r0, #0
 800f910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f914:	462a      	mov	r2, r5
 800f916:	f000 fb9e 	bl	8010056 <_realloc_r>
 800f91a:	4606      	mov	r6, r0
 800f91c:	2800      	cmp	r0, #0
 800f91e:	d1e0      	bne.n	800f8e2 <__ssputs_r+0x5a>
 800f920:	6921      	ldr	r1, [r4, #16]
 800f922:	4650      	mov	r0, sl
 800f924:	f7ff feb0 	bl	800f688 <_free_r>
 800f928:	230c      	movs	r3, #12
 800f92a:	f8ca 3000 	str.w	r3, [sl]
 800f92e:	89a3      	ldrh	r3, [r4, #12]
 800f930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f934:	81a3      	strh	r3, [r4, #12]
 800f936:	f04f 30ff 	mov.w	r0, #4294967295
 800f93a:	e7e9      	b.n	800f910 <__ssputs_r+0x88>

0800f93c <_svfiprintf_r>:
 800f93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f940:	4698      	mov	r8, r3
 800f942:	898b      	ldrh	r3, [r1, #12]
 800f944:	061b      	lsls	r3, r3, #24
 800f946:	b09d      	sub	sp, #116	; 0x74
 800f948:	4607      	mov	r7, r0
 800f94a:	460d      	mov	r5, r1
 800f94c:	4614      	mov	r4, r2
 800f94e:	d50e      	bpl.n	800f96e <_svfiprintf_r+0x32>
 800f950:	690b      	ldr	r3, [r1, #16]
 800f952:	b963      	cbnz	r3, 800f96e <_svfiprintf_r+0x32>
 800f954:	2140      	movs	r1, #64	; 0x40
 800f956:	f7ff ff0b 	bl	800f770 <_malloc_r>
 800f95a:	6028      	str	r0, [r5, #0]
 800f95c:	6128      	str	r0, [r5, #16]
 800f95e:	b920      	cbnz	r0, 800f96a <_svfiprintf_r+0x2e>
 800f960:	230c      	movs	r3, #12
 800f962:	603b      	str	r3, [r7, #0]
 800f964:	f04f 30ff 	mov.w	r0, #4294967295
 800f968:	e0d0      	b.n	800fb0c <_svfiprintf_r+0x1d0>
 800f96a:	2340      	movs	r3, #64	; 0x40
 800f96c:	616b      	str	r3, [r5, #20]
 800f96e:	2300      	movs	r3, #0
 800f970:	9309      	str	r3, [sp, #36]	; 0x24
 800f972:	2320      	movs	r3, #32
 800f974:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f978:	f8cd 800c 	str.w	r8, [sp, #12]
 800f97c:	2330      	movs	r3, #48	; 0x30
 800f97e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fb24 <_svfiprintf_r+0x1e8>
 800f982:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f986:	f04f 0901 	mov.w	r9, #1
 800f98a:	4623      	mov	r3, r4
 800f98c:	469a      	mov	sl, r3
 800f98e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f992:	b10a      	cbz	r2, 800f998 <_svfiprintf_r+0x5c>
 800f994:	2a25      	cmp	r2, #37	; 0x25
 800f996:	d1f9      	bne.n	800f98c <_svfiprintf_r+0x50>
 800f998:	ebba 0b04 	subs.w	fp, sl, r4
 800f99c:	d00b      	beq.n	800f9b6 <_svfiprintf_r+0x7a>
 800f99e:	465b      	mov	r3, fp
 800f9a0:	4622      	mov	r2, r4
 800f9a2:	4629      	mov	r1, r5
 800f9a4:	4638      	mov	r0, r7
 800f9a6:	f7ff ff6f 	bl	800f888 <__ssputs_r>
 800f9aa:	3001      	adds	r0, #1
 800f9ac:	f000 80a9 	beq.w	800fb02 <_svfiprintf_r+0x1c6>
 800f9b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9b2:	445a      	add	r2, fp
 800f9b4:	9209      	str	r2, [sp, #36]	; 0x24
 800f9b6:	f89a 3000 	ldrb.w	r3, [sl]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	f000 80a1 	beq.w	800fb02 <_svfiprintf_r+0x1c6>
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	f04f 32ff 	mov.w	r2, #4294967295
 800f9c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9ca:	f10a 0a01 	add.w	sl, sl, #1
 800f9ce:	9304      	str	r3, [sp, #16]
 800f9d0:	9307      	str	r3, [sp, #28]
 800f9d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f9d6:	931a      	str	r3, [sp, #104]	; 0x68
 800f9d8:	4654      	mov	r4, sl
 800f9da:	2205      	movs	r2, #5
 800f9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9e0:	4850      	ldr	r0, [pc, #320]	; (800fb24 <_svfiprintf_r+0x1e8>)
 800f9e2:	f7f0 fc15 	bl	8000210 <memchr>
 800f9e6:	9a04      	ldr	r2, [sp, #16]
 800f9e8:	b9d8      	cbnz	r0, 800fa22 <_svfiprintf_r+0xe6>
 800f9ea:	06d0      	lsls	r0, r2, #27
 800f9ec:	bf44      	itt	mi
 800f9ee:	2320      	movmi	r3, #32
 800f9f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9f4:	0711      	lsls	r1, r2, #28
 800f9f6:	bf44      	itt	mi
 800f9f8:	232b      	movmi	r3, #43	; 0x2b
 800f9fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9fe:	f89a 3000 	ldrb.w	r3, [sl]
 800fa02:	2b2a      	cmp	r3, #42	; 0x2a
 800fa04:	d015      	beq.n	800fa32 <_svfiprintf_r+0xf6>
 800fa06:	9a07      	ldr	r2, [sp, #28]
 800fa08:	4654      	mov	r4, sl
 800fa0a:	2000      	movs	r0, #0
 800fa0c:	f04f 0c0a 	mov.w	ip, #10
 800fa10:	4621      	mov	r1, r4
 800fa12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa16:	3b30      	subs	r3, #48	; 0x30
 800fa18:	2b09      	cmp	r3, #9
 800fa1a:	d94d      	bls.n	800fab8 <_svfiprintf_r+0x17c>
 800fa1c:	b1b0      	cbz	r0, 800fa4c <_svfiprintf_r+0x110>
 800fa1e:	9207      	str	r2, [sp, #28]
 800fa20:	e014      	b.n	800fa4c <_svfiprintf_r+0x110>
 800fa22:	eba0 0308 	sub.w	r3, r0, r8
 800fa26:	fa09 f303 	lsl.w	r3, r9, r3
 800fa2a:	4313      	orrs	r3, r2
 800fa2c:	9304      	str	r3, [sp, #16]
 800fa2e:	46a2      	mov	sl, r4
 800fa30:	e7d2      	b.n	800f9d8 <_svfiprintf_r+0x9c>
 800fa32:	9b03      	ldr	r3, [sp, #12]
 800fa34:	1d19      	adds	r1, r3, #4
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	9103      	str	r1, [sp, #12]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	bfbb      	ittet	lt
 800fa3e:	425b      	neglt	r3, r3
 800fa40:	f042 0202 	orrlt.w	r2, r2, #2
 800fa44:	9307      	strge	r3, [sp, #28]
 800fa46:	9307      	strlt	r3, [sp, #28]
 800fa48:	bfb8      	it	lt
 800fa4a:	9204      	strlt	r2, [sp, #16]
 800fa4c:	7823      	ldrb	r3, [r4, #0]
 800fa4e:	2b2e      	cmp	r3, #46	; 0x2e
 800fa50:	d10c      	bne.n	800fa6c <_svfiprintf_r+0x130>
 800fa52:	7863      	ldrb	r3, [r4, #1]
 800fa54:	2b2a      	cmp	r3, #42	; 0x2a
 800fa56:	d134      	bne.n	800fac2 <_svfiprintf_r+0x186>
 800fa58:	9b03      	ldr	r3, [sp, #12]
 800fa5a:	1d1a      	adds	r2, r3, #4
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	9203      	str	r2, [sp, #12]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	bfb8      	it	lt
 800fa64:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa68:	3402      	adds	r4, #2
 800fa6a:	9305      	str	r3, [sp, #20]
 800fa6c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fb34 <_svfiprintf_r+0x1f8>
 800fa70:	7821      	ldrb	r1, [r4, #0]
 800fa72:	2203      	movs	r2, #3
 800fa74:	4650      	mov	r0, sl
 800fa76:	f7f0 fbcb 	bl	8000210 <memchr>
 800fa7a:	b138      	cbz	r0, 800fa8c <_svfiprintf_r+0x150>
 800fa7c:	9b04      	ldr	r3, [sp, #16]
 800fa7e:	eba0 000a 	sub.w	r0, r0, sl
 800fa82:	2240      	movs	r2, #64	; 0x40
 800fa84:	4082      	lsls	r2, r0
 800fa86:	4313      	orrs	r3, r2
 800fa88:	3401      	adds	r4, #1
 800fa8a:	9304      	str	r3, [sp, #16]
 800fa8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa90:	4825      	ldr	r0, [pc, #148]	; (800fb28 <_svfiprintf_r+0x1ec>)
 800fa92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa96:	2206      	movs	r2, #6
 800fa98:	f7f0 fbba 	bl	8000210 <memchr>
 800fa9c:	2800      	cmp	r0, #0
 800fa9e:	d038      	beq.n	800fb12 <_svfiprintf_r+0x1d6>
 800faa0:	4b22      	ldr	r3, [pc, #136]	; (800fb2c <_svfiprintf_r+0x1f0>)
 800faa2:	bb1b      	cbnz	r3, 800faec <_svfiprintf_r+0x1b0>
 800faa4:	9b03      	ldr	r3, [sp, #12]
 800faa6:	3307      	adds	r3, #7
 800faa8:	f023 0307 	bic.w	r3, r3, #7
 800faac:	3308      	adds	r3, #8
 800faae:	9303      	str	r3, [sp, #12]
 800fab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fab2:	4433      	add	r3, r6
 800fab4:	9309      	str	r3, [sp, #36]	; 0x24
 800fab6:	e768      	b.n	800f98a <_svfiprintf_r+0x4e>
 800fab8:	fb0c 3202 	mla	r2, ip, r2, r3
 800fabc:	460c      	mov	r4, r1
 800fabe:	2001      	movs	r0, #1
 800fac0:	e7a6      	b.n	800fa10 <_svfiprintf_r+0xd4>
 800fac2:	2300      	movs	r3, #0
 800fac4:	3401      	adds	r4, #1
 800fac6:	9305      	str	r3, [sp, #20]
 800fac8:	4619      	mov	r1, r3
 800faca:	f04f 0c0a 	mov.w	ip, #10
 800face:	4620      	mov	r0, r4
 800fad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fad4:	3a30      	subs	r2, #48	; 0x30
 800fad6:	2a09      	cmp	r2, #9
 800fad8:	d903      	bls.n	800fae2 <_svfiprintf_r+0x1a6>
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d0c6      	beq.n	800fa6c <_svfiprintf_r+0x130>
 800fade:	9105      	str	r1, [sp, #20]
 800fae0:	e7c4      	b.n	800fa6c <_svfiprintf_r+0x130>
 800fae2:	fb0c 2101 	mla	r1, ip, r1, r2
 800fae6:	4604      	mov	r4, r0
 800fae8:	2301      	movs	r3, #1
 800faea:	e7f0      	b.n	800face <_svfiprintf_r+0x192>
 800faec:	ab03      	add	r3, sp, #12
 800faee:	9300      	str	r3, [sp, #0]
 800faf0:	462a      	mov	r2, r5
 800faf2:	4b0f      	ldr	r3, [pc, #60]	; (800fb30 <_svfiprintf_r+0x1f4>)
 800faf4:	a904      	add	r1, sp, #16
 800faf6:	4638      	mov	r0, r7
 800faf8:	f3af 8000 	nop.w
 800fafc:	1c42      	adds	r2, r0, #1
 800fafe:	4606      	mov	r6, r0
 800fb00:	d1d6      	bne.n	800fab0 <_svfiprintf_r+0x174>
 800fb02:	89ab      	ldrh	r3, [r5, #12]
 800fb04:	065b      	lsls	r3, r3, #25
 800fb06:	f53f af2d 	bmi.w	800f964 <_svfiprintf_r+0x28>
 800fb0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb0c:	b01d      	add	sp, #116	; 0x74
 800fb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb12:	ab03      	add	r3, sp, #12
 800fb14:	9300      	str	r3, [sp, #0]
 800fb16:	462a      	mov	r2, r5
 800fb18:	4b05      	ldr	r3, [pc, #20]	; (800fb30 <_svfiprintf_r+0x1f4>)
 800fb1a:	a904      	add	r1, sp, #16
 800fb1c:	4638      	mov	r0, r7
 800fb1e:	f000 f879 	bl	800fc14 <_printf_i>
 800fb22:	e7eb      	b.n	800fafc <_svfiprintf_r+0x1c0>
 800fb24:	08010f52 	.word	0x08010f52
 800fb28:	08010f5c 	.word	0x08010f5c
 800fb2c:	00000000 	.word	0x00000000
 800fb30:	0800f889 	.word	0x0800f889
 800fb34:	08010f58 	.word	0x08010f58

0800fb38 <_printf_common>:
 800fb38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb3c:	4616      	mov	r6, r2
 800fb3e:	4699      	mov	r9, r3
 800fb40:	688a      	ldr	r2, [r1, #8]
 800fb42:	690b      	ldr	r3, [r1, #16]
 800fb44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	bfb8      	it	lt
 800fb4c:	4613      	movlt	r3, r2
 800fb4e:	6033      	str	r3, [r6, #0]
 800fb50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb54:	4607      	mov	r7, r0
 800fb56:	460c      	mov	r4, r1
 800fb58:	b10a      	cbz	r2, 800fb5e <_printf_common+0x26>
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	6033      	str	r3, [r6, #0]
 800fb5e:	6823      	ldr	r3, [r4, #0]
 800fb60:	0699      	lsls	r1, r3, #26
 800fb62:	bf42      	ittt	mi
 800fb64:	6833      	ldrmi	r3, [r6, #0]
 800fb66:	3302      	addmi	r3, #2
 800fb68:	6033      	strmi	r3, [r6, #0]
 800fb6a:	6825      	ldr	r5, [r4, #0]
 800fb6c:	f015 0506 	ands.w	r5, r5, #6
 800fb70:	d106      	bne.n	800fb80 <_printf_common+0x48>
 800fb72:	f104 0a19 	add.w	sl, r4, #25
 800fb76:	68e3      	ldr	r3, [r4, #12]
 800fb78:	6832      	ldr	r2, [r6, #0]
 800fb7a:	1a9b      	subs	r3, r3, r2
 800fb7c:	42ab      	cmp	r3, r5
 800fb7e:	dc26      	bgt.n	800fbce <_printf_common+0x96>
 800fb80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb84:	1e13      	subs	r3, r2, #0
 800fb86:	6822      	ldr	r2, [r4, #0]
 800fb88:	bf18      	it	ne
 800fb8a:	2301      	movne	r3, #1
 800fb8c:	0692      	lsls	r2, r2, #26
 800fb8e:	d42b      	bmi.n	800fbe8 <_printf_common+0xb0>
 800fb90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb94:	4649      	mov	r1, r9
 800fb96:	4638      	mov	r0, r7
 800fb98:	47c0      	blx	r8
 800fb9a:	3001      	adds	r0, #1
 800fb9c:	d01e      	beq.n	800fbdc <_printf_common+0xa4>
 800fb9e:	6823      	ldr	r3, [r4, #0]
 800fba0:	6922      	ldr	r2, [r4, #16]
 800fba2:	f003 0306 	and.w	r3, r3, #6
 800fba6:	2b04      	cmp	r3, #4
 800fba8:	bf02      	ittt	eq
 800fbaa:	68e5      	ldreq	r5, [r4, #12]
 800fbac:	6833      	ldreq	r3, [r6, #0]
 800fbae:	1aed      	subeq	r5, r5, r3
 800fbb0:	68a3      	ldr	r3, [r4, #8]
 800fbb2:	bf0c      	ite	eq
 800fbb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbb8:	2500      	movne	r5, #0
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	bfc4      	itt	gt
 800fbbe:	1a9b      	subgt	r3, r3, r2
 800fbc0:	18ed      	addgt	r5, r5, r3
 800fbc2:	2600      	movs	r6, #0
 800fbc4:	341a      	adds	r4, #26
 800fbc6:	42b5      	cmp	r5, r6
 800fbc8:	d11a      	bne.n	800fc00 <_printf_common+0xc8>
 800fbca:	2000      	movs	r0, #0
 800fbcc:	e008      	b.n	800fbe0 <_printf_common+0xa8>
 800fbce:	2301      	movs	r3, #1
 800fbd0:	4652      	mov	r2, sl
 800fbd2:	4649      	mov	r1, r9
 800fbd4:	4638      	mov	r0, r7
 800fbd6:	47c0      	blx	r8
 800fbd8:	3001      	adds	r0, #1
 800fbda:	d103      	bne.n	800fbe4 <_printf_common+0xac>
 800fbdc:	f04f 30ff 	mov.w	r0, #4294967295
 800fbe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbe4:	3501      	adds	r5, #1
 800fbe6:	e7c6      	b.n	800fb76 <_printf_common+0x3e>
 800fbe8:	18e1      	adds	r1, r4, r3
 800fbea:	1c5a      	adds	r2, r3, #1
 800fbec:	2030      	movs	r0, #48	; 0x30
 800fbee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fbf2:	4422      	add	r2, r4
 800fbf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fbf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fbfc:	3302      	adds	r3, #2
 800fbfe:	e7c7      	b.n	800fb90 <_printf_common+0x58>
 800fc00:	2301      	movs	r3, #1
 800fc02:	4622      	mov	r2, r4
 800fc04:	4649      	mov	r1, r9
 800fc06:	4638      	mov	r0, r7
 800fc08:	47c0      	blx	r8
 800fc0a:	3001      	adds	r0, #1
 800fc0c:	d0e6      	beq.n	800fbdc <_printf_common+0xa4>
 800fc0e:	3601      	adds	r6, #1
 800fc10:	e7d9      	b.n	800fbc6 <_printf_common+0x8e>
	...

0800fc14 <_printf_i>:
 800fc14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc18:	7e0f      	ldrb	r7, [r1, #24]
 800fc1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc1c:	2f78      	cmp	r7, #120	; 0x78
 800fc1e:	4691      	mov	r9, r2
 800fc20:	4680      	mov	r8, r0
 800fc22:	460c      	mov	r4, r1
 800fc24:	469a      	mov	sl, r3
 800fc26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc2a:	d807      	bhi.n	800fc3c <_printf_i+0x28>
 800fc2c:	2f62      	cmp	r7, #98	; 0x62
 800fc2e:	d80a      	bhi.n	800fc46 <_printf_i+0x32>
 800fc30:	2f00      	cmp	r7, #0
 800fc32:	f000 80d4 	beq.w	800fdde <_printf_i+0x1ca>
 800fc36:	2f58      	cmp	r7, #88	; 0x58
 800fc38:	f000 80c0 	beq.w	800fdbc <_printf_i+0x1a8>
 800fc3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc44:	e03a      	b.n	800fcbc <_printf_i+0xa8>
 800fc46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc4a:	2b15      	cmp	r3, #21
 800fc4c:	d8f6      	bhi.n	800fc3c <_printf_i+0x28>
 800fc4e:	a101      	add	r1, pc, #4	; (adr r1, 800fc54 <_printf_i+0x40>)
 800fc50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc54:	0800fcad 	.word	0x0800fcad
 800fc58:	0800fcc1 	.word	0x0800fcc1
 800fc5c:	0800fc3d 	.word	0x0800fc3d
 800fc60:	0800fc3d 	.word	0x0800fc3d
 800fc64:	0800fc3d 	.word	0x0800fc3d
 800fc68:	0800fc3d 	.word	0x0800fc3d
 800fc6c:	0800fcc1 	.word	0x0800fcc1
 800fc70:	0800fc3d 	.word	0x0800fc3d
 800fc74:	0800fc3d 	.word	0x0800fc3d
 800fc78:	0800fc3d 	.word	0x0800fc3d
 800fc7c:	0800fc3d 	.word	0x0800fc3d
 800fc80:	0800fdc5 	.word	0x0800fdc5
 800fc84:	0800fced 	.word	0x0800fced
 800fc88:	0800fd7f 	.word	0x0800fd7f
 800fc8c:	0800fc3d 	.word	0x0800fc3d
 800fc90:	0800fc3d 	.word	0x0800fc3d
 800fc94:	0800fde7 	.word	0x0800fde7
 800fc98:	0800fc3d 	.word	0x0800fc3d
 800fc9c:	0800fced 	.word	0x0800fced
 800fca0:	0800fc3d 	.word	0x0800fc3d
 800fca4:	0800fc3d 	.word	0x0800fc3d
 800fca8:	0800fd87 	.word	0x0800fd87
 800fcac:	682b      	ldr	r3, [r5, #0]
 800fcae:	1d1a      	adds	r2, r3, #4
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	602a      	str	r2, [r5, #0]
 800fcb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	e09f      	b.n	800fe00 <_printf_i+0x1ec>
 800fcc0:	6820      	ldr	r0, [r4, #0]
 800fcc2:	682b      	ldr	r3, [r5, #0]
 800fcc4:	0607      	lsls	r7, r0, #24
 800fcc6:	f103 0104 	add.w	r1, r3, #4
 800fcca:	6029      	str	r1, [r5, #0]
 800fccc:	d501      	bpl.n	800fcd2 <_printf_i+0xbe>
 800fcce:	681e      	ldr	r6, [r3, #0]
 800fcd0:	e003      	b.n	800fcda <_printf_i+0xc6>
 800fcd2:	0646      	lsls	r6, r0, #25
 800fcd4:	d5fb      	bpl.n	800fcce <_printf_i+0xba>
 800fcd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fcda:	2e00      	cmp	r6, #0
 800fcdc:	da03      	bge.n	800fce6 <_printf_i+0xd2>
 800fcde:	232d      	movs	r3, #45	; 0x2d
 800fce0:	4276      	negs	r6, r6
 800fce2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fce6:	485a      	ldr	r0, [pc, #360]	; (800fe50 <_printf_i+0x23c>)
 800fce8:	230a      	movs	r3, #10
 800fcea:	e012      	b.n	800fd12 <_printf_i+0xfe>
 800fcec:	682b      	ldr	r3, [r5, #0]
 800fcee:	6820      	ldr	r0, [r4, #0]
 800fcf0:	1d19      	adds	r1, r3, #4
 800fcf2:	6029      	str	r1, [r5, #0]
 800fcf4:	0605      	lsls	r5, r0, #24
 800fcf6:	d501      	bpl.n	800fcfc <_printf_i+0xe8>
 800fcf8:	681e      	ldr	r6, [r3, #0]
 800fcfa:	e002      	b.n	800fd02 <_printf_i+0xee>
 800fcfc:	0641      	lsls	r1, r0, #25
 800fcfe:	d5fb      	bpl.n	800fcf8 <_printf_i+0xe4>
 800fd00:	881e      	ldrh	r6, [r3, #0]
 800fd02:	4853      	ldr	r0, [pc, #332]	; (800fe50 <_printf_i+0x23c>)
 800fd04:	2f6f      	cmp	r7, #111	; 0x6f
 800fd06:	bf0c      	ite	eq
 800fd08:	2308      	moveq	r3, #8
 800fd0a:	230a      	movne	r3, #10
 800fd0c:	2100      	movs	r1, #0
 800fd0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd12:	6865      	ldr	r5, [r4, #4]
 800fd14:	60a5      	str	r5, [r4, #8]
 800fd16:	2d00      	cmp	r5, #0
 800fd18:	bfa2      	ittt	ge
 800fd1a:	6821      	ldrge	r1, [r4, #0]
 800fd1c:	f021 0104 	bicge.w	r1, r1, #4
 800fd20:	6021      	strge	r1, [r4, #0]
 800fd22:	b90e      	cbnz	r6, 800fd28 <_printf_i+0x114>
 800fd24:	2d00      	cmp	r5, #0
 800fd26:	d04b      	beq.n	800fdc0 <_printf_i+0x1ac>
 800fd28:	4615      	mov	r5, r2
 800fd2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fd2e:	fb03 6711 	mls	r7, r3, r1, r6
 800fd32:	5dc7      	ldrb	r7, [r0, r7]
 800fd34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fd38:	4637      	mov	r7, r6
 800fd3a:	42bb      	cmp	r3, r7
 800fd3c:	460e      	mov	r6, r1
 800fd3e:	d9f4      	bls.n	800fd2a <_printf_i+0x116>
 800fd40:	2b08      	cmp	r3, #8
 800fd42:	d10b      	bne.n	800fd5c <_printf_i+0x148>
 800fd44:	6823      	ldr	r3, [r4, #0]
 800fd46:	07de      	lsls	r6, r3, #31
 800fd48:	d508      	bpl.n	800fd5c <_printf_i+0x148>
 800fd4a:	6923      	ldr	r3, [r4, #16]
 800fd4c:	6861      	ldr	r1, [r4, #4]
 800fd4e:	4299      	cmp	r1, r3
 800fd50:	bfde      	ittt	le
 800fd52:	2330      	movle	r3, #48	; 0x30
 800fd54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fd5c:	1b52      	subs	r2, r2, r5
 800fd5e:	6122      	str	r2, [r4, #16]
 800fd60:	f8cd a000 	str.w	sl, [sp]
 800fd64:	464b      	mov	r3, r9
 800fd66:	aa03      	add	r2, sp, #12
 800fd68:	4621      	mov	r1, r4
 800fd6a:	4640      	mov	r0, r8
 800fd6c:	f7ff fee4 	bl	800fb38 <_printf_common>
 800fd70:	3001      	adds	r0, #1
 800fd72:	d14a      	bne.n	800fe0a <_printf_i+0x1f6>
 800fd74:	f04f 30ff 	mov.w	r0, #4294967295
 800fd78:	b004      	add	sp, #16
 800fd7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd7e:	6823      	ldr	r3, [r4, #0]
 800fd80:	f043 0320 	orr.w	r3, r3, #32
 800fd84:	6023      	str	r3, [r4, #0]
 800fd86:	4833      	ldr	r0, [pc, #204]	; (800fe54 <_printf_i+0x240>)
 800fd88:	2778      	movs	r7, #120	; 0x78
 800fd8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fd8e:	6823      	ldr	r3, [r4, #0]
 800fd90:	6829      	ldr	r1, [r5, #0]
 800fd92:	061f      	lsls	r7, r3, #24
 800fd94:	f851 6b04 	ldr.w	r6, [r1], #4
 800fd98:	d402      	bmi.n	800fda0 <_printf_i+0x18c>
 800fd9a:	065f      	lsls	r7, r3, #25
 800fd9c:	bf48      	it	mi
 800fd9e:	b2b6      	uxthmi	r6, r6
 800fda0:	07df      	lsls	r7, r3, #31
 800fda2:	bf48      	it	mi
 800fda4:	f043 0320 	orrmi.w	r3, r3, #32
 800fda8:	6029      	str	r1, [r5, #0]
 800fdaa:	bf48      	it	mi
 800fdac:	6023      	strmi	r3, [r4, #0]
 800fdae:	b91e      	cbnz	r6, 800fdb8 <_printf_i+0x1a4>
 800fdb0:	6823      	ldr	r3, [r4, #0]
 800fdb2:	f023 0320 	bic.w	r3, r3, #32
 800fdb6:	6023      	str	r3, [r4, #0]
 800fdb8:	2310      	movs	r3, #16
 800fdba:	e7a7      	b.n	800fd0c <_printf_i+0xf8>
 800fdbc:	4824      	ldr	r0, [pc, #144]	; (800fe50 <_printf_i+0x23c>)
 800fdbe:	e7e4      	b.n	800fd8a <_printf_i+0x176>
 800fdc0:	4615      	mov	r5, r2
 800fdc2:	e7bd      	b.n	800fd40 <_printf_i+0x12c>
 800fdc4:	682b      	ldr	r3, [r5, #0]
 800fdc6:	6826      	ldr	r6, [r4, #0]
 800fdc8:	6961      	ldr	r1, [r4, #20]
 800fdca:	1d18      	adds	r0, r3, #4
 800fdcc:	6028      	str	r0, [r5, #0]
 800fdce:	0635      	lsls	r5, r6, #24
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	d501      	bpl.n	800fdd8 <_printf_i+0x1c4>
 800fdd4:	6019      	str	r1, [r3, #0]
 800fdd6:	e002      	b.n	800fdde <_printf_i+0x1ca>
 800fdd8:	0670      	lsls	r0, r6, #25
 800fdda:	d5fb      	bpl.n	800fdd4 <_printf_i+0x1c0>
 800fddc:	8019      	strh	r1, [r3, #0]
 800fdde:	2300      	movs	r3, #0
 800fde0:	6123      	str	r3, [r4, #16]
 800fde2:	4615      	mov	r5, r2
 800fde4:	e7bc      	b.n	800fd60 <_printf_i+0x14c>
 800fde6:	682b      	ldr	r3, [r5, #0]
 800fde8:	1d1a      	adds	r2, r3, #4
 800fdea:	602a      	str	r2, [r5, #0]
 800fdec:	681d      	ldr	r5, [r3, #0]
 800fdee:	6862      	ldr	r2, [r4, #4]
 800fdf0:	2100      	movs	r1, #0
 800fdf2:	4628      	mov	r0, r5
 800fdf4:	f7f0 fa0c 	bl	8000210 <memchr>
 800fdf8:	b108      	cbz	r0, 800fdfe <_printf_i+0x1ea>
 800fdfa:	1b40      	subs	r0, r0, r5
 800fdfc:	6060      	str	r0, [r4, #4]
 800fdfe:	6863      	ldr	r3, [r4, #4]
 800fe00:	6123      	str	r3, [r4, #16]
 800fe02:	2300      	movs	r3, #0
 800fe04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe08:	e7aa      	b.n	800fd60 <_printf_i+0x14c>
 800fe0a:	6923      	ldr	r3, [r4, #16]
 800fe0c:	462a      	mov	r2, r5
 800fe0e:	4649      	mov	r1, r9
 800fe10:	4640      	mov	r0, r8
 800fe12:	47d0      	blx	sl
 800fe14:	3001      	adds	r0, #1
 800fe16:	d0ad      	beq.n	800fd74 <_printf_i+0x160>
 800fe18:	6823      	ldr	r3, [r4, #0]
 800fe1a:	079b      	lsls	r3, r3, #30
 800fe1c:	d413      	bmi.n	800fe46 <_printf_i+0x232>
 800fe1e:	68e0      	ldr	r0, [r4, #12]
 800fe20:	9b03      	ldr	r3, [sp, #12]
 800fe22:	4298      	cmp	r0, r3
 800fe24:	bfb8      	it	lt
 800fe26:	4618      	movlt	r0, r3
 800fe28:	e7a6      	b.n	800fd78 <_printf_i+0x164>
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	4632      	mov	r2, r6
 800fe2e:	4649      	mov	r1, r9
 800fe30:	4640      	mov	r0, r8
 800fe32:	47d0      	blx	sl
 800fe34:	3001      	adds	r0, #1
 800fe36:	d09d      	beq.n	800fd74 <_printf_i+0x160>
 800fe38:	3501      	adds	r5, #1
 800fe3a:	68e3      	ldr	r3, [r4, #12]
 800fe3c:	9903      	ldr	r1, [sp, #12]
 800fe3e:	1a5b      	subs	r3, r3, r1
 800fe40:	42ab      	cmp	r3, r5
 800fe42:	dcf2      	bgt.n	800fe2a <_printf_i+0x216>
 800fe44:	e7eb      	b.n	800fe1e <_printf_i+0x20a>
 800fe46:	2500      	movs	r5, #0
 800fe48:	f104 0619 	add.w	r6, r4, #25
 800fe4c:	e7f5      	b.n	800fe3a <_printf_i+0x226>
 800fe4e:	bf00      	nop
 800fe50:	08010f63 	.word	0x08010f63
 800fe54:	08010f74 	.word	0x08010f74

0800fe58 <__sflush_r>:
 800fe58:	898a      	ldrh	r2, [r1, #12]
 800fe5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe5e:	4605      	mov	r5, r0
 800fe60:	0710      	lsls	r0, r2, #28
 800fe62:	460c      	mov	r4, r1
 800fe64:	d458      	bmi.n	800ff18 <__sflush_r+0xc0>
 800fe66:	684b      	ldr	r3, [r1, #4]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	dc05      	bgt.n	800fe78 <__sflush_r+0x20>
 800fe6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	dc02      	bgt.n	800fe78 <__sflush_r+0x20>
 800fe72:	2000      	movs	r0, #0
 800fe74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe7a:	2e00      	cmp	r6, #0
 800fe7c:	d0f9      	beq.n	800fe72 <__sflush_r+0x1a>
 800fe7e:	2300      	movs	r3, #0
 800fe80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fe84:	682f      	ldr	r7, [r5, #0]
 800fe86:	6a21      	ldr	r1, [r4, #32]
 800fe88:	602b      	str	r3, [r5, #0]
 800fe8a:	d032      	beq.n	800fef2 <__sflush_r+0x9a>
 800fe8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fe8e:	89a3      	ldrh	r3, [r4, #12]
 800fe90:	075a      	lsls	r2, r3, #29
 800fe92:	d505      	bpl.n	800fea0 <__sflush_r+0x48>
 800fe94:	6863      	ldr	r3, [r4, #4]
 800fe96:	1ac0      	subs	r0, r0, r3
 800fe98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe9a:	b10b      	cbz	r3, 800fea0 <__sflush_r+0x48>
 800fe9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe9e:	1ac0      	subs	r0, r0, r3
 800fea0:	2300      	movs	r3, #0
 800fea2:	4602      	mov	r2, r0
 800fea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fea6:	6a21      	ldr	r1, [r4, #32]
 800fea8:	4628      	mov	r0, r5
 800feaa:	47b0      	blx	r6
 800feac:	1c43      	adds	r3, r0, #1
 800feae:	89a3      	ldrh	r3, [r4, #12]
 800feb0:	d106      	bne.n	800fec0 <__sflush_r+0x68>
 800feb2:	6829      	ldr	r1, [r5, #0]
 800feb4:	291d      	cmp	r1, #29
 800feb6:	d82b      	bhi.n	800ff10 <__sflush_r+0xb8>
 800feb8:	4a29      	ldr	r2, [pc, #164]	; (800ff60 <__sflush_r+0x108>)
 800feba:	410a      	asrs	r2, r1
 800febc:	07d6      	lsls	r6, r2, #31
 800febe:	d427      	bmi.n	800ff10 <__sflush_r+0xb8>
 800fec0:	2200      	movs	r2, #0
 800fec2:	6062      	str	r2, [r4, #4]
 800fec4:	04d9      	lsls	r1, r3, #19
 800fec6:	6922      	ldr	r2, [r4, #16]
 800fec8:	6022      	str	r2, [r4, #0]
 800feca:	d504      	bpl.n	800fed6 <__sflush_r+0x7e>
 800fecc:	1c42      	adds	r2, r0, #1
 800fece:	d101      	bne.n	800fed4 <__sflush_r+0x7c>
 800fed0:	682b      	ldr	r3, [r5, #0]
 800fed2:	b903      	cbnz	r3, 800fed6 <__sflush_r+0x7e>
 800fed4:	6560      	str	r0, [r4, #84]	; 0x54
 800fed6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fed8:	602f      	str	r7, [r5, #0]
 800feda:	2900      	cmp	r1, #0
 800fedc:	d0c9      	beq.n	800fe72 <__sflush_r+0x1a>
 800fede:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fee2:	4299      	cmp	r1, r3
 800fee4:	d002      	beq.n	800feec <__sflush_r+0x94>
 800fee6:	4628      	mov	r0, r5
 800fee8:	f7ff fbce 	bl	800f688 <_free_r>
 800feec:	2000      	movs	r0, #0
 800feee:	6360      	str	r0, [r4, #52]	; 0x34
 800fef0:	e7c0      	b.n	800fe74 <__sflush_r+0x1c>
 800fef2:	2301      	movs	r3, #1
 800fef4:	4628      	mov	r0, r5
 800fef6:	47b0      	blx	r6
 800fef8:	1c41      	adds	r1, r0, #1
 800fefa:	d1c8      	bne.n	800fe8e <__sflush_r+0x36>
 800fefc:	682b      	ldr	r3, [r5, #0]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d0c5      	beq.n	800fe8e <__sflush_r+0x36>
 800ff02:	2b1d      	cmp	r3, #29
 800ff04:	d001      	beq.n	800ff0a <__sflush_r+0xb2>
 800ff06:	2b16      	cmp	r3, #22
 800ff08:	d101      	bne.n	800ff0e <__sflush_r+0xb6>
 800ff0a:	602f      	str	r7, [r5, #0]
 800ff0c:	e7b1      	b.n	800fe72 <__sflush_r+0x1a>
 800ff0e:	89a3      	ldrh	r3, [r4, #12]
 800ff10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff14:	81a3      	strh	r3, [r4, #12]
 800ff16:	e7ad      	b.n	800fe74 <__sflush_r+0x1c>
 800ff18:	690f      	ldr	r7, [r1, #16]
 800ff1a:	2f00      	cmp	r7, #0
 800ff1c:	d0a9      	beq.n	800fe72 <__sflush_r+0x1a>
 800ff1e:	0793      	lsls	r3, r2, #30
 800ff20:	680e      	ldr	r6, [r1, #0]
 800ff22:	bf08      	it	eq
 800ff24:	694b      	ldreq	r3, [r1, #20]
 800ff26:	600f      	str	r7, [r1, #0]
 800ff28:	bf18      	it	ne
 800ff2a:	2300      	movne	r3, #0
 800ff2c:	eba6 0807 	sub.w	r8, r6, r7
 800ff30:	608b      	str	r3, [r1, #8]
 800ff32:	f1b8 0f00 	cmp.w	r8, #0
 800ff36:	dd9c      	ble.n	800fe72 <__sflush_r+0x1a>
 800ff38:	6a21      	ldr	r1, [r4, #32]
 800ff3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ff3c:	4643      	mov	r3, r8
 800ff3e:	463a      	mov	r2, r7
 800ff40:	4628      	mov	r0, r5
 800ff42:	47b0      	blx	r6
 800ff44:	2800      	cmp	r0, #0
 800ff46:	dc06      	bgt.n	800ff56 <__sflush_r+0xfe>
 800ff48:	89a3      	ldrh	r3, [r4, #12]
 800ff4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff4e:	81a3      	strh	r3, [r4, #12]
 800ff50:	f04f 30ff 	mov.w	r0, #4294967295
 800ff54:	e78e      	b.n	800fe74 <__sflush_r+0x1c>
 800ff56:	4407      	add	r7, r0
 800ff58:	eba8 0800 	sub.w	r8, r8, r0
 800ff5c:	e7e9      	b.n	800ff32 <__sflush_r+0xda>
 800ff5e:	bf00      	nop
 800ff60:	dfbffffe 	.word	0xdfbffffe

0800ff64 <_fflush_r>:
 800ff64:	b538      	push	{r3, r4, r5, lr}
 800ff66:	690b      	ldr	r3, [r1, #16]
 800ff68:	4605      	mov	r5, r0
 800ff6a:	460c      	mov	r4, r1
 800ff6c:	b913      	cbnz	r3, 800ff74 <_fflush_r+0x10>
 800ff6e:	2500      	movs	r5, #0
 800ff70:	4628      	mov	r0, r5
 800ff72:	bd38      	pop	{r3, r4, r5, pc}
 800ff74:	b118      	cbz	r0, 800ff7e <_fflush_r+0x1a>
 800ff76:	6a03      	ldr	r3, [r0, #32]
 800ff78:	b90b      	cbnz	r3, 800ff7e <_fflush_r+0x1a>
 800ff7a:	f7ff f9dd 	bl	800f338 <__sinit>
 800ff7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d0f3      	beq.n	800ff6e <_fflush_r+0xa>
 800ff86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff88:	07d0      	lsls	r0, r2, #31
 800ff8a:	d404      	bmi.n	800ff96 <_fflush_r+0x32>
 800ff8c:	0599      	lsls	r1, r3, #22
 800ff8e:	d402      	bmi.n	800ff96 <_fflush_r+0x32>
 800ff90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff92:	f7ff fb51 	bl	800f638 <__retarget_lock_acquire_recursive>
 800ff96:	4628      	mov	r0, r5
 800ff98:	4621      	mov	r1, r4
 800ff9a:	f7ff ff5d 	bl	800fe58 <__sflush_r>
 800ff9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ffa0:	07da      	lsls	r2, r3, #31
 800ffa2:	4605      	mov	r5, r0
 800ffa4:	d4e4      	bmi.n	800ff70 <_fflush_r+0xc>
 800ffa6:	89a3      	ldrh	r3, [r4, #12]
 800ffa8:	059b      	lsls	r3, r3, #22
 800ffaa:	d4e1      	bmi.n	800ff70 <_fflush_r+0xc>
 800ffac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffae:	f7ff fb44 	bl	800f63a <__retarget_lock_release_recursive>
 800ffb2:	e7dd      	b.n	800ff70 <_fflush_r+0xc>

0800ffb4 <fiprintf>:
 800ffb4:	b40e      	push	{r1, r2, r3}
 800ffb6:	b503      	push	{r0, r1, lr}
 800ffb8:	4601      	mov	r1, r0
 800ffba:	ab03      	add	r3, sp, #12
 800ffbc:	4805      	ldr	r0, [pc, #20]	; (800ffd4 <fiprintf+0x20>)
 800ffbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffc2:	6800      	ldr	r0, [r0, #0]
 800ffc4:	9301      	str	r3, [sp, #4]
 800ffc6:	f000 f89f 	bl	8010108 <_vfiprintf_r>
 800ffca:	b002      	add	sp, #8
 800ffcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffd0:	b003      	add	sp, #12
 800ffd2:	4770      	bx	lr
 800ffd4:	200001b4 	.word	0x200001b4

0800ffd8 <memmove>:
 800ffd8:	4288      	cmp	r0, r1
 800ffda:	b510      	push	{r4, lr}
 800ffdc:	eb01 0402 	add.w	r4, r1, r2
 800ffe0:	d902      	bls.n	800ffe8 <memmove+0x10>
 800ffe2:	4284      	cmp	r4, r0
 800ffe4:	4623      	mov	r3, r4
 800ffe6:	d807      	bhi.n	800fff8 <memmove+0x20>
 800ffe8:	1e43      	subs	r3, r0, #1
 800ffea:	42a1      	cmp	r1, r4
 800ffec:	d008      	beq.n	8010000 <memmove+0x28>
 800ffee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fff2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fff6:	e7f8      	b.n	800ffea <memmove+0x12>
 800fff8:	4402      	add	r2, r0
 800fffa:	4601      	mov	r1, r0
 800fffc:	428a      	cmp	r2, r1
 800fffe:	d100      	bne.n	8010002 <memmove+0x2a>
 8010000:	bd10      	pop	{r4, pc}
 8010002:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010006:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801000a:	e7f7      	b.n	800fffc <memmove+0x24>

0801000c <_sbrk_r>:
 801000c:	b538      	push	{r3, r4, r5, lr}
 801000e:	4d06      	ldr	r5, [pc, #24]	; (8010028 <_sbrk_r+0x1c>)
 8010010:	2300      	movs	r3, #0
 8010012:	4604      	mov	r4, r0
 8010014:	4608      	mov	r0, r1
 8010016:	602b      	str	r3, [r5, #0]
 8010018:	f7f2 fca0 	bl	800295c <_sbrk>
 801001c:	1c43      	adds	r3, r0, #1
 801001e:	d102      	bne.n	8010026 <_sbrk_r+0x1a>
 8010020:	682b      	ldr	r3, [r5, #0]
 8010022:	b103      	cbz	r3, 8010026 <_sbrk_r+0x1a>
 8010024:	6023      	str	r3, [r4, #0]
 8010026:	bd38      	pop	{r3, r4, r5, pc}
 8010028:	200047c0 	.word	0x200047c0

0801002c <memcpy>:
 801002c:	440a      	add	r2, r1
 801002e:	4291      	cmp	r1, r2
 8010030:	f100 33ff 	add.w	r3, r0, #4294967295
 8010034:	d100      	bne.n	8010038 <memcpy+0xc>
 8010036:	4770      	bx	lr
 8010038:	b510      	push	{r4, lr}
 801003a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801003e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010042:	4291      	cmp	r1, r2
 8010044:	d1f9      	bne.n	801003a <memcpy+0xe>
 8010046:	bd10      	pop	{r4, pc}

08010048 <abort>:
 8010048:	b508      	push	{r3, lr}
 801004a:	2006      	movs	r0, #6
 801004c:	f000 fa34 	bl	80104b8 <raise>
 8010050:	2001      	movs	r0, #1
 8010052:	f7f2 fc0b 	bl	800286c <_exit>

08010056 <_realloc_r>:
 8010056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801005a:	4680      	mov	r8, r0
 801005c:	4614      	mov	r4, r2
 801005e:	460e      	mov	r6, r1
 8010060:	b921      	cbnz	r1, 801006c <_realloc_r+0x16>
 8010062:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010066:	4611      	mov	r1, r2
 8010068:	f7ff bb82 	b.w	800f770 <_malloc_r>
 801006c:	b92a      	cbnz	r2, 801007a <_realloc_r+0x24>
 801006e:	f7ff fb0b 	bl	800f688 <_free_r>
 8010072:	4625      	mov	r5, r4
 8010074:	4628      	mov	r0, r5
 8010076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801007a:	f000 fa39 	bl	80104f0 <_malloc_usable_size_r>
 801007e:	4284      	cmp	r4, r0
 8010080:	4607      	mov	r7, r0
 8010082:	d802      	bhi.n	801008a <_realloc_r+0x34>
 8010084:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010088:	d812      	bhi.n	80100b0 <_realloc_r+0x5a>
 801008a:	4621      	mov	r1, r4
 801008c:	4640      	mov	r0, r8
 801008e:	f7ff fb6f 	bl	800f770 <_malloc_r>
 8010092:	4605      	mov	r5, r0
 8010094:	2800      	cmp	r0, #0
 8010096:	d0ed      	beq.n	8010074 <_realloc_r+0x1e>
 8010098:	42bc      	cmp	r4, r7
 801009a:	4622      	mov	r2, r4
 801009c:	4631      	mov	r1, r6
 801009e:	bf28      	it	cs
 80100a0:	463a      	movcs	r2, r7
 80100a2:	f7ff ffc3 	bl	801002c <memcpy>
 80100a6:	4631      	mov	r1, r6
 80100a8:	4640      	mov	r0, r8
 80100aa:	f7ff faed 	bl	800f688 <_free_r>
 80100ae:	e7e1      	b.n	8010074 <_realloc_r+0x1e>
 80100b0:	4635      	mov	r5, r6
 80100b2:	e7df      	b.n	8010074 <_realloc_r+0x1e>

080100b4 <__sfputc_r>:
 80100b4:	6893      	ldr	r3, [r2, #8]
 80100b6:	3b01      	subs	r3, #1
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	b410      	push	{r4}
 80100bc:	6093      	str	r3, [r2, #8]
 80100be:	da08      	bge.n	80100d2 <__sfputc_r+0x1e>
 80100c0:	6994      	ldr	r4, [r2, #24]
 80100c2:	42a3      	cmp	r3, r4
 80100c4:	db01      	blt.n	80100ca <__sfputc_r+0x16>
 80100c6:	290a      	cmp	r1, #10
 80100c8:	d103      	bne.n	80100d2 <__sfputc_r+0x1e>
 80100ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100ce:	f000 b935 	b.w	801033c <__swbuf_r>
 80100d2:	6813      	ldr	r3, [r2, #0]
 80100d4:	1c58      	adds	r0, r3, #1
 80100d6:	6010      	str	r0, [r2, #0]
 80100d8:	7019      	strb	r1, [r3, #0]
 80100da:	4608      	mov	r0, r1
 80100dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100e0:	4770      	bx	lr

080100e2 <__sfputs_r>:
 80100e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100e4:	4606      	mov	r6, r0
 80100e6:	460f      	mov	r7, r1
 80100e8:	4614      	mov	r4, r2
 80100ea:	18d5      	adds	r5, r2, r3
 80100ec:	42ac      	cmp	r4, r5
 80100ee:	d101      	bne.n	80100f4 <__sfputs_r+0x12>
 80100f0:	2000      	movs	r0, #0
 80100f2:	e007      	b.n	8010104 <__sfputs_r+0x22>
 80100f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100f8:	463a      	mov	r2, r7
 80100fa:	4630      	mov	r0, r6
 80100fc:	f7ff ffda 	bl	80100b4 <__sfputc_r>
 8010100:	1c43      	adds	r3, r0, #1
 8010102:	d1f3      	bne.n	80100ec <__sfputs_r+0xa>
 8010104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010108 <_vfiprintf_r>:
 8010108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801010c:	460d      	mov	r5, r1
 801010e:	b09d      	sub	sp, #116	; 0x74
 8010110:	4614      	mov	r4, r2
 8010112:	4698      	mov	r8, r3
 8010114:	4606      	mov	r6, r0
 8010116:	b118      	cbz	r0, 8010120 <_vfiprintf_r+0x18>
 8010118:	6a03      	ldr	r3, [r0, #32]
 801011a:	b90b      	cbnz	r3, 8010120 <_vfiprintf_r+0x18>
 801011c:	f7ff f90c 	bl	800f338 <__sinit>
 8010120:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010122:	07d9      	lsls	r1, r3, #31
 8010124:	d405      	bmi.n	8010132 <_vfiprintf_r+0x2a>
 8010126:	89ab      	ldrh	r3, [r5, #12]
 8010128:	059a      	lsls	r2, r3, #22
 801012a:	d402      	bmi.n	8010132 <_vfiprintf_r+0x2a>
 801012c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801012e:	f7ff fa83 	bl	800f638 <__retarget_lock_acquire_recursive>
 8010132:	89ab      	ldrh	r3, [r5, #12]
 8010134:	071b      	lsls	r3, r3, #28
 8010136:	d501      	bpl.n	801013c <_vfiprintf_r+0x34>
 8010138:	692b      	ldr	r3, [r5, #16]
 801013a:	b99b      	cbnz	r3, 8010164 <_vfiprintf_r+0x5c>
 801013c:	4629      	mov	r1, r5
 801013e:	4630      	mov	r0, r6
 8010140:	f000 f93a 	bl	80103b8 <__swsetup_r>
 8010144:	b170      	cbz	r0, 8010164 <_vfiprintf_r+0x5c>
 8010146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010148:	07dc      	lsls	r4, r3, #31
 801014a:	d504      	bpl.n	8010156 <_vfiprintf_r+0x4e>
 801014c:	f04f 30ff 	mov.w	r0, #4294967295
 8010150:	b01d      	add	sp, #116	; 0x74
 8010152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010156:	89ab      	ldrh	r3, [r5, #12]
 8010158:	0598      	lsls	r0, r3, #22
 801015a:	d4f7      	bmi.n	801014c <_vfiprintf_r+0x44>
 801015c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801015e:	f7ff fa6c 	bl	800f63a <__retarget_lock_release_recursive>
 8010162:	e7f3      	b.n	801014c <_vfiprintf_r+0x44>
 8010164:	2300      	movs	r3, #0
 8010166:	9309      	str	r3, [sp, #36]	; 0x24
 8010168:	2320      	movs	r3, #32
 801016a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801016e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010172:	2330      	movs	r3, #48	; 0x30
 8010174:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010328 <_vfiprintf_r+0x220>
 8010178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801017c:	f04f 0901 	mov.w	r9, #1
 8010180:	4623      	mov	r3, r4
 8010182:	469a      	mov	sl, r3
 8010184:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010188:	b10a      	cbz	r2, 801018e <_vfiprintf_r+0x86>
 801018a:	2a25      	cmp	r2, #37	; 0x25
 801018c:	d1f9      	bne.n	8010182 <_vfiprintf_r+0x7a>
 801018e:	ebba 0b04 	subs.w	fp, sl, r4
 8010192:	d00b      	beq.n	80101ac <_vfiprintf_r+0xa4>
 8010194:	465b      	mov	r3, fp
 8010196:	4622      	mov	r2, r4
 8010198:	4629      	mov	r1, r5
 801019a:	4630      	mov	r0, r6
 801019c:	f7ff ffa1 	bl	80100e2 <__sfputs_r>
 80101a0:	3001      	adds	r0, #1
 80101a2:	f000 80a9 	beq.w	80102f8 <_vfiprintf_r+0x1f0>
 80101a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101a8:	445a      	add	r2, fp
 80101aa:	9209      	str	r2, [sp, #36]	; 0x24
 80101ac:	f89a 3000 	ldrb.w	r3, [sl]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	f000 80a1 	beq.w	80102f8 <_vfiprintf_r+0x1f0>
 80101b6:	2300      	movs	r3, #0
 80101b8:	f04f 32ff 	mov.w	r2, #4294967295
 80101bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101c0:	f10a 0a01 	add.w	sl, sl, #1
 80101c4:	9304      	str	r3, [sp, #16]
 80101c6:	9307      	str	r3, [sp, #28]
 80101c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101cc:	931a      	str	r3, [sp, #104]	; 0x68
 80101ce:	4654      	mov	r4, sl
 80101d0:	2205      	movs	r2, #5
 80101d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101d6:	4854      	ldr	r0, [pc, #336]	; (8010328 <_vfiprintf_r+0x220>)
 80101d8:	f7f0 f81a 	bl	8000210 <memchr>
 80101dc:	9a04      	ldr	r2, [sp, #16]
 80101de:	b9d8      	cbnz	r0, 8010218 <_vfiprintf_r+0x110>
 80101e0:	06d1      	lsls	r1, r2, #27
 80101e2:	bf44      	itt	mi
 80101e4:	2320      	movmi	r3, #32
 80101e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101ea:	0713      	lsls	r3, r2, #28
 80101ec:	bf44      	itt	mi
 80101ee:	232b      	movmi	r3, #43	; 0x2b
 80101f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101f4:	f89a 3000 	ldrb.w	r3, [sl]
 80101f8:	2b2a      	cmp	r3, #42	; 0x2a
 80101fa:	d015      	beq.n	8010228 <_vfiprintf_r+0x120>
 80101fc:	9a07      	ldr	r2, [sp, #28]
 80101fe:	4654      	mov	r4, sl
 8010200:	2000      	movs	r0, #0
 8010202:	f04f 0c0a 	mov.w	ip, #10
 8010206:	4621      	mov	r1, r4
 8010208:	f811 3b01 	ldrb.w	r3, [r1], #1
 801020c:	3b30      	subs	r3, #48	; 0x30
 801020e:	2b09      	cmp	r3, #9
 8010210:	d94d      	bls.n	80102ae <_vfiprintf_r+0x1a6>
 8010212:	b1b0      	cbz	r0, 8010242 <_vfiprintf_r+0x13a>
 8010214:	9207      	str	r2, [sp, #28]
 8010216:	e014      	b.n	8010242 <_vfiprintf_r+0x13a>
 8010218:	eba0 0308 	sub.w	r3, r0, r8
 801021c:	fa09 f303 	lsl.w	r3, r9, r3
 8010220:	4313      	orrs	r3, r2
 8010222:	9304      	str	r3, [sp, #16]
 8010224:	46a2      	mov	sl, r4
 8010226:	e7d2      	b.n	80101ce <_vfiprintf_r+0xc6>
 8010228:	9b03      	ldr	r3, [sp, #12]
 801022a:	1d19      	adds	r1, r3, #4
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	9103      	str	r1, [sp, #12]
 8010230:	2b00      	cmp	r3, #0
 8010232:	bfbb      	ittet	lt
 8010234:	425b      	neglt	r3, r3
 8010236:	f042 0202 	orrlt.w	r2, r2, #2
 801023a:	9307      	strge	r3, [sp, #28]
 801023c:	9307      	strlt	r3, [sp, #28]
 801023e:	bfb8      	it	lt
 8010240:	9204      	strlt	r2, [sp, #16]
 8010242:	7823      	ldrb	r3, [r4, #0]
 8010244:	2b2e      	cmp	r3, #46	; 0x2e
 8010246:	d10c      	bne.n	8010262 <_vfiprintf_r+0x15a>
 8010248:	7863      	ldrb	r3, [r4, #1]
 801024a:	2b2a      	cmp	r3, #42	; 0x2a
 801024c:	d134      	bne.n	80102b8 <_vfiprintf_r+0x1b0>
 801024e:	9b03      	ldr	r3, [sp, #12]
 8010250:	1d1a      	adds	r2, r3, #4
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	9203      	str	r2, [sp, #12]
 8010256:	2b00      	cmp	r3, #0
 8010258:	bfb8      	it	lt
 801025a:	f04f 33ff 	movlt.w	r3, #4294967295
 801025e:	3402      	adds	r4, #2
 8010260:	9305      	str	r3, [sp, #20]
 8010262:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010338 <_vfiprintf_r+0x230>
 8010266:	7821      	ldrb	r1, [r4, #0]
 8010268:	2203      	movs	r2, #3
 801026a:	4650      	mov	r0, sl
 801026c:	f7ef ffd0 	bl	8000210 <memchr>
 8010270:	b138      	cbz	r0, 8010282 <_vfiprintf_r+0x17a>
 8010272:	9b04      	ldr	r3, [sp, #16]
 8010274:	eba0 000a 	sub.w	r0, r0, sl
 8010278:	2240      	movs	r2, #64	; 0x40
 801027a:	4082      	lsls	r2, r0
 801027c:	4313      	orrs	r3, r2
 801027e:	3401      	adds	r4, #1
 8010280:	9304      	str	r3, [sp, #16]
 8010282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010286:	4829      	ldr	r0, [pc, #164]	; (801032c <_vfiprintf_r+0x224>)
 8010288:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801028c:	2206      	movs	r2, #6
 801028e:	f7ef ffbf 	bl	8000210 <memchr>
 8010292:	2800      	cmp	r0, #0
 8010294:	d03f      	beq.n	8010316 <_vfiprintf_r+0x20e>
 8010296:	4b26      	ldr	r3, [pc, #152]	; (8010330 <_vfiprintf_r+0x228>)
 8010298:	bb1b      	cbnz	r3, 80102e2 <_vfiprintf_r+0x1da>
 801029a:	9b03      	ldr	r3, [sp, #12]
 801029c:	3307      	adds	r3, #7
 801029e:	f023 0307 	bic.w	r3, r3, #7
 80102a2:	3308      	adds	r3, #8
 80102a4:	9303      	str	r3, [sp, #12]
 80102a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102a8:	443b      	add	r3, r7
 80102aa:	9309      	str	r3, [sp, #36]	; 0x24
 80102ac:	e768      	b.n	8010180 <_vfiprintf_r+0x78>
 80102ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80102b2:	460c      	mov	r4, r1
 80102b4:	2001      	movs	r0, #1
 80102b6:	e7a6      	b.n	8010206 <_vfiprintf_r+0xfe>
 80102b8:	2300      	movs	r3, #0
 80102ba:	3401      	adds	r4, #1
 80102bc:	9305      	str	r3, [sp, #20]
 80102be:	4619      	mov	r1, r3
 80102c0:	f04f 0c0a 	mov.w	ip, #10
 80102c4:	4620      	mov	r0, r4
 80102c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102ca:	3a30      	subs	r2, #48	; 0x30
 80102cc:	2a09      	cmp	r2, #9
 80102ce:	d903      	bls.n	80102d8 <_vfiprintf_r+0x1d0>
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d0c6      	beq.n	8010262 <_vfiprintf_r+0x15a>
 80102d4:	9105      	str	r1, [sp, #20]
 80102d6:	e7c4      	b.n	8010262 <_vfiprintf_r+0x15a>
 80102d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80102dc:	4604      	mov	r4, r0
 80102de:	2301      	movs	r3, #1
 80102e0:	e7f0      	b.n	80102c4 <_vfiprintf_r+0x1bc>
 80102e2:	ab03      	add	r3, sp, #12
 80102e4:	9300      	str	r3, [sp, #0]
 80102e6:	462a      	mov	r2, r5
 80102e8:	4b12      	ldr	r3, [pc, #72]	; (8010334 <_vfiprintf_r+0x22c>)
 80102ea:	a904      	add	r1, sp, #16
 80102ec:	4630      	mov	r0, r6
 80102ee:	f3af 8000 	nop.w
 80102f2:	4607      	mov	r7, r0
 80102f4:	1c78      	adds	r0, r7, #1
 80102f6:	d1d6      	bne.n	80102a6 <_vfiprintf_r+0x19e>
 80102f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80102fa:	07d9      	lsls	r1, r3, #31
 80102fc:	d405      	bmi.n	801030a <_vfiprintf_r+0x202>
 80102fe:	89ab      	ldrh	r3, [r5, #12]
 8010300:	059a      	lsls	r2, r3, #22
 8010302:	d402      	bmi.n	801030a <_vfiprintf_r+0x202>
 8010304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010306:	f7ff f998 	bl	800f63a <__retarget_lock_release_recursive>
 801030a:	89ab      	ldrh	r3, [r5, #12]
 801030c:	065b      	lsls	r3, r3, #25
 801030e:	f53f af1d 	bmi.w	801014c <_vfiprintf_r+0x44>
 8010312:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010314:	e71c      	b.n	8010150 <_vfiprintf_r+0x48>
 8010316:	ab03      	add	r3, sp, #12
 8010318:	9300      	str	r3, [sp, #0]
 801031a:	462a      	mov	r2, r5
 801031c:	4b05      	ldr	r3, [pc, #20]	; (8010334 <_vfiprintf_r+0x22c>)
 801031e:	a904      	add	r1, sp, #16
 8010320:	4630      	mov	r0, r6
 8010322:	f7ff fc77 	bl	800fc14 <_printf_i>
 8010326:	e7e4      	b.n	80102f2 <_vfiprintf_r+0x1ea>
 8010328:	08010f52 	.word	0x08010f52
 801032c:	08010f5c 	.word	0x08010f5c
 8010330:	00000000 	.word	0x00000000
 8010334:	080100e3 	.word	0x080100e3
 8010338:	08010f58 	.word	0x08010f58

0801033c <__swbuf_r>:
 801033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801033e:	460e      	mov	r6, r1
 8010340:	4614      	mov	r4, r2
 8010342:	4605      	mov	r5, r0
 8010344:	b118      	cbz	r0, 801034e <__swbuf_r+0x12>
 8010346:	6a03      	ldr	r3, [r0, #32]
 8010348:	b90b      	cbnz	r3, 801034e <__swbuf_r+0x12>
 801034a:	f7fe fff5 	bl	800f338 <__sinit>
 801034e:	69a3      	ldr	r3, [r4, #24]
 8010350:	60a3      	str	r3, [r4, #8]
 8010352:	89a3      	ldrh	r3, [r4, #12]
 8010354:	071a      	lsls	r2, r3, #28
 8010356:	d525      	bpl.n	80103a4 <__swbuf_r+0x68>
 8010358:	6923      	ldr	r3, [r4, #16]
 801035a:	b31b      	cbz	r3, 80103a4 <__swbuf_r+0x68>
 801035c:	6823      	ldr	r3, [r4, #0]
 801035e:	6922      	ldr	r2, [r4, #16]
 8010360:	1a98      	subs	r0, r3, r2
 8010362:	6963      	ldr	r3, [r4, #20]
 8010364:	b2f6      	uxtb	r6, r6
 8010366:	4283      	cmp	r3, r0
 8010368:	4637      	mov	r7, r6
 801036a:	dc04      	bgt.n	8010376 <__swbuf_r+0x3a>
 801036c:	4621      	mov	r1, r4
 801036e:	4628      	mov	r0, r5
 8010370:	f7ff fdf8 	bl	800ff64 <_fflush_r>
 8010374:	b9e0      	cbnz	r0, 80103b0 <__swbuf_r+0x74>
 8010376:	68a3      	ldr	r3, [r4, #8]
 8010378:	3b01      	subs	r3, #1
 801037a:	60a3      	str	r3, [r4, #8]
 801037c:	6823      	ldr	r3, [r4, #0]
 801037e:	1c5a      	adds	r2, r3, #1
 8010380:	6022      	str	r2, [r4, #0]
 8010382:	701e      	strb	r6, [r3, #0]
 8010384:	6962      	ldr	r2, [r4, #20]
 8010386:	1c43      	adds	r3, r0, #1
 8010388:	429a      	cmp	r2, r3
 801038a:	d004      	beq.n	8010396 <__swbuf_r+0x5a>
 801038c:	89a3      	ldrh	r3, [r4, #12]
 801038e:	07db      	lsls	r3, r3, #31
 8010390:	d506      	bpl.n	80103a0 <__swbuf_r+0x64>
 8010392:	2e0a      	cmp	r6, #10
 8010394:	d104      	bne.n	80103a0 <__swbuf_r+0x64>
 8010396:	4621      	mov	r1, r4
 8010398:	4628      	mov	r0, r5
 801039a:	f7ff fde3 	bl	800ff64 <_fflush_r>
 801039e:	b938      	cbnz	r0, 80103b0 <__swbuf_r+0x74>
 80103a0:	4638      	mov	r0, r7
 80103a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103a4:	4621      	mov	r1, r4
 80103a6:	4628      	mov	r0, r5
 80103a8:	f000 f806 	bl	80103b8 <__swsetup_r>
 80103ac:	2800      	cmp	r0, #0
 80103ae:	d0d5      	beq.n	801035c <__swbuf_r+0x20>
 80103b0:	f04f 37ff 	mov.w	r7, #4294967295
 80103b4:	e7f4      	b.n	80103a0 <__swbuf_r+0x64>
	...

080103b8 <__swsetup_r>:
 80103b8:	b538      	push	{r3, r4, r5, lr}
 80103ba:	4b2a      	ldr	r3, [pc, #168]	; (8010464 <__swsetup_r+0xac>)
 80103bc:	4605      	mov	r5, r0
 80103be:	6818      	ldr	r0, [r3, #0]
 80103c0:	460c      	mov	r4, r1
 80103c2:	b118      	cbz	r0, 80103cc <__swsetup_r+0x14>
 80103c4:	6a03      	ldr	r3, [r0, #32]
 80103c6:	b90b      	cbnz	r3, 80103cc <__swsetup_r+0x14>
 80103c8:	f7fe ffb6 	bl	800f338 <__sinit>
 80103cc:	89a3      	ldrh	r3, [r4, #12]
 80103ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80103d2:	0718      	lsls	r0, r3, #28
 80103d4:	d422      	bmi.n	801041c <__swsetup_r+0x64>
 80103d6:	06d9      	lsls	r1, r3, #27
 80103d8:	d407      	bmi.n	80103ea <__swsetup_r+0x32>
 80103da:	2309      	movs	r3, #9
 80103dc:	602b      	str	r3, [r5, #0]
 80103de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80103e2:	81a3      	strh	r3, [r4, #12]
 80103e4:	f04f 30ff 	mov.w	r0, #4294967295
 80103e8:	e034      	b.n	8010454 <__swsetup_r+0x9c>
 80103ea:	0758      	lsls	r0, r3, #29
 80103ec:	d512      	bpl.n	8010414 <__swsetup_r+0x5c>
 80103ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103f0:	b141      	cbz	r1, 8010404 <__swsetup_r+0x4c>
 80103f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103f6:	4299      	cmp	r1, r3
 80103f8:	d002      	beq.n	8010400 <__swsetup_r+0x48>
 80103fa:	4628      	mov	r0, r5
 80103fc:	f7ff f944 	bl	800f688 <_free_r>
 8010400:	2300      	movs	r3, #0
 8010402:	6363      	str	r3, [r4, #52]	; 0x34
 8010404:	89a3      	ldrh	r3, [r4, #12]
 8010406:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801040a:	81a3      	strh	r3, [r4, #12]
 801040c:	2300      	movs	r3, #0
 801040e:	6063      	str	r3, [r4, #4]
 8010410:	6923      	ldr	r3, [r4, #16]
 8010412:	6023      	str	r3, [r4, #0]
 8010414:	89a3      	ldrh	r3, [r4, #12]
 8010416:	f043 0308 	orr.w	r3, r3, #8
 801041a:	81a3      	strh	r3, [r4, #12]
 801041c:	6923      	ldr	r3, [r4, #16]
 801041e:	b94b      	cbnz	r3, 8010434 <__swsetup_r+0x7c>
 8010420:	89a3      	ldrh	r3, [r4, #12]
 8010422:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801042a:	d003      	beq.n	8010434 <__swsetup_r+0x7c>
 801042c:	4621      	mov	r1, r4
 801042e:	4628      	mov	r0, r5
 8010430:	f000 f88c 	bl	801054c <__smakebuf_r>
 8010434:	89a0      	ldrh	r0, [r4, #12]
 8010436:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801043a:	f010 0301 	ands.w	r3, r0, #1
 801043e:	d00a      	beq.n	8010456 <__swsetup_r+0x9e>
 8010440:	2300      	movs	r3, #0
 8010442:	60a3      	str	r3, [r4, #8]
 8010444:	6963      	ldr	r3, [r4, #20]
 8010446:	425b      	negs	r3, r3
 8010448:	61a3      	str	r3, [r4, #24]
 801044a:	6923      	ldr	r3, [r4, #16]
 801044c:	b943      	cbnz	r3, 8010460 <__swsetup_r+0xa8>
 801044e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010452:	d1c4      	bne.n	80103de <__swsetup_r+0x26>
 8010454:	bd38      	pop	{r3, r4, r5, pc}
 8010456:	0781      	lsls	r1, r0, #30
 8010458:	bf58      	it	pl
 801045a:	6963      	ldrpl	r3, [r4, #20]
 801045c:	60a3      	str	r3, [r4, #8]
 801045e:	e7f4      	b.n	801044a <__swsetup_r+0x92>
 8010460:	2000      	movs	r0, #0
 8010462:	e7f7      	b.n	8010454 <__swsetup_r+0x9c>
 8010464:	200001b4 	.word	0x200001b4

08010468 <_raise_r>:
 8010468:	291f      	cmp	r1, #31
 801046a:	b538      	push	{r3, r4, r5, lr}
 801046c:	4604      	mov	r4, r0
 801046e:	460d      	mov	r5, r1
 8010470:	d904      	bls.n	801047c <_raise_r+0x14>
 8010472:	2316      	movs	r3, #22
 8010474:	6003      	str	r3, [r0, #0]
 8010476:	f04f 30ff 	mov.w	r0, #4294967295
 801047a:	bd38      	pop	{r3, r4, r5, pc}
 801047c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801047e:	b112      	cbz	r2, 8010486 <_raise_r+0x1e>
 8010480:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010484:	b94b      	cbnz	r3, 801049a <_raise_r+0x32>
 8010486:	4620      	mov	r0, r4
 8010488:	f000 f830 	bl	80104ec <_getpid_r>
 801048c:	462a      	mov	r2, r5
 801048e:	4601      	mov	r1, r0
 8010490:	4620      	mov	r0, r4
 8010492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010496:	f000 b817 	b.w	80104c8 <_kill_r>
 801049a:	2b01      	cmp	r3, #1
 801049c:	d00a      	beq.n	80104b4 <_raise_r+0x4c>
 801049e:	1c59      	adds	r1, r3, #1
 80104a0:	d103      	bne.n	80104aa <_raise_r+0x42>
 80104a2:	2316      	movs	r3, #22
 80104a4:	6003      	str	r3, [r0, #0]
 80104a6:	2001      	movs	r0, #1
 80104a8:	e7e7      	b.n	801047a <_raise_r+0x12>
 80104aa:	2400      	movs	r4, #0
 80104ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80104b0:	4628      	mov	r0, r5
 80104b2:	4798      	blx	r3
 80104b4:	2000      	movs	r0, #0
 80104b6:	e7e0      	b.n	801047a <_raise_r+0x12>

080104b8 <raise>:
 80104b8:	4b02      	ldr	r3, [pc, #8]	; (80104c4 <raise+0xc>)
 80104ba:	4601      	mov	r1, r0
 80104bc:	6818      	ldr	r0, [r3, #0]
 80104be:	f7ff bfd3 	b.w	8010468 <_raise_r>
 80104c2:	bf00      	nop
 80104c4:	200001b4 	.word	0x200001b4

080104c8 <_kill_r>:
 80104c8:	b538      	push	{r3, r4, r5, lr}
 80104ca:	4d07      	ldr	r5, [pc, #28]	; (80104e8 <_kill_r+0x20>)
 80104cc:	2300      	movs	r3, #0
 80104ce:	4604      	mov	r4, r0
 80104d0:	4608      	mov	r0, r1
 80104d2:	4611      	mov	r1, r2
 80104d4:	602b      	str	r3, [r5, #0]
 80104d6:	f7f2 f9b9 	bl	800284c <_kill>
 80104da:	1c43      	adds	r3, r0, #1
 80104dc:	d102      	bne.n	80104e4 <_kill_r+0x1c>
 80104de:	682b      	ldr	r3, [r5, #0]
 80104e0:	b103      	cbz	r3, 80104e4 <_kill_r+0x1c>
 80104e2:	6023      	str	r3, [r4, #0]
 80104e4:	bd38      	pop	{r3, r4, r5, pc}
 80104e6:	bf00      	nop
 80104e8:	200047c0 	.word	0x200047c0

080104ec <_getpid_r>:
 80104ec:	f7f2 b9a6 	b.w	800283c <_getpid>

080104f0 <_malloc_usable_size_r>:
 80104f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104f4:	1f18      	subs	r0, r3, #4
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	bfbc      	itt	lt
 80104fa:	580b      	ldrlt	r3, [r1, r0]
 80104fc:	18c0      	addlt	r0, r0, r3
 80104fe:	4770      	bx	lr

08010500 <__swhatbuf_r>:
 8010500:	b570      	push	{r4, r5, r6, lr}
 8010502:	460c      	mov	r4, r1
 8010504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010508:	2900      	cmp	r1, #0
 801050a:	b096      	sub	sp, #88	; 0x58
 801050c:	4615      	mov	r5, r2
 801050e:	461e      	mov	r6, r3
 8010510:	da0d      	bge.n	801052e <__swhatbuf_r+0x2e>
 8010512:	89a3      	ldrh	r3, [r4, #12]
 8010514:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010518:	f04f 0100 	mov.w	r1, #0
 801051c:	bf0c      	ite	eq
 801051e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010522:	2340      	movne	r3, #64	; 0x40
 8010524:	2000      	movs	r0, #0
 8010526:	6031      	str	r1, [r6, #0]
 8010528:	602b      	str	r3, [r5, #0]
 801052a:	b016      	add	sp, #88	; 0x58
 801052c:	bd70      	pop	{r4, r5, r6, pc}
 801052e:	466a      	mov	r2, sp
 8010530:	f000 f848 	bl	80105c4 <_fstat_r>
 8010534:	2800      	cmp	r0, #0
 8010536:	dbec      	blt.n	8010512 <__swhatbuf_r+0x12>
 8010538:	9901      	ldr	r1, [sp, #4]
 801053a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801053e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010542:	4259      	negs	r1, r3
 8010544:	4159      	adcs	r1, r3
 8010546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801054a:	e7eb      	b.n	8010524 <__swhatbuf_r+0x24>

0801054c <__smakebuf_r>:
 801054c:	898b      	ldrh	r3, [r1, #12]
 801054e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010550:	079d      	lsls	r5, r3, #30
 8010552:	4606      	mov	r6, r0
 8010554:	460c      	mov	r4, r1
 8010556:	d507      	bpl.n	8010568 <__smakebuf_r+0x1c>
 8010558:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801055c:	6023      	str	r3, [r4, #0]
 801055e:	6123      	str	r3, [r4, #16]
 8010560:	2301      	movs	r3, #1
 8010562:	6163      	str	r3, [r4, #20]
 8010564:	b002      	add	sp, #8
 8010566:	bd70      	pop	{r4, r5, r6, pc}
 8010568:	ab01      	add	r3, sp, #4
 801056a:	466a      	mov	r2, sp
 801056c:	f7ff ffc8 	bl	8010500 <__swhatbuf_r>
 8010570:	9900      	ldr	r1, [sp, #0]
 8010572:	4605      	mov	r5, r0
 8010574:	4630      	mov	r0, r6
 8010576:	f7ff f8fb 	bl	800f770 <_malloc_r>
 801057a:	b948      	cbnz	r0, 8010590 <__smakebuf_r+0x44>
 801057c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010580:	059a      	lsls	r2, r3, #22
 8010582:	d4ef      	bmi.n	8010564 <__smakebuf_r+0x18>
 8010584:	f023 0303 	bic.w	r3, r3, #3
 8010588:	f043 0302 	orr.w	r3, r3, #2
 801058c:	81a3      	strh	r3, [r4, #12]
 801058e:	e7e3      	b.n	8010558 <__smakebuf_r+0xc>
 8010590:	89a3      	ldrh	r3, [r4, #12]
 8010592:	6020      	str	r0, [r4, #0]
 8010594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010598:	81a3      	strh	r3, [r4, #12]
 801059a:	9b00      	ldr	r3, [sp, #0]
 801059c:	6163      	str	r3, [r4, #20]
 801059e:	9b01      	ldr	r3, [sp, #4]
 80105a0:	6120      	str	r0, [r4, #16]
 80105a2:	b15b      	cbz	r3, 80105bc <__smakebuf_r+0x70>
 80105a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105a8:	4630      	mov	r0, r6
 80105aa:	f000 f81d 	bl	80105e8 <_isatty_r>
 80105ae:	b128      	cbz	r0, 80105bc <__smakebuf_r+0x70>
 80105b0:	89a3      	ldrh	r3, [r4, #12]
 80105b2:	f023 0303 	bic.w	r3, r3, #3
 80105b6:	f043 0301 	orr.w	r3, r3, #1
 80105ba:	81a3      	strh	r3, [r4, #12]
 80105bc:	89a3      	ldrh	r3, [r4, #12]
 80105be:	431d      	orrs	r5, r3
 80105c0:	81a5      	strh	r5, [r4, #12]
 80105c2:	e7cf      	b.n	8010564 <__smakebuf_r+0x18>

080105c4 <_fstat_r>:
 80105c4:	b538      	push	{r3, r4, r5, lr}
 80105c6:	4d07      	ldr	r5, [pc, #28]	; (80105e4 <_fstat_r+0x20>)
 80105c8:	2300      	movs	r3, #0
 80105ca:	4604      	mov	r4, r0
 80105cc:	4608      	mov	r0, r1
 80105ce:	4611      	mov	r1, r2
 80105d0:	602b      	str	r3, [r5, #0]
 80105d2:	f7f2 f99a 	bl	800290a <_fstat>
 80105d6:	1c43      	adds	r3, r0, #1
 80105d8:	d102      	bne.n	80105e0 <_fstat_r+0x1c>
 80105da:	682b      	ldr	r3, [r5, #0]
 80105dc:	b103      	cbz	r3, 80105e0 <_fstat_r+0x1c>
 80105de:	6023      	str	r3, [r4, #0]
 80105e0:	bd38      	pop	{r3, r4, r5, pc}
 80105e2:	bf00      	nop
 80105e4:	200047c0 	.word	0x200047c0

080105e8 <_isatty_r>:
 80105e8:	b538      	push	{r3, r4, r5, lr}
 80105ea:	4d06      	ldr	r5, [pc, #24]	; (8010604 <_isatty_r+0x1c>)
 80105ec:	2300      	movs	r3, #0
 80105ee:	4604      	mov	r4, r0
 80105f0:	4608      	mov	r0, r1
 80105f2:	602b      	str	r3, [r5, #0]
 80105f4:	f7f2 f999 	bl	800292a <_isatty>
 80105f8:	1c43      	adds	r3, r0, #1
 80105fa:	d102      	bne.n	8010602 <_isatty_r+0x1a>
 80105fc:	682b      	ldr	r3, [r5, #0]
 80105fe:	b103      	cbz	r3, 8010602 <_isatty_r+0x1a>
 8010600:	6023      	str	r3, [r4, #0]
 8010602:	bd38      	pop	{r3, r4, r5, pc}
 8010604:	200047c0 	.word	0x200047c0

08010608 <_init>:
 8010608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801060a:	bf00      	nop
 801060c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801060e:	bc08      	pop	{r3}
 8010610:	469e      	mov	lr, r3
 8010612:	4770      	bx	lr

08010614 <_fini>:
 8010614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010616:	bf00      	nop
 8010618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801061a:	bc08      	pop	{r3}
 801061c:	469e      	mov	lr, r3
 801061e:	4770      	bx	lr
