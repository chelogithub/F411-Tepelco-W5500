
F411-Tepelco-W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010374  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000968  08010514  08010514  00020514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e7c  08010e7c  000301b8  2**0
                  CONTENTS
  4 .ARM          00000008  08010e7c  08010e7c  00020e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e84  08010e84  000301b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e84  08010e84  00020e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e88  08010e88  00020e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b8  20000000  08010e8c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004614  200001b8  08011044  000301b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200047cc  08011044  000347cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015043  00000000  00000000  0003022b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d89  00000000  00000000  0004526e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00047ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e01  00000000  00000000  00049138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001858d  00000000  00000000  00049f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001771e  00000000  00000000  000624c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093792  00000000  00000000  00079be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054cc  00000000  00000000  0010d378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00112844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001b8 	.word	0x200001b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080104fc 	.word	0x080104fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001bc 	.word	0x200001bc
 80001dc:	080104fc 	.word	0x080104fc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b08b      	sub	sp, #44	; 0x2c
 8000698:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5500 Environment-------------------------//
	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069a:	4bcf      	ldr	r3, [pc, #828]	; (80009d8 <main+0x344>)
 800069c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a0:	22c0      	movs	r2, #192	; 0xc0
 80006a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.GAR[1]=168;
 80006a6:	4bcc      	ldr	r3, [pc, #816]	; (80009d8 <main+0x344>)
 80006a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ac:	22a8      	movs	r2, #168	; 0xa8
 80006ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.GAR[2]=0;
 80006b2:	4bc9      	ldr	r3, [pc, #804]	; (80009d8 <main+0x344>)
 80006b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.GAR[3]=1;
 80006be:	4bc6      	ldr	r3, [pc, #792]	; (80009d8 <main+0x344>)
 80006c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c4:	2201      	movs	r2, #1
 80006c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006ca:	4bc3      	ldr	r3, [pc, #780]	; (80009d8 <main+0x344>)
 80006cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d0:	22ff      	movs	r2, #255	; 0xff
 80006d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SUBR[1]=255;
 80006d6:	4bc0      	ldr	r3, [pc, #768]	; (80009d8 <main+0x344>)
 80006d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006dc:	22ff      	movs	r2, #255	; 0xff
 80006de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		ETH.SUBR[2]=255;
 80006e2:	4bbd      	ldr	r3, [pc, #756]	; (80009d8 <main+0x344>)
 80006e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006e8:	22ff      	movs	r2, #255	; 0xff
 80006ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SUBR[3]=0;
 80006ee:	4bba      	ldr	r3, [pc, #744]	; (80009d8 <main+0x344>)
 80006f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006fa:	4bb7      	ldr	r3, [pc, #732]	; (80009d8 <main+0x344>)
 80006fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000700:	2200      	movs	r2, #0
 8000702:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SHAR[1]=0x08;
 8000706:	4bb4      	ldr	r3, [pc, #720]	; (80009d8 <main+0x344>)
 8000708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800070c:	2208      	movs	r2, #8
 800070e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		ETH.SHAR[2]=0xDC;
 8000712:	4bb1      	ldr	r3, [pc, #708]	; (80009d8 <main+0x344>)
 8000714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000718:	22dc      	movs	r2, #220	; 0xdc
 800071a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		ETH.SHAR[3]=0x00;
 800071e:	4bae      	ldr	r3, [pc, #696]	; (80009d8 <main+0x344>)
 8000720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000724:	2200      	movs	r2, #0
 8000726:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		ETH.SHAR[4]=0xC0;
 800072a:	4bab      	ldr	r3, [pc, #684]	; (80009d8 <main+0x344>)
 800072c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000730:	22c0      	movs	r2, #192	; 0xc0
 8000732:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		ETH.SHAR[5]=0x03;
 8000736:	4ba8      	ldr	r3, [pc, #672]	; (80009d8 <main+0x344>)
 8000738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800073c:	2203      	movs	r2, #3
 800073e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 8000742:	4ba5      	ldr	r3, [pc, #660]	; (80009d8 <main+0x344>)
 8000744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000748:	22c0      	movs	r2, #192	; 0xc0
 800074a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		ETH.SIPR[1]=168;
 800074e:	4ba2      	ldr	r3, [pc, #648]	; (80009d8 <main+0x344>)
 8000750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000754:	22a8      	movs	r2, #168	; 0xa8
 8000756:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		ETH.SIPR[2]=0;
 800075a:	4b9f      	ldr	r3, [pc, #636]	; (80009d8 <main+0x344>)
 800075c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000760:	2200      	movs	r2, #0
 8000762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		ETH.SIPR[3]=34,//ETH.SIPR[3]=34,
 8000766:	4b9c      	ldr	r3, [pc, #624]	; (80009d8 <main+0x344>)
 8000768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800076c:	2222      	movs	r2, #34	; 0x22
 800076e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	//  Socket RX memory
		ETH.RMSR=0x55;
 8000772:	4b99      	ldr	r3, [pc, #612]	; (80009d8 <main+0x344>)
 8000774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000778:	2255      	movs	r2, #85	; 0x55
 800077a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	//  Socket TX memory
		ETH.TMSR=0x55;
 800077e:	4b96      	ldr	r3, [pc, #600]	; (80009d8 <main+0x344>)
 8000780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000784:	2255      	movs	r2, #85	; 0x55
 8000786:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	//  S0 Port Number
		ETH.S_PORT[0]=0x01; //01
 800078a:	4b93      	ldr	r3, [pc, #588]	; (80009d8 <main+0x344>)
 800078c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000790:	2201      	movs	r2, #1
 8000792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		ETH.S_PORT[1]=0xF6; //f6
 8000796:	4b90      	ldr	r3, [pc, #576]	; (80009d8 <main+0x344>)
 8000798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800079c:	22f6      	movs	r2, #246	; 0xf6
 800079e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	//	S0 Client IP ADDRESS
		ETH.S_DIPR[0]=192;
 80007a2:	4b8d      	ldr	r3, [pc, #564]	; (80009d8 <main+0x344>)
 80007a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a8:	22c0      	movs	r2, #192	; 0xc0
 80007aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		ETH.S_DIPR[1]=168;
 80007ae:	4b8a      	ldr	r3, [pc, #552]	; (80009d8 <main+0x344>)
 80007b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007b4:	22a8      	movs	r2, #168	; 0xa8
 80007b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		ETH.S_DIPR[2]=0;
 80007ba:	4b87      	ldr	r3, [pc, #540]	; (80009d8 <main+0x344>)
 80007bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		ETH.S_DIPR[3]=3;
 80007c6:	4b84      	ldr	r3, [pc, #528]	; (80009d8 <main+0x344>)
 80007c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007cc:	2203      	movs	r2, #3
 80007ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	//	S0 Client IP ADDRESS
		ETH.S_DPORT[0]=0x01;
 80007d2:	4b81      	ldr	r3, [pc, #516]	; (80009d8 <main+0x344>)
 80007d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007d8:	2201      	movs	r2, #1
 80007da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		ETH.S_DPORT[1]=0xF6;
 80007de:	4b7e      	ldr	r3, [pc, #504]	; (80009d8 <main+0x344>)
 80007e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007e4:	22f6      	movs	r2, #246	; 0xf6
 80007e6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

		ETH.gS_RX_BASE = 0x0000;
 80007ea:	4b7b      	ldr	r3, [pc, #492]	; (80009d8 <main+0x344>)
 80007ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f0:	2200      	movs	r2, #0
 80007f2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS_RX_MASK = 0x07FF;
 80007f6:	4b78      	ldr	r3, [pc, #480]	; (80009d8 <main+0x344>)
 80007f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007fc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000800:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS1_RX_BASE = 0x6800;
 8000804:	4b74      	ldr	r3, [pc, #464]	; (80009d8 <main+0x344>)
 8000806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800080a:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 800080e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS1_RX_MASK = 0x07FF;
 8000812:	4b71      	ldr	r3, [pc, #452]	; (80009d8 <main+0x344>)
 8000814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000818:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800081c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS2_RX_BASE = 0x7000;
 8000820:	4b6d      	ldr	r3, [pc, #436]	; (80009d8 <main+0x344>)
 8000822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000826:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800082a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS2_RX_MASK = 0x07FF;
 800082e:	4b6a      	ldr	r3, [pc, #424]	; (80009d8 <main+0x344>)
 8000830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000834:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000838:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS3_RX_BASE = 0x7800;
 800083c:	4b66      	ldr	r3, [pc, #408]	; (80009d8 <main+0x344>)
 800083e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000842:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000846:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS3_RX_MASK = 0x07FF;
 800084a:	4b63      	ldr	r3, [pc, #396]	; (80009d8 <main+0x344>)
 800084c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000850:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000854:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS_TX_BASE = 0x0000;
 8000858:	4b5f      	ldr	r3, [pc, #380]	; (80009d8 <main+0x344>)
 800085a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800085e:	2200      	movs	r2, #0
 8000860:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS_TX_MASK = 0x07FF;
 8000864:	4b5c      	ldr	r3, [pc, #368]	; (80009d8 <main+0x344>)
 8000866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800086a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800086e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS1_TX_BASE = 0x4800;
 8000872:	4b59      	ldr	r3, [pc, #356]	; (80009d8 <main+0x344>)
 8000874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000878:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		ETH.gS1_TX_MASK = 0x07FF;
 8000880:	4b55      	ldr	r3, [pc, #340]	; (80009d8 <main+0x344>)
 8000882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000886:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800088a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		ETH.gS2_TX_BASE = 0x5000;
 800088e:	4b52      	ldr	r3, [pc, #328]	; (80009d8 <main+0x344>)
 8000890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000894:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8000898:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		ETH.gS2_TX_MASK = 0x07FF;
 800089c:	4b4e      	ldr	r3, [pc, #312]	; (80009d8 <main+0x344>)
 800089e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		ETH.gS3_TX_BASE = 0x5800;
 80008aa:	4b4b      	ldr	r3, [pc, #300]	; (80009d8 <main+0x344>)
 80008ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b0:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b4:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		ETH.gS3_TX_MASK = 0x07FF;
 80008b8:	4b47      	ldr	r3, [pc, #284]	; (80009d8 <main+0x344>)
 80008ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

		ETH.S_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c6:	4b44      	ldr	r3, [pc, #272]	; (80009d8 <main+0x344>)
 80008c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

		spi_no_debug=1;
 80008d2:	4b42      	ldr	r3, [pc, #264]	; (80009dc <main+0x348>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80008d8:	4b3f      	ldr	r3, [pc, #252]	; (80009d8 <main+0x344>)
 80008da:	4a41      	ldr	r2, [pc, #260]	; (80009e0 <main+0x34c>)
 80008dc:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80008de:	4b3e      	ldr	r3, [pc, #248]	; (80009d8 <main+0x344>)
 80008e0:	2210      	movs	r2, #16
 80008e2:	811a      	strh	r2, [r3, #8]
		ETH.RST_PORT=GPIOB;
 80008e4:	4b3c      	ldr	r3, [pc, #240]	; (80009d8 <main+0x344>)
 80008e6:	4a3f      	ldr	r2, [pc, #252]	; (80009e4 <main+0x350>)
 80008e8:	60da      	str	r2, [r3, #12]
		ETH.RST_PIN=GPIO_PIN_0;
 80008ea:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <main+0x344>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	821a      	strh	r2, [r3, #16]
		ETH.SPI= &hspi1;
 80008f0:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <main+0x344>)
 80008f2:	4a3d      	ldr	r2, [pc, #244]	; (80009e8 <main+0x354>)
 80008f4:	601a      	str	r2, [r3, #0]
	  //----------------------- ETHERNET W5500 Environment-------------------------//
	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008f6:	483d      	ldr	r0, [pc, #244]	; (80009ec <main+0x358>)
 80008f8:	f005 ff2e 	bl	8006758 <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008fc:	493c      	ldr	r1, [pc, #240]	; (80009f0 <main+0x35c>)
 80008fe:	483d      	ldr	r0, [pc, #244]	; (80009f4 <main+0x360>)
 8000900:	f00e fe16 	bl	800f530 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 8000904:	493c      	ldr	r1, [pc, #240]	; (80009f8 <main+0x364>)
 8000906:	483d      	ldr	r0, [pc, #244]	; (80009fc <main+0x368>)
 8000908:	f00e fe12 	bl	800f530 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 800090c:	493c      	ldr	r1, [pc, #240]	; (8000a00 <main+0x36c>)
 800090e:	483d      	ldr	r0, [pc, #244]	; (8000a04 <main+0x370>)
 8000910:	f00e fe0e 	bl	800f530 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 8000914:	493c      	ldr	r1, [pc, #240]	; (8000a08 <main+0x374>)
 8000916:	483d      	ldr	r0, [pc, #244]	; (8000a0c <main+0x378>)
 8000918:	f00e fe0a 	bl	800f530 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 800091c:	493c      	ldr	r1, [pc, #240]	; (8000a10 <main+0x37c>)
 800091e:	483d      	ldr	r0, [pc, #244]	; (8000a14 <main+0x380>)
 8000920:	f00e fe06 	bl	800f530 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 8000924:	493c      	ldr	r1, [pc, #240]	; (8000a18 <main+0x384>)
 8000926:	483d      	ldr	r0, [pc, #244]	; (8000a1c <main+0x388>)
 8000928:	f00e fe02 	bl	800f530 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 800092c:	493c      	ldr	r1, [pc, #240]	; (8000a20 <main+0x38c>)
 800092e:	483d      	ldr	r0, [pc, #244]	; (8000a24 <main+0x390>)
 8000930:	f00e fdfe 	bl	800f530 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 8000934:	493c      	ldr	r1, [pc, #240]	; (8000a28 <main+0x394>)
 8000936:	483d      	ldr	r0, [pc, #244]	; (8000a2c <main+0x398>)
 8000938:	f00e fdfa 	bl	800f530 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 800093c:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <main+0x358>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000944:	4b29      	ldr	r3, [pc, #164]	; (80009ec <main+0x358>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <main+0x358>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 8000954:	4b25      	ldr	r3, [pc, #148]	; (80009ec <main+0x358>)
 8000956:	2200      	movs	r2, #0
 8000958:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 800095c:	4b23      	ldr	r3, [pc, #140]	; (80009ec <main+0x358>)
 800095e:	2200      	movs	r2, #0
 8000960:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <main+0x358>)
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <main+0x358>)
 800096e:	2206      	movs	r2, #6
 8000970:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <main+0x358>)
 8000976:	2201      	movs	r2, #1
 8000978:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <main+0x358>)
 800097e:	2203      	movs	r2, #3
 8000980:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <main+0x358>)
 8000986:	2200      	movs	r2, #0
 8000988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 800098c:	4b17      	ldr	r3, [pc, #92]	; (80009ec <main+0x358>)
 800098e:	2200      	movs	r2, #0
 8000990:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <main+0x358>)
 8000996:	2200      	movs	r2, #0
 8000998:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <main+0x358>)
 800099e:	220a      	movs	r2, #10
 80009a0:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <main+0x358>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <main+0x358>)
 80009ae:	2233      	movs	r2, #51	; 0x33
 80009b0:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <main+0x358>)
 80009b6:	2234      	movs	r2, #52	; 0x34
 80009b8:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 80009bc:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <main+0x358>)
 80009be:	2235      	movs	r2, #53	; 0x35
 80009c0:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <main+0x358>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009cc:	4b07      	ldr	r3, [pc, #28]	; (80009ec <main+0x358>)
 80009ce:	2264      	movs	r2, #100	; 0x64
 80009d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80009d4:	e02c      	b.n	8000a30 <main+0x39c>
 80009d6:	bf00      	nop
 80009d8:	20000304 	.word	0x20000304
 80009dc:	20004214 	.word	0x20004214
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020400 	.word	0x40020400
 80009e8:	200001d4 	.word	0x200001d4
 80009ec:	200023d4 	.word	0x200023d4
 80009f0:	20000044 	.word	0x20000044
 80009f4:	200023da 	.word	0x200023da
 80009f8:	2000004c 	.word	0x2000004c
 80009fc:	200023fa 	.word	0x200023fa
 8000a00:	20000058 	.word	0x20000058
 8000a04:	2000240a 	.word	0x2000240a
 8000a08:	20000068 	.word	0x20000068
 8000a0c:	2000241a 	.word	0x2000241a
 8000a10:	20000070 	.word	0x20000070
 8000a14:	20002420 	.word	0x20002420
 8000a18:	20000080 	.word	0x20000080
 8000a1c:	20002436 	.word	0x20002436
 8000a20:	20000090 	.word	0x20000090
 8000a24:	20002446 	.word	0x20002446
 8000a28:	200000a0 	.word	0x200000a0
 8000a2c:	20002430 	.word	0x20002430
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 8000a30:	4bb4      	ldr	r3, [pc, #720]	; (8000d04 <main+0x670>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._DBG_EN=1;
 8000a38:	4bb2      	ldr	r3, [pc, #712]	; (8000d04 <main+0x670>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
		wf.RESET_PORT=GPIOA;
 8000a40:	4bb0      	ldr	r3, [pc, #704]	; (8000d04 <main+0x670>)
 8000a42:	4ab1      	ldr	r2, [pc, #708]	; (8000d08 <main+0x674>)
 8000a44:	601a      	str	r2, [r3, #0]
		wf.RESET_PIN=GPIO_PIN_8;
 8000a46:	4baf      	ldr	r3, [pc, #700]	; (8000d04 <main+0x670>)
 8000a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a4c:	809a      	strh	r2, [r3, #4]
	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//
		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a4e:	48af      	ldr	r0, [pc, #700]	; (8000d0c <main+0x678>)
 8000a50:	f00a ffbe 	bl	800b9d0 <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a54:	4bad      	ldr	r3, [pc, #692]	; (8000d0c <main+0x678>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	711a      	strb	r2, [r3, #4]
		ModBUS_Config(&mb_wf);		//WIFI como servidor TCP, recibe comadno ModBUS
 8000a5a:	48ad      	ldr	r0, [pc, #692]	; (8000d10 <main+0x67c>)
 8000a5c:	f00a ffb8 	bl	800b9d0 <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a60:	4bab      	ldr	r3, [pc, #684]	; (8000d10 <main+0x67c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	711a      	strb	r2, [r3, #4]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a66:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a6a:	2103      	movs	r1, #3
 8000a6c:	48a8      	ldr	r0, [pc, #672]	; (8000d10 <main+0x67c>)
 8000a6e:	f00b f852 	bl	800bb16 <ModBUS_F03_Assign>
		pos_decimal[0]=1;
 8000a72:	4ba8      	ldr	r3, [pc, #672]	; (8000d14 <main+0x680>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	701a      	strb	r2, [r3, #0]
		pos_decimal[1]=1;
 8000a78:	4ba6      	ldr	r3, [pc, #664]	; (8000d14 <main+0x680>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	705a      	strb	r2, [r3, #1]
		pos_decimal[2]=1;
 8000a7e:	4ba5      	ldr	r3, [pc, #660]	; (8000d14 <main+0x680>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	709a      	strb	r2, [r3, #2]
		pos_decimal[3]=1;
 8000a84:	4ba3      	ldr	r3, [pc, #652]	; (8000d14 <main+0x680>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	70da      	strb	r2, [r3, #3]
		pos_decimal[4]=1;
 8000a8a:	4ba2      	ldr	r3, [pc, #648]	; (8000d14 <main+0x680>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	711a      	strb	r2, [r3, #4]
		pos_decimal[5]=1;
 8000a90:	4ba0      	ldr	r3, [pc, #640]	; (8000d14 <main+0x680>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	715a      	strb	r2, [r3, #5]
		pos_decimal[6]=1;
 8000a96:	4b9f      	ldr	r3, [pc, #636]	; (8000d14 <main+0x680>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	719a      	strb	r2, [r3, #6]
		pos_decimal[7]=1;
 8000a9c:	4b9d      	ldr	r3, [pc, #628]	; (8000d14 <main+0x680>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	71da      	strb	r2, [r3, #7]
		pos_decimal[8]=1;
 8000aa2:	4b9c      	ldr	r3, [pc, #624]	; (8000d14 <main+0x680>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	721a      	strb	r2, [r3, #8]
		pos_decimal[9]=1;
 8000aa8:	4b9a      	ldr	r3, [pc, #616]	; (8000d14 <main+0x680>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	725a      	strb	r2, [r3, #9]
		pos_decimal[10]=1;
 8000aae:	4b99      	ldr	r3, [pc, #612]	; (8000d14 <main+0x680>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	729a      	strb	r2, [r3, #10]
		pos_decimal[11]=1;
 8000ab4:	4b97      	ldr	r3, [pc, #604]	; (8000d14 <main+0x680>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	72da      	strb	r2, [r3, #11]
		pos_decimal[12]=1;
 8000aba:	4b96      	ldr	r3, [pc, #600]	; (8000d14 <main+0x680>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	731a      	strb	r2, [r3, #12]
		pos_decimal[13]=1;
 8000ac0:	4b94      	ldr	r3, [pc, #592]	; (8000d14 <main+0x680>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	735a      	strb	r2, [r3, #13]
		pos_decimal[14]=1;
 8000ac6:	4b93      	ldr	r3, [pc, #588]	; (8000d14 <main+0x680>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	739a      	strb	r2, [r3, #14]
		pos_decimal[15]=1;
 8000acc:	4b91      	ldr	r3, [pc, #580]	; (8000d14 <main+0x680>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	73da      	strb	r2, [r3, #15]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad2:	f001 ffb1 	bl	8002a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad6:	f000 faf9 	bl	80010cc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000ada:	4b8f      	ldr	r3, [pc, #572]	; (8000d18 <main+0x684>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a8f      	ldr	r2, [pc, #572]	; (8000d1c <main+0x688>)
 8000ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae4:	099b      	lsrs	r3, r3, #6
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fd8a 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aec:	f000 fc5a 	bl	80013a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000af0:	f000 fb54 	bl	800119c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000af4:	f000 fb88 	bl	8001208 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000af8:	f000 fc00 	bl	80012fc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000afc:	f000 fc28 	bl	8001350 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

     ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000b00:	210e      	movs	r1, #14
 8000b02:	4887      	ldr	r0, [pc, #540]	; (8000d20 <main+0x68c>)
 8000b04:	f000 fcf4 	bl	80014f0 <ITM0_Write>
     HAL_UART_Transmit_IT(&huart2,"\r\n INICIO OK \r\n",strlen("\r\n INICIO OK \r\n"));
 8000b08:	220f      	movs	r2, #15
 8000b0a:	4986      	ldr	r1, [pc, #536]	; (8000d24 <main+0x690>)
 8000b0c:	4886      	ldr	r0, [pc, #536]	; (8000d28 <main+0x694>)
 8000b0e:	f004 fd4b 	bl	80055a8 <HAL_UART_Transmit_IT>
	 HW_RESET(&wf);
 8000b12:	487c      	ldr	r0, [pc, #496]	; (8000d04 <main+0x670>)
 8000b14:	f005 fd1c 	bl	8006550 <HW_RESET>
	 if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000b18:	4b7a      	ldr	r3, [pc, #488]	; (8000d04 <main+0x670>)
 8000b1a:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d003      	beq.n	8000b2a <main+0x496>
 8000b22:	2113      	movs	r1, #19
 8000b24:	4881      	ldr	r0, [pc, #516]	; (8000d2c <main+0x698>)
 8000b26:	f000 fce3 	bl	80014f0 <ITM0_Write>
	 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4980      	ldr	r1, [pc, #512]	; (8000d30 <main+0x69c>)
 8000b2e:	4881      	ldr	r0, [pc, #516]	; (8000d34 <main+0x6a0>)
 8000b30:	f004 fd7f 	bl	8005632 <HAL_UART_Receive_IT>
	 if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5500 \r\n",strlen("\r\n SET-UP W5500 \r\n"));
 8000b34:	4b80      	ldr	r3, [pc, #512]	; (8000d38 <main+0x6a4>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <main+0x4b0>
 8000b3c:	2112      	movs	r1, #18
 8000b3e:	487f      	ldr	r0, [pc, #508]	; (8000d3c <main+0x6a8>)
 8000b40:	f000 fcd6 	bl	80014f0 <ITM0_Write>


     SPI_ETH_PHY_RESET(&ETH);
 8000b44:	487e      	ldr	r0, [pc, #504]	; (8000d40 <main+0x6ac>)
 8000b46:	f00c fa9f 	bl	800d088 <SPI_ETH_PHY_RESET>
     HAL_Delay(800);
 8000b4a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000b4e:	f001 ffe5 	bl	8002b1c <HAL_Delay>
     eth_init(&ETH);
 8000b52:	487b      	ldr	r0, [pc, #492]	; (8000d40 <main+0x6ac>)
 8000b54:	f00c fc82 	bl	800d45c <eth_init>
     SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b58:	4979      	ldr	r1, [pc, #484]	; (8000d40 <main+0x6ac>)
 8000b5a:	487a      	ldr	r0, [pc, #488]	; (8000d44 <main+0x6b0>)
 8000b5c:	f00d f803 	bl	800db66 <SPI_ETH_SNIFF>
     HAL_Delay(800);
 8000b60:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000b64:	f001 ffda 	bl	8002b1c <HAL_Delay>
   	 eth_socket_init(&ETH,S0_REG);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	4875      	ldr	r0, [pc, #468]	; (8000d40 <main+0x6ac>)
 8000b6c:	f00c fd48 	bl	800d600 <eth_socket_init>
   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b70:	4973      	ldr	r1, [pc, #460]	; (8000d40 <main+0x6ac>)
 8000b72:	4874      	ldr	r0, [pc, #464]	; (8000d44 <main+0x6b0>)
 8000b74:	f00c fff7 	bl	800db66 <SPI_ETH_SNIFF>
	 uint16_t b=0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	81bb      	strh	r3, [r7, #12]
	 uint8_t spi_Data[2];
	 b = SPI_ETH_REG(&ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	9301      	str	r3, [sp, #4]
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	2300      	movs	r3, #0
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2124      	movs	r1, #36	; 0x24
 8000b8c:	486c      	ldr	r0, [pc, #432]	; (8000d40 <main+0x6ac>)
 8000b8e:	f00c fad2 	bl	800d136 <SPI_ETH_REG>
 8000b92:	4603      	mov	r3, r0
 8000b94:	81bb      	strh	r3, [r7, #12]
	 eth_wr_SOCKET_MODE(&ETH,S0_REG,MODE_TCP);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2101      	movs	r1, #1
 8000b9a:	4869      	ldr	r0, [pc, #420]	; (8000d40 <main+0x6ac>)
 8000b9c:	f00c fc3c 	bl	800d418 <eth_wr_SOCKET_MODE>
   	 SPI_ETH_REG(&ETH, S_DIPR, S0_REG,SPI_WRITE, ETH.S_DIPR,4);									// client
 8000ba0:	2304      	movs	r3, #4
 8000ba2:	9301      	str	r3, [sp, #4]
 8000ba4:	4b68      	ldr	r3, [pc, #416]	; (8000d48 <main+0x6b4>)
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	2301      	movs	r3, #1
 8000baa:	2201      	movs	r2, #1
 8000bac:	210c      	movs	r1, #12
 8000bae:	4864      	ldr	r0, [pc, #400]	; (8000d40 <main+0x6ac>)
 8000bb0:	f00c fac1 	bl	800d136 <SPI_ETH_REG>
   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 8000bb4:	212e      	movs	r1, #46	; 0x2e
 8000bb6:	4865      	ldr	r0, [pc, #404]	; (8000d4c <main+0x6b8>)
 8000bb8:	f000 fc9a 	bl	80014f0 <ITM0_Write>
   	 SPI_ETH_REG(&ETH, S_DPORT, S0_REG,SPI_WRITE, ETH.S_DPORT,2);									// client
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	4b63      	ldr	r3, [pc, #396]	; (8000d50 <main+0x6bc>)
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2110      	movs	r1, #16
 8000bca:	485d      	ldr	r0, [pc, #372]	; (8000d40 <main+0x6ac>)
 8000bcc:	f00c fab3 	bl	800d136 <SPI_ETH_REG>
   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	4860      	ldr	r0, [pc, #384]	; (8000d54 <main+0x6c0>)
 8000bd4:	f000 fc8c 	bl	80014f0 <ITM0_Write>
   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000bd8:	4959      	ldr	r1, [pc, #356]	; (8000d40 <main+0x6ac>)
 8000bda:	485a      	ldr	r0, [pc, #360]	; (8000d44 <main+0x6b0>)
 8000bdc:	f00c ffc3 	bl	800db66 <SPI_ETH_SNIFF>
   	 eth_wr_SOCKET_CMD(&ETH, S0_REG,OPEN );
 8000be0:	2201      	movs	r2, #1
 8000be2:	2101      	movs	r1, #1
 8000be4:	4856      	ldr	r0, [pc, #344]	; (8000d40 <main+0x6ac>)
 8000be6:	f00c fbf5 	bl	800d3d4 <eth_wr_SOCKET_CMD>

   	 HAL_Delay(1000);
 8000bea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bee:	f001 ff95 	bl	8002b1c <HAL_Delay>
   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000bf2:	4953      	ldr	r1, [pc, #332]	; (8000d40 <main+0x6ac>)
 8000bf4:	4853      	ldr	r0, [pc, #332]	; (8000d44 <main+0x6b0>)
 8000bf6:	f00c ffb6 	bl	800db66 <SPI_ETH_SNIFF>

	 //SPI_READ_EN=1;
   	 //------------------------ RUN ESP -----------------------------------//
     if(ESP8266_HW_Init(&huart1)==1)
 8000bfa:	484e      	ldr	r0, [pc, #312]	; (8000d34 <main+0x6a0>)
 8000bfc:	f001 fbca 	bl	8002394 <ESP8266_HW_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d111      	bne.n	8000c2a <main+0x596>
     {
		  ESP_HW_Init=1;
 8000c06:	4b54      	ldr	r3, [pc, #336]	; (8000d58 <main+0x6c4>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000c0c:	4b3d      	ldr	r3, [pc, #244]	; (8000d04 <main+0x670>)
 8000c0e:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d003      	beq.n	8000c1e <main+0x58a>
 8000c16:	2113      	movs	r1, #19
 8000c18:	4850      	ldr	r0, [pc, #320]	; (8000d5c <main+0x6c8>)
 8000c1a:	f000 fc69 	bl	80014f0 <ITM0_Write>
		  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000c1e:	2213      	movs	r2, #19
 8000c20:	494e      	ldr	r1, [pc, #312]	; (8000d5c <main+0x6c8>)
 8000c22:	4841      	ldr	r0, [pc, #260]	; (8000d28 <main+0x694>)
 8000c24:	f004 fcc0 	bl	80055a8 <HAL_UART_Transmit_IT>
 8000c28:	e02e      	b.n	8000c88 <main+0x5f4>
     }
     else
     {

    	 HW_RESET(&wf);
 8000c2a:	4836      	ldr	r0, [pc, #216]	; (8000d04 <main+0x670>)
 8000c2c:	f005 fc90 	bl	8006550 <HW_RESET>
		 ESP_REinit=0;
 8000c30:	4b4b      	ldr	r3, [pc, #300]	; (8000d60 <main+0x6cc>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
			  if(ESP8266_HW_Init(&huart1)==1)
 8000c36:	483f      	ldr	r0, [pc, #252]	; (8000d34 <main+0x6a0>)
 8000c38:	f001 fbac 	bl	8002394 <ESP8266_HW_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d111      	bne.n	8000c66 <main+0x5d2>
				  {
					  ESP_HW_Init=1;
 8000c42:	4b45      	ldr	r3, [pc, #276]	; (8000d58 <main+0x6c4>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
					  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000c48:	4b2e      	ldr	r3, [pc, #184]	; (8000d04 <main+0x670>)
 8000c4a:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d003      	beq.n	8000c5a <main+0x5c6>
 8000c52:	2113      	movs	r1, #19
 8000c54:	4841      	ldr	r0, [pc, #260]	; (8000d5c <main+0x6c8>)
 8000c56:	f000 fc4b 	bl	80014f0 <ITM0_Write>
					  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Init2 OK\r\n",strlen("\r\n ESP HW Init2 OK\r\n"));
 8000c5a:	2214      	movs	r2, #20
 8000c5c:	4941      	ldr	r1, [pc, #260]	; (8000d64 <main+0x6d0>)
 8000c5e:	4832      	ldr	r0, [pc, #200]	; (8000d28 <main+0x694>)
 8000c60:	f004 fca2 	bl	80055a8 <HAL_UART_Transmit_IT>
 8000c64:	e010      	b.n	8000c88 <main+0x5f4>
				  }
				  else
				  {
					  ESP_HW_Init=0;
 8000c66:	4b3c      	ldr	r3, [pc, #240]	; (8000d58 <main+0x6c4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
					  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000c6c:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <main+0x670>)
 8000c6e:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d003      	beq.n	8000c7e <main+0x5ea>
 8000c76:	2115      	movs	r1, #21
 8000c78:	483b      	ldr	r0, [pc, #236]	; (8000d68 <main+0x6d4>)
 8000c7a:	f000 fc39 	bl	80014f0 <ITM0_Write>
					  HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Fail\r\n",strlen("\r\n ESP HW Fail\r\n"));
 8000c7e:	2210      	movs	r2, #16
 8000c80:	493a      	ldr	r1, [pc, #232]	; (8000d6c <main+0x6d8>)
 8000c82:	4829      	ldr	r0, [pc, #164]	; (8000d28 <main+0x694>)
 8000c84:	f004 fc90 	bl	80055a8 <HAL_UART_Transmit_IT>
				  }
     }
     //------------------------ RUN ESP -----------------------------------//

     HAL_Delay(1000);
 8000c88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c8c:	f001 ff46 	bl	8002b1c <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		 SPI_READ_EN=1;
 8000c90:	4b37      	ldr	r3, [pc, #220]	; (8000d70 <main+0x6dc>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	601a      	str	r2, [r3, #0]





		  	  if (ESP_HW_Init==1)
 8000c96:	4b30      	ldr	r3, [pc, #192]	; (8000d58 <main+0x6c4>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	f040 80bc 	bne.w	8000e18 <main+0x784>
		  	  {
		  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S_data_available))
 8000ca0:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <main+0x6e0>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	f040 80b7 	bne.w	8000e18 <main+0x784>
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <main+0x670>)
 8000cac:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	f040 80b1 	bne.w	8000e18 <main+0x784>
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <main+0x670>)
 8000cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cbc:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000cc0:	f340 80aa 	ble.w	8000e18 <main+0x784>
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <main+0x6ac>)
 8000cc6:	7e9b      	ldrb	r3, [r3, #26]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f000 80a5 	beq.w	8000e18 <main+0x784>
		  			{	ETH.S_data_available=0;
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <main+0x6ac>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	769a      	strb	r2, [r3, #26]
		  				wf_snd_flag_ticks=0;
 8000cd4:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <main+0x6e4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
		  				WF_SND_FLAG=0;
 8000cda:	4b26      	ldr	r3, [pc, #152]	; (8000d74 <main+0x6e0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
		  				HAL_UART_Transmit_IT(&huart2,"\r\n ENTER TO SEND DATA \r\n",strlen("\r\n ENTER TO SEND DATA \r\n"));
 8000ce0:	2218      	movs	r2, #24
 8000ce2:	4926      	ldr	r1, [pc, #152]	; (8000d7c <main+0x6e8>)
 8000ce4:	4810      	ldr	r0, [pc, #64]	; (8000d28 <main+0x694>)
 8000ce6:	f004 fc5f 	bl	80055a8 <HAL_UART_Transmit_IT>
		  				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000cea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cee:	4824      	ldr	r0, [pc, #144]	; (8000d80 <main+0x6ec>)
 8000cf0:	f002 fb8f 	bl	8003412 <HAL_GPIO_TogglePin>
		  				ITM0_Write("\r\n#RED#WF-SE GENERA INFO Y ENVIA\r\n",strlen("\r\n#RED#WF-SE GENERA INFO Y ENVIA\r\n"));
 8000cf4:	2122      	movs	r1, #34	; 0x22
 8000cf6:	4823      	ldr	r0, [pc, #140]	; (8000d84 <main+0x6f0>)
 8000cf8:	f000 fbfa 	bl	80014f0 <ITM0_Write>

		  				for(uint8_t i=0;i<=16;i++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]
 8000d00:	e050      	b.n	8000da4 <main+0x710>
 8000d02:	bf00      	nop
 8000d04:	200023d4 	.word	0x200023d4
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	20003124 	.word	0x20003124
 8000d10:	20003774 	.word	0x20003774
 8000d14:	20004218 	.word	0x20004218
 8000d18:	200000a4 	.word	0x200000a4
 8000d1c:	10624dd3 	.word	0x10624dd3
 8000d20:	08010514 	.word	0x08010514
 8000d24:	08010524 	.word	0x08010524
 8000d28:	200002b8 	.word	0x200002b8
 8000d2c:	08010534 	.word	0x08010534
 8000d30:	20004640 	.word	0x20004640
 8000d34:	20000274 	.word	0x20000274
 8000d38:	200041c4 	.word	0x200041c4
 8000d3c:	08010548 	.word	0x08010548
 8000d40:	20000304 	.word	0x20000304
 8000d44:	20001378 	.word	0x20001378
 8000d48:	20001348 	.word	0x20001348
 8000d4c:	0801055c 	.word	0x0801055c
 8000d50:	2000134c 	.word	0x2000134c
 8000d54:	0801058c 	.word	0x0801058c
 8000d58:	2000422a 	.word	0x2000422a
 8000d5c:	080105b0 	.word	0x080105b0
 8000d60:	20004228 	.word	0x20004228
 8000d64:	080105c4 	.word	0x080105c4
 8000d68:	080105dc 	.word	0x080105dc
 8000d6c:	080105f4 	.word	0x080105f4
 8000d70:	20004238 	.word	0x20004238
 8000d74:	200041c5 	.word	0x200041c5
 8000d78:	200041c8 	.word	0x200041c8
 8000d7c:	08010608 	.word	0x08010608
 8000d80:	40020800 	.word	0x40020800
 8000d84:	08010624 	.word	0x08010624
		  				{
		  					datos[i]=ModBUS_F03_Read(&mb_eth,i);
 8000d88:	7bfc      	ldrb	r4, [r7, #15]
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	48a8      	ldr	r0, [pc, #672]	; (8001030 <main+0x99c>)
 8000d90:	f00a feef 	bl	800bb72 <ModBUS_F03_Read>
 8000d94:	4603      	mov	r3, r0
 8000d96:	461a      	mov	r2, r3
 8000d98:	4ba6      	ldr	r3, [pc, #664]	; (8001034 <main+0x9a0>)
 8000d9a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		  				for(uint8_t i=0;i<=16;i++)
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	3301      	adds	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	2b10      	cmp	r3, #16
 8000da8:	d9ee      	bls.n	8000d88 <main+0x6f4>
		  				}

		  				if(httpPOST2(ENDPOINT, SERVER_IP,PORT,&datos,&pos_decimal,16,TEST_2,post, body, 512))
 8000daa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dae:	9305      	str	r3, [sp, #20]
 8000db0:	4ba1      	ldr	r3, [pc, #644]	; (8001038 <main+0x9a4>)
 8000db2:	9304      	str	r3, [sp, #16]
 8000db4:	4ba1      	ldr	r3, [pc, #644]	; (800103c <main+0x9a8>)
 8000db6:	9303      	str	r3, [sp, #12]
 8000db8:	2302      	movs	r3, #2
 8000dba:	9302      	str	r3, [sp, #8]
 8000dbc:	2310      	movs	r3, #16
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	4b9f      	ldr	r3, [pc, #636]	; (8001040 <main+0x9ac>)
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	4b9b      	ldr	r3, [pc, #620]	; (8001034 <main+0x9a0>)
 8000dc6:	4a9f      	ldr	r2, [pc, #636]	; (8001044 <main+0x9b0>)
 8000dc8:	499f      	ldr	r1, [pc, #636]	; (8001048 <main+0x9b4>)
 8000dca:	48a0      	ldr	r0, [pc, #640]	; (800104c <main+0x9b8>)
 8000dcc:	f00a fc9a 	bl	800b704 <httpPOST2>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d020      	beq.n	8000e18 <main+0x784>
		  				{
  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000dd6:	4899      	ldr	r0, [pc, #612]	; (800103c <main+0x9a8>)
 8000dd8:	f7ff fa0c 	bl	80001f4 <strlen>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	2341      	movs	r3, #65	; 0x41
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2300      	movs	r3, #0
 8000de6:	4995      	ldr	r1, [pc, #596]	; (800103c <main+0x9a8>)
 8000de8:	4899      	ldr	r0, [pc, #612]	; (8001050 <main+0x9bc>)
 8000dea:	f00e f8c9 	bl	800ef80 <CopiaVector>
  							wf._n_D2SND=strlen(post);
 8000dee:	4893      	ldr	r0, [pc, #588]	; (800103c <main+0x9a8>)
 8000df0:	f7ff fa00 	bl	80001f4 <strlen>
 8000df4:	4603      	mov	r3, r0
 8000df6:	461a      	mov	r2, r3
 8000df8:	4b96      	ldr	r3, [pc, #600]	; (8001054 <main+0x9c0>)
 8000dfa:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000dfe:	4b95      	ldr	r3, [pc, #596]	; (8001054 <main+0x9c0>)
 8000e00:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d807      	bhi.n	8000e18 <main+0x784>
  							{
  								EnviarDatos(&wf);
 8000e08:	4892      	ldr	r0, [pc, #584]	; (8001054 <main+0x9c0>)
 8000e0a:	f005 fc8f 	bl	800672c <EnviarDatos>
  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000e0e:	4b91      	ldr	r3, [pc, #580]	; (8001054 <main+0x9c0>)
 8000e10:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000e14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		  				}*/
		  			}
		  	  }
		  /**************[ FIN PIDO ENVIAR DATOS ]**************/

		  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000e18:	4b8f      	ldr	r3, [pc, #572]	; (8001058 <main+0x9c4>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d003      	beq.n	8000e28 <main+0x794>
 8000e20:	4b8e      	ldr	r3, [pc, #568]	; (800105c <main+0x9c8>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d175      	bne.n	8000f14 <main+0x880>
		  		{
		  			if(FLAG_UART1==1)
 8000e28:	4b8b      	ldr	r3, [pc, #556]	; (8001058 <main+0x9c4>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d11c      	bne.n	8000e6a <main+0x7d6>
		  				{
		  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000e30:	4b8b      	ldr	r3, [pc, #556]	; (8001060 <main+0x9cc>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b8b      	ldr	r3, [pc, #556]	; (8001064 <main+0x9d0>)
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	2301      	movs	r3, #1
 8000e3a:	498b      	ldr	r1, [pc, #556]	; (8001068 <main+0x9d4>)
 8000e3c:	488b      	ldr	r0, [pc, #556]	; (800106c <main+0x9d8>)
 8000e3e:	f00e f89f 	bl	800ef80 <CopiaVector>
		  					FLAG_UART1=0;
 8000e42:	4b85      	ldr	r3, [pc, #532]	; (8001058 <main+0x9c4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]

		  						if (error_rxdata==3)
 8000e48:	4b89      	ldr	r3, [pc, #548]	; (8001070 <main+0x9dc>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d102      	bne.n	8000e56 <main+0x7c2>
		  						{
		  							error_rxdata=0;
 8000e50:	4b87      	ldr	r3, [pc, #540]	; (8001070 <main+0x9dc>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
		  						}
		  						if (error_rxdata==1)
 8000e56:	4b86      	ldr	r3, [pc, #536]	; (8001070 <main+0x9dc>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d105      	bne.n	8000e6a <main+0x7d6>
		  						{
		  							error_rxdata=5;
 8000e5e:	4b84      	ldr	r3, [pc, #528]	; (8001070 <main+0x9dc>)
 8000e60:	2205      	movs	r2, #5
 8000e62:	701a      	strb	r2, [r3, #0]
		  							error_rxdata=0;
 8000e64:	4b82      	ldr	r3, [pc, #520]	; (8001070 <main+0x9dc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
		  						}
		  				}
		  			if(FLAG_TIMEOUT==1)
 8000e6a:	4b7c      	ldr	r3, [pc, #496]	; (800105c <main+0x9c8>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d102      	bne.n	8000e78 <main+0x7e4>
		  					{
		  						FLAG_TIMEOUT=0;
 8000e72:	4b7a      	ldr	r3, [pc, #488]	; (800105c <main+0x9c8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
		  					}

		  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000e78:	4b7e      	ldr	r3, [pc, #504]	; (8001074 <main+0x9e0>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d149      	bne.n	8000f14 <main+0x880>
		  				{
		  					/*************** Copio y proceso info recibida ***************/
		  					wf._n_orig=UART_RX_items;
 8000e80:	4b77      	ldr	r3, [pc, #476]	; (8001060 <main+0x9cc>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a73      	ldr	r2, [pc, #460]	; (8001054 <main+0x9c0>)
 8000e86:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
		  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000e8a:	4b75      	ldr	r3, [pc, #468]	; (8001060 <main+0x9cc>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	4b75      	ldr	r3, [pc, #468]	; (8001064 <main+0x9d0>)
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2301      	movs	r3, #1
 8000e94:	4974      	ldr	r1, [pc, #464]	; (8001068 <main+0x9d4>)
 8000e96:	4875      	ldr	r0, [pc, #468]	; (800106c <main+0x9d8>)
 8000e98:	f00e f872 	bl	800ef80 <CopiaVector>
		  					resultado=AT_ESP8266_ND(&wf);
 8000e9c:	486d      	ldr	r0, [pc, #436]	; (8001054 <main+0x9c0>)
 8000e9e:	f005 fd2b 	bl	80068f8 <AT_ESP8266_ND>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4b74      	ldr	r3, [pc, #464]	; (8001078 <main+0x9e4>)
 8000ea8:	701a      	strb	r2, [r3, #0]

		  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

		  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000eaa:	4b6a      	ldr	r3, [pc, #424]	; (8001054 <main+0x9c0>)
 8000eac:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d12f      	bne.n	8000f14 <main+0x880>
 8000eb4:	4b67      	ldr	r3, [pc, #412]	; (8001054 <main+0x9c0>)
 8000eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000eba:	2b63      	cmp	r3, #99	; 0x63
 8000ebc:	d12a      	bne.n	8000f14 <main+0x880>
		  					{

		  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000ebe:	4b65      	ldr	r3, [pc, #404]	; (8001054 <main+0x9c0>)
 8000ec0:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000ec4:	2341      	movs	r3, #65	; 0x41
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	496c      	ldr	r1, [pc, #432]	; (800107c <main+0x9e8>)
 8000ecc:	486c      	ldr	r0, [pc, #432]	; (8001080 <main+0x9ec>)
 8000ece:	f00e f857 	bl	800ef80 <CopiaVector>
		  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000ed2:	4b60      	ldr	r3, [pc, #384]	; (8001054 <main+0x9c0>)
 8000ed4:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000ed8:	4a6a      	ldr	r2, [pc, #424]	; (8001084 <main+0x9f0>)
 8000eda:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

		  						ModBUS(&mb_wf);
 8000ede:	4869      	ldr	r0, [pc, #420]	; (8001084 <main+0x9f0>)
 8000ee0:	f00a fecc 	bl	800bc7c <ModBUS>

		  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000ee4:	4b67      	ldr	r3, [pc, #412]	; (8001084 <main+0x9f0>)
 8000ee6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8000eea:	2341      	movs	r3, #65	; 0x41
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	4965      	ldr	r1, [pc, #404]	; (8001088 <main+0x9f4>)
 8000ef2:	4857      	ldr	r0, [pc, #348]	; (8001050 <main+0x9bc>)
 8000ef4:	f00e f844 	bl	800ef80 <CopiaVector>
		  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000ef8:	4b62      	ldr	r3, [pc, #392]	; (8001084 <main+0x9f0>)
 8000efa:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8000efe:	4a55      	ldr	r2, [pc, #340]	; (8001054 <main+0x9c0>)
 8000f00:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
		  						wf._new_data_rcv=0;//
 8000f04:	4b53      	ldr	r3, [pc, #332]	; (8001054 <main+0x9c0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
		  						wf._send_data=1;
 8000f0c:	4b51      	ldr	r3, [pc, #324]	; (8001054 <main+0x9c0>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
		  						}
		  					}

		  		}

		  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000f14:	4b57      	ldr	r3, [pc, #348]	; (8001074 <main+0x9e0>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d108      	bne.n	8000f2e <main+0x89a>
		  			{
		  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	495b      	ldr	r1, [pc, #364]	; (800108c <main+0x9f8>)
 8000f20:	484c      	ldr	r0, [pc, #304]	; (8001054 <main+0x9c0>)
 8000f22:	f008 ff81 	bl	8009e28 <WiFi_Conn_ND>
 8000f26:	4603      	mov	r3, r0
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b59      	ldr	r3, [pc, #356]	; (8001090 <main+0x9fc>)
 8000f2c:	701a      	strb	r2, [r3, #0]

		  			}
		  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000f2e:	4b59      	ldr	r3, [pc, #356]	; (8001094 <main+0xa00>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d10e      	bne.n	8000f54 <main+0x8c0>
		  			{

		  				HAL_UART_Transmit_IT(&huart2,"\r\n ESP HW Resetting \r\n",strlen("\r\n ESP HW Resetting \r\n"));
 8000f36:	2216      	movs	r2, #22
 8000f38:	4957      	ldr	r1, [pc, #348]	; (8001098 <main+0xa04>)
 8000f3a:	4858      	ldr	r0, [pc, #352]	; (800109c <main+0xa08>)
 8000f3c:	f004 fb34 	bl	80055a8 <HAL_UART_Transmit_IT>
		  				HW_RESET(&wf);
 8000f40:	4844      	ldr	r0, [pc, #272]	; (8001054 <main+0x9c0>)
 8000f42:	f005 fb05 	bl	8006550 <HW_RESET>
		  				HAL_Delay(5000);//210419
 8000f46:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f4a:	f001 fde7 	bl	8002b1c <HAL_Delay>
		  				esp_restart=0;
 8000f4e:	4b51      	ldr	r3, [pc, #324]	; (8001094 <main+0xa00>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
		  			}
		  		if(eth_reset==1)
 8000f54:	4b52      	ldr	r3, [pc, #328]	; (80010a0 <main+0xa0c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	f47f ae99 	bne.w	8000c90 <main+0x5fc>
		  		{

		  		  SPI_ETH_PHY_RESET(&ETH);
 8000f5e:	4851      	ldr	r0, [pc, #324]	; (80010a4 <main+0xa10>)
 8000f60:	f00c f892 	bl	800d088 <SPI_ETH_PHY_RESET>
		  		  HAL_UART_Transmit_IT(&huart2,"\r\n PHY RESET \r\n",strlen("\r\n PHY RESET \r\n"));
 8000f64:	220f      	movs	r2, #15
 8000f66:	4950      	ldr	r1, [pc, #320]	; (80010a8 <main+0xa14>)
 8000f68:	484c      	ldr	r0, [pc, #304]	; (800109c <main+0xa08>)
 8000f6a:	f004 fb1d 	bl	80055a8 <HAL_UART_Transmit_IT>
		  	      HAL_Delay(800);
 8000f6e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000f72:	f001 fdd3 	bl	8002b1c <HAL_Delay>
		  	      eth_init(&ETH);
 8000f76:	484b      	ldr	r0, [pc, #300]	; (80010a4 <main+0xa10>)
 8000f78:	f00c fa70 	bl	800d45c <eth_init>
		  	      HAL_UART_Transmit_IT(&huart2,"\r\n ETH INIT \r\n",strlen("\r\n ETH INIT \r\n"));
 8000f7c:	220e      	movs	r2, #14
 8000f7e:	494b      	ldr	r1, [pc, #300]	; (80010ac <main+0xa18>)
 8000f80:	4846      	ldr	r0, [pc, #280]	; (800109c <main+0xa08>)
 8000f82:	f004 fb11 	bl	80055a8 <HAL_UART_Transmit_IT>
		  	      SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000f86:	4947      	ldr	r1, [pc, #284]	; (80010a4 <main+0xa10>)
 8000f88:	4849      	ldr	r0, [pc, #292]	; (80010b0 <main+0xa1c>)
 8000f8a:	f00c fdec 	bl	800db66 <SPI_ETH_SNIFF>
		  	      HAL_Delay(800);
 8000f8e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000f92:	f001 fdc3 	bl	8002b1c <HAL_Delay>
		  	   	  eth_socket_init(&ETH,S0_REG);
 8000f96:	2101      	movs	r1, #1
 8000f98:	4842      	ldr	r0, [pc, #264]	; (80010a4 <main+0xa10>)
 8000f9a:	f00c fb31 	bl	800d600 <eth_socket_init>
		  	   	  HAL_UART_Transmit_IT(&huart2,"\r\n ETH SOCKET INIT \r\n",strlen("\r\n ETH SOCKET INIT \r\n"));
 8000f9e:	2215      	movs	r2, #21
 8000fa0:	4944      	ldr	r1, [pc, #272]	; (80010b4 <main+0xa20>)
 8000fa2:	483e      	ldr	r0, [pc, #248]	; (800109c <main+0xa08>)
 8000fa4:	f004 fb00 	bl	80055a8 <HAL_UART_Transmit_IT>

		  		 uint16_t b=0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	817b      	strh	r3, [r7, #10]
		  		 uint8_t spi_Data[2];
		  		 b = SPI_ETH_REG(&ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 8000fac:	2302      	movs	r3, #2
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2124      	movs	r1, #36	; 0x24
 8000fba:	483a      	ldr	r0, [pc, #232]	; (80010a4 <main+0xa10>)
 8000fbc:	f00c f8bb 	bl	800d136 <SPI_ETH_REG>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	817b      	strh	r3, [r7, #10]

		  		 eth_wr_SOCKET_MODE(&ETH,S0_REG,MODE_TCP);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4836      	ldr	r0, [pc, #216]	; (80010a4 <main+0xa10>)
 8000fca:	f00c fa25 	bl	800d418 <eth_wr_SOCKET_MODE>
		  	   	 SPI_ETH_REG(&ETH, S_DIPR, S0_REG,SPI_WRITE, ETH.S_DIPR,4);									// client
 8000fce:	2304      	movs	r3, #4
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	4b39      	ldr	r3, [pc, #228]	; (80010b8 <main+0xa24>)
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	2201      	movs	r2, #1
 8000fda:	210c      	movs	r1, #12
 8000fdc:	4831      	ldr	r0, [pc, #196]	; (80010a4 <main+0xa10>)
 8000fde:	f00c f8aa 	bl	800d136 <SPI_ETH_REG>
		  	   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 8000fe2:	212e      	movs	r1, #46	; 0x2e
 8000fe4:	4835      	ldr	r0, [pc, #212]	; (80010bc <main+0xa28>)
 8000fe6:	f000 fa83 	bl	80014f0 <ITM0_Write>
		  	   	 SPI_ETH_REG(&ETH, S_DPORT, S0_REG,SPI_WRITE, ETH.S_DPORT,2);									// client
 8000fea:	2302      	movs	r3, #2
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <main+0xa2c>)
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2110      	movs	r1, #16
 8000ff8:	482a      	ldr	r0, [pc, #168]	; (80010a4 <main+0xa10>)
 8000ffa:	f00c f89c 	bl	800d136 <SPI_ETH_REG>
		  	   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 8000ffe:	2120      	movs	r1, #32
 8001000:	4830      	ldr	r0, [pc, #192]	; (80010c4 <main+0xa30>)
 8001002:	f000 fa75 	bl	80014f0 <ITM0_Write>

		  	   	 HAL_Delay(800);
 8001006:	f44f 7048 	mov.w	r0, #800	; 0x320
 800100a:	f001 fd87 	bl	8002b1c <HAL_Delay>
		  	   	  eth_wr_SOCKET_CMD(&ETH, S0_REG ,OPEN );
 800100e:	2201      	movs	r2, #1
 8001010:	2101      	movs	r1, #1
 8001012:	4824      	ldr	r0, [pc, #144]	; (80010a4 <main+0xa10>)
 8001014:	f00c f9de 	bl	800d3d4 <eth_wr_SOCKET_CMD>
		  	   	  HAL_UART_Transmit_IT(&huart2,"\r\n ETH OPEN \r\n",strlen("\r\n ETH OPEN \r\n"));
 8001018:	220e      	movs	r2, #14
 800101a:	492b      	ldr	r1, [pc, #172]	; (80010c8 <main+0xa34>)
 800101c:	481f      	ldr	r0, [pc, #124]	; (800109c <main+0xa08>)
 800101e:	f004 fac3 	bl	80055a8 <HAL_UART_Transmit_IT>
		  	   	  ETH.ETH_WDG=0;
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <main+0xa10>)
 8001024:	2200      	movs	r2, #0
 8001026:	829a      	strh	r2, [r3, #20]
		  	   	  eth_reset=0;
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <main+0xa0c>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
		 SPI_READ_EN=1;
 800102e:	e62f      	b.n	8000c90 <main+0x5fc>
 8001030:	20003124 	.word	0x20003124
 8001034:	20000024 	.word	0x20000024
 8001038:	20003fc4 	.word	0x20003fc4
 800103c:	20003dc4 	.word	0x20003dc4
 8001040:	20004218 	.word	0x20004218
 8001044:	2000001c 	.word	0x2000001c
 8001048:	2000000c 	.word	0x2000000c
 800104c:	20000000 	.word	0x20000000
 8001050:	20002668 	.word	0x20002668
 8001054:	200023d4 	.word	0x200023d4
 8001058:	2000422e 	.word	0x2000422e
 800105c:	2000422d 	.word	0x2000422d
 8001060:	20004644 	.word	0x20004644
 8001064:	2000463c 	.word	0x2000463c
 8001068:	2000443c 	.word	0x2000443c
 800106c:	20002a68 	.word	0x20002a68
 8001070:	20004231 	.word	0x20004231
 8001074:	2000422a 	.word	0x2000422a
 8001078:	20004230 	.word	0x20004230
 800107c:	20002468 	.word	0x20002468
 8001080:	20003786 	.word	0x20003786
 8001084:	20003774 	.word	0x20003774
 8001088:	2000398c 	.word	0x2000398c
 800108c:	20000274 	.word	0x20000274
 8001090:	20004233 	.word	0x20004233
 8001094:	20004232 	.word	0x20004232
 8001098:	08010648 	.word	0x08010648
 800109c:	200002b8 	.word	0x200002b8
 80010a0:	2000422f 	.word	0x2000422f
 80010a4:	20000304 	.word	0x20000304
 80010a8:	08010660 	.word	0x08010660
 80010ac:	08010670 	.word	0x08010670
 80010b0:	20001378 	.word	0x20001378
 80010b4:	08010680 	.word	0x08010680
 80010b8:	20001348 	.word	0x20001348
 80010bc:	0801055c 	.word	0x0801055c
 80010c0:	2000134c 	.word	0x2000134c
 80010c4:	0801058c 	.word	0x0801058c
 80010c8:	08010698 	.word	0x08010698

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b094      	sub	sp, #80	; 0x50
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 0320 	add.w	r3, r7, #32
 80010d6:	2230      	movs	r2, #48	; 0x30
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f00e f93f 	bl	800f35e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <SystemClock_Config+0xc8>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	4a26      	ldr	r2, [pc, #152]	; (8001194 <SystemClock_Config+0xc8>)
 80010fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <SystemClock_Config+0xc8>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <SystemClock_Config+0xcc>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a20      	ldr	r2, [pc, #128]	; (8001198 <SystemClock_Config+0xcc>)
 8001116:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <SystemClock_Config+0xcc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001128:	2301      	movs	r3, #1
 800112a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800112c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001132:	2302      	movs	r3, #2
 8001134:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001136:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800113a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800113c:	230c      	movs	r3, #12
 800113e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001140:	2360      	movs	r3, #96	; 0x60
 8001142:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001144:	2302      	movs	r3, #2
 8001146:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001148:	2304      	movs	r3, #4
 800114a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4618      	mov	r0, r3
 8001152:	f002 f979 	bl	8003448 <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800115c:	f001 f9ca 	bl	80024f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001160:	230f      	movs	r3, #15
 8001162:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001164:	2302      	movs	r3, #2
 8001166:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800116c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001170:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	2103      	movs	r1, #3
 800117c:	4618      	mov	r0, r3
 800117e:	f002 fbdb 	bl	8003938 <HAL_RCC_ClockConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001188:	f001 f9b4 	bl	80024f4 <Error_Handler>
  }
}
 800118c:	bf00      	nop
 800118e:	3750      	adds	r7, #80	; 0x50
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40023800 	.word	0x40023800
 8001198:	40007000 	.word	0x40007000

0800119c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_SPI1_Init+0x64>)
 80011a2:	4a18      	ldr	r2, [pc, #96]	; (8001204 <MX_SPI1_Init+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_SPI1_Init+0x64>)
 80011a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_SPI1_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_SPI1_Init+0x64>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_SPI1_Init+0x64>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_SPI1_Init+0x64>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <MX_SPI1_Init+0x64>)
 80011c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <MX_SPI1_Init+0x64>)
 80011d0:	2208      	movs	r2, #8
 80011d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <MX_SPI1_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <MX_SPI1_Init+0x64>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <MX_SPI1_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <MX_SPI1_Init+0x64>)
 80011e8:	220a      	movs	r2, #10
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_SPI1_Init+0x64>)
 80011ee:	f002 fd83 	bl	8003cf8 <HAL_SPI_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011f8:	f001 f97c 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200001d4 	.word	0x200001d4
 8001204:	40013000 	.word	0x40013000

08001208 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08e      	sub	sp, #56	; 0x38
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	f107 0320 	add.w	r3, r7, #32
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
 8001234:	615a      	str	r2, [r3, #20]
 8001236:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001238:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <MX_TIM2_Init+0xf0>)
 800123a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800123e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8001240:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <MX_TIM2_Init+0xf0>)
 8001242:	2264      	movs	r2, #100	; 0x64
 8001244:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001246:	4b2c      	ldr	r3, [pc, #176]	; (80012f8 <MX_TIM2_Init+0xf0>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800124c:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <MX_TIM2_Init+0xf0>)
 800124e:	2264      	movs	r2, #100	; 0x64
 8001250:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001252:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <MX_TIM2_Init+0xf0>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001258:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <MX_TIM2_Init+0xf0>)
 800125a:	2280      	movs	r2, #128	; 0x80
 800125c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800125e:	4826      	ldr	r0, [pc, #152]	; (80012f8 <MX_TIM2_Init+0xf0>)
 8001260:	f003 f840 	bl	80042e4 <HAL_TIM_Base_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800126a:	f001 f943 	bl	80024f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001274:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001278:	4619      	mov	r1, r3
 800127a:	481f      	ldr	r0, [pc, #124]	; (80012f8 <MX_TIM2_Init+0xf0>)
 800127c:	f003 fc48 	bl	8004b10 <HAL_TIM_ConfigClockSource>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001286:	f001 f935 	bl	80024f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800128a:	481b      	ldr	r0, [pc, #108]	; (80012f8 <MX_TIM2_Init+0xf0>)
 800128c:	f003 f879 	bl	8004382 <HAL_TIM_OC_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001296:	f001 f92d 	bl	80024f4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 800129a:	2108      	movs	r1, #8
 800129c:	4816      	ldr	r0, [pc, #88]	; (80012f8 <MX_TIM2_Init+0xf0>)
 800129e:	f003 fa79 	bl	8004794 <HAL_TIM_OnePulse_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80012a8:	f001 f924 	bl	80024f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b4:	f107 0320 	add.w	r3, r7, #32
 80012b8:	4619      	mov	r1, r3
 80012ba:	480f      	ldr	r0, [pc, #60]	; (80012f8 <MX_TIM2_Init+0xf0>)
 80012bc:	f003 ffe4 	bl	8005288 <HAL_TIMEx_MasterConfigSynchronization>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80012c6:	f001 f915 	bl	80024f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80012ca:	2320      	movs	r3, #32
 80012cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_TIM2_Init+0xf0>)
 80012e2:	f003 fbb9 	bl	8004a58 <HAL_TIM_OC_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80012ec:	f001 f902 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	3738      	adds	r7, #56	; 0x38
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000022c 	.word	0x2000022c

080012fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <MX_USART1_UART_Init+0x50>)
 8001304:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_USART1_UART_Init+0x4c>)
 8001334:	f004 f82a 	bl	800538c <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800133e:	f001 f8d9 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000274 	.word	0x20000274
 800134c:	40011000 	.word	0x40011000

08001350 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <MX_USART2_UART_Init+0x50>)
 8001358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_USART2_UART_Init+0x4c>)
 800135c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_USART2_UART_Init+0x4c>)
 800136a:	2200      	movs	r2, #0
 800136c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001376:	220c      	movs	r2, #12
 8001378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_USART2_UART_Init+0x4c>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_USART2_UART_Init+0x4c>)
 8001388:	f004 f800 	bl	800538c <HAL_UART_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001392:	f001 f8af 	bl	80024f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200002b8 	.word	0x200002b8
 80013a0:	40004400 	.word	0x40004400

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b48      	ldr	r3, [pc, #288]	; (80014e0 <MX_GPIO_Init+0x13c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a47      	ldr	r2, [pc, #284]	; (80014e0 <MX_GPIO_Init+0x13c>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b45      	ldr	r3, [pc, #276]	; (80014e0 <MX_GPIO_Init+0x13c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <MX_GPIO_Init+0x13c>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a40      	ldr	r2, [pc, #256]	; (80014e0 <MX_GPIO_Init+0x13c>)
 80013e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <MX_GPIO_Init+0x13c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <MX_GPIO_Init+0x13c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a39      	ldr	r2, [pc, #228]	; (80014e0 <MX_GPIO_Init+0x13c>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b37      	ldr	r3, [pc, #220]	; (80014e0 <MX_GPIO_Init+0x13c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <MX_GPIO_Init+0x13c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a32      	ldr	r2, [pc, #200]	; (80014e0 <MX_GPIO_Init+0x13c>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <MX_GPIO_Init+0x13c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001430:	482c      	ldr	r0, [pc, #176]	; (80014e4 <MX_GPIO_Init+0x140>)
 8001432:	f001 ffd5 	bl	80033e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|WiFi_EN_Pin, GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 7188 	mov.w	r1, #272	; 0x110
 800143c:	482a      	ldr	r0, [pc, #168]	; (80014e8 <MX_GPIO_Init+0x144>)
 800143e:	f001 ffcf 	bl	80033e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	2101      	movs	r1, #1
 8001446:	4829      	ldr	r0, [pc, #164]	; (80014ec <MX_GPIO_Init+0x148>)
 8001448:	f001 ffca 	bl	80033e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 800144c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	481f      	ldr	r0, [pc, #124]	; (80014e4 <MX_GPIO_Init+0x140>)
 8001466:	f001 fd53 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 800146a:	2301      	movs	r3, #1
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	481a      	ldr	r0, [pc, #104]	; (80014e8 <MX_GPIO_Init+0x144>)
 800147e:	f001 fd47 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8001482:	2310      	movs	r3, #16
 8001484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001486:	2301      	movs	r3, #1
 8001488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4813      	ldr	r0, [pc, #76]	; (80014e8 <MX_GPIO_Init+0x144>)
 800149a:	f001 fd39 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_RST_Pin */
  GPIO_InitStruct.Pin = SPI_RST_Pin;
 800149e:	2301      	movs	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_RST_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	4619      	mov	r1, r3
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <MX_GPIO_Init+0x148>)
 80014b6:	f001 fd2b 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : WiFi_EN_Pin */
  GPIO_InitStruct.Pin = WiFi_EN_Pin;
 80014ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WiFi_EN_GPIO_Port, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_GPIO_Init+0x144>)
 80014d4:	f001 fd1c 	bl	8002f10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020800 	.word	0x40020800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400

080014f0 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	e009      	b.n	8001514 <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f89b 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	3301      	adds	r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbf1      	blt.n	8001500 <ITM0_Write+0x10>
  }
  return len;
 800151c:	683b      	ldr	r3, [r7, #0]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800152e:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */
	unsigned char text[512];
	int ns=0;
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	ms_ticks++;	//100 ms
 8001536:	4b68      	ldr	r3, [pc, #416]	; (80016d8 <SysTick_Handler+0x1b0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	3301      	adds	r3, #1
 800153c:	4a66      	ldr	r2, [pc, #408]	; (80016d8 <SysTick_Handler+0x1b0>)
 800153e:	6013      	str	r3, [r2, #0]

	if(wf._estado_conexion!=ESPstate)
 8001540:	4b66      	ldr	r3, [pc, #408]	; (80016dc <SysTick_Handler+0x1b4>)
 8001542:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001546:	4b66      	ldr	r3, [pc, #408]	; (80016e0 <SysTick_Handler+0x1b8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d015      	beq.n	800157a <SysTick_Handler+0x52>
	{
		ESPstate=wf._estado_conexion;
 800154e:	4b63      	ldr	r3, [pc, #396]	; (80016dc <SysTick_Handler+0x1b4>)
 8001550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001554:	4a62      	ldr	r2, [pc, #392]	; (80016e0 <SysTick_Handler+0x1b8>)
 8001556:	6013      	str	r3, [r2, #0]
		ns=INTOA(ESPstate,text);
 8001558:	4b61      	ldr	r3, [pc, #388]	; (80016e0 <SysTick_Handler+0x1b8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	463a      	mov	r2, r7
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f00d fc63 	bl	800ee2c <INTOA>
 8001566:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
		HAL_UART_Transmit_IT(&huart2,&text,ns);
 800156a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800156e:	b29a      	uxth	r2, r3
 8001570:	463b      	mov	r3, r7
 8001572:	4619      	mov	r1, r3
 8001574:	485b      	ldr	r0, [pc, #364]	; (80016e4 <SysTick_Handler+0x1bc>)
 8001576:	f004 f817 	bl	80055a8 <HAL_UART_Transmit_IT>

	}

	ESP_ticks++;
 800157a:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <SysTick_Handler+0x1c0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	4a59      	ldr	r2, [pc, #356]	; (80016e8 <SysTick_Handler+0x1c0>)
 8001582:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 8001584:	4b59      	ldr	r3, [pc, #356]	; (80016ec <SysTick_Handler+0x1c4>)
 8001586:	7a1b      	ldrb	r3, [r3, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d004      	beq.n	8001596 <SysTick_Handler+0x6e>
 800158c:	4b58      	ldr	r3, [pc, #352]	; (80016f0 <SysTick_Handler+0x1c8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	4a57      	ldr	r2, [pc, #348]	; (80016f0 <SysTick_Handler+0x1c8>)
 8001594:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 8001596:	4b55      	ldr	r3, [pc, #340]	; (80016ec <SysTick_Handler+0x1c4>)
 8001598:	7a1b      	ldrb	r3, [r3, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00c      	beq.n	80015b8 <SysTick_Handler+0x90>
 800159e:	4b53      	ldr	r3, [pc, #332]	; (80016ec <SysTick_Handler+0x1c4>)
 80015a0:	88db      	ldrh	r3, [r3, #6]
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b52      	ldr	r3, [pc, #328]	; (80016f0 <SysTick_Handler+0x1c8>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	da05      	bge.n	80015b8 <SysTick_Handler+0x90>
		{
			mb_eth._w_answer=0;
 80015ac:	4b4f      	ldr	r3, [pc, #316]	; (80016ec <SysTick_Handler+0x1c4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	721a      	strb	r2, [r3, #8]
			MB_TOUT_ticks=0;
 80015b2:	4b4f      	ldr	r3, [pc, #316]	; (80016f0 <SysTick_Handler+0x1c8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
		}
	}*/
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 80015b8:	4b48      	ldr	r3, [pc, #288]	; (80016dc <SysTick_Handler+0x1b4>)
 80015ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015be:	f240 2261 	movw	r2, #609	; 0x261
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d005      	beq.n	80015d2 <SysTick_Handler+0xaa>
 80015c6:	4b45      	ldr	r3, [pc, #276]	; (80016dc <SysTick_Handler+0x1b4>)
 80015c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015cc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80015d0:	d109      	bne.n	80015e6 <SysTick_Handler+0xbe>
 80015d2:	4b42      	ldr	r3, [pc, #264]	; (80016dc <SysTick_Handler+0x1b4>)
 80015d4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d104      	bne.n	80015e6 <SysTick_Handler+0xbe>
 80015dc:	4b45      	ldr	r3, [pc, #276]	; (80016f4 <SysTick_Handler+0x1cc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	4a44      	ldr	r2, [pc, #272]	; (80016f4 <SysTick_Handler+0x1cc>)
 80015e4:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 5000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;					//230517 wf_snd_flag_ticks>= 2000
 80015e6:	4b43      	ldr	r3, [pc, #268]	; (80016f4 <SysTick_Handler+0x1cc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f241 3287 	movw	r2, #4999	; 0x1387
 80015ee:	4293      	cmp	r3, r2
 80015f0:	dd0c      	ble.n	800160c <SysTick_Handler+0xe4>
 80015f2:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <SysTick_Handler+0x1b4>)
 80015f4:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d007      	beq.n	800160c <SysTick_Handler+0xe4>
 80015fc:	4b37      	ldr	r3, [pc, #220]	; (80016dc <SysTick_Handler+0x1b4>)
 80015fe:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <SysTick_Handler+0xe4>
 8001606:	4b3c      	ldr	r3, [pc, #240]	; (80016f8 <SysTick_Handler+0x1d0>)
 8001608:	2201      	movs	r2, #1
 800160a:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S_status == 0)
 800160c:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <SysTick_Handler+0x1d4>)
 800160e:	7d9b      	ldrb	r3, [r3, #22]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d111      	bne.n	8001638 <SysTick_Handler+0x110>
	{
		ETH.ETH_WDG++;
 8001614:	4b39      	ldr	r3, [pc, #228]	; (80016fc <SysTick_Handler+0x1d4>)
 8001616:	8a9b      	ldrh	r3, [r3, #20]
 8001618:	3301      	adds	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	4b37      	ldr	r3, [pc, #220]	; (80016fc <SysTick_Handler+0x1d4>)
 800161e:	829a      	strh	r2, [r3, #20]
		if (ETH.ETH_WDG>=64000)
 8001620:	4b36      	ldr	r3, [pc, #216]	; (80016fc <SysTick_Handler+0x1d4>)
 8001622:	8a9b      	ldrh	r3, [r3, #20]
 8001624:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001628:	d306      	bcc.n	8001638 <SysTick_Handler+0x110>
		{
			eth_reset=1;
 800162a:	4b35      	ldr	r3, [pc, #212]	; (8001700 <SysTick_Handler+0x1d8>)
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
			ETH.ETH_WDG=64000;
 8001630:	4b32      	ldr	r3, [pc, #200]	; (80016fc <SysTick_Handler+0x1d4>)
 8001632:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001636:	829a      	strh	r2, [r3, #20]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <SysTick_Handler+0x1b0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b64      	cmp	r3, #100	; 0x64
 800163e:	f040 84f0 	bne.w	8002022 <SysTick_Handler+0xafa>
  {
	  dbgn++;
 8001642:	4b30      	ldr	r3, [pc, #192]	; (8001704 <SysTick_Handler+0x1dc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	4a2e      	ldr	r2, [pc, #184]	; (8001704 <SysTick_Handler+0x1dc>)
 800164a:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <SysTick_Handler+0x1b0>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 8001652:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <SysTick_Handler+0x1e0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	4a2b      	ldr	r2, [pc, #172]	; (8001708 <SysTick_Handler+0x1e0>)
 800165a:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <SysTick_Handler+0x1e4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001664:	d102      	bne.n	800166c <SysTick_Handler+0x144>
 8001666:	4b29      	ldr	r3, [pc, #164]	; (800170c <SysTick_Handler+0x1e4>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 800166c:	4b28      	ldr	r3, [pc, #160]	; (8001710 <SysTick_Handler+0x1e8>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d104      	bne.n	800167e <SysTick_Handler+0x156>
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <SysTick_Handler+0x1e4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	3301      	adds	r3, #1
 800167a:	4a24      	ldr	r2, [pc, #144]	; (800170c <SysTick_Handler+0x1e4>)
 800167c:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 800167e:	4b23      	ldr	r3, [pc, #140]	; (800170c <SysTick_Handler+0x1e4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d102      	bne.n	800168c <SysTick_Handler+0x164>
 8001686:	4b22      	ldr	r3, [pc, #136]	; (8001710 <SysTick_Handler+0x1e8>)
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 800168c:	4b20      	ldr	r3, [pc, #128]	; (8001710 <SysTick_Handler+0x1e8>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d104      	bne.n	800169e <SysTick_Handler+0x176>
 8001694:	4b1d      	ldr	r3, [pc, #116]	; (800170c <SysTick_Handler+0x1e4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3b01      	subs	r3, #1
 800169a:	4a1c      	ldr	r2, [pc, #112]	; (800170c <SysTick_Handler+0x1e4>)
 800169c:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <SysTick_Handler+0x1e4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <SysTick_Handler+0x184>
 80016a6:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <SysTick_Handler+0x1e8>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]


	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  if(spi_no_debug)
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <SysTick_Handler+0x1ec>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 84a6 	beq.w	8002002 <SysTick_Handler+0xada>
	  	  {
	  if(SPI_READ_EN)
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <SysTick_Handler+0x1f0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 84a5 	beq.w	800200a <SysTick_Handler+0xae2>
	  {
	     ETH.S_status=eth_rd_SOCKET_STAT(&ETH,S0_REG);  //este era el bardo
 80016c0:	2101      	movs	r1, #1
 80016c2:	480e      	ldr	r0, [pc, #56]	; (80016fc <SysTick_Handler+0x1d4>)
 80016c4:	f00c f8e4 	bl	800d890 <eth_rd_SOCKET_STAT>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <SysTick_Handler+0x1d4>)
 80016ce:	759a      	strb	r2, [r3, #22]

		  switch(ETH.S_status)	//Check Socket status
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <SysTick_Handler+0x1d4>)
 80016d2:	7d9b      	ldrb	r3, [r3, #22]
 80016d4:	e022      	b.n	800171c <SysTick_Handler+0x1f4>
 80016d6:	bf00      	nop
 80016d8:	200002fc 	.word	0x200002fc
 80016dc:	200023d4 	.word	0x200023d4
 80016e0:	2000466c 	.word	0x2000466c
 80016e4:	200002b8 	.word	0x200002b8
 80016e8:	20004648 	.word	0x20004648
 80016ec:	20003124 	.word	0x20003124
 80016f0:	20004650 	.word	0x20004650
 80016f4:	200041c8 	.word	0x200041c8
 80016f8:	200041c5 	.word	0x200041c5
 80016fc:	20000304 	.word	0x20000304
 8001700:	2000422f 	.word	0x2000422f
 8001704:	20004674 	.word	0x20004674
 8001708:	20000300 	.word	0x20000300
 800170c:	2000464c 	.word	0x2000464c
 8001710:	20004234 	.word	0x20004234
 8001714:	20004214 	.word	0x20004214
 8001718:	20004238 	.word	0x20004238
 800171c:	2b5f      	cmp	r3, #95	; 0x5f
 800171e:	f200 8479 	bhi.w	8002014 <SysTick_Handler+0xaec>
 8001722:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <SysTick_Handler+0x200>)
 8001724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001728:	080018a9 	.word	0x080018a9
 800172c:	08002015 	.word	0x08002015
 8001730:	08002015 	.word	0x08002015
 8001734:	08002015 	.word	0x08002015
 8001738:	08002015 	.word	0x08002015
 800173c:	08002015 	.word	0x08002015
 8001740:	08002015 	.word	0x08002015
 8001744:	08002015 	.word	0x08002015
 8001748:	08002015 	.word	0x08002015
 800174c:	08002015 	.word	0x08002015
 8001750:	08002015 	.word	0x08002015
 8001754:	08002015 	.word	0x08002015
 8001758:	08002015 	.word	0x08002015
 800175c:	08002015 	.word	0x08002015
 8001760:	08002015 	.word	0x08002015
 8001764:	08002015 	.word	0x08002015
 8001768:	08002015 	.word	0x08002015
 800176c:	08002015 	.word	0x08002015
 8001770:	08002015 	.word	0x08002015
 8001774:	080018cf 	.word	0x080018cf
 8001778:	08001955 	.word	0x08001955
 800177c:	0800197f 	.word	0x0800197f
 8001780:	080019a9 	.word	0x080019a9
 8001784:	080019d3 	.word	0x080019d3
 8001788:	08001dd1 	.word	0x08001dd1
 800178c:	08002015 	.word	0x08002015
 8001790:	08001dfb 	.word	0x08001dfb
 8001794:	08001e91 	.word	0x08001e91
 8001798:	08001ee1 	.word	0x08001ee1
 800179c:	08001f31 	.word	0x08001f31
 80017a0:	08002015 	.word	0x08002015
 80017a4:	08002015 	.word	0x08002015
 80017a8:	08002015 	.word	0x08002015
 80017ac:	08002015 	.word	0x08002015
 80017b0:	08001f5b 	.word	0x08001f5b
 80017b4:	08002015 	.word	0x08002015
 80017b8:	08002015 	.word	0x08002015
 80017bc:	08002015 	.word	0x08002015
 80017c0:	08002015 	.word	0x08002015
 80017c4:	08002015 	.word	0x08002015
 80017c8:	08002015 	.word	0x08002015
 80017cc:	08002015 	.word	0x08002015
 80017d0:	08002015 	.word	0x08002015
 80017d4:	08002015 	.word	0x08002015
 80017d8:	08002015 	.word	0x08002015
 80017dc:	08002015 	.word	0x08002015
 80017e0:	08002015 	.word	0x08002015
 80017e4:	08002015 	.word	0x08002015
 80017e8:	08002015 	.word	0x08002015
 80017ec:	08002015 	.word	0x08002015
 80017f0:	08001f85 	.word	0x08001f85
 80017f4:	08002015 	.word	0x08002015
 80017f8:	08002015 	.word	0x08002015
 80017fc:	08002015 	.word	0x08002015
 8001800:	08002015 	.word	0x08002015
 8001804:	08002015 	.word	0x08002015
 8001808:	08002015 	.word	0x08002015
 800180c:	08002015 	.word	0x08002015
 8001810:	08002015 	.word	0x08002015
 8001814:	08002015 	.word	0x08002015
 8001818:	08002015 	.word	0x08002015
 800181c:	08002015 	.word	0x08002015
 8001820:	08002015 	.word	0x08002015
 8001824:	08002015 	.word	0x08002015
 8001828:	08002015 	.word	0x08002015
 800182c:	08002015 	.word	0x08002015
 8001830:	08001faf 	.word	0x08001faf
 8001834:	08002015 	.word	0x08002015
 8001838:	08002015 	.word	0x08002015
 800183c:	08002015 	.word	0x08002015
 8001840:	08002015 	.word	0x08002015
 8001844:	08002015 	.word	0x08002015
 8001848:	08002015 	.word	0x08002015
 800184c:	08002015 	.word	0x08002015
 8001850:	08002015 	.word	0x08002015
 8001854:	08002015 	.word	0x08002015
 8001858:	08002015 	.word	0x08002015
 800185c:	08002015 	.word	0x08002015
 8001860:	08002015 	.word	0x08002015
 8001864:	08002015 	.word	0x08002015
 8001868:	08002015 	.word	0x08002015
 800186c:	08002015 	.word	0x08002015
 8001870:	08002015 	.word	0x08002015
 8001874:	08002015 	.word	0x08002015
 8001878:	08002015 	.word	0x08002015
 800187c:	08002015 	.word	0x08002015
 8001880:	08002015 	.word	0x08002015
 8001884:	08002015 	.word	0x08002015
 8001888:	08002015 	.word	0x08002015
 800188c:	08002015 	.word	0x08002015
 8001890:	08002015 	.word	0x08002015
 8001894:	08002015 	.word	0x08002015
 8001898:	08002015 	.word	0x08002015
 800189c:	08002015 	.word	0x08002015
 80018a0:	08002015 	.word	0x08002015
 80018a4:	08001fd9 	.word	0x08001fd9
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 80018a8:	4b9b      	ldr	r3, [pc, #620]	; (8001b18 <SysTick_Handler+0x5f0>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <SysTick_Handler+0x390>
 80018b0:	2113      	movs	r1, #19
 80018b2:	489a      	ldr	r0, [pc, #616]	; (8001b1c <SysTick_Handler+0x5f4>)
 80018b4:	f7ff fe1c 	bl	80014f0 <ITM0_Write>
					 //if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_CLOSED \r\n",strlen("\r\n S0_SOCK_CLOSED \r\n"));
					 //eth_wr_SOCKET_CMD(&ETH, S0_REG ,OPEN );
					 if(ETH.ETH_WDG >= 15000)
 80018b8:	4b99      	ldr	r3, [pc, #612]	; (8001b20 <SysTick_Handler+0x5f8>)
 80018ba:	8a9b      	ldrh	r3, [r3, #20]
 80018bc:	f643 2297 	movw	r2, #14999	; 0x3a97
 80018c0:	4293      	cmp	r3, r2
 80018c2:	f240 83a4 	bls.w	800200e <SysTick_Handler+0xae6>
					 {
						  eth_reset=1;
 80018c6:	4b97      	ldr	r3, [pc, #604]	; (8001b24 <SysTick_Handler+0x5fc>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	701a      	strb	r2, [r3, #0]
					 }



				 }
			 break;
 80018cc:	e39f      	b.n	800200e <SysTick_Handler+0xae6>
			 case  SOCK_INIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 80018ce:	4b92      	ldr	r3, [pc, #584]	; (8001b18 <SysTick_Handler+0x5f0>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <SysTick_Handler+0x3b6>
 80018d6:	2111      	movs	r1, #17
 80018d8:	4893      	ldr	r0, [pc, #588]	; (8001b28 <SysTick_Handler+0x600>)
 80018da:	f7ff fe09 	bl	80014f0 <ITM0_Write>
					 if(ETH.S_ENserver == 1)
 80018de:	4b90      	ldr	r3, [pc, #576]	; (8001b20 <SysTick_Handler+0x5f8>)
 80018e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d119      	bne.n	8001920 <SysTick_Handler+0x3f8>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 80018ec:	4b8a      	ldr	r3, [pc, #552]	; (8001b18 <SysTick_Handler+0x5f0>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <SysTick_Handler+0x3d4>
 80018f4:	2111      	movs	r1, #17
 80018f6:	488c      	ldr	r0, [pc, #560]	; (8001b28 <SysTick_Handler+0x600>)
 80018f8:	f7ff fdfa 	bl	80014f0 <ITM0_Write>
						 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_INIT \r\n",strlen("\r\n S0_SOCK_INIT \r\n"));
 80018fc:	4b8b      	ldr	r3, [pc, #556]	; (8001b2c <SysTick_Handler+0x604>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <SysTick_Handler+0x3e6>
 8001904:	2212      	movs	r2, #18
 8001906:	498a      	ldr	r1, [pc, #552]	; (8001b30 <SysTick_Handler+0x608>)
 8001908:	488a      	ldr	r0, [pc, #552]	; (8001b34 <SysTick_Handler+0x60c>)
 800190a:	f003 fe4d 	bl	80055a8 <HAL_UART_Transmit_IT>
							eth_wr_SOCKET_CMD(&ETH, S0_REG, LISTEN );
 800190e:	2202      	movs	r2, #2
 8001910:	2101      	movs	r1, #1
 8001912:	4883      	ldr	r0, [pc, #524]	; (8001b20 <SysTick_Handler+0x5f8>)
 8001914:	f00b fd5e 	bl	800d3d4 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001918:	4b81      	ldr	r3, [pc, #516]	; (8001b20 <SysTick_Handler+0x5f8>)
 800191a:	2200      	movs	r2, #0
 800191c:	829a      	strh	r2, [r3, #20]
						 	if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n ETH-W5500-CONNECT \r\n",strlen("\r\n ETH-W5500-CONNECT \r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 800191e:	e379      	b.n	8002014 <SysTick_Handler+0xaec>
						    eth_wr_SOCKET_CMD(&ETH,S0_REG, CONNECT);																				//only for server
 8001920:	2204      	movs	r2, #4
 8001922:	2101      	movs	r1, #1
 8001924:	487e      	ldr	r0, [pc, #504]	; (8001b20 <SysTick_Handler+0x5f8>)
 8001926:	f00b fd55 	bl	800d3d4 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5500-CONNECT\r\n",strlen("\r\nETH-W5500-CONNECT\r\n"));
 800192a:	4b7b      	ldr	r3, [pc, #492]	; (8001b18 <SysTick_Handler+0x5f0>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <SysTick_Handler+0x412>
 8001932:	2115      	movs	r1, #21
 8001934:	4880      	ldr	r0, [pc, #512]	; (8001b38 <SysTick_Handler+0x610>)
 8001936:	f7ff fddb 	bl	80014f0 <ITM0_Write>
						 	if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n ETH-W5500-CONNECT \r\n",strlen("\r\n ETH-W5500-CONNECT \r\n"));
 800193a:	4b7c      	ldr	r3, [pc, #496]	; (8001b2c <SysTick_Handler+0x604>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d004      	beq.n	800194c <SysTick_Handler+0x424>
 8001942:	2217      	movs	r2, #23
 8001944:	497d      	ldr	r1, [pc, #500]	; (8001b3c <SysTick_Handler+0x614>)
 8001946:	487b      	ldr	r0, [pc, #492]	; (8001b34 <SysTick_Handler+0x60c>)
 8001948:	f003 fe2e 	bl	80055a8 <HAL_UART_Transmit_IT>
						 	ETH.ETH_WDG=0;
 800194c:	4b74      	ldr	r3, [pc, #464]	; (8001b20 <SysTick_Handler+0x5f8>)
 800194e:	2200      	movs	r2, #0
 8001950:	829a      	strh	r2, [r3, #20]
			 break;
 8001952:	e35f      	b.n	8002014 <SysTick_Handler+0xaec>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 8001954:	4b70      	ldr	r3, [pc, #448]	; (8001b18 <SysTick_Handler+0x5f0>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <SysTick_Handler+0x43c>
 800195c:	2113      	movs	r1, #19
 800195e:	4878      	ldr	r0, [pc, #480]	; (8001b40 <SysTick_Handler+0x618>)
 8001960:	f7ff fdc6 	bl	80014f0 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_LISTEN \r\n",strlen("\r\n S0_SOCK_LISTEN \r\n"));
 8001964:	4b71      	ldr	r3, [pc, #452]	; (8001b2c <SysTick_Handler+0x604>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d004      	beq.n	8001976 <SysTick_Handler+0x44e>
 800196c:	2214      	movs	r2, #20
 800196e:	4975      	ldr	r1, [pc, #468]	; (8001b44 <SysTick_Handler+0x61c>)
 8001970:	4870      	ldr	r0, [pc, #448]	; (8001b34 <SysTick_Handler+0x60c>)
 8001972:	f003 fe19 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001976:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <SysTick_Handler+0x5f8>)
 8001978:	2200      	movs	r2, #0
 800197a:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 800197c:	e34a      	b.n	8002014 <SysTick_Handler+0xaec>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 800197e:	4b66      	ldr	r3, [pc, #408]	; (8001b18 <SysTick_Handler+0x5f0>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <SysTick_Handler+0x466>
 8001986:	2114      	movs	r1, #20
 8001988:	486f      	ldr	r0, [pc, #444]	; (8001b48 <SysTick_Handler+0x620>)
 800198a:	f7ff fdb1 	bl	80014f0 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_SYNSENT \r\n",strlen("\r\n S0_SOCK_SYNSENT \r\n"));
 800198e:	4b67      	ldr	r3, [pc, #412]	; (8001b2c <SysTick_Handler+0x604>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d004      	beq.n	80019a0 <SysTick_Handler+0x478>
 8001996:	2215      	movs	r2, #21
 8001998:	496c      	ldr	r1, [pc, #432]	; (8001b4c <SysTick_Handler+0x624>)
 800199a:	4866      	ldr	r0, [pc, #408]	; (8001b34 <SysTick_Handler+0x60c>)
 800199c:	f003 fe04 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 80019a0:	4b5f      	ldr	r3, [pc, #380]	; (8001b20 <SysTick_Handler+0x5f8>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 80019a6:	e335      	b.n	8002014 <SysTick_Handler+0xaec>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 80019a8:	4b5b      	ldr	r3, [pc, #364]	; (8001b18 <SysTick_Handler+0x5f0>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <SysTick_Handler+0x490>
 80019b0:	2114      	movs	r1, #20
 80019b2:	4867      	ldr	r0, [pc, #412]	; (8001b50 <SysTick_Handler+0x628>)
 80019b4:	f7ff fd9c 	bl	80014f0 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_SYNRECV \r\n",strlen("\r\n S0_SOCK_SYNRECV \r\n"));
 80019b8:	4b5c      	ldr	r3, [pc, #368]	; (8001b2c <SysTick_Handler+0x604>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d004      	beq.n	80019ca <SysTick_Handler+0x4a2>
 80019c0:	2215      	movs	r2, #21
 80019c2:	4964      	ldr	r1, [pc, #400]	; (8001b54 <SysTick_Handler+0x62c>)
 80019c4:	485b      	ldr	r0, [pc, #364]	; (8001b34 <SysTick_Handler+0x60c>)
 80019c6:	f003 fdef 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 80019ca:	4b55      	ldr	r3, [pc, #340]	; (8001b20 <SysTick_Handler+0x5f8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 80019d0:	e320      	b.n	8002014 <SysTick_Handler+0xaec>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 80019d2:	4b51      	ldr	r3, [pc, #324]	; (8001b18 <SysTick_Handler+0x5f0>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <SysTick_Handler+0x4ba>
 80019da:	2118      	movs	r1, #24
 80019dc:	485e      	ldr	r0, [pc, #376]	; (8001b58 <SysTick_Handler+0x630>)
 80019de:	f7ff fd87 	bl	80014f0 <ITM0_Write>
					 //if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_ESTABLISHED \r\n",strlen("\r\n S0_SOCK_ESTABLISHED \r\n"));
					 ETH.ETH_WDG=0;
 80019e2:	4b4f      	ldr	r3, [pc, #316]	; (8001b20 <SysTick_Handler+0x5f8>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	829a      	strh	r2, [r3, #20]

					if (ETH.S_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 80019e8:	4b4d      	ldr	r3, [pc, #308]	; (8001b20 <SysTick_Handler+0x5f8>)
 80019ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ee:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	f040 80c6 	bne.w	8001b84 <SysTick_Handler+0x65c>
					{

						S0_get_size = SPI_ETH_REG(&ETH, S_RX_RSR ,S0_REG, SPI_READ, spi_Data,2);//S0_get_size = SPI_ETH_REG(&ETH, S_RX_SZ_ADDR_BASEHH,S_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 80019f8:	2302      	movs	r3, #2
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	4b57      	ldr	r3, [pc, #348]	; (8001b5c <SysTick_Handler+0x634>)
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	2300      	movs	r3, #0
 8001a02:	2201      	movs	r2, #1
 8001a04:	2126      	movs	r1, #38	; 0x26
 8001a06:	4846      	ldr	r0, [pc, #280]	; (8001b20 <SysTick_Handler+0x5f8>)
 8001a08:	f00b fb95 	bl	800d136 <SPI_ETH_REG>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <SysTick_Handler+0x638>)
 8001a12:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 8001a14:	4b52      	ldr	r3, [pc, #328]	; (8001b60 <SysTick_Handler+0x638>)
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 82fa 	beq.w	8002012 <SysTick_Handler+0xaea>
							{
								eth_rd_SOCKET_DATA(&ETH,S0_RX_BUFF,&rx_mem_pointer,S0_get_size); // read socket data
 8001a1e:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <SysTick_Handler+0x638>)
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	4a50      	ldr	r2, [pc, #320]	; (8001b64 <SysTick_Handler+0x63c>)
 8001a24:	2103      	movs	r1, #3
 8001a26:	483e      	ldr	r0, [pc, #248]	; (8001b20 <SysTick_Handler+0x5f8>)
 8001a28:	f00b ff68 	bl	800d8fc <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S_RX_RD0,rx_mem_pointer,S0_REG );		// write rx memory pointer
 8001a2c:	4b4d      	ldr	r3, [pc, #308]	; (8001b64 <SysTick_Handler+0x63c>)
 8001a2e:	881a      	ldrh	r2, [r3, #0]
 8001a30:	2301      	movs	r3, #1
 8001a32:	2128      	movs	r1, #40	; 0x28
 8001a34:	483a      	ldr	r0, [pc, #232]	; (8001b20 <SysTick_Handler+0x5f8>)
 8001a36:	f00b fc04 	bl	800d242 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,RECV);							// write command to execute
 8001a3a:	2240      	movs	r2, #64	; 0x40
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	4838      	ldr	r0, [pc, #224]	; (8001b20 <SysTick_Handler+0x5f8>)
 8001a40:	f00b fcc8 	bl	800d3d4 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,S0_REG))						// wait until end of command execution
 8001a44:	bf00      	nop
 8001a46:	2101      	movs	r1, #1
 8001a48:	4835      	ldr	r0, [pc, #212]	; (8001b20 <SysTick_Handler+0x5f8>)
 8001a4a:	f00b ff3c 	bl	800d8c6 <eth_rd_SOCKET_CMD>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f8      	bne.n	8001a46 <SysTick_Handler+0x51e>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001a54:	4b42      	ldr	r3, [pc, #264]	; (8001b60 <SysTick_Handler+0x638>)
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	4941      	ldr	r1, [pc, #260]	; (8001b68 <SysTick_Handler+0x640>)
 8001a62:	4842      	ldr	r0, [pc, #264]	; (8001b6c <SysTick_Handler+0x644>)
 8001a64:	f00d fa8c 	bl	800ef80 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001a68:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <SysTick_Handler+0x638>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <SysTick_Handler+0x648>)
 8001a70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

								if(S0_get_size > 0)	{ ETH.S_data_available=1;}					//Flag data received
 8001a74:	4b3a      	ldr	r3, [pc, #232]	; (8001b60 <SysTick_Handler+0x638>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <SysTick_Handler+0x55a>
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <SysTick_Handler+0x5f8>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	769a      	strb	r2, [r3, #26]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001a82:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <SysTick_Handler+0x648>)
 8001a84:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4838      	ldr	r0, [pc, #224]	; (8001b6c <SysTick_Handler+0x644>)
 8001a8c:	f009 fff4 	bl	800ba78 <ModBUS_Check>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00d      	beq.n	8001ab2 <SysTick_Handler+0x58a>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001a96:	4836      	ldr	r0, [pc, #216]	; (8001b70 <SysTick_Handler+0x648>)
 8001a98:	f00a f8f0 	bl	800bc7c <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 8001a9c:	4b34      	ldr	r3, [pc, #208]	; (8001b70 <SysTick_Handler+0x648>)
 8001a9e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	4932      	ldr	r1, [pc, #200]	; (8001b74 <SysTick_Handler+0x64c>)
 8001aaa:	482f      	ldr	r0, [pc, #188]	; (8001b68 <SysTick_Handler+0x640>)
 8001aac:	f00d fa68 	bl	800ef80 <CopiaVector>
 8001ab0:	e010      	b.n	8001ad4 <SysTick_Handler+0x5ac>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <SysTick_Handler+0x5f0>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <SysTick_Handler+0x59a>
 8001aba:	2111      	movs	r1, #17
 8001abc:	482e      	ldr	r0, [pc, #184]	; (8001b78 <SysTick_Handler+0x650>)
 8001abe:	f7ff fd17 	bl	80014f0 <ITM0_Write>
									if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n NO MBUS \r\n",strlen("\r\n NO MBUS \r\n"));
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <SysTick_Handler+0x604>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <SysTick_Handler+0x5ac>
 8001aca:	220d      	movs	r2, #13
 8001acc:	492a      	ldr	r1, [pc, #168]	; (8001b78 <SysTick_Handler+0x650>)
 8001ace:	4819      	ldr	r0, [pc, #100]	; (8001b34 <SysTick_Handler+0x60c>)
 8001ad0:	f003 fd6a 	bl	80055a8 <HAL_UART_Transmit_IT>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001ad4:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <SysTick_Handler+0x648>)
 8001ad6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <SysTick_Handler+0x654>)
 8001ade:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,S0_RX_BUFF, &tx_mem_pointer, send_size);	// write socket data
 8001ae0:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <SysTick_Handler+0x654>)
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	4a26      	ldr	r2, [pc, #152]	; (8001b80 <SysTick_Handler+0x658>)
 8001ae6:	2103      	movs	r1, #3
 8001ae8:	480d      	ldr	r0, [pc, #52]	; (8001b20 <SysTick_Handler+0x5f8>)
 8001aea:	f00b ff98 	bl	800da1e <eth_wr_SOCKET_DATA>

								SPI_ETH_WR_REG_16(&ETH,S_TX_WR,tx_mem_pointer,S0_REG);			// write tx memory pointer//SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer,0);			// write tx memory pointer
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <SysTick_Handler+0x658>)
 8001af0:	881a      	ldrh	r2, [r3, #0]
 8001af2:	2301      	movs	r3, #1
 8001af4:	2124      	movs	r1, #36	; 0x24
 8001af6:	480a      	ldr	r0, [pc, #40]	; (8001b20 <SysTick_Handler+0x5f8>)
 8001af8:	f00b fba3 	bl	800d242 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,SEND);							// write command to execute
 8001afc:	2220      	movs	r2, #32
 8001afe:	2101      	movs	r1, #1
 8001b00:	4807      	ldr	r0, [pc, #28]	; (8001b20 <SysTick_Handler+0x5f8>)
 8001b02:	f00b fc67 	bl	800d3d4 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,S0_REG))						// wait until end of command execution
 8001b06:	bf00      	nop
 8001b08:	2101      	movs	r1, #1
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <SysTick_Handler+0x5f8>)
 8001b0c:	f00b fedb 	bl	800d8c6 <eth_rd_SOCKET_CMD>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f8      	bne.n	8001b08 <SysTick_Handler+0x5e0>

							}
						}
					}
				 }
			 break;
 8001b16:	e27c      	b.n	8002012 <SysTick_Handler+0xaea>
 8001b18:	200041c4 	.word	0x200041c4
 8001b1c:	080106a8 	.word	0x080106a8
 8001b20:	20000304 	.word	0x20000304
 8001b24:	2000422f 	.word	0x2000422f
 8001b28:	080106bc 	.word	0x080106bc
 8001b2c:	20000021 	.word	0x20000021
 8001b30:	080106d0 	.word	0x080106d0
 8001b34:	200002b8 	.word	0x200002b8
 8001b38:	080106e4 	.word	0x080106e4
 8001b3c:	080106fc 	.word	0x080106fc
 8001b40:	08010714 	.word	0x08010714
 8001b44:	08010728 	.word	0x08010728
 8001b48:	08010740 	.word	0x08010740
 8001b4c:	08010758 	.word	0x08010758
 8001b50:	08010770 	.word	0x08010770
 8001b54:	08010788 	.word	0x08010788
 8001b58:	080107a0 	.word	0x080107a0
 8001b5c:	200041d4 	.word	0x200041d4
 8001b60:	200041cc 	.word	0x200041cc
 8001b64:	200041d0 	.word	0x200041d0
 8001b68:	20000328 	.word	0x20000328
 8001b6c:	20003136 	.word	0x20003136
 8001b70:	20003124 	.word	0x20003124
 8001b74:	2000333c 	.word	0x2000333c
 8001b78:	080107bc 	.word	0x080107bc
 8001b7c:	200041d2 	.word	0x200041d2
 8001b80:	200041ce 	.word	0x200041ce
						if (mb_eth._w_answer==0)
 8001b84:	4ba7      	ldr	r3, [pc, #668]	; (8001e24 <SysTick_Handler+0x8fc>)
 8001b86:	7a1b      	ldrb	r3, [r3, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f040 8088 	bne.w	8001c9e <SysTick_Handler+0x776>
							ETH.data[0]=0x00;
 8001b8e:	4ba6      	ldr	r3, [pc, #664]	; (8001e28 <SysTick_Handler+0x900>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[1]=0x00;
 8001b96:	4ba4      	ldr	r3, [pc, #656]	; (8001e28 <SysTick_Handler+0x900>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[2]=0x00;
 8001b9e:	4ba2      	ldr	r3, [pc, #648]	; (8001e28 <SysTick_Handler+0x900>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[3]=0x00;
 8001ba6:	4ba0      	ldr	r3, [pc, #640]	; (8001e28 <SysTick_Handler+0x900>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							ETH.data[4]=0x00;
 8001bae:	4b9e      	ldr	r3, [pc, #632]	; (8001e28 <SysTick_Handler+0x900>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
							ETH.data[5]=0x06;
 8001bb6:	4b9c      	ldr	r3, [pc, #624]	; (8001e28 <SysTick_Handler+0x900>)
 8001bb8:	2206      	movs	r2, #6
 8001bba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
							ETH.data[6]=0x01;
 8001bbe:	4b9a      	ldr	r3, [pc, #616]	; (8001e28 <SysTick_Handler+0x900>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
							ETH.data[7]=0x03;
 8001bc6:	4b98      	ldr	r3, [pc, #608]	; (8001e28 <SysTick_Handler+0x900>)
 8001bc8:	2203      	movs	r2, #3
 8001bca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
							ETH.data[8]=0x00;
 8001bce:	4b96      	ldr	r3, [pc, #600]	; (8001e28 <SysTick_Handler+0x900>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
							ETH.data[9]=0x00;
 8001bd6:	4b94      	ldr	r3, [pc, #592]	; (8001e28 <SysTick_Handler+0x900>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
							ETH.data[10]=0x00;
 8001bde:	4b92      	ldr	r3, [pc, #584]	; (8001e28 <SysTick_Handler+0x900>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
							ETH.data[11]=0x0A;
 8001be6:	4b90      	ldr	r3, [pc, #576]	; (8001e28 <SysTick_Handler+0x900>)
 8001be8:	220a      	movs	r2, #10
 8001bea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
							send_size=12;
 8001bee:	4b8f      	ldr	r3, [pc, #572]	; (8001e2c <SysTick_Handler+0x904>)
 8001bf0:	220c      	movs	r2, #12
 8001bf2:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,16);
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	488a      	ldr	r0, [pc, #552]	; (8001e24 <SysTick_Handler+0x8fc>)
 8001bfa:	f009 ffe8 	bl	800bbce <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 8001bfe:	2300      	movs	r3, #0
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2300      	movs	r3, #0
 8001c04:	220c      	movs	r2, #12
 8001c06:	498a      	ldr	r1, [pc, #552]	; (8001e30 <SysTick_Handler+0x908>)
 8001c08:	488a      	ldr	r0, [pc, #552]	; (8001e34 <SysTick_Handler+0x90c>)
 8001c0a:	f00d f9b9 	bl	800ef80 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,S0_TX_BUFF, &tx_mem_pointer, send_size);	// write socket data
 8001c0e:	4b87      	ldr	r3, [pc, #540]	; (8001e2c <SysTick_Handler+0x904>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	4a89      	ldr	r2, [pc, #548]	; (8001e38 <SysTick_Handler+0x910>)
 8001c14:	2102      	movs	r1, #2
 8001c16:	4884      	ldr	r0, [pc, #528]	; (8001e28 <SysTick_Handler+0x900>)
 8001c18:	f00b ff01 	bl	800da1e <eth_wr_SOCKET_DATA>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001c1c:	4982      	ldr	r1, [pc, #520]	; (8001e28 <SysTick_Handler+0x900>)
 8001c1e:	4887      	ldr	r0, [pc, #540]	; (8001e3c <SysTick_Handler+0x914>)
 8001c20:	f00b ffa1 	bl	800db66 <SPI_ETH_SNIFF>
							SPI_ETH_WR_REG_16(&ETH,S_TX_WR,tx_mem_pointer,S0_REG);			// write tx memory pointer
 8001c24:	4b84      	ldr	r3, [pc, #528]	; (8001e38 <SysTick_Handler+0x910>)
 8001c26:	881a      	ldrh	r2, [r3, #0]
 8001c28:	2301      	movs	r3, #1
 8001c2a:	2124      	movs	r1, #36	; 0x24
 8001c2c:	487e      	ldr	r0, [pc, #504]	; (8001e28 <SysTick_Handler+0x900>)
 8001c2e:	f00b fb08 	bl	800d242 <SPI_ETH_WR_REG_16>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001c32:	497d      	ldr	r1, [pc, #500]	; (8001e28 <SysTick_Handler+0x900>)
 8001c34:	4881      	ldr	r0, [pc, #516]	; (8001e3c <SysTick_Handler+0x914>)
 8001c36:	f00b ff96 	bl	800db66 <SPI_ETH_SNIFF>
							eth_wr_SOCKET_CMD(&ETH,S0_REG,SEND);							// write command to execute
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	487a      	ldr	r0, [pc, #488]	; (8001e28 <SysTick_Handler+0x900>)
 8001c40:	f00b fbc8 	bl	800d3d4 <eth_wr_SOCKET_CMD>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8001c44:	4978      	ldr	r1, [pc, #480]	; (8001e28 <SysTick_Handler+0x900>)
 8001c46:	487d      	ldr	r0, [pc, #500]	; (8001e3c <SysTick_Handler+0x914>)
 8001c48:	f00b ff8d 	bl	800db66 <SPI_ETH_SNIFF>
							uint16_t read=0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
								read=SPI_ETH_REG(&ETH, S_IR,S0_REG,SPI_READ, ETH.GAR,1);
 8001c52:	2301      	movs	r3, #1
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	4b7a      	ldr	r3, [pc, #488]	; (8001e40 <SysTick_Handler+0x918>)
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2102      	movs	r1, #2
 8001c60:	4871      	ldr	r0, [pc, #452]	; (8001e28 <SysTick_Handler+0x900>)
 8001c62:	f00b fa68 	bl	800d136 <SPI_ETH_REG>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f8a7 3202 	strh.w	r3, [r7, #514]	; 0x202
							mb_eth._w_answer=1;	// Waiting answer flag_w_answer=1;	// Waiting answer flag
 8001c6c:	4b6d      	ldr	r3, [pc, #436]	; (8001e24 <SysTick_Handler+0x8fc>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	721a      	strb	r2, [r3, #8]
							MB_TOUT_ticks=0;	// restart counting
 8001c72:	4b74      	ldr	r3, [pc, #464]	; (8001e44 <SysTick_Handler+0x91c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001c78:	4b73      	ldr	r3, [pc, #460]	; (8001e48 <SysTick_Handler+0x920>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <SysTick_Handler+0x760>
 8001c80:	2117      	movs	r1, #23
 8001c82:	4872      	ldr	r0, [pc, #456]	; (8001e4c <SysTick_Handler+0x924>)
 8001c84:	f7ff fc34 	bl	80014f0 <ITM0_Write>
							if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n SENT MBUS REQ \r\n",strlen("\r\n SENT MBUS REQ \r\n"));
 8001c88:	4b71      	ldr	r3, [pc, #452]	; (8001e50 <SysTick_Handler+0x928>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 81c0 	beq.w	8002012 <SysTick_Handler+0xaea>
 8001c92:	2213      	movs	r2, #19
 8001c94:	496d      	ldr	r1, [pc, #436]	; (8001e4c <SysTick_Handler+0x924>)
 8001c96:	486f      	ldr	r0, [pc, #444]	; (8001e54 <SysTick_Handler+0x92c>)
 8001c98:	f003 fc86 	bl	80055a8 <HAL_UART_Transmit_IT>
			 break;
 8001c9c:	e1b9      	b.n	8002012 <SysTick_Handler+0xaea>
						S0_get_size = SPI_ETH_REG(&ETH, S_RX_RSR ,S0_REG ,SPI_READ, spi_Data,2);
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	9301      	str	r3, [sp, #4]
 8001ca2:	4b6d      	ldr	r3, [pc, #436]	; (8001e58 <SysTick_Handler+0x930>)
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	2201      	movs	r2, #1
 8001caa:	2126      	movs	r1, #38	; 0x26
 8001cac:	485e      	ldr	r0, [pc, #376]	; (8001e28 <SysTick_Handler+0x900>)
 8001cae:	f00b fa42 	bl	800d136 <SPI_ETH_REG>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b69      	ldr	r3, [pc, #420]	; (8001e5c <SysTick_Handler+0x934>)
 8001cb8:	801a      	strh	r2, [r3, #0]
						if(S0_get_size != 0x00)
 8001cba:	4b68      	ldr	r3, [pc, #416]	; (8001e5c <SysTick_Handler+0x934>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 81a7 	beq.w	8002012 <SysTick_Handler+0xaea>
								eth_rd_SOCKET_DATA(&ETH,S0_RX_BUFF,&rx_mem_pointer,S0_get_size); // read socket data
 8001cc4:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <SysTick_Handler+0x934>)
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	4a65      	ldr	r2, [pc, #404]	; (8001e60 <SysTick_Handler+0x938>)
 8001cca:	2103      	movs	r1, #3
 8001ccc:	4856      	ldr	r0, [pc, #344]	; (8001e28 <SysTick_Handler+0x900>)
 8001cce:	f00b fe15 	bl	800d8fc <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S_RX_RD0,rx_mem_pointer,S0_REG);		// write rx memory pointer
 8001cd2:	4b63      	ldr	r3, [pc, #396]	; (8001e60 <SysTick_Handler+0x938>)
 8001cd4:	881a      	ldrh	r2, [r3, #0]
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	2128      	movs	r1, #40	; 0x28
 8001cda:	4853      	ldr	r0, [pc, #332]	; (8001e28 <SysTick_Handler+0x900>)
 8001cdc:	f00b fab1 	bl	800d242 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,RECV);							// write command to execute
 8001ce0:	2240      	movs	r2, #64	; 0x40
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	4850      	ldr	r0, [pc, #320]	; (8001e28 <SysTick_Handler+0x900>)
 8001ce6:	f00b fb75 	bl	800d3d4 <eth_wr_SOCKET_CMD>
								if (ETH_DBG_EN) ITM0_Write("\r\n RCVD DATA \r\n",strlen("\r\n RCVD DATA \r\n"));
 8001cea:	4b57      	ldr	r3, [pc, #348]	; (8001e48 <SysTick_Handler+0x920>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <SysTick_Handler+0x7d2>
 8001cf2:	210f      	movs	r1, #15
 8001cf4:	485b      	ldr	r0, [pc, #364]	; (8001e64 <SysTick_Handler+0x93c>)
 8001cf6:	f7ff fbfb 	bl	80014f0 <ITM0_Write>
								if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n RCVD DATA \r\n",strlen("\r\n RCVD DATA \r\n"));
 8001cfa:	4b55      	ldr	r3, [pc, #340]	; (8001e50 <SysTick_Handler+0x928>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d004      	beq.n	8001d0c <SysTick_Handler+0x7e4>
 8001d02:	220f      	movs	r2, #15
 8001d04:	4957      	ldr	r1, [pc, #348]	; (8001e64 <SysTick_Handler+0x93c>)
 8001d06:	4853      	ldr	r0, [pc, #332]	; (8001e54 <SysTick_Handler+0x92c>)
 8001d08:	f003 fc4e 	bl	80055a8 <HAL_UART_Transmit_IT>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001d0c:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <SysTick_Handler+0x934>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	461a      	mov	r2, r3
 8001d12:	2300      	movs	r3, #0
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2300      	movs	r3, #0
 8001d18:	4946      	ldr	r1, [pc, #280]	; (8001e34 <SysTick_Handler+0x90c>)
 8001d1a:	4853      	ldr	r0, [pc, #332]	; (8001e68 <SysTick_Handler+0x940>)
 8001d1c:	f00d f930 	bl	800ef80 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001d20:	4b4e      	ldr	r3, [pc, #312]	; (8001e5c <SysTick_Handler+0x934>)
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	461a      	mov	r2, r3
 8001d26:	4b3f      	ldr	r3, [pc, #252]	; (8001e24 <SysTick_Handler+0x8fc>)
 8001d28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
								if(S0_get_size > 0)	{ ETH.S_data_available=1;}
 8001d2c:	4b4b      	ldr	r3, [pc, #300]	; (8001e5c <SysTick_Handler+0x934>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <SysTick_Handler+0x812>
 8001d34:	4b3c      	ldr	r3, [pc, #240]	; (8001e28 <SysTick_Handler+0x900>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	769a      	strb	r2, [r3, #26]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001d3a:	4b3a      	ldr	r3, [pc, #232]	; (8001e24 <SysTick_Handler+0x8fc>)
 8001d3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001d40:	4619      	mov	r1, r3
 8001d42:	4849      	ldr	r0, [pc, #292]	; (8001e68 <SysTick_Handler+0x940>)
 8001d44:	f009 fe98 	bl	800ba78 <ModBUS_Check>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d02d      	beq.n	8001daa <SysTick_Handler+0x882>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001d4e:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <SysTick_Handler+0x8fc>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	721a      	strb	r2, [r3, #8]
										MB_TOUT_ticks=0;
 8001d54:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <SysTick_Handler+0x91c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001d5a:	4832      	ldr	r0, [pc, #200]	; (8001e24 <SysTick_Handler+0x8fc>)
 8001d5c:	f009 ff8e 	bl	800bc7c <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001d60:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <SysTick_Handler+0x8fc>)
 8001d62:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001d66:	2300      	movs	r3, #0
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	493e      	ldr	r1, [pc, #248]	; (8001e68 <SysTick_Handler+0x940>)
 8001d6e:	483f      	ldr	r0, [pc, #252]	; (8001e6c <SysTick_Handler+0x944>)
 8001d70:	f00d f906 	bl	800ef80 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001d74:	2300      	movs	r3, #0
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2300      	movs	r3, #0
 8001d7a:	2240      	movs	r2, #64	; 0x40
 8001d7c:	493c      	ldr	r1, [pc, #240]	; (8001e70 <SysTick_Handler+0x948>)
 8001d7e:	483d      	ldr	r0, [pc, #244]	; (8001e74 <SysTick_Handler+0x94c>)
 8001d80:	f00d f8fe 	bl	800ef80 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\ RCVD MBUS REQ \r\n"));
 8001d84:	4b30      	ldr	r3, [pc, #192]	; (8001e48 <SysTick_Handler+0x920>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <SysTick_Handler+0x86c>
 8001d8c:	2113      	movs	r1, #19
 8001d8e:	483a      	ldr	r0, [pc, #232]	; (8001e78 <SysTick_Handler+0x950>)
 8001d90:	f7ff fbae 	bl	80014f0 <ITM0_Write>
										if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n RCVD MBUS REQ \r\n",strlen("\r\n RCVD MBUS REQ \r\n"));
 8001d94:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <SysTick_Handler+0x928>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 813a 	beq.w	8002012 <SysTick_Handler+0xaea>
 8001d9e:	2213      	movs	r2, #19
 8001da0:	4935      	ldr	r1, [pc, #212]	; (8001e78 <SysTick_Handler+0x950>)
 8001da2:	482c      	ldr	r0, [pc, #176]	; (8001e54 <SysTick_Handler+0x92c>)
 8001da4:	f003 fc00 	bl	80055a8 <HAL_UART_Transmit_IT>
			 break;
 8001da8:	e133      	b.n	8002012 <SysTick_Handler+0xaea>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n NO MBUS \r\n"));
 8001daa:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <SysTick_Handler+0x920>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <SysTick_Handler+0x892>
 8001db2:	210d      	movs	r1, #13
 8001db4:	4831      	ldr	r0, [pc, #196]	; (8001e7c <SysTick_Handler+0x954>)
 8001db6:	f7ff fb9b 	bl	80014f0 <ITM0_Write>
										if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n NO MBUS \r\n",strlen("\r\n NO MBUS \r\n"));
 8001dba:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <SysTick_Handler+0x928>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 8127 	beq.w	8002012 <SysTick_Handler+0xaea>
 8001dc4:	220d      	movs	r2, #13
 8001dc6:	492d      	ldr	r1, [pc, #180]	; (8001e7c <SysTick_Handler+0x954>)
 8001dc8:	4822      	ldr	r0, [pc, #136]	; (8001e54 <SysTick_Handler+0x92c>)
 8001dca:	f003 fbed 	bl	80055a8 <HAL_UART_Transmit_IT>
			 break;
 8001dce:	e120      	b.n	8002012 <SysTick_Handler+0xaea>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <SysTick_Handler+0x920>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <SysTick_Handler+0x8b8>
 8001dd8:	2115      	movs	r1, #21
 8001dda:	4829      	ldr	r0, [pc, #164]	; (8001e80 <SysTick_Handler+0x958>)
 8001ddc:	f7ff fb88 	bl	80014f0 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_FIN_WAIT \r\n",strlen("\r\n S0_SOCK_FIN_WAIT \r\n"));
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <SysTick_Handler+0x928>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d004      	beq.n	8001df2 <SysTick_Handler+0x8ca>
 8001de8:	2216      	movs	r2, #22
 8001dea:	4926      	ldr	r1, [pc, #152]	; (8001e84 <SysTick_Handler+0x95c>)
 8001dec:	4819      	ldr	r0, [pc, #100]	; (8001e54 <SysTick_Handler+0x92c>)
 8001dee:	f003 fbdb 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <SysTick_Handler+0x900>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001df8:	e10c      	b.n	8002014 <SysTick_Handler+0xaec>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001dfa:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <SysTick_Handler+0x920>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <SysTick_Handler+0x8e2>
 8001e02:	2114      	movs	r1, #20
 8001e04:	4820      	ldr	r0, [pc, #128]	; (8001e88 <SysTick_Handler+0x960>)
 8001e06:	f7ff fb73 	bl	80014f0 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_CLOSING \r\n",strlen("\r\n S0_SOCK_CLOSING \r\n"));
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <SysTick_Handler+0x928>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d004      	beq.n	8001e1c <SysTick_Handler+0x8f4>
 8001e12:	2215      	movs	r2, #21
 8001e14:	491d      	ldr	r1, [pc, #116]	; (8001e8c <SysTick_Handler+0x964>)
 8001e16:	480f      	ldr	r0, [pc, #60]	; (8001e54 <SysTick_Handler+0x92c>)
 8001e18:	f003 fbc6 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001e1c:	4b02      	ldr	r3, [pc, #8]	; (8001e28 <SysTick_Handler+0x900>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001e22:	e0f7      	b.n	8002014 <SysTick_Handler+0xaec>
 8001e24:	20003124 	.word	0x20003124
 8001e28:	20000304 	.word	0x20000304
 8001e2c:	200041d2 	.word	0x200041d2
 8001e30:	2000333c 	.word	0x2000333c
 8001e34:	20000328 	.word	0x20000328
 8001e38:	200041ce 	.word	0x200041ce
 8001e3c:	20001378 	.word	0x20001378
 8001e40:	20001328 	.word	0x20001328
 8001e44:	20004650 	.word	0x20004650
 8001e48:	200041c4 	.word	0x200041c4
 8001e4c:	080107cc 	.word	0x080107cc
 8001e50:	20000021 	.word	0x20000021
 8001e54:	200002b8 	.word	0x200002b8
 8001e58:	200041d4 	.word	0x200041d4
 8001e5c:	200041cc 	.word	0x200041cc
 8001e60:	200041d0 	.word	0x200041d0
 8001e64:	080107e0 	.word	0x080107e0
 8001e68:	20003136 	.word	0x20003136
 8001e6c:	20000b28 	.word	0x20000b28
 8001e70:	20003548 	.word	0x20003548
 8001e74:	20003b98 	.word	0x20003b98
 8001e78:	080107f0 	.word	0x080107f0
 8001e7c:	080107bc 	.word	0x080107bc
 8001e80:	08010804 	.word	0x08010804
 8001e84:	0801081c 	.word	0x0801081c
 8001e88:	08010834 	.word	0x08010834
 8001e8c:	0801084c 	.word	0x0801084c
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001e90:	4b79      	ldr	r3, [pc, #484]	; (8002078 <SysTick_Handler+0xb50>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <SysTick_Handler+0x978>
 8001e98:	2116      	movs	r1, #22
 8001e9a:	4878      	ldr	r0, [pc, #480]	; (800207c <SysTick_Handler+0xb54>)
 8001e9c:	f7ff fb28 	bl	80014f0 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n nS0_SOCK_TIME_WAIT \r\n",strlen("\r\n nS0_SOCK_TIME_WAIT \r\n"));
 8001ea0:	4b77      	ldr	r3, [pc, #476]	; (8002080 <SysTick_Handler+0xb58>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d004      	beq.n	8001eb2 <SysTick_Handler+0x98a>
 8001ea8:	2218      	movs	r2, #24
 8001eaa:	4976      	ldr	r1, [pc, #472]	; (8002084 <SysTick_Handler+0xb5c>)
 8001eac:	4876      	ldr	r0, [pc, #472]	; (8002088 <SysTick_Handler+0xb60>)
 8001eae:	f003 fb7b 	bl	80055a8 <HAL_UART_Transmit_IT>
					eth_wr_SOCKET_CMD(&ETH,S0_REG, DISCON );
 8001eb2:	2208      	movs	r2, #8
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	4875      	ldr	r0, [pc, #468]	; (800208c <SysTick_Handler+0xb64>)
 8001eb8:	f00b fa8c 	bl	800d3d4 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH,S_CR ,S0_REG,SPI_READ, spi_Data,1))//while( SPI_ETH_REG(&ETH, S_CR_ADDR_BASEH,S_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001ebc:	bf00      	nop
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	4b73      	ldr	r3, [pc, #460]	; (8002090 <SysTick_Handler+0xb68>)
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	2201      	movs	r2, #1
 8001eca:	2101      	movs	r1, #1
 8001ecc:	486f      	ldr	r0, [pc, #444]	; (800208c <SysTick_Handler+0xb64>)
 8001ece:	f00b f932 	bl	800d136 <SPI_ETH_REG>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1f2      	bne.n	8001ebe <SysTick_Handler+0x996>
					{}
					ETH.ETH_WDG=0;
 8001ed8:	4b6c      	ldr	r3, [pc, #432]	; (800208c <SysTick_Handler+0xb64>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001ede:	e099      	b.n	8002014 <SysTick_Handler+0xaec>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001ee0:	4b65      	ldr	r3, [pc, #404]	; (8002078 <SysTick_Handler+0xb50>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <SysTick_Handler+0x9c8>
 8001ee8:	2117      	movs	r1, #23
 8001eea:	486a      	ldr	r0, [pc, #424]	; (8002094 <SysTick_Handler+0xb6c>)
 8001eec:	f7ff fb00 	bl	80014f0 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_CLOSE_WAIT \r\n",strlen("\r\n S0_SOCK_CLOSE_WAIT \r\n"));
 8001ef0:	4b63      	ldr	r3, [pc, #396]	; (8002080 <SysTick_Handler+0xb58>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d004      	beq.n	8001f02 <SysTick_Handler+0x9da>
 8001ef8:	2218      	movs	r2, #24
 8001efa:	4967      	ldr	r1, [pc, #412]	; (8002098 <SysTick_Handler+0xb70>)
 8001efc:	4862      	ldr	r0, [pc, #392]	; (8002088 <SysTick_Handler+0xb60>)
 8001efe:	f003 fb53 	bl	80055a8 <HAL_UART_Transmit_IT>
					eth_wr_SOCKET_CMD(&ETH,S0_REG,DISCON );
 8001f02:	2208      	movs	r2, #8
 8001f04:	2101      	movs	r1, #1
 8001f06:	4861      	ldr	r0, [pc, #388]	; (800208c <SysTick_Handler+0xb64>)
 8001f08:	f00b fa64 	bl	800d3d4 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH,S_CR,S0_REG,SPI_READ, spi_Data,1))
 8001f0c:	bf00      	nop
 8001f0e:	2301      	movs	r3, #1
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	4b5f      	ldr	r3, [pc, #380]	; (8002090 <SysTick_Handler+0xb68>)
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2300      	movs	r3, #0
 8001f18:	2201      	movs	r2, #1
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	485b      	ldr	r0, [pc, #364]	; (800208c <SysTick_Handler+0xb64>)
 8001f1e:	f00b f90a 	bl	800d136 <SPI_ETH_REG>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f2      	bne.n	8001f0e <SysTick_Handler+0x9e6>
					{}
					ETH.ETH_WDG=0;
 8001f28:	4b58      	ldr	r3, [pc, #352]	; (800208c <SysTick_Handler+0xb64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f2e:	e071      	b.n	8002014 <SysTick_Handler+0xaec>
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_LAST_ACK \r\n",strlen("\r\n S0_SOCK_LAST_ACK \r\n"));
 8001f30:	4b51      	ldr	r3, [pc, #324]	; (8002078 <SysTick_Handler+0xb50>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <SysTick_Handler+0xa18>
 8001f38:	2116      	movs	r1, #22
 8001f3a:	4858      	ldr	r0, [pc, #352]	; (800209c <SysTick_Handler+0xb74>)
 8001f3c:	f7ff fad8 	bl	80014f0 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_LAST_ACK \r\n",strlen("\r\n S0_SOCK_LAST_ACK \r\n"));
 8001f40:	4b4f      	ldr	r3, [pc, #316]	; (8002080 <SysTick_Handler+0xb58>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d004      	beq.n	8001f52 <SysTick_Handler+0xa2a>
 8001f48:	2216      	movs	r2, #22
 8001f4a:	4954      	ldr	r1, [pc, #336]	; (800209c <SysTick_Handler+0xb74>)
 8001f4c:	484e      	ldr	r0, [pc, #312]	; (8002088 <SysTick_Handler+0xb60>)
 8001f4e:	f003 fb2b 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001f52:	4b4e      	ldr	r3, [pc, #312]	; (800208c <SysTick_Handler+0xb64>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f58:	e05c      	b.n	8002014 <SysTick_Handler+0xaec>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_UDP \r\n",strlen("\r\n S0_SOCK_UDP \r\n"));
 8001f5a:	4b47      	ldr	r3, [pc, #284]	; (8002078 <SysTick_Handler+0xb50>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <SysTick_Handler+0xa42>
 8001f62:	2111      	movs	r1, #17
 8001f64:	484e      	ldr	r0, [pc, #312]	; (80020a0 <SysTick_Handler+0xb78>)
 8001f66:	f7ff fac3 	bl	80014f0 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_UDP \r\n",strlen("\r\n S0_SOCK_UDP \r\n"));
 8001f6a:	4b45      	ldr	r3, [pc, #276]	; (8002080 <SysTick_Handler+0xb58>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d004      	beq.n	8001f7c <SysTick_Handler+0xa54>
 8001f72:	2211      	movs	r2, #17
 8001f74:	494a      	ldr	r1, [pc, #296]	; (80020a0 <SysTick_Handler+0xb78>)
 8001f76:	4844      	ldr	r0, [pc, #272]	; (8002088 <SysTick_Handler+0xb60>)
 8001f78:	f003 fb16 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001f7c:	4b43      	ldr	r3, [pc, #268]	; (800208c <SysTick_Handler+0xb64>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001f82:	e047      	b.n	8002014 <SysTick_Handler+0xaec>
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_IPRAW \r\n",strlen("\r\n S0_SOCK_IPRAW \r\n"));
 8001f84:	4b3c      	ldr	r3, [pc, #240]	; (8002078 <SysTick_Handler+0xb50>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <SysTick_Handler+0xa6c>
 8001f8c:	2113      	movs	r1, #19
 8001f8e:	4845      	ldr	r0, [pc, #276]	; (80020a4 <SysTick_Handler+0xb7c>)
 8001f90:	f7ff faae 	bl	80014f0 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_IPRAW \r\n",strlen("\r\n S0_SOCK_IPRAW \r\n"));
 8001f94:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <SysTick_Handler+0xb58>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d004      	beq.n	8001fa6 <SysTick_Handler+0xa7e>
 8001f9c:	2213      	movs	r2, #19
 8001f9e:	4941      	ldr	r1, [pc, #260]	; (80020a4 <SysTick_Handler+0xb7c>)
 8001fa0:	4839      	ldr	r0, [pc, #228]	; (8002088 <SysTick_Handler+0xb60>)
 8001fa2:	f003 fb01 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <SysTick_Handler+0xb64>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001fac:	e032      	b.n	8002014 <SysTick_Handler+0xaec>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_MACRAW \r\n",strlen("\r\n S0_SOCK_MACRAW \r\n"));
 8001fae:	4b32      	ldr	r3, [pc, #200]	; (8002078 <SysTick_Handler+0xb50>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <SysTick_Handler+0xa96>
 8001fb6:	2114      	movs	r1, #20
 8001fb8:	483b      	ldr	r0, [pc, #236]	; (80020a8 <SysTick_Handler+0xb80>)
 8001fba:	f7ff fa99 	bl	80014f0 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_MACRAW \r\n",strlen("\r\n S0_SOCK_MACRAW \r\n"));
 8001fbe:	4b30      	ldr	r3, [pc, #192]	; (8002080 <SysTick_Handler+0xb58>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <SysTick_Handler+0xaa8>
 8001fc6:	2214      	movs	r2, #20
 8001fc8:	4937      	ldr	r1, [pc, #220]	; (80020a8 <SysTick_Handler+0xb80>)
 8001fca:	482f      	ldr	r0, [pc, #188]	; (8002088 <SysTick_Handler+0xb60>)
 8001fcc:	f003 faec 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001fd0:	4b2e      	ldr	r3, [pc, #184]	; (800208c <SysTick_Handler+0xb64>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001fd6:	e01d      	b.n	8002014 <SysTick_Handler+0xaec>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\n S0_SOCK_PPOE \r\n",strlen("\r\n S0_SOCK_PPOE \r\n"));
 8001fd8:	4b27      	ldr	r3, [pc, #156]	; (8002078 <SysTick_Handler+0xb50>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <SysTick_Handler+0xac0>
 8001fe0:	2112      	movs	r1, #18
 8001fe2:	4832      	ldr	r0, [pc, #200]	; (80020ac <SysTick_Handler+0xb84>)
 8001fe4:	f7ff fa84 	bl	80014f0 <ITM0_Write>
					 if (ETH_DBG_SER_EN) HAL_UART_Transmit_IT(&huart2,"\r\n S0_SOCK_PPOE \r\n",strlen("\r\n S0_SOCK_UDP \r\n"));
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <SysTick_Handler+0xb58>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d004      	beq.n	8001ffa <SysTick_Handler+0xad2>
 8001ff0:	2211      	movs	r2, #17
 8001ff2:	492e      	ldr	r1, [pc, #184]	; (80020ac <SysTick_Handler+0xb84>)
 8001ff4:	4824      	ldr	r0, [pc, #144]	; (8002088 <SysTick_Handler+0xb60>)
 8001ff6:	f003 fad7 	bl	80055a8 <HAL_UART_Transmit_IT>
					 ETH.ETH_WDG=0;
 8001ffa:	4b24      	ldr	r3, [pc, #144]	; (800208c <SysTick_Handler+0xb64>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8002000:	e008      	b.n	8002014 <SysTick_Handler+0xaec>
	  }
	  }else
	  	  {
		  //ETH.operacion=SPI_READ;
		  //ETH.TX[3]=0x00;
		  SPI_ETH(&ETH);
 8002002:	4822      	ldr	r0, [pc, #136]	; (800208c <SysTick_Handler+0xb64>)
 8002004:	f00b f86f 	bl	800d0e6 <SPI_ETH>
 8002008:	e004      	b.n	8002014 <SysTick_Handler+0xaec>
			 default:
 800200a:	bf00      	nop
 800200c:	e002      	b.n	8002014 <SysTick_Handler+0xaec>
			 break;
 800200e:	bf00      	nop
 8002010:	e000      	b.n	8002014 <SysTick_Handler+0xaec>
			 break;
 8002012:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8002014:	4b26      	ldr	r3, [pc, #152]	; (80020b0 <SysTick_Handler+0xb88>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d102      	bne.n	8002022 <SysTick_Handler+0xafa>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <SysTick_Handler+0xb88>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
		  }
  }

if(EN_USART1_TMR==1) USART1_ticks++;
 8002022:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <SysTick_Handler+0xb8c>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d104      	bne.n	8002034 <SysTick_Handler+0xb0c>
 800202a:	4b23      	ldr	r3, [pc, #140]	; (80020b8 <SysTick_Handler+0xb90>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	3301      	adds	r3, #1
 8002030:	4a21      	ldr	r2, [pc, #132]	; (80020b8 <SysTick_Handler+0xb90>)
 8002032:	6013      	str	r3, [r2, #0]

if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8002034:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <SysTick_Handler+0xb90>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b01      	cmp	r3, #1
 800203a:	dd0f      	ble.n	800205c <SysTick_Handler+0xb34>
{
	USART1_ticks=0;
 800203c:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <SysTick_Handler+0xb90>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
	FLAG_USART1=1;
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <SysTick_Handler+0xb94>)
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]
	EN_USART1_TMR=0;
 8002048:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <SysTick_Handler+0xb8c>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
	items_rx=uart1pass;
 800204e:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <SysTick_Handler+0xb98>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <SysTick_Handler+0xb9c>)
 8002054:	6013      	str	r3, [r2, #0]
	uart1pass=0;
 8002056:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <SysTick_Handler+0xb98>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800205c:	f000 fd3e 	bl	8002adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 8002060:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <SysTick_Handler+0xba0>)
 8002062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002066:	2b04      	cmp	r3, #4
 8002068:	d132      	bne.n	80020d0 <SysTick_Handler+0xba8>
	{
		ticks++;
 800206a:	4b18      	ldr	r3, [pc, #96]	; (80020cc <SysTick_Handler+0xba4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	3301      	adds	r3, #1
 8002070:	4a16      	ldr	r2, [pc, #88]	; (80020cc <SysTick_Handler+0xba4>)
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	e02f      	b.n	80020d6 <SysTick_Handler+0xbae>
 8002076:	bf00      	nop
 8002078:	200041c4 	.word	0x200041c4
 800207c:	08010864 	.word	0x08010864
 8002080:	20000021 	.word	0x20000021
 8002084:	0801087c 	.word	0x0801087c
 8002088:	200002b8 	.word	0x200002b8
 800208c:	20000304 	.word	0x20000304
 8002090:	200041d4 	.word	0x200041d4
 8002094:	08010898 	.word	0x08010898
 8002098:	080108b0 	.word	0x080108b0
 800209c:	080108cc 	.word	0x080108cc
 80020a0:	080108e4 	.word	0x080108e4
 80020a4:	080108f8 	.word	0x080108f8
 80020a8:	0801090c 	.word	0x0801090c
 80020ac:	08010924 	.word	0x08010924
 80020b0:	20000300 	.word	0x20000300
 80020b4:	2000422c 	.word	0x2000422c
 80020b8:	20004660 	.word	0x20004660
 80020bc:	20004664 	.word	0x20004664
 80020c0:	2000465c 	.word	0x2000465c
 80020c4:	20004668 	.word	0x20004668
 80020c8:	200023d4 	.word	0x200023d4
 80020cc:	20004654 	.word	0x20004654
	}
	else
	{
		ticks=0;
 80020d0:	4b34      	ldr	r3, [pc, #208]	; (80021a4 <SysTick_Handler+0xc7c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
	}

	if(wf._ejecucion==1)
 80020d6:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <SysTick_Handler+0xc80>)
 80020d8:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d158      	bne.n	8002192 <SysTick_Handler+0xc6a>
		{
			if (FLAG_TIMEOUT!=1)
 80020e0:	4b32      	ldr	r3, [pc, #200]	; (80021ac <SysTick_Handler+0xc84>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d017      	beq.n	8002118 <SysTick_Handler+0xbf0>
			{
				if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 80020e8:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <SysTick_Handler+0xc80>)
 80020ea:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d006      	beq.n	8002100 <SysTick_Handler+0xbd8>
 80020f2:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <SysTick_Handler+0xc80>)
 80020f4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80020f8:	3301      	adds	r3, #1
 80020fa:	4a2b      	ldr	r2, [pc, #172]	; (80021a8 <SysTick_Handler+0xc80>)
 80020fc:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
				if(wf._instruccion==2) wf._ticks2++;
 8002100:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <SysTick_Handler+0xc80>)
 8002102:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8002106:	2b02      	cmp	r3, #2
 8002108:	d106      	bne.n	8002118 <SysTick_Handler+0xbf0>
 800210a:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <SysTick_Handler+0xc80>)
 800210c:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8002110:	3301      	adds	r3, #1
 8002112:	4a25      	ldr	r2, [pc, #148]	; (80021a8 <SysTick_Handler+0xc80>)
 8002114:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
			}


			if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8002118:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <SysTick_Handler+0xc80>)
 800211a:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800211e:	2b02      	cmp	r3, #2
 8002120:	d018      	beq.n	8002154 <SysTick_Handler+0xc2c>
 8002122:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <SysTick_Handler+0xc80>)
 8002124:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8002128:	f241 527c 	movw	r2, #5500	; 0x157c
 800212c:	4293      	cmp	r3, r2
 800212e:	dd11      	ble.n	8002154 <SysTick_Handler+0xc2c>
			{
				FLAG_TIMEOUT=1;
 8002130:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <SysTick_Handler+0xc84>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
				if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <SysTick_Handler+0xc88>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f242 020c 	movw	r2, #8204	; 0x200c
 8002140:	4293      	cmp	r3, r2
 8002142:	d107      	bne.n	8002154 <SysTick_Handler+0xc2c>
				{
					HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8002144:	2201      	movs	r2, #1
 8002146:	491b      	ldr	r1, [pc, #108]	; (80021b4 <SysTick_Handler+0xc8c>)
 8002148:	4819      	ldr	r0, [pc, #100]	; (80021b0 <SysTick_Handler+0xc88>)
 800214a:	f003 fa72 	bl	8005632 <HAL_UART_Receive_IT>
					EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 800214e:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <SysTick_Handler+0xc90>)
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
				}
				//wf._ticks=0;
			}
			if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <SysTick_Handler+0xc80>)
 8002156:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 800215a:	2b02      	cmp	r3, #2
 800215c:	d11d      	bne.n	800219a <SysTick_Handler+0xc72>
 800215e:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <SysTick_Handler+0xc80>)
 8002160:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8002164:	f245 0214 	movw	r2, #20500	; 0x5014
 8002168:	4293      	cmp	r3, r2
 800216a:	dd16      	ble.n	800219a <SysTick_Handler+0xc72>
			{
				FLAG_TIMEOUT=1;
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <SysTick_Handler+0xc84>)
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
				if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <SysTick_Handler+0xc88>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f242 020c 	movw	r2, #8204	; 0x200c
 800217c:	4293      	cmp	r3, r2
 800217e:	d10c      	bne.n	800219a <SysTick_Handler+0xc72>
				{
					HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8002180:	2201      	movs	r2, #1
 8002182:	490c      	ldr	r1, [pc, #48]	; (80021b4 <SysTick_Handler+0xc8c>)
 8002184:	480a      	ldr	r0, [pc, #40]	; (80021b0 <SysTick_Handler+0xc88>)
 8002186:	f003 fa54 	bl	8005632 <HAL_UART_Receive_IT>
					EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <SysTick_Handler+0xc90>)
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]
		else
		{
			wf._ticks=0;
		}
  /* USER CODE END SysTick_IRQn 1 */
}
 8002190:	e003      	b.n	800219a <SysTick_Handler+0xc72>
			wf._ticks=0;
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <SysTick_Handler+0xc80>)
 8002194:	2200      	movs	r2, #0
 8002196:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 800219a:	bf00      	nop
 800219c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20004654 	.word	0x20004654
 80021a8:	200023d4 	.word	0x200023d4
 80021ac:	2000422d 	.word	0x2000422d
 80021b0:	20000274 	.word	0x20000274
 80021b4:	20004640 	.word	0x20004640
 80021b8:	2000422b 	.word	0x2000422b

080021bc <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a25      	ldr	r2, [pc, #148]	; (8002260 <HAL_UART_ErrorCallback+0xa4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d121      	bne.n	8002212 <HAL_UART_ErrorCallback+0x56>
	{
		 volatile int aore=0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
		 volatile int bore=0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 80021d6:	4b23      	ldr	r3, [pc, #140]	; (8002264 <HAL_UART_ErrorCallback+0xa8>)
 80021d8:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 80021dc:	3301      	adds	r3, #1
 80021de:	4a21      	ldr	r2, [pc, #132]	; (8002264 <HAL_UART_ErrorCallback+0xa8>)
 80021e0:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	617b      	str	r3, [r7, #20]
			bore=ERRUART->Instance->DR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	613b      	str	r3, [r7, #16]


		 HAL_UART_Transmit_IT(&huart2,"\r\n ERROR HW UARRT1 \r\n",strlen("\r\n ERROR HW UARRT1 \r\n"));
 80021f4:	2215      	movs	r2, #21
 80021f6:	491c      	ldr	r1, [pc, #112]	; (8002268 <HAL_UART_ErrorCallback+0xac>)
 80021f8:	481c      	ldr	r0, [pc, #112]	; (800226c <HAL_UART_ErrorCallback+0xb0>)
 80021fa:	f003 f9d5 	bl	80055a8 <HAL_UART_Transmit_IT>
		 HAL_UART_DeInit(ERRUART);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f003 f911 	bl	8005426 <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8002204:	f7ff f87a 	bl	80012fc <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8002208:	2201      	movs	r2, #1
 800220a:	4919      	ldr	r1, [pc, #100]	; (8002270 <HAL_UART_ErrorCallback+0xb4>)
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f003 fa10 	bl	8005632 <HAL_UART_Receive_IT>
	}
	if(ERRUART->Instance==USART2)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a17      	ldr	r2, [pc, #92]	; (8002274 <HAL_UART_ErrorCallback+0xb8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d11c      	bne.n	8002256 <HAL_UART_ErrorCallback+0x9a>
	{
		 volatile int aore=0;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_UART_ErrorCallback+0xa8>)
 8002226:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 800222a:	3301      	adds	r3, #1
 800222c:	4a0d      	ldr	r2, [pc, #52]	; (8002264 <HAL_UART_ErrorCallback+0xa8>)
 800222e:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f003 f8ef 	bl	8005426 <HAL_UART_DeInit>
		 MX_USART2_UART_Init();
 8002248:	f7ff f882 	bl	8001350 <MX_USART2_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 800224c:	2201      	movs	r2, #1
 800224e:	4908      	ldr	r1, [pc, #32]	; (8002270 <HAL_UART_ErrorCallback+0xb4>)
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f003 f9ee 	bl	8005632 <HAL_UART_Receive_IT>
	}
}
 8002256:	bf00      	nop
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40011000 	.word	0x40011000
 8002264:	200023d4 	.word	0x200023d4
 8002268:	08010938 	.word	0x08010938
 800226c:	200002b8 	.word	0x200002b8
 8002270:	20004640 	.word	0x20004640
 8002274:	40004400 	.word	0x40004400

08002278 <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a15      	ldr	r2, [pc, #84]	; (80022dc <HAL_UART_RxCpltCallback+0x64>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d123      	bne.n	80022d2 <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <HAL_UART_RxCpltCallback+0x68>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <HAL_UART_RxCpltCallback+0x6c>)
 8002290:	7811      	ldrb	r1, [r2, #0]
 8002292:	4a15      	ldr	r2, [pc, #84]	; (80022e8 <HAL_UART_RxCpltCallback+0x70>)
 8002294:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 8002296:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_UART_RxCpltCallback+0x68>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	3301      	adds	r3, #1
 800229c:	4a10      	ldr	r2, [pc, #64]	; (80022e0 <HAL_UART_RxCpltCallback+0x68>)
 800229e:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <HAL_UART_RxCpltCallback+0x68>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a8:	db03      	blt.n	80022b2 <HAL_UART_RxCpltCallback+0x3a>
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <HAL_UART_RxCpltCallback+0x68>)
 80022ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b0:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 80022b2:	2100      	movs	r1, #0
 80022b4:	480d      	ldr	r0, [pc, #52]	; (80022ec <HAL_UART_RxCpltCallback+0x74>)
 80022b6:	f002 f8bd 	bl	8004434 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 80022ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022be:	2201      	movs	r2, #1
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_UART_RxCpltCallback+0x78>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 80022c8:	2201      	movs	r2, #1
 80022ca:	4906      	ldr	r1, [pc, #24]	; (80022e4 <HAL_UART_RxCpltCallback+0x6c>)
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f003 f9b0 	bl	8005632 <HAL_UART_Receive_IT>
		 }
 }
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40011000 	.word	0x40011000
 80022e0:	20004670 	.word	0x20004670
 80022e4:	20004640 	.word	0x20004640
 80022e8:	2000423c 	.word	0x2000423c
 80022ec:	2000022c 	.word	0x2000022c
 80022f0:	2000422b 	.word	0x2000422b

080022f4 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	6078      	str	r0, [r7, #4]

		if(TIMER->Instance==TIM2)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002304:	d12d      	bne.n	8002362 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8002306:	2100      	movs	r1, #0
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f002 f991 	bl	8004630 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 8002314:	4b16      	ldr	r3, [pc, #88]	; (8002370 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 800231a:	4b16      	ldr	r3, [pc, #88]	; (8002374 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a16      	ldr	r2, [pc, #88]	; (8002378 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8002320:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8002328:	4b14      	ldr	r3, [pc, #80]	; (800237c <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2301      	movs	r3, #1
 800233a:	4910      	ldr	r1, [pc, #64]	; (800237c <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 800233c:	4811      	ldr	r0, [pc, #68]	; (8002384 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 800233e:	f00c fe1f 	bl	800ef80 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8002342:	2201      	movs	r2, #1
 8002344:	4910      	ldr	r1, [pc, #64]	; (8002388 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002346:	4811      	ldr	r0, [pc, #68]	; (800238c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002348:	f003 f973 	bl	8005632 <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 800234c:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 800234e:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 8002352:	2b01      	cmp	r3, #1
 8002354:	d105      	bne.n	8002362 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4619      	mov	r1, r3
 800235c:	4809      	ldr	r0, [pc, #36]	; (8002384 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 800235e:	f7ff f8c7 	bl	80014f0 <ITM0_Write>
				 }
		}
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	2000422e 	.word	0x2000422e
 8002370:	2000422b 	.word	0x2000422b
 8002374:	20004670 	.word	0x20004670
 8002378:	20004644 	.word	0x20004644
 800237c:	2000423c 	.word	0x2000423c
 8002380:	2000463c 	.word	0x2000463c
 8002384:	2000443c 	.word	0x2000443c
 8002388:	20004640 	.word	0x20004640
 800238c:	20000274 	.word	0x20000274
 8002390:	200023d4 	.word	0x200023d4

08002394 <ESP8266_HW_Init>:

uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af06      	add	r7, sp, #24
 800239a:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 800239c:	2364      	movs	r3, #100	; 0x64
 800239e:	220c      	movs	r2, #12
 80023a0:	4946      	ldr	r1, [pc, #280]	; (80024bc <ESP8266_HW_Init+0x128>)
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f003 f86e 	bl	8005484 <HAL_UART_Transmit>
		  HAL_Delay(500);
 80023a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023ac:	f000 fbb6 	bl	8002b1c <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 80023b0:	4b43      	ldr	r3, [pc, #268]	; (80024c0 <ESP8266_HW_Init+0x12c>)
 80023b2:	2205      	movs	r2, #5
 80023b4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART_RX_items;
 80023b8:	4b42      	ldr	r3, [pc, #264]	; (80024c4 <ESP8266_HW_Init+0x130>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a40      	ldr	r2, [pc, #256]	; (80024c0 <ESP8266_HW_Init+0x12c>)
 80023be:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,510,FIND)!=1)
 80023c2:	e00e      	b.n	80023e2 <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 80023c4:	4b3f      	ldr	r3, [pc, #252]	; (80024c4 <ESP8266_HW_Init+0x130>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a3d      	ldr	r2, [pc, #244]	; (80024c0 <ESP8266_HW_Init+0x12c>)
 80023ca:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  	  if (ESP_ticks>=5000)
 80023ce:	4b3e      	ldr	r3, [pc, #248]	; (80024c8 <ESP8266_HW_Init+0x134>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f241 3287 	movw	r2, #4999	; 0x1387
 80023d6:	4293      	cmp	r3, r2
 80023d8:	dd03      	ble.n	80023e2 <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 80023da:	4b3c      	ldr	r3, [pc, #240]	; (80024cc <ESP8266_HW_Init+0x138>)
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
			  		 break;
 80023e0:	e015      	b.n	800240e <ESP8266_HW_Init+0x7a>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,510,FIND)!=1)
 80023e2:	2300      	movs	r3, #0
 80023e4:	9305      	str	r3, [sp, #20]
 80023e6:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80023ea:	9304      	str	r3, [sp, #16]
 80023ec:	4b38      	ldr	r3, [pc, #224]	; (80024d0 <ESP8266_HW_Init+0x13c>)
 80023ee:	9303      	str	r3, [sp, #12]
 80023f0:	4b38      	ldr	r3, [pc, #224]	; (80024d4 <ESP8266_HW_Init+0x140>)
 80023f2:	9302      	str	r3, [sp, #8]
 80023f4:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <ESP8266_HW_Init+0x144>)
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	4b38      	ldr	r3, [pc, #224]	; (80024dc <ESP8266_HW_Init+0x148>)
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	4b38      	ldr	r3, [pc, #224]	; (80024e0 <ESP8266_HW_Init+0x14c>)
 80023fe:	4a39      	ldr	r2, [pc, #228]	; (80024e4 <ESP8266_HW_Init+0x150>)
 8002400:	4939      	ldr	r1, [pc, #228]	; (80024e8 <ESP8266_HW_Init+0x154>)
 8002402:	483a      	ldr	r0, [pc, #232]	; (80024ec <ESP8266_HW_Init+0x158>)
 8002404:	f00c f9ca 	bl	800e79c <FT_String_ND>
 8002408:	4603      	mov	r3, r0
 800240a:	2b01      	cmp	r3, #1
 800240c:	d1da      	bne.n	80023c4 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 800240e:	4b2f      	ldr	r3, [pc, #188]	; (80024cc <ESP8266_HW_Init+0x138>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d12c      	bne.n	8002470 <ESP8266_HW_Init+0xdc>
		  {
			  wf._n_fcomp=strlen("ready");
 8002416:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <ESP8266_HW_Init+0x12c>)
 8002418:	2205      	movs	r2, #5
 800241a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			  wf._n_orig=UART_RX_items;
 800241e:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <ESP8266_HW_Init+0x130>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a27      	ldr	r2, [pc, #156]	; (80024c0 <ESP8266_HW_Init+0x12c>)
 8002424:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,510,FIND)!=1)
 8002428:	e00a      	b.n	8002440 <ESP8266_HW_Init+0xac>
			  {
				  wf._n_orig=UART_RX_items;
 800242a:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <ESP8266_HW_Init+0x130>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a24      	ldr	r2, [pc, #144]	; (80024c0 <ESP8266_HW_Init+0x12c>)
 8002430:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 8002434:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <ESP8266_HW_Init+0x134>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f241 3287 	movw	r2, #4999	; 0x1387
 800243c:	4293      	cmp	r3, r2
 800243e:	dc16      	bgt.n	800246e <ESP8266_HW_Init+0xda>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,510,FIND)!=1)
 8002440:	2300      	movs	r3, #0
 8002442:	9305      	str	r3, [sp, #20]
 8002444:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8002448:	9304      	str	r3, [sp, #16]
 800244a:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <ESP8266_HW_Init+0x13c>)
 800244c:	9303      	str	r3, [sp, #12]
 800244e:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <ESP8266_HW_Init+0x140>)
 8002450:	9302      	str	r3, [sp, #8]
 8002452:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <ESP8266_HW_Init+0x144>)
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	4b21      	ldr	r3, [pc, #132]	; (80024dc <ESP8266_HW_Init+0x148>)
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <ESP8266_HW_Init+0x14c>)
 800245c:	4a21      	ldr	r2, [pc, #132]	; (80024e4 <ESP8266_HW_Init+0x150>)
 800245e:	4922      	ldr	r1, [pc, #136]	; (80024e8 <ESP8266_HW_Init+0x154>)
 8002460:	4822      	ldr	r0, [pc, #136]	; (80024ec <ESP8266_HW_Init+0x158>)
 8002462:	f00c f99b 	bl	800e79c <FT_String_ND>
 8002466:	4603      	mov	r3, r0
 8002468:	2b01      	cmp	r3, #1
 800246a:	d1de      	bne.n	800242a <ESP8266_HW_Init+0x96>
 800246c:	e000      	b.n	8002470 <ESP8266_HW_Init+0xdc>
					 {
					 break;
 800246e:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 8002470:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <ESP8266_HW_Init+0x134>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f241 3287 	movw	r2, #4999	; 0x1387
 8002478:	4293      	cmp	r3, r2
 800247a:	dc06      	bgt.n	800248a <ESP8266_HW_Init+0xf6>
		  {
			  ESP_REinit=10;
 800247c:	4b1c      	ldr	r3, [pc, #112]	; (80024f0 <ESP8266_HW_Init+0x15c>)
 800247e:	220a      	movs	r2, #10
 8002480:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <ESP8266_HW_Init+0x134>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	e008      	b.n	800249c <ESP8266_HW_Init+0x108>
		  }
		  else
		  {
			  ESP_REinit++;
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <ESP8266_HW_Init+0x15c>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	3301      	adds	r3, #1
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <ESP8266_HW_Init+0x15c>)
 8002494:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <ESP8266_HW_Init+0x134>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 800249c:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <ESP8266_HW_Init+0x15c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b05      	cmp	r3, #5
 80024a2:	f67f af7b 	bls.w	800239c <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <ESP8266_HW_Init+0x15c>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b0a      	cmp	r3, #10
 80024ac:	d101      	bne.n	80024b2 <ESP8266_HW_Init+0x11e>
	  {
		  return(1);
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <ESP8266_HW_Init+0x120>
	  }
	  else
	  {
		  return(0);
 80024b2:	2300      	movs	r3, #0
	  }
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	08010950 	.word	0x08010950
 80024c0:	200023d4 	.word	0x200023d4
 80024c4:	20004644 	.word	0x20004644
 80024c8:	20004648 	.word	0x20004648
 80024cc:	20004229 	.word	0x20004229
 80024d0:	20002e68 	.word	0x20002e68
 80024d4:	20004658 	.word	0x20004658
 80024d8:	200030b4 	.word	0x200030b4
 80024dc:	20002c68 	.word	0x20002c68
 80024e0:	200030c0 	.word	0x200030c0
 80024e4:	08010960 	.word	0x08010960
 80024e8:	200030ac 	.word	0x200030ac
 80024ec:	2000443c 	.word	0x2000443c
 80024f0:	20004228 	.word	0x20004228

080024f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f8:	b672      	cpsid	i
}
 80024fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024fc:	e7fe      	b.n	80024fc <Error_Handler+0x8>
	...

08002500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <HAL_MspInit+0x4c>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	4a0f      	ldr	r2, [pc, #60]	; (800254c <HAL_MspInit+0x4c>)
 8002510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002514:	6453      	str	r3, [r2, #68]	; 0x44
 8002516:	4b0d      	ldr	r3, [pc, #52]	; (800254c <HAL_MspInit+0x4c>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	603b      	str	r3, [r7, #0]
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_MspInit+0x4c>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	4a08      	ldr	r2, [pc, #32]	; (800254c <HAL_MspInit+0x4c>)
 800252c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002530:	6413      	str	r3, [r2, #64]	; 0x40
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_MspInit+0x4c>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800

08002550 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b08a      	sub	sp, #40	; 0x28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a19      	ldr	r2, [pc, #100]	; (80025d4 <HAL_SPI_MspInit+0x84>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d12b      	bne.n	80025ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <HAL_SPI_MspInit+0x88>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	4a17      	ldr	r2, [pc, #92]	; (80025d8 <HAL_SPI_MspInit+0x88>)
 800257c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002580:	6453      	str	r3, [r2, #68]	; 0x44
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <HAL_SPI_MspInit+0x88>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <HAL_SPI_MspInit+0x88>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a10      	ldr	r2, [pc, #64]	; (80025d8 <HAL_SPI_MspInit+0x88>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_SPI_MspInit+0x88>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025aa:	23e0      	movs	r3, #224	; 0xe0
 80025ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b6:	2303      	movs	r3, #3
 80025b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025ba:	2305      	movs	r3, #5
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	4619      	mov	r1, r3
 80025c4:	4805      	ldr	r0, [pc, #20]	; (80025dc <HAL_SPI_MspInit+0x8c>)
 80025c6:	f000 fca3 	bl	8002f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80025ca:	bf00      	nop
 80025cc:	3728      	adds	r7, #40	; 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40013000 	.word	0x40013000
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020000 	.word	0x40020000

080025e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f0:	d115      	bne.n	800261e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <HAL_TIM_Base_MspInit+0x48>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	4a0b      	ldr	r2, [pc, #44]	; (8002628 <HAL_TIM_Base_MspInit+0x48>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6413      	str	r3, [r2, #64]	; 0x40
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_TIM_Base_MspInit+0x48>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800260e:	2200      	movs	r2, #0
 8002610:	2100      	movs	r1, #0
 8002612:	201c      	movs	r0, #28
 8002614:	f000 fba5 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002618:	201c      	movs	r0, #28
 800261a:	f000 fbbe 	bl	8002d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800

0800262c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	; 0x30
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 031c 	add.w	r3, r7, #28
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a3a      	ldr	r2, [pc, #232]	; (8002734 <HAL_UART_MspInit+0x108>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d135      	bne.n	80026ba <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	4b39      	ldr	r3, [pc, #228]	; (8002738 <HAL_UART_MspInit+0x10c>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	4a38      	ldr	r2, [pc, #224]	; (8002738 <HAL_UART_MspInit+0x10c>)
 8002658:	f043 0310 	orr.w	r3, r3, #16
 800265c:	6453      	str	r3, [r2, #68]	; 0x44
 800265e:	4b36      	ldr	r3, [pc, #216]	; (8002738 <HAL_UART_MspInit+0x10c>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_UART_MspInit+0x10c>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a31      	ldr	r2, [pc, #196]	; (8002738 <HAL_UART_MspInit+0x10c>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <HAL_UART_MspInit+0x10c>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = WF_TX_Pin|WF_RX_Pin;
 8002686:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800268a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002694:	2303      	movs	r3, #3
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002698:	2307      	movs	r3, #7
 800269a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269c:	f107 031c 	add.w	r3, r7, #28
 80026a0:	4619      	mov	r1, r3
 80026a2:	4826      	ldr	r0, [pc, #152]	; (800273c <HAL_UART_MspInit+0x110>)
 80026a4:	f000 fc34 	bl	8002f10 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026a8:	2200      	movs	r2, #0
 80026aa:	2100      	movs	r1, #0
 80026ac:	2025      	movs	r0, #37	; 0x25
 80026ae:	f000 fb58 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026b2:	2025      	movs	r0, #37	; 0x25
 80026b4:	f000 fb71 	bl	8002d9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026b8:	e038      	b.n	800272c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a20      	ldr	r2, [pc, #128]	; (8002740 <HAL_UART_MspInit+0x114>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d133      	bne.n	800272c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_UART_MspInit+0x10c>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	4a1a      	ldr	r2, [pc, #104]	; (8002738 <HAL_UART_MspInit+0x10c>)
 80026ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d2:	6413      	str	r3, [r2, #64]	; 0x40
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <HAL_UART_MspInit+0x10c>)
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_UART_MspInit+0x10c>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	4a13      	ldr	r2, [pc, #76]	; (8002738 <HAL_UART_MspInit+0x10c>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6313      	str	r3, [r2, #48]	; 0x30
 80026f0:	4b11      	ldr	r3, [pc, #68]	; (8002738 <HAL_UART_MspInit+0x10c>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PORT2TX_Pin|PORT2_RX_Pin;
 80026fc:	230c      	movs	r3, #12
 80026fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002708:	2303      	movs	r3, #3
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800270c:	2307      	movs	r3, #7
 800270e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002710:	f107 031c 	add.w	r3, r7, #28
 8002714:	4619      	mov	r1, r3
 8002716:	4809      	ldr	r0, [pc, #36]	; (800273c <HAL_UART_MspInit+0x110>)
 8002718:	f000 fbfa 	bl	8002f10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800271c:	2200      	movs	r2, #0
 800271e:	2100      	movs	r1, #0
 8002720:	2026      	movs	r0, #38	; 0x26
 8002722:	f000 fb1e 	bl	8002d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002726:	2026      	movs	r0, #38	; 0x26
 8002728:	f000 fb37 	bl	8002d9a <HAL_NVIC_EnableIRQ>
}
 800272c:	bf00      	nop
 800272e:	3730      	adds	r7, #48	; 0x30
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40011000 	.word	0x40011000
 8002738:	40023800 	.word	0x40023800
 800273c:	40020000 	.word	0x40020000
 8002740:	40004400 	.word	0x40004400

08002744 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a13      	ldr	r2, [pc, #76]	; (80027a0 <HAL_UART_MspDeInit+0x5c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10e      	bne.n	8002774 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002756:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <HAL_UART_MspDeInit+0x60>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <HAL_UART_MspDeInit+0x60>)
 800275c:	f023 0310 	bic.w	r3, r3, #16
 8002760:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, WF_TX_Pin|WF_RX_Pin);
 8002762:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002766:	4810      	ldr	r0, [pc, #64]	; (80027a8 <HAL_UART_MspDeInit+0x64>)
 8002768:	f000 fd56 	bl	8003218 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800276c:	2025      	movs	r0, #37	; 0x25
 800276e:	f000 fb22 	bl	8002db6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002772:	e011      	b.n	8002798 <HAL_UART_MspDeInit+0x54>
  else if(huart->Instance==USART2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0c      	ldr	r2, [pc, #48]	; (80027ac <HAL_UART_MspDeInit+0x68>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d10c      	bne.n	8002798 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_UART_MspDeInit+0x60>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <HAL_UART_MspDeInit+0x60>)
 8002784:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, PORT2TX_Pin|PORT2_RX_Pin);
 800278a:	210c      	movs	r1, #12
 800278c:	4806      	ldr	r0, [pc, #24]	; (80027a8 <HAL_UART_MspDeInit+0x64>)
 800278e:	f000 fd43 	bl	8003218 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002792:	2026      	movs	r0, #38	; 0x26
 8002794:	f000 fb0f 	bl	8002db6 <HAL_NVIC_DisableIRQ>
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40011000 	.word	0x40011000
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40004400 	.word	0x40004400

080027b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b4:	e7fe      	b.n	80027b4 <NMI_Handler+0x4>

080027b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ba:	e7fe      	b.n	80027ba <HardFault_Handler+0x4>

080027bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <MemManage_Handler+0x4>

080027c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <BusFault_Handler+0x4>

080027c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <UsageFault_Handler+0x4>

080027ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027fc:	4802      	ldr	r0, [pc, #8]	; (8002808 <TIM2_IRQHandler+0x10>)
 80027fe:	f002 f823 	bl	8004848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2000022c 	.word	0x2000022c

0800280c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <USART1_IRQHandler+0x10>)
 8002812:	f002 ff3f 	bl	8005694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000274 	.word	0x20000274

08002820 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002824:	4802      	ldr	r0, [pc, #8]	; (8002830 <USART2_IRQHandler+0x10>)
 8002826:	f002 ff35 	bl	8005694 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	200002b8 	.word	0x200002b8

08002834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
	return 1;
 8002838:	2301      	movs	r3, #1
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <_kill>:

int _kill(int pid, int sig)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800284e:	f00c fe43 	bl	800f4d8 <__errno>
 8002852:	4603      	mov	r3, r0
 8002854:	2216      	movs	r2, #22
 8002856:	601a      	str	r2, [r3, #0]
	return -1;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <_exit>:

void _exit (int status)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800286c:	f04f 31ff 	mov.w	r1, #4294967295
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ffe7 	bl	8002844 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002876:	e7fe      	b.n	8002876 <_exit+0x12>

08002878 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	e00a      	b.n	80028a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800288a:	f3af 8000 	nop.w
 800288e:	4601      	mov	r1, r0
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	60ba      	str	r2, [r7, #8]
 8002896:	b2ca      	uxtb	r2, r1
 8002898:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3301      	adds	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	dbf0      	blt.n	800288a <_read+0x12>
	}

return len;
 80028a8:	687b      	ldr	r3, [r7, #4]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	e009      	b.n	80028d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	60ba      	str	r2, [r7, #8]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	3301      	adds	r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	429a      	cmp	r2, r3
 80028de:	dbf1      	blt.n	80028c4 <_write+0x12>
	}
	return len;
 80028e0:	687b      	ldr	r3, [r7, #4]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <_close>:

int _close(int file)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
	return -1;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002912:	605a      	str	r2, [r3, #4]
	return 0;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <_isatty>:

int _isatty(int file)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
	return 1;
 800292a:	2301      	movs	r3, #1
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
	return 0;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800295c:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <_sbrk+0x5c>)
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <_sbrk+0x60>)
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <_sbrk+0x64>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <_sbrk+0x64>)
 8002972:	4a12      	ldr	r2, [pc, #72]	; (80029bc <_sbrk+0x68>)
 8002974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <_sbrk+0x64>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	429a      	cmp	r2, r3
 8002982:	d207      	bcs.n	8002994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002984:	f00c fda8 	bl	800f4d8 <__errno>
 8002988:	4603      	mov	r3, r0
 800298a:	220c      	movs	r2, #12
 800298c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800298e:	f04f 33ff 	mov.w	r3, #4294967295
 8002992:	e009      	b.n	80029a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002994:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <_sbrk+0x64>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <_sbrk+0x64>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <_sbrk+0x64>)
 80029a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029a6:	68fb      	ldr	r3, [r7, #12]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20020000 	.word	0x20020000
 80029b4:	00000400 	.word	0x00000400
 80029b8:	20004678 	.word	0x20004678
 80029bc:	200047d0 	.word	0x200047d0

080029c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <SystemInit+0x20>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	4a05      	ldr	r2, [pc, #20]	; (80029e0 <SystemInit+0x20>)
 80029cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029e8:	480d      	ldr	r0, [pc, #52]	; (8002a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029ea:	490e      	ldr	r1, [pc, #56]	; (8002a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029ec:	4a0e      	ldr	r2, [pc, #56]	; (8002a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029f0:	e002      	b.n	80029f8 <LoopCopyDataInit>

080029f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029f6:	3304      	adds	r3, #4

080029f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029fc:	d3f9      	bcc.n	80029f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029fe:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a00:	4c0b      	ldr	r4, [pc, #44]	; (8002a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a04:	e001      	b.n	8002a0a <LoopFillZerobss>

08002a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a08:	3204      	adds	r2, #4

08002a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a0c:	d3fb      	bcc.n	8002a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a0e:	f7ff ffd7 	bl	80029c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a12:	f00c fd67 	bl	800f4e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a16:	f7fd fe3d 	bl	8000694 <main>
  bx  lr    
 8002a1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a24:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8002a28:	08010e8c 	.word	0x08010e8c
  ldr r2, =_sbss
 8002a2c:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8002a30:	200047cc 	.word	0x200047cc

08002a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a34:	e7fe      	b.n	8002a34 <ADC_IRQHandler>
	...

08002a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <HAL_Init+0x40>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <HAL_Init+0x40>)
 8002a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_Init+0x40>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <HAL_Init+0x40>)
 8002a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <HAL_Init+0x40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a07      	ldr	r2, [pc, #28]	; (8002a78 <HAL_Init+0x40>)
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a60:	2003      	movs	r0, #3
 8002a62:	f000 f973 	bl	8002d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a66:	200f      	movs	r0, #15
 8002a68:	f000 f808 	bl	8002a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a6c:	f7ff fd48 	bl	8002500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023c00 	.word	0x40023c00

08002a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_InitTick+0x54>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_InitTick+0x58>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f999 	bl	8002dd2 <HAL_SYSTICK_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e00e      	b.n	8002ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b0f      	cmp	r3, #15
 8002aae:	d80a      	bhi.n	8002ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab8:	f000 f953 	bl	8002d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002abc:	4a06      	ldr	r2, [pc, #24]	; (8002ad8 <HAL_InitTick+0x5c>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	200000a4 	.word	0x200000a4
 8002ad4:	200000ac 	.word	0x200000ac
 8002ad8:	200000a8 	.word	0x200000a8

08002adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_IncTick+0x20>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_IncTick+0x24>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_IncTick+0x24>)
 8002aee:	6013      	str	r3, [r2, #0]
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	200000ac 	.word	0x200000ac
 8002b00:	2000467c 	.word	0x2000467c

08002b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return uwTick;
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <HAL_GetTick+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	2000467c 	.word	0x2000467c

08002b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7ff ffee 	bl	8002b04 <HAL_GetTick>
 8002b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d005      	beq.n	8002b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_Delay+0x44>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b42:	bf00      	nop
 8002b44:	f7ff ffde 	bl	8002b04 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d8f7      	bhi.n	8002b44 <HAL_Delay+0x28>
  {
  }
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200000ac 	.word	0x200000ac

08002b64 <__NVIC_SetPriorityGrouping>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b80:	4013      	ands	r3, r2
 8002b82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b96:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	60d3      	str	r3, [r2, #12]
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <__NVIC_GetPriorityGrouping>:
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	0a1b      	lsrs	r3, r3, #8
 8002bb6:	f003 0307 	and.w	r3, r3, #7
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_EnableIRQ>:
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	db0b      	blt.n	8002bf2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	f003 021f 	and.w	r2, r3, #31
 8002be0:	4907      	ldr	r1, [pc, #28]	; (8002c00 <__NVIC_EnableIRQ+0x38>)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	2001      	movs	r0, #1
 8002bea:	fa00 f202 	lsl.w	r2, r0, r2
 8002bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000e100 	.word	0xe000e100

08002c04 <__NVIC_DisableIRQ>:
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	db12      	blt.n	8002c3c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	f003 021f 	and.w	r2, r3, #31
 8002c1c:	490a      	ldr	r1, [pc, #40]	; (8002c48 <__NVIC_DisableIRQ+0x44>)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	2001      	movs	r0, #1
 8002c26:	fa00 f202 	lsl.w	r2, r0, r2
 8002c2a:	3320      	adds	r3, #32
 8002c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c30:	f3bf 8f4f 	dsb	sy
}
 8002c34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c36:	f3bf 8f6f 	isb	sy
}
 8002c3a:	bf00      	nop
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000e100 	.word	0xe000e100

08002c4c <__NVIC_SetPriority>:
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	6039      	str	r1, [r7, #0]
 8002c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	db0a      	blt.n	8002c76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	490c      	ldr	r1, [pc, #48]	; (8002c98 <__NVIC_SetPriority+0x4c>)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	0112      	lsls	r2, r2, #4
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	440b      	add	r3, r1
 8002c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c74:	e00a      	b.n	8002c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	4908      	ldr	r1, [pc, #32]	; (8002c9c <__NVIC_SetPriority+0x50>)
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	3b04      	subs	r3, #4
 8002c84:	0112      	lsls	r2, r2, #4
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	440b      	add	r3, r1
 8002c8a:	761a      	strb	r2, [r3, #24]
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000e100 	.word	0xe000e100
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <NVIC_EncodePriority>:
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b089      	sub	sp, #36	; 0x24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f1c3 0307 	rsb	r3, r3, #7
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	bf28      	it	cs
 8002cbe:	2304      	movcs	r3, #4
 8002cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	2b06      	cmp	r3, #6
 8002cc8:	d902      	bls.n	8002cd0 <NVIC_EncodePriority+0x30>
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3b03      	subs	r3, #3
 8002cce:	e000      	b.n	8002cd2 <NVIC_EncodePriority+0x32>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43da      	mvns	r2, r3
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf2:	43d9      	mvns	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf8:	4313      	orrs	r3, r2
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3724      	adds	r7, #36	; 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
	...

08002d08 <SysTick_Config>:
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d18:	d301      	bcc.n	8002d1e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e00f      	b.n	8002d3e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <SysTick_Config+0x40>)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d26:	210f      	movs	r1, #15
 8002d28:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2c:	f7ff ff8e 	bl	8002c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <SysTick_Config+0x40>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d36:	4b04      	ldr	r3, [pc, #16]	; (8002d48 <SysTick_Config+0x40>)
 8002d38:	2207      	movs	r2, #7
 8002d3a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	e000e010 	.word	0xe000e010

08002d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff ff05 	bl	8002b64 <__NVIC_SetPriorityGrouping>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4603      	mov	r3, r0
 8002d6a:	60b9      	str	r1, [r7, #8]
 8002d6c:	607a      	str	r2, [r7, #4]
 8002d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d74:	f7ff ff1a 	bl	8002bac <__NVIC_GetPriorityGrouping>
 8002d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	6978      	ldr	r0, [r7, #20]
 8002d80:	f7ff ff8e 	bl	8002ca0 <NVIC_EncodePriority>
 8002d84:	4602      	mov	r2, r0
 8002d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff5d 	bl	8002c4c <__NVIC_SetPriority>
}
 8002d92:	bf00      	nop
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	4603      	mov	r3, r0
 8002da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff0d 	bl	8002bc8 <__NVIC_EnableIRQ>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff1d 	bl	8002c04 <__NVIC_DisableIRQ>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff ff94 	bl	8002d08 <SysTick_Config>
 8002de0:	4603      	mov	r3, r0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002df8:	f7ff fe84 	bl	8002b04 <HAL_GetTick>
 8002dfc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d008      	beq.n	8002e1c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2280      	movs	r2, #128	; 0x80
 8002e0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e052      	b.n	8002ec2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0216 	bic.w	r2, r2, #22
 8002e2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e3a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d103      	bne.n	8002e4c <HAL_DMA_Abort+0x62>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d007      	beq.n	8002e5c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0208 	bic.w	r2, r2, #8
 8002e5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e6c:	e013      	b.n	8002e96 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e6e:	f7ff fe49 	bl	8002b04 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b05      	cmp	r3, #5
 8002e7a:	d90c      	bls.n	8002e96 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2203      	movs	r2, #3
 8002e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e015      	b.n	8002ec2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e4      	bne.n	8002e6e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea8:	223f      	movs	r2, #63	; 0x3f
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d004      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2280      	movs	r2, #128	; 0x80
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e00c      	b.n	8002f02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2205      	movs	r2, #5
 8002eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	; 0x24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	e159      	b.n	80031e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	f040 8148 	bne.w	80031da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d005      	beq.n	8002f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d130      	bne.n	8002fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f98:	2201      	movs	r2, #1
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f003 0201 	and.w	r2, r3, #1
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d017      	beq.n	8003000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	2203      	movs	r2, #3
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d123      	bne.n	8003054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	08da      	lsrs	r2, r3, #3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3208      	adds	r2, #8
 8003014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	220f      	movs	r2, #15
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	08da      	lsrs	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3208      	adds	r2, #8
 800304e:	69b9      	ldr	r1, [r7, #24]
 8003050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	2203      	movs	r2, #3
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0203 	and.w	r2, r3, #3
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80a2 	beq.w	80031da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	4b57      	ldr	r3, [pc, #348]	; (80031f8 <HAL_GPIO_Init+0x2e8>)
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	4a56      	ldr	r2, [pc, #344]	; (80031f8 <HAL_GPIO_Init+0x2e8>)
 80030a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030a4:	6453      	str	r3, [r2, #68]	; 0x44
 80030a6:	4b54      	ldr	r3, [pc, #336]	; (80031f8 <HAL_GPIO_Init+0x2e8>)
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030b2:	4a52      	ldr	r2, [pc, #328]	; (80031fc <HAL_GPIO_Init+0x2ec>)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	089b      	lsrs	r3, r3, #2
 80030b8:	3302      	adds	r3, #2
 80030ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	220f      	movs	r2, #15
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a49      	ldr	r2, [pc, #292]	; (8003200 <HAL_GPIO_Init+0x2f0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d019      	beq.n	8003112 <HAL_GPIO_Init+0x202>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a48      	ldr	r2, [pc, #288]	; (8003204 <HAL_GPIO_Init+0x2f4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d013      	beq.n	800310e <HAL_GPIO_Init+0x1fe>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a47      	ldr	r2, [pc, #284]	; (8003208 <HAL_GPIO_Init+0x2f8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00d      	beq.n	800310a <HAL_GPIO_Init+0x1fa>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a46      	ldr	r2, [pc, #280]	; (800320c <HAL_GPIO_Init+0x2fc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d007      	beq.n	8003106 <HAL_GPIO_Init+0x1f6>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a45      	ldr	r2, [pc, #276]	; (8003210 <HAL_GPIO_Init+0x300>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d101      	bne.n	8003102 <HAL_GPIO_Init+0x1f2>
 80030fe:	2304      	movs	r3, #4
 8003100:	e008      	b.n	8003114 <HAL_GPIO_Init+0x204>
 8003102:	2307      	movs	r3, #7
 8003104:	e006      	b.n	8003114 <HAL_GPIO_Init+0x204>
 8003106:	2303      	movs	r3, #3
 8003108:	e004      	b.n	8003114 <HAL_GPIO_Init+0x204>
 800310a:	2302      	movs	r3, #2
 800310c:	e002      	b.n	8003114 <HAL_GPIO_Init+0x204>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_GPIO_Init+0x204>
 8003112:	2300      	movs	r3, #0
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	f002 0203 	and.w	r2, r2, #3
 800311a:	0092      	lsls	r2, r2, #2
 800311c:	4093      	lsls	r3, r2
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4313      	orrs	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003124:	4935      	ldr	r1, [pc, #212]	; (80031fc <HAL_GPIO_Init+0x2ec>)
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	089b      	lsrs	r3, r3, #2
 800312a:	3302      	adds	r3, #2
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003132:	4b38      	ldr	r3, [pc, #224]	; (8003214 <HAL_GPIO_Init+0x304>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	43db      	mvns	r3, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003156:	4a2f      	ldr	r2, [pc, #188]	; (8003214 <HAL_GPIO_Init+0x304>)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800315c:	4b2d      	ldr	r3, [pc, #180]	; (8003214 <HAL_GPIO_Init+0x304>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003180:	4a24      	ldr	r2, [pc, #144]	; (8003214 <HAL_GPIO_Init+0x304>)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003186:	4b23      	ldr	r3, [pc, #140]	; (8003214 <HAL_GPIO_Init+0x304>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031aa:	4a1a      	ldr	r2, [pc, #104]	; (8003214 <HAL_GPIO_Init+0x304>)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b0:	4b18      	ldr	r3, [pc, #96]	; (8003214 <HAL_GPIO_Init+0x304>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031d4:	4a0f      	ldr	r2, [pc, #60]	; (8003214 <HAL_GPIO_Init+0x304>)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3301      	adds	r3, #1
 80031de:	61fb      	str	r3, [r7, #28]
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	2b0f      	cmp	r3, #15
 80031e4:	f67f aea2 	bls.w	8002f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	3724      	adds	r7, #36	; 0x24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40023800 	.word	0x40023800
 80031fc:	40013800 	.word	0x40013800
 8003200:	40020000 	.word	0x40020000
 8003204:	40020400 	.word	0x40020400
 8003208:	40020800 	.word	0x40020800
 800320c:	40020c00 	.word	0x40020c00
 8003210:	40021000 	.word	0x40021000
 8003214:	40013c00 	.word	0x40013c00

08003218 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003218:	b480      	push	{r7}
 800321a:	b087      	sub	sp, #28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003222:	2300      	movs	r3, #0
 8003224:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	e0bb      	b.n	80033ac <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003234:	2201      	movs	r2, #1
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	429a      	cmp	r2, r3
 800324c:	f040 80ab 	bne.w	80033a6 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003250:	4a5c      	ldr	r2, [pc, #368]	; (80033c4 <HAL_GPIO_DeInit+0x1ac>)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	089b      	lsrs	r3, r3, #2
 8003256:	3302      	adds	r3, #2
 8003258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	220f      	movs	r2, #15
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	4013      	ands	r3, r2
 8003270:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a54      	ldr	r2, [pc, #336]	; (80033c8 <HAL_GPIO_DeInit+0x1b0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d019      	beq.n	80032ae <HAL_GPIO_DeInit+0x96>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a53      	ldr	r2, [pc, #332]	; (80033cc <HAL_GPIO_DeInit+0x1b4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <HAL_GPIO_DeInit+0x92>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a52      	ldr	r2, [pc, #328]	; (80033d0 <HAL_GPIO_DeInit+0x1b8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00d      	beq.n	80032a6 <HAL_GPIO_DeInit+0x8e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a51      	ldr	r2, [pc, #324]	; (80033d4 <HAL_GPIO_DeInit+0x1bc>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d007      	beq.n	80032a2 <HAL_GPIO_DeInit+0x8a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a50      	ldr	r2, [pc, #320]	; (80033d8 <HAL_GPIO_DeInit+0x1c0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d101      	bne.n	800329e <HAL_GPIO_DeInit+0x86>
 800329a:	2304      	movs	r3, #4
 800329c:	e008      	b.n	80032b0 <HAL_GPIO_DeInit+0x98>
 800329e:	2307      	movs	r3, #7
 80032a0:	e006      	b.n	80032b0 <HAL_GPIO_DeInit+0x98>
 80032a2:	2303      	movs	r3, #3
 80032a4:	e004      	b.n	80032b0 <HAL_GPIO_DeInit+0x98>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e002      	b.n	80032b0 <HAL_GPIO_DeInit+0x98>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <HAL_GPIO_DeInit+0x98>
 80032ae:	2300      	movs	r3, #0
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	f002 0203 	and.w	r2, r2, #3
 80032b6:	0092      	lsls	r2, r2, #2
 80032b8:	4093      	lsls	r3, r2
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d132      	bne.n	8003326 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80032c0:	4b46      	ldr	r3, [pc, #280]	; (80033dc <HAL_GPIO_DeInit+0x1c4>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	4944      	ldr	r1, [pc, #272]	; (80033dc <HAL_GPIO_DeInit+0x1c4>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80032ce:	4b43      	ldr	r3, [pc, #268]	; (80033dc <HAL_GPIO_DeInit+0x1c4>)
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	43db      	mvns	r3, r3
 80032d6:	4941      	ldr	r1, [pc, #260]	; (80033dc <HAL_GPIO_DeInit+0x1c4>)
 80032d8:	4013      	ands	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80032dc:	4b3f      	ldr	r3, [pc, #252]	; (80033dc <HAL_GPIO_DeInit+0x1c4>)
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	493d      	ldr	r1, [pc, #244]	; (80033dc <HAL_GPIO_DeInit+0x1c4>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80032ea:	4b3c      	ldr	r3, [pc, #240]	; (80033dc <HAL_GPIO_DeInit+0x1c4>)
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	493a      	ldr	r1, [pc, #232]	; (80033dc <HAL_GPIO_DeInit+0x1c4>)
 80032f4:	4013      	ands	r3, r2
 80032f6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	220f      	movs	r2, #15
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003308:	4a2e      	ldr	r2, [pc, #184]	; (80033c4 <HAL_GPIO_DeInit+0x1ac>)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	089b      	lsrs	r3, r3, #2
 800330e:	3302      	adds	r3, #2
 8003310:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	43da      	mvns	r2, r3
 8003318:	482a      	ldr	r0, [pc, #168]	; (80033c4 <HAL_GPIO_DeInit+0x1ac>)
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	089b      	lsrs	r3, r3, #2
 800331e:	400a      	ands	r2, r1
 8003320:	3302      	adds	r3, #2
 8003322:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2103      	movs	r1, #3
 8003330:	fa01 f303 	lsl.w	r3, r1, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	401a      	ands	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	08da      	lsrs	r2, r3, #3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3208      	adds	r2, #8
 8003344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	220f      	movs	r2, #15
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	08d2      	lsrs	r2, r2, #3
 800335c:	4019      	ands	r1, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3208      	adds	r2, #8
 8003362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	2103      	movs	r1, #3
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	401a      	ands	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	2101      	movs	r1, #1
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	fa01 f303 	lsl.w	r3, r1, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	401a      	ands	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	2103      	movs	r1, #3
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	401a      	ands	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3301      	adds	r3, #1
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b0f      	cmp	r3, #15
 80033b0:	f67f af40 	bls.w	8003234 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40013800 	.word	0x40013800
 80033c8:	40020000 	.word	0x40020000
 80033cc:	40020400 	.word	0x40020400
 80033d0:	40020800 	.word	0x40020800
 80033d4:	40020c00 	.word	0x40020c00
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40013c00 	.word	0x40013c00

080033e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	807b      	strh	r3, [r7, #2]
 80033ec:	4613      	mov	r3, r2
 80033ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033f0:	787b      	ldrb	r3, [r7, #1]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033f6:	887a      	ldrh	r2, [r7, #2]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033fc:	e003      	b.n	8003406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033fe:	887b      	ldrh	r3, [r7, #2]
 8003400:	041a      	lsls	r2, r3, #16
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	619a      	str	r2, [r3, #24]
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003412:	b480      	push	{r7}
 8003414:	b085      	sub	sp, #20
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	460b      	mov	r3, r1
 800341c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003424:	887a      	ldrh	r2, [r7, #2]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4013      	ands	r3, r2
 800342a:	041a      	lsls	r2, r3, #16
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	43d9      	mvns	r1, r3
 8003430:	887b      	ldrh	r3, [r7, #2]
 8003432:	400b      	ands	r3, r1
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	619a      	str	r2, [r3, #24]
}
 800343a:	bf00      	nop
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
	...

08003448 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e267      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d075      	beq.n	8003552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003466:	4b88      	ldr	r3, [pc, #544]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	2b04      	cmp	r3, #4
 8003470:	d00c      	beq.n	800348c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003472:	4b85      	ldr	r3, [pc, #532]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800347a:	2b08      	cmp	r3, #8
 800347c:	d112      	bne.n	80034a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800347e:	4b82      	ldr	r3, [pc, #520]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800348a:	d10b      	bne.n	80034a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800348c:	4b7e      	ldr	r3, [pc, #504]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d05b      	beq.n	8003550 <HAL_RCC_OscConfig+0x108>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d157      	bne.n	8003550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e242      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ac:	d106      	bne.n	80034bc <HAL_RCC_OscConfig+0x74>
 80034ae:	4b76      	ldr	r3, [pc, #472]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a75      	ldr	r2, [pc, #468]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	e01d      	b.n	80034f8 <HAL_RCC_OscConfig+0xb0>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x98>
 80034c6:	4b70      	ldr	r3, [pc, #448]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a6f      	ldr	r2, [pc, #444]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	4b6d      	ldr	r3, [pc, #436]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a6c      	ldr	r2, [pc, #432]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e00b      	b.n	80034f8 <HAL_RCC_OscConfig+0xb0>
 80034e0:	4b69      	ldr	r3, [pc, #420]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a68      	ldr	r2, [pc, #416]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	4b66      	ldr	r3, [pc, #408]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a65      	ldr	r2, [pc, #404]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80034f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d013      	beq.n	8003528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003500:	f7ff fb00 	bl	8002b04 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003508:	f7ff fafc 	bl	8002b04 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b64      	cmp	r3, #100	; 0x64
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e207      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	4b5b      	ldr	r3, [pc, #364]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0xc0>
 8003526:	e014      	b.n	8003552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7ff faec 	bl	8002b04 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003530:	f7ff fae8 	bl	8002b04 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e1f3      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003542:	4b51      	ldr	r3, [pc, #324]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0xe8>
 800354e:	e000      	b.n	8003552 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d063      	beq.n	8003626 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800355e:	4b4a      	ldr	r3, [pc, #296]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00b      	beq.n	8003582 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800356a:	4b47      	ldr	r3, [pc, #284]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003572:	2b08      	cmp	r3, #8
 8003574:	d11c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003576:	4b44      	ldr	r3, [pc, #272]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d116      	bne.n	80035b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003582:	4b41      	ldr	r3, [pc, #260]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_RCC_OscConfig+0x152>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d001      	beq.n	800359a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e1c7      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359a:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4937      	ldr	r1, [pc, #220]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ae:	e03a      	b.n	8003626 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d020      	beq.n	80035fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b8:	4b34      	ldr	r3, [pc, #208]	; (800368c <HAL_RCC_OscConfig+0x244>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035be:	f7ff faa1 	bl	8002b04 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c6:	f7ff fa9d 	bl	8002b04 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e1a8      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d8:	4b2b      	ldr	r3, [pc, #172]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e4:	4b28      	ldr	r3, [pc, #160]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4925      	ldr	r1, [pc, #148]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	600b      	str	r3, [r1, #0]
 80035f8:	e015      	b.n	8003626 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035fa:	4b24      	ldr	r3, [pc, #144]	; (800368c <HAL_RCC_OscConfig+0x244>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7ff fa80 	bl	8002b04 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003608:	f7ff fa7c 	bl	8002b04 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e187      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361a:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d036      	beq.n	80036a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d016      	beq.n	8003668 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800363a:	4b15      	ldr	r3, [pc, #84]	; (8003690 <HAL_RCC_OscConfig+0x248>)
 800363c:	2201      	movs	r2, #1
 800363e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003640:	f7ff fa60 	bl	8002b04 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003648:	f7ff fa5c 	bl	8002b04 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e167      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365a:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_OscConfig+0x240>)
 800365c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f0      	beq.n	8003648 <HAL_RCC_OscConfig+0x200>
 8003666:	e01b      	b.n	80036a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <HAL_RCC_OscConfig+0x248>)
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366e:	f7ff fa49 	bl	8002b04 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003674:	e00e      	b.n	8003694 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003676:	f7ff fa45 	bl	8002b04 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d907      	bls.n	8003694 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e150      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
 8003688:	40023800 	.word	0x40023800
 800368c:	42470000 	.word	0x42470000
 8003690:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003694:	4b88      	ldr	r3, [pc, #544]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1ea      	bne.n	8003676 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8097 	beq.w	80037dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ae:	2300      	movs	r3, #0
 80036b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036b2:	4b81      	ldr	r3, [pc, #516]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10f      	bne.n	80036de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	4b7d      	ldr	r3, [pc, #500]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	4a7c      	ldr	r2, [pc, #496]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80036c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036cc:	6413      	str	r3, [r2, #64]	; 0x40
 80036ce:	4b7a      	ldr	r3, [pc, #488]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036da:	2301      	movs	r3, #1
 80036dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036de:	4b77      	ldr	r3, [pc, #476]	; (80038bc <HAL_RCC_OscConfig+0x474>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d118      	bne.n	800371c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ea:	4b74      	ldr	r3, [pc, #464]	; (80038bc <HAL_RCC_OscConfig+0x474>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a73      	ldr	r2, [pc, #460]	; (80038bc <HAL_RCC_OscConfig+0x474>)
 80036f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036f6:	f7ff fa05 	bl	8002b04 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fe:	f7ff fa01 	bl	8002b04 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e10c      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003710:	4b6a      	ldr	r3, [pc, #424]	; (80038bc <HAL_RCC_OscConfig+0x474>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d106      	bne.n	8003732 <HAL_RCC_OscConfig+0x2ea>
 8003724:	4b64      	ldr	r3, [pc, #400]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	4a63      	ldr	r2, [pc, #396]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	6713      	str	r3, [r2, #112]	; 0x70
 8003730:	e01c      	b.n	800376c <HAL_RCC_OscConfig+0x324>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	2b05      	cmp	r3, #5
 8003738:	d10c      	bne.n	8003754 <HAL_RCC_OscConfig+0x30c>
 800373a:	4b5f      	ldr	r3, [pc, #380]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	4a5e      	ldr	r2, [pc, #376]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003740:	f043 0304 	orr.w	r3, r3, #4
 8003744:	6713      	str	r3, [r2, #112]	; 0x70
 8003746:	4b5c      	ldr	r3, [pc, #368]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a5b      	ldr	r2, [pc, #364]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	6713      	str	r3, [r2, #112]	; 0x70
 8003752:	e00b      	b.n	800376c <HAL_RCC_OscConfig+0x324>
 8003754:	4b58      	ldr	r3, [pc, #352]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003758:	4a57      	ldr	r2, [pc, #348]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 800375a:	f023 0301 	bic.w	r3, r3, #1
 800375e:	6713      	str	r3, [r2, #112]	; 0x70
 8003760:	4b55      	ldr	r3, [pc, #340]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003764:	4a54      	ldr	r2, [pc, #336]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003766:	f023 0304 	bic.w	r3, r3, #4
 800376a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d015      	beq.n	80037a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003774:	f7ff f9c6 	bl	8002b04 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377a:	e00a      	b.n	8003792 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800377c:	f7ff f9c2 	bl	8002b04 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e0cb      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003792:	4b49      	ldr	r3, [pc, #292]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0ee      	beq.n	800377c <HAL_RCC_OscConfig+0x334>
 800379e:	e014      	b.n	80037ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a0:	f7ff f9b0 	bl	8002b04 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a6:	e00a      	b.n	80037be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a8:	f7ff f9ac 	bl	8002b04 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e0b5      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037be:	4b3e      	ldr	r3, [pc, #248]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1ee      	bne.n	80037a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d105      	bne.n	80037dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d0:	4b39      	ldr	r3, [pc, #228]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	4a38      	ldr	r2, [pc, #224]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80037d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80a1 	beq.w	8003928 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037e6:	4b34      	ldr	r3, [pc, #208]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d05c      	beq.n	80038ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d141      	bne.n	800387e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fa:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <HAL_RCC_OscConfig+0x478>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003800:	f7ff f980 	bl	8002b04 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003808:	f7ff f97c 	bl	8002b04 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e087      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800381a:	4b27      	ldr	r3, [pc, #156]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69da      	ldr	r2, [r3, #28]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	019b      	lsls	r3, r3, #6
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	085b      	lsrs	r3, r3, #1
 800383e:	3b01      	subs	r3, #1
 8003840:	041b      	lsls	r3, r3, #16
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	061b      	lsls	r3, r3, #24
 800384a:	491b      	ldr	r1, [pc, #108]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 800384c:	4313      	orrs	r3, r2
 800384e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003850:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <HAL_RCC_OscConfig+0x478>)
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003856:	f7ff f955 	bl	8002b04 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800385e:	f7ff f951 	bl	8002b04 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e05c      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003870:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x416>
 800387c:	e054      	b.n	8003928 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387e:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <HAL_RCC_OscConfig+0x478>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003884:	f7ff f93e 	bl	8002b04 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800388c:	f7ff f93a 	bl	8002b04 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e045      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <HAL_RCC_OscConfig+0x470>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x444>
 80038aa:	e03d      	b.n	8003928 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d107      	bne.n	80038c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e038      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40007000 	.word	0x40007000
 80038c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038c4:	4b1b      	ldr	r3, [pc, #108]	; (8003934 <HAL_RCC_OscConfig+0x4ec>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d028      	beq.n	8003924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038dc:	429a      	cmp	r2, r3
 80038de:	d121      	bne.n	8003924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d11a      	bne.n	8003924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038f4:	4013      	ands	r3, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d111      	bne.n	8003924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	085b      	lsrs	r3, r3, #1
 800390c:	3b01      	subs	r3, #1
 800390e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d107      	bne.n	8003924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800

08003938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0cc      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800394c:	4b68      	ldr	r3, [pc, #416]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d90c      	bls.n	8003974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395a:	4b65      	ldr	r3, [pc, #404]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003962:	4b63      	ldr	r3, [pc, #396]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d001      	beq.n	8003974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0b8      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d020      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800398c:	4b59      	ldr	r3, [pc, #356]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4a58      	ldr	r2, [pc, #352]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003996:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039a4:	4b53      	ldr	r3, [pc, #332]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	4a52      	ldr	r2, [pc, #328]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b0:	4b50      	ldr	r3, [pc, #320]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	494d      	ldr	r1, [pc, #308]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d044      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d107      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d6:	4b47      	ldr	r3, [pc, #284]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d119      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e07f      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d003      	beq.n	80039f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d107      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f6:	4b3f      	ldr	r3, [pc, #252]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d109      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e06f      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a06:	4b3b      	ldr	r3, [pc, #236]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e067      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a16:	4b37      	ldr	r3, [pc, #220]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f023 0203 	bic.w	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	4934      	ldr	r1, [pc, #208]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a28:	f7ff f86c 	bl	8002b04 <HAL_GetTick>
 8003a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2e:	e00a      	b.n	8003a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a30:	f7ff f868 	bl	8002b04 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e04f      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a46:	4b2b      	ldr	r3, [pc, #172]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 020c 	and.w	r2, r3, #12
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d1eb      	bne.n	8003a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a58:	4b25      	ldr	r3, [pc, #148]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d20c      	bcs.n	8003a80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a66:	4b22      	ldr	r3, [pc, #136]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6e:	4b20      	ldr	r3, [pc, #128]	; (8003af0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e032      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a8c:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4916      	ldr	r1, [pc, #88]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0308 	and.w	r3, r3, #8
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aaa:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	490e      	ldr	r1, [pc, #56]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003abe:	f000 f821 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	091b      	lsrs	r3, r3, #4
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	490a      	ldr	r1, [pc, #40]	; (8003af8 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad0:	5ccb      	ldrb	r3, [r1, r3]
 8003ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad6:	4a09      	ldr	r2, [pc, #36]	; (8003afc <HAL_RCC_ClockConfig+0x1c4>)
 8003ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <HAL_RCC_ClockConfig+0x1c8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe ffcc 	bl	8002a7c <HAL_InitTick>

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40023c00 	.word	0x40023c00
 8003af4:	40023800 	.word	0x40023800
 8003af8:	08010c80 	.word	0x08010c80
 8003afc:	200000a4 	.word	0x200000a4
 8003b00:	200000a8 	.word	0x200000a8

08003b04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b08:	b090      	sub	sp, #64	; 0x40
 8003b0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b10:	2300      	movs	r3, #0
 8003b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b14:	2300      	movs	r3, #0
 8003b16:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b1c:	4b59      	ldr	r3, [pc, #356]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 030c 	and.w	r3, r3, #12
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d00d      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0x40>
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	f200 80a1 	bhi.w	8003c70 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_RCC_GetSysClockFreq+0x34>
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d003      	beq.n	8003b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b36:	e09b      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b38:	4b53      	ldr	r3, [pc, #332]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b3a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003b3c:	e09b      	b.n	8003c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b3e:	4b53      	ldr	r3, [pc, #332]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b42:	e098      	b.n	8003c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b44:	4b4f      	ldr	r3, [pc, #316]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b4e:	4b4d      	ldr	r3, [pc, #308]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d028      	beq.n	8003bac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b5a:	4b4a      	ldr	r3, [pc, #296]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	099b      	lsrs	r3, r3, #6
 8003b60:	2200      	movs	r2, #0
 8003b62:	623b      	str	r3, [r7, #32]
 8003b64:	627a      	str	r2, [r7, #36]	; 0x24
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4b47      	ldr	r3, [pc, #284]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b70:	fb03 f201 	mul.w	r2, r3, r1
 8003b74:	2300      	movs	r3, #0
 8003b76:	fb00 f303 	mul.w	r3, r0, r3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	4a43      	ldr	r2, [pc, #268]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b7e:	fba0 1202 	umull	r1, r2, r0, r2
 8003b82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b84:	460a      	mov	r2, r1
 8003b86:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b8a:	4413      	add	r3, r2
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b90:	2200      	movs	r2, #0
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	61fa      	str	r2, [r7, #28]
 8003b96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b9e:	f7fc fb87 	bl	80002b0 <__aeabi_uldivmod>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003baa:	e053      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bac:	4b35      	ldr	r3, [pc, #212]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	099b      	lsrs	r3, r3, #6
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	613b      	str	r3, [r7, #16]
 8003bb6:	617a      	str	r2, [r7, #20]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003bbe:	f04f 0b00 	mov.w	fp, #0
 8003bc2:	4652      	mov	r2, sl
 8003bc4:	465b      	mov	r3, fp
 8003bc6:	f04f 0000 	mov.w	r0, #0
 8003bca:	f04f 0100 	mov.w	r1, #0
 8003bce:	0159      	lsls	r1, r3, #5
 8003bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd4:	0150      	lsls	r0, r2, #5
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	ebb2 080a 	subs.w	r8, r2, sl
 8003bde:	eb63 090b 	sbc.w	r9, r3, fp
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003bee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bf2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bf6:	ebb2 0408 	subs.w	r4, r2, r8
 8003bfa:	eb63 0509 	sbc.w	r5, r3, r9
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	00eb      	lsls	r3, r5, #3
 8003c08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c0c:	00e2      	lsls	r2, r4, #3
 8003c0e:	4614      	mov	r4, r2
 8003c10:	461d      	mov	r5, r3
 8003c12:	eb14 030a 	adds.w	r3, r4, sl
 8003c16:	603b      	str	r3, [r7, #0]
 8003c18:	eb45 030b 	adc.w	r3, r5, fp
 8003c1c:	607b      	str	r3, [r7, #4]
 8003c1e:	f04f 0200 	mov.w	r2, #0
 8003c22:	f04f 0300 	mov.w	r3, #0
 8003c26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	028b      	lsls	r3, r1, #10
 8003c2e:	4621      	mov	r1, r4
 8003c30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c34:	4621      	mov	r1, r4
 8003c36:	028a      	lsls	r2, r1, #10
 8003c38:	4610      	mov	r0, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3e:	2200      	movs	r2, #0
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	60fa      	str	r2, [r7, #12]
 8003c44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c48:	f7fc fb32 	bl	80002b0 <__aeabi_uldivmod>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4613      	mov	r3, r2
 8003c52:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	0c1b      	lsrs	r3, r3, #16
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	3301      	adds	r3, #1
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c6e:	e002      	b.n	8003c76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c70:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3740      	adds	r7, #64	; 0x40
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c82:	bf00      	nop
 8003c84:	40023800 	.word	0x40023800
 8003c88:	00f42400 	.word	0x00f42400
 8003c8c:	017d7840 	.word	0x017d7840

08003c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c94:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c96:	681b      	ldr	r3, [r3, #0]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	200000a4 	.word	0x200000a4

08003ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cac:	f7ff fff0 	bl	8003c90 <HAL_RCC_GetHCLKFreq>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	0a9b      	lsrs	r3, r3, #10
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	4903      	ldr	r1, [pc, #12]	; (8003ccc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cbe:	5ccb      	ldrb	r3, [r1, r3]
 8003cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	08010c90 	.word	0x08010c90

08003cd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cd4:	f7ff ffdc 	bl	8003c90 <HAL_RCC_GetHCLKFreq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	0b5b      	lsrs	r3, r3, #13
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	4903      	ldr	r1, [pc, #12]	; (8003cf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ce6:	5ccb      	ldrb	r3, [r1, r3]
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	08010c90 	.word	0x08010c90

08003cf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e07b      	b.n	8003e02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d108      	bne.n	8003d24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d1a:	d009      	beq.n	8003d30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	61da      	str	r2, [r3, #28]
 8003d22:	e005      	b.n	8003d30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fe fc00 	bl	8002550 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db4:	ea42 0103 	orr.w	r1, r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	0c1b      	lsrs	r3, r3, #16
 8003dce:	f003 0104 	and.w	r1, r3, #4
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	f003 0210 	and.w	r2, r3, #16
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b08c      	sub	sp, #48	; 0x30
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_SPI_TransmitReceive+0x26>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e18a      	b.n	8004146 <HAL_SPI_TransmitReceive+0x33c>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e38:	f7fe fe64 	bl	8002b04 <HAL_GetTick>
 8003e3c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003e4e:	887b      	ldrh	r3, [r7, #2]
 8003e50:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d00f      	beq.n	8003e7a <HAL_SPI_TransmitReceive+0x70>
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e60:	d107      	bne.n	8003e72 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d103      	bne.n	8003e72 <HAL_SPI_TransmitReceive+0x68>
 8003e6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d003      	beq.n	8003e7a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003e72:	2302      	movs	r3, #2
 8003e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e78:	e15b      	b.n	8004132 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_SPI_TransmitReceive+0x82>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_SPI_TransmitReceive+0x82>
 8003e86:	887b      	ldrh	r3, [r7, #2]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d103      	bne.n	8003e94 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003e92:	e14e      	b.n	8004132 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d003      	beq.n	8003ea8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2205      	movs	r2, #5
 8003ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	887a      	ldrh	r2, [r7, #2]
 8003eb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	887a      	ldrh	r2, [r7, #2]
 8003ebe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	887a      	ldrh	r2, [r7, #2]
 8003eca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	887a      	ldrh	r2, [r7, #2]
 8003ed0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee8:	2b40      	cmp	r3, #64	; 0x40
 8003eea:	d007      	beq.n	8003efc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003efa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f04:	d178      	bne.n	8003ff8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_SPI_TransmitReceive+0x10a>
 8003f0e:	8b7b      	ldrh	r3, [r7, #26]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d166      	bne.n	8003fe2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	881a      	ldrh	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	1c9a      	adds	r2, r3, #2
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f38:	e053      	b.n	8003fe2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d11b      	bne.n	8003f80 <HAL_SPI_TransmitReceive+0x176>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d016      	beq.n	8003f80 <HAL_SPI_TransmitReceive+0x176>
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d113      	bne.n	8003f80 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	881a      	ldrh	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	1c9a      	adds	r2, r3, #2
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d119      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x1b8>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d014      	beq.n	8003fc2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	b292      	uxth	r2, r2
 8003fa4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	1c9a      	adds	r2, r3, #2
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003fc2:	f7fe fd9f 	bl	8002b04 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d807      	bhi.n	8003fe2 <HAL_SPI_TransmitReceive+0x1d8>
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd8:	d003      	beq.n	8003fe2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003fe0:	e0a7      	b.n	8004132 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1a6      	bne.n	8003f3a <HAL_SPI_TransmitReceive+0x130>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1a1      	bne.n	8003f3a <HAL_SPI_TransmitReceive+0x130>
 8003ff6:	e07c      	b.n	80040f2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <HAL_SPI_TransmitReceive+0x1fc>
 8004000:	8b7b      	ldrh	r3, [r7, #26]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d16b      	bne.n	80040de <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	7812      	ldrb	r2, [r2, #0]
 8004012:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800402c:	e057      	b.n	80040de <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b02      	cmp	r3, #2
 800403a:	d11c      	bne.n	8004076 <HAL_SPI_TransmitReceive+0x26c>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d017      	beq.n	8004076 <HAL_SPI_TransmitReceive+0x26c>
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	2b01      	cmp	r3, #1
 800404a:	d114      	bne.n	8004076 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	330c      	adds	r3, #12
 8004056:	7812      	ldrb	r2, [r2, #0]
 8004058:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b01      	cmp	r3, #1
 8004082:	d119      	bne.n	80040b8 <HAL_SPI_TransmitReceive+0x2ae>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004088:	b29b      	uxth	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d014      	beq.n	80040b8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040b4:	2301      	movs	r3, #1
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80040b8:	f7fe fd24 	bl	8002b04 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d803      	bhi.n	80040d0 <HAL_SPI_TransmitReceive+0x2c6>
 80040c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ce:	d102      	bne.n	80040d6 <HAL_SPI_TransmitReceive+0x2cc>
 80040d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d103      	bne.n	80040de <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80040dc:	e029      	b.n	8004132 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1a2      	bne.n	800402e <HAL_SPI_TransmitReceive+0x224>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d19d      	bne.n	800402e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f8b2 	bl	8004260 <SPI_EndRxTxTransaction>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d006      	beq.n	8004110 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800410e:	e010      	b.n	8004132 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10b      	bne.n	8004130 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	617b      	str	r3, [r7, #20]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	e000      	b.n	8004132 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004130:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004142:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004146:	4618      	mov	r0, r3
 8004148:	3730      	adds	r7, #48	; 0x30
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	4613      	mov	r3, r2
 800415e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004160:	f7fe fcd0 	bl	8002b04 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	4413      	add	r3, r2
 800416e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004170:	f7fe fcc8 	bl	8002b04 <HAL_GetTick>
 8004174:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004176:	4b39      	ldr	r3, [pc, #228]	; (800425c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	015b      	lsls	r3, r3, #5
 800417c:	0d1b      	lsrs	r3, r3, #20
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	fb02 f303 	mul.w	r3, r2, r3
 8004184:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004186:	e054      	b.n	8004232 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418e:	d050      	beq.n	8004232 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004190:	f7fe fcb8 	bl	8002b04 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	429a      	cmp	r2, r3
 800419e:	d902      	bls.n	80041a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d13d      	bne.n	8004222 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041be:	d111      	bne.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c8:	d004      	beq.n	80041d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d2:	d107      	bne.n	80041e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ec:	d10f      	bne.n	800420e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800420c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e017      	b.n	8004252 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	3b01      	subs	r3, #1
 8004230:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4013      	ands	r3, r2
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	bf0c      	ite	eq
 8004242:	2301      	moveq	r3, #1
 8004244:	2300      	movne	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	429a      	cmp	r2, r3
 800424e:	d19b      	bne.n	8004188 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3720      	adds	r7, #32
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	200000a4 	.word	0x200000a4

08004260 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800426c:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <SPI_EndRxTxTransaction+0x7c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <SPI_EndRxTxTransaction+0x80>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	0d5b      	lsrs	r3, r3, #21
 8004278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800427c:	fb02 f303 	mul.w	r3, r2, r3
 8004280:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800428a:	d112      	bne.n	80042b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2200      	movs	r2, #0
 8004294:	2180      	movs	r1, #128	; 0x80
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f7ff ff5a 	bl	8004150 <SPI_WaitFlagStateUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d016      	beq.n	80042d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	f043 0220 	orr.w	r2, r3, #32
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e00f      	b.n	80042d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c8:	2b80      	cmp	r3, #128	; 0x80
 80042ca:	d0f2      	beq.n	80042b2 <SPI_EndRxTxTransaction+0x52>
 80042cc:	e000      	b.n	80042d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80042ce:	bf00      	nop
  }

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	200000a4 	.word	0x200000a4
 80042e0:	165e9f81 	.word	0x165e9f81

080042e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e041      	b.n	800437a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fe f968 	bl	80025e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2202      	movs	r2, #2
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3304      	adds	r3, #4
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f000 fce4 	bl	8004cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b082      	sub	sp, #8
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e041      	b.n	8004418 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d106      	bne.n	80043ae <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f839 	bl	8004420 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2202      	movs	r2, #2
 80043b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3304      	adds	r3, #4
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f000 fc95 	bl	8004cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <HAL_TIM_OC_Start_IT+0x28>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	bf14      	ite	ne
 8004454:	2301      	movne	r3, #1
 8004456:	2300      	moveq	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	e022      	b.n	80044a2 <HAL_TIM_OC_Start_IT+0x6e>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b04      	cmp	r3, #4
 8004460:	d109      	bne.n	8004476 <HAL_TIM_OC_Start_IT+0x42>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b01      	cmp	r3, #1
 800446c:	bf14      	ite	ne
 800446e:	2301      	movne	r3, #1
 8004470:	2300      	moveq	r3, #0
 8004472:	b2db      	uxtb	r3, r3
 8004474:	e015      	b.n	80044a2 <HAL_TIM_OC_Start_IT+0x6e>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b08      	cmp	r3, #8
 800447a:	d109      	bne.n	8004490 <HAL_TIM_OC_Start_IT+0x5c>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	bf14      	ite	ne
 8004488:	2301      	movne	r3, #1
 800448a:	2300      	moveq	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	e008      	b.n	80044a2 <HAL_TIM_OC_Start_IT+0x6e>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	bf14      	ite	ne
 800449c:	2301      	movne	r3, #1
 800449e:	2300      	moveq	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e0b3      	b.n	8004612 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d104      	bne.n	80044ba <HAL_TIM_OC_Start_IT+0x86>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044b8:	e013      	b.n	80044e2 <HAL_TIM_OC_Start_IT+0xae>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d104      	bne.n	80044ca <HAL_TIM_OC_Start_IT+0x96>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044c8:	e00b      	b.n	80044e2 <HAL_TIM_OC_Start_IT+0xae>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d104      	bne.n	80044da <HAL_TIM_OC_Start_IT+0xa6>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044d8:	e003      	b.n	80044e2 <HAL_TIM_OC_Start_IT+0xae>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2202      	movs	r2, #2
 80044de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b0c      	cmp	r3, #12
 80044e6:	d841      	bhi.n	800456c <HAL_TIM_OC_Start_IT+0x138>
 80044e8:	a201      	add	r2, pc, #4	; (adr r2, 80044f0 <HAL_TIM_OC_Start_IT+0xbc>)
 80044ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ee:	bf00      	nop
 80044f0:	08004525 	.word	0x08004525
 80044f4:	0800456d 	.word	0x0800456d
 80044f8:	0800456d 	.word	0x0800456d
 80044fc:	0800456d 	.word	0x0800456d
 8004500:	08004537 	.word	0x08004537
 8004504:	0800456d 	.word	0x0800456d
 8004508:	0800456d 	.word	0x0800456d
 800450c:	0800456d 	.word	0x0800456d
 8004510:	08004549 	.word	0x08004549
 8004514:	0800456d 	.word	0x0800456d
 8004518:	0800456d 	.word	0x0800456d
 800451c:	0800456d 	.word	0x0800456d
 8004520:	0800455b 	.word	0x0800455b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0202 	orr.w	r2, r2, #2
 8004532:	60da      	str	r2, [r3, #12]
      break;
 8004534:	e01d      	b.n	8004572 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f042 0204 	orr.w	r2, r2, #4
 8004544:	60da      	str	r2, [r3, #12]
      break;
 8004546:	e014      	b.n	8004572 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0208 	orr.w	r2, r2, #8
 8004556:	60da      	str	r2, [r3, #12]
      break;
 8004558:	e00b      	b.n	8004572 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0210 	orr.w	r2, r2, #16
 8004568:	60da      	str	r2, [r3, #12]
      break;
 800456a:	e002      	b.n	8004572 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
      break;
 8004570:	bf00      	nop
  }

  if (status == HAL_OK)
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d14b      	bne.n	8004610 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2201      	movs	r2, #1
 800457e:	6839      	ldr	r1, [r7, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fe5b 	bl	800523c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a24      	ldr	r2, [pc, #144]	; (800461c <HAL_TIM_OC_Start_IT+0x1e8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d107      	bne.n	80045a0 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800459e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a1d      	ldr	r2, [pc, #116]	; (800461c <HAL_TIM_OC_Start_IT+0x1e8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d018      	beq.n	80045dc <HAL_TIM_OC_Start_IT+0x1a8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b2:	d013      	beq.n	80045dc <HAL_TIM_OC_Start_IT+0x1a8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a19      	ldr	r2, [pc, #100]	; (8004620 <HAL_TIM_OC_Start_IT+0x1ec>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d00e      	beq.n	80045dc <HAL_TIM_OC_Start_IT+0x1a8>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a18      	ldr	r2, [pc, #96]	; (8004624 <HAL_TIM_OC_Start_IT+0x1f0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d009      	beq.n	80045dc <HAL_TIM_OC_Start_IT+0x1a8>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a16      	ldr	r2, [pc, #88]	; (8004628 <HAL_TIM_OC_Start_IT+0x1f4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d004      	beq.n	80045dc <HAL_TIM_OC_Start_IT+0x1a8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a15      	ldr	r2, [pc, #84]	; (800462c <HAL_TIM_OC_Start_IT+0x1f8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d111      	bne.n	8004600 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b06      	cmp	r3, #6
 80045ec:	d010      	beq.n	8004610 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 0201 	orr.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fe:	e007      	b.n	8004610 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004610:	7bfb      	ldrb	r3, [r7, #15]
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40010000 	.word	0x40010000
 8004620:	40000400 	.word	0x40000400
 8004624:	40000800 	.word	0x40000800
 8004628:	40000c00 	.word	0x40000c00
 800462c:	40014000 	.word	0x40014000

08004630 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b0c      	cmp	r3, #12
 8004642:	d841      	bhi.n	80046c8 <HAL_TIM_OC_Stop_IT+0x98>
 8004644:	a201      	add	r2, pc, #4	; (adr r2, 800464c <HAL_TIM_OC_Stop_IT+0x1c>)
 8004646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464a:	bf00      	nop
 800464c:	08004681 	.word	0x08004681
 8004650:	080046c9 	.word	0x080046c9
 8004654:	080046c9 	.word	0x080046c9
 8004658:	080046c9 	.word	0x080046c9
 800465c:	08004693 	.word	0x08004693
 8004660:	080046c9 	.word	0x080046c9
 8004664:	080046c9 	.word	0x080046c9
 8004668:	080046c9 	.word	0x080046c9
 800466c:	080046a5 	.word	0x080046a5
 8004670:	080046c9 	.word	0x080046c9
 8004674:	080046c9 	.word	0x080046c9
 8004678:	080046c9 	.word	0x080046c9
 800467c:	080046b7 	.word	0x080046b7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0202 	bic.w	r2, r2, #2
 800468e:	60da      	str	r2, [r3, #12]
      break;
 8004690:	e01d      	b.n	80046ce <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0204 	bic.w	r2, r2, #4
 80046a0:	60da      	str	r2, [r3, #12]
      break;
 80046a2:	e014      	b.n	80046ce <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f022 0208 	bic.w	r2, r2, #8
 80046b2:	60da      	str	r2, [r3, #12]
      break;
 80046b4:	e00b      	b.n	80046ce <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0210 	bic.w	r2, r2, #16
 80046c4:	60da      	str	r2, [r3, #12]
      break;
 80046c6:	e002      	b.n	80046ce <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	73fb      	strb	r3, [r7, #15]
      break;
 80046cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d157      	bne.n	8004784 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2200      	movs	r2, #0
 80046da:	6839      	ldr	r1, [r7, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fdad 	bl	800523c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a2a      	ldr	r2, [pc, #168]	; (8004790 <HAL_TIM_OC_Stop_IT+0x160>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d117      	bne.n	800471c <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6a1a      	ldr	r2, [r3, #32]
 80046f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10f      	bne.n	800471c <HAL_TIM_OC_Stop_IT+0xec>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6a1a      	ldr	r2, [r3, #32]
 8004702:	f240 4344 	movw	r3, #1092	; 0x444
 8004706:	4013      	ands	r3, r2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d107      	bne.n	800471c <HAL_TIM_OC_Stop_IT+0xec>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800471a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6a1a      	ldr	r2, [r3, #32]
 8004722:	f241 1311 	movw	r3, #4369	; 0x1111
 8004726:	4013      	ands	r3, r2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10f      	bne.n	800474c <HAL_TIM_OC_Stop_IT+0x11c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6a1a      	ldr	r2, [r3, #32]
 8004732:	f240 4344 	movw	r3, #1092	; 0x444
 8004736:	4013      	ands	r3, r2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d107      	bne.n	800474c <HAL_TIM_OC_Stop_IT+0x11c>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d104      	bne.n	800475c <HAL_TIM_OC_Stop_IT+0x12c>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800475a:	e013      	b.n	8004784 <HAL_TIM_OC_Stop_IT+0x154>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b04      	cmp	r3, #4
 8004760:	d104      	bne.n	800476c <HAL_TIM_OC_Stop_IT+0x13c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800476a:	e00b      	b.n	8004784 <HAL_TIM_OC_Stop_IT+0x154>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b08      	cmp	r3, #8
 8004770:	d104      	bne.n	800477c <HAL_TIM_OC_Stop_IT+0x14c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800477a:	e003      	b.n	8004784 <HAL_TIM_OC_Stop_IT+0x154>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004784:	7bfb      	ldrb	r3, [r7, #15]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40010000 	.word	0x40010000

08004794 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e041      	b.n	800482c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d106      	bne.n	80047c2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f839 	bl	8004834 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3304      	adds	r3, #4
 80047d2:	4619      	mov	r1, r3
 80047d4:	4610      	mov	r0, r2
 80047d6:	f000 fa8b 	bl	8004cf0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0208 	bic.w	r2, r2, #8
 80047e8:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6819      	ldr	r1, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b02      	cmp	r3, #2
 800485c:	d122      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b02      	cmp	r3, #2
 800486a:	d11b      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0202 	mvn.w	r2, #2
 8004874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fa11 	bl	8004cb2 <HAL_TIM_IC_CaptureCallback>
 8004890:	e005      	b.n	800489e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7fd fd2e 	bl	80022f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fa14 	bl	8004cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d122      	bne.n	80048f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d11b      	bne.n	80048f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0204 	mvn.w	r2, #4
 80048c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2202      	movs	r2, #2
 80048ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f9e7 	bl	8004cb2 <HAL_TIM_IC_CaptureCallback>
 80048e4:	e005      	b.n	80048f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fd fd04 	bl	80022f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f9ea 	bl	8004cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b08      	cmp	r3, #8
 8004904:	d122      	bne.n	800494c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b08      	cmp	r3, #8
 8004912:	d11b      	bne.n	800494c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0208 	mvn.w	r2, #8
 800491c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2204      	movs	r2, #4
 8004922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f9bd 	bl	8004cb2 <HAL_TIM_IC_CaptureCallback>
 8004938:	e005      	b.n	8004946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fd fcda 	bl	80022f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f9c0 	bl	8004cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b10      	cmp	r3, #16
 8004958:	d122      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	2b10      	cmp	r3, #16
 8004966:	d11b      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0210 	mvn.w	r2, #16
 8004970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2208      	movs	r2, #8
 8004976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f993 	bl	8004cb2 <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7fd fcb0 	bl	80022f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f996 	bl	8004cc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d10e      	bne.n	80049cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d107      	bne.n	80049cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0201 	mvn.w	r2, #1
 80049c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f969 	bl	8004c9e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b80      	cmp	r3, #128	; 0x80
 80049d8:	d10e      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e4:	2b80      	cmp	r3, #128	; 0x80
 80049e6:	d107      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fcc0 	bl	8005378 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b40      	cmp	r3, #64	; 0x40
 8004a04:	d10e      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b40      	cmp	r3, #64	; 0x40
 8004a12:	d107      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f95b 	bl	8004cda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d10e      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d107      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0220 	mvn.w	r2, #32
 8004a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fc8a 	bl	8005364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a50:	bf00      	nop
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e048      	b.n	8004b08 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b0c      	cmp	r3, #12
 8004a82:	d839      	bhi.n	8004af8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004a84:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8a:	bf00      	nop
 8004a8c:	08004ac1 	.word	0x08004ac1
 8004a90:	08004af9 	.word	0x08004af9
 8004a94:	08004af9 	.word	0x08004af9
 8004a98:	08004af9 	.word	0x08004af9
 8004a9c:	08004acf 	.word	0x08004acf
 8004aa0:	08004af9 	.word	0x08004af9
 8004aa4:	08004af9 	.word	0x08004af9
 8004aa8:	08004af9 	.word	0x08004af9
 8004aac:	08004add 	.word	0x08004add
 8004ab0:	08004af9 	.word	0x08004af9
 8004ab4:	08004af9 	.word	0x08004af9
 8004ab8:	08004af9 	.word	0x08004af9
 8004abc:	08004aeb 	.word	0x08004aeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f992 	bl	8004df0 <TIM_OC1_SetConfig>
      break;
 8004acc:	e017      	b.n	8004afe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 f9f1 	bl	8004ebc <TIM_OC2_SetConfig>
      break;
 8004ada:	e010      	b.n	8004afe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68b9      	ldr	r1, [r7, #8]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fa56 	bl	8004f94 <TIM_OC3_SetConfig>
      break;
 8004ae8:	e009      	b.n	8004afe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fab9 	bl	8005068 <TIM_OC4_SetConfig>
      break;
 8004af6:	e002      	b.n	8004afe <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	75fb      	strb	r3, [r7, #23]
      break;
 8004afc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_TIM_ConfigClockSource+0x1c>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e0b4      	b.n	8004c96 <HAL_TIM_ConfigClockSource+0x186>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b64:	d03e      	beq.n	8004be4 <HAL_TIM_ConfigClockSource+0xd4>
 8004b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b6a:	f200 8087 	bhi.w	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b72:	f000 8086 	beq.w	8004c82 <HAL_TIM_ConfigClockSource+0x172>
 8004b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7a:	d87f      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b7c:	2b70      	cmp	r3, #112	; 0x70
 8004b7e:	d01a      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0xa6>
 8004b80:	2b70      	cmp	r3, #112	; 0x70
 8004b82:	d87b      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b84:	2b60      	cmp	r3, #96	; 0x60
 8004b86:	d050      	beq.n	8004c2a <HAL_TIM_ConfigClockSource+0x11a>
 8004b88:	2b60      	cmp	r3, #96	; 0x60
 8004b8a:	d877      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b8c:	2b50      	cmp	r3, #80	; 0x50
 8004b8e:	d03c      	beq.n	8004c0a <HAL_TIM_ConfigClockSource+0xfa>
 8004b90:	2b50      	cmp	r3, #80	; 0x50
 8004b92:	d873      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d058      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0x13a>
 8004b98:	2b40      	cmp	r3, #64	; 0x40
 8004b9a:	d86f      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004b9c:	2b30      	cmp	r3, #48	; 0x30
 8004b9e:	d064      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ba0:	2b30      	cmp	r3, #48	; 0x30
 8004ba2:	d86b      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d060      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d867      	bhi.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d05c      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004bb0:	2b10      	cmp	r3, #16
 8004bb2:	d05a      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x15a>
 8004bb4:	e062      	b.n	8004c7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6899      	ldr	r1, [r3, #8]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f000 fb19 	bl	80051fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	609a      	str	r2, [r3, #8]
      break;
 8004be2:	e04f      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6899      	ldr	r1, [r3, #8]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f000 fb02 	bl	80051fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c06:	609a      	str	r2, [r3, #8]
      break;
 8004c08:	e03c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	6859      	ldr	r1, [r3, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f000 fa76 	bl	8005108 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2150      	movs	r1, #80	; 0x50
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 facf 	bl	80051c6 <TIM_ITRx_SetConfig>
      break;
 8004c28:	e02c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	6859      	ldr	r1, [r3, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f000 fa95 	bl	8005166 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2160      	movs	r1, #96	; 0x60
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fabf 	bl	80051c6 <TIM_ITRx_SetConfig>
      break;
 8004c48:	e01c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	461a      	mov	r2, r3
 8004c58:	f000 fa56 	bl	8005108 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2140      	movs	r1, #64	; 0x40
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 faaf 	bl	80051c6 <TIM_ITRx_SetConfig>
      break;
 8004c68:	e00c      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f000 faa6 	bl	80051c6 <TIM_ITRx_SetConfig>
      break;
 8004c7a:	e003      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c80:	e000      	b.n	8004c84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a34      	ldr	r2, [pc, #208]	; (8004dd4 <TIM_Base_SetConfig+0xe4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00f      	beq.n	8004d28 <TIM_Base_SetConfig+0x38>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0e:	d00b      	beq.n	8004d28 <TIM_Base_SetConfig+0x38>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a31      	ldr	r2, [pc, #196]	; (8004dd8 <TIM_Base_SetConfig+0xe8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d007      	beq.n	8004d28 <TIM_Base_SetConfig+0x38>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a30      	ldr	r2, [pc, #192]	; (8004ddc <TIM_Base_SetConfig+0xec>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d003      	beq.n	8004d28 <TIM_Base_SetConfig+0x38>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a2f      	ldr	r2, [pc, #188]	; (8004de0 <TIM_Base_SetConfig+0xf0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d108      	bne.n	8004d3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a25      	ldr	r2, [pc, #148]	; (8004dd4 <TIM_Base_SetConfig+0xe4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01b      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d48:	d017      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a22      	ldr	r2, [pc, #136]	; (8004dd8 <TIM_Base_SetConfig+0xe8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d013      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a21      	ldr	r2, [pc, #132]	; (8004ddc <TIM_Base_SetConfig+0xec>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00f      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a20      	ldr	r2, [pc, #128]	; (8004de0 <TIM_Base_SetConfig+0xf0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00b      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a1f      	ldr	r2, [pc, #124]	; (8004de4 <TIM_Base_SetConfig+0xf4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d007      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1e      	ldr	r2, [pc, #120]	; (8004de8 <TIM_Base_SetConfig+0xf8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d003      	beq.n	8004d7a <TIM_Base_SetConfig+0x8a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a1d      	ldr	r2, [pc, #116]	; (8004dec <TIM_Base_SetConfig+0xfc>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d108      	bne.n	8004d8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a08      	ldr	r2, [pc, #32]	; (8004dd4 <TIM_Base_SetConfig+0xe4>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d103      	bne.n	8004dc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	615a      	str	r2, [r3, #20]
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	40010000 	.word	0x40010000
 8004dd8:	40000400 	.word	0x40000400
 8004ddc:	40000800 	.word	0x40000800
 8004de0:	40000c00 	.word	0x40000c00
 8004de4:	40014000 	.word	0x40014000
 8004de8:	40014400 	.word	0x40014400
 8004dec:	40014800 	.word	0x40014800

08004df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f023 0201 	bic.w	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0303 	bic.w	r3, r3, #3
 8004e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 0302 	bic.w	r3, r3, #2
 8004e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a1c      	ldr	r2, [pc, #112]	; (8004eb8 <TIM_OC1_SetConfig+0xc8>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d10c      	bne.n	8004e66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f023 0308 	bic.w	r3, r3, #8
 8004e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f023 0304 	bic.w	r3, r3, #4
 8004e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a13      	ldr	r2, [pc, #76]	; (8004eb8 <TIM_OC1_SetConfig+0xc8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d111      	bne.n	8004e92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	621a      	str	r2, [r3, #32]
}
 8004eac:	bf00      	nop
 8004eae:	371c      	adds	r7, #28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	40010000 	.word	0x40010000

08004ebc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	f023 0210 	bic.w	r2, r3, #16
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	021b      	lsls	r3, r3, #8
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0320 	bic.w	r3, r3, #32
 8004f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a1e      	ldr	r2, [pc, #120]	; (8004f90 <TIM_OC2_SetConfig+0xd4>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d10d      	bne.n	8004f38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a15      	ldr	r2, [pc, #84]	; (8004f90 <TIM_OC2_SetConfig+0xd4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d113      	bne.n	8004f68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40010000 	.word	0x40010000

08004f94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0303 	bic.w	r3, r3, #3
 8004fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	021b      	lsls	r3, r3, #8
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a1d      	ldr	r2, [pc, #116]	; (8005064 <TIM_OC3_SetConfig+0xd0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d10d      	bne.n	800500e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	021b      	lsls	r3, r3, #8
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800500c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a14      	ldr	r2, [pc, #80]	; (8005064 <TIM_OC3_SetConfig+0xd0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d113      	bne.n	800503e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800501c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	621a      	str	r2, [r3, #32]
}
 8005058:	bf00      	nop
 800505a:	371c      	adds	r7, #28
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	40010000 	.word	0x40010000

08005068 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	021b      	lsls	r3, r3, #8
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	031b      	lsls	r3, r3, #12
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a10      	ldr	r2, [pc, #64]	; (8005104 <TIM_OC4_SetConfig+0x9c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d109      	bne.n	80050dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	019b      	lsls	r3, r3, #6
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	621a      	str	r2, [r3, #32]
}
 80050f6:	bf00      	nop
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	40010000 	.word	0x40010000

08005108 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	f023 0201 	bic.w	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f023 030a 	bic.w	r3, r3, #10
 8005144:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005166:	b480      	push	{r7}
 8005168:	b087      	sub	sp, #28
 800516a:	af00      	add	r7, sp, #0
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	f023 0210 	bic.w	r2, r3, #16
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005190:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	031b      	lsls	r3, r3, #12
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	621a      	str	r2, [r3, #32]
}
 80051ba:	bf00      	nop
 80051bc:	371c      	adds	r7, #28
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b085      	sub	sp, #20
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f043 0307 	orr.w	r3, r3, #7
 80051e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	609a      	str	r2, [r3, #8]
}
 80051f0:	bf00      	nop
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005216:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	021a      	lsls	r2, r3, #8
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	431a      	orrs	r2, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4313      	orrs	r3, r2
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	4313      	orrs	r3, r2
 8005228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	609a      	str	r2, [r3, #8]
}
 8005230:	bf00      	nop
 8005232:	371c      	adds	r7, #28
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f003 031f 	and.w	r3, r3, #31
 800524e:	2201      	movs	r2, #1
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a1a      	ldr	r2, [r3, #32]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	43db      	mvns	r3, r3
 800525e:	401a      	ands	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a1a      	ldr	r2, [r3, #32]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f003 031f 	and.w	r3, r3, #31
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	fa01 f303 	lsl.w	r3, r1, r3
 8005274:	431a      	orrs	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	621a      	str	r2, [r3, #32]
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
	...

08005288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800529c:	2302      	movs	r3, #2
 800529e:	e050      	b.n	8005342 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2202      	movs	r2, #2
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1c      	ldr	r2, [pc, #112]	; (8005350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d018      	beq.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ec:	d013      	beq.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a18      	ldr	r2, [pc, #96]	; (8005354 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00e      	beq.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a16      	ldr	r2, [pc, #88]	; (8005358 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d009      	beq.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a15      	ldr	r2, [pc, #84]	; (800535c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d004      	beq.n	8005316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a13      	ldr	r2, [pc, #76]	; (8005360 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d10c      	bne.n	8005330 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800531c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	4313      	orrs	r3, r2
 8005326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40010000 	.word	0x40010000
 8005354:	40000400 	.word	0x40000400
 8005358:	40000800 	.word	0x40000800
 800535c:	40000c00 	.word	0x40000c00
 8005360:	40014000 	.word	0x40014000

08005364 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e03f      	b.n	800541e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d106      	bne.n	80053b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fd f93a 	bl	800262c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2224      	movs	r2, #36	; 0x24
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68da      	ldr	r2, [r3, #12]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fe49 	bl	8006068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695a      	ldr	r2, [r3, #20]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005404:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e021      	b.n	800547c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2224      	movs	r2, #36	; 0x24
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800544e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7fd f977 	bl	8002744 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08a      	sub	sp, #40	; 0x28
 8005488:	af02      	add	r7, sp, #8
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	4613      	mov	r3, r2
 8005492:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	d17c      	bne.n	800559e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <HAL_UART_Transmit+0x2c>
 80054aa:	88fb      	ldrh	r3, [r7, #6]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e075      	b.n	80055a0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_UART_Transmit+0x3e>
 80054be:	2302      	movs	r3, #2
 80054c0:	e06e      	b.n	80055a0 <HAL_UART_Transmit+0x11c>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2221      	movs	r2, #33	; 0x21
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054d8:	f7fd fb14 	bl	8002b04 <HAL_GetTick>
 80054dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	88fa      	ldrh	r2, [r7, #6]
 80054e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	88fa      	ldrh	r2, [r7, #6]
 80054e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f2:	d108      	bne.n	8005506 <HAL_UART_Transmit+0x82>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d104      	bne.n	8005506 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054fc:	2300      	movs	r3, #0
 80054fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	61bb      	str	r3, [r7, #24]
 8005504:	e003      	b.n	800550e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005516:	e02a      	b.n	800556e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2200      	movs	r2, #0
 8005520:	2180      	movs	r1, #128	; 0x80
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fb5a 	bl	8005bdc <UART_WaitOnFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e036      	b.n	80055a0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10b      	bne.n	8005550 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	461a      	mov	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005546:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	3302      	adds	r3, #2
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	e007      	b.n	8005560 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	781a      	ldrb	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	3301      	adds	r3, #1
 800555e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005572:	b29b      	uxth	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1cf      	bne.n	8005518 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2200      	movs	r2, #0
 8005580:	2140      	movs	r1, #64	; 0x40
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 fb2a 	bl	8005bdc <UART_WaitOnFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e006      	b.n	80055a0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	e000      	b.n	80055a0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800559e:	2302      	movs	r3, #2
  }
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	4613      	mov	r3, r2
 80055b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d130      	bne.n	8005624 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <HAL_UART_Transmit_IT+0x26>
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e029      	b.n	8005626 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_UART_Transmit_IT+0x38>
 80055dc:	2302      	movs	r3, #2
 80055de:	e022      	b.n	8005626 <HAL_UART_Transmit_IT+0x7e>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	88fa      	ldrh	r2, [r7, #6]
 80055f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	88fa      	ldrh	r2, [r7, #6]
 80055f8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2221      	movs	r2, #33	; 0x21
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800561e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	e000      	b.n	8005626 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005624:	2302      	movs	r3, #2
  }
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b084      	sub	sp, #16
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	4613      	mov	r3, r2
 800563e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b20      	cmp	r3, #32
 800564a:	d11d      	bne.n	8005688 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <HAL_UART_Receive_IT+0x26>
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e016      	b.n	800568a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <HAL_UART_Receive_IT+0x38>
 8005666:	2302      	movs	r3, #2
 8005668:	e00f      	b.n	800568a <HAL_UART_Receive_IT+0x58>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	461a      	mov	r2, r3
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 fb1a 	bl	8005cb8 <UART_Start_Receive_IT>
 8005684:	4603      	mov	r3, r0
 8005686:	e000      	b.n	800568a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005688:	2302      	movs	r3, #2
  }
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b0ba      	sub	sp, #232	; 0xe8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80056d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10f      	bne.n	80056fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d009      	beq.n	80056fa <HAL_UART_IRQHandler+0x66>
 80056e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fbfd 	bl	8005ef2 <UART_Receive_IT>
      return;
 80056f8:	e256      	b.n	8005ba8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 80de 	beq.w	80058c0 <HAL_UART_IRQHandler+0x22c>
 8005704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d106      	bne.n	800571e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005714:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80d1 	beq.w	80058c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800571e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00b      	beq.n	8005742 <HAL_UART_IRQHandler+0xae>
 800572a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800572e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f043 0201 	orr.w	r2, r3, #1
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005746:	f003 0304 	and.w	r3, r3, #4
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00b      	beq.n	8005766 <HAL_UART_IRQHandler+0xd2>
 800574e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	f043 0202 	orr.w	r2, r3, #2
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00b      	beq.n	800578a <HAL_UART_IRQHandler+0xf6>
 8005772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d005      	beq.n	800578a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	f043 0204 	orr.w	r2, r3, #4
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800578a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d011      	beq.n	80057ba <HAL_UART_IRQHandler+0x126>
 8005796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d105      	bne.n	80057ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d005      	beq.n	80057ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f043 0208 	orr.w	r2, r3, #8
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 81ed 	beq.w	8005b9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d008      	beq.n	80057e2 <HAL_UART_IRQHandler+0x14e>
 80057d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fb88 	bl	8005ef2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ec:	2b40      	cmp	r3, #64	; 0x40
 80057ee:	bf0c      	ite	eq
 80057f0:	2301      	moveq	r3, #1
 80057f2:	2300      	movne	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d103      	bne.n	800580e <HAL_UART_IRQHandler+0x17a>
 8005806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d04f      	beq.n	80058ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fa90 	bl	8005d34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581e:	2b40      	cmp	r3, #64	; 0x40
 8005820:	d141      	bne.n	80058a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3314      	adds	r3, #20
 8005828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800583c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3314      	adds	r3, #20
 800584a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800584e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005852:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800585a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1d9      	bne.n	8005822 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	2b00      	cmp	r3, #0
 8005874:	d013      	beq.n	800589e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	4a7d      	ldr	r2, [pc, #500]	; (8005a70 <HAL_UART_IRQHandler+0x3dc>)
 800587c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	4618      	mov	r0, r3
 8005884:	f7fd fb21 	bl	8002eca <HAL_DMA_Abort_IT>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d016      	beq.n	80058bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005898:	4610      	mov	r0, r2
 800589a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589c:	e00e      	b.n	80058bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fc fc8c 	bl	80021bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a4:	e00a      	b.n	80058bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7fc fc88 	bl	80021bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ac:	e006      	b.n	80058bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fc fc84 	bl	80021bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80058ba:	e170      	b.n	8005b9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058bc:	bf00      	nop
    return;
 80058be:	e16e      	b.n	8005b9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	f040 814a 	bne.w	8005b5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ce:	f003 0310 	and.w	r3, r3, #16
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 8143 	beq.w	8005b5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 813c 	beq.w	8005b5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058e6:	2300      	movs	r3, #0
 80058e8:	60bb      	str	r3, [r7, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60bb      	str	r3, [r7, #8]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	60bb      	str	r3, [r7, #8]
 80058fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005906:	2b40      	cmp	r3, #64	; 0x40
 8005908:	f040 80b4 	bne.w	8005a74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005918:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 8140 	beq.w	8005ba2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800592a:	429a      	cmp	r2, r3
 800592c:	f080 8139 	bcs.w	8005ba2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005936:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005942:	f000 8088 	beq.w	8005a56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	330c      	adds	r3, #12
 800594c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800595c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005960:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005964:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005972:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800597e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800598a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1d9      	bne.n	8005946 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3314      	adds	r3, #20
 8005998:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059a4:	f023 0301 	bic.w	r3, r3, #1
 80059a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3314      	adds	r3, #20
 80059b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e1      	bne.n	8005992 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3314      	adds	r3, #20
 80059d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3314      	adds	r3, #20
 80059ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e3      	bne.n	80059ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a26:	f023 0310 	bic.w	r3, r3, #16
 8005a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	330c      	adds	r3, #12
 8005a34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a38:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e3      	bne.n	8005a14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fd f9ca 	bl	8002dea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	4619      	mov	r1, r3
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f8ac 	bl	8005bc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a6c:	e099      	b.n	8005ba2 <HAL_UART_IRQHandler+0x50e>
 8005a6e:	bf00      	nop
 8005a70:	08005dfb 	.word	0x08005dfb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 808b 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005a90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 8086 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	330c      	adds	r3, #12
 8005aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ab0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	330c      	adds	r3, #12
 8005aba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005abe:	647a      	str	r2, [r7, #68]	; 0x44
 8005ac0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ac6:	e841 2300 	strex	r3, r2, [r1]
 8005aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1e3      	bne.n	8005a9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3314      	adds	r3, #20
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	f023 0301 	bic.w	r3, r3, #1
 8005ae8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3314      	adds	r3, #20
 8005af2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005af6:	633a      	str	r2, [r7, #48]	; 0x30
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e3      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	330c      	adds	r3, #12
 8005b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	e853 3f00 	ldrex	r3, [r3]
 8005b26:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0310 	bic.w	r3, r3, #16
 8005b2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	330c      	adds	r3, #12
 8005b38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b3c:	61fa      	str	r2, [r7, #28]
 8005b3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	69b9      	ldr	r1, [r7, #24]
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	617b      	str	r3, [r7, #20]
   return(result);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e3      	bne.n	8005b18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b54:	4619      	mov	r1, r3
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f834 	bl	8005bc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b5c:	e023      	b.n	8005ba6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d009      	beq.n	8005b7e <HAL_UART_IRQHandler+0x4ea>
 8005b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d003      	beq.n	8005b7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f953 	bl	8005e22 <UART_Transmit_IT>
    return;
 8005b7c:	e014      	b.n	8005ba8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00e      	beq.n	8005ba8 <HAL_UART_IRQHandler+0x514>
 8005b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d008      	beq.n	8005ba8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f993 	bl	8005ec2 <UART_EndTransmit_IT>
    return;
 8005b9c:	e004      	b.n	8005ba8 <HAL_UART_IRQHandler+0x514>
    return;
 8005b9e:	bf00      	nop
 8005ba0:	e002      	b.n	8005ba8 <HAL_UART_IRQHandler+0x514>
      return;
 8005ba2:	bf00      	nop
 8005ba4:	e000      	b.n	8005ba8 <HAL_UART_IRQHandler+0x514>
      return;
 8005ba6:	bf00      	nop
  }
}
 8005ba8:	37e8      	adds	r7, #232	; 0xe8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop

08005bb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	460b      	mov	r3, r1
 8005bce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b090      	sub	sp, #64	; 0x40
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bec:	e050      	b.n	8005c90 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf4:	d04c      	beq.n	8005c90 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d007      	beq.n	8005c0c <UART_WaitOnFlagUntilTimeout+0x30>
 8005bfc:	f7fc ff82 	bl	8002b04 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d241      	bcs.n	8005c90 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	330c      	adds	r3, #12
 8005c12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	e853 3f00 	ldrex	r3, [r3]
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	330c      	adds	r3, #12
 8005c2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c2c:	637a      	str	r2, [r7, #52]	; 0x34
 8005c2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e5      	bne.n	8005c0c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3314      	adds	r3, #20
 8005c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f023 0301 	bic.w	r3, r3, #1
 8005c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3314      	adds	r3, #20
 8005c5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c60:	623a      	str	r2, [r7, #32]
 8005c62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	69f9      	ldr	r1, [r7, #28]
 8005c66:	6a3a      	ldr	r2, [r7, #32]
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e5      	bne.n	8005c40 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e00f      	b.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4013      	ands	r3, r2
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	bf0c      	ite	eq
 8005ca0:	2301      	moveq	r3, #1
 8005ca2:	2300      	movne	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	79fb      	ldrb	r3, [r7, #7]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d09f      	beq.n	8005bee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3740      	adds	r7, #64	; 0x40
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	88fa      	ldrh	r2, [r7, #6]
 8005cd0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	88fa      	ldrh	r2, [r7, #6]
 8005cd6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2222      	movs	r2, #34	; 0x22
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d007      	beq.n	8005d06 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d04:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695a      	ldr	r2, [r3, #20]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f042 0201 	orr.w	r2, r2, #1
 8005d14:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f042 0220 	orr.w	r2, r2, #32
 8005d24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b095      	sub	sp, #84	; 0x54
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	330c      	adds	r3, #12
 8005d42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d46:	e853 3f00 	ldrex	r3, [r3]
 8005d4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	330c      	adds	r3, #12
 8005d5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d5c:	643a      	str	r2, [r7, #64]	; 0x40
 8005d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e5      	bne.n	8005d3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3314      	adds	r3, #20
 8005d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	e853 3f00 	ldrex	r3, [r3]
 8005d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f023 0301 	bic.w	r3, r3, #1
 8005d86:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3314      	adds	r3, #20
 8005d8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d98:	e841 2300 	strex	r3, r2, [r1]
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e5      	bne.n	8005d70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d119      	bne.n	8005de0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	330c      	adds	r3, #12
 8005db2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	f023 0310 	bic.w	r3, r3, #16
 8005dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	330c      	adds	r3, #12
 8005dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dcc:	61ba      	str	r2, [r7, #24]
 8005dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6979      	ldr	r1, [r7, #20]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e5      	bne.n	8005dac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005dee:	bf00      	nop
 8005df0:	3754      	adds	r7, #84	; 0x54
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7fc f9d1 	bl	80021bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e1a:	bf00      	nop
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b21      	cmp	r3, #33	; 0x21
 8005e34:	d13e      	bne.n	8005eb4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e3e:	d114      	bne.n	8005e6a <UART_Transmit_IT+0x48>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d110      	bne.n	8005e6a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	461a      	mov	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e5c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	1c9a      	adds	r2, r3, #2
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	621a      	str	r2, [r3, #32]
 8005e68:	e008      	b.n	8005e7c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	1c59      	adds	r1, r3, #1
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	6211      	str	r1, [r2, #32]
 8005e74:	781a      	ldrb	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	4619      	mov	r1, r3
 8005e8a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10f      	bne.n	8005eb0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e9e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e000      	b.n	8005eb6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005eb4:	2302      	movs	r3, #2
  }
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff fe64 	bl	8005bb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b08c      	sub	sp, #48	; 0x30
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b22      	cmp	r3, #34	; 0x22
 8005f04:	f040 80ab 	bne.w	800605e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f10:	d117      	bne.n	8005f42 <UART_Receive_IT+0x50>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d113      	bne.n	8005f42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3a:	1c9a      	adds	r2, r3, #2
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	629a      	str	r2, [r3, #40]	; 0x28
 8005f40:	e026      	b.n	8005f90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f54:	d007      	beq.n	8005f66 <UART_Receive_IT+0x74>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10a      	bne.n	8005f74 <UART_Receive_IT+0x82>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	701a      	strb	r2, [r3, #0]
 8005f72:	e008      	b.n	8005f86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d15a      	bne.n	800605a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0220 	bic.w	r2, r2, #32
 8005fb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	695a      	ldr	r2, [r3, #20]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0201 	bic.w	r2, r2, #1
 8005fd2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d135      	bne.n	8006050 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f023 0310 	bic.w	r3, r3, #16
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	330c      	adds	r3, #12
 8006008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800600a:	623a      	str	r2, [r7, #32]
 800600c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	69f9      	ldr	r1, [r7, #28]
 8006010:	6a3a      	ldr	r2, [r7, #32]
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	61bb      	str	r3, [r7, #24]
   return(result);
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e5      	bne.n	8005fea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b10      	cmp	r3, #16
 800602a:	d10a      	bne.n	8006042 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7ff fdbb 	bl	8005bc4 <HAL_UARTEx_RxEventCallback>
 800604e:	e002      	b.n	8006056 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7fc f911 	bl	8002278 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	e002      	b.n	8006060 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	e000      	b.n	8006060 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800605e:	2302      	movs	r3, #2
  }
}
 8006060:	4618      	mov	r0, r3
 8006062:	3730      	adds	r7, #48	; 0x30
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800606c:	b0c0      	sub	sp, #256	; 0x100
 800606e:	af00      	add	r7, sp, #0
 8006070:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006084:	68d9      	ldr	r1, [r3, #12]
 8006086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	ea40 0301 	orr.w	r3, r0, r1
 8006090:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	431a      	orrs	r2, r3
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060c0:	f021 010c 	bic.w	r1, r1, #12
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060ce:	430b      	orrs	r3, r1
 80060d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e2:	6999      	ldr	r1, [r3, #24]
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	ea40 0301 	orr.w	r3, r0, r1
 80060ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	4b8f      	ldr	r3, [pc, #572]	; (8006334 <UART_SetConfig+0x2cc>)
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d005      	beq.n	8006108 <UART_SetConfig+0xa0>
 80060fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	4b8d      	ldr	r3, [pc, #564]	; (8006338 <UART_SetConfig+0x2d0>)
 8006104:	429a      	cmp	r2, r3
 8006106:	d104      	bne.n	8006112 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006108:	f7fd fde2 	bl	8003cd0 <HAL_RCC_GetPCLK2Freq>
 800610c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006110:	e003      	b.n	800611a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006112:	f7fd fdc9 	bl	8003ca8 <HAL_RCC_GetPCLK1Freq>
 8006116:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800611a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006124:	f040 810c 	bne.w	8006340 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800612c:	2200      	movs	r2, #0
 800612e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006132:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006136:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800613a:	4622      	mov	r2, r4
 800613c:	462b      	mov	r3, r5
 800613e:	1891      	adds	r1, r2, r2
 8006140:	65b9      	str	r1, [r7, #88]	; 0x58
 8006142:	415b      	adcs	r3, r3
 8006144:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006146:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800614a:	4621      	mov	r1, r4
 800614c:	eb12 0801 	adds.w	r8, r2, r1
 8006150:	4629      	mov	r1, r5
 8006152:	eb43 0901 	adc.w	r9, r3, r1
 8006156:	f04f 0200 	mov.w	r2, #0
 800615a:	f04f 0300 	mov.w	r3, #0
 800615e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800616a:	4690      	mov	r8, r2
 800616c:	4699      	mov	r9, r3
 800616e:	4623      	mov	r3, r4
 8006170:	eb18 0303 	adds.w	r3, r8, r3
 8006174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006178:	462b      	mov	r3, r5
 800617a:	eb49 0303 	adc.w	r3, r9, r3
 800617e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800618e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006192:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006196:	460b      	mov	r3, r1
 8006198:	18db      	adds	r3, r3, r3
 800619a:	653b      	str	r3, [r7, #80]	; 0x50
 800619c:	4613      	mov	r3, r2
 800619e:	eb42 0303 	adc.w	r3, r2, r3
 80061a2:	657b      	str	r3, [r7, #84]	; 0x54
 80061a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80061a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80061ac:	f7fa f880 	bl	80002b0 <__aeabi_uldivmod>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4b61      	ldr	r3, [pc, #388]	; (800633c <UART_SetConfig+0x2d4>)
 80061b6:	fba3 2302 	umull	r2, r3, r3, r2
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	011c      	lsls	r4, r3, #4
 80061be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061c2:	2200      	movs	r2, #0
 80061c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80061d0:	4642      	mov	r2, r8
 80061d2:	464b      	mov	r3, r9
 80061d4:	1891      	adds	r1, r2, r2
 80061d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80061d8:	415b      	adcs	r3, r3
 80061da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061e0:	4641      	mov	r1, r8
 80061e2:	eb12 0a01 	adds.w	sl, r2, r1
 80061e6:	4649      	mov	r1, r9
 80061e8:	eb43 0b01 	adc.w	fp, r3, r1
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006200:	4692      	mov	sl, r2
 8006202:	469b      	mov	fp, r3
 8006204:	4643      	mov	r3, r8
 8006206:	eb1a 0303 	adds.w	r3, sl, r3
 800620a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800620e:	464b      	mov	r3, r9
 8006210:	eb4b 0303 	adc.w	r3, fp, r3
 8006214:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006224:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006228:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800622c:	460b      	mov	r3, r1
 800622e:	18db      	adds	r3, r3, r3
 8006230:	643b      	str	r3, [r7, #64]	; 0x40
 8006232:	4613      	mov	r3, r2
 8006234:	eb42 0303 	adc.w	r3, r2, r3
 8006238:	647b      	str	r3, [r7, #68]	; 0x44
 800623a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800623e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006242:	f7fa f835 	bl	80002b0 <__aeabi_uldivmod>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4611      	mov	r1, r2
 800624c:	4b3b      	ldr	r3, [pc, #236]	; (800633c <UART_SetConfig+0x2d4>)
 800624e:	fba3 2301 	umull	r2, r3, r3, r1
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	2264      	movs	r2, #100	; 0x64
 8006256:	fb02 f303 	mul.w	r3, r2, r3
 800625a:	1acb      	subs	r3, r1, r3
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006262:	4b36      	ldr	r3, [pc, #216]	; (800633c <UART_SetConfig+0x2d4>)
 8006264:	fba3 2302 	umull	r2, r3, r3, r2
 8006268:	095b      	lsrs	r3, r3, #5
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006270:	441c      	add	r4, r3
 8006272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006276:	2200      	movs	r2, #0
 8006278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800627c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006280:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006284:	4642      	mov	r2, r8
 8006286:	464b      	mov	r3, r9
 8006288:	1891      	adds	r1, r2, r2
 800628a:	63b9      	str	r1, [r7, #56]	; 0x38
 800628c:	415b      	adcs	r3, r3
 800628e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006294:	4641      	mov	r1, r8
 8006296:	1851      	adds	r1, r2, r1
 8006298:	6339      	str	r1, [r7, #48]	; 0x30
 800629a:	4649      	mov	r1, r9
 800629c:	414b      	adcs	r3, r1
 800629e:	637b      	str	r3, [r7, #52]	; 0x34
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80062ac:	4659      	mov	r1, fp
 80062ae:	00cb      	lsls	r3, r1, #3
 80062b0:	4651      	mov	r1, sl
 80062b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062b6:	4651      	mov	r1, sl
 80062b8:	00ca      	lsls	r2, r1, #3
 80062ba:	4610      	mov	r0, r2
 80062bc:	4619      	mov	r1, r3
 80062be:	4603      	mov	r3, r0
 80062c0:	4642      	mov	r2, r8
 80062c2:	189b      	adds	r3, r3, r2
 80062c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062c8:	464b      	mov	r3, r9
 80062ca:	460a      	mov	r2, r1
 80062cc:	eb42 0303 	adc.w	r3, r2, r3
 80062d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062e8:	460b      	mov	r3, r1
 80062ea:	18db      	adds	r3, r3, r3
 80062ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ee:	4613      	mov	r3, r2
 80062f0:	eb42 0303 	adc.w	r3, r2, r3
 80062f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062fe:	f7f9 ffd7 	bl	80002b0 <__aeabi_uldivmod>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	4b0d      	ldr	r3, [pc, #52]	; (800633c <UART_SetConfig+0x2d4>)
 8006308:	fba3 1302 	umull	r1, r3, r3, r2
 800630c:	095b      	lsrs	r3, r3, #5
 800630e:	2164      	movs	r1, #100	; 0x64
 8006310:	fb01 f303 	mul.w	r3, r1, r3
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	3332      	adds	r3, #50	; 0x32
 800631a:	4a08      	ldr	r2, [pc, #32]	; (800633c <UART_SetConfig+0x2d4>)
 800631c:	fba2 2303 	umull	r2, r3, r2, r3
 8006320:	095b      	lsrs	r3, r3, #5
 8006322:	f003 0207 	and.w	r2, r3, #7
 8006326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4422      	add	r2, r4
 800632e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006330:	e106      	b.n	8006540 <UART_SetConfig+0x4d8>
 8006332:	bf00      	nop
 8006334:	40011000 	.word	0x40011000
 8006338:	40011400 	.word	0x40011400
 800633c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006344:	2200      	movs	r2, #0
 8006346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800634a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800634e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006352:	4642      	mov	r2, r8
 8006354:	464b      	mov	r3, r9
 8006356:	1891      	adds	r1, r2, r2
 8006358:	6239      	str	r1, [r7, #32]
 800635a:	415b      	adcs	r3, r3
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
 800635e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006362:	4641      	mov	r1, r8
 8006364:	1854      	adds	r4, r2, r1
 8006366:	4649      	mov	r1, r9
 8006368:	eb43 0501 	adc.w	r5, r3, r1
 800636c:	f04f 0200 	mov.w	r2, #0
 8006370:	f04f 0300 	mov.w	r3, #0
 8006374:	00eb      	lsls	r3, r5, #3
 8006376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800637a:	00e2      	lsls	r2, r4, #3
 800637c:	4614      	mov	r4, r2
 800637e:	461d      	mov	r5, r3
 8006380:	4643      	mov	r3, r8
 8006382:	18e3      	adds	r3, r4, r3
 8006384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006388:	464b      	mov	r3, r9
 800638a:	eb45 0303 	adc.w	r3, r5, r3
 800638e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800639e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063a2:	f04f 0200 	mov.w	r2, #0
 80063a6:	f04f 0300 	mov.w	r3, #0
 80063aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80063ae:	4629      	mov	r1, r5
 80063b0:	008b      	lsls	r3, r1, #2
 80063b2:	4621      	mov	r1, r4
 80063b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063b8:	4621      	mov	r1, r4
 80063ba:	008a      	lsls	r2, r1, #2
 80063bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80063c0:	f7f9 ff76 	bl	80002b0 <__aeabi_uldivmod>
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4b60      	ldr	r3, [pc, #384]	; (800654c <UART_SetConfig+0x4e4>)
 80063ca:	fba3 2302 	umull	r2, r3, r3, r2
 80063ce:	095b      	lsrs	r3, r3, #5
 80063d0:	011c      	lsls	r4, r3, #4
 80063d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063d6:	2200      	movs	r2, #0
 80063d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063e4:	4642      	mov	r2, r8
 80063e6:	464b      	mov	r3, r9
 80063e8:	1891      	adds	r1, r2, r2
 80063ea:	61b9      	str	r1, [r7, #24]
 80063ec:	415b      	adcs	r3, r3
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063f4:	4641      	mov	r1, r8
 80063f6:	1851      	adds	r1, r2, r1
 80063f8:	6139      	str	r1, [r7, #16]
 80063fa:	4649      	mov	r1, r9
 80063fc:	414b      	adcs	r3, r1
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800640c:	4659      	mov	r1, fp
 800640e:	00cb      	lsls	r3, r1, #3
 8006410:	4651      	mov	r1, sl
 8006412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006416:	4651      	mov	r1, sl
 8006418:	00ca      	lsls	r2, r1, #3
 800641a:	4610      	mov	r0, r2
 800641c:	4619      	mov	r1, r3
 800641e:	4603      	mov	r3, r0
 8006420:	4642      	mov	r2, r8
 8006422:	189b      	adds	r3, r3, r2
 8006424:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006428:	464b      	mov	r3, r9
 800642a:	460a      	mov	r2, r1
 800642c:	eb42 0303 	adc.w	r3, r2, r3
 8006430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	67bb      	str	r3, [r7, #120]	; 0x78
 800643e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800644c:	4649      	mov	r1, r9
 800644e:	008b      	lsls	r3, r1, #2
 8006450:	4641      	mov	r1, r8
 8006452:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006456:	4641      	mov	r1, r8
 8006458:	008a      	lsls	r2, r1, #2
 800645a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800645e:	f7f9 ff27 	bl	80002b0 <__aeabi_uldivmod>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4611      	mov	r1, r2
 8006468:	4b38      	ldr	r3, [pc, #224]	; (800654c <UART_SetConfig+0x4e4>)
 800646a:	fba3 2301 	umull	r2, r3, r3, r1
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	2264      	movs	r2, #100	; 0x64
 8006472:	fb02 f303 	mul.w	r3, r2, r3
 8006476:	1acb      	subs	r3, r1, r3
 8006478:	011b      	lsls	r3, r3, #4
 800647a:	3332      	adds	r3, #50	; 0x32
 800647c:	4a33      	ldr	r2, [pc, #204]	; (800654c <UART_SetConfig+0x4e4>)
 800647e:	fba2 2303 	umull	r2, r3, r2, r3
 8006482:	095b      	lsrs	r3, r3, #5
 8006484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006488:	441c      	add	r4, r3
 800648a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800648e:	2200      	movs	r2, #0
 8006490:	673b      	str	r3, [r7, #112]	; 0x70
 8006492:	677a      	str	r2, [r7, #116]	; 0x74
 8006494:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006498:	4642      	mov	r2, r8
 800649a:	464b      	mov	r3, r9
 800649c:	1891      	adds	r1, r2, r2
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	415b      	adcs	r3, r3
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064a8:	4641      	mov	r1, r8
 80064aa:	1851      	adds	r1, r2, r1
 80064ac:	6039      	str	r1, [r7, #0]
 80064ae:	4649      	mov	r1, r9
 80064b0:	414b      	adcs	r3, r1
 80064b2:	607b      	str	r3, [r7, #4]
 80064b4:	f04f 0200 	mov.w	r2, #0
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064c0:	4659      	mov	r1, fp
 80064c2:	00cb      	lsls	r3, r1, #3
 80064c4:	4651      	mov	r1, sl
 80064c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ca:	4651      	mov	r1, sl
 80064cc:	00ca      	lsls	r2, r1, #3
 80064ce:	4610      	mov	r0, r2
 80064d0:	4619      	mov	r1, r3
 80064d2:	4603      	mov	r3, r0
 80064d4:	4642      	mov	r2, r8
 80064d6:	189b      	adds	r3, r3, r2
 80064d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80064da:	464b      	mov	r3, r9
 80064dc:	460a      	mov	r2, r1
 80064de:	eb42 0303 	adc.w	r3, r2, r3
 80064e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	663b      	str	r3, [r7, #96]	; 0x60
 80064ee:	667a      	str	r2, [r7, #100]	; 0x64
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064fc:	4649      	mov	r1, r9
 80064fe:	008b      	lsls	r3, r1, #2
 8006500:	4641      	mov	r1, r8
 8006502:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006506:	4641      	mov	r1, r8
 8006508:	008a      	lsls	r2, r1, #2
 800650a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800650e:	f7f9 fecf 	bl	80002b0 <__aeabi_uldivmod>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4b0d      	ldr	r3, [pc, #52]	; (800654c <UART_SetConfig+0x4e4>)
 8006518:	fba3 1302 	umull	r1, r3, r3, r2
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	2164      	movs	r1, #100	; 0x64
 8006520:	fb01 f303 	mul.w	r3, r1, r3
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	011b      	lsls	r3, r3, #4
 8006528:	3332      	adds	r3, #50	; 0x32
 800652a:	4a08      	ldr	r2, [pc, #32]	; (800654c <UART_SetConfig+0x4e4>)
 800652c:	fba2 2303 	umull	r2, r3, r2, r3
 8006530:	095b      	lsrs	r3, r3, #5
 8006532:	f003 020f 	and.w	r2, r3, #15
 8006536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4422      	add	r2, r4
 800653e:	609a      	str	r2, [r3, #8]
}
 8006540:	bf00      	nop
 8006542:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006546:	46bd      	mov	sp, r7
 8006548:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800654c:	51eb851f 	.word	0x51eb851f

08006550 <HW_RESET>:


//No se puede quedar esperano en las funciones, hay que detectar a situaci�n y salir del bucle.
//pensar que solo entra cuando recibe datos, si no vuelve a entrar queda ah� eternamentes.
void HW_RESET(struct WIFI *a)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_RESET);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6818      	ldr	r0, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	889b      	ldrh	r3, [r3, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	4619      	mov	r1, r3
 8006564:	f7fc ff3c 	bl	80033e0 <HAL_GPIO_WritePin>
    ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8006568:	2115      	movs	r1, #21
 800656a:	480b      	ldr	r0, [pc, #44]	; (8006598 <HW_RESET+0x48>)
 800656c:	f7fa ffc0 	bl	80014f0 <ITM0_Write>
    HAL_Delay(2000);											//Tiempo de reset del módulo
 8006570:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006574:	f7fc fad2 	bl	8002b1c <HAL_Delay>
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
 8006578:	210e      	movs	r1, #14
 800657a:	4808      	ldr	r0, [pc, #32]	; (800659c <HW_RESET+0x4c>)
 800657c:	f7fa ffb8 	bl	80014f0 <ITM0_Write>
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	889b      	ldrh	r3, [r3, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	4619      	mov	r1, r3
 800658c:	f7fc ff28 	bl	80033e0 <HAL_GPIO_WritePin>
}
 8006590:	bf00      	nop
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	08010968 	.word	0x08010968
 800659c:	08010980 	.word	0x08010980

080065a0 <NOP>:
void NOP(struct WIFI *a)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <MUX>:
void MUX(struct WIFI *a)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2204      	movs	r2, #4
 8006630:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <IPDef>:
void IPDef(struct WIFI *a)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2205      	movs	r2, #5
 800665c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2206      	movs	r2, #6
 80066b4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2208      	movs	r2, #8
 80066e0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2209      	movs	r2, #9
 800670c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2207      	movs	r2, #7
 8006738:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <Inicializar>:
void Inicializar(struct WIFI *a)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
a->_overflowVector=512;			//Maximo tamaño del vector al procesar un +IPD
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068e6:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
	...

080068f8 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 80068f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068fa:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80068fe:	af06      	add	r7, sp, #24
 8006900:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006904:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006908:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 800690a:	2300      	movs	r3, #0
 800690c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8006910:	2300      	movs	r3, #0
 8006912:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006916:	2300      	movs	r3, #0
 8006918:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800691c:	2300      	movs	r3, #0
 800691e:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8006922:	2300      	movs	r3, #0
 8006924:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 8006928:	2320      	movs	r3, #32
 800692a:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 800692e:	2322      	movs	r3, #34	; 0x22
 8006930:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 8006934:	4b7c      	ldr	r3, [pc, #496]	; (8006b28 <AT_ESP8266_ND+0x230>)
 8006936:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 800693a:	4a7c      	ldr	r2, [pc, #496]	; (8006b2c <AT_ESP8266_ND+0x234>)
 800693c:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8006940:	6812      	ldr	r2, [r2, #0]
 8006942:	4611      	mov	r1, r2
 8006944:	8019      	strh	r1, [r3, #0]
 8006946:	3302      	adds	r3, #2
 8006948:	0c12      	lsrs	r2, r2, #16
 800694a:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 800694c:	f642 4322 	movw	r3, #11298	; 0x2c22
 8006950:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 8006954:	f640 230d 	movw	r3, #2573	; 0xa0d
 8006958:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 800695c:	2300      	movs	r3, #0
 800695e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8006962:	2300      	movs	r3, #0
 8006964:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 8006968:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800696c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2200      	movs	r2, #0
 8006974:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 8006978:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800697c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006986:	4618      	mov	r0, r3
 8006988:	f7f9 fc34 	bl	80001f4 <strlen>
 800698c:	4603      	mov	r3, r0
 800698e:	461a      	mov	r2, r3
 8006990:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006994:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 800699e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 80069ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f203 6394 	addw	r3, r3, #1684	; 0x694
 80069bc:	4618      	mov	r0, r3
 80069be:	f7f9 fc19 	bl	80001f4 <strlen>
 80069c2:	4603      	mov	r3, r0
 80069c4:	461a      	mov	r2, r3
 80069c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 80069d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2206      	movs	r2, #6
 80069e0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80069e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80069f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069f6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006a00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006a0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006a1c:	603b      	str	r3, [r7, #0]
 8006a1e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a22:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006a26:	6812      	ldr	r2, [r2, #0]
 8006a28:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006a2c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006a30:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006a34:	6809      	ldr	r1, [r1, #0]
 8006a36:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006a3a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006a3e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006a42:	6800      	ldr	r0, [r0, #0]
 8006a44:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006a48:	2300      	movs	r3, #0
 8006a4a:	9305      	str	r3, [sp, #20]
 8006a4c:	9004      	str	r0, [sp, #16]
 8006a4e:	9103      	str	r1, [sp, #12]
 8006a50:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006a54:	9102      	str	r1, [sp, #8]
 8006a56:	9201      	str	r2, [sp, #4]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	4633      	mov	r3, r6
 8006a5e:	4a34      	ldr	r2, [pc, #208]	; (8006b30 <AT_ESP8266_ND+0x238>)
 8006a60:	4629      	mov	r1, r5
 8006a62:	4620      	mov	r0, r4
 8006a64:	f007 fe9a 	bl	800e79c <FT_String_ND>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	f040 8140 	bne.w	8006cf0 <AT_ESP8266_ND+0x3f8>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006a70:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a74:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2206      	movs	r2, #6
 8006a7c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 8006a80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d150      	bne.n	8006b34 <AT_ESP8266_ND+0x23c>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATA);
 8006a92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006aa0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aa4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006aae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ab2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006abc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ac0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ad0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ad4:	6812      	ldr	r2, [r2, #0]
 8006ad6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ada:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ade:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ae2:	6809      	ldr	r1, [r1, #0]
 8006ae4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ae8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006aec:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006af0:	6800      	ldr	r0, [r0, #0]
 8006af2:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006af6:	2304      	movs	r3, #4
 8006af8:	9305      	str	r3, [sp, #20]
 8006afa:	9004      	str	r0, [sp, #16]
 8006afc:	9103      	str	r1, [sp, #12]
 8006afe:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b02:	9102      	str	r1, [sp, #8]
 8006b04:	9201      	str	r2, [sp, #4]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	4633      	mov	r3, r6
 8006b0c:	4a08      	ldr	r2, [pc, #32]	; (8006b30 <AT_ESP8266_ND+0x238>)
 8006b0e:	4629      	mov	r1, r5
 8006b10:	4620      	mov	r0, r4
 8006b12:	f007 fe43 	bl	800e79c <FT_String_ND>
 8006b16:	4602      	mov	r2, r0
 8006b18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 8006b26:	e04f      	b.n	8006bc8 <AT_ESP8266_ND+0x2d0>
 8006b28:	00222c22 	.word	0x00222c22
 8006b2c:	08010b68 	.word	0x08010b68
 8006b30:	08010990 	.word	0x08010990
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,TOKIPDDATASRVR);
 8006b34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006b42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006b50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006b5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006b6c:	603b      	str	r3, [r7, #0]
 8006b6e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b72:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b76:	6812      	ldr	r2, [r2, #0]
 8006b78:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b7c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b80:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b84:	6809      	ldr	r1, [r1, #0]
 8006b86:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006b8a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006b8e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006b92:	6800      	ldr	r0, [r0, #0]
 8006b94:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006b98:	2305      	movs	r3, #5
 8006b9a:	9305      	str	r3, [sp, #20]
 8006b9c:	9004      	str	r0, [sp, #16]
 8006b9e:	9103      	str	r1, [sp, #12]
 8006ba0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ba4:	9102      	str	r1, [sp, #8]
 8006ba6:	9201      	str	r2, [sp, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	4633      	mov	r3, r6
 8006bae:	4ad2      	ldr	r2, [pc, #840]	; (8006ef8 <AT_ESP8266_ND+0x600>)
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f007 fdf2 	bl	800e79c <FT_String_ND>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 8006bc8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bcc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d15a      	bne.n	8006c90 <AT_ESP8266_ND+0x398>
	 	{
	 		a->_estado_rcv_data=99;
 8006bda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2263      	movs	r2, #99	; 0x63
 8006be6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 8006bea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006bf8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bfc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006c06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8006c14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006c22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006c30:	2341      	movs	r3, #65	; 0x41
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	2300      	movs	r3, #0
 8006c36:	f008 f9a3 	bl	800ef80 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 8006c3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f503 7025 	add.w	r0, r3, #660	; 0x294
 8006c48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f603 0194 	addw	r1, r3, #2196	; 0x894
 8006c56:	2341      	movs	r3, #65	; 0x41
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	2205      	movs	r2, #5
 8006c5e:	f008 f98f 	bl	800ef80 <CopiaVector>

	 		a->_debug_rx_ok++;
 8006c62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 8006c80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 8006c90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006c9e:	2b05      	cmp	r3, #5
 8006ca0:	d126      	bne.n	8006cf0 <AT_ESP8266_ND+0x3f8>
	 	{
	 		a->_estado_rcv_data=55;
 8006ca2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ca6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2237      	movs	r2, #55	; 0x37
 8006cae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 8006cb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 8006cc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 8006ce0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ce4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 8006cf0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cf4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2204      	movs	r2, #4
 8006cfc:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006d00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006d0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006d1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006d2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006d38:	603b      	str	r3, [r7, #0]
 8006d3a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d3e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d42:	6812      	ldr	r2, [r2, #0]
 8006d44:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006d48:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d4c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d50:	6809      	ldr	r1, [r1, #0]
 8006d52:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006d56:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006d5a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006d5e:	6800      	ldr	r0, [r0, #0]
 8006d60:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006d64:	2300      	movs	r3, #0
 8006d66:	9305      	str	r3, [sp, #20]
 8006d68:	9004      	str	r0, [sp, #16]
 8006d6a:	9103      	str	r1, [sp, #12]
 8006d6c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d70:	9102      	str	r1, [sp, #8]
 8006d72:	9201      	str	r2, [sp, #4]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	4633      	mov	r3, r6
 8006d7a:	4a60      	ldr	r2, [pc, #384]	; (8006efc <AT_ESP8266_ND+0x604>)
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f007 fd0c 	bl	800e79c <FT_String_ND>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	f040 83b4 	bne.w	80074f4 <AT_ESP8266_ND+0xbfc>
	{

		AT_decode=at_ok;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 8006d92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2206      	movs	r2, #6
 8006d9e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Transmision ok
 8006da2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006da6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006db0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006db4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006dbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006dcc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006dda:	603b      	str	r3, [r7, #0]
 8006ddc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006de0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006de4:	6812      	ldr	r2, [r2, #0]
 8006de6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006dea:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006dee:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006df2:	6809      	ldr	r1, [r1, #0]
 8006df4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006df8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006dfc:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006e00:	6800      	ldr	r0, [r0, #0]
 8006e02:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006e06:	2300      	movs	r3, #0
 8006e08:	9305      	str	r3, [sp, #20]
 8006e0a:	9004      	str	r0, [sp, #16]
 8006e0c:	9103      	str	r1, [sp, #12]
 8006e0e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e12:	9102      	str	r1, [sp, #8]
 8006e14:	9201      	str	r2, [sp, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	4633      	mov	r3, r6
 8006e1c:	4a38      	ldr	r2, [pc, #224]	; (8006f00 <AT_ESP8266_ND+0x608>)
 8006e1e:	4629      	mov	r1, r5
 8006e20:	4620      	mov	r0, r4
 8006e22:	f007 fcbb 	bl	800e79c <FT_String_ND>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d113      	bne.n	8006e54 <AT_ESP8266_ND+0x55c>
			 {
			 AT_decode=at_tcp_enviado_ok;
 8006e2c:	2313      	movs	r3, #19
 8006e2e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8006e32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 8006e50:	f001 bae1 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 8006e54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2208      	movs	r2, #8
 8006e60:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8006e64:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e68:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006e72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006e80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006e8e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e92:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006e9c:	603b      	str	r3, [r7, #0]
 8006e9e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ea2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ea6:	6812      	ldr	r2, [r2, #0]
 8006ea8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006eac:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006eb0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006eb4:	6809      	ldr	r1, [r1, #0]
 8006eb6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006eba:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006ebe:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006ec2:	6800      	ldr	r0, [r0, #0]
 8006ec4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006ec8:	2300      	movs	r3, #0
 8006eca:	9305      	str	r3, [sp, #20]
 8006ecc:	9004      	str	r0, [sp, #16]
 8006ece:	9103      	str	r1, [sp, #12]
 8006ed0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ed4:	9102      	str	r1, [sp, #8]
 8006ed6:	9201      	str	r2, [sp, #4]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	4633      	mov	r3, r6
 8006ede:	4a09      	ldr	r2, [pc, #36]	; (8006f04 <AT_ESP8266_ND+0x60c>)
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f007 fc5a 	bl	800e79c <FT_String_ND>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d10c      	bne.n	8006f08 <AT_ESP8266_ND+0x610>
			{
			AT_decode=at_deconectar_ok;
 8006eee:	230d      	movs	r3, #13
 8006ef0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006ef4:	f001 ba8f 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
 8006ef8:	08010990 	.word	0x08010990
 8006efc:	08010998 	.word	0x08010998
 8006f00:	080109a0 	.word	0x080109a0
 8006f04:	080109a8 	.word	0x080109a8
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006f08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	220a      	movs	r2, #10
 8006f14:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8006f18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006f26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006f34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006f42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f50:	603b      	str	r3, [r7, #0]
 8006f52:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f56:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f5a:	6812      	ldr	r2, [r2, #0]
 8006f5c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f60:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f64:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f68:	6809      	ldr	r1, [r1, #0]
 8006f6a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f6e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8006f72:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8006f76:	6800      	ldr	r0, [r0, #0]
 8006f78:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9305      	str	r3, [sp, #20]
 8006f80:	9004      	str	r0, [sp, #16]
 8006f82:	9103      	str	r1, [sp, #12]
 8006f84:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f88:	9102      	str	r1, [sp, #8]
 8006f8a:	9201      	str	r2, [sp, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	4633      	mov	r3, r6
 8006f92:	4aaa      	ldr	r2, [pc, #680]	; (800723c <AT_ESP8266_ND+0x944>)
 8006f94:	4629      	mov	r1, r5
 8006f96:	4620      	mov	r0, r4
 8006f98:	f007 fc00 	bl	800e79c <FT_String_ND>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d104      	bne.n	8006fac <AT_ESP8266_ND+0x6b4>
			{
				AT_decode=at_cambiar_modo_ok;
 8006fa2:	231c      	movs	r3, #28
 8006fa4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006fa8:	f001 ba35 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 8006fac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	220f      	movs	r2, #15
 8006fb8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8006fbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8006fca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8006fd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fdc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8006fe6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ff4:	603b      	str	r3, [r7, #0]
 8006ff6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ffa:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006ffe:	6812      	ldr	r2, [r2, #0]
 8007000:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007004:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007008:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800700c:	6809      	ldr	r1, [r1, #0]
 800700e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007012:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007016:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800701a:	6800      	ldr	r0, [r0, #0]
 800701c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007020:	2300      	movs	r3, #0
 8007022:	9305      	str	r3, [sp, #20]
 8007024:	9004      	str	r0, [sp, #16]
 8007026:	9103      	str	r1, [sp, #12]
 8007028:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800702c:	9102      	str	r1, [sp, #8]
 800702e:	9201      	str	r2, [sp, #4]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	4633      	mov	r3, r6
 8007036:	4a82      	ldr	r2, [pc, #520]	; (8007240 <AT_ESP8266_ND+0x948>)
 8007038:	4629      	mov	r1, r5
 800703a:	4620      	mov	r0, r4
 800703c:	f007 fbae 	bl	800e79c <FT_String_ND>
 8007040:	4603      	mov	r3, r0
 8007042:	2b01      	cmp	r3, #1
 8007044:	d104      	bne.n	8007050 <AT_ESP8266_ND+0x758>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 8007046:	2317      	movs	r3, #23
 8007048:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800704c:	f001 b9e3 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 8007050:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007054:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2203      	movs	r2, #3
 800705c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8007060:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007064:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800706e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007072:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800707c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007080:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800708a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800708e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007098:	603b      	str	r3, [r7, #0]
 800709a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800709e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80070a2:	6812      	ldr	r2, [r2, #0]
 80070a4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80070a8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80070ac:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80070b0:	6809      	ldr	r1, [r1, #0]
 80070b2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80070b6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80070ba:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80070be:	6800      	ldr	r0, [r0, #0]
 80070c0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80070c4:	2300      	movs	r3, #0
 80070c6:	9305      	str	r3, [sp, #20]
 80070c8:	9004      	str	r0, [sp, #16]
 80070ca:	9103      	str	r1, [sp, #12]
 80070cc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80070d0:	9102      	str	r1, [sp, #8]
 80070d2:	9201      	str	r2, [sp, #4]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	4633      	mov	r3, r6
 80070da:	4a5a      	ldr	r2, [pc, #360]	; (8007244 <AT_ESP8266_ND+0x94c>)
 80070dc:	4629      	mov	r1, r5
 80070de:	4620      	mov	r0, r4
 80070e0:	f007 fb5c 	bl	800e79c <FT_String_ND>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d104      	bne.n	80070f4 <AT_ESP8266_ND+0x7fc>
			{
				AT_decode=at_tcp_ok_to_send;
 80070ea:	2314      	movs	r3, #20
 80070ec:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80070f0:	f001 b991 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 80070f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	220c      	movs	r2, #12
 8007100:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007104:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007108:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007112:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007116:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007120:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007124:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800712e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007132:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800713c:	603b      	str	r3, [r7, #0]
 800713e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007142:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007146:	6812      	ldr	r2, [r2, #0]
 8007148:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800714c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007150:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007154:	6809      	ldr	r1, [r1, #0]
 8007156:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800715a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800715e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007162:	6800      	ldr	r0, [r0, #0]
 8007164:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007168:	2300      	movs	r3, #0
 800716a:	9305      	str	r3, [sp, #20]
 800716c:	9004      	str	r0, [sp, #16]
 800716e:	9103      	str	r1, [sp, #12]
 8007170:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007174:	9102      	str	r1, [sp, #8]
 8007176:	9201      	str	r2, [sp, #4]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	4633      	mov	r3, r6
 800717e:	4a32      	ldr	r2, [pc, #200]	; (8007248 <AT_ESP8266_ND+0x950>)
 8007180:	4629      	mov	r1, r5
 8007182:	4620      	mov	r0, r4
 8007184:	f007 fb0a 	bl	800e79c <FT_String_ND>
 8007188:	4603      	mov	r3, r0
 800718a:	2b01      	cmp	r3, #1
 800718c:	d104      	bne.n	8007198 <AT_ESP8266_ND+0x8a0>
		{
			AT_decode=at_tcp_srvr_ok;
 800718e:	2315      	movs	r3, #21
 8007190:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007194:	f001 b93f 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007198:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800719c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	220b      	movs	r2, #11
 80071a4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80071a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80071b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80071c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80071d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80071e0:	603b      	str	r3, [r7, #0]
 80071e2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80071e6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80071ea:	6812      	ldr	r2, [r2, #0]
 80071ec:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80071f0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80071f4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80071f8:	6809      	ldr	r1, [r1, #0]
 80071fa:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80071fe:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007202:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007206:	6800      	ldr	r0, [r0, #0]
 8007208:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800720c:	2300      	movs	r3, #0
 800720e:	9305      	str	r3, [sp, #20]
 8007210:	9004      	str	r0, [sp, #16]
 8007212:	9103      	str	r1, [sp, #12]
 8007214:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007218:	9102      	str	r1, [sp, #8]
 800721a:	9201      	str	r2, [sp, #4]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	4633      	mov	r3, r6
 8007222:	4a0a      	ldr	r2, [pc, #40]	; (800724c <AT_ESP8266_ND+0x954>)
 8007224:	4629      	mov	r1, r5
 8007226:	4620      	mov	r0, r4
 8007228:	f007 fab8 	bl	800e79c <FT_String_ND>
 800722c:	4603      	mov	r3, r0
 800722e:	2b01      	cmp	r3, #1
 8007230:	d10e      	bne.n	8007250 <AT_ESP8266_ND+0x958>
			{
				AT_decode=at_tcp_closed_ok;
 8007232:	2309      	movs	r3, #9
 8007234:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007238:	f001 b8ed 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
 800723c:	080109b4 	.word	0x080109b4
 8007240:	080109c0 	.word	0x080109c0
 8007244:	080109d0 	.word	0x080109d0
 8007248:	080109d4 	.word	0x080109d4
 800724c:	080109e4 	.word	0x080109e4
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007250:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007254:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	220b      	movs	r2, #11
 800725c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007260:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007264:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800726e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007272:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800727c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007280:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800728a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800728e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007298:	603b      	str	r3, [r7, #0]
 800729a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800729e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80072a2:	6812      	ldr	r2, [r2, #0]
 80072a4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80072a8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80072ac:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80072b0:	6809      	ldr	r1, [r1, #0]
 80072b2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80072b6:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80072ba:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80072be:	6800      	ldr	r0, [r0, #0]
 80072c0:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80072c4:	2300      	movs	r3, #0
 80072c6:	9305      	str	r3, [sp, #20]
 80072c8:	9004      	str	r0, [sp, #16]
 80072ca:	9103      	str	r1, [sp, #12]
 80072cc:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80072d0:	9102      	str	r1, [sp, #8]
 80072d2:	9201      	str	r2, [sp, #4]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	4633      	mov	r3, r6
 80072da:	4a82      	ldr	r2, [pc, #520]	; (80074e4 <AT_ESP8266_ND+0xbec>)
 80072dc:	4629      	mov	r1, r5
 80072de:	4620      	mov	r0, r4
 80072e0:	f007 fa5c 	bl	800e79c <FT_String_ND>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d104      	bne.n	80072f4 <AT_ESP8266_ND+0x9fc>
			{
				AT_decode=at_multiple_conn_ok;
 80072ea:	2307      	movs	r3, #7
 80072ec:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80072f0:	f001 b891 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 80072f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	220b      	movs	r2, #11
 8007300:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007304:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007308:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007312:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007316:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007320:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007324:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800732e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007332:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800733c:	603b      	str	r3, [r7, #0]
 800733e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007342:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007346:	6812      	ldr	r2, [r2, #0]
 8007348:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800734c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007350:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007354:	6809      	ldr	r1, [r1, #0]
 8007356:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800735a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800735e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007362:	6800      	ldr	r0, [r0, #0]
 8007364:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007368:	2300      	movs	r3, #0
 800736a:	9305      	str	r3, [sp, #20]
 800736c:	9004      	str	r0, [sp, #16]
 800736e:	9103      	str	r1, [sp, #12]
 8007370:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007374:	9102      	str	r1, [sp, #8]
 8007376:	9201      	str	r2, [sp, #4]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	4633      	mov	r3, r6
 800737e:	4a5a      	ldr	r2, [pc, #360]	; (80074e8 <AT_ESP8266_ND+0xbf0>)
 8007380:	4629      	mov	r1, r5
 8007382:	4620      	mov	r0, r4
 8007384:	f007 fa0a 	bl	800e79c <FT_String_ND>
 8007388:	4603      	mov	r3, r0
 800738a:	2b01      	cmp	r3, #1
 800738c:	d104      	bne.n	8007398 <AT_ESP8266_ND+0xaa0>
			{
				AT_decode=at_no_multiple_conn_ok;
 800738e:	2308      	movs	r3, #8
 8007390:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007394:	f001 b83f 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 8007398:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800739c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	220a      	movs	r2, #10
 80073a4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80073a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80073b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80073c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80073d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80073e0:	603b      	str	r3, [r7, #0]
 80073e2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073e6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80073ea:	6812      	ldr	r2, [r2, #0]
 80073ec:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80073f0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80073f4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80073f8:	6809      	ldr	r1, [r1, #0]
 80073fa:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80073fe:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007402:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007406:	6800      	ldr	r0, [r0, #0]
 8007408:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800740c:	2300      	movs	r3, #0
 800740e:	9305      	str	r3, [sp, #20]
 8007410:	9004      	str	r0, [sp, #16]
 8007412:	9103      	str	r1, [sp, #12]
 8007414:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007418:	9102      	str	r1, [sp, #8]
 800741a:	9201      	str	r2, [sp, #4]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	4633      	mov	r3, r6
 8007422:	4a32      	ldr	r2, [pc, #200]	; (80074ec <AT_ESP8266_ND+0xbf4>)
 8007424:	4629      	mov	r1, r5
 8007426:	4620      	mov	r0, r4
 8007428:	f007 f9b8 	bl	800e79c <FT_String_ND>
 800742c:	4603      	mov	r3, r0
 800742e:	2b01      	cmp	r3, #1
 8007430:	d104      	bne.n	800743c <AT_ESP8266_ND+0xb44>
			{
				AT_decode=at_def_ip_ok;
 8007432:	231b      	movs	r3, #27
 8007434:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007438:	f000 bfed 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 800743c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007440:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2207      	movs	r2, #7
 8007448:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 800744c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007450:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800745a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800745e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007468:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800746c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007476:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800747a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007484:	603b      	str	r3, [r7, #0]
 8007486:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800748a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800748e:	6812      	ldr	r2, [r2, #0]
 8007490:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007494:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007498:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800749c:	6809      	ldr	r1, [r1, #0]
 800749e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80074a2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80074a6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80074aa:	6800      	ldr	r0, [r0, #0]
 80074ac:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80074b0:	2300      	movs	r3, #0
 80074b2:	9305      	str	r3, [sp, #20]
 80074b4:	9004      	str	r0, [sp, #16]
 80074b6:	9103      	str	r1, [sp, #12]
 80074b8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80074bc:	9102      	str	r1, [sp, #8]
 80074be:	9201      	str	r2, [sp, #4]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	4633      	mov	r3, r6
 80074c6:	4a0a      	ldr	r2, [pc, #40]	; (80074f0 <AT_ESP8266_ND+0xbf8>)
 80074c8:	4629      	mov	r1, r5
 80074ca:	4620      	mov	r0, r4
 80074cc:	f007 f966 	bl	800e79c <FT_String_ND>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	f040 879f 	bne.w	8008416 <AT_ESP8266_ND+0x1b1e>
			{
			AT_decode=at_tcp_conectado;
 80074d8:	230f      	movs	r3, #15
 80074da:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80074de:	f000 bf9a 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
 80074e2:	bf00      	nop
 80074e4:	080109f0 	.word	0x080109f0
 80074e8:	080109fc 	.word	0x080109fc
 80074ec:	08010a08 	.word	0x08010a08
 80074f0:	08010a14 	.word	0x08010a14
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 80074f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2207      	movs	r2, #7
 8007500:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007504:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007508:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007512:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007516:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007520:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007524:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800752e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007532:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800753c:	603b      	str	r3, [r7, #0]
 800753e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007542:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007546:	6812      	ldr	r2, [r2, #0]
 8007548:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800754c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007550:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007554:	6809      	ldr	r1, [r1, #0]
 8007556:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800755a:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800755e:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007562:	6800      	ldr	r0, [r0, #0]
 8007564:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007568:	2300      	movs	r3, #0
 800756a:	9305      	str	r3, [sp, #20]
 800756c:	9004      	str	r0, [sp, #16]
 800756e:	9103      	str	r1, [sp, #12]
 8007570:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007574:	9102      	str	r1, [sp, #8]
 8007576:	9201      	str	r2, [sp, #4]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	4633      	mov	r3, r6
 800757e:	4aaa      	ldr	r2, [pc, #680]	; (8007828 <AT_ESP8266_ND+0xf30>)
 8007580:	4629      	mov	r1, r5
 8007582:	4620      	mov	r0, r4
 8007584:	f007 f90a 	bl	800e79c <FT_String_ND>
 8007588:	4603      	mov	r3, r0
 800758a:	2b01      	cmp	r3, #1
 800758c:	f040 839d 	bne.w	8007cca <AT_ESP8266_ND+0x13d2>
		{
				AT_decode=at_error;
 8007590:	2302      	movs	r3, #2
 8007592:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 8007596:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800759a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2208      	movs	r2, #8
 80075a2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Intentando conectar con servidor TCP caido
 80075a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80075b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80075c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80075d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80075de:	603b      	str	r3, [r7, #0]
 80075e0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80075e4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80075e8:	6812      	ldr	r2, [r2, #0]
 80075ea:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80075ee:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80075f2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80075f6:	6809      	ldr	r1, [r1, #0]
 80075f8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80075fc:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007600:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007604:	6800      	ldr	r0, [r0, #0]
 8007606:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 800760a:	2300      	movs	r3, #0
 800760c:	9305      	str	r3, [sp, #20]
 800760e:	9004      	str	r0, [sp, #16]
 8007610:	9103      	str	r1, [sp, #12]
 8007612:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007616:	9102      	str	r1, [sp, #8]
 8007618:	9201      	str	r2, [sp, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	4633      	mov	r3, r6
 8007620:	4a82      	ldr	r2, [pc, #520]	; (800782c <AT_ESP8266_ND+0xf34>)
 8007622:	4629      	mov	r1, r5
 8007624:	4620      	mov	r0, r4
 8007626:	f007 f8b9 	bl	800e79c <FT_String_ND>
 800762a:	4603      	mov	r3, r0
 800762c:	2b01      	cmp	r3, #1
 800762e:	d104      	bne.n	800763a <AT_ESP8266_ND+0xd42>
				{
						AT_decode=at_tcp_conn_err;
 8007630:	2306      	movs	r3, #6
 8007632:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007636:	f000 beee 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 800763a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800763e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2215      	movs	r2, #21
 8007646:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 800764a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800764e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007658:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800765c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007666:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800766a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007674:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007678:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007682:	603b      	str	r3, [r7, #0]
 8007684:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007688:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800768c:	6812      	ldr	r2, [r2, #0]
 800768e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007692:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007696:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800769a:	6809      	ldr	r1, [r1, #0]
 800769c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80076a0:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80076a4:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80076a8:	6800      	ldr	r0, [r0, #0]
 80076aa:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80076ae:	2300      	movs	r3, #0
 80076b0:	9305      	str	r3, [sp, #20]
 80076b2:	9004      	str	r0, [sp, #16]
 80076b4:	9103      	str	r1, [sp, #12]
 80076b6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076ba:	9102      	str	r1, [sp, #8]
 80076bc:	9201      	str	r2, [sp, #4]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	4633      	mov	r3, r6
 80076c4:	4a5a      	ldr	r2, [pc, #360]	; (8007830 <AT_ESP8266_ND+0xf38>)
 80076c6:	4629      	mov	r1, r5
 80076c8:	4620      	mov	r0, r4
 80076ca:	f007 f867 	bl	800e79c <FT_String_ND>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d104      	bne.n	80076de <AT_ESP8266_ND+0xde6>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 80076d4:	230e      	movs	r3, #14
 80076d6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80076da:	f000 be9c 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 80076de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	220c      	movs	r2, #12
 80076ea:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 80076ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80076fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007700:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800770a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800770e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007718:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800771c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007726:	603b      	str	r3, [r7, #0]
 8007728:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800772c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007730:	6812      	ldr	r2, [r2, #0]
 8007732:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007736:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800773a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800773e:	6809      	ldr	r1, [r1, #0]
 8007740:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007744:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007748:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800774c:	6800      	ldr	r0, [r0, #0]
 800774e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007752:	2300      	movs	r3, #0
 8007754:	9305      	str	r3, [sp, #20]
 8007756:	9004      	str	r0, [sp, #16]
 8007758:	9103      	str	r1, [sp, #12]
 800775a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800775e:	9102      	str	r1, [sp, #8]
 8007760:	9201      	str	r2, [sp, #4]
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	4633      	mov	r3, r6
 8007768:	4a32      	ldr	r2, [pc, #200]	; (8007834 <AT_ESP8266_ND+0xf3c>)
 800776a:	4629      	mov	r1, r5
 800776c:	4620      	mov	r0, r4
 800776e:	f007 f815 	bl	800e79c <FT_String_ND>
 8007772:	4603      	mov	r3, r0
 8007774:	2b01      	cmp	r3, #1
 8007776:	d104      	bne.n	8007782 <AT_ESP8266_ND+0xe8a>
				{
					AT_decode=at_tcp_srvr_err;
 8007778:	2316      	movs	r3, #22
 800777a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800777e:	f000 be4a 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 8007782:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007786:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	220b      	movs	r2, #11
 800778e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 8007792:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007796:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80077a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80077ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80077bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80077d0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80077d4:	6812      	ldr	r2, [r2, #0]
 80077d6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80077da:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80077de:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80077e2:	6809      	ldr	r1, [r1, #0]
 80077e4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80077e8:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80077ec:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80077f0:	6800      	ldr	r0, [r0, #0]
 80077f2:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80077f6:	2300      	movs	r3, #0
 80077f8:	9305      	str	r3, [sp, #20]
 80077fa:	9004      	str	r0, [sp, #16]
 80077fc:	9103      	str	r1, [sp, #12]
 80077fe:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007802:	9102      	str	r1, [sp, #8]
 8007804:	9201      	str	r2, [sp, #4]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	4633      	mov	r3, r6
 800780c:	4a0a      	ldr	r2, [pc, #40]	; (8007838 <AT_ESP8266_ND+0xf40>)
 800780e:	4629      	mov	r1, r5
 8007810:	4620      	mov	r0, r4
 8007812:	f006 ffc3 	bl	800e79c <FT_String_ND>
 8007816:	4603      	mov	r3, r0
 8007818:	2b01      	cmp	r3, #1
 800781a:	d10f      	bne.n	800783c <AT_ESP8266_ND+0xf44>
					{
						AT_decode=at_tcp_close_err;
 800781c:	231a      	movs	r3, #26
 800781e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007822:	f000 bdf8 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
 8007826:	bf00      	nop
 8007828:	08010a1c 	.word	0x08010a1c
 800782c:	08010a24 	.word	0x08010a24
 8007830:	08010a30 	.word	0x08010a30
 8007834:	080109d4 	.word	0x080109d4
 8007838:	080109e4 	.word	0x080109e4
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 800783c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007840:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2211      	movs	r2, #17
 8007848:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 800784c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007850:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800785a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800785e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007868:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800786c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007876:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800787a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007884:	603b      	str	r3, [r7, #0]
 8007886:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800788a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800788e:	6812      	ldr	r2, [r2, #0]
 8007890:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007894:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007898:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800789c:	6809      	ldr	r1, [r1, #0]
 800789e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80078a2:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80078a6:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80078aa:	6800      	ldr	r0, [r0, #0]
 80078ac:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80078b0:	2300      	movs	r3, #0
 80078b2:	9305      	str	r3, [sp, #20]
 80078b4:	9004      	str	r0, [sp, #16]
 80078b6:	9103      	str	r1, [sp, #12]
 80078b8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078bc:	9102      	str	r1, [sp, #8]
 80078be:	9201      	str	r2, [sp, #4]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	4633      	mov	r3, r6
 80078c6:	4aaa      	ldr	r2, [pc, #680]	; (8007b70 <AT_ESP8266_ND+0x1278>)
 80078c8:	4629      	mov	r1, r5
 80078ca:	4620      	mov	r0, r4
 80078cc:	f006 ff66 	bl	800e79c <FT_String_ND>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d104      	bne.n	80078e0 <AT_ESP8266_ND+0xfe8>
					{
						AT_decode=at_tcp_snd_err;
 80078d6:	2311      	movs	r3, #17
 80078d8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80078dc:	f000 bd9b 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 80078e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	220a      	movs	r2, #10
 80078ec:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Error desconectar TCP ya desconectado
 80078f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80078fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007902:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800790c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007910:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 800791a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800791e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007928:	603b      	str	r3, [r7, #0]
 800792a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800792e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007932:	6812      	ldr	r2, [r2, #0]
 8007934:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007938:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800793c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007940:	6809      	ldr	r1, [r1, #0]
 8007942:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007946:	f507 7014 	add.w	r0, r7, #592	; 0x250
 800794a:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800794e:	6800      	ldr	r0, [r0, #0]
 8007950:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007954:	2300      	movs	r3, #0
 8007956:	9305      	str	r3, [sp, #20]
 8007958:	9004      	str	r0, [sp, #16]
 800795a:	9103      	str	r1, [sp, #12]
 800795c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007960:	9102      	str	r1, [sp, #8]
 8007962:	9201      	str	r2, [sp, #4]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	4633      	mov	r3, r6
 800796a:	4a82      	ldr	r2, [pc, #520]	; (8007b74 <AT_ESP8266_ND+0x127c>)
 800796c:	4629      	mov	r1, r5
 800796e:	4620      	mov	r0, r4
 8007970:	f006 ff14 	bl	800e79c <FT_String_ND>
 8007974:	4603      	mov	r3, r0
 8007976:	2b01      	cmp	r3, #1
 8007978:	d104      	bne.n	8007984 <AT_ESP8266_ND+0x108c>
					{
						AT_decode=at_cambiar_modo_err;
 800797a:	231d      	movs	r3, #29
 800797c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007980:	f000 bd49 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007984:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007988:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	220b      	movs	r2, #11
 8007990:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007994:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007998:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80079a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80079b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80079be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80079cc:	603b      	str	r3, [r7, #0]
 80079ce:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80079d2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80079d6:	6812      	ldr	r2, [r2, #0]
 80079d8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80079dc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80079e0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80079e4:	6809      	ldr	r1, [r1, #0]
 80079e6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80079ea:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80079ee:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80079f2:	6800      	ldr	r0, [r0, #0]
 80079f4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80079f8:	2300      	movs	r3, #0
 80079fa:	9305      	str	r3, [sp, #20]
 80079fc:	9004      	str	r0, [sp, #16]
 80079fe:	9103      	str	r1, [sp, #12]
 8007a00:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a04:	9102      	str	r1, [sp, #8]
 8007a06:	9201      	str	r2, [sp, #4]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	4633      	mov	r3, r6
 8007a0e:	4a5a      	ldr	r2, [pc, #360]	; (8007b78 <AT_ESP8266_ND+0x1280>)
 8007a10:	4629      	mov	r1, r5
 8007a12:	4620      	mov	r0, r4
 8007a14:	f006 fec2 	bl	800e79c <FT_String_ND>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d104      	bne.n	8007a28 <AT_ESP8266_ND+0x1130>
					{
						AT_decode=at_multiple_conn_err;
 8007a1e:	231e      	movs	r3, #30
 8007a20:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007a24:	f000 bcf7 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 8007a28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	220b      	movs	r2, #11
 8007a34:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007a38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007a46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007a54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007a62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a70:	603b      	str	r3, [r7, #0]
 8007a72:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a76:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a7a:	6812      	ldr	r2, [r2, #0]
 8007a7c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007a80:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a84:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a88:	6809      	ldr	r1, [r1, #0]
 8007a8a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a8e:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007a92:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007a96:	6800      	ldr	r0, [r0, #0]
 8007a98:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	9305      	str	r3, [sp, #20]
 8007aa0:	9004      	str	r0, [sp, #16]
 8007aa2:	9103      	str	r1, [sp, #12]
 8007aa4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007aa8:	9102      	str	r1, [sp, #8]
 8007aaa:	9201      	str	r2, [sp, #4]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	4633      	mov	r3, r6
 8007ab2:	4a32      	ldr	r2, [pc, #200]	; (8007b7c <AT_ESP8266_ND+0x1284>)
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f006 fe70 	bl	800e79c <FT_String_ND>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d104      	bne.n	8007acc <AT_ESP8266_ND+0x11d4>
					{
						AT_decode=at_no_multiple_conn_err;
 8007ac2:	231f      	movs	r3, #31
 8007ac4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007ac8:	f000 bca5 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 8007acc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ad0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2208      	movs	r2, #8
 8007ad8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007adc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ae0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007aea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007af8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007afc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007b06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b14:	603b      	str	r3, [r7, #0]
 8007b16:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b1a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b1e:	6812      	ldr	r2, [r2, #0]
 8007b20:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b24:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b28:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b2c:	6809      	ldr	r1, [r1, #0]
 8007b2e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007b32:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007b36:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007b3a:	6800      	ldr	r0, [r0, #0]
 8007b3c:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007b40:	2300      	movs	r3, #0
 8007b42:	9305      	str	r3, [sp, #20]
 8007b44:	9004      	str	r0, [sp, #16]
 8007b46:	9103      	str	r1, [sp, #12]
 8007b48:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b4c:	9102      	str	r1, [sp, #8]
 8007b4e:	9201      	str	r2, [sp, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	4633      	mov	r3, r6
 8007b56:	4a0a      	ldr	r2, [pc, #40]	; (8007b80 <AT_ESP8266_ND+0x1288>)
 8007b58:	4629      	mov	r1, r5
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f006 fe1e 	bl	800e79c <FT_String_ND>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d10e      	bne.n	8007b84 <AT_ESP8266_ND+0x128c>
					{
						AT_decode=at_conn_wifi_err;
 8007b66:	2320      	movs	r3, #32
 8007b68:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007b6c:	f000 bc53 	b.w	8008416 <AT_ESP8266_ND+0x1b1e>
 8007b70:	08010a48 	.word	0x08010a48
 8007b74:	080109b4 	.word	0x080109b4
 8007b78:	080109f0 	.word	0x080109f0
 8007b7c:	080109fc 	.word	0x080109fc
 8007b80:	08010a5c 	.word	0x08010a5c
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 8007b84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	220a      	movs	r2, #10
 8007b90:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007b94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007ba2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ba6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007bb0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bb4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007bbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007bcc:	603b      	str	r3, [r7, #0]
 8007bce:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007bd2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007bd6:	6812      	ldr	r2, [r2, #0]
 8007bd8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007bdc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007be0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007be4:	6809      	ldr	r1, [r1, #0]
 8007be6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007bea:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007bee:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007bf2:	6800      	ldr	r0, [r0, #0]
 8007bf4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	9305      	str	r3, [sp, #20]
 8007bfc:	9004      	str	r0, [sp, #16]
 8007bfe:	9103      	str	r1, [sp, #12]
 8007c00:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007c04:	9102      	str	r1, [sp, #8]
 8007c06:	9201      	str	r2, [sp, #4]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	4633      	mov	r3, r6
 8007c0e:	4ab7      	ldr	r2, [pc, #732]	; (8007eec <AT_ESP8266_ND+0x15f4>)
 8007c10:	4629      	mov	r1, r5
 8007c12:	4620      	mov	r0, r4
 8007c14:	f006 fdc2 	bl	800e79c <FT_String_ND>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d103      	bne.n	8007c26 <AT_ESP8266_ND+0x132e>
					{
						AT_decode=at_def_ip_err;
 8007c1e:	2321      	movs	r3, #33	; 0x21
 8007c20:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007c24:	e3f7      	b.n	8008416 <AT_ESP8266_ND+0x1b1e>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 8007c26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2205      	movs	r2, #5
 8007c32:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)
 8007c36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007c44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007c52:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c56:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007c60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007c6e:	603b      	str	r3, [r7, #0]
 8007c70:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007c74:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007c78:	6812      	ldr	r2, [r2, #0]
 8007c7a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007c7e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007c82:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007c86:	6809      	ldr	r1, [r1, #0]
 8007c88:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007c8c:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007c90:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007c94:	6800      	ldr	r0, [r0, #0]
 8007c96:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	9305      	str	r3, [sp, #20]
 8007c9e:	9004      	str	r0, [sp, #16]
 8007ca0:	9103      	str	r1, [sp, #12]
 8007ca2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007ca6:	9102      	str	r1, [sp, #8]
 8007ca8:	9201      	str	r2, [sp, #4]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	4633      	mov	r3, r6
 8007cb0:	4a8f      	ldr	r2, [pc, #572]	; (8007ef0 <AT_ESP8266_ND+0x15f8>)
 8007cb2:	4629      	mov	r1, r5
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	f006 fd71 	bl	800e79c <FT_String_ND>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	f040 83aa 	bne.w	8008416 <AT_ESP8266_ND+0x1b1e>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 8007cc2:	2322      	movs	r3, #34	; 0x22
 8007cc4:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007cc8:	e3a5      	b.n	8008416 <AT_ESP8266_ND+0x1b1e>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 8007cca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	220f      	movs	r2, #15
 8007cd6:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 8007cda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007ce8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007cf6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007d04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007d18:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007d1c:	6812      	ldr	r2, [r2, #0]
 8007d1e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007d22:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007d26:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007d2a:	6809      	ldr	r1, [r1, #0]
 8007d2c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007d30:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007d34:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007d38:	6800      	ldr	r0, [r0, #0]
 8007d3a:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007d3e:	2300      	movs	r3, #0
 8007d40:	9305      	str	r3, [sp, #20]
 8007d42:	9004      	str	r0, [sp, #16]
 8007d44:	9103      	str	r1, [sp, #12]
 8007d46:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007d4a:	9102      	str	r1, [sp, #8]
 8007d4c:	9201      	str	r2, [sp, #4]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	4633      	mov	r3, r6
 8007d54:	4a67      	ldr	r2, [pc, #412]	; (8007ef4 <AT_ESP8266_ND+0x15fc>)
 8007d56:	4629      	mov	r1, r5
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f006 fd1f 	bl	800e79c <FT_String_ND>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d112      	bne.n	8007d8a <AT_ESP8266_ND+0x1492>
				{
					 AT_decode=at_wifi_disconnect;
 8007d64:	230a      	movs	r3, #10
 8007d66:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 8007d6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007d78:	1c5a      	adds	r2, r3, #1
 8007d7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 8007d88:	e345      	b.n	8008416 <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 8007d8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2209      	movs	r2, #9
 8007d96:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007d9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007da8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007db6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007dc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007dc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007dd8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ddc:	6812      	ldr	r2, [r2, #0]
 8007dde:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007de2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007de6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007dea:	6809      	ldr	r1, [r1, #0]
 8007dec:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007df0:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007df4:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007df8:	6800      	ldr	r0, [r0, #0]
 8007dfa:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007dfe:	2300      	movs	r3, #0
 8007e00:	9305      	str	r3, [sp, #20]
 8007e02:	9004      	str	r0, [sp, #16]
 8007e04:	9103      	str	r1, [sp, #12]
 8007e06:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007e0a:	9102      	str	r1, [sp, #8]
 8007e0c:	9201      	str	r2, [sp, #4]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	4633      	mov	r3, r6
 8007e14:	4a38      	ldr	r2, [pc, #224]	; (8007ef8 <AT_ESP8266_ND+0x1600>)
 8007e16:	4629      	mov	r1, r5
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f006 fcbf 	bl	800e79c <FT_String_ND>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d112      	bne.n	8007e4a <AT_ESP8266_ND+0x1552>
				{
					AT_decode=at_tcp_client_desc;
 8007e24:	2319      	movs	r3, #25
 8007e26:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 8007e2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 8007e48:	e2e5      	b.n	8008416 <AT_ESP8266_ND+0x1b1e>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 8007e4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2208      	movs	r2, #8
 8007e56:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007e5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007e68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007e76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007e84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007e92:	603b      	str	r3, [r7, #0]
 8007e94:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007e98:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007e9c:	6812      	ldr	r2, [r2, #0]
 8007e9e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ea2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007ea6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007eaa:	6809      	ldr	r1, [r1, #0]
 8007eac:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007eb0:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007eb4:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007eb8:	6800      	ldr	r0, [r0, #0]
 8007eba:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	9305      	str	r3, [sp, #20]
 8007ec2:	9004      	str	r0, [sp, #16]
 8007ec4:	9103      	str	r1, [sp, #12]
 8007ec6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007eca:	9102      	str	r1, [sp, #8]
 8007ecc:	9201      	str	r2, [sp, #4]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	4633      	mov	r3, r6
 8007ed4:	4a09      	ldr	r2, [pc, #36]	; (8007efc <AT_ESP8266_ND+0x1604>)
 8007ed6:	4629      	mov	r1, r5
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f006 fc5f 	bl	800e79c <FT_String_ND>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d10d      	bne.n	8007f00 <AT_ESP8266_ND+0x1608>
				{
					AT_decode=at_tcp_desconectado;
 8007ee4:	2310      	movs	r3, #16
 8007ee6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007eea:	e294      	b.n	8008416 <AT_ESP8266_ND+0x1b1e>
 8007eec:	08010a08 	.word	0x08010a08
 8007ef0:	08010a68 	.word	0x08010a68
 8007ef4:	08010a70 	.word	0x08010a70
 8007ef8:	08010a80 	.word	0x08010a80
 8007efc:	08010a24 	.word	0x08010a24
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007f00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007f0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007f1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f203 4694 	addw	r6, r3, #1172	; 0x494
 8007f2a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f2e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f603 4cdc 	addw	ip, r3, #3292	; 0xcdc
 8007f38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007f46:	603b      	str	r3, [r7, #0]
 8007f48:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007f4c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007f50:	6812      	ldr	r2, [r2, #0]
 8007f52:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007f56:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007f5a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007f5e:	6809      	ldr	r1, [r1, #0]
 8007f60:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007f64:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8007f68:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8007f6c:	6800      	ldr	r0, [r0, #0]
 8007f6e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8007f72:	2300      	movs	r3, #0
 8007f74:	9305      	str	r3, [sp, #20]
 8007f76:	9004      	str	r0, [sp, #16]
 8007f78:	9103      	str	r1, [sp, #12]
 8007f7a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007f7e:	9102      	str	r1, [sp, #8]
 8007f80:	9201      	str	r2, [sp, #4]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	4663      	mov	r3, ip
 8007f88:	4632      	mov	r2, r6
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f006 fc05 	bl	800e79c <FT_String_ND>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d112      	bne.n	8007fbe <AT_ESP8266_ND+0x16c6>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 8007f98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f000 8235 	beq.w	8008416 <AT_ESP8266_ND+0x1b1e>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 8007fac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 8007fbc:	e22b      	b.n	8008416 <AT_ESP8266_ND+0x1b1e>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 8007fbe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fc2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	220d      	movs	r2, #13
 8007fca:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 8007fce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8007fdc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fe0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 8007fea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8007ff8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ffc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800800c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008010:	6812      	ldr	r2, [r2, #0]
 8008012:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8008016:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800801a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800801e:	6809      	ldr	r1, [r1, #0]
 8008020:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008024:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008028:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800802c:	6800      	ldr	r0, [r0, #0]
 800802e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8008032:	2300      	movs	r3, #0
 8008034:	9305      	str	r3, [sp, #20]
 8008036:	9004      	str	r0, [sp, #16]
 8008038:	9103      	str	r1, [sp, #12]
 800803a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800803e:	9102      	str	r1, [sp, #8]
 8008040:	9201      	str	r2, [sp, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	4633      	mov	r3, r6
 8008048:	4ac5      	ldr	r2, [pc, #788]	; (8008360 <AT_ESP8266_ND+0x1a68>)
 800804a:	4629      	mov	r1, r5
 800804c:	4620      	mov	r0, r4
 800804e:	f006 fba5 	bl	800e79c <FT_String_ND>
 8008052:	4603      	mov	r3, r0
 8008054:	2b01      	cmp	r3, #1
 8008056:	d112      	bne.n	800807e <AT_ESP8266_ND+0x1786>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8008058:	2312      	movs	r3, #18
 800805a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 800805e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008062:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008072:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 800807c:	e1cb      	b.n	8008416 <AT_ESP8266_ND+0x1b1e>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 800807e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008082:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	220d      	movs	r2, #13
 800808a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Obtiene IP
 800808e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008092:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800809c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80080aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80080b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80080c6:	603b      	str	r3, [r7, #0]
 80080c8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80080cc:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80080d0:	6812      	ldr	r2, [r2, #0]
 80080d2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80080d6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80080da:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80080de:	6809      	ldr	r1, [r1, #0]
 80080e0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80080e4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80080e8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80080ec:	6800      	ldr	r0, [r0, #0]
 80080ee:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80080f2:	2300      	movs	r3, #0
 80080f4:	9305      	str	r3, [sp, #20]
 80080f6:	9004      	str	r0, [sp, #16]
 80080f8:	9103      	str	r1, [sp, #12]
 80080fa:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80080fe:	9102      	str	r1, [sp, #8]
 8008100:	9201      	str	r2, [sp, #4]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	9300      	str	r3, [sp, #0]
 8008106:	4633      	mov	r3, r6
 8008108:	4a96      	ldr	r2, [pc, #600]	; (8008364 <AT_ESP8266_ND+0x1a6c>)
 800810a:	4629      	mov	r1, r5
 800810c:	4620      	mov	r0, r4
 800810e:	f006 fb45 	bl	800e79c <FT_String_ND>
 8008112:	4603      	mov	r3, r0
 8008114:	2b01      	cmp	r3, #1
 8008116:	d112      	bne.n	800813e <AT_ESP8266_ND+0x1846>
				{
					a->_debug_WF_GOTIP++;
 8008118:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800811c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800812c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 8008136:	230c      	movs	r3, #12
 8008138:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800813c:	e16b      	b.n	8008416 <AT_ESP8266_ND+0x1b1e>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 800813e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008142:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	220e      	movs	r2, #14
 800814a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//WIFI CONECTADA
 800814e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008152:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800815c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008160:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800816a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800816e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8008178:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800817c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008186:	603b      	str	r3, [r7, #0]
 8008188:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800818c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008190:	6812      	ldr	r2, [r2, #0]
 8008192:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8008196:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800819a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800819e:	6809      	ldr	r1, [r1, #0]
 80081a0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80081a4:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80081a8:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80081ac:	6800      	ldr	r0, [r0, #0]
 80081ae:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80081b2:	2300      	movs	r3, #0
 80081b4:	9305      	str	r3, [sp, #20]
 80081b6:	9004      	str	r0, [sp, #16]
 80081b8:	9103      	str	r1, [sp, #12]
 80081ba:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80081be:	9102      	str	r1, [sp, #8]
 80081c0:	9201      	str	r2, [sp, #4]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	4633      	mov	r3, r6
 80081c8:	4a67      	ldr	r2, [pc, #412]	; (8008368 <AT_ESP8266_ND+0x1a70>)
 80081ca:	4629      	mov	r1, r5
 80081cc:	4620      	mov	r0, r4
 80081ce:	f006 fae5 	bl	800e79c <FT_String_ND>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d112      	bne.n	80081fe <AT_ESP8266_ND+0x1906>
				{
					a->_debug_WF_CNNCTD++;
 80081d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 80081e6:	1c5a      	adds	r2, r3, #1
 80081e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 80081f6:	230b      	movs	r3, #11
 80081f8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80081fc:	e10b      	b.n	8008416 <AT_ESP8266_ND+0x1b1e>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 80081fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008202:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	220a      	movs	r2, #10
 800820a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 800820e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008212:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f203 6494 	addw	r4, r3, #1684	; 0x694
 800821c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008220:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 800822a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800822e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 8008238:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800823c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800824c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008250:	6812      	ldr	r2, [r2, #0]
 8008252:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8008256:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800825a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800825e:	6809      	ldr	r1, [r1, #0]
 8008260:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008264:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008268:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800826c:	6800      	ldr	r0, [r0, #0]
 800826e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8008272:	2300      	movs	r3, #0
 8008274:	9305      	str	r3, [sp, #20]
 8008276:	9004      	str	r0, [sp, #16]
 8008278:	9103      	str	r1, [sp, #12]
 800827a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800827e:	9102      	str	r1, [sp, #8]
 8008280:	9201      	str	r2, [sp, #4]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	4633      	mov	r3, r6
 8008288:	4a38      	ldr	r2, [pc, #224]	; (800836c <AT_ESP8266_ND+0x1a74>)
 800828a:	4629      	mov	r1, r5
 800828c:	4620      	mov	r0, r4
 800828e:	f006 fa85 	bl	800e79c <FT_String_ND>
 8008292:	4603      	mov	r3, r0
 8008294:	2b01      	cmp	r3, #1
 8008296:	d112      	bne.n	80082be <AT_ESP8266_ND+0x19c6>
				  {
					  AT_decode=at_tcp_client_conectado;
 8008298:	2318      	movs	r3, #24
 800829a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 800829e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 80082bc:	e0ab      	b.n	8008416 <AT_ESP8266_ND+0x1b1e>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 80082be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2208      	movs	r2, #8
 80082ca:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 80082ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f203 6494 	addw	r4, r3, #1684	; 0x694
 80082dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80082ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80082f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8008306:	603b      	str	r3, [r7, #0]
 8008308:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800830c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8008310:	6812      	ldr	r2, [r2, #0]
 8008312:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8008316:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800831a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800831e:	6809      	ldr	r1, [r1, #0]
 8008320:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8008324:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8008328:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 800832c:	6800      	ldr	r0, [r0, #0]
 800832e:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 8008332:	2300      	movs	r3, #0
 8008334:	9305      	str	r3, [sp, #20]
 8008336:	9004      	str	r0, [sp, #16]
 8008338:	9103      	str	r1, [sp, #12]
 800833a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800833e:	9102      	str	r1, [sp, #8]
 8008340:	9201      	str	r2, [sp, #4]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	4633      	mov	r3, r6
 8008348:	4a09      	ldr	r2, [pc, #36]	; (8008370 <AT_ESP8266_ND+0x1a78>)
 800834a:	4629      	mov	r1, r5
 800834c:	4620      	mov	r0, r4
 800834e:	f006 fa25 	bl	800e79c <FT_String_ND>
 8008352:	4603      	mov	r3, r0
 8008354:	2b01      	cmp	r3, #1
 8008356:	d10d      	bne.n	8008374 <AT_ESP8266_ND+0x1a7c>
				{
					AT_decode=at_fail;
 8008358:	2303      	movs	r3, #3
 800835a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800835e:	e05a      	b.n	8008416 <AT_ESP8266_ND+0x1b1e>
 8008360:	08010a8c 	.word	0x08010a8c
 8008364:	08010a9c 	.word	0x08010a9c
 8008368:	08010aac 	.word	0x08010aac
 800836c:	08010abc 	.word	0x08010abc
 8008370:	08010ac8 	.word	0x08010ac8
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 8008374:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008378:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2209      	movs	r2, #9
 8008380:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,a->_overflowVector,FIND)==1)//Conectado desde el modulo
 8008384:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008388:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f203 6494 	addw	r4, r3, #1684	; 0x694
 8008392:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008396:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f603 45d8 	addw	r5, r3, #3288	; 0xcd8
 80083a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f603 46ec 	addw	r6, r3, #3308	; 0xcec
 80083ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80083bc:	603b      	str	r3, [r7, #0]
 80083be:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80083c2:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80083c6:	6812      	ldr	r2, [r2, #0]
 80083c8:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80083cc:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80083d0:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80083d4:	6809      	ldr	r1, [r1, #0]
 80083d6:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80083da:	f507 7014 	add.w	r0, r7, #592	; 0x250
 80083de:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 80083e2:	6800      	ldr	r0, [r0, #0]
 80083e4:	f8d0 0d48 	ldr.w	r0, [r0, #3400]	; 0xd48
 80083e8:	2300      	movs	r3, #0
 80083ea:	9305      	str	r3, [sp, #20]
 80083ec:	9004      	str	r0, [sp, #16]
 80083ee:	9103      	str	r1, [sp, #12]
 80083f0:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80083f4:	9102      	str	r1, [sp, #8]
 80083f6:	9201      	str	r2, [sp, #4]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	4633      	mov	r3, r6
 80083fe:	4a78      	ldr	r2, [pc, #480]	; (80085e0 <AT_ESP8266_ND+0x1ce8>)
 8008400:	4629      	mov	r1, r5
 8008402:	4620      	mov	r0, r4
 8008404:	f006 f9ca 	bl	800e79c <FT_String_ND>
 8008408:	4603      	mov	r3, r0
 800840a:	2b01      	cmp	r3, #1
 800840c:	d103      	bne.n	8008416 <AT_ESP8266_ND+0x1b1e>
					{
					AT_decode=at_busy_p;
 800840e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008412:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 8008416:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800841a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8008424:	3b01      	subs	r3, #1
 8008426:	2b08      	cmp	r3, #8
 8008428:	f201 84c7 	bhi.w	8009dba <AT_ESP8266_ND+0x34c2>
 800842c:	a201      	add	r2, pc, #4	; (adr r2, 8008434 <AT_ESP8266_ND+0x1b3c>)
 800842e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008432:	bf00      	nop
 8008434:	08008459 	.word	0x08008459
 8008438:	080085e9 	.word	0x080085e9
 800843c:	0800886b 	.word	0x0800886b
 8008440:	080089e9 	.word	0x080089e9
 8008444:	08008bc1 	.word	0x08008bc1
 8008448:	08008e95 	.word	0x08008e95
 800844c:	0800914d 	.word	0x0800914d
 8008450:	08009665 	.word	0x08009665
 8008454:	0800983b 	.word	0x0800983b
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008458:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800845c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8008468:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800846c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008476:	2b01      	cmp	r3, #1
 8008478:	d14f      	bne.n	800851a <AT_ESP8266_ND+0x1c22>
 800847a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800847e:	2b01      	cmp	r3, #1
 8008480:	d04b      	beq.n	800851a <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_error)
 8008482:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008486:	2b02      	cmp	r3, #2
 8008488:	d047      	beq.n	800851a <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_restart)
 800848a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800848e:	2b04      	cmp	r3, #4
 8008490:	d043      	beq.n	800851a <AT_ESP8266_ND+0x1c22>
									   &&(AT_decode!=at_tcp_enviado_ok))
 8008492:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008496:	2b13      	cmp	r3, #19
 8008498:	d03f      	beq.n	800851a <AT_ESP8266_ND+0x1c22>
						{
						a->_pasos=0;
 800849a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800849e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80084aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 80084ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80084c8:	4620      	mov	r0, r4
 80084ca:	f7f7 fe93 	bl	80001f4 <strlen>
 80084ce:	4603      	mov	r3, r0
 80084d0:	4423      	add	r3, r4
 80084d2:	4a44      	ldr	r2, [pc, #272]	; (80085e4 <AT_ESP8266_ND+0x1cec>)
 80084d4:	461c      	mov	r4, r3
 80084d6:	4613      	mov	r3, r2
 80084d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80084da:	6020      	str	r0, [r4, #0]
 80084dc:	6061      	str	r1, [r4, #4]
 80084de:	60a2      	str	r2, [r4, #8]
 80084e0:	881b      	ldrh	r3, [r3, #0]
 80084e2:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 80084e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7f7 fe7e 	bl	80001f4 <strlen>
 80084f8:	4603      	mov	r3, r0
 80084fa:	461a      	mov	r2, r3
 80084fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008500:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 800850a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800850e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2264      	movs	r2, #100	; 0x64
 8008516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 800851a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800851e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008528:	1c5a      	adds	r2, r3, #1
 800852a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800852e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 8008538:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800853c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008546:	2b00      	cmp	r3, #0
 8008548:	d11b      	bne.n	8008582 <AT_ESP8266_ND+0x1c8a>
 800854a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800854e:	2b01      	cmp	r3, #1
 8008550:	d023      	beq.n	800859a <AT_ESP8266_ND+0x1ca2>
 8008552:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008556:	2b1c      	cmp	r3, #28
 8008558:	d01f      	beq.n	800859a <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_error)
 800855a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800855e:	2b02      	cmp	r3, #2
 8008560:	d01b      	beq.n	800859a <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_restart)
 8008562:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008566:	2b04      	cmp	r3, #4
 8008568:	d017      	beq.n	800859a <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_connected)
 800856a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800856e:	2b0b      	cmp	r3, #11
 8008570:	d013      	beq.n	800859a <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_wifi_gotip)
 8008572:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008576:	2b0c      	cmp	r3, #12
 8008578:	d00f      	beq.n	800859a <AT_ESP8266_ND+0x1ca2>
															 ||(AT_decode==at_tcp_enviado_ok)))
 800857a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800857e:	2b13      	cmp	r3, #19
 8008580:	d00b      	beq.n	800859a <AT_ESP8266_ND+0x1ca2>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 8008582:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008586:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008590:	f241 3288 	movw	r2, #5000	; 0x1388
 8008594:	4293      	cmp	r3, r2
 8008596:	f341 841a 	ble.w	8009dce <AT_ESP8266_ND+0x34d6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800859a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800859e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80085a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80085ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80085bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80085cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 80085dc:	f001 bbf7 	b.w	8009dce <AT_ESP8266_ND+0x34d6>
 80085e0:	08010ad4 	.word	0x08010ad4
 80085e4:	08010ae0 	.word	0x08010ae0
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80085e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 80085f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008606:	2b01      	cmp	r3, #1
 8008608:	f040 80c8 	bne.w	800879c <AT_ESP8266_ND+0x1ea4>
 800860c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008610:	2b01      	cmp	r3, #1
 8008612:	f000 80c3 	beq.w	800879c <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_error)
 8008616:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800861a:	2b02      	cmp	r3, #2
 800861c:	f000 80be 	beq.w	800879c <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_fail)
 8008620:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008624:	2b03      	cmp	r3, #3
 8008626:	f000 80b9 	beq.w	800879c <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_restart)
 800862a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800862e:	2b04      	cmp	r3, #4
 8008630:	f000 80b4 	beq.w	800879c <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_disconnect)
 8008634:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008638:	2b0a      	cmp	r3, #10
 800863a:	f000 80af 	beq.w	800879c <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_connected)
 800863e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008642:	2b0b      	cmp	r3, #11
 8008644:	f000 80aa 	beq.w	800879c <AT_ESP8266_ND+0x1ea4>
									   &&(AT_decode!=at_wifi_gotip))
 8008648:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800864c:	2b0c      	cmp	r3, #12
 800864e:	f000 80a5 	beq.w	800879c <AT_ESP8266_ND+0x1ea4>
						{
						a->_pasos=0;
 8008652:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008656:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2200      	movs	r2, #0
 800865e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008662:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008666:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2201      	movs	r2, #1
 800866e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 8008672:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008676:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008680:	4620      	mov	r0, r4
 8008682:	f7f7 fdb7 	bl	80001f4 <strlen>
 8008686:	4603      	mov	r3, r0
 8008688:	4423      	add	r3, r4
 800868a:	49d5      	ldr	r1, [pc, #852]	; (80089e0 <AT_ESP8266_ND+0x20e8>)
 800868c:	461a      	mov	r2, r3
 800868e:	460b      	mov	r3, r1
 8008690:	cb03      	ldmia	r3!, {r0, r1}
 8008692:	6010      	str	r0, [r2, #0]
 8008694:	6051      	str	r1, [r2, #4]
 8008696:	881b      	ldrh	r3, [r3, #0]
 8008698:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 800869a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800869e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80086a8:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80086ac:	2201      	movs	r2, #1
 80086ae:	4618      	mov	r0, r3
 80086b0:	f006 fe5d 	bl	800f36e <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 80086b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80086c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	1d9d      	adds	r5, r3, #6
 80086ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3306      	adds	r3, #6
 80086da:	4618      	mov	r0, r3
 80086dc:	f7f7 fd8a 	bl	80001f4 <strlen>
 80086e0:	4603      	mov	r3, r0
 80086e2:	461a      	mov	r2, r3
 80086e4:	4629      	mov	r1, r5
 80086e6:	4620      	mov	r0, r4
 80086e8:	f006 fe41 	bl	800f36e <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 80086ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80086fa:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80086fe:	4618      	mov	r0, r3
 8008700:	f7f7 fd78 	bl	80001f4 <strlen>
 8008704:	4602      	mov	r2, r0
 8008706:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800870a:	4619      	mov	r1, r3
 800870c:	4620      	mov	r0, r4
 800870e:	f006 fe2e 	bl	800f36e <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 8008712:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008716:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008720:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008724:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800872e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008732:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3326      	adds	r3, #38	; 0x26
 800873a:	4618      	mov	r0, r3
 800873c:	f7f7 fd5a 	bl	80001f4 <strlen>
 8008740:	4603      	mov	r3, r0
 8008742:	461a      	mov	r2, r3
 8008744:	4629      	mov	r1, r5
 8008746:	4620      	mov	r0, r4
 8008748:	f006 fe11 	bl	800f36e <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 800874c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008750:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800875a:	f507 7109 	add.w	r1, r7, #548	; 0x224
 800875e:	2203      	movs	r2, #3
 8008760:	4618      	mov	r0, r3
 8008762:	f006 fe04 	bl	800f36e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 8008766:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800876a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008774:	4618      	mov	r0, r3
 8008776:	f7f7 fd3d 	bl	80001f4 <strlen>
 800877a:	4603      	mov	r3, r0
 800877c:	461a      	mov	r2, r3
 800877e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008782:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 800878c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008790:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	22c8      	movs	r2, #200	; 0xc8
 8008798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 800879c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80087aa:	1c5a      	adds	r2, r3, #1
 80087ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 80087ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d11b      	bne.n	8008804 <AT_ESP8266_ND+0x1f0c>
 80087cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d023      	beq.n	800881c <AT_ESP8266_ND+0x1f24>
 80087d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d01f      	beq.n	800881c <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_fail)
 80087dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087e0:	2b03      	cmp	r3, #3
 80087e2:	d01b      	beq.n	800881c <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_restart)
 80087e4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087e8:	2b04      	cmp	r3, #4
 80087ea:	d017      	beq.n	800881c <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_disconnect)
 80087ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087f0:	2b0a      	cmp	r3, #10
 80087f2:	d013      	beq.n	800881c <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_connected)
 80087f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087f8:	2b0b      	cmp	r3, #11
 80087fa:	d00f      	beq.n	800881c <AT_ESP8266_ND+0x1f24>
															||(AT_decode==at_wifi_gotip)))
 80087fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008800:	2b0c      	cmp	r3, #12
 8008802:	d00b      	beq.n	800881c <AT_ESP8266_ND+0x1f24>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 8008804:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008808:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8008812:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008816:	4293      	cmp	r3, r2
 8008818:	f341 82db 	ble.w	8009dd2 <AT_ESP8266_ND+0x34da>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800881c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008820:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800882a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 800882e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008832:	2b0a      	cmp	r3, #10
 8008834:	d00f      	beq.n	8008856 <AT_ESP8266_ND+0x1f5e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 8008836:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800883a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2200      	movs	r2, #0
 8008842:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 8008846:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800884a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2200      	movs	r2, #0
 8008852:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 8008856:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800885a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2200      	movs	r2, #0
 8008862:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 8008866:	f001 bab4 	b.w	8009dd2 <AT_ESP8266_ND+0x34da>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800886a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800886e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 800887a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800887e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008888:	2b01      	cmp	r3, #1
 800888a:	d14d      	bne.n	8008928 <AT_ESP8266_ND+0x2030>
 800888c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008890:	2b04      	cmp	r3, #4
 8008892:	d049      	beq.n	8008928 <AT_ESP8266_ND+0x2030>
 8008894:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008898:	2b0a      	cmp	r3, #10
 800889a:	d045      	beq.n	8008928 <AT_ESP8266_ND+0x2030>
 800889c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088a0:	2b0d      	cmp	r3, #13
 80088a2:	d041      	beq.n	8008928 <AT_ESP8266_ND+0x2030>
						{
						a->_pasos=0;
 80088a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80088b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2201      	movs	r2, #1
 80088c0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"));
 80088c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80088d2:	4620      	mov	r0, r4
 80088d4:	f7f7 fc8e 	bl	80001f4 <strlen>
 80088d8:	4603      	mov	r3, r0
 80088da:	4423      	add	r3, r4
 80088dc:	4941      	ldr	r1, [pc, #260]	; (80089e4 <AT_ESP8266_ND+0x20ec>)
 80088de:	461a      	mov	r2, r3
 80088e0:	460b      	mov	r3, r1
 80088e2:	cb03      	ldmia	r3!, {r0, r1}
 80088e4:	6010      	str	r0, [r2, #0]
 80088e6:	6051      	str	r1, [r2, #4]
 80088e8:	8819      	ldrh	r1, [r3, #0]
 80088ea:	789b      	ldrb	r3, [r3, #2]
 80088ec:	8111      	strh	r1, [r2, #8]
 80088ee:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 80088f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80088fe:	4618      	mov	r0, r3
 8008900:	f7f7 fc78 	bl	80001f4 <strlen>
 8008904:	4603      	mov	r3, r0
 8008906:	461a      	mov	r2, r3
 8008908:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800890c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 8008916:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800891a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008928:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800892c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008936:	1c5a      	adds	r2, r3, #1
 8008938:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800893c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008946:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800894a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008954:	2b00      	cmp	r3, #0
 8008956:	d113      	bne.n	8008980 <AT_ESP8266_ND+0x2088>
 8008958:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800895c:	2b0a      	cmp	r3, #10
 800895e:	d01b      	beq.n	8008998 <AT_ESP8266_ND+0x20a0>
 8008960:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008964:	2b0b      	cmp	r3, #11
 8008966:	d017      	beq.n	8008998 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_wifi_gotip)
 8008968:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800896c:	2b0c      	cmp	r3, #12
 800896e:	d013      	beq.n	8008998 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_restart	)
 8008970:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008974:	2b04      	cmp	r3, #4
 8008976:	d00f      	beq.n	8008998 <AT_ESP8266_ND+0x20a0>
																		  ||(AT_decode==at_deconectar_ok )))
 8008978:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800897c:	2b0d      	cmp	r3, #13
 800897e:	d00b      	beq.n	8008998 <AT_ESP8266_ND+0x20a0>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008980:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008984:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800898e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008992:	4293      	cmp	r3, r2
 8008994:	f341 821f 	ble.w	8009dd6 <AT_ESP8266_ND+0x34de>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008998:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800899c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80089a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80089aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089ae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80089ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80089ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 80089da:	f001 b9fc 	b.w	8009dd6 <AT_ESP8266_ND+0x34de>
 80089de:	bf00      	nop
 80089e0:	08010af0 	.word	0x08010af0
 80089e4:	08010afc 	.word	0x08010afc
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80089e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 80089f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d16b      	bne.n	8008ae2 <AT_ESP8266_ND+0x21ea>
 8008a0a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d067      	beq.n	8008ae2 <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_ok)
 8008a12:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d063      	beq.n	8008ae2 <AT_ESP8266_ND+0x21ea>
									   &&(AT_decode!=at_error))
 8008a1a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d05f      	beq.n	8008ae2 <AT_ESP8266_ND+0x21ea>
						{
						a->_pasos=0;
 8008a22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008a32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 8008a42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d115      	bne.n	8008a80 <AT_ESP8266_ND+0x2188>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 8008a54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008a62:	4620      	mov	r0, r4
 8008a64:	f7f7 fbc6 	bl	80001f4 <strlen>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	4423      	add	r3, r4
 8008a6c:	4a52      	ldr	r2, [pc, #328]	; (8008bb8 <AT_ESP8266_ND+0x22c0>)
 8008a6e:	461c      	mov	r4, r3
 8008a70:	4613      	mov	r3, r2
 8008a72:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a74:	6020      	str	r0, [r4, #0]
 8008a76:	6061      	str	r1, [r4, #4]
 8008a78:	60a2      	str	r2, [r4, #8]
 8008a7a:	881b      	ldrh	r3, [r3, #0]
 8008a7c:	81a3      	strh	r3, [r4, #12]
 8008a7e:	e014      	b.n	8008aaa <AT_ESP8266_ND+0x21b2>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 8008a80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f7f7 fbb0 	bl	80001f4 <strlen>
 8008a94:	4603      	mov	r3, r0
 8008a96:	4423      	add	r3, r4
 8008a98:	4a48      	ldr	r2, [pc, #288]	; (8008bbc <AT_ESP8266_ND+0x22c4>)
 8008a9a:	461c      	mov	r4, r3
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008aa0:	6020      	str	r0, [r4, #0]
 8008aa2:	6061      	str	r1, [r4, #4]
 8008aa4:	60a2      	str	r2, [r4, #8]
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008aaa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7f7 fb9b 	bl	80001f4 <strlen>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ac6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 8008ad0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ad4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008ade:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008ae2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ae6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008af0:	1c5a      	adds	r2, r3, #1
 8008af2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008af6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008b00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d123      	bne.n	8008b5a <AT_ESP8266_ND+0x2262>
 8008b12:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d02b      	beq.n	8008b72 <AT_ESP8266_ND+0x227a>
 8008b1a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b1e:	2b0b      	cmp	r3, #11
 8008b20:	d027      	beq.n	8008b72 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_wifi_gotip)
 8008b22:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b26:	2b0c      	cmp	r3, #12
 8008b28:	d023      	beq.n	8008b72 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_restart)
 8008b2a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b2e:	2b04      	cmp	r3, #4
 8008b30:	d01f      	beq.n	8008b72 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_error)
 8008b32:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d01b      	beq.n	8008b72 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_ok)
 8008b3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b3e:	2b07      	cmp	r3, #7
 8008b40:	d017      	beq.n	8008b72 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_ok)
 8008b42:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b46:	2b08      	cmp	r3, #8
 8008b48:	d013      	beq.n	8008b72 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_multiple_conn_err)
 8008b4a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b4e:	2b1e      	cmp	r3, #30
 8008b50:	d00f      	beq.n	8008b72 <AT_ESP8266_ND+0x227a>
															||(AT_decode==at_no_multiple_conn_err)))
 8008b52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b56:	2b1f      	cmp	r3, #31
 8008b58:	d00b      	beq.n	8008b72 <AT_ESP8266_ND+0x227a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008b5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	f341 8134 	ble.w	8009dda <AT_ESP8266_ND+0x34e2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008b72:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b76:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008b84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008b94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008ba4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ba8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008bb4:	f001 b911 	b.w	8009dda <AT_ESP8266_ND+0x34e2>
 8008bb8:	08010b08 	.word	0x08010b08
 8008bbc:	08010b18 	.word	0x08010b18
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008bc0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bc4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 8008bd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	f040 80f3 	bne.w	8008dca <AT_ESP8266_ND+0x24d2>
 8008be4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008be8:	2b04      	cmp	r3, #4
 8008bea:	f000 80ee 	beq.w	8008dca <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_ok)
 8008bee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	f000 80e9 	beq.w	8008dca <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_error)
 8008bf8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	f000 80e4 	beq.w	8008dca <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_err)
 8008c02:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c06:	2b21      	cmp	r3, #33	; 0x21
 8008c08:	f000 80df 	beq.w	8008dca <AT_ESP8266_ND+0x24d2>
									   &&(AT_decode!=at_def_ip_ok))
 8008c0c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008c10:	2b1b      	cmp	r3, #27
 8008c12:	f000 80da 	beq.w	8008dca <AT_ESP8266_ND+0x24d2>
						{
						a->_pasos=0;
 8008c16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008c26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 8008c36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008c44:	4620      	mov	r0, r4
 8008c46:	f7f7 fad5 	bl	80001f4 <strlen>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	4423      	add	r3, r4
 8008c4e:	4990      	ldr	r1, [pc, #576]	; (8008e90 <AT_ESP8266_ND+0x2598>)
 8008c50:	461a      	mov	r2, r3
 8008c52:	460b      	mov	r3, r1
 8008c54:	cb03      	ldmia	r3!, {r0, r1}
 8008c56:	6010      	str	r0, [r2, #0]
 8008c58:	6051      	str	r1, [r2, #4]
 8008c5a:	8819      	ldrh	r1, [r3, #0]
 8008c5c:	789b      	ldrb	r3, [r3, #2]
 8008c5e:	8111      	strh	r1, [r2, #8]
 8008c60:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 8008c62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008c70:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008c74:	2201      	movs	r2, #1
 8008c76:	4618      	mov	r0, r3
 8008c78:	f006 fb79 	bl	800f36e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008c7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008c8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8008c98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	334c      	adds	r3, #76	; 0x4c
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7f7 faa5 	bl	80001f4 <strlen>
 8008caa:	4603      	mov	r3, r0
 8008cac:	461a      	mov	r2, r3
 8008cae:	4629      	mov	r1, r5
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f006 fb5c 	bl	800f36e <strncat>
						strncat(a->_uart2snd,separador,3);
 8008cb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008cc4:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008cc8:	2203      	movs	r2, #3
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f006 fb4f 	bl	800f36e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 8008cd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008cde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ce2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8008cec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cf0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3362      	adds	r3, #98	; 0x62
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7f7 fa7b 	bl	80001f4 <strlen>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	461a      	mov	r2, r3
 8008d02:	4629      	mov	r1, r5
 8008d04:	4620      	mov	r0, r4
 8008d06:	f006 fb32 	bl	800f36e <strncat>
						strncat(a->_uart2snd,separador,3);
 8008d0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d18:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008d1c:	2203      	movs	r2, #3
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f006 fb25 	bl	800f36e <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 8008d24:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d28:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008d32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f103 0572 	add.w	r5, r3, #114	; 0x72
 8008d40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3372      	adds	r3, #114	; 0x72
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7f7 fa51 	bl	80001f4 <strlen>
 8008d52:	4603      	mov	r3, r0
 8008d54:	461a      	mov	r2, r3
 8008d56:	4629      	mov	r1, r5
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f006 fb08 	bl	800f36e <strncat>
						strncat(a->_uart2snd,&comillas,1);
 8008d5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d6c:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008d70:	2201      	movs	r2, #1
 8008d72:	4618      	mov	r0, r3
 8008d74:	f006 fafb 	bl	800f36e <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008d78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008d86:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f006 faee 	bl	800f36e <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 8008d92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7f7 fa27 	bl	80001f4 <strlen>
 8008da6:	4603      	mov	r3, r0
 8008da8:	461a      	mov	r2, r3
 8008daa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008db8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008dca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008dd8:	1c5a      	adds	r2, r3, #1
 8008dda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008de8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d11b      	bne.n	8008e32 <AT_ESP8266_ND+0x253a>
 8008dfa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d023      	beq.n	8008e4a <AT_ESP8266_ND+0x2552>
 8008e02:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e06:	2b0b      	cmp	r3, #11
 8008e08:	d01f      	beq.n	8008e4a <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_wifi_gotip)
 8008e0a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e0e:	2b0c      	cmp	r3, #12
 8008e10:	d01b      	beq.n	8008e4a <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_restart)
 8008e12:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e16:	2b04      	cmp	r3, #4
 8008e18:	d017      	beq.n	8008e4a <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_error)
 8008e1a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d013      	beq.n	8008e4a <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_err)
 8008e22:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e26:	2b21      	cmp	r3, #33	; 0x21
 8008e28:	d00f      	beq.n	8008e4a <AT_ESP8266_ND+0x2552>
															 ||(AT_decode==at_def_ip_ok)))
 8008e2a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008e2e:	2b1b      	cmp	r3, #27
 8008e30:	d00b      	beq.n	8008e4a <AT_ESP8266_ND+0x2552>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008e32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e44:	4293      	cmp	r3, r2
 8008e46:	f340 87ca 	ble.w	8009dde <AT_ESP8266_ND+0x34e6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008e4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008e5c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e60:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008e6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008e7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008e8c:	f000 bfa7 	b.w	8009dde <AT_ESP8266_ND+0x34e6>
 8008e90:	08010a08 	.word	0x08010a08
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008e94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008ea4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ea8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	f040 80e2 	bne.w	800907c <AT_ESP8266_ND+0x2784>
 8008eb8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ebc:	2b0b      	cmp	r3, #11
 8008ebe:	f000 80dd 	beq.w	800907c <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_wifi_gotip)
 8008ec2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ec6:	2b0c      	cmp	r3, #12
 8008ec8:	f000 80d8 	beq.w	800907c <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008ecc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ed0:	2b0e      	cmp	r3, #14
 8008ed2:	f000 80d3 	beq.w	800907c <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_conectado)
 8008ed6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008eda:	2b0f      	cmp	r3, #15
 8008edc:	f000 80ce 	beq.w	800907c <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_tcp_desconectado)
 8008ee0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ee4:	2b10      	cmp	r3, #16
 8008ee6:	f000 80c9 	beq.w	800907c <AT_ESP8266_ND+0x2784>
									   &&(AT_decode!=at_error))
 8008eea:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	f000 80c4 	beq.w	800907c <AT_ESP8266_ND+0x2784>
						{
						a->_pasos=0;
 8008ef4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ef8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008f04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 8008f14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008f22:	4620      	mov	r0, r4
 8008f24:	f7f7 f966 	bl	80001f4 <strlen>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	4423      	add	r3, r4
 8008f2c:	4aa1      	ldr	r2, [pc, #644]	; (80091b4 <AT_ESP8266_ND+0x28bc>)
 8008f2e:	461c      	mov	r4, r3
 8008f30:	4613      	mov	r3, r2
 8008f32:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f34:	6020      	str	r0, [r4, #0]
 8008f36:	6061      	str	r1, [r4, #4]
 8008f38:	60a2      	str	r2, [r4, #8]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 8008f3e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f42:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008f4c:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008f50:	2201      	movs	r2, #1
 8008f52:	4618      	mov	r0, r3
 8008f54:	f006 fa0b 	bl	800f36e <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 8008f58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008f66:	4620      	mov	r0, r4
 8008f68:	f7f7 f944 	bl	80001f4 <strlen>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	4423      	add	r3, r4
 8008f70:	4a91      	ldr	r2, [pc, #580]	; (80091b8 <AT_ESP8266_ND+0x28c0>)
 8008f72:	6810      	ldr	r0, [r2, #0]
 8008f74:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008f76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008f84:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008f88:	2203      	movs	r2, #3
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f006 f9ef 	bl	800f36e <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 8008f90:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f94:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008f9e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fa2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8008fac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3336      	adds	r3, #54	; 0x36
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7f7 f91b 	bl	80001f4 <strlen>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f006 f9d2 	bl	800f36e <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008fca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008fd8:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008fdc:	2202      	movs	r2, #2
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f006 f9c5 	bl	800f36e <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8008fe4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fe8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008ff2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ff6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f103 0546 	add.w	r5, r3, #70	; 0x46
 8009000:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009004:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	3346      	adds	r3, #70	; 0x46
 800900c:	4618      	mov	r0, r3
 800900e:	f7f7 f8f1 	bl	80001f4 <strlen>
 8009012:	4603      	mov	r3, r0
 8009014:	461a      	mov	r2, r3
 8009016:	4629      	mov	r1, r5
 8009018:	4620      	mov	r0, r4
 800901a:	f006 f9a8 	bl	800f36e <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 800901e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009022:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800902c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009030:	4618      	mov	r0, r3
 8009032:	f7f7 f8df 	bl	80001f4 <strlen>
 8009036:	4602      	mov	r2, r0
 8009038:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800903c:	4619      	mov	r1, r3
 800903e:	4620      	mov	r0, r4
 8009040:	f006 f995 	bl	800f36e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8009044:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009048:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009052:	4618      	mov	r0, r3
 8009054:	f7f7 f8ce 	bl	80001f4 <strlen>
 8009058:	4603      	mov	r3, r0
 800905a:	461a      	mov	r2, r3
 800905c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009060:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 800906a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800906e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 800907c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009080:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800908a:	1c5a      	adds	r2, r3, #1
 800908c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009090:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 800909a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800909e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d120      	bne.n	80090ee <AT_ESP8266_ND+0x27f6>
 80090ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090b0:	2b0a      	cmp	r3, #10
 80090b2:	d028      	beq.n	8009106 <AT_ESP8266_ND+0x280e>
 80090b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090b8:	2b0b      	cmp	r3, #11
 80090ba:	d024      	beq.n	8009106 <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_wifi_gotip)
 80090bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090c0:	2b0c      	cmp	r3, #12
 80090c2:	d020      	beq.n	8009106 <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 80090c4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090c8:	2b0e      	cmp	r3, #14
 80090ca:	d01c      	beq.n	8009106 <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_tcp_conectado)
 80090cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090d0:	2b0f      	cmp	r3, #15
 80090d2:	d018      	beq.n	8009106 <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_tcp_desconectado)
 80090d4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090d8:	2b10      	cmp	r3, #16
 80090da:	d014      	beq.n	8009106 <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_error)
 80090dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d010      	beq.n	8009106 <AT_ESP8266_ND+0x280e>
																		  ||(AT_decode==at_busy_p)))
 80090e4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80090e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090ec:	d00b      	beq.n	8009106 <AT_ESP8266_ND+0x280e>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80090ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80090fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009100:	4293      	cmp	r3, r2
 8009102:	f340 866e 	ble.w	8009de2 <AT_ESP8266_ND+0x34ea>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8009106:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800910a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009118:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800911c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2200      	movs	r2, #0
 8009124:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8009128:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800912c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2200      	movs	r2, #0
 8009134:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8009138:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800913c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2200      	movs	r2, #0
 8009144:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009148:	f000 be4b 	b.w	8009de2 <AT_ESP8266_ND+0x34ea>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 800914c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009150:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 8009154:	2200      	movs	r2, #0
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	2200      	movs	r2, #0
 800915a:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 800915c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009160:	2b10      	cmp	r3, #16
 8009162:	d003      	beq.n	800916c <AT_ESP8266_ND+0x2874>
 8009164:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009168:	2b0a      	cmp	r3, #10
 800916a:	d127      	bne.n	80091bc <AT_ESP8266_ND+0x28c4>
				{
					a->_estado=AT_decode;
 800916c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009170:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800917a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 800917e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009182:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2200      	movs	r2, #0
 800918a:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 800918e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009192:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2200      	movs	r2, #0
 800919a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 800919e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80091ae:	f000 be1a 	b.w	8009de6 <AT_ESP8266_ND+0x34ee>
 80091b2:	bf00      	nop
 80091b4:	08010b28 	.word	0x08010b28
 80091b8:	08010b38 	.word	0x08010b38
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80091bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	f040 80d1 	bne.w	8009372 <AT_ESP8266_ND+0x2a7a>
 80091d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f040 80c7 	bne.w	8009372 <AT_ESP8266_ND+0x2a7a>
										a->_ejecucion=1;
 80091e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 80091f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2218      	movs	r2, #24
 8009200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009204:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009208:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009214:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009218:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009222:	1c5a      	adds	r2, r3, #1
 8009224:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009228:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 8009232:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009236:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2200      	movs	r2, #0
 800923e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 8009242:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009246:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 8009252:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009256:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009260:	4620      	mov	r0, r4
 8009262:	f7f6 ffc7 	bl	80001f4 <strlen>
 8009266:	4603      	mov	r3, r0
 8009268:	4423      	add	r3, r4
 800926a:	4abe      	ldr	r2, [pc, #760]	; (8009564 <AT_ESP8266_ND+0x2c6c>)
 800926c:	461c      	mov	r4, r3
 800926e:	4613      	mov	r3, r2
 8009270:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009272:	6020      	str	r0, [r4, #0]
 8009274:	6061      	str	r1, [r4, #4]
 8009276:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8009278:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800927c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8009286:	f107 0214 	add.w	r2, r7, #20
 800928a:	4611      	mov	r1, r2
 800928c:	4618      	mov	r0, r3
 800928e:	f005 fdcd 	bl	800ee2c <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009292:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009296:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80092a0:	f107 0314 	add.w	r3, r7, #20
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7f6 ffa5 	bl	80001f4 <strlen>
 80092aa:	4602      	mov	r2, r0
 80092ac:	f107 0314 	add.w	r3, r7, #20
 80092b0:	4619      	mov	r1, r3
 80092b2:	4620      	mov	r0, r4
 80092b4:	f006 f85b 	bl	800f36e <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 80092b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 80092c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80092d4:	4619      	mov	r1, r3
 80092d6:	4610      	mov	r0, r2
 80092d8:	f006 f92a 	bl	800f530 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80092dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80092ea:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80092ee:	2202      	movs	r2, #2
 80092f0:	4618      	mov	r0, r3
 80092f2:	f006 f83c 	bl	800f36e <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 80092f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009304:	4618      	mov	r0, r3
 8009306:	f7f6 ff75 	bl	80001f4 <strlen>
 800930a:	4603      	mov	r3, r0
 800930c:	461a      	mov	r2, r3
 800930e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009312:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 800931c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009320:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 800932a:	4620      	mov	r0, r4
 800932c:	f7f6 ff62 	bl	80001f4 <strlen>
 8009330:	4603      	mov	r3, r0
 8009332:	4423      	add	r3, r4
 8009334:	4a8c      	ldr	r2, [pc, #560]	; (8009568 <AT_ESP8266_ND+0x2c70>)
 8009336:	461c      	mov	r4, r3
 8009338:	4613      	mov	r3, r2
 800933a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800933c:	6020      	str	r0, [r4, #0]
 800933e:	6061      	str	r1, [r4, #4]
 8009340:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009342:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009346:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009350:	1c5a      	adds	r2, r3, #1
 8009352:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009356:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 8009360:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009364:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800936e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009372:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009376:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009380:	1c5a      	adds	r2, r3, #1
 8009382:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009386:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 8009390:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009394:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f040 80a6 	bne.w	80094f0 <AT_ESP8266_ND+0x2bf8>
 80093a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093a8:	2b13      	cmp	r3, #19
 80093aa:	f000 80a1 	beq.w	80094f0 <AT_ESP8266_ND+0x2bf8>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 80093ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093b2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f203 6294 	addw	r2, r3, #1684	; 0x694
 80093bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 80093ca:	4619      	mov	r1, r3
 80093cc:	4610      	mov	r0, r2
 80093ce:	f7f6 ff07 	bl	80001e0 <strcmp>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d01b      	beq.n	8009410 <AT_ESP8266_ND+0x2b18>
 80093d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d017      	beq.n	8009410 <AT_ESP8266_ND+0x2b18>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 80093e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80093e4:	2b14      	cmp	r3, #20
 80093e6:	d013      	beq.n	8009410 <AT_ESP8266_ND+0x2b18>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 80093e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80093f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80093fa:	4293      	cmp	r3, r2
 80093fc:	dd78      	ble.n	80094f0 <AT_ESP8266_ND+0x2bf8>
 80093fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009402:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800940c:	2b01      	cmp	r3, #1
 800940e:	d16f      	bne.n	80094f0 <AT_ESP8266_ND+0x2bf8>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8009410:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009414:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800941e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009422:	4293      	cmp	r3, r2
 8009424:	dd0e      	ble.n	8009444 <AT_ESP8266_ND+0x2b4c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009426:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800942a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8009434:	1c5a      	adds	r2, r3, #1
 8009436:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800943a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8009444:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009448:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8009452:	1c5a      	adds	r2, r3, #1
 8009454:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009458:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8009462:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009466:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009476:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009480:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009484:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2201      	movs	r2, #1
 800948c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009490:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009494:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f203 4094 	addw	r0, r3, #1172	; 0x494
 800949e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f503 7125 	add.w	r1, r3, #660	; 0x294
 80094ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80094ba:	2361      	movs	r3, #97	; 0x61
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	2301      	movs	r3, #1
 80094c0:	f005 fd5e 	bl	800ef80 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 80094c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80094d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 80094e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 80094f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094fe:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009502:	f040 8470 	bne.w	8009de6 <AT_ESP8266_ND+0x34ee>
 8009506:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800950a:	2b13      	cmp	r3, #19
 800950c:	d02e      	beq.n	800956c <AT_ESP8266_ND+0x2c74>
 800950e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009512:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800951c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009520:	4293      	cmp	r3, r2
 8009522:	dc23      	bgt.n	800956c <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_wifi_disconnect)
 8009524:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009528:	2b0a      	cmp	r3, #10
 800952a:	d01f      	beq.n	800956c <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_wifi_connected)
 800952c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009530:	2b0b      	cmp	r3, #11
 8009532:	d01b      	beq.n	800956c <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_wifi_gotip)
 8009534:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009538:	2b0c      	cmp	r3, #12
 800953a:	d017      	beq.n	800956c <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_tcp_desconectado)
 800953c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009540:	2b10      	cmp	r3, #16
 8009542:	d013      	beq.n	800956c <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_tcp_snd_err)
 8009544:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009548:	2b11      	cmp	r3, #17
 800954a:	d00f      	beq.n	800956c <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_tcp_enviado_error)
 800954c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009550:	2b12      	cmp	r3, #18
 8009552:	d00b      	beq.n	800956c <AT_ESP8266_ND+0x2c74>
																				 ||(AT_decode==at_busy_p)))
 8009554:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009558:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800955c:	f040 8443 	bne.w	8009de6 <AT_ESP8266_ND+0x34ee>
 8009560:	e004      	b.n	800956c <AT_ESP8266_ND+0x2c74>
 8009562:	bf00      	nop
 8009564:	08010b3c 	.word	0x08010b3c
 8009568:	08010b48 	.word	0x08010b48
									a->_debug_count5++;
 800956c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009570:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800957a:	1c5a      	adds	r2, r3, #1
 800957c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009580:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 800958a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800958e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009598:	f241 3288 	movw	r2, #5000	; 0x1388
 800959c:	4293      	cmp	r3, r2
 800959e:	dd25      	ble.n	80095ec <AT_ESP8266_ND+0x2cf4>
										a->_debug_count8++;
 80095a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 80095be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80095cc:	1c5a      	adds	r2, r3, #1
 80095ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 80095dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 80095ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	dd10      	ble.n	8009620 <AT_ESP8266_ND+0x2d28>
 80095fe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009602:	2b10      	cmp	r3, #16
 8009604:	d00c      	beq.n	8009620 <AT_ESP8266_ND+0x2d28>
 8009606:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800960a:	2b0a      	cmp	r3, #10
 800960c:	d008      	beq.n	8009620 <AT_ESP8266_ND+0x2d28>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 800960e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009612:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	220f      	movs	r2, #15
 800961a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800961e:	e008      	b.n	8009632 <AT_ESP8266_ND+0x2d3a>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009620:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009624:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800962e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009632:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009636:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2200      	movs	r2, #0
 800963e:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009642:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009646:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2200      	movs	r2, #0
 800964e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009652:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009656:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2200      	movs	r2, #0
 800965e:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009662:	e3c0      	b.n	8009de6 <AT_ESP8266_ND+0x34ee>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009664:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009668:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2200      	movs	r2, #0
 8009670:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 8009674:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009678:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009682:	2b01      	cmp	r3, #1
 8009684:	d16f      	bne.n	8009766 <AT_ESP8266_ND+0x2e6e>
						{
						a->_pasos=0;
 8009686:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800968a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2200      	movs	r2, #0
 8009692:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8009696:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800969a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2201      	movs	r2, #1
 80096a2:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 80096a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80096b4:	4620      	mov	r0, r4
 80096b6:	f7f6 fd9d 	bl	80001f4 <strlen>
 80096ba:	4603      	mov	r3, r0
 80096bc:	4423      	add	r3, r4
 80096be:	4a78      	ldr	r2, [pc, #480]	; (80098a0 <AT_ESP8266_ND+0x2fa8>)
 80096c0:	461c      	mov	r4, r3
 80096c2:	4615      	mov	r5, r2
 80096c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80096c6:	6020      	str	r0, [r4, #0]
 80096c8:	6061      	str	r1, [r4, #4]
 80096ca:	60a2      	str	r2, [r4, #8]
 80096cc:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 80096ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80096dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 80096ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80096ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	335c      	adds	r3, #92	; 0x5c
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7f6 fd7c 	bl	80001f4 <strlen>
 80096fc:	4603      	mov	r3, r0
 80096fe:	461a      	mov	r2, r3
 8009700:	4629      	mov	r1, r5
 8009702:	4620      	mov	r0, r4
 8009704:	f005 fe33 	bl	800f36e <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009708:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800970c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009716:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800971a:	4618      	mov	r0, r3
 800971c:	f7f6 fd6a 	bl	80001f4 <strlen>
 8009720:	4602      	mov	r2, r0
 8009722:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8009726:	4619      	mov	r1, r3
 8009728:	4620      	mov	r0, r4
 800972a:	f005 fe20 	bl	800f36e <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 800972e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009732:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800973c:	4618      	mov	r0, r3
 800973e:	f7f6 fd59 	bl	80001f4 <strlen>
 8009742:	4603      	mov	r3, r0
 8009744:	461a      	mov	r2, r3
 8009746:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800974a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 8009754:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009758:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 8009766:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800976a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009774:	1c5a      	adds	r2, r3, #1
 8009776:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800977a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8009784:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009788:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009792:	2b00      	cmp	r3, #0
 8009794:	d123      	bne.n	80097de <AT_ESP8266_ND+0x2ee6>
 8009796:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800979a:	2b0a      	cmp	r3, #10
 800979c:	d02b      	beq.n	80097f6 <AT_ESP8266_ND+0x2efe>
 800979e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097a2:	2b0b      	cmp	r3, #11
 80097a4:	d027      	beq.n	80097f6 <AT_ESP8266_ND+0x2efe>
 80097a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097aa:	2b0c      	cmp	r3, #12
 80097ac:	d023      	beq.n	80097f6 <AT_ESP8266_ND+0x2efe>
 80097ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097b2:	2b0e      	cmp	r3, #14
 80097b4:	d01f      	beq.n	80097f6 <AT_ESP8266_ND+0x2efe>
 80097b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097ba:	2b0f      	cmp	r3, #15
 80097bc:	d01b      	beq.n	80097f6 <AT_ESP8266_ND+0x2efe>
 80097be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097c2:	2b10      	cmp	r3, #16
 80097c4:	d017      	beq.n	80097f6 <AT_ESP8266_ND+0x2efe>
 80097c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097ca:	2b15      	cmp	r3, #21
 80097cc:	d013      	beq.n	80097f6 <AT_ESP8266_ND+0x2efe>
 80097ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097d2:	2b16      	cmp	r3, #22
 80097d4:	d00f      	beq.n	80097f6 <AT_ESP8266_ND+0x2efe>
 80097d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80097da:	2b17      	cmp	r3, #23
 80097dc:	d00b      	beq.n	80097f6 <AT_ESP8266_ND+0x2efe>
 80097de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80097ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80097f0:	4293      	cmp	r3, r2
 80097f2:	f340 82fa 	ble.w	8009dea <AT_ESP8266_ND+0x34f2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80097f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80097fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8009808:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800980c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2200      	movs	r2, #0
 8009814:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8009818:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800981c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2200      	movs	r2, #0
 8009824:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8009828:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800982c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2200      	movs	r2, #0
 8009834:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 8009838:	e2d7      	b.n	8009dea <AT_ESP8266_ND+0x34f2>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 800983a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800983e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8009842:	2200      	movs	r2, #0
 8009844:	601a      	str	r2, [r3, #0]
 8009846:	2200      	movs	r2, #0
 8009848:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 800984a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800984e:	2b10      	cmp	r3, #16
 8009850:	d003      	beq.n	800985a <AT_ESP8266_ND+0x2f62>
 8009852:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009856:	2b0a      	cmp	r3, #10
 8009858:	d124      	bne.n	80098a4 <AT_ESP8266_ND+0x2fac>
				{
					a->_estado=AT_decode;
 800985a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800985e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009868:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 800986c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009870:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2200      	movs	r2, #0
 8009878:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 800987c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009880:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2200      	movs	r2, #0
 8009888:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 800988c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009890:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2200      	movs	r2, #0
 8009898:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 800989c:	e2a7      	b.n	8009dee <AT_ESP8266_ND+0x34f6>
 800989e:	bf00      	nop
 80098a0:	08010b54 	.word	0x08010b54
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 80098a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	f040 8102 	bne.w	8009abc <AT_ESP8266_ND+0x31c4>
 80098b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f040 80f8 	bne.w	8009abc <AT_ESP8266_ND+0x31c4>
										a->_ejecucion=1;
 80098cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 80098dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2218      	movs	r2, #24
 80098e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80098ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80098f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 80098fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009900:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800990a:	1c5a      	adds	r2, r3, #1
 800990c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009910:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 800991a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800991e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2200      	movs	r2, #0
 8009926:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 800992a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800992e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 800993a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800993e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009948:	4620      	mov	r0, r4
 800994a:	f7f6 fc53 	bl	80001f4 <strlen>
 800994e:	4603      	mov	r3, r0
 8009950:	4423      	add	r3, r4
 8009952:	4a83      	ldr	r2, [pc, #524]	; (8009b60 <AT_ESP8266_ND+0x3268>)
 8009954:	461c      	mov	r4, r3
 8009956:	4613      	mov	r3, r2
 8009958:	cb07      	ldmia	r3!, {r0, r1, r2}
 800995a:	6020      	str	r0, [r4, #0]
 800995c:	6061      	str	r1, [r4, #4]
 800995e:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 8009960:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009964:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 800996e:	f107 020c 	add.w	r2, r7, #12
 8009972:	4611      	mov	r1, r2
 8009974:	4618      	mov	r0, r3
 8009976:	f005 fa59 	bl	800ee2c <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 800997a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800997e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009988:	f107 030c 	add.w	r3, r7, #12
 800998c:	4618      	mov	r0, r3
 800998e:	f7f6 fc31 	bl	80001f4 <strlen>
 8009992:	4602      	mov	r2, r0
 8009994:	f107 030c 	add.w	r3, r7, #12
 8009998:	4619      	mov	r1, r3
 800999a:	4620      	mov	r0, r4
 800999c:	f005 fce7 	bl	800f36e <strncat>
										strncat(a->_uart2snd,",",1);
 80099a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80099ae:	4620      	mov	r0, r4
 80099b0:	f7f6 fc20 	bl	80001f4 <strlen>
 80099b4:	4603      	mov	r3, r0
 80099b6:	4423      	add	r3, r4
 80099b8:	496a      	ldr	r1, [pc, #424]	; (8009b64 <AT_ESP8266_ND+0x326c>)
 80099ba:	461a      	mov	r2, r3
 80099bc:	460b      	mov	r3, r1
 80099be:	881b      	ldrh	r3, [r3, #0]
 80099c0:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 80099c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 80099d0:	f107 020c 	add.w	r2, r7, #12
 80099d4:	4611      	mov	r1, r2
 80099d6:	4618      	mov	r0, r3
 80099d8:	f005 fa28 	bl	800ee2c <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 80099dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80099e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80099ea:	f107 030c 	add.w	r3, r7, #12
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7f6 fc00 	bl	80001f4 <strlen>
 80099f4:	4602      	mov	r2, r0
 80099f6:	f107 030c 	add.w	r3, r7, #12
 80099fa:	4619      	mov	r1, r3
 80099fc:	4620      	mov	r0, r4
 80099fe:	f005 fcb6 	bl	800f36e <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8009a02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8009a10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4610      	mov	r0, r2
 8009a22:	f005 fd85 	bl	800f530 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8009a26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009a34:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8009a38:	2202      	movs	r2, #2
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f005 fc97 	bl	800f36e <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8009a40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7f6 fbd0 	bl	80001f4 <strlen>
 8009a54:	4603      	mov	r3, r0
 8009a56:	461a      	mov	r2, r3
 8009a58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009a66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a6a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8009a74:	4620      	mov	r0, r4
 8009a76:	f7f6 fbbd 	bl	80001f4 <strlen>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	4423      	add	r3, r4
 8009a7e:	4a3a      	ldr	r2, [pc, #232]	; (8009b68 <AT_ESP8266_ND+0x3270>)
 8009a80:	461c      	mov	r4, r3
 8009a82:	4613      	mov	r3, r2
 8009a84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009a86:	6020      	str	r0, [r4, #0]
 8009a88:	6061      	str	r1, [r4, #4]
 8009a8a:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009a8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009a90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009a9a:	1c5a      	adds	r2, r3, #1
 8009a9c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009aa0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 8009aaa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009aae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009abc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ac0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009aca:	1c5a      	adds	r2, r3, #1
 8009acc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ad0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009ada:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ade:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f040 80b8 	bne.w	8009c5e <AT_ESP8266_ND+0x3366>
 8009aee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009af2:	2b13      	cmp	r3, #19
 8009af4:	f000 80b3 	beq.w	8009c5e <AT_ESP8266_ND+0x3366>
 8009af8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009afc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8009b06:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b0a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8009b14:	4619      	mov	r1, r3
 8009b16:	4610      	mov	r0, r2
 8009b18:	f7f6 fb62 	bl	80001e0 <strcmp>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d024      	beq.n	8009b6c <AT_ESP8266_ND+0x3274>
 8009b22:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d020      	beq.n	8009b6c <AT_ESP8266_ND+0x3274>
 8009b2a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009b2e:	2b14      	cmp	r3, #20
 8009b30:	d01c      	beq.n	8009b6c <AT_ESP8266_ND+0x3274>
 8009b32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b44:	4293      	cmp	r3, r2
 8009b46:	f340 808a 	ble.w	8009c5e <AT_ESP8266_ND+0x3366>
 8009b4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	f040 8080 	bne.w	8009c5e <AT_ESP8266_ND+0x3366>
 8009b5e:	e005      	b.n	8009b6c <AT_ESP8266_ND+0x3274>
 8009b60:	08010b3c 	.word	0x08010b3c
 8009b64:	08010b64 	.word	0x08010b64
 8009b68:	08010b48 	.word	0x08010b48
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8009b6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	dd17      	ble.n	8009bb2 <AT_ESP8266_ND+0x32ba>
 8009b82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d10e      	bne.n	8009bb2 <AT_ESP8266_ND+0x32ba>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009b94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009b98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8009ba2:	1c5a      	adds	r2, r3, #1
 8009ba4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ba8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8009bb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bb6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8009bc0:	1c5a      	adds	r2, r3, #1
 8009bc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8009bd0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bd4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009bde:	1c5a      	adds	r2, r3, #1
 8009be0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009be4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8009bee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009bf2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8009bfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8009c0c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c10:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8009c1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009c28:	2361      	movs	r3, #97	; 0x61
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	f005 f9a7 	bl	800ef80 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8009c32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8009c40:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c44:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8009c4e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c52:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 8009c5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c6c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009c70:	f040 80bd 	bne.w	8009dee <AT_ESP8266_ND+0x34f6>
 8009c74:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c78:	2b13      	cmp	r3, #19
 8009c7a:	d02b      	beq.n	8009cd4 <AT_ESP8266_ND+0x33dc>
 8009c7c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c80:	2b0b      	cmp	r3, #11
 8009c82:	d027      	beq.n	8009cd4 <AT_ESP8266_ND+0x33dc>
 8009c84:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009c88:	2b0c      	cmp	r3, #12
 8009c8a:	d023      	beq.n	8009cd4 <AT_ESP8266_ND+0x33dc>
 8009c8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009c90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	dc18      	bgt.n	8009cd4 <AT_ESP8266_ND+0x33dc>
 8009ca2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009ca6:	2b0a      	cmp	r3, #10
 8009ca8:	d014      	beq.n	8009cd4 <AT_ESP8266_ND+0x33dc>
 8009caa:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009cae:	2b10      	cmp	r3, #16
 8009cb0:	d010      	beq.n	8009cd4 <AT_ESP8266_ND+0x33dc>
 8009cb2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009cb6:	2b11      	cmp	r3, #17
 8009cb8:	d00c      	beq.n	8009cd4 <AT_ESP8266_ND+0x33dc>
 8009cba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009cbe:	2b12      	cmp	r3, #18
 8009cc0:	d008      	beq.n	8009cd4 <AT_ESP8266_ND+0x33dc>
 8009cc2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009cc6:	2b16      	cmp	r3, #22
 8009cc8:	d004      	beq.n	8009cd4 <AT_ESP8266_ND+0x33dc>
 8009cca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009cce:	2b19      	cmp	r3, #25
 8009cd0:	f040 808d 	bne.w	8009dee <AT_ESP8266_ND+0x34f6>
									a->_debug_count5++;
 8009cd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009ce2:	1c5a      	adds	r2, r3, #1
 8009ce4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009ce8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8009cf2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009cf6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d04:	4293      	cmp	r3, r2
 8009d06:	dd25      	ble.n	8009d54 <AT_ESP8266_ND+0x345c>
										a->_debug_count8++;
 8009d08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8009d16:	1c5a      	adds	r2, r3, #1
 8009d18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8009d26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009d34:	1c5a      	adds	r2, r3, #1
 8009d36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8009d44:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d48:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8009d54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	dd07      	ble.n	8009d76 <AT_ESP8266_ND+0x347e>
 8009d66:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d6a:	2b10      	cmp	r3, #16
 8009d6c:	d003      	beq.n	8009d76 <AT_ESP8266_ND+0x347e>
 8009d6e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009d72:	2b0a      	cmp	r3, #10
 8009d74:	d108      	bne.n	8009d88 <AT_ESP8266_ND+0x3490>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009d76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009d88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009d98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009d9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009da8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009db8:	e019      	b.n	8009dee <AT_ESP8266_ND+0x34f6>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009dba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009dbe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009dcc:	e010      	b.n	8009df0 <AT_ESP8266_ND+0x34f8>
			break;
 8009dce:	bf00      	nop
 8009dd0:	e00e      	b.n	8009df0 <AT_ESP8266_ND+0x34f8>
			break;
 8009dd2:	bf00      	nop
 8009dd4:	e00c      	b.n	8009df0 <AT_ESP8266_ND+0x34f8>
			break;
 8009dd6:	bf00      	nop
 8009dd8:	e00a      	b.n	8009df0 <AT_ESP8266_ND+0x34f8>
			break;
 8009dda:	bf00      	nop
 8009ddc:	e008      	b.n	8009df0 <AT_ESP8266_ND+0x34f8>
			break;
 8009dde:	bf00      	nop
 8009de0:	e006      	b.n	8009df0 <AT_ESP8266_ND+0x34f8>
			break;
 8009de2:	bf00      	nop
 8009de4:	e004      	b.n	8009df0 <AT_ESP8266_ND+0x34f8>
			break;
 8009de6:	bf00      	nop
 8009de8:	e002      	b.n	8009df0 <AT_ESP8266_ND+0x34f8>
			break;
 8009dea:	bf00      	nop
 8009dec:	e000      	b.n	8009df0 <AT_ESP8266_ND+0x34f8>
			break;
 8009dee:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 8009df0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009df4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 8009e00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 8009e10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009e14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f507 7715 	add.w	r7, r7, #596	; 0x254
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e28 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e3a:	f240 328d 	movw	r2, #909	; 0x38d
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	f001 83c3 	beq.w	800b5ca <WiFi_Conn_ND+0x17a2>
 8009e44:	f240 328d 	movw	r2, #909	; 0x38d
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	f301 8453 	bgt.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009e4e:	f240 3289 	movw	r2, #905	; 0x389
 8009e52:	4293      	cmp	r3, r2
 8009e54:	f001 8335 	beq.w	800b4c2 <WiFi_Conn_ND+0x169a>
 8009e58:	f240 3289 	movw	r2, #905	; 0x389
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	f301 8449 	bgt.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009e62:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009e66:	f001 8224 	beq.w	800b2b2 <WiFi_Conn_ND+0x148a>
 8009e6a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009e6e:	f301 8441 	bgt.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009e72:	f240 3229 	movw	r2, #809	; 0x329
 8009e76:	4293      	cmp	r3, r2
 8009e78:	f301 843c 	bgt.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009e7c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009e80:	f280 80a5 	bge.w	8009fce <WiFi_Conn_ND+0x1a6>
 8009e84:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	f000 8776 	beq.w	800ad7a <WiFi_Conn_ND+0xf52>
 8009e8e:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009e92:	4293      	cmp	r3, r2
 8009e94:	f301 842e 	bgt.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009e98:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	f000 86fc 	beq.w	800ac9a <WiFi_Conn_ND+0xe72>
 8009ea2:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	f301 8424 	bgt.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009eac:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009eb0:	f000 862b 	beq.w	800ab0a <WiFi_Conn_ND+0xce2>
 8009eb4:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009eb8:	f301 841c 	bgt.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009ebc:	f240 2261 	movw	r2, #609	; 0x261
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	f000 85b1 	beq.w	800aa28 <WiFi_Conn_ND+0xc00>
 8009ec6:	f240 2261 	movw	r2, #609	; 0x261
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	f301 8412 	bgt.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009ed0:	f240 225d 	movw	r2, #605	; 0x25d
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	f000 8551 	beq.w	800a97c <WiFi_Conn_ND+0xb54>
 8009eda:	f240 225d 	movw	r2, #605	; 0x25d
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	f301 8408 	bgt.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009ee4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009ee8:	f000 84cf 	beq.w	800a88a <WiFi_Conn_ND+0xa62>
 8009eec:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009ef0:	f301 8400 	bgt.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009ef4:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	f000 846a 	beq.w	800a7d2 <WiFi_Conn_ND+0x9aa>
 8009efe:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8009f02:	f281 83f7 	bge.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009f06:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	f000 8425 	beq.w	800a75a <WiFi_Conn_ND+0x932>
 8009f10:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8009f14:	f281 83ee 	bge.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009f18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009f1c:	f000 83b0 	beq.w	800a680 <WiFi_Conn_ND+0x858>
 8009f20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009f24:	f301 83e6 	bgt.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009f28:	f240 1299 	movw	r2, #409	; 0x199
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	f000 8369 	beq.w	800a604 <WiFi_Conn_ND+0x7dc>
 8009f32:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8009f36:	f281 83dd 	bge.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009f3a:	f240 1295 	movw	r2, #405	; 0x195
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	f000 8329 	beq.w	800a596 <WiFi_Conn_ND+0x76e>
 8009f44:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 8009f48:	f281 83d4 	bge.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009f4c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009f50:	f000 82a0 	beq.w	800a494 <WiFi_Conn_ND+0x66c>
 8009f54:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009f58:	f301 83cc 	bgt.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009f5c:	f240 1235 	movw	r2, #309	; 0x135
 8009f60:	4293      	cmp	r3, r2
 8009f62:	f000 8271 	beq.w	800a448 <WiFi_Conn_ND+0x620>
 8009f66:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009f6a:	f281 83c3 	bge.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009f6e:	f240 1231 	movw	r2, #305	; 0x131
 8009f72:	4293      	cmp	r3, r2
 8009f74:	f000 8263 	beq.w	800a43e <WiFi_Conn_ND+0x616>
 8009f78:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009f7c:	f281 83ba 	bge.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009f80:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009f84:	f000 8207 	beq.w	800a396 <WiFi_Conn_ND+0x56e>
 8009f88:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009f8c:	f301 83b2 	bgt.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009f90:	2bd1      	cmp	r3, #209	; 0xd1
 8009f92:	f000 81a0 	beq.w	800a2d6 <WiFi_Conn_ND+0x4ae>
 8009f96:	2bd1      	cmp	r3, #209	; 0xd1
 8009f98:	f301 83ac 	bgt.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009f9c:	2bcd      	cmp	r3, #205	; 0xcd
 8009f9e:	f000 8170 	beq.w	800a282 <WiFi_Conn_ND+0x45a>
 8009fa2:	2bcd      	cmp	r3, #205	; 0xcd
 8009fa4:	f301 83a6 	bgt.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009fa8:	2bc8      	cmp	r3, #200	; 0xc8
 8009faa:	f000 80f1 	beq.w	800a190 <WiFi_Conn_ND+0x368>
 8009fae:	2bc8      	cmp	r3, #200	; 0xc8
 8009fb0:	f301 83a0 	bgt.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009fb4:	2b6d      	cmp	r3, #109	; 0x6d
 8009fb6:	f000 80b3 	beq.w	800a120 <WiFi_Conn_ND+0x2f8>
 8009fba:	2b6d      	cmp	r3, #109	; 0x6d
 8009fbc:	f301 839a 	bgt.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009fc0:	2b64      	cmp	r3, #100	; 0x64
 8009fc2:	d021      	beq.n	800a008 <WiFi_Conn_ND+0x1e0>
 8009fc4:	2b69      	cmp	r3, #105	; 0x69
 8009fc6:	f000 8096 	beq.w	800a0f6 <WiFi_Conn_ND+0x2ce>
 8009fca:	f001 bb93 	b.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009fce:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 8009fd2:	2b09      	cmp	r3, #9
 8009fd4:	f201 838e 	bhi.w	800b6f4 <WiFi_Conn_ND+0x18cc>
 8009fd8:	a201      	add	r2, pc, #4	; (adr r2, 8009fe0 <WiFi_Conn_ND+0x1b8>)
 8009fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fde:	bf00      	nop
 8009fe0:	0800ae87 	.word	0x0800ae87
 8009fe4:	0800b6f5 	.word	0x0800b6f5
 8009fe8:	0800b6f5 	.word	0x0800b6f5
 8009fec:	0800b6f5 	.word	0x0800b6f5
 8009ff0:	0800b6f5 	.word	0x0800b6f5
 8009ff4:	0800af55 	.word	0x0800af55
 8009ff8:	0800aff5 	.word	0x0800aff5
 8009ffc:	0800b095 	.word	0x0800b095
 800a000:	0800b135 	.word	0x0800b135
 800a004:	0800b1d5 	.word	0x0800b1d5
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a00e:	2b64      	cmp	r3, #100	; 0x64
 800a010:	d046      	beq.n	800a0a0 <WiFi_Conn_ND+0x278>
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d041      	beq.n	800a0a0 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a022:	2b1c      	cmp	r3, #28
 800a024:	d03c      	beq.n	800a0a0 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	d037      	beq.n	800a0a0 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a036:	2b04      	cmp	r3, #4
 800a038:	d032      	beq.n	800a0a0 <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a040:	2b13      	cmp	r3, #19
 800a042:	d02d      	beq.n	800a0a0 <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f7fc fac1 	bl	80065cc <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a050:	2b01      	cmp	r3, #1
 800a052:	d14e      	bne.n	800a0f2 <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f7fc fc4f 	bl	80068f8 <AT_ESP8266_ND>
 800a05a:	4602      	mov	r2, r0
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a070:	2b01      	cmp	r3, #1
 800a072:	d109      	bne.n	800a088 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a080:	4619      	mov	r1, r3
 800a082:	4610      	mov	r0, r2
 800a084:	f7f7 fa34 	bl	80014f0 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a094:	b29a      	uxth	r2, r3
 800a096:	2364      	movs	r3, #100	; 0x64
 800a098:	68b8      	ldr	r0, [r7, #8]
 800a09a:	f7fb f9f3 	bl	8005484 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 800a09e:	e028      	b.n	800a0f2 <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d004      	beq.n	800a0b4 <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 800a0b0:	2b1c      	cmp	r3, #28
 800a0b2:	d103      	bne.n	800a0bc <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	226d      	movs	r2, #109	; 0x6d
 800a0b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d00f      	beq.n	800a0e6 <WiFi_Conn_ND+0x2be>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0cc:	2b04      	cmp	r3, #4
 800a0ce:	d00a      	beq.n	800a0e6 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d6:	2b0b      	cmp	r3, #11
 800a0d8:	d005      	beq.n	800a0e6 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e0:	2b0c      	cmp	r3, #12
 800a0e2:	f041 82d8 	bne.w	800b696 <WiFi_Conn_ND+0x186e>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2269      	movs	r2, #105	; 0x69
 800a0ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 800a0ee:	f001 bad2 	b.w	800b696 <WiFi_Conn_ND+0x186e>
 800a0f2:	f001 bad0 	b.w	800b696 <WiFi_Conn_ND+0x186e>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f7fc fa68 	bl	80065cc <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2264      	movs	r2, #100	; 0x64
 800a100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 800a11c:	f001 baea 	b.w	800b6f4 <WiFi_Conn_ND+0x18cc>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00c      	beq.n	800a144 <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f7fc fa7a 	bl	8006624 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a136:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800a142:	e00e      	b.n	800a162 <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f7fc fa57 	bl	80065f8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	22c8      	movs	r2, #200	; 0xc8
 800a14e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a168:	2b04      	cmp	r3, #4
 800a16a:	f041 8296 	bne.w	800b69a <WiFi_Conn_ND+0x1872>
					{
						Cambiar_CWMODE(b);
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f7fc fa2c 	bl	80065cc <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2264      	movs	r2, #100	; 0x64
 800a178:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a18c:	f001 ba85 	b.w	800b69a <WiFi_Conn_ND+0x1872>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a196:	2bc8      	cmp	r3, #200	; 0xc8
 800a198:	d04f      	beq.n	800a23a <WiFi_Conn_ND+0x412>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d04a      	beq.n	800a23a <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d045      	beq.n	800a23a <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b4:	2b03      	cmp	r3, #3
 800a1b6:	d040      	beq.n	800a23a <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1be:	2b04      	cmp	r3, #4
 800a1c0:	d03b      	beq.n	800a23a <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1c8:	2b0a      	cmp	r3, #10
 800a1ca:	d036      	beq.n	800a23a <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d2:	2b0b      	cmp	r3, #11
 800a1d4:	d031      	beq.n	800a23a <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1dc:	2b0c      	cmp	r3, #12
 800a1de:	d02c      	beq.n	800a23a <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f7fc fa09 	bl	80065f8 <ConectarWIFI>
						if(b->_enviaruart==1)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d124      	bne.n	800a23a <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f7fc fb81 	bl	80068f8 <AT_ESP8266_ND>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d109      	bne.n	800a224 <WiFi_Conn_ND+0x3fc>
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a21c:	4619      	mov	r1, r3
 800a21e:	4610      	mov	r0, r2
 800a220:	f7f7 f966 	bl	80014f0 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a230:	b29a      	uxth	r2, r3
 800a232:	2364      	movs	r3, #100	; 0x64
 800a234:	68b8      	ldr	r0, [r7, #8]
 800a236:	f7fb f925 	bl	8005484 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a240:	2b01      	cmp	r3, #1
 800a242:	d004      	beq.n	800a24e <WiFi_Conn_ND+0x426>
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a24a:	2b0c      	cmp	r3, #12
 800a24c:	d103      	bne.n	800a256 <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	22d1      	movs	r2, #209	; 0xd1
 800a252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d00a      	beq.n	800a276 <WiFi_Conn_ND+0x44e>
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a266:	2b03      	cmp	r3, #3
 800a268:	d005      	beq.n	800a276 <WiFi_Conn_ND+0x44e>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a270:	2b20      	cmp	r3, #32
 800a272:	f041 8214 	bne.w	800b69e <WiFi_Conn_ND+0x1876>
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	22cd      	movs	r2, #205	; 0xcd
 800a27a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a27e:	f001 ba0e 	b.w	800b69e <WiFi_Conn_ND+0x1876>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 800a282:	f241 3088 	movw	r0, #5000	; 0x1388
 800a286:	f7f8 fc49 	bl	8002b1c <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f7fc f9b4 	bl	80065f8 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	22c8      	movs	r2, #200	; 0xc8
 800a294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ae:	2b04      	cmp	r3, #4
 800a2b0:	f041 81f7 	bne.w	800b6a2 <WiFi_Conn_ND+0x187a>
					{
						Cambiar_CWMODE(b);
 800a2b4:	68f8      	ldr	r0, [r7, #12]
 800a2b6:	f7fc f989 	bl	80065cc <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2264      	movs	r2, #100	; 0x64
 800a2be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a2d2:	f001 b9e6 	b.w	800b6a2 <WiFi_Conn_ND+0x187a>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d108      	bne.n	800a2fa <WiFi_Conn_ND+0x4d2>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f240 3229 	movw	r2, #809	; 0x329
 800a2ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)) //Si me desconecto, me vuelvo a conectar
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a300:	2b0a      	cmp	r3, #10
 800a302:	d004      	beq.n	800a30e <WiFi_Conn_ND+0x4e6>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a30a:	2b0d      	cmp	r3, #13
 800a30c:	d10a      	bne.n	800a324 <WiFi_Conn_ND+0x4fc>
				{
					ConectarWIFI(b);
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f7fc f972 	bl	80065f8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	22c8      	movs	r2, #200	; 0xc8
 800a318:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2200      	movs	r2, #0
 800a320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a32a:	2b04      	cmp	r3, #4
 800a32c:	d10e      	bne.n	800a34c <WiFi_Conn_ND+0x524>
					{
						Cambiar_CWMODE(b);
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f7fc f94c 	bl	80065cc <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2264      	movs	r2, #100	; 0x64
 800a338:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a352:	2b00      	cmp	r3, #0
 800a354:	d011      	beq.n	800a37a <WiFi_Conn_ND+0x552>
				{//
					CrearServidorTCP(b);
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f7fc f9bc 	bl	80066d4 <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2200      	movs	r2, #0
 800a372:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 800a376:	f001 b9bd 	b.w	800b6f4 <WiFi_Conn_ND+0x18cc>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f7fc f952 	bl	8006624 <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 800a392:	f001 b9af 	b.w	800b6f4 <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a39c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800a3a0:	d03b      	beq.n	800a41a <WiFi_Conn_ND+0x5f2>
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a8:	2b04      	cmp	r3, #4
 800a3aa:	d036      	beq.n	800a41a <WiFi_Conn_ND+0x5f2>
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3b2:	2b0a      	cmp	r3, #10
 800a3b4:	d031      	beq.n	800a41a <WiFi_Conn_ND+0x5f2>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3bc:	2b0d      	cmp	r3, #13
 800a3be:	d02c      	beq.n	800a41a <WiFi_Conn_ND+0x5f2>
				{
						DesconectarWIFI(b);
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f7fc f95b 	bl	800667c <DesconectarWIFI>
						if(b->_enviaruart==1)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d124      	bne.n	800a41a <WiFi_Conn_ND+0x5f2>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f7fc fa91 	bl	80068f8 <AT_ESP8266_ND>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d109      	bne.n	800a404 <WiFi_Conn_ND+0x5dc>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	4610      	mov	r0, r2
 800a400:	f7f7 f876 	bl	80014f0 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a410:	b29a      	uxth	r2, r3
 800a412:	2364      	movs	r3, #100	; 0x64
 800a414:	68b8      	ldr	r0, [r7, #8]
 800a416:	f7fb f835 	bl	8005484 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a420:	2b0a      	cmp	r3, #10
 800a422:	d005      	beq.n	800a430 <WiFi_Conn_ND+0x608>
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a42a:	2b0d      	cmp	r3, #13
 800a42c:	f041 813b 	bne.w	800b6a6 <WiFi_Conn_ND+0x187e>
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f240 1235 	movw	r2, #309	; 0x135
 800a436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a43a:	f001 b934 	b.w	800b6a6 <WiFi_Conn_ND+0x187e>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f7fc f8ae 	bl	80065a0 <NOP>
			}
			break;
 800a444:	f001 b956 	b.w	800b6f4 <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f7fc f8d1 	bl	80065f8 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	22c8      	movs	r2, #200	; 0xc8
 800a45a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a46c:	2b04      	cmp	r3, #4
 800a46e:	f041 811c 	bne.w	800b6aa <WiFi_Conn_ND+0x1882>
					{
						Cambiar_CWMODE(b);
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f7fc f8aa 	bl	80065cc <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2264      	movs	r2, #100	; 0x64
 800a47c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 800a490:	f001 b90b 	b.w	800b6aa <WiFi_Conn_ND+0x1882>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a49a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a49e:	d04f      	beq.n	800a540 <WiFi_Conn_ND+0x718>
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4a6:	2b04      	cmp	r3, #4
 800a4a8:	d04a      	beq.n	800a540 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_ok)
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d045      	beq.n	800a540 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_error)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ba:	2b02      	cmp	r3, #2
 800a4bc:	d040      	beq.n	800a540 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_ok)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4c4:	2b07      	cmp	r3, #7
 800a4c6:	d03b      	beq.n	800a540 <WiFi_Conn_ND+0x718>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ce:	2b08      	cmp	r3, #8
 800a4d0:	d036      	beq.n	800a540 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_err)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4d8:	2b1e      	cmp	r3, #30
 800a4da:	d031      	beq.n	800a540 <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e2:	2b1f      	cmp	r3, #31
 800a4e4:	d02c      	beq.n	800a540 <WiFi_Conn_ND+0x718>
				{
						MUX(b);
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f7fc f89c 	bl	8006624 <MUX>
						if(b->_enviaruart==1)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d124      	bne.n	800a540 <WiFi_Conn_ND+0x718>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a4f6:	68f8      	ldr	r0, [r7, #12]
 800a4f8:	f7fc f9fe 	bl	80068f8 <AT_ESP8266_ND>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a512:	2b01      	cmp	r3, #1
 800a514:	d109      	bne.n	800a52a <WiFi_Conn_ND+0x702>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a522:	4619      	mov	r1, r3
 800a524:	4610      	mov	r0, r2
 800a526:	f7f6 ffe3 	bl	80014f0 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a536:	b29a      	uxth	r2, r3
 800a538:	2364      	movs	r3, #100	; 0x64
 800a53a:	68b8      	ldr	r0, [r7, #8]
 800a53c:	f7fa ffa2 	bl	8005484 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a546:	2b01      	cmp	r3, #1
 800a548:	d009      	beq.n	800a55e <WiFi_Conn_ND+0x736>
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a550:	2b07      	cmp	r3, #7
 800a552:	d004      	beq.n	800a55e <WiFi_Conn_ND+0x736>
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a55a:	2b08      	cmp	r3, #8
 800a55c:	d104      	bne.n	800a568 <WiFi_Conn_ND+0x740>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f240 1299 	movw	r2, #409	; 0x199
 800a564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d00a      	beq.n	800a588 <WiFi_Conn_ND+0x760>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a578:	2b1e      	cmp	r3, #30
 800a57a:	d005      	beq.n	800a588 <WiFi_Conn_ND+0x760>
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a582:	2b1f      	cmp	r3, #31
 800a584:	f041 8093 	bne.w	800b6ae <WiFi_Conn_ND+0x1886>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f240 1295 	movw	r2, #405	; 0x195
 800a58e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a592:	f001 b88c 	b.w	800b6ae <WiFi_Conn_ND+0x1886>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f7fc f802 	bl	80065a0 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5a2:	2b04      	cmp	r3, #4
 800a5a4:	d112      	bne.n	800a5cc <WiFi_Conn_ND+0x7a4>
				{
					Cambiar_CWMODE(b);
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f7fc f810 	bl	80065cc <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2264      	movs	r2, #100	; 0x64
 800a5b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d2:	2b0a      	cmp	r3, #10
 800a5d4:	d005      	beq.n	800a5e2 <WiFi_Conn_ND+0x7ba>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5dc:	2b0d      	cmp	r3, #13
 800a5de:	f041 8068 	bne.w	800b6b2 <WiFi_Conn_ND+0x188a>
				{
					ConectarWIFI(b);
 800a5e2:	68f8      	ldr	r0, [r7, #12]
 800a5e4:	f7fc f808 	bl	80065f8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	22c8      	movs	r2, #200	; 0xc8
 800a5ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a600:	f001 b857 	b.w	800b6b2 <WiFi_Conn_ND+0x188a>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f7fb ffcb 	bl	80065a0 <NOP>
				b->_n_orig=0; //Borro el vector RX
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a618:	2b04      	cmp	r3, #4
 800a61a:	d10e      	bne.n	800a63a <WiFi_Conn_ND+0x812>
					{
						Cambiar_CWMODE(b);
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f7fb ffd5 	bl	80065cc <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2264      	movs	r2, #100	; 0x64
 800a626:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2200      	movs	r2, #0
 800a636:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a640:	2b0a      	cmp	r3, #10
 800a642:	d004      	beq.n	800a64e <WiFi_Conn_ND+0x826>
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a64a:	2b0d      	cmp	r3, #13
 800a64c:	d10a      	bne.n	800a664 <WiFi_Conn_ND+0x83c>
					{
						ConectarWIFI(b);
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f7fb ffd2 	bl	80065f8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	22c8      	movs	r2, #200	; 0xc8
 800a658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}

					IPDef(b);
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f7fb fff3 	bl	8006650 <IPDef>
					b->_estado_conexion=DEF_IP_EN_CURSO;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2200      	movs	r2, #0
 800a678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 800a67c:	f001 b83a 	b.w	800b6f4 <WiFi_Conn_ND+0x18cc>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a686:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a68a:	d045      	beq.n	800a718 <WiFi_Conn_ND+0x8f0>
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a692:	2b04      	cmp	r3, #4
 800a694:	d040      	beq.n	800a718 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_ok)
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d03b      	beq.n	800a718 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_error)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d036      	beq.n	800a718 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_ok)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6b0:	2b1b      	cmp	r3, #27
 800a6b2:	d031      	beq.n	800a718 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ba:	2b21      	cmp	r3, #33	; 0x21
 800a6bc:	d02c      	beq.n	800a718 <WiFi_Conn_ND+0x8f0>
				{
						IPDef(b);
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f7fb ffc6 	bl	8006650 <IPDef>
						if(b->_enviaruart==1)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d124      	bne.n	800a718 <WiFi_Conn_ND+0x8f0>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f7fc f912 	bl	80068f8 <AT_ESP8266_ND>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d109      	bne.n	800a702 <WiFi_Conn_ND+0x8da>
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	4610      	mov	r0, r2
 800a6fe:	f7f6 fef7 	bl	80014f0 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a70e:	b29a      	uxth	r2, r3
 800a710:	2364      	movs	r3, #100	; 0x64
 800a712:	68b8      	ldr	r0, [r7, #8]
 800a714:	f7fa feb6 	bl	8005484 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d004      	beq.n	800a72c <WiFi_Conn_ND+0x904>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a728:	2b1b      	cmp	r3, #27
 800a72a:	d104      	bne.n	800a736 <WiFi_Conn_ND+0x90e>
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f240 12fd 	movw	r2, #509	; 0x1fd
 800a732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a73c:	2b02      	cmp	r3, #2
 800a73e:	d005      	beq.n	800a74c <WiFi_Conn_ND+0x924>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a746:	2b21      	cmp	r3, #33	; 0x21
 800a748:	f040 87b5 	bne.w	800b6b6 <WiFi_Conn_ND+0x188e>
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f240 12f9 	movw	r2, #505	; 0x1f9
 800a752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 800a756:	f000 bfae 	b.w	800b6b6 <WiFi_Conn_ND+0x188e>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 800a75a:	68f8      	ldr	r0, [r7, #12]
 800a75c:	f7fb ff20 	bl	80065a0 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a766:	2b04      	cmp	r3, #4
 800a768:	d004      	beq.n	800a774 <WiFi_Conn_ND+0x94c>
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a770:	2b02      	cmp	r3, #2
 800a772:	d112      	bne.n	800a79a <WiFi_Conn_ND+0x972>
				{
					Cambiar_CWMODE(b);
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f7fb ff29 	bl	80065cc <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2264      	movs	r2, #100	; 0x64
 800a77e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2200      	movs	r2, #0
 800a796:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7a0:	2b0a      	cmp	r3, #10
 800a7a2:	d005      	beq.n	800a7b0 <WiFi_Conn_ND+0x988>
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7aa:	2b0d      	cmp	r3, #13
 800a7ac:	f040 8785 	bne.w	800b6ba <WiFi_Conn_ND+0x1892>
				{
					ConectarWIFI(b);
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f7fb ff21 	bl	80065f8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	22c8      	movs	r2, #200	; 0xc8
 800a7ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a7ce:	f000 bf74 	b.w	800b6ba <WiFi_Conn_ND+0x1892>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f7fb fee4 	bl	80065a0 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	d112      	bne.n	800a808 <WiFi_Conn_ND+0x9e0>
					{
						Cambiar_CWMODE(b);
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f7fb fef2 	bl	80065cc <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2264      	movs	r2, #100	; 0x64
 800a7ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2200      	movs	r2, #0
 800a804:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a80e:	2b0a      	cmp	r3, #10
 800a810:	d004      	beq.n	800a81c <WiFi_Conn_ND+0x9f4>
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a818:	2b0d      	cmp	r3, #13
 800a81a:	d10e      	bne.n	800a83a <WiFi_Conn_ND+0xa12>
					{
						ConectarWIFI(b);
 800a81c:	68f8      	ldr	r0, [r7, #12]
 800a81e:	f7fb feeb 	bl	80065f8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	22c8      	movs	r2, #200	; 0xc8
 800a826:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2200      	movs	r2, #0
 800a836:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800a840:	2b00      	cmp	r3, #0
 800a842:	d111      	bne.n	800a868 <WiFi_Conn_ND+0xa40>
					{
						ConectarTCP(b);
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f7fb ff2f 	bl	80066a8 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a850:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2200      	movs	r2, #0
 800a858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						//b->_estado_conexion=TCP_SRVR_EN_CURSO;
						//b->_estado=0;
						//b->_n_orig=0; //Borro el vector RX
					}
			}
			break;
 800a864:	f000 bf46 	b.w	800b6f4 <WiFi_Conn_ND+0x18cc>
						ConectarWIFI(b);//
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f7fb fec5 	bl	80065f8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	22c8      	movs	r2, #200	; 0xc8
 800a872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2200      	movs	r2, #0
 800a87a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2200      	movs	r2, #0
 800a882:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a886:	f000 bf35 	b.w	800b6f4 <WiFi_Conn_ND+0x18cc>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a890:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a894:	d04a      	beq.n	800a92c <WiFi_Conn_ND+0xb04>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d045      	beq.n	800a92c <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_ok)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d040      	beq.n	800a92c <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_wifi_disconnect)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8b0:	2b0a      	cmp	r3, #10
 800a8b2:	d03b      	beq.n	800a92c <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ba:	2b0e      	cmp	r3, #14
 800a8bc:	d036      	beq.n	800a92c <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_conectado)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8c4:	2b0f      	cmp	r3, #15
 800a8c6:	d031      	beq.n	800a92c <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8ce:	2b10      	cmp	r3, #16
 800a8d0:	d02c      	beq.n	800a92c <WiFi_Conn_ND+0xb04>
				{
					ConectarTCP(b);
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f7fb fee8 	bl	80066a8 <ConectarTCP>
						if(b->_enviaruart==1)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d124      	bne.n	800a92c <WiFi_Conn_ND+0xb04>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f7fc f808 	bl	80068f8 <AT_ESP8266_ND>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d109      	bne.n	800a916 <WiFi_Conn_ND+0xaee>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a90e:	4619      	mov	r1, r3
 800a910:	4610      	mov	r0, r2
 800a912:	f7f6 fded 	bl	80014f0 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a922:	b29a      	uxth	r2, r3
 800a924:	2364      	movs	r3, #100	; 0x64
 800a926:	68b8      	ldr	r0, [r7, #8]
 800a928:	f7fa fdac 	bl	8005484 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a932:	2b01      	cmp	r3, #1
 800a934:	d009      	beq.n	800a94a <WiFi_Conn_ND+0xb22>
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a93c:	2b0e      	cmp	r3, #14
 800a93e:	d004      	beq.n	800a94a <WiFi_Conn_ND+0xb22>
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a946:	2b0f      	cmp	r3, #15
 800a948:	d106      	bne.n	800a958 <WiFi_Conn_ND+0xb30>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f240 2261 	movw	r2, #609	; 0x261
 800a950:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800a954:	f000 beb3 	b.w	800b6be <WiFi_Conn_ND+0x1896>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d005      	beq.n	800a96e <WiFi_Conn_ND+0xb46>
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a968:	2b10      	cmp	r3, #16
 800a96a:	f040 86a8 	bne.w	800b6be <WiFi_Conn_ND+0x1896>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f240 225d 	movw	r2, #605	; 0x25d
 800a974:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800a978:	f000 bea1 	b.w	800b6be <WiFi_Conn_ND+0x1896>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f7fb fe0f 	bl	80065a0 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a988:	2b04      	cmp	r3, #4
 800a98a:	d112      	bne.n	800a9b2 <WiFi_Conn_ND+0xb8a>
				{
					Cambiar_CWMODE(b);
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f7fb fe1d 	bl	80065cc <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2264      	movs	r2, #100	; 0x64
 800a996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b8:	2b0a      	cmp	r3, #10
 800a9ba:	d004      	beq.n	800a9c6 <WiFi_Conn_ND+0xb9e>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c2:	2b0d      	cmp	r3, #13
 800a9c4:	d10e      	bne.n	800a9e4 <WiFi_Conn_ND+0xbbc>
				{
					ConectarWIFI(b);
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f7fb fe16 	bl	80065f8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	22c8      	movs	r2, #200	; 0xc8
 800a9d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ea:	2b02      	cmp	r3, #2
 800a9ec:	d00a      	beq.n	800aa04 <WiFi_Conn_ND+0xbdc>
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9f4:	2b10      	cmp	r3, #16
 800a9f6:	d005      	beq.n	800aa04 <WiFi_Conn_ND+0xbdc>
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9fe:	2b0e      	cmp	r3, #14
 800aa00:	f040 865f 	bne.w	800b6c2 <WiFi_Conn_ND+0x189a>
				{
					ConectarTCP(b);
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f7fb fe4f 	bl	80066a8 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aa10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800aa24:	f000 be4d 	b.w	800b6c2 <WiFi_Conn_ND+0x189a>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f7fb fdb9 	bl	80065a0 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa34:	2b04      	cmp	r3, #4
 800aa36:	d112      	bne.n	800aa5e <WiFi_Conn_ND+0xc36>
					{
						Cambiar_CWMODE(b);
 800aa38:	68f8      	ldr	r0, [r7, #12]
 800aa3a:	f7fb fdc7 	bl	80065cc <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2264      	movs	r2, #100	; 0x64
 800aa42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa64:	2b0a      	cmp	r3, #10
 800aa66:	d004      	beq.n	800aa72 <WiFi_Conn_ND+0xc4a>
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa6e:	2b0d      	cmp	r3, #13
 800aa70:	d10e      	bne.n	800aa90 <WiFi_Conn_ND+0xc68>
					{
						ConectarWIFI(b);
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f7fb fdc0 	bl	80065f8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	22c8      	movs	r2, #200	; 0xc8
 800aa7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d004      	beq.n	800aaa4 <WiFi_Conn_ND+0xc7c>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaa0:	2b10      	cmp	r3, #16
 800aaa2:	d10f      	bne.n	800aac4 <WiFi_Conn_ND+0xc9c>
					{
						ConectarTCP(b);
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f7fb fdff 	bl	80066a8 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaca:	2b0e      	cmp	r3, #14
 800aacc:	d005      	beq.n	800aada <WiFi_Conn_ND+0xcb2>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aad4:	2b0f      	cmp	r3, #15
 800aad6:	f040 85f6 	bne.w	800b6c6 <WiFi_Conn_ND+0x189e>
					{
						if(b->_automatizacion >= WF_SEND )
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aae0:	2b02      	cmp	r3, #2
 800aae2:	f240 85f0 	bls.w	800b6c6 <WiFi_Conn_ND+0x189e>
						{
							EnviarDatos(b);
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f7fb fe20 	bl	800672c <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800aaf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800ab06:	f000 bdde 	b.w	800b6c6 <WiFi_Conn_ND+0x189e>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab10:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800ab14:	d054      	beq.n	800abc0 <WiFi_Conn_ND+0xd98>
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d04f      	beq.n	800abc0 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_wifi_disconnect)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab26:	2b0a      	cmp	r3, #10
 800ab28:	d04a      	beq.n	800abc0 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_desconectado)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab30:	2b10      	cmp	r3, #16
 800ab32:	d045      	beq.n	800abc0 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_snd_err)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab3a:	2b11      	cmp	r3, #17
 800ab3c:	d040      	beq.n	800abc0 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_ok_to_send)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab44:	2b14      	cmp	r3, #20
 800ab46:	d03b      	beq.n	800abc0 <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab4e:	2b12      	cmp	r3, #18
 800ab50:	d036      	beq.n	800abc0 <WiFi_Conn_ND+0xd98>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d907      	bls.n	800ab6c <WiFi_Conn_ND+0xd44>
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d002      	beq.n	800ab6c <WiFi_Conn_ND+0xd44>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f7fb fde0 	bl	800672c <EnviarDatos>
							b->_data2SND[9]=0x00;
							b->_data2SND[10]=0x00;
							b->_data2SND[11]=0x0A;
							b->_n_D2SND=12;*/
					}
						if(b->_enviaruart==1)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d124      	bne.n	800abc0 <WiFi_Conn_ND+0xd98>
							{
								b->_estado=AT_ESP8266_ND(b);
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f7fb febe 	bl	80068f8 <AT_ESP8266_ND>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d109      	bne.n	800abaa <WiFi_Conn_ND+0xd82>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800aba2:	4619      	mov	r1, r3
 800aba4:	4610      	mov	r0, r2
 800aba6:	f7f6 fca3 	bl	80014f0 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800abb6:	b29a      	uxth	r2, r3
 800abb8:	2364      	movs	r3, #100	; 0x64
 800abba:	68b8      	ldr	r0, [r7, #8]
 800abbc:	f7fa fc62 	bl	8005484 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abc6:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800abca:	d13b      	bne.n	800ac44 <WiFi_Conn_ND+0xe1c>
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d136      	bne.n	800ac44 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_error)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d031      	beq.n	800ac44 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_wifi_disconnect)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abe6:	2b0a      	cmp	r3, #10
 800abe8:	d02c      	beq.n	800ac44 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_desconectado)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf0:	2b10      	cmp	r3, #16
 800abf2:	d027      	beq.n	800ac44 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_snd_err)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abfa:	2b11      	cmp	r3, #17
 800abfc:	d022      	beq.n	800ac44 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_enviado_error))
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac04:	2b12      	cmp	r3, #18
 800ac06:	d01d      	beq.n	800ac44 <WiFi_Conn_ND+0xe1c>
							{
								b->_enviaruart=0;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d109      	bne.n	800ac2e <WiFi_Conn_ND+0xe06>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ac26:	4619      	mov	r1, r3
 800ac28:	4610      	mov	r0, r2
 800ac2a:	f7f6 fc61 	bl	80014f0 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	2364      	movs	r3, #100	; 0x64
 800ac3e:	68b8      	ldr	r0, [r7, #8]
 800ac40:	f7fa fc20 	bl	8005484 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4a:	2b13      	cmp	r3, #19
 800ac4c:	d104      	bne.n	800ac58 <WiFi_Conn_ND+0xe30>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f240 22c5 	movw	r2, #709	; 0x2c5
 800ac54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d014      	beq.n	800ac8c <WiFi_Conn_ND+0xe64>
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac68:	2b0a      	cmp	r3, #10
 800ac6a:	d00f      	beq.n	800ac8c <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_desconectado)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac72:	2b10      	cmp	r3, #16
 800ac74:	d00a      	beq.n	800ac8c <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_snd_err)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac7c:	2b11      	cmp	r3, #17
 800ac7e:	d005      	beq.n	800ac8c <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_enviado_error))
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac86:	2b12      	cmp	r3, #18
 800ac88:	f040 851f 	bne.w	800b6ca <WiFi_Conn_ND+0x18a2>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f240 22c1 	movw	r2, #705	; 0x2c1
 800ac92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800ac96:	f000 bd18 	b.w	800b6ca <WiFi_Conn_ND+0x18a2>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800ac9a:	68f8      	ldr	r0, [r7, #12]
 800ac9c:	f7fb fc80 	bl	80065a0 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aca6:	2b04      	cmp	r3, #4
 800aca8:	d112      	bne.n	800acd0 <WiFi_Conn_ND+0xea8>
				{
					Cambiar_CWMODE(b);
 800acaa:	68f8      	ldr	r0, [r7, #12]
 800acac:	f7fb fc8e 	bl	80065cc <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2264      	movs	r2, #100	; 0x64
 800acb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2200      	movs	r2, #0
 800acbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2200      	movs	r2, #0
 800accc:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acd6:	2b0a      	cmp	r3, #10
 800acd8:	d004      	beq.n	800ace4 <WiFi_Conn_ND+0xebc>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ace0:	2b0d      	cmp	r3, #13
 800ace2:	d10e      	bne.n	800ad02 <WiFi_Conn_ND+0xeda>
				{
					ConectarWIFI(b);
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f7fb fc87 	bl	80065f8 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	22c8      	movs	r2, #200	; 0xc8
 800acee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad08:	2b0c      	cmp	r3, #12
 800ad0a:	d10f      	bne.n	800ad2c <WiFi_Conn_ND+0xf04>
				{
					ConectarTCP(b);
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f7fb fccb 	bl	80066a8 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ad18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	d00f      	beq.n	800ad56 <WiFi_Conn_ND+0xf2e>
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad3c:	2b10      	cmp	r3, #16
 800ad3e:	d00a      	beq.n	800ad56 <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_snd_err)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad46:	2b11      	cmp	r3, #17
 800ad48:	d005      	beq.n	800ad56 <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad50:	2b12      	cmp	r3, #18
 800ad52:	f040 84bc 	bne.w	800b6ce <WiFi_Conn_ND+0x18a6>
				{
					ConectarTCP(b);
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	f7fb fca6 	bl	80066a8 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ad62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800ad76:	f000 bcaa 	b.w	800b6ce <WiFi_Conn_ND+0x18a6>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800ad7a:	68f8      	ldr	r0, [r7, #12]
 800ad7c:	f7fb fc10 	bl	80065a0 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad86:	2b04      	cmp	r3, #4
 800ad88:	d112      	bne.n	800adb0 <WiFi_Conn_ND+0xf88>
					{
						Cambiar_CWMODE(b);
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f7fb fc1e 	bl	80065cc <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2264      	movs	r2, #100	; 0x64
 800ad94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adb6:	2b0a      	cmp	r3, #10
 800adb8:	d004      	beq.n	800adc4 <WiFi_Conn_ND+0xf9c>
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adc0:	2b0d      	cmp	r3, #13
 800adc2:	d10e      	bne.n	800ade2 <WiFi_Conn_ND+0xfba>
					{
						ConectarWIFI(b);
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f7fb fc17 	bl	80065f8 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	22c8      	movs	r2, #200	; 0xc8
 800adce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d00e      	beq.n	800ae0a <WiFi_Conn_ND+0xfe2>
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adf2:	2b0b      	cmp	r3, #11
 800adf4:	d009      	beq.n	800ae0a <WiFi_Conn_ND+0xfe2>
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adfc:	2b0c      	cmp	r3, #12
 800adfe:	d004      	beq.n	800ae0a <WiFi_Conn_ND+0xfe2>
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae06:	2b10      	cmp	r3, #16
 800ae08:	d10f      	bne.n	800ae2a <WiFi_Conn_ND+0x1002>
					{
						ConectarTCP(b);
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f7fb fc4c 	bl	80066a8 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f44f 7216 	mov.w	r2, #600	; 0x258
 800ae16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800ae2a:	20c8      	movs	r0, #200	; 0xc8
 800ae2c:	f7f7 fe76 	bl	8002b1c <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d916      	bls.n	800ae68 <WiFi_Conn_ND+0x1040>
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d011      	beq.n	800ae68 <WiFi_Conn_ND+0x1040>
					{
							EnviarDatos(b);
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f7fb fc71 	bl	800672c <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800ae50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800ae64:	f000 bc46 	b.w	800b6f4 <WiFi_Conn_ND+0x18cc>
							b->_estado_conexion=TCP_CONN_OK;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f240 2261 	movw	r2, #609	; 0x261
 800ae6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2200      	movs	r2, #0
 800ae76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800ae82:	f000 bc37 	b.w	800b6f4 <WiFi_Conn_ND+0x18cc>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae8c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800ae90:	d045      	beq.n	800af1e <WiFi_Conn_ND+0x10f6>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	d040      	beq.n	800af1e <WiFi_Conn_ND+0x10f6>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aea2:	2b0a      	cmp	r3, #10
 800aea4:	d03b      	beq.n	800af1e <WiFi_Conn_ND+0x10f6>
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeac:	2b15      	cmp	r3, #21
 800aeae:	d036      	beq.n	800af1e <WiFi_Conn_ND+0x10f6>
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb6:	2b16      	cmp	r3, #22
 800aeb8:	d031      	beq.n	800af1e <WiFi_Conn_ND+0x10f6>
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aec0:	2b17      	cmp	r3, #23
 800aec2:	d02c      	beq.n	800af1e <WiFi_Conn_ND+0x10f6>
							{
								CrearServidorTCP(b);
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f7fb fc05 	bl	80066d4 <CrearServidorTCP>
									if(b->_enviaruart==1)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d124      	bne.n	800af1e <WiFi_Conn_ND+0x10f6>
										{
											b->_estado=AT_ESP8266_ND(b);
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f7fb fd0f 	bl	80068f8 <AT_ESP8266_ND>
 800aeda:	4602      	mov	r2, r0
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2200      	movs	r2, #0
 800aee6:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d109      	bne.n	800af08 <WiFi_Conn_ND+0x10e0>
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800af00:	4619      	mov	r1, r3
 800af02:	4610      	mov	r0, r2
 800af04:	f7f6 faf4 	bl	80014f0 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800af14:	b29a      	uxth	r2, r3
 800af16:	2364      	movs	r3, #100	; 0x64
 800af18:	68b8      	ldr	r0, [r7, #8]
 800af1a:	f7fa fab3 	bl	8005484 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af24:	2b15      	cmp	r3, #21
 800af26:	d004      	beq.n	800af32 <WiFi_Conn_ND+0x110a>
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af2e:	2b17      	cmp	r3, #23
 800af30:	d104      	bne.n	800af3c <WiFi_Conn_ND+0x1114>
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f240 3229 	movw	r2, #809	; 0x329
 800af38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af42:	2b16      	cmp	r3, #22
 800af44:	f040 83c5 	bne.w	800b6d2 <WiFi_Conn_ND+0x18aa>
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f240 3225 	movw	r2, #805	; 0x325
 800af4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800af52:	e3be      	b.n	800b6d2 <WiFi_Conn_ND+0x18aa>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f7fb fb23 	bl	80065a0 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af60:	2b04      	cmp	r3, #4
 800af62:	d112      	bne.n	800af8a <WiFi_Conn_ND+0x1162>
							{
								Cambiar_CWMODE(b);
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f7fb fb31 	bl	80065cc <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2264      	movs	r2, #100	; 0x64
 800af6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2200      	movs	r2, #0
 800af76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2200      	movs	r2, #0
 800af86:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af90:	2b0a      	cmp	r3, #10
 800af92:	d004      	beq.n	800af9e <WiFi_Conn_ND+0x1176>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af9a:	2b0d      	cmp	r3, #13
 800af9c:	d10e      	bne.n	800afbc <WiFi_Conn_ND+0x1194>
							{
								ConectarWIFI(b);
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f7fb fb2a 	bl	80065f8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	22c8      	movs	r2, #200	; 0xc8
 800afa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afc2:	2b02      	cmp	r3, #2
 800afc4:	d005      	beq.n	800afd2 <WiFi_Conn_ND+0x11aa>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afcc:	2b10      	cmp	r3, #16
 800afce:	f040 8382 	bne.w	800b6d6 <WiFi_Conn_ND+0x18ae>
							{
								ConectarTCP(b);
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f7fb fb68 	bl	80066a8 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f44f 7216 	mov.w	r2, #600	; 0x258
 800afde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2200      	movs	r2, #0
 800afee:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800aff2:	e370      	b.n	800b6d6 <WiFi_Conn_ND+0x18ae>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f7fb fad3 	bl	80065a0 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b000:	2b04      	cmp	r3, #4
 800b002:	d112      	bne.n	800b02a <WiFi_Conn_ND+0x1202>
							{
								Cambiar_CWMODE(b);
 800b004:	68f8      	ldr	r0, [r7, #12]
 800b006:	f7fb fae1 	bl	80065cc <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2264      	movs	r2, #100	; 0x64
 800b00e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2200      	movs	r2, #0
 800b016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b030:	2b0a      	cmp	r3, #10
 800b032:	d004      	beq.n	800b03e <WiFi_Conn_ND+0x1216>
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b03a:	2b0d      	cmp	r3, #13
 800b03c:	d10e      	bne.n	800b05c <WiFi_Conn_ND+0x1234>
							{
								ConectarWIFI(b);
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f7fb fada 	bl	80065f8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	22c8      	movs	r2, #200	; 0xc8
 800b048:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2200      	movs	r2, #0
 800b050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2200      	movs	r2, #0
 800b058:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b062:	2b02      	cmp	r3, #2
 800b064:	d005      	beq.n	800b072 <WiFi_Conn_ND+0x124a>
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b06c:	2b10      	cmp	r3, #16
 800b06e:	f040 8334 	bne.w	800b6da <WiFi_Conn_ND+0x18b2>
							{
								ConectarTCP(b);
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f7fb fb18 	bl	80066a8 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b07e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2200      	movs	r2, #0
 800b086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b092:	e322      	b.n	800b6da <WiFi_Conn_ND+0x18b2>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b094:	68f8      	ldr	r0, [r7, #12]
 800b096:	f7fb fa83 	bl	80065a0 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0a0:	2b04      	cmp	r3, #4
 800b0a2:	d112      	bne.n	800b0ca <WiFi_Conn_ND+0x12a2>
							{
								Cambiar_CWMODE(b);
 800b0a4:	68f8      	ldr	r0, [r7, #12]
 800b0a6:	f7fb fa91 	bl	80065cc <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2264      	movs	r2, #100	; 0x64
 800b0ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0d0:	2b0a      	cmp	r3, #10
 800b0d2:	d004      	beq.n	800b0de <WiFi_Conn_ND+0x12b6>
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0da:	2b0d      	cmp	r3, #13
 800b0dc:	d10e      	bne.n	800b0fc <WiFi_Conn_ND+0x12d4>
							{
								ConectarWIFI(b);
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f7fb fa8a 	bl	80065f8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	22c8      	movs	r2, #200	; 0xc8
 800b0e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b102:	2b02      	cmp	r3, #2
 800b104:	d005      	beq.n	800b112 <WiFi_Conn_ND+0x12ea>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b10c:	2b10      	cmp	r3, #16
 800b10e:	f040 82e6 	bne.w	800b6de <WiFi_Conn_ND+0x18b6>
							{
								ConectarTCP(b);
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	f7fb fac8 	bl	80066a8 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b11e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2200      	movs	r2, #0
 800b126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b132:	e2d4      	b.n	800b6de <WiFi_Conn_ND+0x18b6>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f7fb fa33 	bl	80065a0 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b140:	2b04      	cmp	r3, #4
 800b142:	d112      	bne.n	800b16a <WiFi_Conn_ND+0x1342>
							{
								Cambiar_CWMODE(b);
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f7fb fa41 	bl	80065cc <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2264      	movs	r2, #100	; 0x64
 800b14e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2200      	movs	r2, #0
 800b156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2200      	movs	r2, #0
 800b15e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2200      	movs	r2, #0
 800b166:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b170:	2b0a      	cmp	r3, #10
 800b172:	d004      	beq.n	800b17e <WiFi_Conn_ND+0x1356>
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b17a:	2b0d      	cmp	r3, #13
 800b17c:	d10e      	bne.n	800b19c <WiFi_Conn_ND+0x1374>
							{
								ConectarWIFI(b);
 800b17e:	68f8      	ldr	r0, [r7, #12]
 800b180:	f7fb fa3a 	bl	80065f8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	22c8      	movs	r2, #200	; 0xc8
 800b188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2200      	movs	r2, #0
 800b190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1a2:	2b02      	cmp	r3, #2
 800b1a4:	d005      	beq.n	800b1b2 <WiFi_Conn_ND+0x138a>
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1ac:	2b10      	cmp	r3, #16
 800b1ae:	f040 8298 	bne.w	800b6e2 <WiFi_Conn_ND+0x18ba>
							{
								ConectarTCP(b);
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	f7fb fa78 	bl	80066a8 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b1be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800b1d2:	e286      	b.n	800b6e2 <WiFi_Conn_ND+0x18ba>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f7fb f9e3 	bl	80065a0 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1e8:	2b04      	cmp	r3, #4
 800b1ea:	d112      	bne.n	800b212 <WiFi_Conn_ND+0x13ea>
								{
									Cambiar_CWMODE(b);
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f7fb f9ed 	bl	80065cc <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2264      	movs	r2, #100	; 0x64
 800b1f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2200      	movs	r2, #0
 800b206:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b218:	2b0a      	cmp	r3, #10
 800b21a:	d004      	beq.n	800b226 <WiFi_Conn_ND+0x13fe>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b222:	2b0d      	cmp	r3, #13
 800b224:	d10e      	bne.n	800b244 <WiFi_Conn_ND+0x141c>
								{
									ConectarWIFI(b);
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f7fb f9e6 	bl	80065f8 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	22c8      	movs	r2, #200	; 0xc8
 800b230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2200      	movs	r2, #0
 800b238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2200      	movs	r2, #0
 800b240:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b24a:	2b02      	cmp	r3, #2
 800b24c:	d004      	beq.n	800b258 <WiFi_Conn_ND+0x1430>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b254:	2b10      	cmp	r3, #16
 800b256:	d10f      	bne.n	800b278 <WiFi_Conn_ND+0x1450>
								{
									ConectarTCP(b);
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f7fb fa25 	bl	80066a8 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b264:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2200      	movs	r2, #0
 800b26c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2200      	movs	r2, #0
 800b274:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b27e:	2b01      	cmp	r3, #1
 800b280:	f040 8231 	bne.w	800b6e6 <WiFi_Conn_ND+0x18be>
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f000 822b 	beq.w	800b6e6 <WiFi_Conn_ND+0x18be>
								{
									EnviarDatosSRVR(b);
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f7fb fa35 	bl	8006700 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b29c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800b2b0:	e219      	b.n	800b6e6 <WiFi_Conn_ND+0x18be>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2b8:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b2bc:	d063      	beq.n	800b386 <WiFi_Conn_ND+0x155e>
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2c4:	2b02      	cmp	r3, #2
 800b2c6:	d05e      	beq.n	800b386 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_disconnect)&&
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800b2ce:	2b0a      	cmp	r3, #10
 800b2d0:	d059      	beq.n	800b386 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_connected)&&
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800b2d8:	2b0b      	cmp	r3, #11
 800b2da:	d054      	beq.n	800b386 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_gotip)&&
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800b2e2:	2b0c      	cmp	r3, #12
 800b2e4:	d04f      	beq.n	800b386 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_desconectado)&&
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800b2ec:	2b10      	cmp	r3, #16
 800b2ee:	d04a      	beq.n	800b386 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_snd_err)&&
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800b2f6:	2b11      	cmp	r3, #17
 800b2f8:	d045      	beq.n	800b386 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800b300:	2b12      	cmp	r3, #18
 800b302:	d040      	beq.n	800b386 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800b30a:	2b13      	cmp	r3, #19
 800b30c:	d03b      	beq.n	800b386 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800b314:	2b16      	cmp	r3, #22
 800b316:	d036      	beq.n	800b386 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b31e:	2b19      	cmp	r3, #25
 800b320:	d031      	beq.n	800b386 <WiFi_Conn_ND+0x155e>
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d02c      	beq.n	800b386 <WiFi_Conn_ND+0x155e>
								{
								EnviarDatosSRVR(b);
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f7fb f9e7 	bl	8006700 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d124      	bne.n	800b386 <WiFi_Conn_ND+0x155e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f7fb fadb 	bl	80068f8 <AT_ESP8266_ND>
 800b342:	4602      	mov	r2, r0
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d109      	bne.n	800b370 <WiFi_Conn_ND+0x1548>
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b368:	4619      	mov	r1, r3
 800b36a:	4610      	mov	r0, r2
 800b36c:	f7f6 f8c0 	bl	80014f0 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	2364      	movs	r3, #100	; 0x64
 800b380:	68b8      	ldr	r0, [r7, #8]
 800b382:	f7fa f87f 	bl	8005484 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b38c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800b390:	d154      	bne.n	800b43c <WiFi_Conn_ND+0x1614>
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d14f      	bne.n	800b43c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_error)&&
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800b3a2:	2b02      	cmp	r3, #2
 800b3a4:	d04a      	beq.n	800b43c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_disconnect)&&
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800b3ac:	2b0a      	cmp	r3, #10
 800b3ae:	d045      	beq.n	800b43c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_connected)&&
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800b3b6:	2b0b      	cmp	r3, #11
 800b3b8:	d040      	beq.n	800b43c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_gotip)&&
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800b3c0:	2b0c      	cmp	r3, #12
 800b3c2:	d03b      	beq.n	800b43c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_desconectado)&&
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800b3ca:	2b10      	cmp	r3, #16
 800b3cc:	d036      	beq.n	800b43c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_snd_err)&&
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800b3d4:	2b11      	cmp	r3, #17
 800b3d6:	d031      	beq.n	800b43c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_error)&&
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800b3de:	2b12      	cmp	r3, #18
 800b3e0:	d02c      	beq.n	800b43c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800b3e8:	2b13      	cmp	r3, #19
 800b3ea:	d027      	beq.n	800b43c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800b3f2:	2b16      	cmp	r3, #22
 800b3f4:	d022      	beq.n	800b43c <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3fc:	2b19      	cmp	r3, #25
 800b3fe:	d01d      	beq.n	800b43c <WiFi_Conn_ND+0x1614>
										{
											b->_enviaruart=0;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2200      	movs	r2, #0
 800b404:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d109      	bne.n	800b426 <WiFi_Conn_ND+0x15fe>
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b41e:	4619      	mov	r1, r3
 800b420:	4610      	mov	r0, r2
 800b422:	f7f6 f865 	bl	80014f0 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800b432:	b29a      	uxth	r2, r3
 800b434:	2364      	movs	r3, #100	; 0x64
 800b436:	68b8      	ldr	r0, [r7, #8]
 800b438:	f7fa f824 	bl	8005484 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b442:	2b13      	cmp	r3, #19
 800b444:	d104      	bne.n	800b450 <WiFi_Conn_ND+0x1628>
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f240 328d 	movw	r2, #909	; 0x38d
 800b44c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b456:	2b02      	cmp	r3, #2
 800b458:	d02d      	beq.n	800b4b6 <WiFi_Conn_ND+0x168e>
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b460:	2b04      	cmp	r3, #4
 800b462:	d028      	beq.n	800b4b6 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800b46a:	2b0a      	cmp	r3, #10
 800b46c:	d023      	beq.n	800b4b6 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b474:	2b0b      	cmp	r3, #11
 800b476:	d01e      	beq.n	800b4b6 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800b47e:	2b0c      	cmp	r3, #12
 800b480:	d019      	beq.n	800b4b6 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b488:	2b10      	cmp	r3, #16
 800b48a:	d014      	beq.n	800b4b6 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800b492:	2b11      	cmp	r3, #17
 800b494:	d00f      	beq.n	800b4b6 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b49c:	2b12      	cmp	r3, #18
 800b49e:	d00a      	beq.n	800b4b6 <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800b4a6:	2b16      	cmp	r3, #22
 800b4a8:	d005      	beq.n	800b4b6 <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4b0:	2b19      	cmp	r3, #25
 800b4b2:	f040 811a 	bne.w	800b6ea <WiFi_Conn_ND+0x18c2>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f240 3289 	movw	r2, #905	; 0x389
 800b4bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800b4c0:	e113      	b.n	800b6ea <WiFi_Conn_ND+0x18c2>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f7fb f86c 	bl	80065a0 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4ce:	2b04      	cmp	r3, #4
 800b4d0:	d009      	beq.n	800b4e6 <WiFi_Conn_ND+0x16be>
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4d8:	2b0b      	cmp	r3, #11
 800b4da:	d004      	beq.n	800b4e6 <WiFi_Conn_ND+0x16be>
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4e2:	2b0c      	cmp	r3, #12
 800b4e4:	d112      	bne.n	800b50c <WiFi_Conn_ND+0x16e4>
							{
								Cambiar_CWMODE(b);
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f7fb f870 	bl	80065cc <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2264      	movs	r2, #100	; 0x64
 800b4f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2200      	movs	r2, #0
 800b508:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b512:	2b0a      	cmp	r3, #10
 800b514:	d004      	beq.n	800b520 <WiFi_Conn_ND+0x16f8>
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b51c:	2b0d      	cmp	r3, #13
 800b51e:	d10e      	bne.n	800b53e <WiFi_Conn_ND+0x1716>
							{
								ConectarWIFI(b);
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f7fb f869 	bl	80065f8 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	22c8      	movs	r2, #200	; 0xc8
 800b52a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2200      	movs	r2, #0
 800b532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2200      	movs	r2, #0
 800b53a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b544:	2b16      	cmp	r3, #22
 800b546:	d10c      	bne.n	800b562 <WiFi_Conn_ND+0x173a>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f240 3225 	movw	r2, #805	; 0x325
 800b54e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2200      	movs	r2, #0
 800b556:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b568:	2b18      	cmp	r3, #24
 800b56a:	d10c      	bne.n	800b586 <WiFi_Conn_ND+0x175e>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f240 3229 	movw	r2, #809	; 0x329
 800b572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2200      	movs	r2, #0
 800b582:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b58c:	2b19      	cmp	r3, #25
 800b58e:	d008      	beq.n	800b5a2 <WiFi_Conn_ND+0x177a>
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b596:	2b11      	cmp	r3, #17
 800b598:	d003      	beq.n	800b5a2 <WiFi_Conn_ND+0x177a>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2212      	movs	r2, #18
 800b59e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	f040 80a0 	bne.w	800b6ee <WiFi_Conn_ND+0x18c6>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b5b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800b5c8:	e091      	b.n	800b6ee <WiFi_Conn_ND+0x18c6>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	f7fa ffe8 	bl	80065a0 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5d6:	2b04      	cmp	r3, #4
 800b5d8:	d009      	beq.n	800b5ee <WiFi_Conn_ND+0x17c6>
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5e0:	2b0b      	cmp	r3, #11
 800b5e2:	d004      	beq.n	800b5ee <WiFi_Conn_ND+0x17c6>
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ea:	2b0c      	cmp	r3, #12
 800b5ec:	d112      	bne.n	800b614 <WiFi_Conn_ND+0x17ec>
								{
									Cambiar_CWMODE(b);
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f7fa ffec 	bl	80065cc <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2264      	movs	r2, #100	; 0x64
 800b5f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2200      	movs	r2, #0
 800b600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2200      	movs	r2, #0
 800b608:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2200      	movs	r2, #0
 800b610:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b61a:	2b0a      	cmp	r3, #10
 800b61c:	d004      	beq.n	800b628 <WiFi_Conn_ND+0x1800>
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b624:	2b0d      	cmp	r3, #13
 800b626:	d10e      	bne.n	800b646 <WiFi_Conn_ND+0x181e>
								{
									ConectarWIFI(b);
 800b628:	68f8      	ldr	r0, [r7, #12]
 800b62a:	f7fa ffe5 	bl	80065f8 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	22c8      	movs	r2, #200	; 0xc8
 800b632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2200      	movs	r2, #0
 800b63a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2200      	movs	r2, #0
 800b642:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d004      	beq.n	800b65a <WiFi_Conn_ND+0x1832>
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800b656:	2b01      	cmp	r3, #1
 800b658:	d14b      	bne.n	800b6f2 <WiFi_Conn_ND+0x18ca>
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800b660:	2b00      	cmp	r3, #0
 800b662:	d046      	beq.n	800b6f2 <WiFi_Conn_ND+0x18ca>
								{
									EnviarDatosSRVR(b);
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f7fb f84b 	bl	8006700 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2200      	movs	r2, #0
 800b678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	2200      	movs	r2, #0
 800b680:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2200      	movs	r2, #0
 800b690:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800b694:	e02d      	b.n	800b6f2 <WiFi_Conn_ND+0x18ca>
			break;
 800b696:	bf00      	nop
 800b698:	e02c      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
			break;
 800b69a:	bf00      	nop
 800b69c:	e02a      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
			break;
 800b69e:	bf00      	nop
 800b6a0:	e028      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
			break;
 800b6a2:	bf00      	nop
 800b6a4:	e026      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
			break;
 800b6a6:	bf00      	nop
 800b6a8:	e024      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
			break;
 800b6aa:	bf00      	nop
 800b6ac:	e022      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
			break;
 800b6ae:	bf00      	nop
 800b6b0:	e020      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
			break;
 800b6b2:	bf00      	nop
 800b6b4:	e01e      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
			break;
 800b6b6:	bf00      	nop
 800b6b8:	e01c      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
			break;
 800b6ba:	bf00      	nop
 800b6bc:	e01a      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
			break;
 800b6be:	bf00      	nop
 800b6c0:	e018      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
			break;
 800b6c2:	bf00      	nop
 800b6c4:	e016      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
			break;
 800b6c6:	bf00      	nop
 800b6c8:	e014      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
			break;
 800b6ca:	bf00      	nop
 800b6cc:	e012      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
			break;
 800b6ce:	bf00      	nop
 800b6d0:	e010      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
						break;
 800b6d2:	bf00      	nop
 800b6d4:	e00e      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
						break;
 800b6d6:	bf00      	nop
 800b6d8:	e00c      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
						break;
 800b6da:	bf00      	nop
 800b6dc:	e00a      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
						break;
 800b6de:	bf00      	nop
 800b6e0:	e008      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
						break;
 800b6e2:	bf00      	nop
 800b6e4:	e006      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
						break;
 800b6e6:	bf00      	nop
 800b6e8:	e004      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
						break;
 800b6ea:	bf00      	nop
 800b6ec:	e002      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
						break;
 800b6ee:	bf00      	nop
 800b6f0:	e000      	b.n	800b6f4 <WiFi_Conn_ND+0x18cc>
						break;
 800b6f2:	bf00      	nop

		}
		return(b->_estado_conexion);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop

0800b704 <httpPOST2>:
			return 0;
		}
}

httpPOST2(char * endpoint, char* server_ip, char * port,  uint16_t * vect_data, uint8_t * decimal,int cdad, uint16_t devId, char  * post, char * body, int max_char)
{
 800b704:	b5b0      	push	{r4, r5, r7, lr}
 800b706:	b08c      	sub	sp, #48	; 0x30
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	607a      	str	r2, [r7, #4]
 800b710:	603b      	str	r3, [r7, #0]
	post[0]='\0';
 800b712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b714:	2200      	movs	r2, #0
 800b716:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800b718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b71a:	2200      	movs	r2, #0
 800b71c:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800b71e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b720:	f7f4 fd68 	bl	80001f4 <strlen>
 800b724:	4603      	mov	r3, r0
 800b726:	461a      	mov	r2, r3
 800b728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b72a:	4413      	add	r3, r2
 800b72c:	4a9d      	ldr	r2, [pc, #628]	; (800b9a4 <httpPOST2+0x2a0>)
 800b72e:	6810      	ldr	r0, [r2, #0]
 800b730:	6018      	str	r0, [r3, #0]
 800b732:	8892      	ldrh	r2, [r2, #4]
 800b734:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f7f4 fd5c 	bl	80001f4 <strlen>
 800b73c:	4603      	mov	r3, r0
 800b73e:	461a      	mov	r2, r3
 800b740:	68f9      	ldr	r1, [r7, #12]
 800b742:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b744:	f003 fe13 	bl	800f36e <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800b748:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b74a:	f7f4 fd53 	bl	80001f4 <strlen>
 800b74e:	4603      	mov	r3, r0
 800b750:	461a      	mov	r2, r3
 800b752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b754:	4413      	add	r3, r2
 800b756:	4994      	ldr	r1, [pc, #592]	; (800b9a8 <httpPOST2+0x2a4>)
 800b758:	461a      	mov	r2, r3
 800b75a:	460b      	mov	r3, r1
 800b75c:	cb03      	ldmia	r3!, {r0, r1}
 800b75e:	6010      	str	r0, [r2, #0]
 800b760:	6051      	str	r1, [r2, #4]
 800b762:	8819      	ldrh	r1, [r3, #0]
 800b764:	789b      	ldrb	r3, [r3, #2]
 800b766:	8111      	strh	r1, [r2, #8]
 800b768:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800b76a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b76c:	f7f4 fd42 	bl	80001f4 <strlen>
 800b770:	4603      	mov	r3, r0
 800b772:	461a      	mov	r2, r3
 800b774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b776:	4413      	add	r3, r2
 800b778:	4a8c      	ldr	r2, [pc, #560]	; (800b9ac <httpPOST2+0x2a8>)
 800b77a:	8811      	ldrh	r1, [r2, #0]
 800b77c:	7892      	ldrb	r2, [r2, #2]
 800b77e:	8019      	strh	r1, [r3, #0]
 800b780:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800b782:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b784:	f7f4 fd36 	bl	80001f4 <strlen>
 800b788:	4603      	mov	r3, r0
 800b78a:	461a      	mov	r2, r3
 800b78c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b78e:	4413      	add	r3, r2
 800b790:	4a87      	ldr	r2, [pc, #540]	; (800b9b0 <httpPOST2+0x2ac>)
 800b792:	6810      	ldr	r0, [r2, #0]
 800b794:	6018      	str	r0, [r3, #0]
 800b796:	8891      	ldrh	r1, [r2, #4]
 800b798:	7992      	ldrb	r2, [r2, #6]
 800b79a:	8099      	strh	r1, [r3, #4]
 800b79c:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800b79e:	68b8      	ldr	r0, [r7, #8]
 800b7a0:	f7f4 fd28 	bl	80001f4 <strlen>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	68b9      	ldr	r1, [r7, #8]
 800b7aa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b7ac:	f003 fddf 	bl	800f36e <strncat>
	strncat(post,":",1);
 800b7b0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b7b2:	f7f4 fd1f 	bl	80001f4 <strlen>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7bc:	4413      	add	r3, r2
 800b7be:	497d      	ldr	r1, [pc, #500]	; (800b9b4 <httpPOST2+0x2b0>)
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	881b      	ldrh	r3, [r3, #0]
 800b7c6:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f7f4 fd13 	bl	80001f4 <strlen>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	6879      	ldr	r1, [r7, #4]
 800b7d4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b7d6:	f003 fdca 	bl	800f36e <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800b7da:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b7dc:	f7f4 fd0a 	bl	80001f4 <strlen>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7e6:	4413      	add	r3, r2
 800b7e8:	4a70      	ldr	r2, [pc, #448]	; (800b9ac <httpPOST2+0x2a8>)
 800b7ea:	8811      	ldrh	r1, [r2, #0]
 800b7ec:	7892      	ldrb	r2, [r2, #2]
 800b7ee:	8019      	strh	r1, [r3, #0]
 800b7f0:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800b7f2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b7f4:	f7f4 fcfe 	bl	80001f4 <strlen>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7fe:	4413      	add	r3, r2
 800b800:	4a6d      	ldr	r2, [pc, #436]	; (800b9b8 <httpPOST2+0x2b4>)
 800b802:	461d      	mov	r5, r3
 800b804:	4614      	mov	r4, r2
 800b806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b808:	6028      	str	r0, [r5, #0]
 800b80a:	6069      	str	r1, [r5, #4]
 800b80c:	60aa      	str	r2, [r5, #8]
 800b80e:	60eb      	str	r3, [r5, #12]
 800b810:	cc07      	ldmia	r4!, {r0, r1, r2}
 800b812:	6128      	str	r0, [r5, #16]
 800b814:	6169      	str	r1, [r5, #20]
 800b816:	61aa      	str	r2, [r5, #24]
 800b818:	8823      	ldrh	r3, [r4, #0]
 800b81a:	78a2      	ldrb	r2, [r4, #2]
 800b81c:	83ab      	strh	r3, [r5, #28]
 800b81e:	4613      	mov	r3, r2
 800b820:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800b822:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b824:	f7f4 fce6 	bl	80001f4 <strlen>
 800b828:	4603      	mov	r3, r0
 800b82a:	461a      	mov	r2, r3
 800b82c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b82e:	4413      	add	r3, r2
 800b830:	4a5e      	ldr	r2, [pc, #376]	; (800b9ac <httpPOST2+0x2a8>)
 800b832:	8811      	ldrh	r1, [r2, #0]
 800b834:	7892      	ldrb	r2, [r2, #2]
 800b836:	8019      	strh	r1, [r3, #0]
 800b838:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b83a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b83c:	f7f4 fcda 	bl	80001f4 <strlen>
 800b840:	4603      	mov	r3, r0
 800b842:	461a      	mov	r2, r3
 800b844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b846:	4413      	add	r3, r2
 800b848:	4a5c      	ldr	r2, [pc, #368]	; (800b9bc <httpPOST2+0x2b8>)
 800b84a:	461c      	mov	r4, r3
 800b84c:	4615      	mov	r5, r2
 800b84e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b850:	6020      	str	r0, [r4, #0]
 800b852:	6061      	str	r1, [r4, #4]
 800b854:	60a2      	str	r2, [r4, #8]
 800b856:	60e3      	str	r3, [r4, #12]

	char _devId[8];
	_devId[0]='\0';
 800b858:	2300      	movs	r3, #0
 800b85a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	INTOA(devId, _devId);
 800b85e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b862:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b866:	4611      	mov	r1, r2
 800b868:	4618      	mov	r0, r3
 800b86a:	f003 fadf 	bl	800ee2c <INTOA>
	char d[8];
	d[0]='\0';
 800b86e:	2300      	movs	r3, #0
 800b870:	773b      	strb	r3, [r7, #28]
	for (int i=0; i < cdad;i++)
 800b872:	2300      	movs	r3, #0
 800b874:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b876:	e037      	b.n	800b8e8 <httpPOST2+0x1e4>
	{
		FTOA(vect_data[i],d,decimal[i]);
 800b878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87a:	005b      	lsls	r3, r3, #1
 800b87c:	683a      	ldr	r2, [r7, #0]
 800b87e:	4413      	add	r3, r2
 800b880:	881b      	ldrh	r3, [r3, #0]
 800b882:	4618      	mov	r0, r3
 800b884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b886:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b888:	4413      	add	r3, r2
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	461a      	mov	r2, r3
 800b88e:	f107 031c 	add.w	r3, r7, #28
 800b892:	4619      	mov	r1, r3
 800b894:	f003 fafe 	bl	800ee94 <FTOA>
		strncat(body,data[i],strlen(data[i]));
 800b898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b89a:	4613      	mov	r3, r2
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	4413      	add	r3, r2
 800b8a0:	005b      	lsls	r3, r3, #1
 800b8a2:	4a47      	ldr	r2, [pc, #284]	; (800b9c0 <httpPOST2+0x2bc>)
 800b8a4:	189c      	adds	r4, r3, r2
 800b8a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8a8:	4613      	mov	r3, r2
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	4413      	add	r3, r2
 800b8ae:	005b      	lsls	r3, r3, #1
 800b8b0:	4a43      	ldr	r2, [pc, #268]	; (800b9c0 <httpPOST2+0x2bc>)
 800b8b2:	4413      	add	r3, r2
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7f4 fc9d 	bl	80001f4 <strlen>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	461a      	mov	r2, r3
 800b8be:	4621      	mov	r1, r4
 800b8c0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b8c2:	f003 fd54 	bl	800f36e <strncat>
		strncat(body,d,strlen(d));
 800b8c6:	f107 031c 	add.w	r3, r7, #28
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7f4 fc92 	bl	80001f4 <strlen>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	f107 031c 	add.w	r3, r7, #28
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b8da:	f003 fd48 	bl	800f36e <strncat>
		d[0]='\0';
 800b8de:	2300      	movs	r3, #0
 800b8e0:	773b      	strb	r3, [r7, #28]
	for (int i=0; i < cdad;i++)
 800b8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	dbc3      	blt.n	800b878 <httpPOST2+0x174>
	}
	// Conversión de datos recibido por ModBUS

	strncat(body,deviceId,strlen(deviceId));
 800b8f0:	4834      	ldr	r0, [pc, #208]	; (800b9c4 <httpPOST2+0x2c0>)
 800b8f2:	f7f4 fc7f 	bl	80001f4 <strlen>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	4932      	ldr	r1, [pc, #200]	; (800b9c4 <httpPOST2+0x2c0>)
 800b8fc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b8fe:	f003 fd36 	bl	800f36e <strncat>
	strncat(body,_devId,strlen(_devId));
 800b902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b906:	4618      	mov	r0, r3
 800b908:	f7f4 fc74 	bl	80001f4 <strlen>
 800b90c:	4602      	mov	r2, r0
 800b90e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b912:	4619      	mov	r1, r3
 800b914:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b916:	f003 fd2a 	bl	800f36e <strncat>

	strncat(body,"}",strlen("}"));
 800b91a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b91c:	f7f4 fc6a 	bl	80001f4 <strlen>
 800b920:	4603      	mov	r3, r0
 800b922:	461a      	mov	r2, r3
 800b924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b926:	4413      	add	r3, r2
 800b928:	4927      	ldr	r1, [pc, #156]	; (800b9c8 <httpPOST2+0x2c4>)
 800b92a:	461a      	mov	r2, r3
 800b92c:	460b      	mov	r3, r1
 800b92e:	881b      	ldrh	r3, [r3, #0]
 800b930:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800b932:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b934:	f7f4 fc5e 	bl	80001f4 <strlen>
 800b938:	4602      	mov	r2, r0
 800b93a:	f107 0314 	add.w	r3, r7, #20
 800b93e:	4619      	mov	r1, r3
 800b940:	4610      	mov	r0, r2
 800b942:	f003 fa73 	bl	800ee2c <INTOA>
	strncat(post,length,strlen(length));
 800b946:	f107 0314 	add.w	r3, r7, #20
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7f4 fc52 	bl	80001f4 <strlen>
 800b950:	4602      	mov	r2, r0
 800b952:	f107 0314 	add.w	r3, r7, #20
 800b956:	4619      	mov	r1, r3
 800b958:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b95a:	f003 fd08 	bl	800f36e <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800b95e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b960:	f7f4 fc48 	bl	80001f4 <strlen>
 800b964:	4603      	mov	r3, r0
 800b966:	461a      	mov	r2, r3
 800b968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b96a:	4413      	add	r3, r2
 800b96c:	4a17      	ldr	r2, [pc, #92]	; (800b9cc <httpPOST2+0x2c8>)
 800b96e:	6810      	ldr	r0, [r2, #0]
 800b970:	6018      	str	r0, [r3, #0]
 800b972:	7912      	ldrb	r2, [r2, #4]
 800b974:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800b976:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b978:	f7f4 fc3c 	bl	80001f4 <strlen>
 800b97c:	4602      	mov	r2, r0
 800b97e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b980:	429a      	cmp	r2, r3
 800b982:	d20a      	bcs.n	800b99a <httpPOST2+0x296>
	{
		strncat(post,body,strlen(body));
 800b984:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800b986:	f7f4 fc35 	bl	80001f4 <strlen>
 800b98a:	4603      	mov	r3, r0
 800b98c:	461a      	mov	r2, r3
 800b98e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b990:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b992:	f003 fcec 	bl	800f36e <strncat>
		return 1 ;
 800b996:	2301      	movs	r3, #1
 800b998:	e000      	b.n	800b99c <httpPOST2+0x298>
	}
		else
		{
			return 0;
 800b99a:	2300      	movs	r3, #0
		}
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3730      	adds	r7, #48	; 0x30
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bdb0      	pop	{r4, r5, r7, pc}
 800b9a4:	08010b7c 	.word	0x08010b7c
 800b9a8:	08010b84 	.word	0x08010b84
 800b9ac:	08010b90 	.word	0x08010b90
 800b9b0:	08010b94 	.word	0x08010b94
 800b9b4:	08010b9c 	.word	0x08010b9c
 800b9b8:	08010ba0 	.word	0x08010ba0
 800b9bc:	08010bc0 	.word	0x08010bc0
 800b9c0:	200000b0 	.word	0x200000b0
 800b9c4:	20000150 	.word	0x20000150
 800b9c8:	08010bd0 	.word	0x08010bd0
 800b9cc:	08010bd4 	.word	0x08010bd4

0800b9d0 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	711a      	strb	r2, [r3, #4]
	m->_timeout=500;						//Timeout para la recepción de respuesta.
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b9ea:	80da      	strh	r2, [r3, #6]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	729a      	strb	r2, [r3, #10]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2220      	movs	r2, #32
 800b9f6:	f883 2620 	strb.w	r2, [r3, #1568]	; 0x620
	m->_Coils=0xF0F0AF5A;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4a1c      	ldr	r2, [pc, #112]	; (800ba70 <ModBUS_Config+0xa0>)
 800b9fe:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	72da      	strb	r2, [r3, #11]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2220      	movs	r2, #32
 800ba0c:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
	m->_Inputs=0xA5FA0F0F;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	4a18      	ldr	r2, [pc, #96]	; (800ba74 <ModBUS_Config+0xa4>)
 800ba14:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	731a      	strb	r2, [r3, #12]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2210      	movs	r2, #16
 800ba22:	f883 262c 	strb.w	r2, [r3, #1580]	; 0x62c

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	735a      	strb	r2, [r3, #13]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2210      	movs	r2, #16
 800ba30:	f883 2632 	strb.w	r2, [r3, #1586]	; 0x632

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	739a      	strb	r2, [r3, #14]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2220      	movs	r2, #32
 800ba3e:	f883 2638 	strb.w	r2, [r3, #1592]	; 0x638

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2201      	movs	r2, #1
 800ba46:	73da      	strb	r2, [r3, #15]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	741a      	strb	r2, [r3, #16]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2220      	movs	r2, #32
 800ba52:	f883 263e 	strb.w	r2, [r3, #1598]	; 0x63e

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	745a      	strb	r2, [r3, #17]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2220      	movs	r2, #32
 800ba60:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
}
 800ba64:	bf00      	nop
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr
 800ba70:	f0f0af5a 	.word	0xf0f0af5a
 800ba74:	a5fa0f0f 	.word	0xa5fa0f0f

0800ba78 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	3305      	adds	r3, #5
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	3306      	adds	r3, #6
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d10b      	bne.n	800baa8 <ModBUS_Check+0x30>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	3302      	adds	r3, #2
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	461a      	mov	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	3303      	adds	r3, #3
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	4413      	add	r3, r2
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d101      	bne.n	800baa8 <ModBUS_Check+0x30>
	{
		return(1);
 800baa4:	2301      	movs	r3, #1
 800baa6:	e000      	b.n	800baaa <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800baa8:	2300      	movs	r3, #0
	}
}
 800baaa:	4618      	mov	r0, r3
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800bab6:	b480      	push	{r7}
 800bab8:	b083      	sub	sp, #12
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f893 2218 	ldrb.w	r2, [r3, #536]	; 0x218
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	7c9b      	ldrb	r3, [r3, #18]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d11d      	bne.n	800bb08 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f893 2219 	ldrb.w	r2, [r3, #537]	; 0x219
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	7cdb      	ldrb	r3, [r3, #19]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d116      	bne.n	800bb08 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d10f      	bne.n	800bb08 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f893 221b 	ldrb.w	r2, [r3, #539]	; 0x21b
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	7d5b      	ldrb	r3, [r3, #21]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d108      	bne.n	800bb08 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 221f 	ldrb.w	r2, [r3, #543]	; 0x21f
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	7e5b      	ldrb	r3, [r3, #25]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d101      	bne.n	800bb08 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800bb04:	2301      	movs	r3, #1
 800bb06:	e000      	b.n	800bb0a <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800bb08:	2300      	movs	r3, #0
	}
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	370c      	adds	r7, #12
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t a, uint16_t b)
{
 800bb16:	b480      	push	{r7}
 800bb18:	b085      	sub	sp, #20
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
 800bb1e:	460b      	mov	r3, r1
 800bb20:	70fb      	strb	r3, [r7, #3]
 800bb22:	4613      	mov	r3, r2
 800bb24:	803b      	strh	r3, [r7, #0]
	uint8_t c=0;
 800bb26:	2300      	movs	r3, #0
 800bb28:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800bb30:	78fa      	ldrb	r2, [r7, #3]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d901      	bls.n	800bb3a <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800bb36:	2301      	movs	r3, #1
 800bb38:	e015      	b.n	800bb66 <ModBUS_F03_Assign+0x50>
	}
	else
	{
		m2->_Holding_Registers[(a*2)+1]=b;
 800bb3a:	78fb      	ldrb	r3, [r7, #3]
 800bb3c:	005b      	lsls	r3, r3, #1
 800bb3e:	3301      	adds	r3, #1
 800bb40:	883a      	ldrh	r2, [r7, #0]
 800bb42:	b2d1      	uxtb	r1, r2
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	4413      	add	r3, r2
 800bb48:	460a      	mov	r2, r1
 800bb4a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
		c=b>>8;
 800bb4e:	883b      	ldrh	r3, [r7, #0]
 800bb50:	0a1b      	lsrs	r3, r3, #8
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(a*2)]=c;
 800bb56:	78fb      	ldrb	r3, [r7, #3]
 800bb58:	005b      	lsls	r3, r3, #1
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	7bfa      	ldrb	r2, [r7, #15]
 800bb60:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

		return(0);
 800bb64:	2300      	movs	r3, #0
	}
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3714      	adds	r7, #20
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr

0800bb72 <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t a)
{
 800bb72:	b480      	push	{r7}
 800bb74:	b085      	sub	sp, #20
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800bb82:	2300      	movs	r3, #0
 800bb84:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800bb8c:	78fa      	ldrb	r2, [r7, #3]
 800bb8e:	429a      	cmp	r2, r3
 800bb90:	d901      	bls.n	800bb96 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800bb92:	2301      	movs	r3, #1
 800bb94:	e015      	b.n	800bbc2 <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(a*2)];
 800bb96:	78fb      	ldrb	r3, [r7, #3]
 800bb98:	005b      	lsls	r3, r3, #1
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800bba2:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800bba4:	89fb      	ldrh	r3, [r7, #14]
 800bba6:	021b      	lsls	r3, r3, #8
 800bba8:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(a*2)+1];
 800bbaa:	78fb      	ldrb	r3, [r7, #3]
 800bbac:	005b      	lsls	r3, r3, #1
 800bbae:	3301      	adds	r3, #1
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 800bbb8:	b29a      	uxth	r2, r3
 800bbba:	89fb      	ldrh	r3, [r7, #14]
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	81fb      	strh	r3, [r7, #14]

		/*m2->_Holding_Registers[(a*2)+1]=b;
		c=b>>8;
		m2->_Holding_Registers[(a*2)]=c;*/
		return(n);
 800bbc0:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3714      	adds	r7, #20
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr

0800bbce <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800bbce:	b480      	push	{r7}
 800bbd0:	b083      	sub	sp, #12
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	807b      	strh	r3, [r7, #2]
 800bbda:	4613      	mov	r3, r2
 800bbdc:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800bbde:	887b      	ldrh	r3, [r7, #2]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	bf14      	ite	ne
 800bbe4:	2301      	movne	r3, #1
 800bbe6:	2300      	moveq	r3, #0
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	461a      	mov	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
	addr&=0xF0;
 800bbf2:	887b      	ldrh	r3, [r7, #2]
 800bbf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbf8:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800bbfa:	887b      	ldrh	r3, [r7, #2]
 800bbfc:	0a1b      	lsrs	r3, r3, #8
 800bbfe:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800bc00:	887b      	ldrh	r3, [r7, #2]
 800bc02:	f003 030f 	and.w	r3, r3, #15
 800bc06:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	m2->_MBUS_2SND[1]=0x00;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
	m2->_MBUS_2SND[2]=0x00;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
	m2->_MBUS_2SND[3]=0x00;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
	m2->_MBUS_2SND[4]=0x00;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
	m2->_MBUS_2SND[5]=0x06;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2206      	movs	r2, #6
 800bc34:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
	m2->_MBUS_2SND[6]=m2->_address;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	781a      	ldrb	r2, [r3, #0]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
	m2->_MBUS_2SND[7]=0x03;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2203      	movs	r2, #3
 800bc46:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
	m2->_MBUS_2SND[8]=addr;
 800bc4a:	887b      	ldrh	r3, [r7, #2]
 800bc4c:	b2da      	uxtb	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220

	m2->_MBUS_2SND[10]=0x00;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
	m2->_MBUS_2SND[11]=qty;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	787a      	ldrb	r2, [r7, #1]
 800bc60:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	220c      	movs	r2, #12
 800bc68:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

}
 800bc6c:	bf00      	nop
 800bc6e:	4618      	mov	r0, r3
 800bc70:	370c      	adds	r7, #12
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
	...

0800bc7c <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b09c      	sub	sp, #112	; 0x70
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	791b      	ldrb	r3, [r3, #4]
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	f041 813f 	bne.w	800cf0c <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f103 0212 	add.w	r2, r3, #18
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	4610      	mov	r0, r2
 800bc9e:	f7ff feeb 	bl	800ba78 <ModBUS_Check>
 800bca2:	4603      	mov	r3, r0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	f001 812f 	beq.w	800cf08 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	7e5b      	ldrb	r3, [r3, #25]
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	2b0f      	cmp	r3, #15
 800bcb2:	f201 80f3 	bhi.w	800ce9c <ModBUS+0x1220>
 800bcb6:	a201      	add	r2, pc, #4	; (adr r2, 800bcbc <ModBUS+0x40>)
 800bcb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcbc:	0800bcfd 	.word	0x0800bcfd
 800bcc0:	0800bf3d 	.word	0x0800bf3d
 800bcc4:	0800c17d 	.word	0x0800c17d
 800bcc8:	0800c3b5 	.word	0x0800c3b5
 800bccc:	0800c5ed 	.word	0x0800c5ed
 800bcd0:	0800c803 	.word	0x0800c803
 800bcd4:	0800ce9d 	.word	0x0800ce9d
 800bcd8:	0800ce9d 	.word	0x0800ce9d
 800bcdc:	0800ce9d 	.word	0x0800ce9d
 800bce0:	0800ce9d 	.word	0x0800ce9d
 800bce4:	0800ce9d 	.word	0x0800ce9d
 800bce8:	0800ce9d 	.word	0x0800ce9d
 800bcec:	0800ce9d 	.word	0x0800ce9d
 800bcf0:	0800ce9d 	.word	0x0800ce9d
 800bcf4:	0800c9bf 	.word	0x0800c9bf
 800bcf8:	0800cc4f 	.word	0x0800cc4f

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	7d9a      	ldrb	r2, [r3, #22]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	7d5a      	ldrb	r2, [r3, #21]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	7d1a      	ldrb	r2, [r3, #20]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	7cda      	ldrb	r2, [r3, #19]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	7c9a      	ldrb	r2, [r3, #18]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	7a9b      	ldrb	r3, [r3, #10]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	f040 80e6 	bne.w	800bf08 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	7e9b      	ldrb	r3, [r3, #26]
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800bd4e:	021b      	lsls	r3, r3, #8
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800bd5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8b3 2622 	ldrh.w	r2, [r3, #1570]	; 0x622
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	7edb      	ldrb	r3, [r3, #27]
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	4313      	orrs	r3, r2
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8a3 2622 	strh.w	r2, [r3, #1570]	; 0x622

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	7f1b      	ldrb	r3, [r3, #28]
 800bd84:	b29a      	uxth	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bd92:	021b      	lsls	r3, r3, #8
 800bd94:	b29a      	uxth	r2, r3
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bda2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bda6:	b29a      	uxth	r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	7f5b      	ldrb	r3, [r3, #29]
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8a3 2624 	strh.w	r2, [r3, #1572]	; 0x624



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8b3 2624 	ldrh.w	r2, [r3, #1572]	; 0x624
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f893 3620 	ldrb.w	r3, [r3, #1568]	; 0x620
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d87e      	bhi.n	800bed4 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8b3 3622 	ldrh.w	r3, [r3, #1570]	; 0x622
 800bddc:	461a      	mov	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800bde4:	4413      	add	r3, r2
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	f892 2620 	ldrb.w	r2, [r2, #1568]	; 0x620
 800bdec:	4293      	cmp	r3, r2
 800bdee:	dc57      	bgt.n	800bea0 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	613b      	str	r3, [r7, #16]
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	60fb      	str	r3, [r7, #12]
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800be00:	2300      	movs	r3, #0
 800be02:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	f8b2 2622 	ldrh.w	r2, [r2, #1570]	; 0x622
 800be10:	40d3      	lsrs	r3, r2
 800be12:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800be1a:	08db      	lsrs	r3, r3, #3
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8b3 3624 	ldrh.w	r3, [r3, #1572]	; 0x624
 800be26:	f003 0307 	and.w	r3, r3, #7
 800be2a:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d102      	bne.n	800be38 <ModBUS+0x1bc>
									{
										bytes=div;
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	66fb      	str	r3, [r7, #108]	; 0x6c
 800be36:	e002      	b.n	800be3e <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	3301      	adds	r3, #1
 800be3c:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800be3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be40:	b2da      	uxtb	r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800be48:	e00e      	b.n	800be68 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800be4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be4c:	3308      	adds	r3, #8
 800be4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800be50:	b2d1      	uxtb	r1, r2
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	4413      	add	r3, r2
 800be56:	460a      	mov	r2, r1
 800be58:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800be5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be5e:	0a1b      	lsrs	r3, r3, #8
 800be60:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800be62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be64:	3b01      	subs	r3, #1
 800be66:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800be68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	dced      	bgt.n	800be4a <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2201      	movs	r2, #1
 800be72:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2201      	movs	r2, #1
 800be7a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800be84:	3303      	adds	r3, #3
 800be86:	b2da      	uxtb	r2, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800be94:	1d9a      	adds	r2, r3, #6
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800be9c:	f001 b8d4 	b.w	800d048 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2202      	movs	r2, #2
 800bea4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x81;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2281      	movs	r2, #129	; 0x81
 800beac:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2201      	movs	r2, #1
 800beb4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2203      	movs	r2, #3
 800bebc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bec6:	1d9a      	adds	r2, r3, #6
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800bece:	2302      	movs	r3, #2
 800bed0:	f001 b8ba 	b.w	800d048 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2203      	movs	r2, #3
 800bed8:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x81;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2281      	movs	r2, #129	; 0x81
 800bee0:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2201      	movs	r2, #1
 800bee8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2203      	movs	r2, #3
 800bef0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800befa:	1d9a      	adds	r2, r3, #6
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800bf02:	2303      	movs	r3, #3
 800bf04:	f001 b8a0 	b.w	800d048 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x81;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2281      	movs	r2, #129	; 0x81
 800bf14:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2203      	movs	r2, #3
 800bf24:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800bf2e:	1d9a      	adds	r2, r3, #6
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800bf36:	2301      	movs	r3, #1
 800bf38:	f001 b886 	b.w	800d048 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	7d9a      	ldrb	r2, [r3, #22]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	7d5a      	ldrb	r2, [r3, #21]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	7d1a      	ldrb	r2, [r3, #20]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	7cda      	ldrb	r2, [r3, #19]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	7c9a      	ldrb	r2, [r3, #18]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	7adb      	ldrb	r3, [r3, #11]
 800bf76:	2b01      	cmp	r3, #1
 800bf78:	f040 80e6 	bne.w	800c148 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	7e9b      	ldrb	r3, [r3, #26]
 800bf80:	b29a      	uxth	r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800bf8e:	021b      	lsls	r3, r3, #8
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800bf9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bfa2:	b29a      	uxth	r2, r3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8b3 2628 	ldrh.w	r2, [r3, #1576]	; 0x628
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	7edb      	ldrb	r3, [r3, #27]
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	b29a      	uxth	r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8a3 2628 	strh.w	r2, [r3, #1576]	; 0x628

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	7f1b      	ldrb	r3, [r3, #28]
 800bfc4:	b29a      	uxth	r2, r3
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800bfd2:	021b      	lsls	r3, r3, #8
 800bfd4:	b29a      	uxth	r2, r3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800bfe2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bfe6:	b29a      	uxth	r2, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	7f5b      	ldrb	r3, [r3, #29]
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	4313      	orrs	r3, r2
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8a3 262a 	strh.w	r2, [r3, #1578]	; 0x62a



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8b3 262a 	ldrh.w	r2, [r3, #1578]	; 0x62a
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f893 3626 	ldrb.w	r3, [r3, #1574]	; 0x626
 800c010:	b29b      	uxth	r3, r3
 800c012:	429a      	cmp	r2, r3
 800c014:	d87e      	bhi.n	800c114 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8b3 3628 	ldrh.w	r3, [r3, #1576]	; 0x628
 800c01c:	461a      	mov	r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c024:	4413      	add	r3, r2
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	f892 2626 	ldrb.w	r2, [r2, #1574]	; 0x626
 800c02c:	4293      	cmp	r3, r2
 800c02e:	dc57      	bgt.n	800c0e0 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800c030:	2300      	movs	r3, #0
 800c032:	623b      	str	r3, [r7, #32]
 800c034:	2300      	movs	r3, #0
 800c036:	61fb      	str	r3, [r7, #28]
 800c038:	2300      	movs	r3, #0
 800c03a:	667b      	str	r3, [r7, #100]	; 0x64
 800c03c:	2300      	movs	r3, #0
 800c03e:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800c040:	2300      	movs	r3, #0
 800c042:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	f8b2 2628 	ldrh.w	r2, [r2, #1576]	; 0x628
 800c050:	40d3      	lsrs	r3, r2
 800c052:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c05a:	08db      	lsrs	r3, r3, #3
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8b3 362a 	ldrh.w	r3, [r3, #1578]	; 0x62a
 800c066:	f003 0307 	and.w	r3, r3, #7
 800c06a:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800c06c:	69fb      	ldr	r3, [r7, #28]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d102      	bne.n	800c078 <ModBUS+0x3fc>
									{
										bytes=div;
 800c072:	6a3b      	ldr	r3, [r7, #32]
 800c074:	667b      	str	r3, [r7, #100]	; 0x64
 800c076:	e002      	b.n	800c07e <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800c078:	6a3b      	ldr	r3, [r7, #32]
 800c07a:	3301      	adds	r3, #1
 800c07c:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800c07e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c080:	b2da      	uxtb	r2, r3
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220


									while(bytes > 0)
 800c088:	e00e      	b.n	800c0a8 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800c08a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c08c:	3308      	adds	r3, #8
 800c08e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c090:	b2d1      	uxtb	r1, r2
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	4413      	add	r3, r2
 800c096:	460a      	mov	r2, r1
 800c098:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
										coils=coils>>8;
 800c09c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c09e:	0a1b      	lsrs	r3, r3, #8
 800c0a0:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800c0a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0a4:	3b01      	subs	r3, #1
 800c0a6:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800c0a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	dced      	bgt.n	800c08a <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2202      	movs	r2, #2
 800c0b2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c0c4:	3303      	adds	r3, #3
 800c0c6:	b2da      	uxtb	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c0d4:	1d9a      	adds	r2, r3, #6
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c0dc:	f000 bfb4 	b.w	800d048 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2202      	movs	r2, #2
 800c0e4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x82;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2282      	movs	r2, #130	; 0x82
 800c0ec:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2203      	movs	r2, #3
 800c0fc:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c106:	1d9a      	adds	r2, r3, #6
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c10e:	2302      	movs	r3, #2
 800c110:	f000 bf9a 	b.w	800d048 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2203      	movs	r2, #3
 800c118:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x82;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2282      	movs	r2, #130	; 0x82
 800c120:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2201      	movs	r2, #1
 800c128:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2203      	movs	r2, #3
 800c130:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c13a:	1d9a      	adds	r2, r3, #6
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c142:	2303      	movs	r3, #3
 800c144:	f000 bf80 	b.w	800d048 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2201      	movs	r2, #1
 800c14c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x82;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2282      	movs	r2, #130	; 0x82
 800c154:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2203      	movs	r2, #3
 800c164:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c16e:	1d9a      	adds	r2, r3, #6
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c176:	2301      	movs	r3, #1
 800c178:	f000 bf66 	b.w	800d048 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	7d9a      	ldrb	r2, [r3, #22]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	7d5a      	ldrb	r2, [r3, #21]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	7d1a      	ldrb	r2, [r3, #20]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	7cda      	ldrb	r2, [r3, #19]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	7c9a      	ldrb	r2, [r3, #18]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	7b1b      	ldrb	r3, [r3, #12]
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	f040 80e2 	bne.w	800c380 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	7e9b      	ldrb	r3, [r3, #26]
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c1ce:	021b      	lsls	r3, r3, #8
 800c1d0:	b29a      	uxth	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c1de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8b3 262e 	ldrh.w	r2, [r3, #1582]	; 0x62e
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	7edb      	ldrb	r3, [r3, #27]
 800c1f4:	b29b      	uxth	r3, r3
 800c1f6:	4313      	orrs	r3, r2
 800c1f8:	b29a      	uxth	r2, r3
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8a3 262e 	strh.w	r2, [r3, #1582]	; 0x62e

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	7f1b      	ldrb	r3, [r3, #28]
 800c204:	b29a      	uxth	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c212:	021b      	lsls	r3, r3, #8
 800c214:	b29a      	uxth	r2, r3
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c222:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c226:	b29a      	uxth	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	7f5b      	ldrb	r3, [r3, #29]
 800c238:	b29b      	uxth	r3, r3
 800c23a:	4313      	orrs	r3, r2
 800c23c:	b29a      	uxth	r2, r3
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8b3 2630 	ldrh.w	r2, [r3, #1584]	; 0x630
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f893 362c 	ldrb.w	r3, [r3, #1580]	; 0x62c
 800c250:	b29b      	uxth	r3, r3
 800c252:	429a      	cmp	r2, r3
 800c254:	d87a      	bhi.n	800c34c <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c25c:	461a      	mov	r2, r3
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c264:	4413      	add	r3, r2
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	f892 262c 	ldrb.w	r2, [r2, #1580]	; 0x62c
 800c26c:	4293      	cmp	r3, r2
 800c26e:	dc53      	bgt.n	800c318 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c270:	e029      	b.n	800c2c6 <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c278:	461a      	mov	r2, r3
 800c27a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c27c:	4413      	add	r3, r2
 800c27e:	005a      	lsls	r2, r3, #1
 800c280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c282:	005b      	lsls	r3, r3, #1
 800c284:	3309      	adds	r3, #9
 800c286:	6879      	ldr	r1, [r7, #4]
 800c288:	440a      	add	r2, r1
 800c28a:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	4413      	add	r3, r2
 800c292:	460a      	mov	r2, r1
 800c294:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8b3 362e 	ldrh.w	r3, [r3, #1582]	; 0x62e
 800c29e:	461a      	mov	r2, r3
 800c2a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2a2:	4413      	add	r3, r2
 800c2a4:	005b      	lsls	r3, r3, #1
 800c2a6:	1c5a      	adds	r2, r3, #1
 800c2a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2aa:	3305      	adds	r3, #5
 800c2ac:	005b      	lsls	r3, r3, #1
 800c2ae:	6879      	ldr	r1, [r7, #4]
 800c2b0:	440a      	add	r2, r1
 800c2b2:	f892 1424 	ldrb.w	r1, [r2, #1060]	; 0x424
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	4413      	add	r3, r2
 800c2ba:	460a      	mov	r2, r1
 800c2bc:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800c2c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	dbce      	blt.n	800c272 <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8b3 3630 	ldrh.w	r3, [r3, #1584]	; 0x630
 800c2da:	b2db      	uxtb	r3, r3
 800c2dc:	005b      	lsls	r3, r3, #1
 800c2de:	b2da      	uxtb	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x03;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2203      	movs	r2, #3
 800c2ea:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2201      	movs	r2, #1
 800c2f2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c2fc:	3303      	adds	r3, #3
 800c2fe:	b2da      	uxtb	r2, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c30c:	1d9a      	adds	r2, r3, #6
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c314:	f000 be98 	b.w	800d048 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2202      	movs	r2, #2
 800c31c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x83;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2283      	movs	r2, #131	; 0x83
 800c324:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2201      	movs	r2, #1
 800c32c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2203      	movs	r2, #3
 800c334:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c33e:	1d9a      	adds	r2, r3, #6
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c346:	2302      	movs	r3, #2
 800c348:	f000 be7e 	b.w	800d048 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2203      	movs	r2, #3
 800c350:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x83;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2283      	movs	r2, #131	; 0x83
 800c358:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2201      	movs	r2, #1
 800c360:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2203      	movs	r2, #3
 800c368:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c372:	1d9a      	adds	r2, r3, #6
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c37a:	2303      	movs	r3, #3
 800c37c:	f000 be64 	b.w	800d048 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2201      	movs	r2, #1
 800c384:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x83;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2283      	movs	r2, #131	; 0x83
 800c38c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2201      	movs	r2, #1
 800c394:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2203      	movs	r2, #3
 800c39c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c3a6:	1d9a      	adds	r2, r3, #6
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	f000 be4a 	b.w	800d048 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	7d9a      	ldrb	r2, [r3, #22]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	7d5a      	ldrb	r2, [r3, #21]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	7d1a      	ldrb	r2, [r3, #20]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	7cda      	ldrb	r2, [r3, #19]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	7c9a      	ldrb	r2, [r3, #18]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	7b5b      	ldrb	r3, [r3, #13]
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	f040 80e2 	bne.w	800c5b8 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	7e9b      	ldrb	r3, [r3, #26]
 800c3f8:	b29a      	uxth	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c406:	021b      	lsls	r3, r3, #8
 800c408:	b29a      	uxth	r2, r3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c416:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8b3 2634 	ldrh.w	r2, [r3, #1588]	; 0x634
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	7edb      	ldrb	r3, [r3, #27]
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	4313      	orrs	r3, r2
 800c430:	b29a      	uxth	r2, r3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	7f1b      	ldrb	r3, [r3, #28]
 800c43c:	b29a      	uxth	r2, r3
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c44a:	021b      	lsls	r3, r3, #8
 800c44c:	b29a      	uxth	r2, r3
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c45a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c45e:	b29a      	uxth	r2, r3
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	7f5b      	ldrb	r3, [r3, #29]
 800c470:	b29b      	uxth	r3, r3
 800c472:	4313      	orrs	r3, r2
 800c474:	b29a      	uxth	r2, r3
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8b3 2636 	ldrh.w	r2, [r3, #1590]	; 0x636
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f893 3632 	ldrb.w	r3, [r3, #1586]	; 0x632
 800c488:	b29b      	uxth	r3, r3
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d87a      	bhi.n	800c584 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c494:	461a      	mov	r2, r3
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c49c:	4413      	add	r3, r2
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	f892 2632 	ldrb.w	r2, [r2, #1586]	; 0x632
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	dc53      	bgt.n	800c550 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c4a8:	e029      	b.n	800c4fe <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4b4:	4413      	add	r3, r2
 800c4b6:	005a      	lsls	r2, r3, #1
 800c4b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4ba:	005b      	lsls	r3, r3, #1
 800c4bc:	3309      	adds	r3, #9
 800c4be:	6879      	ldr	r1, [r7, #4]
 800c4c0:	440a      	add	r2, r1
 800c4c2:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	460a      	mov	r2, r1
 800c4cc:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8b3 3634 	ldrh.w	r3, [r3, #1588]	; 0x634
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4da:	4413      	add	r3, r2
 800c4dc:	005b      	lsls	r3, r3, #1
 800c4de:	1c5a      	adds	r2, r3, #1
 800c4e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4e2:	3305      	adds	r3, #5
 800c4e4:	005b      	lsls	r3, r3, #1
 800c4e6:	6879      	ldr	r1, [r7, #4]
 800c4e8:	440a      	add	r2, r1
 800c4ea:	f892 1522 	ldrb.w	r1, [r2, #1314]	; 0x522
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	460a      	mov	r2, r1
 800c4f4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

										qty_reg++; //Incremento la cantidad de registros
 800c4f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c504:	461a      	mov	r2, r3
 800c506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c508:	4293      	cmp	r3, r2
 800c50a:	dbce      	blt.n	800c4aa <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8b3 3636 	ldrh.w	r3, [r3, #1590]	; 0x636
 800c512:	b2db      	uxtb	r3, r3
 800c514:	005b      	lsls	r3, r3, #1
 800c516:	b2da      	uxtb	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x04;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2204      	movs	r2, #4
 800c522:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2201      	movs	r2, #1
 800c52a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c534:	3303      	adds	r3, #3
 800c536:	b2da      	uxtb	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c544:	1d9a      	adds	r2, r3, #6
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c54c:	f000 bd7c 	b.w	800d048 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2202      	movs	r2, #2
 800c554:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x84;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2284      	movs	r2, #132	; 0x84
 800c55c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2201      	movs	r2, #1
 800c564:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2203      	movs	r2, #3
 800c56c:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c576:	1d9a      	adds	r2, r3, #6
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c57e:	2302      	movs	r3, #2
 800c580:	f000 bd62 	b.w	800d048 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2203      	movs	r2, #3
 800c588:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x84;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2284      	movs	r2, #132	; 0x84
 800c590:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2201      	movs	r2, #1
 800c598:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2203      	movs	r2, #3
 800c5a0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c5aa:	1d9a      	adds	r2, r3, #6
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	f000 bd48 	b.w	800d048 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x84;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2284      	movs	r2, #132	; 0x84
 800c5c4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2203      	movs	r2, #3
 800c5d4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c5de:	1d9a      	adds	r2, r3, #6
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	f000 bd2e 	b.w	800d048 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	7d9a      	ldrb	r2, [r3, #22]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	7d5a      	ldrb	r2, [r3, #21]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	7d1a      	ldrb	r2, [r3, #20]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	7cda      	ldrb	r2, [r3, #19]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	7c9a      	ldrb	r2, [r3, #18]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

								int qty_reg=0;
 800c61e:	2300      	movs	r3, #0
 800c620:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	7b9b      	ldrb	r3, [r3, #14]
 800c626:	2b01      	cmp	r3, #1
 800c628:	f040 80d1 	bne.w	800c7ce <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	7e9b      	ldrb	r3, [r3, #26]
 800c630:	b29a      	uxth	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c63e:	021b      	lsls	r3, r3, #8
 800c640:	b29a      	uxth	r2, r3
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c64e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c652:	b29a      	uxth	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8b3 263a 	ldrh.w	r2, [r3, #1594]	; 0x63a
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	7edb      	ldrb	r3, [r3, #27]
 800c664:	b29b      	uxth	r3, r3
 800c666:	4313      	orrs	r3, r2
 800c668:	b29a      	uxth	r2, r3
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	7f1b      	ldrb	r3, [r3, #28]
 800c674:	b29a      	uxth	r2, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c682:	021b      	lsls	r3, r3, #8
 800c684:	b29a      	uxth	r2, r3
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c692:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c696:	b29a      	uxth	r2, r3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8b3 263c 	ldrh.w	r2, [r3, #1596]	; 0x63c
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	7f5b      	ldrb	r3, [r3, #29]
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	b29a      	uxth	r2, r3
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f893 3638 	ldrb.w	r3, [r3, #1592]	; 0x638
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	; 0x63a
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	dd69      	ble.n	800c79a <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d005      	beq.n	800c6dc <ModBUS+0xa60>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c6d6:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c6da:	d144      	bne.n	800c766 <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8b3 363c 	ldrh.w	r3, [r3, #1596]	; 0x63c
 800c6e2:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c6e6:	d10d      	bne.n	800c704 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	f8b2 263a 	ldrh.w	r2, [r2, #1594]	; 0x63a
 800c6f4:	4611      	mov	r1, r2
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	408a      	lsls	r2, r1
 800c6fa:	431a      	orrs	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800c702:	e003      	b.n	800c70c <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	7f5a      	ldrb	r2, [r3, #29]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	7f1a      	ldrb	r2, [r3, #28]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	7eda      	ldrb	r2, [r3, #27]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	7e9a      	ldrb	r2, [r3, #26]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x05;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2205      	movs	r2, #5
 800c738:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2201      	movs	r2, #1
 800c740:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800c74a:	3306      	adds	r3, #6
 800c74c:	b2da      	uxtb	r2, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c75a:	1d9a      	adds	r2, r3, #6
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800c762:	f000 bc71 	b.w	800d048 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2202      	movs	r2, #2
 800c76a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
												m3->_MBUS_2SND[7]=0x85;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2285      	movs	r2, #133	; 0x85
 800c772:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2201      	movs	r2, #1
 800c77a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2203      	movs	r2, #3
 800c782:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c78c:	1d9a      	adds	r2, r3, #6
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
												return(2);//Error excepcion 02
 800c794:	2302      	movs	r3, #2
 800c796:	f000 bc57 	b.w	800d048 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2203      	movs	r2, #3
 800c79e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
											m3->_MBUS_2SND[7]=0x85;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2285      	movs	r2, #133	; 0x85
 800c7a6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2203      	movs	r2, #3
 800c7b6:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c7c0:	1d9a      	adds	r2, r3, #6
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
											return(3);//Erroe excepcion 03
 800c7c8:	2303      	movs	r3, #3
 800c7ca:	f000 bc3d 	b.w	800d048 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x85;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2285      	movs	r2, #133	; 0x85
 800c7da:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2203      	movs	r2, #3
 800c7ea:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c7f4:	1d9a      	adds	r2, r3, #6
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(1);//Error excepcion 01
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	f000 bc23 	b.w	800d048 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	7d9a      	ldrb	r2, [r3, #22]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	7d5a      	ldrb	r2, [r3, #21]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	7d1a      	ldrb	r2, [r3, #20]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	7cda      	ldrb	r2, [r3, #19]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	7c9a      	ldrb	r2, [r3, #18]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800c834:	2300      	movs	r3, #0
 800c836:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c838:	2300      	movs	r3, #0
 800c83a:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	7bdb      	ldrb	r3, [r3, #15]
 800c840:	2b01      	cmp	r3, #1
 800c842:	f040 80a3 	bne.w	800c98c <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	7e9b      	ldrb	r3, [r3, #26]
 800c84a:	b29a      	uxth	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c858:	021b      	lsls	r3, r3, #8
 800c85a:	b29a      	uxth	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c868:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c86c:	b29a      	uxth	r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	7edb      	ldrb	r3, [r3, #27]
 800c87e:	b29b      	uxth	r3, r3
 800c880:	4313      	orrs	r3, r2
 800c882:	b29a      	uxth	r2, r3
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646

							start_address=m3->_06_WriteSingleRegister_Addr;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8b3 3646 	ldrh.w	r3, [r3, #1606]	; 0x646
 800c890:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	7f1b      	ldrb	r3, [r3, #28]
 800c896:	b29a      	uxth	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800c8a4:	021b      	lsls	r3, r3, #8
 800c8a6:	b29a      	uxth	r2, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8b3 3648 	ldrh.w	r3, [r3, #1608]	; 0x648
 800c8b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8b3 2648 	ldrh.w	r2, [r3, #1608]	; 0x648
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	7f5b      	ldrb	r3, [r3, #29]
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8b3 2646 	ldrh.w	r2, [r3, #1606]	; 0x646
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d838      	bhi.n	800c95a <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800c8e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	7f11      	ldrb	r1, [r2, #28]
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	460a      	mov	r2, r1
 800c8f4:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800c8f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	7f51      	ldrb	r1, [r2, #29]
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	4413      	add	r3, r2
 800c904:	460a      	mov	r2, r1
 800c906:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	7f5a      	ldrb	r2, [r3, #29]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	7f1a      	ldrb	r2, [r3, #28]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	7eda      	ldrb	r2, [r3, #27]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	7e9a      	ldrb	r2, [r3, #26]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x06;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2206      	movs	r2, #6
 800c936:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2201      	movs	r2, #1
 800c93e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2206      	movs	r2, #6
 800c946:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c950:	1d9a      	adds	r2, r3, #6
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c958:	e376      	b.n	800d048 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2202      	movs	r2, #2
 800c95e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x86;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2286      	movs	r2, #134	; 0x86
 800c966:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2201      	movs	r2, #1
 800c96e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2203      	movs	r2, #3
 800c976:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c980:	1d9a      	adds	r2, r3, #6
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800c988:	2302      	movs	r3, #2
 800c98a:	e35d      	b.n	800d048 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2201      	movs	r2, #1
 800c990:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x86;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2286      	movs	r2, #134	; 0x86
 800c998:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2203      	movs	r2, #3
 800c9a8:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800c9b2:	1d9a      	adds	r2, r3, #6
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e344      	b.n	800d048 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	7d9a      	ldrb	r2, [r3, #22]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	7d5a      	ldrb	r2, [r3, #21]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	7d1a      	ldrb	r2, [r3, #20]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	7cda      	ldrb	r2, [r3, #19]
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	7c9a      	ldrb	r2, [r3, #18]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					int qty_reg=0;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	7c1b      	ldrb	r3, [r3, #16]
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	f040 810f 	bne.w	800cc1c <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	7e9b      	ldrb	r3, [r3, #26]
 800ca02:	b29a      	uxth	r2, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800ca10:	021b      	lsls	r3, r3, #8
 800ca12:	b29a      	uxth	r2, r3
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800ca20:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca24:	b29a      	uxth	r2, r3
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8b3 2640 	ldrh.w	r2, [r3, #1600]	; 0x640
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	7edb      	ldrb	r3, [r3, #27]
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	7f1b      	ldrb	r3, [r3, #28]
 800ca46:	b29a      	uxth	r2, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800ca54:	021b      	lsls	r3, r3, #8
 800ca56:	b29a      	uxth	r2, r3
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800ca64:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	7f5b      	ldrb	r3, [r3, #29]
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8b3 2642 	ldrh.w	r2, [r3, #1602]	; 0x642
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f893 363e 	ldrb.w	r3, [r3, #1598]	; 0x63e
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	429a      	cmp	r2, r3
 800ca96:	f200 80a8 	bhi.w	800cbea <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800caa0:	461a      	mov	r2, r3
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800caa8:	4413      	add	r3, r2
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	f892 263e 	ldrb.w	r2, [r2, #1598]	; 0x63e
 800cab0:	4293      	cmp	r3, r2
 800cab2:	f300 8081 	bgt.w	800cbb8 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800cab6:	2300      	movs	r3, #0
 800cab8:	657b      	str	r3, [r7, #84]	; 0x54
 800caba:	2300      	movs	r3, #0
 800cabc:	653b      	str	r3, [r7, #80]	; 0x50
 800cabe:	2300      	movs	r3, #0
 800cac0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cac2:	2300      	movs	r3, #0
 800cac4:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	7f9b      	ldrb	r3, [r3, #30]
 800caca:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800cacc:	e00e      	b.n	800caec <ModBUS+0xe70>
									{
										data=data<<8;
 800cace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cad0:	021b      	lsls	r3, r3, #8
 800cad2:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800cad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cad6:	330c      	adds	r3, #12
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	4413      	add	r3, r2
 800cadc:	7c9b      	ldrb	r3, [r3, #18]
 800cade:	461a      	mov	r2, r3
 800cae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cae2:	4313      	orrs	r3, r2
 800cae4:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800cae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cae8:	3b01      	subs	r3, #1
 800caea:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800caec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1ed      	bne.n	800cace <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800caf8:	461a      	mov	r2, r3
 800cafa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cafc:	4093      	lsls	r3, r2
 800cafe:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800cb00:	e00f      	b.n	800cb22 <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8b3 3640 	ldrh.w	r3, [r3, #1600]	; 0x640
 800cb08:	461a      	mov	r2, r3
 800cb0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb0c:	4413      	add	r3, r2
 800cb0e:	2201      	movs	r2, #1
 800cb10:	fa02 f303 	lsl.w	r3, r2, r3
 800cb14:	461a      	mov	r2, r3
 800cb16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800cb1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb1e:	3301      	adds	r3, #1
 800cb20:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8b3 3642 	ldrh.w	r3, [r3, #1602]	; 0x642
 800cb28:	461a      	mov	r2, r3
 800cb2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d3e8      	bcc.n	800cb02 <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800cb30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb32:	43db      	mvns	r3, r3
 800cb34:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800cb3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb3e:	401a      	ands	r2, r3
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c


									data &= ~mascara;
 800cb46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb48:	43db      	mvns	r3, r3
 800cb4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb4c:	4013      	ands	r3, r2
 800cb4e:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800cb56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb58:	431a      	orrs	r2, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	7f5a      	ldrb	r2, [r3, #29]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	7f1a      	ldrb	r2, [r3, #28]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	7eda      	ldrb	r2, [r3, #27]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	7e9a      	ldrb	r2, [r3, #26]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x0F;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	220f      	movs	r2, #15
 800cb8c:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2201      	movs	r2, #1
 800cb94:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800cb9e:	3306      	adds	r3, #6
 800cba0:	b2da      	uxtb	r2, r3
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cbae:	1d9a      	adds	r2, r3, #6
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800cbb6:	e247      	b.n	800d048 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2202      	movs	r2, #2
 800cbbc:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x8F;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	228f      	movs	r2, #143	; 0x8f
 800cbc4:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2203      	movs	r2, #3
 800cbd4:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cbde:	1d9a      	adds	r2, r3, #6
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800cbe6:	2302      	movs	r3, #2
 800cbe8:	e22e      	b.n	800d048 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2203      	movs	r2, #3
 800cbee:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x8F;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	228f      	movs	r2, #143	; 0x8f
 800cbf6:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2203      	movs	r2, #3
 800cc06:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cc10:	1d9a      	adds	r2, r3, #6
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800cc18:	2303      	movs	r3, #3
 800cc1a:	e215      	b.n	800d048 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x8F;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	228f      	movs	r2, #143	; 0x8f
 800cc28:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2203      	movs	r2, #3
 800cc38:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cc42:	1d9a      	adds	r2, r3, #6
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e1fc      	b.n	800d048 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	7d9a      	ldrb	r2, [r3, #22]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	7d5a      	ldrb	r2, [r3, #21]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	7d1a      	ldrb	r2, [r3, #20]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	7cda      	ldrb	r2, [r3, #19]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	7c9a      	ldrb	r2, [r3, #18]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					uint16_t qty_reg=0, start_address=0;
 800cc80:	2300      	movs	r3, #0
 800cc82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800cc86:	2300      	movs	r3, #0
 800cc88:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	7c5b      	ldrb	r3, [r3, #17]
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	f040 80eb 	bne.w	800ce6a <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	7e9b      	ldrb	r3, [r3, #26]
 800cc98:	b29a      	uxth	r2, r3
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cca6:	021b      	lsls	r3, r3, #8
 800cca8:	b29a      	uxth	r2, r3
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800ccb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ccba:	b29a      	uxth	r2, r3
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f8b3 264c 	ldrh.w	r2, [r3, #1612]	; 0x64c
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	7edb      	ldrb	r3, [r3, #27]
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	b29a      	uxth	r2, r3
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800ccde:	005b      	lsls	r3, r3, #1
 800cce0:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	7f1b      	ldrb	r3, [r3, #28]
 800cce6:	b29a      	uxth	r2, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800ccf4:	021b      	lsls	r3, r3, #8
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800cd04:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	7f5b      	ldrb	r3, [r3, #29]
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f8b3 264e 	ldrh.w	r2, [r3, #1614]	; 0x64e
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d87f      	bhi.n	800ce38 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8b3 364c 	ldrh.w	r3, [r3, #1612]	; 0x64c
 800cd3e:	461a      	mov	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8b3 364e 	ldrh.w	r3, [r3, #1614]	; 0x64e
 800cd46:	4413      	add	r3, r2
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	f892 264a 	ldrb.w	r2, [r2, #1610]	; 0x64a
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	dc59      	bgt.n	800ce06 <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800cd52:	e029      	b.n	800cda8 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800cd54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cd58:	f103 020d 	add.w	r2, r3, #13
 800cd5c:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800cd5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cd62:	440b      	add	r3, r1
 800cd64:	6879      	ldr	r1, [r7, #4]
 800cd66:	440a      	add	r2, r1
 800cd68:	7c91      	ldrb	r1, [r2, #18]
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	460a      	mov	r2, r1
 800cd70:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800cd74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cd78:	3301      	adds	r3, #1
 800cd7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800cd7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cd82:	f103 020d 	add.w	r2, r3, #13
 800cd86:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800cd88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cd8c:	440b      	add	r3, r1
 800cd8e:	6879      	ldr	r1, [r7, #4]
 800cd90:	440a      	add	r2, r1
 800cd92:	7c91      	ldrb	r1, [r2, #18]
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	4413      	add	r3, r2
 800cd98:	460a      	mov	r2, r1
 800cd9a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
										qty_reg++;
 800cd9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cda2:	3301      	adds	r3, #1
 800cda4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	7f9b      	ldrb	r3, [r3, #30]
 800cdac:	b29b      	uxth	r3, r3
 800cdae:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d3ce      	bcc.n	800cd54 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	7f5a      	ldrb	r2, [r3, #29]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	7f1a      	ldrb	r2, [r3, #28]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	7eda      	ldrb	r2, [r3, #27]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	7e9a      	ldrb	r2, [r3, #26]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x10;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2210      	movs	r2, #16
 800cde2:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2201      	movs	r2, #1
 800cdea:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2206      	movs	r2, #6
 800cdf2:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cdfc:	1d9a      	adds	r2, r3, #6
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800ce04:	e120      	b.n	800d048 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2202      	movs	r2, #2
 800ce0a:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
									m3->_MBUS_2SND[7]=0x90;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2290      	movs	r2, #144	; 0x90
 800ce12:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2201      	movs	r2, #1
 800ce1a:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2203      	movs	r2, #3
 800ce22:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ce2c:	1d9a      	adds	r2, r3, #6
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
									return(2);//Error excepcion 02
 800ce34:	2302      	movs	r3, #2
 800ce36:	e107      	b.n	800d048 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2203      	movs	r2, #3
 800ce3c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
								m3->_MBUS_2SND[7]=0x90;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2290      	movs	r2, #144	; 0x90
 800ce44:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2203      	movs	r2, #3
 800ce54:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ce5e:	1d9a      	adds	r2, r3, #6
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
								return(3);//Erroe excepcion 03
 800ce66:	2303      	movs	r3, #3
 800ce68:	e0ee      	b.n	800d048 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
						m3->_MBUS_2SND[7]=0x90;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2290      	movs	r2, #144	; 0x90
 800ce76:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2203      	movs	r2, #3
 800ce86:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800ce90:	1d9a      	adds	r2, r3, #6
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
						return(1);//Error excepcion 01
 800ce98:	2301      	movs	r3, #1
 800ce9a:	e0d5      	b.n	800d048 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	7e5b      	ldrb	r3, [r3, #25]
 800cea8:	3b80      	subs	r3, #128	; 0x80
 800ceaa:	b2da      	uxtb	r2, r3
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	7e1a      	ldrb	r2, [r3, #24]
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
					m3->_MBUS_2SND[5]=0x03;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2203      	movs	r2, #3
 800cec0:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	7d9a      	ldrb	r2, [r3, #22]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	7d5a      	ldrb	r2, [r3, #21]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	7d1a      	ldrb	r2, [r3, #20]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	7cda      	ldrb	r2, [r3, #19]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	7c9a      	ldrb	r2, [r3, #18]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
 800cefc:	1d9a      	adds	r2, r3, #6
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
					return(1);
 800cf04:	2301      	movs	r3, #1
 800cf06:	e09f      	b.n	800d048 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800cf08:	2301      	movs	r3, #1
 800cf0a:	e09d      	b.n	800d048 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	791b      	ldrb	r3, [r3, #4]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	f040 8099 	bne.w	800d048 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f103 0212 	add.w	r2, r3, #18
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf22:	4619      	mov	r1, r3
 800cf24:	4610      	mov	r0, r2
 800cf26:	f7fe fda7 	bl	800ba78 <ModBUS_Check>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f000 808b 	beq.w	800d048 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f7fe fdbf 	bl	800bab6 <ModBUS_Check_tid>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d04f      	beq.n	800cfde <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	7e5b      	ldrb	r3, [r3, #25]
 800cf42:	2b03      	cmp	r3, #3
 800cf44:	d143      	bne.n	800cfce <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800cf46:	2300      	movs	r3, #0
 800cf48:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 800cf56:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800cf58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cf5a:	021b      	lsls	r3, r3, #8
 800cf5c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 800cf64:	b29a      	uxth	r2, r3
 800cf66:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 800cf72:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800cf76:	2300      	movs	r3, #0
 800cf78:	643b      	str	r3, [r7, #64]	; 0x40
 800cf7a:	e022      	b.n	800cfc2 <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800cf7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf7e:	005b      	lsls	r3, r3, #1
 800cf80:	f103 0209 	add.w	r2, r3, #9
 800cf84:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800cf86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf88:	440b      	add	r3, r1
 800cf8a:	005b      	lsls	r3, r3, #1
 800cf8c:	6879      	ldr	r1, [r7, #4]
 800cf8e:	440a      	add	r2, r1
 800cf90:	7c91      	ldrb	r1, [r2, #18]
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	4413      	add	r3, r2
 800cf96:	460a      	mov	r2, r1
 800cf98:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800cf9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf9e:	3305      	adds	r3, #5
 800cfa0:	005a      	lsls	r2, r3, #1
 800cfa2:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800cfa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfa6:	440b      	add	r3, r1
 800cfa8:	005b      	lsls	r3, r3, #1
 800cfaa:	3301      	adds	r3, #1
 800cfac:	6879      	ldr	r1, [r7, #4]
 800cfae:	440a      	add	r2, r1
 800cfb0:	7c91      	ldrb	r1, [r2, #18]
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	4413      	add	r3, r2
 800cfb6:	460a      	mov	r2, r1
 800cfb8:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
						for (int i=0;i< qty; i++)
 800cfbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	643b      	str	r3, [r7, #64]	; 0x40
 800cfc2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800cfc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	dbd7      	blt.n	800cf7c <ModBUS+0x1300>

						}


					}
					break;
 800cfcc:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	7ddb      	ldrb	r3, [r3, #23]
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	7e9b      	ldrb	r3, [r3, #26]
 800cfd8:	1ad3      	subs	r3, r2, r3
 800cfda:	63bb      	str	r3, [r7, #56]	; 0x38
 800cfdc:	e034      	b.n	800d048 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	7e5b      	ldrb	r3, [r3, #25]
 800cfe2:	3b81      	subs	r3, #129	; 0x81
 800cfe4:	2b15      	cmp	r3, #21
 800cfe6:	d82f      	bhi.n	800d048 <ModBUS+0x13cc>
 800cfe8:	a201      	add	r2, pc, #4	; (adr r2, 800cff0 <ModBUS+0x1374>)
 800cfea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfee:	bf00      	nop
 800cff0:	0800d049 	.word	0x0800d049
 800cff4:	0800d049 	.word	0x0800d049
 800cff8:	0800d049 	.word	0x0800d049
 800cffc:	0800d049 	.word	0x0800d049
 800d000:	0800d049 	.word	0x0800d049
 800d004:	0800d049 	.word	0x0800d049
 800d008:	0800d049 	.word	0x0800d049
 800d00c:	0800d049 	.word	0x0800d049
 800d010:	0800d049 	.word	0x0800d049
 800d014:	0800d049 	.word	0x0800d049
 800d018:	0800d049 	.word	0x0800d049
 800d01c:	0800d049 	.word	0x0800d049
 800d020:	0800d049 	.word	0x0800d049
 800d024:	0800d049 	.word	0x0800d049
 800d028:	0800d049 	.word	0x0800d049
 800d02c:	0800d049 	.word	0x0800d049
 800d030:	0800d049 	.word	0x0800d049
 800d034:	0800d049 	.word	0x0800d049
 800d038:	0800d049 	.word	0x0800d049
 800d03c:	0800d049 	.word	0x0800d049
 800d040:	0800d049 	.word	0x0800d049
 800d044:	0800d049 	.word	0x0800d049
			}
		}
	}


}
 800d048:	4618      	mov	r0, r3
 800d04a:	3770      	adds	r7, #112	; 0x70
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <SPI_ETH_RESET>:
 */

#include "ETH_W5500.h"

SPI_ETH_RESET(struct W5500_SPI * x)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->RST_PORT, x->RST_PIN , GPIO_PIN_RESET);		//RST LOW
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	68d8      	ldr	r0, [r3, #12]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	8a1b      	ldrh	r3, [r3, #16]
 800d060:	2200      	movs	r2, #0
 800d062:	4619      	mov	r1, r3
 800d064:	f7f6 f9bc 	bl	80033e0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800d068:	2064      	movs	r0, #100	; 0x64
 800d06a:	f7f5 fd57 	bl	8002b1c <HAL_Delay>
	HAL_GPIO_WritePin(x->RST_PORT, x->RST_PIN , GPIO_PIN_SET);			//RST HIGH
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	68d8      	ldr	r0, [r3, #12]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	8a1b      	ldrh	r3, [r3, #16]
 800d076:	2201      	movs	r2, #1
 800d078:	4619      	mov	r1, r3
 800d07a:	f7f6 f9b1 	bl	80033e0 <HAL_GPIO_WritePin>
}
 800d07e:	bf00      	nop
 800d080:	4618      	mov	r0, r3
 800d082:	3708      	adds	r7, #8
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <SPI_ETH_PHY_RESET>:

SPI_ETH_PHY_RESET(struct W5500_SPI * x)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
uint8_t a;

	x->TX[0]=0x00;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	771a      	strb	r2, [r3, #28]
	x->TX[1]=0x2E;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	222e      	movs	r2, #46	; 0x2e
 800d09a:	775a      	strb	r2, [r3, #29]
	x->TX[2]=0x00;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	779a      	strb	r2, [r3, #30]
	x->TX[3]=0x00;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	77da      	strb	r2, [r3, #31]
	SPI_ETH(x);			//Realizo la letura de PHYCFGR
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 f81c 	bl	800d0e6 <SPI_ETH>
	a=x->RX[3];
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d0b4:	73fb      	strb	r3, [r7, #15]
	a=a&0xFE;
 800d0b6:	7bfb      	ldrb	r3, [r7, #15]
 800d0b8:	f023 0301 	bic.w	r3, r3, #1
 800d0bc:	73fb      	strb	r3, [r7, #15]
	x->TX[0]=0x00;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	771a      	strb	r2, [r3, #28]
	x->TX[1]=0x2E;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	222e      	movs	r2, #46	; 0x2e
 800d0c8:	775a      	strb	r2, [r3, #29]
	x->TX[2]=0x04;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2204      	movs	r2, #4
 800d0ce:	779a      	strb	r2, [r3, #30]
	x->TX[3]=a;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	7bfa      	ldrb	r2, [r7, #15]
 800d0d4:	77da      	strb	r2, [r3, #31]
	SPI_ETH(x);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 f805 	bl	800d0e6 <SPI_ETH>
}
 800d0dc:	bf00      	nop
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <SPI_ETH>:

uint8_t  SPI_ETH(struct  W5500_SPI * x )
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b084      	sub	sp, #16
 800d0ea:	af02      	add	r7, sp, #8
 800d0ec:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6858      	ldr	r0, [r3, #4]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	891b      	ldrh	r3, [r3, #8]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	f7f6 f971 	bl	80033e0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6818      	ldr	r0, [r3, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f103 011c 	add.w	r1, r3, #28
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f103 0220 	add.w	r2, r3, #32
 800d10e:	2364      	movs	r3, #100	; 0x64
 800d110:	9300      	str	r3, [sp, #0]
 800d112:	2304      	movs	r3, #4
 800d114:	f7f6 fe79 	bl	8003e0a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6858      	ldr	r0, [r3, #4]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	891b      	ldrh	r3, [r3, #8]
 800d120:	2201      	movs	r2, #1
 800d122:	4619      	mov	r1, r3
 800d124:	f7f6 f95c 	bl	80033e0 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3708      	adds	r7, #8
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5500_SPI * x,  uint16_t ph_addr, uint8_t addr,uint8_t op, uint8_t * data, uint8_t lnght)
{
 800d136:	b580      	push	{r7, lr}
 800d138:	b086      	sub	sp, #24
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
 800d13e:	4608      	mov	r0, r1
 800d140:	4611      	mov	r1, r2
 800d142:	461a      	mov	r2, r3
 800d144:	4603      	mov	r3, r0
 800d146:	807b      	strh	r3, [r7, #2]
 800d148:	460b      	mov	r3, r1
 800d14a:	707b      	strb	r3, [r7, #1]
 800d14c:	4613      	mov	r3, r2
 800d14e:	703b      	strb	r3, [r7, #0]
 uint16_t res=0;
 800d150:	2300      	movs	r3, #0
 800d152:	82fb      	strh	r3, [r7, #22]
 uint8_t  a=op;
 800d154:	783b      	ldrb	r3, [r7, #0]
 800d156:	72fb      	strb	r3, [r7, #11]

 x->TX[0]= (ph_addr & 0xFF00)>>8; 				//High Address Phase
 800d158:	887b      	ldrh	r3, [r7, #2]
 800d15a:	0a1b      	lsrs	r3, r3, #8
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	b2da      	uxtb	r2, r3
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	771a      	strb	r2, [r3, #28]
 x->TX[1]= ph_addr & 0x00FF;					//Low Address Phase
 800d164:	887b      	ldrh	r3, [r7, #2]
 800d166:	b2da      	uxtb	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	775a      	strb	r2, [r3, #29]
 x->TX[2]= ((addr)<<3)|((op)<<2);
 800d16c:	787b      	ldrb	r3, [r7, #1]
 800d16e:	00db      	lsls	r3, r3, #3
 800d170:	b25a      	sxtb	r2, r3
 800d172:	783b      	ldrb	r3, [r7, #0]
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	b25b      	sxtb	r3, r3
 800d178:	4313      	orrs	r3, r2
 800d17a:	b25b      	sxtb	r3, r3
 800d17c:	b2da      	uxtb	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	779a      	strb	r2, [r3, #30]
 x->TX[3]=0x00;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2200      	movs	r2, #0
 800d186:	77da      	strb	r2, [r3, #31]
 if(op == 1)								//Write operation
 800d188:	783b      	ldrb	r3, [r7, #0]
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d11d      	bne.n	800d1ca <SPI_ETH_REG+0x94>
 {
	 for(int i=0; i<(lnght); i++)			//Esto solo incrementa 256 ubicaciones
 800d18e:	2300      	movs	r3, #0
 800d190:	613b      	str	r3, [r7, #16]
 800d192:	e013      	b.n	800d1bc <SPI_ETH_REG+0x86>
	 {
		x->TX[3]=data[i];					//Put data to be sent
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	6a3a      	ldr	r2, [r7, #32]
 800d198:	4413      	add	r3, r2
 800d19a:	781a      	ldrb	r2, [r3, #0]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	77da      	strb	r2, [r3, #31]
		res=SPI_ETH(x);						//Send data to device
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f7ff ffa0 	bl	800d0e6 <SPI_ETH>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	82fb      	strh	r3, [r7, #22]
		x->TX[1]++;							//Address increased once
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	7f5b      	ldrb	r3, [r3, #29]
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	b2da      	uxtb	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	775a      	strb	r2, [r3, #29]
	 for(int i=0; i<(lnght); i++)			//Esto solo incrementa 256 ubicaciones
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	613b      	str	r3, [r7, #16]
 800d1bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d1c0:	693a      	ldr	r2, [r7, #16]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	dbe6      	blt.n	800d194 <SPI_ETH_REG+0x5e>
	 }
	 return(res);
 800d1c6:	8afb      	ldrh	r3, [r7, #22]
 800d1c8:	e037      	b.n	800d23a <SPI_ETH_REG+0x104>
 }
	 if(op == 0)							//Read operation
 800d1ca:	783b      	ldrb	r3, [r7, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d134      	bne.n	800d23a <SPI_ETH_REG+0x104>
	 {
		 x->TX[3]=0x00;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	77da      	strb	r2, [r3, #31]
		 if (lnght==2)
 800d1d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d120      	bne.n	800d220 <SPI_ETH_REG+0xea>
		{
		for(int i=0; i<(lnght); i++)
 800d1de:	2300      	movs	r3, #0
 800d1e0:	60fb      	str	r3, [r7, #12]
 800d1e2:	e016      	b.n	800d212 <SPI_ETH_REG+0xdc>
			{
			res|=SPI_ETH(x);
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f7ff ff7e 	bl	800d0e6 <SPI_ETH>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	b29a      	uxth	r2, r3
 800d1ee:	8afb      	ldrh	r3, [r7, #22]
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	82fb      	strh	r3, [r7, #22]
			x->TX[1]++;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	7f5b      	ldrb	r3, [r3, #29]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	b2da      	uxtb	r2, r3
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	775a      	strb	r2, [r3, #29]
			if (i==0)res=res<<8;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d102      	bne.n	800d20c <SPI_ETH_REG+0xd6>
 800d206:	8afb      	ldrh	r3, [r7, #22]
 800d208:	021b      	lsls	r3, r3, #8
 800d20a:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	3301      	adds	r3, #1
 800d210:	60fb      	str	r3, [r7, #12]
 800d212:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d216:	68fa      	ldr	r2, [r7, #12]
 800d218:	429a      	cmp	r2, r3
 800d21a:	dbe3      	blt.n	800d1e4 <SPI_ETH_REG+0xae>
			}
		 return(res);
 800d21c:	8afb      	ldrh	r3, [r7, #22]
 800d21e:	e00c      	b.n	800d23a <SPI_ETH_REG+0x104>
		}else
		{
			res=SPI_ETH(x);
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f7ff ff60 	bl	800d0e6 <SPI_ETH>
 800d226:	4603      	mov	r3, r0
 800d228:	82fb      	strh	r3, [r7, #22]
			x->TX[1]++;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	7f5b      	ldrb	r3, [r3, #29]
 800d22e:	3301      	adds	r3, #1
 800d230:	b2da      	uxtb	r2, r3
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	775a      	strb	r2, [r3, #29]
			return(res);
 800d236:	8afb      	ldrh	r3, [r7, #22]
 800d238:	e7ff      	b.n	800d23a <SPI_ETH_REG+0x104>
		}
 	 }
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3718      	adds	r7, #24
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}

0800d242 <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5500_SPI * x, uint16_t addr, uint16_t  data, uint8_t socket)
{
 800d242:	b580      	push	{r7, lr}
 800d244:	b088      	sub	sp, #32
 800d246:	af00      	add	r7, sp, #0
 800d248:	60f8      	str	r0, [r7, #12]
 800d24a:	4608      	mov	r0, r1
 800d24c:	4611      	mov	r1, r2
 800d24e:	461a      	mov	r2, r3
 800d250:	4603      	mov	r3, r0
 800d252:	817b      	strh	r3, [r7, #10]
 800d254:	460b      	mov	r3, r1
 800d256:	813b      	strh	r3, [r7, #8]
 800d258:	4613      	mov	r3, r2
 800d25a:	71fb      	strb	r3, [r7, #7]
	uint16_t res=0;
 800d25c:	2300      	movs	r3, #0
 800d25e:	83fb      	strh	r3, [r7, #30]
	uint8_t num[2];
			x->TX[2]= ((socket)<<3)|0x04;
 800d260:	79fb      	ldrb	r3, [r7, #7]
 800d262:	00db      	lsls	r3, r3, #3
 800d264:	b25b      	sxtb	r3, r3
 800d266:	f043 0304 	orr.w	r3, r3, #4
 800d26a:	b25b      	sxtb	r3, r3
 800d26c:	b2da      	uxtb	r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	779a      	strb	r2, [r3, #30]
			num[1] = data & 0x00FF ;
 800d272:	893b      	ldrh	r3, [r7, #8]
 800d274:	b2db      	uxtb	r3, r3
 800d276:	757b      	strb	r3, [r7, #21]
			num[0] = (data & 0xFF00)>>8 ;
 800d278:	893b      	ldrh	r3, [r7, #8]
 800d27a:	0a1b      	lsrs	r3, r3, #8
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	753b      	strb	r3, [r7, #20]

			 for(int i=0; i<(2); i++)
 800d282:	2300      	movs	r3, #0
 800d284:	61bb      	str	r3, [r7, #24]
 800d286:	e01b      	b.n	800d2c0 <SPI_ETH_WR_REG_16+0x7e>
				 {
				 	x->TX[1]= addr & 0x00FF;//x->TX[2]= addr & 0x00FF;
 800d288:	897b      	ldrh	r3, [r7, #10]
 800d28a:	b2da      	uxtb	r2, r3
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	775a      	strb	r2, [r3, #29]
				 	x->TX[0]=(addr & 0xFF00)>>8;//x->TX[1]=(addr & 0xFF00)>>8;
 800d290:	897b      	ldrh	r3, [r7, #10]
 800d292:	0a1b      	lsrs	r3, r3, #8
 800d294:	b29b      	uxth	r3, r3
 800d296:	b2da      	uxtb	r2, r3
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	771a      	strb	r2, [r3, #28]
					addr++;
 800d29c:	897b      	ldrh	r3, [r7, #10]
 800d29e:	3301      	adds	r3, #1
 800d2a0:	817b      	strh	r3, [r7, #10]
					x->TX[3]=num[i];
 800d2a2:	f107 0214 	add.w	r2, r7, #20
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	4413      	add	r3, r2
 800d2aa:	781a      	ldrb	r2, [r3, #0]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	77da      	strb	r2, [r3, #31]
					res=SPI_ETH(x);
 800d2b0:	68f8      	ldr	r0, [r7, #12]
 800d2b2:	f7ff ff18 	bl	800d0e6 <SPI_ETH>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	83fb      	strh	r3, [r7, #30]
			 for(int i=0; i<(2); i++)
 800d2ba:	69bb      	ldr	r3, [r7, #24]
 800d2bc:	3301      	adds	r3, #1
 800d2be:	61bb      	str	r3, [r7, #24]
 800d2c0:	69bb      	ldr	r3, [r7, #24]
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	dde0      	ble.n	800d288 <SPI_ETH_WR_REG_16+0x46>
				 }
			 return(res);
 800d2c6:	8bfb      	ldrh	r3, [r7, #30]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3720      	adds	r7, #32
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5500_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght, uint8_t socket )
{
 800d2d0:	b590      	push	{r4, r7, lr}
 800d2d2:	b087      	sub	sp, #28
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	607a      	str	r2, [r7, #4]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	460b      	mov	r3, r1
 800d2de:	817b      	strh	r3, [r7, #10]
 800d2e0:	4613      	mov	r3, r2
 800d2e2:	813b      	strh	r3, [r7, #8]
		x->TX[2]= ((socket)<<3)|0x00;
 800d2e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d2e8:	00db      	lsls	r3, r3, #3
 800d2ea:	b2da      	uxtb	r2, r3
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	779a      	strb	r2, [r3, #30]
	if(lnght < 2048)
 800d2f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d2f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2f6:	d226      	bcs.n	800d346 <SPI_ETH_RD_RCV_REG_16+0x76>
	{
			x->TX[3]=0x00;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	77da      	strb	r2, [r3, #31]
			for(int i=0; i<(lnght); i++)
 800d2fe:	2300      	movs	r3, #0
 800d300:	617b      	str	r3, [r7, #20]
 800d302:	e01a      	b.n	800d33a <SPI_ETH_RD_RCV_REG_16+0x6a>
				{
				x->TX[1] = addr & 0x00FF;
 800d304:	897b      	ldrh	r3, [r7, #10]
 800d306:	b2da      	uxtb	r2, r3
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	775a      	strb	r2, [r3, #29]
				x->TX[0] = (addr & 0xFF00)>>8;
 800d30c:	897b      	ldrh	r3, [r7, #10]
 800d30e:	0a1b      	lsrs	r3, r3, #8
 800d310:	b29b      	uxth	r3, r3
 800d312:	b2da      	uxtb	r2, r3
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	771a      	strb	r2, [r3, #28]
				data[i+offset]=SPI_ETH(x);
 800d318:	893a      	ldrh	r2, [r7, #8]
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	4413      	add	r3, r2
 800d31e:	461a      	mov	r2, r3
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	189c      	adds	r4, r3, r2
 800d324:	68f8      	ldr	r0, [r7, #12]
 800d326:	f7ff fede 	bl	800d0e6 <SPI_ETH>
 800d32a:	4603      	mov	r3, r0
 800d32c:	7023      	strb	r3, [r4, #0]
				addr++;
 800d32e:	897b      	ldrh	r3, [r7, #10]
 800d330:	3301      	adds	r3, #1
 800d332:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	3301      	adds	r3, #1
 800d338:	617b      	str	r3, [r7, #20]
 800d33a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d33c:	697a      	ldr	r2, [r7, #20]
 800d33e:	429a      	cmp	r2, r3
 800d340:	dbe0      	blt.n	800d304 <SPI_ETH_RD_RCV_REG_16+0x34>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d342:	2300      	movs	r3, #0
 800d344:	e000      	b.n	800d348 <SPI_ETH_RD_RCV_REG_16+0x78>
	}
	else
	{
	return(1);
 800d346:	2301      	movs	r3, #1
	}
}
 800d348:	4618      	mov	r0, r3
 800d34a:	371c      	adds	r7, #28
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd90      	pop	{r4, r7, pc}

0800d350 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5500_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght, uint8_t socket )
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af00      	add	r7, sp, #0
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	607a      	str	r2, [r7, #4]
 800d35a:	461a      	mov	r2, r3
 800d35c:	460b      	mov	r3, r1
 800d35e:	817b      	strh	r3, [r7, #10]
 800d360:	4613      	mov	r3, r2
 800d362:	813b      	strh	r3, [r7, #8]
		x->TX[2]= ((socket)<<3)|0x04;
 800d364:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d368:	00db      	lsls	r3, r3, #3
 800d36a:	b25b      	sxtb	r3, r3
 800d36c:	f043 0304 	orr.w	r3, r3, #4
 800d370:	b25b      	sxtb	r3, r3
 800d372:	b2da      	uxtb	r2, r3
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	779a      	strb	r2, [r3, #30]
	if(lnght < 2048)
 800d378:	8c3b      	ldrh	r3, [r7, #32]
 800d37a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d37e:	d224      	bcs.n	800d3ca <SPI_ETH_WR_TX_REG_16+0x7a>
	{

			for(int i=0; i<(lnght); i++)
 800d380:	2300      	movs	r3, #0
 800d382:	617b      	str	r3, [r7, #20]
 800d384:	e01b      	b.n	800d3be <SPI_ETH_WR_TX_REG_16+0x6e>
				{
				x->TX[1] = addr & 0x00FF;
 800d386:	897b      	ldrh	r3, [r7, #10]
 800d388:	b2da      	uxtb	r2, r3
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	775a      	strb	r2, [r3, #29]
				x->TX[0] = (addr & 0xFF00)>>8;
 800d38e:	897b      	ldrh	r3, [r7, #10]
 800d390:	0a1b      	lsrs	r3, r3, #8
 800d392:	b29b      	uxth	r3, r3
 800d394:	b2da      	uxtb	r2, r3
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	771a      	strb	r2, [r3, #28]
				x->TX[3]= x->data[i+offset];
 800d39a:	893a      	ldrh	r2, [r7, #8]
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	4413      	add	r3, r2
 800d3a0:	68fa      	ldr	r2, [r7, #12]
 800d3a2:	4413      	add	r3, r2
 800d3a4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	77da      	strb	r2, [r3, #31]
				SPI_ETH(x);
 800d3ac:	68f8      	ldr	r0, [r7, #12]
 800d3ae:	f7ff fe9a 	bl	800d0e6 <SPI_ETH>
				addr++;
 800d3b2:	897b      	ldrh	r3, [r7, #10]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	617b      	str	r3, [r7, #20]
 800d3be:	8c3b      	ldrh	r3, [r7, #32]
 800d3c0:	697a      	ldr	r2, [r7, #20]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	dbdf      	blt.n	800d386 <SPI_ETH_WR_TX_REG_16+0x36>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	e000      	b.n	800d3cc <SPI_ETH_WR_TX_REG_16+0x7c>
	}
	else
	{
	return(1);
 800d3ca:	2301      	movs	r3, #1
	}
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3718      	adds	r7, #24
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5500_SPI * y, uint8_t socket, uint8_t z)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	460b      	mov	r3, r1
 800d3de:	70fb      	strb	r3, [r7, #3]
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= 0x00; 				//High Address Phase Hardcoded MR Register
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	771a      	strb	r2, [r3, #28]
	y->TX[1]= 0x01;					//Low Address Phase Command
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	775a      	strb	r2, [r3, #29]
	y->TX[2]= ((socket<<3)|0x04);	//Control Phase address + R/W + OP Mode
 800d3f0:	78fb      	ldrb	r3, [r7, #3]
 800d3f2:	00db      	lsls	r3, r3, #3
 800d3f4:	b25b      	sxtb	r3, r3
 800d3f6:	f043 0304 	orr.w	r3, r3, #4
 800d3fa:	b25b      	sxtb	r3, r3
 800d3fc:	b2da      	uxtb	r2, r3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	779a      	strb	r2, [r3, #30]
	y->TX[3]= z ;		//Load data to save
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	78ba      	ldrb	r2, [r7, #2]
 800d406:	77da      	strb	r2, [r3, #31]
	SPI_ETH(y);
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f7ff fe6c 	bl	800d0e6 <SPI_ETH>
}
 800d40e:	bf00      	nop
 800d410:	4618      	mov	r0, r3
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5500_SPI * y, uint8_t socket, uint8_t z)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	460b      	mov	r3, r1
 800d422:	70fb      	strb	r3, [r7, #3]
 800d424:	4613      	mov	r3, r2
 800d426:	70bb      	strb	r3, [r7, #2]
		y->TX[0]= 0x00; 				//High Address Phase Hardcoded MR Register
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2200      	movs	r2, #0
 800d42c:	771a      	strb	r2, [r3, #28]
		y->TX[1]= 0x00;					//Low Address Phase Mode
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2200      	movs	r2, #0
 800d432:	775a      	strb	r2, [r3, #29]
		y->TX[2]= ((socket)<<3)|0x04;	//Control Phase address + R/W + OP Mode
 800d434:	78fb      	ldrb	r3, [r7, #3]
 800d436:	00db      	lsls	r3, r3, #3
 800d438:	b25b      	sxtb	r3, r3
 800d43a:	f043 0304 	orr.w	r3, r3, #4
 800d43e:	b25b      	sxtb	r3, r3
 800d440:	b2da      	uxtb	r2, r3
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	779a      	strb	r2, [r3, #30]
		y->TX[3]= z ;		//Load data to save
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	78ba      	ldrb	r2, [r7, #2]
 800d44a:	77da      	strb	r2, [r3, #31]

	SPI_ETH(y);
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f7ff fe4a 	bl	800d0e6 <SPI_ETH>
}
 800d452:	bf00      	nop
 800d454:	4618      	mov	r0, r3
 800d456:	3708      	adds	r7, #8
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <eth_init>:


uint8_t eth_init(struct W5500_SPI * ETH)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af02      	add	r7, sp, #8
 800d462:	6078      	str	r0, [r7, #4]
  	 SPI_ETH_RESET(ETH);	//Reset W5500 por hardware
 800d464:	6878      	ldr	r0, [r7, #4]
 800d466:	f7ff fdf3 	bl	800d050 <SPI_ETH_RESET>
  	 HAL_Delay(800);
 800d46a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800d46e:	f7f5 fb55 	bl	8002b1c <HAL_Delay>

  	 SPI_ETH_REG(ETH, GAR,COMM_REG,SPI_WRITE, ETH->GAR,4);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d478:	3304      	adds	r3, #4
 800d47a:	2204      	movs	r2, #4
 800d47c:	9201      	str	r2, [sp, #4]
 800d47e:	9300      	str	r3, [sp, #0]
 800d480:	2301      	movs	r3, #1
 800d482:	2200      	movs	r2, #0
 800d484:	2101      	movs	r1, #1
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f7ff fe55 	bl	800d136 <SPI_ETH_REG>

	 ETH->T8=0x00;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d492:	2200      	movs	r2, #0
 800d494:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, IMR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d49e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	9301      	str	r3, [sp, #4]
 800d4a8:	9200      	str	r2, [sp, #0]
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	2116      	movs	r1, #22
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f7ff fe40 	bl	800d136 <SPI_ETH_REG>

	 ETH->T8=0x0F;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4bc:	220f      	movs	r2, #15
 800d4be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RTR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4c8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	9301      	str	r3, [sp, #4]
 800d4d2:	9200      	str	r2, [sp, #0]
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	2119      	movs	r1, #25
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f7ff fe2b 	bl	800d136 <SPI_ETH_REG>

	 ETH->T8=0xA0;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4e6:	22a0      	movs	r2, #160	; 0xa0
 800d4e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RTR+1,COMM_REG,SPI_WRITE, ETH->T8,1);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4f2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	9301      	str	r3, [sp, #4]
 800d4fc:	9200      	str	r2, [sp, #0]
 800d4fe:	2301      	movs	r3, #1
 800d500:	2200      	movs	r2, #0
 800d502:	211a      	movs	r1, #26
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f7ff fe16 	bl	800d136 <SPI_ETH_REG>

	 ETH->T8=0x07;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d510:	2207      	movs	r2, #7
 800d512:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RCR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d51c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d520:	461a      	mov	r2, r3
 800d522:	2301      	movs	r3, #1
 800d524:	9301      	str	r3, [sp, #4]
 800d526:	9200      	str	r2, [sp, #0]
 800d528:	2301      	movs	r3, #1
 800d52a:	2200      	movs	r2, #0
 800d52c:	211b      	movs	r1, #27
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f7ff fe01 	bl	800d136 <SPI_ETH_REG>

	 ETH->T8=0x00;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d53a:	2200      	movs	r2, #0
 800d53c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, SIMR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d546:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d54a:	461a      	mov	r2, r3
 800d54c:	2301      	movs	r3, #1
 800d54e:	9301      	str	r3, [sp, #4]
 800d550:	9200      	str	r2, [sp, #0]
 800d552:	2301      	movs	r3, #1
 800d554:	2200      	movs	r2, #0
 800d556:	2118      	movs	r1, #24
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f7ff fdec 	bl	800d136 <SPI_ETH_REG>

	 SPI_ETH_REG(ETH, SHAR,COMM_REG,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d564:	330c      	adds	r3, #12
 800d566:	2206      	movs	r2, #6
 800d568:	9201      	str	r2, [sp, #4]
 800d56a:	9300      	str	r3, [sp, #0]
 800d56c:	2301      	movs	r3, #1
 800d56e:	2200      	movs	r2, #0
 800d570:	2109      	movs	r1, #9
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f7ff fddf 	bl	800d136 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-MAC SET\r\n",strlen("\r\nETH-W5500-MAC SET"));
 800d578:	2113      	movs	r1, #19
 800d57a:	481d      	ldr	r0, [pc, #116]	; (800d5f0 <eth_init+0x194>)
 800d57c:	f7f3 ffb8 	bl	80014f0 <ITM0_Write>
	 SPI_ETH_REG(ETH, GAR,COMM_REG,SPI_WRITE, ETH->GAR,4);	//SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d586:	3304      	adds	r3, #4
 800d588:	2204      	movs	r2, #4
 800d58a:	9201      	str	r2, [sp, #4]
 800d58c:	9300      	str	r3, [sp, #0]
 800d58e:	2301      	movs	r3, #1
 800d590:	2200      	movs	r2, #0
 800d592:	2101      	movs	r1, #1
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f7ff fdce 	bl	800d136 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-GATEWAY SET\r\n",strlen("\r\nETH-W5500-GATEWAY SET\r\n"));									//same for server and client
 800d59a:	2119      	movs	r1, #25
 800d59c:	4815      	ldr	r0, [pc, #84]	; (800d5f4 <eth_init+0x198>)
 800d59e:	f7f3 ffa7 	bl	80014f0 <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR,COMM_REG,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d5a8:	3308      	adds	r3, #8
 800d5aa:	2204      	movs	r2, #4
 800d5ac:	9201      	str	r2, [sp, #4]
 800d5ae:	9300      	str	r3, [sp, #0]
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	2105      	movs	r1, #5
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f7ff fdbd 	bl	800d136 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-SUBNET SET\r\n",strlen("\r\nETH-W5500-SUBNET SET"));											//same for server and client
 800d5bc:	2116      	movs	r1, #22
 800d5be:	480e      	ldr	r0, [pc, #56]	; (800d5f8 <eth_init+0x19c>)
 800d5c0:	f7f3 ff96 	bl	80014f0 <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR,COMM_REG,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800d5ca:	3312      	adds	r3, #18
 800d5cc:	2204      	movs	r2, #4
 800d5ce:	9201      	str	r2, [sp, #4]
 800d5d0:	9300      	str	r3, [sp, #0]
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	210f      	movs	r1, #15
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f7ff fdac 	bl	800d136 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-IP SET\r\n",strlen("\r\nETH-W5500-IP SET"));
 800d5de:	2112      	movs	r1, #18
 800d5e0:	4806      	ldr	r0, [pc, #24]	; (800d5fc <eth_init+0x1a0>)
 800d5e2:	f7f3 ff85 	bl	80014f0 <ITM0_Write>

}
 800d5e6:	bf00      	nop
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3708      	adds	r7, #8
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	08010bdc 	.word	0x08010bdc
 800d5f4:	08010bf4 	.word	0x08010bf4
 800d5f8:	08010c10 	.word	0x08010c10
 800d5fc:	08010c2c 	.word	0x08010c2c

0800d600 <eth_socket_init>:

uint8_t eth_socket_init(struct W5500_SPI * ETH, uint8_t socket)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b086      	sub	sp, #24
 800d604:	af02      	add	r7, sp, #8
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	460b      	mov	r3, r1
 800d60a:	70fb      	strb	r3, [r7, #3]

	 ETH->T8=0x02;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d612:	2202      	movs	r2, #2
 800d614:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S0_REG,SPI_WRITE, ETH->T8,1);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d61e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d622:	461a      	mov	r2, r3
 800d624:	2301      	movs	r3, #1
 800d626:	9301      	str	r3, [sp, #4]
 800d628:	9200      	str	r2, [sp, #0]
 800d62a:	2301      	movs	r3, #1
 800d62c:	2201      	movs	r2, #1
 800d62e:	211e      	movs	r1, #30
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f7ff fd80 	bl	800d136 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S0_REG,SPI_WRITE, ETH->T8,1);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d63c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d640:	461a      	mov	r2, r3
 800d642:	2301      	movs	r3, #1
 800d644:	9301      	str	r3, [sp, #4]
 800d646:	9200      	str	r2, [sp, #0]
 800d648:	2301      	movs	r3, #1
 800d64a:	2201      	movs	r2, #1
 800d64c:	211f      	movs	r1, #31
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f7ff fd71 	bl	800d136 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S1_REG,SPI_WRITE, ETH->T8,1);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d65a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d65e:	461a      	mov	r2, r3
 800d660:	2301      	movs	r3, #1
 800d662:	9301      	str	r3, [sp, #4]
 800d664:	9200      	str	r2, [sp, #0]
 800d666:	2301      	movs	r3, #1
 800d668:	2205      	movs	r2, #5
 800d66a:	211e      	movs	r1, #30
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f7ff fd62 	bl	800d136 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S1_REG,SPI_WRITE, ETH->T8,1);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d678:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d67c:	461a      	mov	r2, r3
 800d67e:	2301      	movs	r3, #1
 800d680:	9301      	str	r3, [sp, #4]
 800d682:	9200      	str	r2, [sp, #0]
 800d684:	2301      	movs	r3, #1
 800d686:	2205      	movs	r2, #5
 800d688:	211f      	movs	r1, #31
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f7ff fd53 	bl	800d136 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S2_REG,SPI_WRITE, ETH->T8,1);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d696:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d69a:	461a      	mov	r2, r3
 800d69c:	2301      	movs	r3, #1
 800d69e:	9301      	str	r3, [sp, #4]
 800d6a0:	9200      	str	r2, [sp, #0]
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	2209      	movs	r2, #9
 800d6a6:	211e      	movs	r1, #30
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f7ff fd44 	bl	800d136 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S2_REG,SPI_WRITE, ETH->T8,1);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6b4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	9301      	str	r3, [sp, #4]
 800d6be:	9200      	str	r2, [sp, #0]
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	2209      	movs	r2, #9
 800d6c4:	211f      	movs	r1, #31
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f7ff fd35 	bl	800d136 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S3_REG,SPI_WRITE, ETH->T8,1);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6d2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	2301      	movs	r3, #1
 800d6da:	9301      	str	r3, [sp, #4]
 800d6dc:	9200      	str	r2, [sp, #0]
 800d6de:	2301      	movs	r3, #1
 800d6e0:	220d      	movs	r2, #13
 800d6e2:	211e      	movs	r1, #30
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f7ff fd26 	bl	800d136 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S3_REG,SPI_WRITE, ETH->T8,1);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6f0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	9301      	str	r3, [sp, #4]
 800d6fa:	9200      	str	r2, [sp, #0]
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	220d      	movs	r2, #13
 800d700:	211f      	movs	r1, #31
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7ff fd17 	bl	800d136 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S4_REG,SPI_WRITE, ETH->T8,1);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d70e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d712:	461a      	mov	r2, r3
 800d714:	2301      	movs	r3, #1
 800d716:	9301      	str	r3, [sp, #4]
 800d718:	9200      	str	r2, [sp, #0]
 800d71a:	2301      	movs	r3, #1
 800d71c:	2211      	movs	r2, #17
 800d71e:	211e      	movs	r1, #30
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f7ff fd08 	bl	800d136 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S4_REG,SPI_WRITE, ETH->T8,1);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d72c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d730:	461a      	mov	r2, r3
 800d732:	2301      	movs	r3, #1
 800d734:	9301      	str	r3, [sp, #4]
 800d736:	9200      	str	r2, [sp, #0]
 800d738:	2301      	movs	r3, #1
 800d73a:	2211      	movs	r2, #17
 800d73c:	211f      	movs	r1, #31
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f7ff fcf9 	bl	800d136 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S5_REG,SPI_WRITE, ETH->T8,1);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d74a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d74e:	461a      	mov	r2, r3
 800d750:	2301      	movs	r3, #1
 800d752:	9301      	str	r3, [sp, #4]
 800d754:	9200      	str	r2, [sp, #0]
 800d756:	2301      	movs	r3, #1
 800d758:	2215      	movs	r2, #21
 800d75a:	211e      	movs	r1, #30
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f7ff fcea 	bl	800d136 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S5_REG,SPI_WRITE, ETH->T8,1);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d768:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d76c:	461a      	mov	r2, r3
 800d76e:	2301      	movs	r3, #1
 800d770:	9301      	str	r3, [sp, #4]
 800d772:	9200      	str	r2, [sp, #0]
 800d774:	2301      	movs	r3, #1
 800d776:	2215      	movs	r2, #21
 800d778:	211f      	movs	r1, #31
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f7ff fcdb 	bl	800d136 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S6_REG,SPI_WRITE, ETH->T8,1);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d786:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d78a:	461a      	mov	r2, r3
 800d78c:	2301      	movs	r3, #1
 800d78e:	9301      	str	r3, [sp, #4]
 800d790:	9200      	str	r2, [sp, #0]
 800d792:	2301      	movs	r3, #1
 800d794:	2219      	movs	r2, #25
 800d796:	211e      	movs	r1, #30
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f7ff fccc 	bl	800d136 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S6_REG,SPI_WRITE, ETH->T8,1);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7a4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	9301      	str	r3, [sp, #4]
 800d7ae:	9200      	str	r2, [sp, #0]
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	2219      	movs	r2, #25
 800d7b4:	211f      	movs	r1, #31
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f7ff fcbd 	bl	800d136 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S7_REG,SPI_WRITE, ETH->T8,1);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7c2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	9301      	str	r3, [sp, #4]
 800d7cc:	9200      	str	r2, [sp, #0]
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	221d      	movs	r2, #29
 800d7d2:	211e      	movs	r1, #30
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f7ff fcae 	bl	800d136 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S7_REG,SPI_WRITE, ETH->T8,1);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7e0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	9301      	str	r3, [sp, #4]
 800d7ea:	9200      	str	r2, [sp, #0]
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	221d      	movs	r2, #29
 800d7f0:	211f      	movs	r1, #31
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f7ff fc9f 	bl	800d136 <SPI_ETH_REG>
	 ETH->T8=0x00;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d7fe:	2200      	movs	r2, #0
 800d800:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, S_TX_WR,S0_REG,SPI_WRITE, ETH->T8,1);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d80a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d80e:	461a      	mov	r2, r3
 800d810:	2301      	movs	r3, #1
 800d812:	9301      	str	r3, [sp, #4]
 800d814:	9200      	str	r2, [sp, #0]
 800d816:	2301      	movs	r3, #1
 800d818:	2201      	movs	r2, #1
 800d81a:	2124      	movs	r1, #36	; 0x24
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f7ff fc8a 	bl	800d136 <SPI_ETH_REG>
	 SPI_ETH_REG(ETH, S_TX_WR+1,S0_REG,SPI_WRITE, ETH->T8,1);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d828:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d82c:	461a      	mov	r2, r3
 800d82e:	2301      	movs	r3, #1
 800d830:	9301      	str	r3, [sp, #4]
 800d832:	9200      	str	r2, [sp, #0]
 800d834:	2301      	movs	r3, #1
 800d836:	2201      	movs	r2, #1
 800d838:	2125      	movs	r1, #37	; 0x25
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f7ff fc7b 	bl	800d136 <SPI_ETH_REG>
	 uint16_t b=0;
 800d840:	2300      	movs	r3, #0
 800d842:	81fb      	strh	r3, [r7, #14]
	 uint8_t spi_Data[2];
	 b = SPI_ETH_REG(ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 800d844:	2302      	movs	r3, #2
 800d846:	9301      	str	r3, [sp, #4]
 800d848:	f107 030c 	add.w	r3, r7, #12
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	2300      	movs	r3, #0
 800d850:	2201      	movs	r2, #1
 800d852:	2124      	movs	r1, #36	; 0x24
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f7ff fc6e 	bl	800d136 <SPI_ETH_REG>
 800d85a:	4603      	mov	r3, r0
 800d85c:	81fb      	strh	r3, [r7, #14]
	 //ITM0_Write("\r\nETH-W5500-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP SET"));									//same for server and client
	 SPI_ETH_REG(ETH, S_PORT, S0_REG,SPI_WRITE, ETH->S_PORT,2);									//same for server and client
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d864:	3302      	adds	r3, #2
 800d866:	2202      	movs	r2, #2
 800d868:	9201      	str	r2, [sp, #4]
 800d86a:	9300      	str	r3, [sp, #0]
 800d86c:	2301      	movs	r3, #1
 800d86e:	2201      	movs	r2, #1
 800d870:	2104      	movs	r1, #4
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f7ff fc5f 	bl	800d136 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800d878:	212c      	movs	r1, #44	; 0x2c
 800d87a:	4804      	ldr	r0, [pc, #16]	; (800d88c <eth_socket_init+0x28c>)
 800d87c:	f7f3 fe38 	bl	80014f0 <ITM0_Write>


}
 800d880:	bf00      	nop
 800d882:	4618      	mov	r0, r3
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	08010c44 	.word	0x08010c44

0800d890 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5500_SPI * y, uint8_t socket)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	460b      	mov	r3, r1
 800d89a:	70fb      	strb	r3, [r7, #3]
			y->TX[0]= 0x00; 				//High Address Phase Hardcoded Stat Register
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	771a      	strb	r2, [r3, #28]
			y->TX[1]= 0x03;					//Low Address Phase Mode
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2203      	movs	r2, #3
 800d8a6:	775a      	strb	r2, [r3, #29]
			y->TX[2]= ((socket)<<3)|0x00;	   //Control Phase address + R/W + OP Mode
 800d8a8:	78fb      	ldrb	r3, [r7, #3]
 800d8aa:	00db      	lsls	r3, r3, #3
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	779a      	strb	r2, [r3, #30]
			SPI_ETH(y);
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f7ff fc17 	bl	800d0e6 <SPI_ETH>
			return(y->RX[3]);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23

}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3708      	adds	r7, #8
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}

0800d8c6 <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5500_SPI * y, uint8_t socket)
{
 800d8c6:	b580      	push	{r7, lr}
 800d8c8:	b082      	sub	sp, #8
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	6078      	str	r0, [r7, #4]
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	70fb      	strb	r3, [r7, #3]
			y->TX[0]= 0x00; 				//High Address Phase Hardcoded Command Register
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	771a      	strb	r2, [r3, #28]
			y->TX[1]= 0x01;					//Low Address Phase Mode
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2201      	movs	r2, #1
 800d8dc:	775a      	strb	r2, [r3, #29]
			y->TX[2]= ((socket)<<3)|0x00;	   //Control Phase address + R/W + OP Mode
 800d8de:	78fb      	ldrb	r3, [r7, #3]
 800d8e0:	00db      	lsls	r3, r3, #3
 800d8e2:	b2da      	uxtb	r2, r3
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	779a      	strb	r2, [r3, #30]
			SPI_ETH(y);
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f7ff fbfc 	bl	800d0e6 <SPI_ETH>
			return(y->RX[3]);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23

}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3708      	adds	r7, #8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5500_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b08c      	sub	sp, #48	; 0x30
 800d900:	af02      	add	r7, sp, #8
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	607a      	str	r2, [r7, #4]
 800d906:	461a      	mov	r2, r3
 800d908:	460b      	mov	r3, r1
 800d90a:	72fb      	strb	r3, [r7, #11]
 800d90c:	4613      	mov	r3, r2
 800d90e:	813b      	strh	r3, [r7, #8]
	uint16_t S_bf_rcv_offset=0,
 800d910:	2300      	movs	r3, #0
 800d912:	84fb      	strh	r3, [r7, #38]	; 0x26
			 left_size=0,
 800d914:	2300      	movs	r3, #0
 800d916:	84bb      	strh	r3, [r7, #36]	; 0x24
			 upper_size=0,
 800d918:	2300      	movs	r3, #0
 800d91a:	847b      	strh	r3, [r7, #34]	; 0x22
			 destination_addr=0,
 800d91c:	2300      	movs	r3, #0
 800d91e:	843b      	strh	r3, [r7, #32]
			 S_RX_RD=0,
 800d920:	2300      	movs	r3, #0
 800d922:	83fb      	strh	r3, [r7, #30]
			 S_get_offset=0,
 800d924:	2300      	movs	r3, #0
 800d926:	83bb      	strh	r3, [r7, #28]
			 S_get_start_address=0,
 800d928:	2300      	movs	r3, #0
 800d92a:	837b      	strh	r3, [r7, #26]
			 S_mem_pointer=0,
 800d92c:	2300      	movs	r3, #0
 800d92e:	833b      	strh	r3, [r7, #24]
			 RX_MASK=0,
 800d930:	2300      	movs	r3, #0
 800d932:	82fb      	strh	r3, [r7, #22]
			 RX_BASE=0;
 800d934:	2300      	movs	r3, #0
 800d936:	82bb      	strh	r3, [r7, #20]
			RX_BASE=ETH->gS3_RX_BASE;
		}
		break;*/
		default :
		{
			RX_MASK=ETH->gS_RX_MASK;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d93e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d942:	82fb      	strh	r3, [r7, #22]
			RX_BASE=ETH->gS_RX_BASE;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d94a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d94e:	82bb      	strh	r3, [r7, #20]
		}
		break;
 800d950:	bf00      	nop
	}

	S_RX_RD = SPI_ETH_REG(ETH, S_RX_RD0 ,S0_REG ,SPI_READ, spi_Data,2);//S_RX_RD = SPI_ETH_REG(ETH, S_RX_RD_ADDR_BASEHH + socket ,S_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800d952:	2302      	movs	r3, #2
 800d954:	9301      	str	r3, [sp, #4]
 800d956:	f107 0310 	add.w	r3, r7, #16
 800d95a:	9300      	str	r3, [sp, #0]
 800d95c:	2300      	movs	r3, #0
 800d95e:	2201      	movs	r2, #1
 800d960:	2128      	movs	r1, #40	; 0x28
 800d962:	68f8      	ldr	r0, [r7, #12]
 800d964:	f7ff fbe7 	bl	800d136 <SPI_ETH_REG>
 800d968:	4603      	mov	r3, r0
 800d96a:	83fb      	strh	r3, [r7, #30]
	S_get_offset = S_RX_RD & RX_MASK;
 800d96c:	8bfa      	ldrh	r2, [r7, #30]
 800d96e:	8afb      	ldrh	r3, [r7, #22]
 800d970:	4013      	ands	r3, r2
 800d972:	83bb      	strh	r3, [r7, #28]
	S_get_start_address  = RX_BASE + S_get_offset;
 800d974:	8aba      	ldrh	r2, [r7, #20]
 800d976:	8bbb      	ldrh	r3, [r7, #28]
 800d978:	4413      	add	r3, r2
 800d97a:	837b      	strh	r3, [r7, #26]
	if((S_get_offset  + sizedata )>(RX_MASK + 1))
 800d97c:	8bba      	ldrh	r2, [r7, #28]
 800d97e:	893b      	ldrh	r3, [r7, #8]
 800d980:	441a      	add	r2, r3
 800d982:	8afb      	ldrh	r3, [r7, #22]
 800d984:	3301      	adds	r3, #1
 800d986:	429a      	cmp	r2, r3
 800d988:	dd30      	ble.n	800d9ec <eth_rd_SOCKET_DATA+0xf0>
		{
			upper_size = (RX_MASK + 1) - S_get_offset ;
 800d98a:	8afa      	ldrh	r2, [r7, #22]
 800d98c:	8bbb      	ldrh	r3, [r7, #28]
 800d98e:	1ad3      	subs	r3, r2, r3
 800d990:	b29b      	uxth	r3, r3
 800d992:	3301      	adds	r3, #1
 800d994:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , S_get_start_address , ETH->data , S_bf_rcv_offset, upper_size, socket);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d99c:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800d99e:	8b79      	ldrh	r1, [r7, #26]
 800d9a0:	7afb      	ldrb	r3, [r7, #11]
 800d9a2:	9301      	str	r3, [sp, #4]
 800d9a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9a6:	9300      	str	r3, [sp, #0]
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	68f8      	ldr	r0, [r7, #12]
 800d9ac:	f7ff fc90 	bl	800d2d0 <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800d9b0:	8c3a      	ldrh	r2, [r7, #32]
 800d9b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9b4:	4413      	add	r3, r2
 800d9b6:	843b      	strh	r3, [r7, #32]
			left_size=sizedata-upper_size;
 800d9b8:	893a      	ldrh	r2, [r7, #8]
 800d9ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9bc:	1ad3      	subs	r3, r2, r3
 800d9be:	84bb      	strh	r3, [r7, #36]	; 0x24
			S_bf_rcv_offset=upper_size;
 800d9c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9c2:	84fb      	strh	r3, [r7, #38]	; 0x26
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S_bf_rcv_offset, left_size, socket);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d9ca:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800d9cc:	8ab9      	ldrh	r1, [r7, #20]
 800d9ce:	7afb      	ldrb	r3, [r7, #11]
 800d9d0:	9301      	str	r3, [sp, #4]
 800d9d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9d4:	9300      	str	r3, [sp, #0]
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f7ff fc79 	bl	800d2d0 <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S_RX_RD + sizedata;
 800d9de:	8bfa      	ldrh	r2, [r7, #30]
 800d9e0:	893b      	ldrh	r3, [r7, #8]
 800d9e2:	4413      	add	r3, r2
 800d9e4:	b29a      	uxth	r2, r3
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	801a      	strh	r2, [r3, #0]
 800d9ea:	e012      	b.n	800da12 <eth_rd_SOCKET_DATA+0x116>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S_get_start_address , ETH->data , S_bf_rcv_offset, sizedata, socket);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d9f2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800d9f4:	8b79      	ldrh	r1, [r7, #26]
 800d9f6:	7afb      	ldrb	r3, [r7, #11]
 800d9f8:	9301      	str	r3, [sp, #4]
 800d9fa:	893b      	ldrh	r3, [r7, #8]
 800d9fc:	9300      	str	r3, [sp, #0]
 800d9fe:	4603      	mov	r3, r0
 800da00:	68f8      	ldr	r0, [r7, #12]
 800da02:	f7ff fc65 	bl	800d2d0 <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S_RX_RD + sizedata;
 800da06:	8bfa      	ldrh	r2, [r7, #30]
 800da08:	893b      	ldrh	r3, [r7, #8]
 800da0a:	4413      	add	r3, r2
 800da0c:	b29a      	uxth	r2, r3
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	b29b      	uxth	r3, r3
}
 800da16:	4618      	mov	r0, r3
 800da18:	3728      	adds	r7, #40	; 0x28
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}

0800da1e <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5500_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800da1e:	b580      	push	{r7, lr}
 800da20:	b08c      	sub	sp, #48	; 0x30
 800da22:	af02      	add	r7, sp, #8
 800da24:	60f8      	str	r0, [r7, #12]
 800da26:	607a      	str	r2, [r7, #4]
 800da28:	461a      	mov	r2, r3
 800da2a:	460b      	mov	r3, r1
 800da2c:	72fb      	strb	r3, [r7, #11]
 800da2e:	4613      	mov	r3, r2
 800da30:	813b      	strh	r3, [r7, #8]
	uint16_t S_bf_rcv_offset=0,
 800da32:	2300      	movs	r3, #0
 800da34:	84bb      	strh	r3, [r7, #36]	; 0x24
			 left_size=0,
 800da36:	2300      	movs	r3, #0
 800da38:	847b      	strh	r3, [r7, #34]	; 0x22
			 upper_size=0,
 800da3a:	2300      	movs	r3, #0
 800da3c:	843b      	strh	r3, [r7, #32]
			 source_addr=0,
 800da3e:	2300      	movs	r3, #0
 800da40:	83fb      	strh	r3, [r7, #30]
			 Sn_TX_WR=0,
 800da42:	2300      	movs	r3, #0
 800da44:	83bb      	strh	r3, [r7, #28]
			 get_offset=0,
 800da46:	2300      	movs	r3, #0
 800da48:	837b      	strh	r3, [r7, #26]
			 get_free_size=0,
 800da4a:	2300      	movs	r3, #0
 800da4c:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800da4e:	2300      	movs	r3, #0
 800da50:	833b      	strh	r3, [r7, #24]
			 S_mem_pointer=0,
 800da52:	2300      	movs	r3, #0
 800da54:	82fb      	strh	r3, [r7, #22]
			 TX_MASK=0,
 800da56:	2300      	movs	r3, #0
 800da58:	82bb      	strh	r3, [r7, #20]
			 TX_BASE=0;
 800da5a:	2300      	movs	r3, #0
 800da5c:	827b      	strh	r3, [r7, #18]
			TX_BASE=ETH->gS3_TX_BASE;
		}
		break;*/
		default :
		{
			TX_MASK=ETH->gS_TX_MASK;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da68:	82bb      	strh	r3, [r7, #20]
			TX_BASE=ETH->gS_TX_BASE;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800da74:	827b      	strh	r3, [r7, #18]
		}
		break;
 800da76:	bf00      	nop
	}

	while(get_free_size<send_size)
 800da78:	e00c      	b.n	800da94 <eth_wr_SOCKET_DATA+0x76>
			{
				get_free_size=SPI_ETH_REG(ETH, S_TX_FSR, S0_REG ,SPI_READ, spi_Data,2);//get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S_TX_FSR	=   0x420,
 800da7a:	2302      	movs	r3, #2
 800da7c:	9301      	str	r3, [sp, #4]
 800da7e:	f107 0310 	add.w	r3, r7, #16
 800da82:	9300      	str	r3, [sp, #0]
 800da84:	2300      	movs	r3, #0
 800da86:	2201      	movs	r2, #1
 800da88:	2120      	movs	r1, #32
 800da8a:	68f8      	ldr	r0, [r7, #12]
 800da8c:	f7ff fb53 	bl	800d136 <SPI_ETH_REG>
 800da90:	4603      	mov	r3, r0
 800da92:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800da94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800da96:	893b      	ldrh	r3, [r7, #8]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d3ee      	bcc.n	800da7a <eth_wr_SOCKET_DATA+0x5c>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2); // S_TX_RD =   0x424,Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S_TX_RD =   0x424,
 800da9c:	2302      	movs	r3, #2
 800da9e:	9301      	str	r3, [sp, #4]
 800daa0:	f107 0310 	add.w	r3, r7, #16
 800daa4:	9300      	str	r3, [sp, #0]
 800daa6:	2300      	movs	r3, #0
 800daa8:	2201      	movs	r2, #1
 800daaa:	2124      	movs	r1, #36	; 0x24
 800daac:	68f8      	ldr	r0, [r7, #12]
 800daae:	f7ff fb42 	bl	800d136 <SPI_ETH_REG>
 800dab2:	4603      	mov	r3, r0
 800dab4:	83bb      	strh	r3, [r7, #28]
				get_offset= Sn_TX_WR & TX_MASK;
 800dab6:	8bba      	ldrh	r2, [r7, #28]
 800dab8:	8abb      	ldrh	r3, [r7, #20]
 800daba:	4013      	ands	r3, r2
 800dabc:	837b      	strh	r3, [r7, #26]
				get_start_address=TX_BASE + get_offset;
 800dabe:	8a7a      	ldrh	r2, [r7, #18]
 800dac0:	8b7b      	ldrh	r3, [r7, #26]
 800dac2:	4413      	add	r3, r2
 800dac4:	833b      	strh	r3, [r7, #24]

				if((get_offset + send_size)>(TX_MASK + 1))
 800dac6:	8b7a      	ldrh	r2, [r7, #26]
 800dac8:	893b      	ldrh	r3, [r7, #8]
 800daca:	441a      	add	r2, r3
 800dacc:	8abb      	ldrh	r3, [r7, #20]
 800dace:	3301      	adds	r3, #1
 800dad0:	429a      	cmp	r2, r3
 800dad2:	dd30      	ble.n	800db36 <eth_wr_SOCKET_DATA+0x118>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800dad4:	8aba      	ldrh	r2, [r7, #20]
 800dad6:	8b7b      	ldrh	r3, [r7, #26]
 800dad8:	1ad3      	subs	r3, r2, r3
 800dada:	b29b      	uxth	r3, r3
 800dadc:	3301      	adds	r3, #1
 800dade:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S_bf_rcv_offset, upper_size,socket);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800dae6:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800dae8:	8b39      	ldrh	r1, [r7, #24]
 800daea:	7afb      	ldrb	r3, [r7, #11]
 800daec:	9301      	str	r3, [sp, #4]
 800daee:	8c3b      	ldrh	r3, [r7, #32]
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	4603      	mov	r3, r0
 800daf4:	68f8      	ldr	r0, [r7, #12]
 800daf6:	f7ff fc2b 	bl	800d350 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800dafa:	8bfa      	ldrh	r2, [r7, #30]
 800dafc:	8c3b      	ldrh	r3, [r7, #32]
 800dafe:	4413      	add	r3, r2
 800db00:	83fb      	strh	r3, [r7, #30]
						left_size=send_size-upper_size;
 800db02:	893a      	ldrh	r2, [r7, #8]
 800db04:	8c3b      	ldrh	r3, [r7, #32]
 800db06:	1ad3      	subs	r3, r2, r3
 800db08:	847b      	strh	r3, [r7, #34]	; 0x22
						S_bf_rcv_offset=upper_size;
 800db0a:	8c3b      	ldrh	r3, [r7, #32]
 800db0c:	84bb      	strh	r3, [r7, #36]	; 0x24
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S_bf_rcv_offset, left_size, socket);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800db14:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800db16:	8a79      	ldrh	r1, [r7, #18]
 800db18:	7afb      	ldrb	r3, [r7, #11]
 800db1a:	9301      	str	r3, [sp, #4]
 800db1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db1e:	9300      	str	r3, [sp, #0]
 800db20:	4603      	mov	r3, r0
 800db22:	68f8      	ldr	r0, [r7, #12]
 800db24:	f7ff fc14 	bl	800d350 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800db28:	8bba      	ldrh	r2, [r7, #28]
 800db2a:	893b      	ldrh	r3, [r7, #8]
 800db2c:	4413      	add	r3, r2
 800db2e:	b29a      	uxth	r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	801a      	strh	r2, [r3, #0]
 800db34:	e012      	b.n	800db5c <eth_wr_SOCKET_DATA+0x13e>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S_bf_rcv_offset, send_size, socket);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800db3c:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800db3e:	8b39      	ldrh	r1, [r7, #24]
 800db40:	7afb      	ldrb	r3, [r7, #11]
 800db42:	9301      	str	r3, [sp, #4]
 800db44:	893b      	ldrh	r3, [r7, #8]
 800db46:	9300      	str	r3, [sp, #0]
 800db48:	4603      	mov	r3, r0
 800db4a:	68f8      	ldr	r0, [r7, #12]
 800db4c:	f7ff fc00 	bl	800d350 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800db50:	8bba      	ldrh	r2, [r7, #28]
 800db52:	893b      	ldrh	r3, [r7, #8]
 800db54:	4413      	add	r3, r2
 800db56:	b29a      	uxth	r2, r3
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	801a      	strh	r2, [r3, #0]
					}

}
 800db5c:	bf00      	nop
 800db5e:	4618      	mov	r0, r3
 800db60:	3728      	adds	r7, #40	; 0x28
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}

0800db66 <SPI_ETH_SNIFF>:

uint8_t SPI_ETH_SNIFF(struct W5500_SPY * Y,struct W5500_SPI * X)
{
 800db66:	b580      	push	{r7, lr}
 800db68:	b084      	sub	sp, #16
 800db6a:	af02      	add	r7, sp, #8
 800db6c:	6078      	str	r0, [r7, #4]
 800db6e:	6039      	str	r1, [r7, #0]
	Y->MR=SPI_ETH_REG(X, 0 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db76:	3318      	adds	r3, #24
 800db78:	2201      	movs	r2, #1
 800db7a:	9201      	str	r2, [sp, #4]
 800db7c:	9300      	str	r3, [sp, #0]
 800db7e:	2300      	movs	r3, #0
 800db80:	2200      	movs	r2, #0
 800db82:	2100      	movs	r1, #0
 800db84:	6838      	ldr	r0, [r7, #0]
 800db86:	f7ff fad6 	bl	800d136 <SPI_ETH_REG>
 800db8a:	4603      	mov	r3, r0
 800db8c:	b2da      	uxtb	r2, r3
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	701a      	strb	r2, [r3, #0]

	Y->GAR[0]=SPI_ETH_REG(X, 1 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db98:	3318      	adds	r3, #24
 800db9a:	2201      	movs	r2, #1
 800db9c:	9201      	str	r2, [sp, #4]
 800db9e:	9300      	str	r3, [sp, #0]
 800dba0:	2300      	movs	r3, #0
 800dba2:	2200      	movs	r2, #0
 800dba4:	2101      	movs	r1, #1
 800dba6:	6838      	ldr	r0, [r7, #0]
 800dba8:	f7ff fac5 	bl	800d136 <SPI_ETH_REG>
 800dbac:	4603      	mov	r3, r0
 800dbae:	b2da      	uxtb	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	705a      	strb	r2, [r3, #1]
	Y->GAR[1]=SPI_ETH_REG(X, 2 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dbba:	3318      	adds	r3, #24
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	9201      	str	r2, [sp, #4]
 800dbc0:	9300      	str	r3, [sp, #0]
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	2102      	movs	r1, #2
 800dbc8:	6838      	ldr	r0, [r7, #0]
 800dbca:	f7ff fab4 	bl	800d136 <SPI_ETH_REG>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	b2da      	uxtb	r2, r3
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	709a      	strb	r2, [r3, #2]
	Y->GAR[2]=SPI_ETH_REG(X, 3 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dbdc:	3318      	adds	r3, #24
 800dbde:	2201      	movs	r2, #1
 800dbe0:	9201      	str	r2, [sp, #4]
 800dbe2:	9300      	str	r3, [sp, #0]
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	2103      	movs	r1, #3
 800dbea:	6838      	ldr	r0, [r7, #0]
 800dbec:	f7ff faa3 	bl	800d136 <SPI_ETH_REG>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	b2da      	uxtb	r2, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	70da      	strb	r2, [r3, #3]
	Y->GAR[3]=SPI_ETH_REG(X, 4 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dbfe:	3318      	adds	r3, #24
 800dc00:	2201      	movs	r2, #1
 800dc02:	9201      	str	r2, [sp, #4]
 800dc04:	9300      	str	r3, [sp, #0]
 800dc06:	2300      	movs	r3, #0
 800dc08:	2200      	movs	r2, #0
 800dc0a:	2104      	movs	r1, #4
 800dc0c:	6838      	ldr	r0, [r7, #0]
 800dc0e:	f7ff fa92 	bl	800d136 <SPI_ETH_REG>
 800dc12:	4603      	mov	r3, r0
 800dc14:	b2da      	uxtb	r2, r3
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	711a      	strb	r2, [r3, #4]

	Y->SUBR[0]=SPI_ETH_REG(X, 5 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc20:	3318      	adds	r3, #24
 800dc22:	2201      	movs	r2, #1
 800dc24:	9201      	str	r2, [sp, #4]
 800dc26:	9300      	str	r3, [sp, #0]
 800dc28:	2300      	movs	r3, #0
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	2105      	movs	r1, #5
 800dc2e:	6838      	ldr	r0, [r7, #0]
 800dc30:	f7ff fa81 	bl	800d136 <SPI_ETH_REG>
 800dc34:	4603      	mov	r3, r0
 800dc36:	b2da      	uxtb	r2, r3
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	715a      	strb	r2, [r3, #5]
	Y->SUBR[1]=SPI_ETH_REG(X, 6 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc42:	3318      	adds	r3, #24
 800dc44:	2201      	movs	r2, #1
 800dc46:	9201      	str	r2, [sp, #4]
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	2106      	movs	r1, #6
 800dc50:	6838      	ldr	r0, [r7, #0]
 800dc52:	f7ff fa70 	bl	800d136 <SPI_ETH_REG>
 800dc56:	4603      	mov	r3, r0
 800dc58:	b2da      	uxtb	r2, r3
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	719a      	strb	r2, [r3, #6]
	Y->SUBR[2]=SPI_ETH_REG(X, 7 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc64:	3318      	adds	r3, #24
 800dc66:	2201      	movs	r2, #1
 800dc68:	9201      	str	r2, [sp, #4]
 800dc6a:	9300      	str	r3, [sp, #0]
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	2200      	movs	r2, #0
 800dc70:	2107      	movs	r1, #7
 800dc72:	6838      	ldr	r0, [r7, #0]
 800dc74:	f7ff fa5f 	bl	800d136 <SPI_ETH_REG>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	b2da      	uxtb	r2, r3
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	71da      	strb	r2, [r3, #7]
	Y->SUBR[3]=SPI_ETH_REG(X, 8 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc86:	3318      	adds	r3, #24
 800dc88:	2201      	movs	r2, #1
 800dc8a:	9201      	str	r2, [sp, #4]
 800dc8c:	9300      	str	r3, [sp, #0]
 800dc8e:	2300      	movs	r3, #0
 800dc90:	2200      	movs	r2, #0
 800dc92:	2108      	movs	r1, #8
 800dc94:	6838      	ldr	r0, [r7, #0]
 800dc96:	f7ff fa4e 	bl	800d136 <SPI_ETH_REG>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	b2da      	uxtb	r2, r3
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	721a      	strb	r2, [r3, #8]

	Y->SHAR[0]=SPI_ETH_REG(X, 9 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dca8:	3318      	adds	r3, #24
 800dcaa:	2201      	movs	r2, #1
 800dcac:	9201      	str	r2, [sp, #4]
 800dcae:	9300      	str	r3, [sp, #0]
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	2109      	movs	r1, #9
 800dcb6:	6838      	ldr	r0, [r7, #0]
 800dcb8:	f7ff fa3d 	bl	800d136 <SPI_ETH_REG>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	b2da      	uxtb	r2, r3
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	725a      	strb	r2, [r3, #9]
	Y->SHAR[1]=SPI_ETH_REG(X, 10 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dcca:	3318      	adds	r3, #24
 800dccc:	2201      	movs	r2, #1
 800dcce:	9201      	str	r2, [sp, #4]
 800dcd0:	9300      	str	r3, [sp, #0]
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	210a      	movs	r1, #10
 800dcd8:	6838      	ldr	r0, [r7, #0]
 800dcda:	f7ff fa2c 	bl	800d136 <SPI_ETH_REG>
 800dcde:	4603      	mov	r3, r0
 800dce0:	b2da      	uxtb	r2, r3
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	729a      	strb	r2, [r3, #10]
	Y->SHAR[2]=SPI_ETH_REG(X, 11 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dcec:	3318      	adds	r3, #24
 800dcee:	2201      	movs	r2, #1
 800dcf0:	9201      	str	r2, [sp, #4]
 800dcf2:	9300      	str	r3, [sp, #0]
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	210b      	movs	r1, #11
 800dcfa:	6838      	ldr	r0, [r7, #0]
 800dcfc:	f7ff fa1b 	bl	800d136 <SPI_ETH_REG>
 800dd00:	4603      	mov	r3, r0
 800dd02:	b2da      	uxtb	r2, r3
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	72da      	strb	r2, [r3, #11]
	Y->SHAR[3]=SPI_ETH_REG(X, 12 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd0e:	3318      	adds	r3, #24
 800dd10:	2201      	movs	r2, #1
 800dd12:	9201      	str	r2, [sp, #4]
 800dd14:	9300      	str	r3, [sp, #0]
 800dd16:	2300      	movs	r3, #0
 800dd18:	2200      	movs	r2, #0
 800dd1a:	210c      	movs	r1, #12
 800dd1c:	6838      	ldr	r0, [r7, #0]
 800dd1e:	f7ff fa0a 	bl	800d136 <SPI_ETH_REG>
 800dd22:	4603      	mov	r3, r0
 800dd24:	b2da      	uxtb	r2, r3
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	731a      	strb	r2, [r3, #12]
	Y->SHAR[4]=SPI_ETH_REG(X, 13 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd30:	3318      	adds	r3, #24
 800dd32:	2201      	movs	r2, #1
 800dd34:	9201      	str	r2, [sp, #4]
 800dd36:	9300      	str	r3, [sp, #0]
 800dd38:	2300      	movs	r3, #0
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	210d      	movs	r1, #13
 800dd3e:	6838      	ldr	r0, [r7, #0]
 800dd40:	f7ff f9f9 	bl	800d136 <SPI_ETH_REG>
 800dd44:	4603      	mov	r3, r0
 800dd46:	b2da      	uxtb	r2, r3
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	735a      	strb	r2, [r3, #13]
	Y->SHAR[5]=SPI_ETH_REG(X, 14 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd52:	3318      	adds	r3, #24
 800dd54:	2201      	movs	r2, #1
 800dd56:	9201      	str	r2, [sp, #4]
 800dd58:	9300      	str	r3, [sp, #0]
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	210e      	movs	r1, #14
 800dd60:	6838      	ldr	r0, [r7, #0]
 800dd62:	f7ff f9e8 	bl	800d136 <SPI_ETH_REG>
 800dd66:	4603      	mov	r3, r0
 800dd68:	b2da      	uxtb	r2, r3
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	739a      	strb	r2, [r3, #14]

	Y->SIPR[0]=SPI_ETH_REG(X, 15 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd74:	3318      	adds	r3, #24
 800dd76:	2201      	movs	r2, #1
 800dd78:	9201      	str	r2, [sp, #4]
 800dd7a:	9300      	str	r3, [sp, #0]
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	2200      	movs	r2, #0
 800dd80:	210f      	movs	r1, #15
 800dd82:	6838      	ldr	r0, [r7, #0]
 800dd84:	f7ff f9d7 	bl	800d136 <SPI_ETH_REG>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	b2da      	uxtb	r2, r3
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	73da      	strb	r2, [r3, #15]
	Y->SIPR[1]=SPI_ETH_REG(X, 16 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd96:	3318      	adds	r3, #24
 800dd98:	2201      	movs	r2, #1
 800dd9a:	9201      	str	r2, [sp, #4]
 800dd9c:	9300      	str	r3, [sp, #0]
 800dd9e:	2300      	movs	r3, #0
 800dda0:	2200      	movs	r2, #0
 800dda2:	2110      	movs	r1, #16
 800dda4:	6838      	ldr	r0, [r7, #0]
 800dda6:	f7ff f9c6 	bl	800d136 <SPI_ETH_REG>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	b2da      	uxtb	r2, r3
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	741a      	strb	r2, [r3, #16]
	Y->SIPR[2]=SPI_ETH_REG(X, 17 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddb8:	3318      	adds	r3, #24
 800ddba:	2201      	movs	r2, #1
 800ddbc:	9201      	str	r2, [sp, #4]
 800ddbe:	9300      	str	r3, [sp, #0]
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	2111      	movs	r1, #17
 800ddc6:	6838      	ldr	r0, [r7, #0]
 800ddc8:	f7ff f9b5 	bl	800d136 <SPI_ETH_REG>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	b2da      	uxtb	r2, r3
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	745a      	strb	r2, [r3, #17]
	Y->SIPR[3]=SPI_ETH_REG(X, 18 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddda:	3318      	adds	r3, #24
 800dddc:	2201      	movs	r2, #1
 800ddde:	9201      	str	r2, [sp, #4]
 800dde0:	9300      	str	r3, [sp, #0]
 800dde2:	2300      	movs	r3, #0
 800dde4:	2200      	movs	r2, #0
 800dde6:	2112      	movs	r1, #18
 800dde8:	6838      	ldr	r0, [r7, #0]
 800ddea:	f7ff f9a4 	bl	800d136 <SPI_ETH_REG>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	b2da      	uxtb	r2, r3
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	749a      	strb	r2, [r3, #18]

	Y->INTLEVEL[0]=SPI_ETH_REG(X, 19 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddfc:	3318      	adds	r3, #24
 800ddfe:	2201      	movs	r2, #1
 800de00:	9201      	str	r2, [sp, #4]
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	2300      	movs	r3, #0
 800de06:	2200      	movs	r2, #0
 800de08:	2113      	movs	r1, #19
 800de0a:	6838      	ldr	r0, [r7, #0]
 800de0c:	f7ff f993 	bl	800d136 <SPI_ETH_REG>
 800de10:	4603      	mov	r3, r0
 800de12:	b2da      	uxtb	r2, r3
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	74da      	strb	r2, [r3, #19]
	Y->INTLEVEL[1]=SPI_ETH_REG(X, 20 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de1e:	3318      	adds	r3, #24
 800de20:	2201      	movs	r2, #1
 800de22:	9201      	str	r2, [sp, #4]
 800de24:	9300      	str	r3, [sp, #0]
 800de26:	2300      	movs	r3, #0
 800de28:	2200      	movs	r2, #0
 800de2a:	2114      	movs	r1, #20
 800de2c:	6838      	ldr	r0, [r7, #0]
 800de2e:	f7ff f982 	bl	800d136 <SPI_ETH_REG>
 800de32:	4603      	mov	r3, r0
 800de34:	b2da      	uxtb	r2, r3
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	751a      	strb	r2, [r3, #20]

	Y->IR=SPI_ETH_REG(X, 21 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de40:	3318      	adds	r3, #24
 800de42:	2201      	movs	r2, #1
 800de44:	9201      	str	r2, [sp, #4]
 800de46:	9300      	str	r3, [sp, #0]
 800de48:	2300      	movs	r3, #0
 800de4a:	2200      	movs	r2, #0
 800de4c:	2115      	movs	r1, #21
 800de4e:	6838      	ldr	r0, [r7, #0]
 800de50:	f7ff f971 	bl	800d136 <SPI_ETH_REG>
 800de54:	4603      	mov	r3, r0
 800de56:	b2da      	uxtb	r2, r3
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	755a      	strb	r2, [r3, #21]

	Y->IMR=SPI_ETH_REG(X, 22 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de62:	3318      	adds	r3, #24
 800de64:	2201      	movs	r2, #1
 800de66:	9201      	str	r2, [sp, #4]
 800de68:	9300      	str	r3, [sp, #0]
 800de6a:	2300      	movs	r3, #0
 800de6c:	2200      	movs	r2, #0
 800de6e:	2116      	movs	r1, #22
 800de70:	6838      	ldr	r0, [r7, #0]
 800de72:	f7ff f960 	bl	800d136 <SPI_ETH_REG>
 800de76:	4603      	mov	r3, r0
 800de78:	b2da      	uxtb	r2, r3
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	759a      	strb	r2, [r3, #22]

	Y->SIR=SPI_ETH_REG(X, 23 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de84:	3318      	adds	r3, #24
 800de86:	2201      	movs	r2, #1
 800de88:	9201      	str	r2, [sp, #4]
 800de8a:	9300      	str	r3, [sp, #0]
 800de8c:	2300      	movs	r3, #0
 800de8e:	2200      	movs	r2, #0
 800de90:	2117      	movs	r1, #23
 800de92:	6838      	ldr	r0, [r7, #0]
 800de94:	f7ff f94f 	bl	800d136 <SPI_ETH_REG>
 800de98:	4603      	mov	r3, r0
 800de9a:	b2da      	uxtb	r2, r3
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	75da      	strb	r2, [r3, #23]

	Y->SIMR=SPI_ETH_REG(X, 24 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dea6:	3318      	adds	r3, #24
 800dea8:	2201      	movs	r2, #1
 800deaa:	9201      	str	r2, [sp, #4]
 800deac:	9300      	str	r3, [sp, #0]
 800deae:	2300      	movs	r3, #0
 800deb0:	2200      	movs	r2, #0
 800deb2:	2118      	movs	r1, #24
 800deb4:	6838      	ldr	r0, [r7, #0]
 800deb6:	f7ff f93e 	bl	800d136 <SPI_ETH_REG>
 800deba:	4603      	mov	r3, r0
 800debc:	b2da      	uxtb	r2, r3
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	761a      	strb	r2, [r3, #24]

	Y->RTR[0]=SPI_ETH_REG(X, 25 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dec8:	3318      	adds	r3, #24
 800deca:	2201      	movs	r2, #1
 800decc:	9201      	str	r2, [sp, #4]
 800dece:	9300      	str	r3, [sp, #0]
 800ded0:	2300      	movs	r3, #0
 800ded2:	2200      	movs	r2, #0
 800ded4:	2119      	movs	r1, #25
 800ded6:	6838      	ldr	r0, [r7, #0]
 800ded8:	f7ff f92d 	bl	800d136 <SPI_ETH_REG>
 800dedc:	4603      	mov	r3, r0
 800dede:	b2da      	uxtb	r2, r3
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	765a      	strb	r2, [r3, #25]
	Y->RTR[1]=SPI_ETH_REG(X, 26 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800deea:	3318      	adds	r3, #24
 800deec:	2201      	movs	r2, #1
 800deee:	9201      	str	r2, [sp, #4]
 800def0:	9300      	str	r3, [sp, #0]
 800def2:	2300      	movs	r3, #0
 800def4:	2200      	movs	r2, #0
 800def6:	211a      	movs	r1, #26
 800def8:	6838      	ldr	r0, [r7, #0]
 800defa:	f7ff f91c 	bl	800d136 <SPI_ETH_REG>
 800defe:	4603      	mov	r3, r0
 800df00:	b2da      	uxtb	r2, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	769a      	strb	r2, [r3, #26]

	Y->RCR=SPI_ETH_REG(X, 27 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df0c:	3318      	adds	r3, #24
 800df0e:	2201      	movs	r2, #1
 800df10:	9201      	str	r2, [sp, #4]
 800df12:	9300      	str	r3, [sp, #0]
 800df14:	2300      	movs	r3, #0
 800df16:	2200      	movs	r2, #0
 800df18:	211b      	movs	r1, #27
 800df1a:	6838      	ldr	r0, [r7, #0]
 800df1c:	f7ff f90b 	bl	800d136 <SPI_ETH_REG>
 800df20:	4603      	mov	r3, r0
 800df22:	b2da      	uxtb	r2, r3
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	76da      	strb	r2, [r3, #27]

	Y->PTIMER=SPI_ETH_REG(X, 28 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df2e:	3318      	adds	r3, #24
 800df30:	2201      	movs	r2, #1
 800df32:	9201      	str	r2, [sp, #4]
 800df34:	9300      	str	r3, [sp, #0]
 800df36:	2300      	movs	r3, #0
 800df38:	2200      	movs	r2, #0
 800df3a:	211c      	movs	r1, #28
 800df3c:	6838      	ldr	r0, [r7, #0]
 800df3e:	f7ff f8fa 	bl	800d136 <SPI_ETH_REG>
 800df42:	4603      	mov	r3, r0
 800df44:	b2da      	uxtb	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	771a      	strb	r2, [r3, #28]

	Y->PMAGIC=SPI_ETH_REG(X, 29 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df50:	3318      	adds	r3, #24
 800df52:	2201      	movs	r2, #1
 800df54:	9201      	str	r2, [sp, #4]
 800df56:	9300      	str	r3, [sp, #0]
 800df58:	2300      	movs	r3, #0
 800df5a:	2200      	movs	r2, #0
 800df5c:	211d      	movs	r1, #29
 800df5e:	6838      	ldr	r0, [r7, #0]
 800df60:	f7ff f8e9 	bl	800d136 <SPI_ETH_REG>
 800df64:	4603      	mov	r3, r0
 800df66:	b2da      	uxtb	r2, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	775a      	strb	r2, [r3, #29]

	Y->PHAR[0]=SPI_ETH_REG(X, 30 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df72:	3318      	adds	r3, #24
 800df74:	2201      	movs	r2, #1
 800df76:	9201      	str	r2, [sp, #4]
 800df78:	9300      	str	r3, [sp, #0]
 800df7a:	2300      	movs	r3, #0
 800df7c:	2200      	movs	r2, #0
 800df7e:	211e      	movs	r1, #30
 800df80:	6838      	ldr	r0, [r7, #0]
 800df82:	f7ff f8d8 	bl	800d136 <SPI_ETH_REG>
 800df86:	4603      	mov	r3, r0
 800df88:	b2da      	uxtb	r2, r3
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	779a      	strb	r2, [r3, #30]
	Y->PHAR[1]=SPI_ETH_REG(X, 31 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df94:	3318      	adds	r3, #24
 800df96:	2201      	movs	r2, #1
 800df98:	9201      	str	r2, [sp, #4]
 800df9a:	9300      	str	r3, [sp, #0]
 800df9c:	2300      	movs	r3, #0
 800df9e:	2200      	movs	r2, #0
 800dfa0:	211f      	movs	r1, #31
 800dfa2:	6838      	ldr	r0, [r7, #0]
 800dfa4:	f7ff f8c7 	bl	800d136 <SPI_ETH_REG>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	b2da      	uxtb	r2, r3
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	77da      	strb	r2, [r3, #31]
	Y->PHAR[2]=SPI_ETH_REG(X, 32 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dfb6:	3318      	adds	r3, #24
 800dfb8:	2201      	movs	r2, #1
 800dfba:	9201      	str	r2, [sp, #4]
 800dfbc:	9300      	str	r3, [sp, #0]
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	2120      	movs	r1, #32
 800dfc4:	6838      	ldr	r0, [r7, #0]
 800dfc6:	f7ff f8b6 	bl	800d136 <SPI_ETH_REG>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	b2da      	uxtb	r2, r3
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f883 2020 	strb.w	r2, [r3, #32]
	Y->PHAR[3]=SPI_ETH_REG(X, 33 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dfda:	3318      	adds	r3, #24
 800dfdc:	2201      	movs	r2, #1
 800dfde:	9201      	str	r2, [sp, #4]
 800dfe0:	9300      	str	r3, [sp, #0]
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	2121      	movs	r1, #33	; 0x21
 800dfe8:	6838      	ldr	r0, [r7, #0]
 800dfea:	f7ff f8a4 	bl	800d136 <SPI_ETH_REG>
 800dfee:	4603      	mov	r3, r0
 800dff0:	b2da      	uxtb	r2, r3
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Y->PHAR[4]=SPI_ETH_REG(X, 34 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dffe:	3318      	adds	r3, #24
 800e000:	2201      	movs	r2, #1
 800e002:	9201      	str	r2, [sp, #4]
 800e004:	9300      	str	r3, [sp, #0]
 800e006:	2300      	movs	r3, #0
 800e008:	2200      	movs	r2, #0
 800e00a:	2122      	movs	r1, #34	; 0x22
 800e00c:	6838      	ldr	r0, [r7, #0]
 800e00e:	f7ff f892 	bl	800d136 <SPI_ETH_REG>
 800e012:	4603      	mov	r3, r0
 800e014:	b2da      	uxtb	r2, r3
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Y->PHAR[5]=SPI_ETH_REG(X, 35 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e022:	3318      	adds	r3, #24
 800e024:	2201      	movs	r2, #1
 800e026:	9201      	str	r2, [sp, #4]
 800e028:	9300      	str	r3, [sp, #0]
 800e02a:	2300      	movs	r3, #0
 800e02c:	2200      	movs	r2, #0
 800e02e:	2123      	movs	r1, #35	; 0x23
 800e030:	6838      	ldr	r0, [r7, #0]
 800e032:	f7ff f880 	bl	800d136 <SPI_ETH_REG>
 800e036:	4603      	mov	r3, r0
 800e038:	b2da      	uxtb	r2, r3
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	Y->PSID[0]=SPI_ETH_REG(X, 36 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e046:	3318      	adds	r3, #24
 800e048:	2201      	movs	r2, #1
 800e04a:	9201      	str	r2, [sp, #4]
 800e04c:	9300      	str	r3, [sp, #0]
 800e04e:	2300      	movs	r3, #0
 800e050:	2200      	movs	r2, #0
 800e052:	2124      	movs	r1, #36	; 0x24
 800e054:	6838      	ldr	r0, [r7, #0]
 800e056:	f7ff f86e 	bl	800d136 <SPI_ETH_REG>
 800e05a:	4603      	mov	r3, r0
 800e05c:	b2da      	uxtb	r2, r3
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Y->PSID[1]=SPI_ETH_REG(X, 37 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e06a:	3318      	adds	r3, #24
 800e06c:	2201      	movs	r2, #1
 800e06e:	9201      	str	r2, [sp, #4]
 800e070:	9300      	str	r3, [sp, #0]
 800e072:	2300      	movs	r3, #0
 800e074:	2200      	movs	r2, #0
 800e076:	2125      	movs	r1, #37	; 0x25
 800e078:	6838      	ldr	r0, [r7, #0]
 800e07a:	f7ff f85c 	bl	800d136 <SPI_ETH_REG>
 800e07e:	4603      	mov	r3, r0
 800e080:	b2da      	uxtb	r2, r3
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	Y->PMRU[0]=SPI_ETH_REG(X, 38 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e08e:	3318      	adds	r3, #24
 800e090:	2201      	movs	r2, #1
 800e092:	9201      	str	r2, [sp, #4]
 800e094:	9300      	str	r3, [sp, #0]
 800e096:	2300      	movs	r3, #0
 800e098:	2200      	movs	r2, #0
 800e09a:	2126      	movs	r1, #38	; 0x26
 800e09c:	6838      	ldr	r0, [r7, #0]
 800e09e:	f7ff f84a 	bl	800d136 <SPI_ETH_REG>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	b2da      	uxtb	r2, r3
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Y->PMRU[1]=SPI_ETH_REG(X, 39 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0b2:	3318      	adds	r3, #24
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	9201      	str	r2, [sp, #4]
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	2200      	movs	r2, #0
 800e0be:	2127      	movs	r1, #39	; 0x27
 800e0c0:	6838      	ldr	r0, [r7, #0]
 800e0c2:	f7ff f838 	bl	800d136 <SPI_ETH_REG>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	b2da      	uxtb	r2, r3
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	Y->UIPR[0]=SPI_ETH_REG(X, 40 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0d6:	3318      	adds	r3, #24
 800e0d8:	2201      	movs	r2, #1
 800e0da:	9201      	str	r2, [sp, #4]
 800e0dc:	9300      	str	r3, [sp, #0]
 800e0de:	2300      	movs	r3, #0
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	2128      	movs	r1, #40	; 0x28
 800e0e4:	6838      	ldr	r0, [r7, #0]
 800e0e6:	f7ff f826 	bl	800d136 <SPI_ETH_REG>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	b2da      	uxtb	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Y->UIPR[1]=SPI_ETH_REG(X, 41 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0fa:	3318      	adds	r3, #24
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	9201      	str	r2, [sp, #4]
 800e100:	9300      	str	r3, [sp, #0]
 800e102:	2300      	movs	r3, #0
 800e104:	2200      	movs	r2, #0
 800e106:	2129      	movs	r1, #41	; 0x29
 800e108:	6838      	ldr	r0, [r7, #0]
 800e10a:	f7ff f814 	bl	800d136 <SPI_ETH_REG>
 800e10e:	4603      	mov	r3, r0
 800e110:	b2da      	uxtb	r2, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	Y->UIPR[2]=SPI_ETH_REG(X, 42 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e11e:	3318      	adds	r3, #24
 800e120:	2201      	movs	r2, #1
 800e122:	9201      	str	r2, [sp, #4]
 800e124:	9300      	str	r3, [sp, #0]
 800e126:	2300      	movs	r3, #0
 800e128:	2200      	movs	r2, #0
 800e12a:	212a      	movs	r1, #42	; 0x2a
 800e12c:	6838      	ldr	r0, [r7, #0]
 800e12e:	f7ff f802 	bl	800d136 <SPI_ETH_REG>
 800e132:	4603      	mov	r3, r0
 800e134:	b2da      	uxtb	r2, r3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Y->UIPR[3]=SPI_ETH_REG(X, 43 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e142:	3318      	adds	r3, #24
 800e144:	2201      	movs	r2, #1
 800e146:	9201      	str	r2, [sp, #4]
 800e148:	9300      	str	r3, [sp, #0]
 800e14a:	2300      	movs	r3, #0
 800e14c:	2200      	movs	r2, #0
 800e14e:	212b      	movs	r1, #43	; 0x2b
 800e150:	6838      	ldr	r0, [r7, #0]
 800e152:	f7fe fff0 	bl	800d136 <SPI_ETH_REG>
 800e156:	4603      	mov	r3, r0
 800e158:	b2da      	uxtb	r2, r3
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	Y->UPORT[0]=SPI_ETH_REG(X, 44 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e166:	3318      	adds	r3, #24
 800e168:	2201      	movs	r2, #1
 800e16a:	9201      	str	r2, [sp, #4]
 800e16c:	9300      	str	r3, [sp, #0]
 800e16e:	2300      	movs	r3, #0
 800e170:	2200      	movs	r2, #0
 800e172:	212c      	movs	r1, #44	; 0x2c
 800e174:	6838      	ldr	r0, [r7, #0]
 800e176:	f7fe ffde 	bl	800d136 <SPI_ETH_REG>
 800e17a:	4603      	mov	r3, r0
 800e17c:	b2da      	uxtb	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	Y->UPORT[1]=SPI_ETH_REG(X, 45 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e18a:	3318      	adds	r3, #24
 800e18c:	2201      	movs	r2, #1
 800e18e:	9201      	str	r2, [sp, #4]
 800e190:	9300      	str	r3, [sp, #0]
 800e192:	2300      	movs	r3, #0
 800e194:	2200      	movs	r2, #0
 800e196:	212d      	movs	r1, #45	; 0x2d
 800e198:	6838      	ldr	r0, [r7, #0]
 800e19a:	f7fe ffcc 	bl	800d136 <SPI_ETH_REG>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	b2da      	uxtb	r2, r3
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	Y->PHYCFGR=SPI_ETH_REG(X, 46 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e1ae:	3318      	adds	r3, #24
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	9201      	str	r2, [sp, #4]
 800e1b4:	9300      	str	r3, [sp, #0]
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	212e      	movs	r1, #46	; 0x2e
 800e1bc:	6838      	ldr	r0, [r7, #0]
 800e1be:	f7fe ffba 	bl	800d136 <SPI_ETH_REG>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	b2da      	uxtb	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	Y->VERSIONR=SPI_ETH_REG(X, 57 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e1d2:	3318      	adds	r3, #24
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	9201      	str	r2, [sp, #4]
 800e1d8:	9300      	str	r3, [sp, #0]
 800e1da:	2300      	movs	r3, #0
 800e1dc:	2200      	movs	r2, #0
 800e1de:	2139      	movs	r1, #57	; 0x39
 800e1e0:	6838      	ldr	r0, [r7, #0]
 800e1e2:	f7fe ffa8 	bl	800d136 <SPI_ETH_REG>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	b2da      	uxtb	r2, r3
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	//---------------------------port -------------------------//
	Y->Sn_MR=SPI_ETH_REG(X, 0x00 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e1f6:	3318      	adds	r3, #24
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	9201      	str	r2, [sp, #4]
 800e1fc:	9300      	str	r3, [sp, #0]
 800e1fe:	2300      	movs	r3, #0
 800e200:	2201      	movs	r2, #1
 800e202:	2100      	movs	r1, #0
 800e204:	6838      	ldr	r0, [r7, #0]
 800e206:	f7fe ff96 	bl	800d136 <SPI_ETH_REG>
 800e20a:	4603      	mov	r3, r0
 800e20c:	b2da      	uxtb	r2, r3
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	Y->Sn_CR=SPI_ETH_REG(X, 0x01 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e21a:	3318      	adds	r3, #24
 800e21c:	2201      	movs	r2, #1
 800e21e:	9201      	str	r2, [sp, #4]
 800e220:	9300      	str	r3, [sp, #0]
 800e222:	2300      	movs	r3, #0
 800e224:	2201      	movs	r2, #1
 800e226:	2101      	movs	r1, #1
 800e228:	6838      	ldr	r0, [r7, #0]
 800e22a:	f7fe ff84 	bl	800d136 <SPI_ETH_REG>
 800e22e:	4603      	mov	r3, r0
 800e230:	b2da      	uxtb	r2, r3
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	Y->Sn_IR=SPI_ETH_REG(X, 0x02 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e23e:	3318      	adds	r3, #24
 800e240:	2201      	movs	r2, #1
 800e242:	9201      	str	r2, [sp, #4]
 800e244:	9300      	str	r3, [sp, #0]
 800e246:	2300      	movs	r3, #0
 800e248:	2201      	movs	r2, #1
 800e24a:	2102      	movs	r1, #2
 800e24c:	6838      	ldr	r0, [r7, #0]
 800e24e:	f7fe ff72 	bl	800d136 <SPI_ETH_REG>
 800e252:	4603      	mov	r3, r0
 800e254:	b2da      	uxtb	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	Y->Sn_SR=SPI_ETH_REG(X, 0x03 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e262:	3318      	adds	r3, #24
 800e264:	2201      	movs	r2, #1
 800e266:	9201      	str	r2, [sp, #4]
 800e268:	9300      	str	r3, [sp, #0]
 800e26a:	2300      	movs	r3, #0
 800e26c:	2201      	movs	r2, #1
 800e26e:	2103      	movs	r1, #3
 800e270:	6838      	ldr	r0, [r7, #0]
 800e272:	f7fe ff60 	bl	800d136 <SPI_ETH_REG>
 800e276:	4603      	mov	r3, r0
 800e278:	b2da      	uxtb	r2, r3
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	Y->Sn_PORT[0]=SPI_ETH_REG(X, 0x04 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e286:	3318      	adds	r3, #24
 800e288:	2201      	movs	r2, #1
 800e28a:	9201      	str	r2, [sp, #4]
 800e28c:	9300      	str	r3, [sp, #0]
 800e28e:	2300      	movs	r3, #0
 800e290:	2201      	movs	r2, #1
 800e292:	2104      	movs	r1, #4
 800e294:	6838      	ldr	r0, [r7, #0]
 800e296:	f7fe ff4e 	bl	800d136 <SPI_ETH_REG>
 800e29a:	4603      	mov	r3, r0
 800e29c:	b2da      	uxtb	r2, r3
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Y->Sn_PORT[1]=SPI_ETH_REG(X, 0x05 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e2aa:	3318      	adds	r3, #24
 800e2ac:	2201      	movs	r2, #1
 800e2ae:	9201      	str	r2, [sp, #4]
 800e2b0:	9300      	str	r3, [sp, #0]
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	2105      	movs	r1, #5
 800e2b8:	6838      	ldr	r0, [r7, #0]
 800e2ba:	f7fe ff3c 	bl	800d136 <SPI_ETH_REG>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	b2da      	uxtb	r2, r3
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	Y->Sn_DHAR[0]=SPI_ETH_REG(X, 0x06 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e2ce:	3318      	adds	r3, #24
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	9201      	str	r2, [sp, #4]
 800e2d4:	9300      	str	r3, [sp, #0]
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	2201      	movs	r2, #1
 800e2da:	2106      	movs	r1, #6
 800e2dc:	6838      	ldr	r0, [r7, #0]
 800e2de:	f7fe ff2a 	bl	800d136 <SPI_ETH_REG>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	b2da      	uxtb	r2, r3
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Y->Sn_DHAR[1]=SPI_ETH_REG(X, 0x07 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e2f2:	3318      	adds	r3, #24
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	9201      	str	r2, [sp, #4]
 800e2f8:	9300      	str	r3, [sp, #0]
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	2107      	movs	r1, #7
 800e300:	6838      	ldr	r0, [r7, #0]
 800e302:	f7fe ff18 	bl	800d136 <SPI_ETH_REG>
 800e306:	4603      	mov	r3, r0
 800e308:	b2da      	uxtb	r2, r3
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	Y->Sn_DHAR[2]=SPI_ETH_REG(X, 0x08 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e316:	3318      	adds	r3, #24
 800e318:	2201      	movs	r2, #1
 800e31a:	9201      	str	r2, [sp, #4]
 800e31c:	9300      	str	r3, [sp, #0]
 800e31e:	2300      	movs	r3, #0
 800e320:	2201      	movs	r2, #1
 800e322:	2108      	movs	r1, #8
 800e324:	6838      	ldr	r0, [r7, #0]
 800e326:	f7fe ff06 	bl	800d136 <SPI_ETH_REG>
 800e32a:	4603      	mov	r3, r0
 800e32c:	b2da      	uxtb	r2, r3
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	Y->Sn_DHAR[3]=SPI_ETH_REG(X, 0x09 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e33a:	3318      	adds	r3, #24
 800e33c:	2201      	movs	r2, #1
 800e33e:	9201      	str	r2, [sp, #4]
 800e340:	9300      	str	r3, [sp, #0]
 800e342:	2300      	movs	r3, #0
 800e344:	2201      	movs	r2, #1
 800e346:	2109      	movs	r1, #9
 800e348:	6838      	ldr	r0, [r7, #0]
 800e34a:	f7fe fef4 	bl	800d136 <SPI_ETH_REG>
 800e34e:	4603      	mov	r3, r0
 800e350:	b2da      	uxtb	r2, r3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	Y->Sn_DHAR[4]=SPI_ETH_REG(X, 0x0A ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e35e:	3318      	adds	r3, #24
 800e360:	2201      	movs	r2, #1
 800e362:	9201      	str	r2, [sp, #4]
 800e364:	9300      	str	r3, [sp, #0]
 800e366:	2300      	movs	r3, #0
 800e368:	2201      	movs	r2, #1
 800e36a:	210a      	movs	r1, #10
 800e36c:	6838      	ldr	r0, [r7, #0]
 800e36e:	f7fe fee2 	bl	800d136 <SPI_ETH_REG>
 800e372:	4603      	mov	r3, r0
 800e374:	b2da      	uxtb	r2, r3
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Y->Sn_DHAR[5]=SPI_ETH_REG(X, 0x0B ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e382:	3318      	adds	r3, #24
 800e384:	2201      	movs	r2, #1
 800e386:	9201      	str	r2, [sp, #4]
 800e388:	9300      	str	r3, [sp, #0]
 800e38a:	2300      	movs	r3, #0
 800e38c:	2201      	movs	r2, #1
 800e38e:	210b      	movs	r1, #11
 800e390:	6838      	ldr	r0, [r7, #0]
 800e392:	f7fe fed0 	bl	800d136 <SPI_ETH_REG>
 800e396:	4603      	mov	r3, r0
 800e398:	b2da      	uxtb	r2, r3
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	Y->Sn_DIPR[0]=SPI_ETH_REG(X, 0x0C ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e3a6:	3318      	adds	r3, #24
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	9201      	str	r2, [sp, #4]
 800e3ac:	9300      	str	r3, [sp, #0]
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	210c      	movs	r1, #12
 800e3b4:	6838      	ldr	r0, [r7, #0]
 800e3b6:	f7fe febe 	bl	800d136 <SPI_ETH_REG>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	b2da      	uxtb	r2, r3
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Y->Sn_DIPR[1]=SPI_ETH_REG(X, 0x0D ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e3ca:	3318      	adds	r3, #24
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	9201      	str	r2, [sp, #4]
 800e3d0:	9300      	str	r3, [sp, #0]
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	210d      	movs	r1, #13
 800e3d8:	6838      	ldr	r0, [r7, #0]
 800e3da:	f7fe feac 	bl	800d136 <SPI_ETH_REG>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	b2da      	uxtb	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Y->Sn_DIPR[2]=SPI_ETH_REG(X, 0x0E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e3ee:	3318      	adds	r3, #24
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	9201      	str	r2, [sp, #4]
 800e3f4:	9300      	str	r3, [sp, #0]
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	210e      	movs	r1, #14
 800e3fc:	6838      	ldr	r0, [r7, #0]
 800e3fe:	f7fe fe9a 	bl	800d136 <SPI_ETH_REG>
 800e402:	4603      	mov	r3, r0
 800e404:	b2da      	uxtb	r2, r3
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Y->Sn_DIPR[3]=SPI_ETH_REG(X, 0x0F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e412:	3318      	adds	r3, #24
 800e414:	2201      	movs	r2, #1
 800e416:	9201      	str	r2, [sp, #4]
 800e418:	9300      	str	r3, [sp, #0]
 800e41a:	2300      	movs	r3, #0
 800e41c:	2201      	movs	r2, #1
 800e41e:	210f      	movs	r1, #15
 800e420:	6838      	ldr	r0, [r7, #0]
 800e422:	f7fe fe88 	bl	800d136 <SPI_ETH_REG>
 800e426:	4603      	mov	r3, r0
 800e428:	b2da      	uxtb	r2, r3
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	Y->Sn_DPORT[0]=SPI_ETH_REG(X, 0x10 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e436:	3318      	adds	r3, #24
 800e438:	2201      	movs	r2, #1
 800e43a:	9201      	str	r2, [sp, #4]
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	2300      	movs	r3, #0
 800e440:	2201      	movs	r2, #1
 800e442:	2110      	movs	r1, #16
 800e444:	6838      	ldr	r0, [r7, #0]
 800e446:	f7fe fe76 	bl	800d136 <SPI_ETH_REG>
 800e44a:	4603      	mov	r3, r0
 800e44c:	b2da      	uxtb	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	Y->Sn_DPORT[1]=SPI_ETH_REG(X, 0x11 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e45a:	3318      	adds	r3, #24
 800e45c:	2201      	movs	r2, #1
 800e45e:	9201      	str	r2, [sp, #4]
 800e460:	9300      	str	r3, [sp, #0]
 800e462:	2300      	movs	r3, #0
 800e464:	2201      	movs	r2, #1
 800e466:	2111      	movs	r1, #17
 800e468:	6838      	ldr	r0, [r7, #0]
 800e46a:	f7fe fe64 	bl	800d136 <SPI_ETH_REG>
 800e46e:	4603      	mov	r3, r0
 800e470:	b2da      	uxtb	r2, r3
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	Y->Sn_MSSR[0]=SPI_ETH_REG(X, 0x12 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e47e:	3318      	adds	r3, #24
 800e480:	2201      	movs	r2, #1
 800e482:	9201      	str	r2, [sp, #4]
 800e484:	9300      	str	r3, [sp, #0]
 800e486:	2300      	movs	r3, #0
 800e488:	2201      	movs	r2, #1
 800e48a:	2112      	movs	r1, #18
 800e48c:	6838      	ldr	r0, [r7, #0]
 800e48e:	f7fe fe52 	bl	800d136 <SPI_ETH_REG>
 800e492:	4603      	mov	r3, r0
 800e494:	b2da      	uxtb	r2, r3
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Y->Sn_MSSR[1]=SPI_ETH_REG(X, 0x13 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e4a2:	3318      	adds	r3, #24
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	9201      	str	r2, [sp, #4]
 800e4a8:	9300      	str	r3, [sp, #0]
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	2201      	movs	r2, #1
 800e4ae:	2113      	movs	r1, #19
 800e4b0:	6838      	ldr	r0, [r7, #0]
 800e4b2:	f7fe fe40 	bl	800d136 <SPI_ETH_REG>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	b2da      	uxtb	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	Y->Sn_TOS=SPI_ETH_REG(X, 0x15 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e4c6:	3318      	adds	r3, #24
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	9201      	str	r2, [sp, #4]
 800e4cc:	9300      	str	r3, [sp, #0]
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	2115      	movs	r1, #21
 800e4d4:	6838      	ldr	r0, [r7, #0]
 800e4d6:	f7fe fe2e 	bl	800d136 <SPI_ETH_REG>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	b2da      	uxtb	r2, r3
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Y->Sn_TTL=SPI_ETH_REG(X, 0x16 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e4ea:	3318      	adds	r3, #24
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	9201      	str	r2, [sp, #4]
 800e4f0:	9300      	str	r3, [sp, #0]
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	2116      	movs	r1, #22
 800e4f8:	6838      	ldr	r0, [r7, #0]
 800e4fa:	f7fe fe1c 	bl	800d136 <SPI_ETH_REG>
 800e4fe:	4603      	mov	r3, r0
 800e500:	b2da      	uxtb	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	Y->Sn_RXBUF_SIZE=SPI_ETH_REG(X, 0x1E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e50e:	3318      	adds	r3, #24
 800e510:	2201      	movs	r2, #1
 800e512:	9201      	str	r2, [sp, #4]
 800e514:	9300      	str	r3, [sp, #0]
 800e516:	2300      	movs	r3, #0
 800e518:	2201      	movs	r2, #1
 800e51a:	211e      	movs	r1, #30
 800e51c:	6838      	ldr	r0, [r7, #0]
 800e51e:	f7fe fe0a 	bl	800d136 <SPI_ETH_REG>
 800e522:	4603      	mov	r3, r0
 800e524:	b2da      	uxtb	r2, r3
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	Y->Sn_TXBUF_SIZE=SPI_ETH_REG(X, 0x1F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e532:	3318      	adds	r3, #24
 800e534:	2201      	movs	r2, #1
 800e536:	9201      	str	r2, [sp, #4]
 800e538:	9300      	str	r3, [sp, #0]
 800e53a:	2300      	movs	r3, #0
 800e53c:	2201      	movs	r2, #1
 800e53e:	211f      	movs	r1, #31
 800e540:	6838      	ldr	r0, [r7, #0]
 800e542:	f7fe fdf8 	bl	800d136 <SPI_ETH_REG>
 800e546:	4603      	mov	r3, r0
 800e548:	b2da      	uxtb	r2, r3
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	Y->Sn_TX_FSR[0]=SPI_ETH_REG(X, 0x20 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e556:	3318      	adds	r3, #24
 800e558:	2201      	movs	r2, #1
 800e55a:	9201      	str	r2, [sp, #4]
 800e55c:	9300      	str	r3, [sp, #0]
 800e55e:	2300      	movs	r3, #0
 800e560:	2201      	movs	r2, #1
 800e562:	2120      	movs	r1, #32
 800e564:	6838      	ldr	r0, [r7, #0]
 800e566:	f7fe fde6 	bl	800d136 <SPI_ETH_REG>
 800e56a:	4603      	mov	r3, r0
 800e56c:	b2da      	uxtb	r2, r3
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Y->Sn_TX_FSR[1]=SPI_ETH_REG(X, 0x21 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e57a:	3318      	adds	r3, #24
 800e57c:	2201      	movs	r2, #1
 800e57e:	9201      	str	r2, [sp, #4]
 800e580:	9300      	str	r3, [sp, #0]
 800e582:	2300      	movs	r3, #0
 800e584:	2201      	movs	r2, #1
 800e586:	2121      	movs	r1, #33	; 0x21
 800e588:	6838      	ldr	r0, [r7, #0]
 800e58a:	f7fe fdd4 	bl	800d136 <SPI_ETH_REG>
 800e58e:	4603      	mov	r3, r0
 800e590:	b2da      	uxtb	r2, r3
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	Y->Sn_TX_RD[0]=SPI_ETH_REG(X, 0x22 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e59e:	3318      	adds	r3, #24
 800e5a0:	2201      	movs	r2, #1
 800e5a2:	9201      	str	r2, [sp, #4]
 800e5a4:	9300      	str	r3, [sp, #0]
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	2201      	movs	r2, #1
 800e5aa:	2122      	movs	r1, #34	; 0x22
 800e5ac:	6838      	ldr	r0, [r7, #0]
 800e5ae:	f7fe fdc2 	bl	800d136 <SPI_ETH_REG>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	b2da      	uxtb	r2, r3
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Y->Sn_TX_RD[1]=SPI_ETH_REG(X, 0x23 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e5c2:	3318      	adds	r3, #24
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	9201      	str	r2, [sp, #4]
 800e5c8:	9300      	str	r3, [sp, #0]
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	2123      	movs	r1, #35	; 0x23
 800e5d0:	6838      	ldr	r0, [r7, #0]
 800e5d2:	f7fe fdb0 	bl	800d136 <SPI_ETH_REG>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	b2da      	uxtb	r2, r3
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	Y->Sn_TX_WR[0]=SPI_ETH_REG(X, 0x24 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e5e6:	3318      	adds	r3, #24
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	9201      	str	r2, [sp, #4]
 800e5ec:	9300      	str	r3, [sp, #0]
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	2124      	movs	r1, #36	; 0x24
 800e5f4:	6838      	ldr	r0, [r7, #0]
 800e5f6:	f7fe fd9e 	bl	800d136 <SPI_ETH_REG>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	b2da      	uxtb	r2, r3
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Y->Sn_TX_WR[1]=SPI_ETH_REG(X, 0x25 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e60a:	3318      	adds	r3, #24
 800e60c:	2201      	movs	r2, #1
 800e60e:	9201      	str	r2, [sp, #4]
 800e610:	9300      	str	r3, [sp, #0]
 800e612:	2300      	movs	r3, #0
 800e614:	2201      	movs	r2, #1
 800e616:	2125      	movs	r1, #37	; 0x25
 800e618:	6838      	ldr	r0, [r7, #0]
 800e61a:	f7fe fd8c 	bl	800d136 <SPI_ETH_REG>
 800e61e:	4603      	mov	r3, r0
 800e620:	b2da      	uxtb	r2, r3
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	Y->Sn_RX_RSR[0]=SPI_ETH_REG(X, 0x26 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e62e:	3318      	adds	r3, #24
 800e630:	2201      	movs	r2, #1
 800e632:	9201      	str	r2, [sp, #4]
 800e634:	9300      	str	r3, [sp, #0]
 800e636:	2300      	movs	r3, #0
 800e638:	2201      	movs	r2, #1
 800e63a:	2126      	movs	r1, #38	; 0x26
 800e63c:	6838      	ldr	r0, [r7, #0]
 800e63e:	f7fe fd7a 	bl	800d136 <SPI_ETH_REG>
 800e642:	4603      	mov	r3, r0
 800e644:	b2da      	uxtb	r2, r3
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Y->Sn_RX_RSR[1]=SPI_ETH_REG(X, 0x27 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e652:	3318      	adds	r3, #24
 800e654:	2201      	movs	r2, #1
 800e656:	9201      	str	r2, [sp, #4]
 800e658:	9300      	str	r3, [sp, #0]
 800e65a:	2300      	movs	r3, #0
 800e65c:	2201      	movs	r2, #1
 800e65e:	2127      	movs	r1, #39	; 0x27
 800e660:	6838      	ldr	r0, [r7, #0]
 800e662:	f7fe fd68 	bl	800d136 <SPI_ETH_REG>
 800e666:	4603      	mov	r3, r0
 800e668:	b2da      	uxtb	r2, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

	Y->Sn_RX_RD[0]=SPI_ETH_REG(X, 0x28 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e676:	3318      	adds	r3, #24
 800e678:	2201      	movs	r2, #1
 800e67a:	9201      	str	r2, [sp, #4]
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	2300      	movs	r3, #0
 800e680:	2201      	movs	r2, #1
 800e682:	2128      	movs	r1, #40	; 0x28
 800e684:	6838      	ldr	r0, [r7, #0]
 800e686:	f7fe fd56 	bl	800d136 <SPI_ETH_REG>
 800e68a:	4603      	mov	r3, r0
 800e68c:	b2da      	uxtb	r2, r3
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Y->Sn_RX_RD[1]=SPI_ETH_REG(X, 0x29 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e69a:	3318      	adds	r3, #24
 800e69c:	2201      	movs	r2, #1
 800e69e:	9201      	str	r2, [sp, #4]
 800e6a0:	9300      	str	r3, [sp, #0]
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	2129      	movs	r1, #41	; 0x29
 800e6a8:	6838      	ldr	r0, [r7, #0]
 800e6aa:	f7fe fd44 	bl	800d136 <SPI_ETH_REG>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	b2da      	uxtb	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	Y->Sn_RX_WR[0]=SPI_ETH_REG(X, 0x2A ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e6be:	3318      	adds	r3, #24
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	9201      	str	r2, [sp, #4]
 800e6c4:	9300      	str	r3, [sp, #0]
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	212a      	movs	r1, #42	; 0x2a
 800e6cc:	6838      	ldr	r0, [r7, #0]
 800e6ce:	f7fe fd32 	bl	800d136 <SPI_ETH_REG>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	b2da      	uxtb	r2, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Y->Sn_RX_WR[1]=SPI_ETH_REG(X, 0x2B ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e6e2:	3318      	adds	r3, #24
 800e6e4:	2201      	movs	r2, #1
 800e6e6:	9201      	str	r2, [sp, #4]
 800e6e8:	9300      	str	r3, [sp, #0]
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	212b      	movs	r1, #43	; 0x2b
 800e6f0:	6838      	ldr	r0, [r7, #0]
 800e6f2:	f7fe fd20 	bl	800d136 <SPI_ETH_REG>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	b2da      	uxtb	r2, r3
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	Y->Sn_IMR=SPI_ETH_REG(X, 0x2C ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e706:	3318      	adds	r3, #24
 800e708:	2201      	movs	r2, #1
 800e70a:	9201      	str	r2, [sp, #4]
 800e70c:	9300      	str	r3, [sp, #0]
 800e70e:	2300      	movs	r3, #0
 800e710:	2201      	movs	r2, #1
 800e712:	212c      	movs	r1, #44	; 0x2c
 800e714:	6838      	ldr	r0, [r7, #0]
 800e716:	f7fe fd0e 	bl	800d136 <SPI_ETH_REG>
 800e71a:	4603      	mov	r3, r0
 800e71c:	b2da      	uxtb	r2, r3
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	Y->Sn_FRAG[0]=SPI_ETH_REG(X, 0x2D ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e72a:	3318      	adds	r3, #24
 800e72c:	2201      	movs	r2, #1
 800e72e:	9201      	str	r2, [sp, #4]
 800e730:	9300      	str	r3, [sp, #0]
 800e732:	2300      	movs	r3, #0
 800e734:	2201      	movs	r2, #1
 800e736:	212d      	movs	r1, #45	; 0x2d
 800e738:	6838      	ldr	r0, [r7, #0]
 800e73a:	f7fe fcfc 	bl	800d136 <SPI_ETH_REG>
 800e73e:	4603      	mov	r3, r0
 800e740:	b2da      	uxtb	r2, r3
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Y->Sn_FRAG[1]=SPI_ETH_REG(X, 0x2E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e74e:	3318      	adds	r3, #24
 800e750:	2201      	movs	r2, #1
 800e752:	9201      	str	r2, [sp, #4]
 800e754:	9300      	str	r3, [sp, #0]
 800e756:	2300      	movs	r3, #0
 800e758:	2201      	movs	r2, #1
 800e75a:	212e      	movs	r1, #46	; 0x2e
 800e75c:	6838      	ldr	r0, [r7, #0]
 800e75e:	f7fe fcea 	bl	800d136 <SPI_ETH_REG>
 800e762:	4603      	mov	r3, r0
 800e764:	b2da      	uxtb	r2, r3
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56


	Y->Sn_KPALVTR=SPI_ETH_REG(X, 0x2F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e772:	3318      	adds	r3, #24
 800e774:	2201      	movs	r2, #1
 800e776:	9201      	str	r2, [sp, #4]
 800e778:	9300      	str	r3, [sp, #0]
 800e77a:	2300      	movs	r3, #0
 800e77c:	2201      	movs	r2, #1
 800e77e:	212f      	movs	r1, #47	; 0x2f
 800e780:	6838      	ldr	r0, [r7, #0]
 800e782:	f7fe fcd8 	bl	800d136 <SPI_ETH_REG>
 800e786:	4603      	mov	r3, r0
 800e788:	b2da      	uxtb	r2, r3
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
};
 800e790:	bf00      	nop
 800e792:	4618      	mov	r0, r3
 800e794:	3708      	adds	r7, #8
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
	...

0800e79c <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int of, int tf)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b090      	sub	sp, #64	; 0x40
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	60f8      	str	r0, [r7, #12]
 800e7a4:	60b9      	str	r1, [r7, #8]
 800e7a6:	607a      	str	r2, [r7, #4]
 800e7a8:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	637b      	str	r3, [r7, #52]	; 0x34
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	633b      	str	r3, [r7, #48]	; 0x30
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7be:	2300      	movs	r3, #0
 800e7c0:	61fb      	str	r3, [r7, #28]
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	61bb      	str	r3, [r7, #24]
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	627b      	str	r3, [r7, #36]	; 0x24
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	617b      	str	r3, [r7, #20]
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	623b      	str	r3, [r7, #32]
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	61fb      	str	r3, [r7, #28]
	lngb=*bn;
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	61bb      	str	r3, [r7, #24]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800e7e6:	69fa      	ldr	r2, [r7, #28]
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	f2c0 8315 	blt.w	800ee1a <FT_String_ND+0x67e>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800e7f4:	e00c      	b.n	800e810 <FT_String_ND+0x74>
							{
								n++;
 800e7f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800e7fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7fe:	69bb      	ldr	r3, [r7, #24]
 800e800:	441a      	add	r2, r3
 800e802:	69fb      	ldr	r3, [r7, #28]
 800e804:	3301      	adds	r3, #1
 800e806:	429a      	cmp	r2, r3
 800e808:	dd02      	ble.n	800e810 <FT_String_ND+0x74>
								{
									estado=0;
 800e80a:	2300      	movs	r3, #0
 800e80c:	623b      	str	r3, [r7, #32]
									break;
 800e80e:	e009      	b.n	800e824 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800e810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e812:	68fa      	ldr	r2, [r7, #12]
 800e814:	4413      	add	r3, r2
 800e816:	781a      	ldrb	r2, [r3, #0]
 800e818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81a:	6879      	ldr	r1, [r7, #4]
 800e81c:	440b      	add	r3, r1
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	429a      	cmp	r2, r3
 800e822:	d1e8      	bne.n	800e7f6 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800e824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e826:	3301      	adds	r3, #1
 800e828:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800e82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82c:	3301      	adds	r3, #1
 800e82e:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800e830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e832:	69bb      	ldr	r3, [r7, #24]
 800e834:	429a      	cmp	r2, r3
 800e836:	d108      	bne.n	800e84a <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800e838:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e83a:	69bb      	ldr	r3, [r7, #24]
 800e83c:	1ad3      	subs	r3, r2, r3
 800e83e:	1c5a      	adds	r2, r3, #1
 800e840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e842:	601a      	str	r2, [r3, #0]
									estado=1;
 800e844:	2301      	movs	r3, #1
 800e846:	623b      	str	r3, [r7, #32]
									break;
 800e848:	e010      	b.n	800e86c <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800e84a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	429a      	cmp	r2, r3
 800e850:	dd02      	ble.n	800e858 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800e852:	2300      	movs	r3, #0
 800e854:	623b      	str	r3, [r7, #32]
									 break;
 800e856:	e009      	b.n	800e86c <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800e858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	4413      	add	r3, r2
 800e85e:	781a      	ldrb	r2, [r3, #0]
 800e860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e862:	6879      	ldr	r1, [r7, #4]
 800e864:	440b      	add	r3, r1
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	429a      	cmp	r2, r3
 800e86a:	d0db      	beq.n	800e824 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800e86c:	69bb      	ldr	r3, [r7, #24]
 800e86e:	1e5a      	subs	r2, r3, #1
 800e870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e872:	4413      	add	r3, r2
 800e874:	69fa      	ldr	r2, [r7, #28]
 800e876:	429a      	cmp	r2, r3
 800e878:	dd02      	ble.n	800e880 <FT_String_ND+0xe4>
 800e87a:	6a3b      	ldr	r3, [r7, #32]
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d1b7      	bne.n	800e7f0 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800e880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e882:	2b00      	cmp	r3, #0
 800e884:	d101      	bne.n	800e88a <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800e886:	6a3b      	ldr	r3, [r7, #32]
 800e888:	e2c8      	b.n	800ee1c <FT_String_ND+0x680>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800e88a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	d12c      	bne.n	800e8ea <FT_String_ND+0x14e>
 800e890:	6a3b      	ldr	r3, [r7, #32]
 800e892:	2b01      	cmp	r3, #1
 800e894:	d129      	bne.n	800e8ea <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800e896:	e014      	b.n	800e8c2 <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800e898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	441a      	add	r2, r3
 800e8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8a2:	4413      	add	r3, r2
 800e8a4:	3b01      	subs	r3, #1
 800e8a6:	68fa      	ldr	r2, [r7, #12]
 800e8a8:	441a      	add	r2, r3
 800e8aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8ac:	6819      	ldr	r1, [r3, #0]
 800e8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8b0:	440b      	add	r3, r1
 800e8b2:	3b01      	subs	r3, #1
 800e8b4:	68f9      	ldr	r1, [r7, #12]
 800e8b6:	440b      	add	r3, r1
 800e8b8:	7812      	ldrb	r2, [r2, #0]
 800e8ba:	701a      	strb	r2, [r3, #0]
										n3++;
 800e8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8be:	3301      	adds	r3, #1
 800e8c0:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800e8c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c8:	441a      	add	r2, r3
 800e8ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8cc:	4413      	add	r3, r2
 800e8ce:	69fa      	ldr	r2, [r7, #28]
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	dae1      	bge.n	800e898 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800e8d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8d6:	681a      	ldr	r2, [r3, #0]
 800e8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8da:	4413      	add	r3, r2
 800e8dc:	1e5a      	subs	r2, r3, #1
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	601a      	str	r2, [r3, #0]
							estado=3;
 800e8e2:	2303      	movs	r3, #3
 800e8e4:	623b      	str	r3, [r7, #32]
							return(estado);
 800e8e6:	6a3b      	ldr	r3, [r7, #32]
 800e8e8:	e298      	b.n	800ee1c <FT_String_ND+0x680>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800e8ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8ec:	2b02      	cmp	r3, #2
 800e8ee:	f040 80be 	bne.w	800ea6e <FT_String_ND+0x2d2>
 800e8f2:	6a3b      	ldr	r3, [r7, #32]
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	f040 80ba 	bne.w	800ea6e <FT_String_ND+0x2d2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e8fa:	e012      	b.n	800e922 <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e8fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e8fe:	69bb      	ldr	r3, [r7, #24]
 800e900:	1ad2      	subs	r2, r2, r3
 800e902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e904:	4413      	add	r3, r2
 800e906:	461a      	mov	r2, r3
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	441a      	add	r2, r3
 800e90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e910:	440b      	add	r3, r1
 800e912:	7812      	ldrb	r2, [r2, #0]
 800e914:	701a      	strb	r2, [r3, #0]
								n4++;
 800e916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e918:	3301      	adds	r3, #1
 800e91a:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800e91c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e91e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e920:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e922:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e924:	69bb      	ldr	r3, [r7, #24]
 800e926:	1ad2      	subs	r2, r2, r3
 800e928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92a:	4413      	add	r3, r2
 800e92c:	69fa      	ldr	r2, [r7, #28]
 800e92e:	429a      	cmp	r2, r3
 800e930:	dae4      	bge.n	800e8fc <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800e932:	499d      	ldr	r1, [pc, #628]	; (800eba8 <FT_String_ND+0x40c>)
 800e934:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e936:	f000 fd2d 	bl	800f394 <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800e93a:	499c      	ldr	r1, [pc, #624]	; (800ebac <FT_String_ND+0x410>)
 800e93c:	2000      	movs	r0, #0
 800e93e:	f000 fd29 	bl	800f394 <strtok>
 800e942:	4603      	mov	r3, r0
 800e944:	4618      	mov	r0, r3
 800e946:	f000 fb66 	bl	800f016 <atoi>
 800e94a:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800e94c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e94e:	3b01      	subs	r3, #1
 800e950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e952:	429a      	cmp	r2, r3
 800e954:	db02      	blt.n	800e95c <FT_String_ND+0x1c0>
							{
								lngd=of-1;
 800e956:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e958:	3b01      	subs	r3, #1
 800e95a:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800e95c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e95e:	3306      	adds	r3, #6
 800e960:	222c      	movs	r2, #44	; 0x2c
 800e962:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e966:	2b09      	cmp	r3, #9
 800e968:	dc0d      	bgt.n	800e986 <FT_String_ND+0x1ea>
											{
												c[8]=':';
 800e96a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e96c:	3308      	adds	r3, #8
 800e96e:	223a      	movs	r2, #58	; 0x3a
 800e970:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800e972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e974:	3309      	adds	r3, #9
 800e976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e978:	4413      	add	r3, r2
 800e97a:	2200      	movs	r2, #0
 800e97c:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800e97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e980:	3309      	adds	r3, #9
 800e982:	627b      	str	r3, [r7, #36]	; 0x24
 800e984:	e021      	b.n	800e9ca <FT_String_ND+0x22e>
											}
											else{
														if (lngd< 100)
 800e986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e988:	2b63      	cmp	r3, #99	; 0x63
 800e98a:	dc0d      	bgt.n	800e9a8 <FT_String_ND+0x20c>
														{
															c[9]=':';
 800e98c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e98e:	3309      	adds	r3, #9
 800e990:	223a      	movs	r2, #58	; 0x3a
 800e992:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800e994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e996:	330a      	adds	r3, #10
 800e998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e99a:	4413      	add	r3, r2
 800e99c:	2200      	movs	r2, #0
 800e99e:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800e9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a2:	330a      	adds	r3, #10
 800e9a4:	627b      	str	r3, [r7, #36]	; 0x24
 800e9a6:	e010      	b.n	800e9ca <FT_String_ND+0x22e>
														}
														else
														{
														if (lngd < 1000)
 800e9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e9ae:	da0c      	bge.n	800e9ca <FT_String_ND+0x22e>
														{
															c[10]=':';
 800e9b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9b2:	330a      	adds	r3, #10
 800e9b4:	223a      	movs	r2, #58	; 0x3a
 800e9b6:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800e9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ba:	330b      	adds	r3, #11
 800e9bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e9be:	4413      	add	r3, r2
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800e9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c6:	330b      	adds	r3, #11
 800e9c8:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800e9ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9ce:	601a      	str	r2, [r3, #0]
							n4=0;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e9d4:	e016      	b.n	800ea04 <FT_String_ND+0x268>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e9d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	1ad2      	subs	r2, r2, r3
 800e9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9de:	441a      	add	r2, r3
 800e9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e2:	4413      	add	r3, r2
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	441a      	add	r2, r3
 800e9ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e9ec:	69bb      	ldr	r3, [r7, #24]
 800e9ee:	1ac9      	subs	r1, r1, r3
 800e9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f2:	440b      	add	r3, r1
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	440b      	add	r3, r1
 800e9fa:	7812      	ldrb	r2, [r2, #0]
 800e9fc:	701a      	strb	r2, [r3, #0]
								n4++;
 800e9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea00:	3301      	adds	r3, #1
 800ea02:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ea04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea06:	69bb      	ldr	r3, [r7, #24]
 800ea08:	1ad2      	subs	r2, r2, r3
 800ea0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0c:	441a      	add	r2, r3
 800ea0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea10:	4413      	add	r3, r2
 800ea12:	69fa      	ldr	r2, [r7, #28]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	dade      	bge.n	800e9d6 <FT_String_ND+0x23a>
							}
							*an=n+n4-lngb-1;
 800ea18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1c:	441a      	add	r2, r3
 800ea1e:	69bb      	ldr	r3, [r7, #24]
 800ea20:	1ad3      	subs	r3, r2, r3
 800ea22:	1e5a      	subs	r2, r3, #1
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800ea28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea2a:	69bb      	ldr	r3, [r7, #24]
 800ea2c:	1ad2      	subs	r2, r2, r3
 800ea2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea30:	441a      	add	r2, r3
 800ea32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea34:	4413      	add	r3, r2
 800ea36:	461a      	mov	r2, r3
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	4413      	add	r3, r2
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800ea40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea42:	69bb      	ldr	r3, [r7, #24]
 800ea44:	1ad2      	subs	r2, r2, r3
 800ea46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea48:	4413      	add	r3, r2
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	4413      	add	r3, r2
 800ea50:	2200      	movs	r2, #0
 800ea52:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800ea54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea56:	69bb      	ldr	r3, [r7, #24]
 800ea58:	1ad2      	subs	r2, r2, r3
 800ea5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ea5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea5e:	440b      	add	r3, r1
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d102      	bne.n	800ea6a <FT_String_ND+0x2ce>
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2200      	movs	r2, #0
 800ea68:	701a      	strb	r2, [r3, #0]
							estado=3;
 800ea6a:	2303      	movs	r3, #3
 800ea6c:	623b      	str	r3, [r7, #32]

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800ea6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea70:	2b03      	cmp	r3, #3
 800ea72:	d146      	bne.n	800eb02 <FT_String_ND+0x366>
 800ea74:	6a3b      	ldr	r3, [r7, #32]
 800ea76:	2b01      	cmp	r3, #1
 800ea78:	d143      	bne.n	800eb02 <FT_String_ND+0x366>
						{
						n3=0;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800ea7e:	e00e      	b.n	800ea9e <FT_String_ND+0x302>
									{
										c[n3]=a[*ubicacion+n3-1];
 800ea80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea86:	4413      	add	r3, r2
 800ea88:	3b01      	subs	r3, #1
 800ea8a:	68fa      	ldr	r2, [r7, #12]
 800ea8c:	441a      	add	r2, r3
 800ea8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea90:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ea92:	440b      	add	r3, r1
 800ea94:	7812      	ldrb	r2, [r2, #0]
 800ea96:	701a      	strb	r2, [r3, #0]
										n3++;
 800ea98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800ea9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eaa0:	69bb      	ldr	r3, [r7, #24]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	dbec      	blt.n	800ea80 <FT_String_ND+0x2e4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800eaaa:	e014      	b.n	800ead6 <FT_String_ND+0x33a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800eaac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	69bb      	ldr	r3, [r7, #24]
 800eab2:	441a      	add	r2, r3
 800eab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab6:	4413      	add	r3, r2
 800eab8:	3b01      	subs	r3, #1
 800eaba:	68fa      	ldr	r2, [r7, #12]
 800eabc:	441a      	add	r2, r3
 800eabe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eac0:	6819      	ldr	r1, [r3, #0]
 800eac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac4:	440b      	add	r3, r1
 800eac6:	3b01      	subs	r3, #1
 800eac8:	68f9      	ldr	r1, [r7, #12]
 800eaca:	440b      	add	r3, r1
 800eacc:	7812      	ldrb	r2, [r2, #0]
 800eace:	701a      	strb	r2, [r3, #0]
										n5++;
 800ead0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead2:	3301      	adds	r3, #1
 800ead4:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800ead6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	441a      	add	r2, r3
 800eade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae0:	441a      	add	r2, r3
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	dde0      	ble.n	800eaac <FT_String_ND+0x310>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800eaea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf0:	4413      	add	r3, r2
 800eaf2:	1e5a      	subs	r2, r3, #1
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800eaf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eafa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eafc:	601a      	str	r2, [r3, #0]
							estado=3;
 800eafe:	2303      	movs	r3, #3
 800eb00:	623b      	str	r3, [r7, #32]
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800eb02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb04:	2b04      	cmp	r3, #4
 800eb06:	f040 80bd 	bne.w	800ec84 <FT_String_ND+0x4e8>
 800eb0a:	6a3b      	ldr	r3, [r7, #32]
 800eb0c:	2b01      	cmp	r3, #1
 800eb0e:	f040 80b9 	bne.w	800ec84 <FT_String_ND+0x4e8>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eb12:	e012      	b.n	800eb3a <FT_String_ND+0x39e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800eb14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb16:	69bb      	ldr	r3, [r7, #24]
 800eb18:	1ad2      	subs	r2, r2, r3
 800eb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1c:	4413      	add	r3, r2
 800eb1e:	461a      	mov	r2, r3
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	441a      	add	r2, r3
 800eb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb26:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800eb28:	440b      	add	r3, r1
 800eb2a:	7812      	ldrb	r2, [r2, #0]
 800eb2c:	701a      	strb	r2, [r3, #0]
								n4++;
 800eb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb30:	3301      	adds	r3, #1
 800eb32:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XX:
 800eb34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb38:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800eb3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb3c:	69bb      	ldr	r3, [r7, #24]
 800eb3e:	1ad2      	subs	r2, r2, r3
 800eb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb42:	4413      	add	r3, r2
 800eb44:	69fa      	ldr	r2, [r7, #28]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	dae4      	bge.n	800eb14 <FT_String_ND+0x378>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800eb4a:	4917      	ldr	r1, [pc, #92]	; (800eba8 <FT_String_ND+0x40c>)
 800eb4c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800eb4e:	f000 fc21 	bl	800f394 <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800eb52:	4916      	ldr	r1, [pc, #88]	; (800ebac <FT_String_ND+0x410>)
 800eb54:	2000      	movs	r0, #0
 800eb56:	f000 fc1d 	bl	800f394 <strtok>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f000 fa5a 	bl	800f016 <atoi>
 800eb62:	62b8      	str	r0, [r7, #40]	; 0x28

							if(lngd>=of-1)//if(lngd>=of-1)
 800eb64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb66:	3b01      	subs	r3, #1
 800eb68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	db02      	blt.n	800eb74 <FT_String_ND+0x3d8>
							{
								lngd=of-1;
 800eb6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb70:	3b01      	subs	r3, #1
 800eb72:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800eb74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb76:	3306      	adds	r3, #6
 800eb78:	222c      	movs	r2, #44	; 0x2c
 800eb7a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800eb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb7e:	2b09      	cmp	r3, #9
 800eb80:	dc07      	bgt.n	800eb92 <FT_String_ND+0x3f6>
											{
												c[8]=':';
 800eb82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb84:	3308      	adds	r3, #8
 800eb86:	223a      	movs	r2, #58	; 0x3a
 800eb88:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800eb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8c:	3309      	adds	r3, #9
 800eb8e:	627b      	str	r3, [r7, #36]	; 0x24
 800eb90:	e019      	b.n	800ebc6 <FT_String_ND+0x42a>
											}
											else{
														if (lngd< 100)
 800eb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb94:	2b63      	cmp	r3, #99	; 0x63
 800eb96:	dc0b      	bgt.n	800ebb0 <FT_String_ND+0x414>
														{
															c[9]=':';
 800eb98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb9a:	3309      	adds	r3, #9
 800eb9c:	223a      	movs	r2, #58	; 0x3a
 800eb9e:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800eba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eba2:	330a      	adds	r3, #10
 800eba4:	627b      	str	r3, [r7, #36]	; 0x24
 800eba6:	e00e      	b.n	800ebc6 <FT_String_ND+0x42a>
 800eba8:	08010c74 	.word	0x08010c74
 800ebac:	08010c78 	.word	0x08010c78
														}
														else
														{
														if (lngd < 1000)
 800ebb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ebb6:	da06      	bge.n	800ebc6 <FT_String_ND+0x42a>
														{
															c[10]=':';
 800ebb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebba:	330a      	adds	r3, #10
 800ebbc:	223a      	movs	r2, #58	; 0x3a
 800ebbe:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800ebc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc2:	330b      	adds	r3, #11
 800ebc4:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ebc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebca:	601a      	str	r2, [r3, #0]
							n4=0;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ebd0:	e016      	b.n	800ec00 <FT_String_ND+0x464>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ebd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ebd4:	69bb      	ldr	r3, [r7, #24]
 800ebd6:	1ad2      	subs	r2, r2, r3
 800ebd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebda:	441a      	add	r2, r3
 800ebdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebde:	4413      	add	r3, r2
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	441a      	add	r2, r3
 800ebe6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ebe8:	69bb      	ldr	r3, [r7, #24]
 800ebea:	1ac9      	subs	r1, r1, r3
 800ebec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebee:	440b      	add	r3, r1
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	440b      	add	r3, r1
 800ebf6:	7812      	ldrb	r2, [r2, #0]
 800ebf8:	701a      	strb	r2, [r3, #0]
								n4++;
 800ebfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ec00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec02:	69bb      	ldr	r3, [r7, #24]
 800ec04:	1ad2      	subs	r2, r2, r3
 800ec06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec08:	441a      	add	r2, r3
 800ec0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0c:	4413      	add	r3, r2
 800ec0e:	69fa      	ldr	r2, [r7, #28]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	dade      	bge.n	800ebd2 <FT_String_ND+0x436>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800ec14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec18:	441a      	add	r2, r3
 800ec1a:	69bb      	ldr	r3, [r7, #24]
 800ec1c:	1ad3      	subs	r3, r2, r3
 800ec1e:	1e5a      	subs	r2, r3, #1
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	601a      	str	r2, [r3, #0]
							n5=0;
 800ec24:	2300      	movs	r3, #0
 800ec26:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ec28:	e00f      	b.n	800ec4a <FT_String_ND+0x4ae>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800ec2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2e:	1ad2      	subs	r2, r2, r3
 800ec30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec32:	4413      	add	r3, r2
 800ec34:	461a      	mov	r2, r3
 800ec36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec38:	441a      	add	r2, r3
 800ec3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ec3e:	440b      	add	r3, r1
 800ec40:	7812      	ldrb	r2, [r2, #0]
 800ec42:	701a      	strb	r2, [r3, #0]
								n5++;
 800ec44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec46:	3301      	adds	r3, #1
 800ec48:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800ec4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec4e:	1ad2      	subs	r2, r2, r3
 800ec50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec52:	441a      	add	r2, r3
 800ec54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	dbe6      	blt.n	800ec2a <FT_String_ND+0x48e>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ec5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec60:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800ec62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec64:	681a      	ldr	r2, [r3, #0]
 800ec66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec68:	441a      	add	r2, r3
 800ec6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6c:	1ad2      	subs	r2, r2, r3
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	4413      	add	r3, r2
 800ec74:	69fa      	ldr	r2, [r7, #28]
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d102      	bne.n	800ec80 <FT_String_ND+0x4e4>
							{
								estado=4;
 800ec7a:	2304      	movs	r3, #4
 800ec7c:	623b      	str	r3, [r7, #32]
 800ec7e:	e001      	b.n	800ec84 <FT_String_ND+0x4e8>

							}
							else
							{
								estado=5;
 800ec80:	2305      	movs	r3, #5
 800ec82:	623b      	str	r3, [r7, #32]
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800ec84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec86:	2b05      	cmp	r3, #5
 800ec88:	f040 80c5 	bne.w	800ee16 <FT_String_ND+0x67a>
 800ec8c:	6a3b      	ldr	r3, [r7, #32]
 800ec8e:	2b01      	cmp	r3, #1
 800ec90:	f040 80c1 	bne.w	800ee16 <FT_String_ND+0x67a>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ec94:	e012      	b.n	800ecbc <FT_String_ND+0x520>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800ec96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec98:	69bb      	ldr	r3, [r7, #24]
 800ec9a:	1ad2      	subs	r2, r2, r3
 800ec9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec9e:	4413      	add	r3, r2
 800eca0:	461a      	mov	r2, r3
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	441a      	add	r2, r3
 800eca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ecaa:	440b      	add	r3, r1
 800ecac:	7812      	ldrb	r2, [r2, #0]
 800ecae:	701a      	strb	r2, [r3, #0]
								n4++;
 800ecb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800ecb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecba:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800ecbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ecbe:	69bb      	ldr	r3, [r7, #24]
 800ecc0:	1ad2      	subs	r2, r2, r3
 800ecc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc4:	4413      	add	r3, r2
 800ecc6:	69fa      	ldr	r2, [r7, #28]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	dae4      	bge.n	800ec96 <FT_String_ND+0x4fa>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800eccc:	4955      	ldr	r1, [pc, #340]	; (800ee24 <FT_String_ND+0x688>)
 800ecce:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ecd0:	f000 fb60 	bl	800f394 <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800ecd4:	4954      	ldr	r1, [pc, #336]	; (800ee28 <FT_String_ND+0x68c>)
 800ecd6:	2000      	movs	r0, #0
 800ecd8:	f000 fb5c 	bl	800f394 <strtok>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	4618      	mov	r0, r3
 800ece0:	f000 f999 	bl	800f016 <atoi>
 800ece4:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800ece6:	4950      	ldr	r1, [pc, #320]	; (800ee28 <FT_String_ND+0x68c>)
 800ece8:	2000      	movs	r0, #0
 800ecea:	f000 fb53 	bl	800f394 <strtok>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f000 f990 	bl	800f016 <atoi>
 800ecf6:	62b8      	str	r0, [r7, #40]	; 0x28
							if(lngd>=of-1)
 800ecf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ecfa:	3b01      	subs	r3, #1
 800ecfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	db02      	blt.n	800ed08 <FT_String_ND+0x56c>
							{
								lngd=of-1;
 800ed02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed04:	3b01      	subs	r3, #1
 800ed06:	62bb      	str	r3, [r7, #40]	; 0x28
							}
							c[6]=',';//------------------------------Reconstruyo vector
 800ed08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed0a:	3306      	adds	r3, #6
 800ed0c:	222c      	movs	r2, #44	; 0x2c
 800ed0e:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800ed10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed12:	2b09      	cmp	r3, #9
 800ed14:	dc07      	bgt.n	800ed26 <FT_String_ND+0x58a>
											{
												c[10]=':';
 800ed16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed18:	330a      	adds	r3, #10
 800ed1a:	223a      	movs	r2, #58	; 0x3a
 800ed1c:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800ed1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed20:	330b      	adds	r3, #11
 800ed22:	627b      	str	r3, [r7, #36]	; 0x24
 800ed24:	e015      	b.n	800ed52 <FT_String_ND+0x5b6>
											}
											else{
														if (lngd< 100)
 800ed26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed28:	2b63      	cmp	r3, #99	; 0x63
 800ed2a:	dc07      	bgt.n	800ed3c <FT_String_ND+0x5a0>
														{
															c[11]=':';
 800ed2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed2e:	330b      	adds	r3, #11
 800ed30:	223a      	movs	r2, #58	; 0x3a
 800ed32:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800ed34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed36:	330c      	adds	r3, #12
 800ed38:	627b      	str	r3, [r7, #36]	; 0x24
 800ed3a:	e00a      	b.n	800ed52 <FT_String_ND+0x5b6>
														}
														else
														{
														if (lngd < 1000)
 800ed3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ed42:	da06      	bge.n	800ed52 <FT_String_ND+0x5b6>
														{
															c[12]=':';
 800ed44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed46:	330c      	adds	r3, #12
 800ed48:	223a      	movs	r2, #58	; 0x3a
 800ed4a:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800ed4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4e:	330d      	adds	r3, #13
 800ed50:	627b      	str	r3, [r7, #36]	; 0x24
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800ed52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed56:	601a      	str	r2, [r3, #0]
							n4=0;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ed5c:	e016      	b.n	800ed8c <FT_String_ND+0x5f0>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800ed5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed60:	69bb      	ldr	r3, [r7, #24]
 800ed62:	1ad2      	subs	r2, r2, r3
 800ed64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed66:	441a      	add	r2, r3
 800ed68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6a:	4413      	add	r3, r2
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	441a      	add	r2, r3
 800ed72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ed74:	69bb      	ldr	r3, [r7, #24]
 800ed76:	1ac9      	subs	r1, r1, r3
 800ed78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7a:	440b      	add	r3, r1
 800ed7c:	4619      	mov	r1, r3
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	440b      	add	r3, r1
 800ed82:	7812      	ldrb	r2, [r2, #0]
 800ed84:	701a      	strb	r2, [r3, #0]
								n4++;
 800ed86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed88:	3301      	adds	r3, #1
 800ed8a:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800ed8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed8e:	69bb      	ldr	r3, [r7, #24]
 800ed90:	1ad2      	subs	r2, r2, r3
 800ed92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed94:	441a      	add	r2, r3
 800ed96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed98:	4413      	add	r3, r2
 800ed9a:	69fa      	ldr	r2, [r7, #28]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	dade      	bge.n	800ed5e <FT_String_ND+0x5c2>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800eda0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda4:	441a      	add	r2, r3
 800eda6:	69bb      	ldr	r3, [r7, #24]
 800eda8:	1ad3      	subs	r3, r2, r3
 800edaa:	1e5a      	subs	r2, r3, #1
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	601a      	str	r2, [r3, #0]
							n5=0;
 800edb0:	2300      	movs	r3, #0
 800edb2:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800edb4:	e00f      	b.n	800edd6 <FT_String_ND+0x63a>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800edb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edba:	1ad2      	subs	r2, r2, r3
 800edbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edbe:	4413      	add	r3, r2
 800edc0:	461a      	mov	r2, r3
 800edc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edc4:	441a      	add	r2, r3
 800edc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800edca:	440b      	add	r3, r1
 800edcc:	7812      	ldrb	r2, [r2, #0]
 800edce:	701a      	strb	r2, [r3, #0]
								n5++;
 800edd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd2:	3301      	adds	r3, #1
 800edd4:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800edd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edda:	1ad2      	subs	r2, r2, r3
 800eddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edde:	441a      	add	r2, r3
 800ede0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	dbe6      	blt.n	800edb6 <FT_String_ND+0x61a>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800ede8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edec:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800edee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edf0:	681a      	ldr	r2, [r3, #0]
 800edf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf4:	441a      	add	r2, r3
 800edf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf8:	1ad2      	subs	r2, r2, r3
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	4413      	add	r3, r2
 800ee00:	69fa      	ldr	r2, [r7, #28]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d105      	bne.n	800ee12 <FT_String_ND+0x676>
							{
								estado=4;
 800ee06:	2304      	movs	r3, #4
 800ee08:	623b      	str	r3, [r7, #32]
								*idcom=cliente;
 800ee0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee0c:	693a      	ldr	r2, [r7, #16]
 800ee0e:	601a      	str	r2, [r3, #0]
 800ee10:	e001      	b.n	800ee16 <FT_String_ND+0x67a>
							}
							else
							{
								estado=5;
 800ee12:	2305      	movs	r3, #5
 800ee14:	623b      	str	r3, [r7, #32]
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800ee16:	6a3b      	ldr	r3, [r7, #32]
 800ee18:	e000      	b.n	800ee1c <FT_String_ND+0x680>
					}
			}
			else
			{
				return(2);
 800ee1a:	2302      	movs	r3, #2
			}
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3740      	adds	r7, #64	; 0x40
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}
 800ee24:	08010c74 	.word	0x08010c74
 800ee28:	08010c78 	.word	0x08010c78

0800ee2c <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b088      	sub	sp, #32
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800ee36:	2330      	movs	r3, #48	; 0x30
 800ee38:	60bb      	str	r3, [r7, #8]
 800ee3a:	f107 030c 	add.w	r3, r7, #12
 800ee3e:	2200      	movs	r2, #0
 800ee40:	601a      	str	r2, [r3, #0]
 800ee42:	605a      	str	r2, [r3, #4]
 800ee44:	609a      	str	r2, [r3, #8]
 800ee46:	60da      	str	r2, [r3, #12]
int i=0;	
 800ee48:	2300      	movs	r3, #0
 800ee4a:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800ee4c:	f107 0308 	add.w	r3, r7, #8
 800ee50:	687a      	ldr	r2, [r7, #4]
 800ee52:	490f      	ldr	r1, [pc, #60]	; (800ee90 <INTOA+0x64>)
 800ee54:	4618      	mov	r0, r3
 800ee56:	f000 fa1f 	bl	800f298 <siprintf>
		while(i<=strlen(origbuff))
 800ee5a:	e00b      	b.n	800ee74 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	1c5a      	adds	r2, r3, #1
 800ee60:	603a      	str	r2, [r7, #0]
 800ee62:	f107 0108 	add.w	r1, r7, #8
 800ee66:	69fa      	ldr	r2, [r7, #28]
 800ee68:	440a      	add	r2, r1
 800ee6a:	7812      	ldrb	r2, [r2, #0]
 800ee6c:	701a      	strb	r2, [r3, #0]
		i++;
 800ee6e:	69fb      	ldr	r3, [r7, #28]
 800ee70:	3301      	adds	r3, #1
 800ee72:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800ee74:	f107 0308 	add.w	r3, r7, #8
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7f1 f9bb 	bl	80001f4 <strlen>
 800ee7e:	4602      	mov	r2, r0
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d2ea      	bcs.n	800ee5c <INTOA+0x30>
		}
		return(i);
 800ee86:	69fb      	ldr	r3, [r7, #28]
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3720      	adds	r7, #32
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	08010c7c 	.word	0x08010c7c

0800ee94 <FTOA>:

int FTOA( int a,  unsigned char *v1, int comma)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b08c      	sub	sp, #48	; 0x30
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	60b9      	str	r1, [r7, #8]
 800ee9e:	607a      	str	r2, [r7, #4]
//char origbuff[20]="0";
char origbuff[20];
origbuff[0]='\0';
 800eea0:	2300      	movs	r3, #0
 800eea2:	753b      	strb	r3, [r7, #20]

int i=0;
 800eea4:	2300      	movs	r3, #0
 800eea6:	62fb      	str	r3, [r7, #44]	; 0x2c
int b=0;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	62bb      	str	r3, [r7, #40]	; 0x28

		sprintf(origbuff,"%i",a); 	//Paso el entreo a cadena de caracteres
 800eeac:	f107 0314 	add.w	r3, r7, #20
 800eeb0:	68fa      	ldr	r2, [r7, #12]
 800eeb2:	4932      	ldr	r1, [pc, #200]	; (800ef7c <FTOA+0xe8>)
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	f000 f9ef 	bl	800f298 <siprintf>
		b=strlen(origbuff);
 800eeba:	f107 0314 	add.w	r3, r7, #20
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7f1 f998 	bl	80001f4 <strlen>
 800eec4:	4603      	mov	r3, r0
 800eec6:	62bb      	str	r3, [r7, #40]	; 0x28
		if(comma<b)					//Si la posición de la coma es menor a la posición de los caracteres ejemplo int= 2 comma=0 resultado = 0,02
 800eec8:	687a      	ldr	r2, [r7, #4]
 800eeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eecc:	429a      	cmp	r2, r3
 800eece:	da25      	bge.n	800ef1c <FTOA+0x88>
		{
			while(i<=((b)+1))
 800eed0:	e01d      	b.n	800ef0e <FTOA+0x7a>
			{
				if((i==(b-comma))&&(comma<(b))&&(comma!=0))
 800eed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	1ad3      	subs	r3, r2, r3
 800eed8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d10b      	bne.n	800eef6 <FTOA+0x62>
 800eede:	687a      	ldr	r2, [r7, #4]
 800eee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee2:	429a      	cmp	r2, r3
 800eee4:	da07      	bge.n	800eef6 <FTOA+0x62>
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d004      	beq.n	800eef6 <FTOA+0x62>
				{
					*v1++='.';
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	1c5a      	adds	r2, r3, #1
 800eef0:	60ba      	str	r2, [r7, #8]
 800eef2:	222e      	movs	r2, #46	; 0x2e
 800eef4:	701a      	strb	r2, [r3, #0]
				}
				*v1++=(unsigned char)origbuff[i];
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	1c5a      	adds	r2, r3, #1
 800eefa:	60ba      	str	r2, [r7, #8]
 800eefc:	f107 0114 	add.w	r1, r7, #20
 800ef00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef02:	440a      	add	r2, r1
 800ef04:	7812      	ldrb	r2, [r2, #0]
 800ef06:	701a      	strb	r2, [r3, #0]
				i++;
 800ef08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef0a:	3301      	adds	r3, #1
 800ef0c:	62fb      	str	r3, [r7, #44]	; 0x2c
			while(i<=((b)+1))
 800ef0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef10:	3301      	adds	r3, #1
 800ef12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef14:	429a      	cmp	r2, r3
 800ef16:	dddc      	ble.n	800eed2 <FTOA+0x3e>
			}
			//*v1++='\0';
			return(i);
 800ef18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1a:	e02a      	b.n	800ef72 <FTOA+0xde>
		  }
		else
		{
			if(b==1)
 800ef1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef1e:	2b01      	cmp	r3, #1
 800ef20:	d10f      	bne.n	800ef42 <FTOA+0xae>
			{
				v1[0]='0';
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	2230      	movs	r2, #48	; 0x30
 800ef26:	701a      	strb	r2, [r3, #0]
				v1[1]='.';
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	222e      	movs	r2, #46	; 0x2e
 800ef2e:	701a      	strb	r2, [r3, #0]
				v1[2]=origbuff[0];
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	3302      	adds	r3, #2
 800ef34:	7d3a      	ldrb	r2, [r7, #20]
 800ef36:	701a      	strb	r2, [r3, #0]
				v1[3]='\0';
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	3303      	adds	r3, #3
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	701a      	strb	r2, [r3, #0]
 800ef40:	e016      	b.n	800ef70 <FTOA+0xdc>
			}
			else
			{
				if(b==0)
 800ef42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d113      	bne.n	800ef70 <FTOA+0xdc>
				{
					*v1++='0';
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	1c5a      	adds	r2, r3, #1
 800ef4c:	60ba      	str	r2, [r7, #8]
 800ef4e:	2230      	movs	r2, #48	; 0x30
 800ef50:	701a      	strb	r2, [r3, #0]
					*v1++='.';
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	1c5a      	adds	r2, r3, #1
 800ef56:	60ba      	str	r2, [r7, #8]
 800ef58:	222e      	movs	r2, #46	; 0x2e
 800ef5a:	701a      	strb	r2, [r3, #0]
					*v1++='0';
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	1c5a      	adds	r2, r3, #1
 800ef60:	60ba      	str	r2, [r7, #8]
 800ef62:	2230      	movs	r2, #48	; 0x30
 800ef64:	701a      	strb	r2, [r3, #0]
					*v1++='\0';
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	1c5a      	adds	r2, r3, #1
 800ef6a:	60ba      	str	r2, [r7, #8]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	701a      	strb	r2, [r3, #0]
				}
			}

		}

		return(0);
 800ef70:	2300      	movs	r3, #0
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3730      	adds	r7, #48	; 0x30
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	08010c7c 	.word	0x08010c7c

0800ef80 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b088      	sub	sp, #32
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	60f8      	str	r0, [r7, #12]
 800ef88:	60b9      	str	r1, [r7, #8]
 800ef8a:	607a      	str	r2, [r7, #4]
 800ef8c:	603b      	str	r3, [r7, #0]
int x =0;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800ef92:	2300      	movs	r3, #0
 800ef94:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800ef96:	f107 0310 	add.w	r3, r7, #16
 800ef9a:	617b      	str	r3, [r7, #20]
if (c==0)
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d105      	bne.n	800efae <CopiaVector+0x2e>
{
	x=strlen(b);
 800efa2:	68b8      	ldr	r0, [r7, #8]
 800efa4:	f7f1 f926 	bl	80001f4 <strlen>
 800efa8:	4603      	mov	r3, r0
 800efaa:	61bb      	str	r3, [r7, #24]
 800efac:	e02e      	b.n	800f00c <CopiaVector+0x8c>
}
else
	{
		x=c;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800efb2:	69bb      	ldr	r3, [r7, #24]
 800efb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800efb8:	dd01      	ble.n	800efbe <CopiaVector+0x3e>
			{
				return(1);
 800efba:	2301      	movs	r3, #1
 800efbc:	e027      	b.n	800f00e <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800efbe:	2300      	movs	r3, #0
 800efc0:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800efc2:	e00a      	b.n	800efda <CopiaVector+0x5a>
				{
					*a++=*b++;
 800efc4:	68ba      	ldr	r2, [r7, #8]
 800efc6:	1c53      	adds	r3, r2, #1
 800efc8:	60bb      	str	r3, [r7, #8]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	1c59      	adds	r1, r3, #1
 800efce:	60f9      	str	r1, [r7, #12]
 800efd0:	7812      	ldrb	r2, [r2, #0]
 800efd2:	701a      	strb	r2, [r3, #0]
					p++;
 800efd4:	69fb      	ldr	r3, [r7, #28]
 800efd6:	3301      	adds	r3, #1
 800efd8:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800efda:	69fa      	ldr	r2, [r7, #28]
 800efdc:	69bb      	ldr	r3, [r7, #24]
 800efde:	429a      	cmp	r2, r3
 800efe0:	dbf0      	blt.n	800efc4 <CopiaVector+0x44>
				}


			if (d==1)
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d111      	bne.n	800f00c <CopiaVector+0x8c>
			{
			  p=c;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	61fb      	str	r3, [r7, #28]
			  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800efec:	e008      	b.n	800f000 <CopiaVector+0x80>
			  {

				  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	1c5a      	adds	r2, r3, #1
 800eff2:	60fa      	str	r2, [r7, #12]
 800eff4:	697a      	ldr	r2, [r7, #20]
 800eff6:	7812      	ldrb	r2, [r2, #0]
 800eff8:	701a      	strb	r2, [r3, #0]
				  p++;
 800effa:	69fb      	ldr	r3, [r7, #28]
 800effc:	3301      	adds	r3, #1
 800effe:	61fb      	str	r3, [r7, #28]
			  while (p<c+1)//512)// OJO SOLO HTTP while (p<128)
 800f000:	687a      	ldr	r2, [r7, #4]
 800f002:	69fb      	ldr	r3, [r7, #28]
 800f004:	429a      	cmp	r2, r3
 800f006:	daf2      	bge.n	800efee <CopiaVector+0x6e>
				  //&a[p]="/0";

			  }
			return (0);
 800f008:	2300      	movs	r3, #0
 800f00a:	e000      	b.n	800f00e <CopiaVector+0x8e>
			}

			}
	}
return (1);
 800f00c:	2301      	movs	r3, #1
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3720      	adds	r7, #32
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}

0800f016 <atoi>:
 800f016:	220a      	movs	r2, #10
 800f018:	2100      	movs	r1, #0
 800f01a:	f000 b883 	b.w	800f124 <strtol>
	...

0800f020 <_strtol_l.constprop.0>:
 800f020:	2b01      	cmp	r3, #1
 800f022:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f026:	d001      	beq.n	800f02c <_strtol_l.constprop.0+0xc>
 800f028:	2b24      	cmp	r3, #36	; 0x24
 800f02a:	d906      	bls.n	800f03a <_strtol_l.constprop.0+0x1a>
 800f02c:	f000 fa54 	bl	800f4d8 <__errno>
 800f030:	2316      	movs	r3, #22
 800f032:	6003      	str	r3, [r0, #0]
 800f034:	2000      	movs	r0, #0
 800f036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f03a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f120 <_strtol_l.constprop.0+0x100>
 800f03e:	460d      	mov	r5, r1
 800f040:	462e      	mov	r6, r5
 800f042:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f046:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800f04a:	f017 0708 	ands.w	r7, r7, #8
 800f04e:	d1f7      	bne.n	800f040 <_strtol_l.constprop.0+0x20>
 800f050:	2c2d      	cmp	r4, #45	; 0x2d
 800f052:	d132      	bne.n	800f0ba <_strtol_l.constprop.0+0x9a>
 800f054:	782c      	ldrb	r4, [r5, #0]
 800f056:	2701      	movs	r7, #1
 800f058:	1cb5      	adds	r5, r6, #2
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d05b      	beq.n	800f116 <_strtol_l.constprop.0+0xf6>
 800f05e:	2b10      	cmp	r3, #16
 800f060:	d109      	bne.n	800f076 <_strtol_l.constprop.0+0x56>
 800f062:	2c30      	cmp	r4, #48	; 0x30
 800f064:	d107      	bne.n	800f076 <_strtol_l.constprop.0+0x56>
 800f066:	782c      	ldrb	r4, [r5, #0]
 800f068:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f06c:	2c58      	cmp	r4, #88	; 0x58
 800f06e:	d14d      	bne.n	800f10c <_strtol_l.constprop.0+0xec>
 800f070:	786c      	ldrb	r4, [r5, #1]
 800f072:	2310      	movs	r3, #16
 800f074:	3502      	adds	r5, #2
 800f076:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f07a:	f108 38ff 	add.w	r8, r8, #4294967295
 800f07e:	f04f 0e00 	mov.w	lr, #0
 800f082:	fbb8 f9f3 	udiv	r9, r8, r3
 800f086:	4676      	mov	r6, lr
 800f088:	fb03 8a19 	mls	sl, r3, r9, r8
 800f08c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f090:	f1bc 0f09 	cmp.w	ip, #9
 800f094:	d816      	bhi.n	800f0c4 <_strtol_l.constprop.0+0xa4>
 800f096:	4664      	mov	r4, ip
 800f098:	42a3      	cmp	r3, r4
 800f09a:	dd24      	ble.n	800f0e6 <_strtol_l.constprop.0+0xc6>
 800f09c:	f1be 3fff 	cmp.w	lr, #4294967295
 800f0a0:	d008      	beq.n	800f0b4 <_strtol_l.constprop.0+0x94>
 800f0a2:	45b1      	cmp	r9, r6
 800f0a4:	d31c      	bcc.n	800f0e0 <_strtol_l.constprop.0+0xc0>
 800f0a6:	d101      	bne.n	800f0ac <_strtol_l.constprop.0+0x8c>
 800f0a8:	45a2      	cmp	sl, r4
 800f0aa:	db19      	blt.n	800f0e0 <_strtol_l.constprop.0+0xc0>
 800f0ac:	fb06 4603 	mla	r6, r6, r3, r4
 800f0b0:	f04f 0e01 	mov.w	lr, #1
 800f0b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0b8:	e7e8      	b.n	800f08c <_strtol_l.constprop.0+0x6c>
 800f0ba:	2c2b      	cmp	r4, #43	; 0x2b
 800f0bc:	bf04      	itt	eq
 800f0be:	782c      	ldrbeq	r4, [r5, #0]
 800f0c0:	1cb5      	addeq	r5, r6, #2
 800f0c2:	e7ca      	b.n	800f05a <_strtol_l.constprop.0+0x3a>
 800f0c4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f0c8:	f1bc 0f19 	cmp.w	ip, #25
 800f0cc:	d801      	bhi.n	800f0d2 <_strtol_l.constprop.0+0xb2>
 800f0ce:	3c37      	subs	r4, #55	; 0x37
 800f0d0:	e7e2      	b.n	800f098 <_strtol_l.constprop.0+0x78>
 800f0d2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f0d6:	f1bc 0f19 	cmp.w	ip, #25
 800f0da:	d804      	bhi.n	800f0e6 <_strtol_l.constprop.0+0xc6>
 800f0dc:	3c57      	subs	r4, #87	; 0x57
 800f0de:	e7db      	b.n	800f098 <_strtol_l.constprop.0+0x78>
 800f0e0:	f04f 3eff 	mov.w	lr, #4294967295
 800f0e4:	e7e6      	b.n	800f0b4 <_strtol_l.constprop.0+0x94>
 800f0e6:	f1be 3fff 	cmp.w	lr, #4294967295
 800f0ea:	d105      	bne.n	800f0f8 <_strtol_l.constprop.0+0xd8>
 800f0ec:	2322      	movs	r3, #34	; 0x22
 800f0ee:	6003      	str	r3, [r0, #0]
 800f0f0:	4646      	mov	r6, r8
 800f0f2:	b942      	cbnz	r2, 800f106 <_strtol_l.constprop.0+0xe6>
 800f0f4:	4630      	mov	r0, r6
 800f0f6:	e79e      	b.n	800f036 <_strtol_l.constprop.0+0x16>
 800f0f8:	b107      	cbz	r7, 800f0fc <_strtol_l.constprop.0+0xdc>
 800f0fa:	4276      	negs	r6, r6
 800f0fc:	2a00      	cmp	r2, #0
 800f0fe:	d0f9      	beq.n	800f0f4 <_strtol_l.constprop.0+0xd4>
 800f100:	f1be 0f00 	cmp.w	lr, #0
 800f104:	d000      	beq.n	800f108 <_strtol_l.constprop.0+0xe8>
 800f106:	1e69      	subs	r1, r5, #1
 800f108:	6011      	str	r1, [r2, #0]
 800f10a:	e7f3      	b.n	800f0f4 <_strtol_l.constprop.0+0xd4>
 800f10c:	2430      	movs	r4, #48	; 0x30
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d1b1      	bne.n	800f076 <_strtol_l.constprop.0+0x56>
 800f112:	2308      	movs	r3, #8
 800f114:	e7af      	b.n	800f076 <_strtol_l.constprop.0+0x56>
 800f116:	2c30      	cmp	r4, #48	; 0x30
 800f118:	d0a5      	beq.n	800f066 <_strtol_l.constprop.0+0x46>
 800f11a:	230a      	movs	r3, #10
 800f11c:	e7ab      	b.n	800f076 <_strtol_l.constprop.0+0x56>
 800f11e:	bf00      	nop
 800f120:	08010c99 	.word	0x08010c99

0800f124 <strtol>:
 800f124:	4613      	mov	r3, r2
 800f126:	460a      	mov	r2, r1
 800f128:	4601      	mov	r1, r0
 800f12a:	4802      	ldr	r0, [pc, #8]	; (800f134 <strtol+0x10>)
 800f12c:	6800      	ldr	r0, [r0, #0]
 800f12e:	f7ff bf77 	b.w	800f020 <_strtol_l.constprop.0>
 800f132:	bf00      	nop
 800f134:	200001b4 	.word	0x200001b4

0800f138 <std>:
 800f138:	2300      	movs	r3, #0
 800f13a:	b510      	push	{r4, lr}
 800f13c:	4604      	mov	r4, r0
 800f13e:	e9c0 3300 	strd	r3, r3, [r0]
 800f142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f146:	6083      	str	r3, [r0, #8]
 800f148:	8181      	strh	r1, [r0, #12]
 800f14a:	6643      	str	r3, [r0, #100]	; 0x64
 800f14c:	81c2      	strh	r2, [r0, #14]
 800f14e:	6183      	str	r3, [r0, #24]
 800f150:	4619      	mov	r1, r3
 800f152:	2208      	movs	r2, #8
 800f154:	305c      	adds	r0, #92	; 0x5c
 800f156:	f000 f902 	bl	800f35e <memset>
 800f15a:	4b05      	ldr	r3, [pc, #20]	; (800f170 <std+0x38>)
 800f15c:	6263      	str	r3, [r4, #36]	; 0x24
 800f15e:	4b05      	ldr	r3, [pc, #20]	; (800f174 <std+0x3c>)
 800f160:	62a3      	str	r3, [r4, #40]	; 0x28
 800f162:	4b05      	ldr	r3, [pc, #20]	; (800f178 <std+0x40>)
 800f164:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f166:	4b05      	ldr	r3, [pc, #20]	; (800f17c <std+0x44>)
 800f168:	6224      	str	r4, [r4, #32]
 800f16a:	6323      	str	r3, [r4, #48]	; 0x30
 800f16c:	bd10      	pop	{r4, pc}
 800f16e:	bf00      	nop
 800f170:	0800f2d9 	.word	0x0800f2d9
 800f174:	0800f2fb 	.word	0x0800f2fb
 800f178:	0800f333 	.word	0x0800f333
 800f17c:	0800f357 	.word	0x0800f357

0800f180 <stdio_exit_handler>:
 800f180:	4a02      	ldr	r2, [pc, #8]	; (800f18c <stdio_exit_handler+0xc>)
 800f182:	4903      	ldr	r1, [pc, #12]	; (800f190 <stdio_exit_handler+0x10>)
 800f184:	4803      	ldr	r0, [pc, #12]	; (800f194 <stdio_exit_handler+0x14>)
 800f186:	f000 b869 	b.w	800f25c <_fwalk_sglue>
 800f18a:	bf00      	nop
 800f18c:	2000015c 	.word	0x2000015c
 800f190:	0800fe59 	.word	0x0800fe59
 800f194:	20000168 	.word	0x20000168

0800f198 <cleanup_stdio>:
 800f198:	6841      	ldr	r1, [r0, #4]
 800f19a:	4b0c      	ldr	r3, [pc, #48]	; (800f1cc <cleanup_stdio+0x34>)
 800f19c:	4299      	cmp	r1, r3
 800f19e:	b510      	push	{r4, lr}
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	d001      	beq.n	800f1a8 <cleanup_stdio+0x10>
 800f1a4:	f000 fe58 	bl	800fe58 <_fflush_r>
 800f1a8:	68a1      	ldr	r1, [r4, #8]
 800f1aa:	4b09      	ldr	r3, [pc, #36]	; (800f1d0 <cleanup_stdio+0x38>)
 800f1ac:	4299      	cmp	r1, r3
 800f1ae:	d002      	beq.n	800f1b6 <cleanup_stdio+0x1e>
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	f000 fe51 	bl	800fe58 <_fflush_r>
 800f1b6:	68e1      	ldr	r1, [r4, #12]
 800f1b8:	4b06      	ldr	r3, [pc, #24]	; (800f1d4 <cleanup_stdio+0x3c>)
 800f1ba:	4299      	cmp	r1, r3
 800f1bc:	d004      	beq.n	800f1c8 <cleanup_stdio+0x30>
 800f1be:	4620      	mov	r0, r4
 800f1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1c4:	f000 be48 	b.w	800fe58 <_fflush_r>
 800f1c8:	bd10      	pop	{r4, pc}
 800f1ca:	bf00      	nop
 800f1cc:	20004680 	.word	0x20004680
 800f1d0:	200046e8 	.word	0x200046e8
 800f1d4:	20004750 	.word	0x20004750

0800f1d8 <global_stdio_init.part.0>:
 800f1d8:	b510      	push	{r4, lr}
 800f1da:	4b0b      	ldr	r3, [pc, #44]	; (800f208 <global_stdio_init.part.0+0x30>)
 800f1dc:	4c0b      	ldr	r4, [pc, #44]	; (800f20c <global_stdio_init.part.0+0x34>)
 800f1de:	4a0c      	ldr	r2, [pc, #48]	; (800f210 <global_stdio_init.part.0+0x38>)
 800f1e0:	601a      	str	r2, [r3, #0]
 800f1e2:	4620      	mov	r0, r4
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	2104      	movs	r1, #4
 800f1e8:	f7ff ffa6 	bl	800f138 <std>
 800f1ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	2109      	movs	r1, #9
 800f1f4:	f7ff ffa0 	bl	800f138 <std>
 800f1f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f1fc:	2202      	movs	r2, #2
 800f1fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f202:	2112      	movs	r1, #18
 800f204:	f7ff bf98 	b.w	800f138 <std>
 800f208:	200047b8 	.word	0x200047b8
 800f20c:	20004680 	.word	0x20004680
 800f210:	0800f181 	.word	0x0800f181

0800f214 <__sfp_lock_acquire>:
 800f214:	4801      	ldr	r0, [pc, #4]	; (800f21c <__sfp_lock_acquire+0x8>)
 800f216:	f000 b989 	b.w	800f52c <__retarget_lock_acquire_recursive>
 800f21a:	bf00      	nop
 800f21c:	200047c1 	.word	0x200047c1

0800f220 <__sfp_lock_release>:
 800f220:	4801      	ldr	r0, [pc, #4]	; (800f228 <__sfp_lock_release+0x8>)
 800f222:	f000 b984 	b.w	800f52e <__retarget_lock_release_recursive>
 800f226:	bf00      	nop
 800f228:	200047c1 	.word	0x200047c1

0800f22c <__sinit>:
 800f22c:	b510      	push	{r4, lr}
 800f22e:	4604      	mov	r4, r0
 800f230:	f7ff fff0 	bl	800f214 <__sfp_lock_acquire>
 800f234:	6a23      	ldr	r3, [r4, #32]
 800f236:	b11b      	cbz	r3, 800f240 <__sinit+0x14>
 800f238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f23c:	f7ff bff0 	b.w	800f220 <__sfp_lock_release>
 800f240:	4b04      	ldr	r3, [pc, #16]	; (800f254 <__sinit+0x28>)
 800f242:	6223      	str	r3, [r4, #32]
 800f244:	4b04      	ldr	r3, [pc, #16]	; (800f258 <__sinit+0x2c>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d1f5      	bne.n	800f238 <__sinit+0xc>
 800f24c:	f7ff ffc4 	bl	800f1d8 <global_stdio_init.part.0>
 800f250:	e7f2      	b.n	800f238 <__sinit+0xc>
 800f252:	bf00      	nop
 800f254:	0800f199 	.word	0x0800f199
 800f258:	200047b8 	.word	0x200047b8

0800f25c <_fwalk_sglue>:
 800f25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f260:	4607      	mov	r7, r0
 800f262:	4688      	mov	r8, r1
 800f264:	4614      	mov	r4, r2
 800f266:	2600      	movs	r6, #0
 800f268:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f26c:	f1b9 0901 	subs.w	r9, r9, #1
 800f270:	d505      	bpl.n	800f27e <_fwalk_sglue+0x22>
 800f272:	6824      	ldr	r4, [r4, #0]
 800f274:	2c00      	cmp	r4, #0
 800f276:	d1f7      	bne.n	800f268 <_fwalk_sglue+0xc>
 800f278:	4630      	mov	r0, r6
 800f27a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f27e:	89ab      	ldrh	r3, [r5, #12]
 800f280:	2b01      	cmp	r3, #1
 800f282:	d907      	bls.n	800f294 <_fwalk_sglue+0x38>
 800f284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f288:	3301      	adds	r3, #1
 800f28a:	d003      	beq.n	800f294 <_fwalk_sglue+0x38>
 800f28c:	4629      	mov	r1, r5
 800f28e:	4638      	mov	r0, r7
 800f290:	47c0      	blx	r8
 800f292:	4306      	orrs	r6, r0
 800f294:	3568      	adds	r5, #104	; 0x68
 800f296:	e7e9      	b.n	800f26c <_fwalk_sglue+0x10>

0800f298 <siprintf>:
 800f298:	b40e      	push	{r1, r2, r3}
 800f29a:	b500      	push	{lr}
 800f29c:	b09c      	sub	sp, #112	; 0x70
 800f29e:	ab1d      	add	r3, sp, #116	; 0x74
 800f2a0:	9002      	str	r0, [sp, #8]
 800f2a2:	9006      	str	r0, [sp, #24]
 800f2a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f2a8:	4809      	ldr	r0, [pc, #36]	; (800f2d0 <siprintf+0x38>)
 800f2aa:	9107      	str	r1, [sp, #28]
 800f2ac:	9104      	str	r1, [sp, #16]
 800f2ae:	4909      	ldr	r1, [pc, #36]	; (800f2d4 <siprintf+0x3c>)
 800f2b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2b4:	9105      	str	r1, [sp, #20]
 800f2b6:	6800      	ldr	r0, [r0, #0]
 800f2b8:	9301      	str	r3, [sp, #4]
 800f2ba:	a902      	add	r1, sp, #8
 800f2bc:	f000 fab8 	bl	800f830 <_svfiprintf_r>
 800f2c0:	9b02      	ldr	r3, [sp, #8]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	701a      	strb	r2, [r3, #0]
 800f2c6:	b01c      	add	sp, #112	; 0x70
 800f2c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2cc:	b003      	add	sp, #12
 800f2ce:	4770      	bx	lr
 800f2d0:	200001b4 	.word	0x200001b4
 800f2d4:	ffff0208 	.word	0xffff0208

0800f2d8 <__sread>:
 800f2d8:	b510      	push	{r4, lr}
 800f2da:	460c      	mov	r4, r1
 800f2dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2e0:	f000 f8d6 	bl	800f490 <_read_r>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	bfab      	itete	ge
 800f2e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f2ea:	89a3      	ldrhlt	r3, [r4, #12]
 800f2ec:	181b      	addge	r3, r3, r0
 800f2ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f2f2:	bfac      	ite	ge
 800f2f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f2f6:	81a3      	strhlt	r3, [r4, #12]
 800f2f8:	bd10      	pop	{r4, pc}

0800f2fa <__swrite>:
 800f2fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2fe:	461f      	mov	r7, r3
 800f300:	898b      	ldrh	r3, [r1, #12]
 800f302:	05db      	lsls	r3, r3, #23
 800f304:	4605      	mov	r5, r0
 800f306:	460c      	mov	r4, r1
 800f308:	4616      	mov	r6, r2
 800f30a:	d505      	bpl.n	800f318 <__swrite+0x1e>
 800f30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f310:	2302      	movs	r3, #2
 800f312:	2200      	movs	r2, #0
 800f314:	f000 f8aa 	bl	800f46c <_lseek_r>
 800f318:	89a3      	ldrh	r3, [r4, #12]
 800f31a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f31e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f322:	81a3      	strh	r3, [r4, #12]
 800f324:	4632      	mov	r2, r6
 800f326:	463b      	mov	r3, r7
 800f328:	4628      	mov	r0, r5
 800f32a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f32e:	f000 b8c1 	b.w	800f4b4 <_write_r>

0800f332 <__sseek>:
 800f332:	b510      	push	{r4, lr}
 800f334:	460c      	mov	r4, r1
 800f336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f33a:	f000 f897 	bl	800f46c <_lseek_r>
 800f33e:	1c43      	adds	r3, r0, #1
 800f340:	89a3      	ldrh	r3, [r4, #12]
 800f342:	bf15      	itete	ne
 800f344:	6560      	strne	r0, [r4, #84]	; 0x54
 800f346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f34a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f34e:	81a3      	strheq	r3, [r4, #12]
 800f350:	bf18      	it	ne
 800f352:	81a3      	strhne	r3, [r4, #12]
 800f354:	bd10      	pop	{r4, pc}

0800f356 <__sclose>:
 800f356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f35a:	f000 b877 	b.w	800f44c <_close_r>

0800f35e <memset>:
 800f35e:	4402      	add	r2, r0
 800f360:	4603      	mov	r3, r0
 800f362:	4293      	cmp	r3, r2
 800f364:	d100      	bne.n	800f368 <memset+0xa>
 800f366:	4770      	bx	lr
 800f368:	f803 1b01 	strb.w	r1, [r3], #1
 800f36c:	e7f9      	b.n	800f362 <memset+0x4>

0800f36e <strncat>:
 800f36e:	b530      	push	{r4, r5, lr}
 800f370:	4604      	mov	r4, r0
 800f372:	7825      	ldrb	r5, [r4, #0]
 800f374:	4623      	mov	r3, r4
 800f376:	3401      	adds	r4, #1
 800f378:	2d00      	cmp	r5, #0
 800f37a:	d1fa      	bne.n	800f372 <strncat+0x4>
 800f37c:	3a01      	subs	r2, #1
 800f37e:	d304      	bcc.n	800f38a <strncat+0x1c>
 800f380:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f384:	f803 4b01 	strb.w	r4, [r3], #1
 800f388:	b904      	cbnz	r4, 800f38c <strncat+0x1e>
 800f38a:	bd30      	pop	{r4, r5, pc}
 800f38c:	2a00      	cmp	r2, #0
 800f38e:	d1f5      	bne.n	800f37c <strncat+0xe>
 800f390:	701a      	strb	r2, [r3, #0]
 800f392:	e7f3      	b.n	800f37c <strncat+0xe>

0800f394 <strtok>:
 800f394:	4b16      	ldr	r3, [pc, #88]	; (800f3f0 <strtok+0x5c>)
 800f396:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f398:	681e      	ldr	r6, [r3, #0]
 800f39a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800f39c:	4605      	mov	r5, r0
 800f39e:	b9fc      	cbnz	r4, 800f3e0 <strtok+0x4c>
 800f3a0:	2050      	movs	r0, #80	; 0x50
 800f3a2:	9101      	str	r1, [sp, #4]
 800f3a4:	f000 f936 	bl	800f614 <malloc>
 800f3a8:	9901      	ldr	r1, [sp, #4]
 800f3aa:	6470      	str	r0, [r6, #68]	; 0x44
 800f3ac:	4602      	mov	r2, r0
 800f3ae:	b920      	cbnz	r0, 800f3ba <strtok+0x26>
 800f3b0:	4b10      	ldr	r3, [pc, #64]	; (800f3f4 <strtok+0x60>)
 800f3b2:	4811      	ldr	r0, [pc, #68]	; (800f3f8 <strtok+0x64>)
 800f3b4:	215b      	movs	r1, #91	; 0x5b
 800f3b6:	f000 f8c3 	bl	800f540 <__assert_func>
 800f3ba:	e9c0 4400 	strd	r4, r4, [r0]
 800f3be:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f3c2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f3c6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f3ca:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f3ce:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f3d2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f3d6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f3da:	6184      	str	r4, [r0, #24]
 800f3dc:	7704      	strb	r4, [r0, #28]
 800f3de:	6244      	str	r4, [r0, #36]	; 0x24
 800f3e0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	4628      	mov	r0, r5
 800f3e6:	b002      	add	sp, #8
 800f3e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3ec:	f000 b806 	b.w	800f3fc <__strtok_r>
 800f3f0:	200001b4 	.word	0x200001b4
 800f3f4:	08010d99 	.word	0x08010d99
 800f3f8:	08010db0 	.word	0x08010db0

0800f3fc <__strtok_r>:
 800f3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3fe:	b908      	cbnz	r0, 800f404 <__strtok_r+0x8>
 800f400:	6810      	ldr	r0, [r2, #0]
 800f402:	b188      	cbz	r0, 800f428 <__strtok_r+0x2c>
 800f404:	4604      	mov	r4, r0
 800f406:	4620      	mov	r0, r4
 800f408:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f40c:	460f      	mov	r7, r1
 800f40e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f412:	b91e      	cbnz	r6, 800f41c <__strtok_r+0x20>
 800f414:	b965      	cbnz	r5, 800f430 <__strtok_r+0x34>
 800f416:	6015      	str	r5, [r2, #0]
 800f418:	4628      	mov	r0, r5
 800f41a:	e005      	b.n	800f428 <__strtok_r+0x2c>
 800f41c:	42b5      	cmp	r5, r6
 800f41e:	d1f6      	bne.n	800f40e <__strtok_r+0x12>
 800f420:	2b00      	cmp	r3, #0
 800f422:	d1f0      	bne.n	800f406 <__strtok_r+0xa>
 800f424:	6014      	str	r4, [r2, #0]
 800f426:	7003      	strb	r3, [r0, #0]
 800f428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f42a:	461c      	mov	r4, r3
 800f42c:	e00c      	b.n	800f448 <__strtok_r+0x4c>
 800f42e:	b915      	cbnz	r5, 800f436 <__strtok_r+0x3a>
 800f430:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f434:	460e      	mov	r6, r1
 800f436:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f43a:	42ab      	cmp	r3, r5
 800f43c:	d1f7      	bne.n	800f42e <__strtok_r+0x32>
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d0f3      	beq.n	800f42a <__strtok_r+0x2e>
 800f442:	2300      	movs	r3, #0
 800f444:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f448:	6014      	str	r4, [r2, #0]
 800f44a:	e7ed      	b.n	800f428 <__strtok_r+0x2c>

0800f44c <_close_r>:
 800f44c:	b538      	push	{r3, r4, r5, lr}
 800f44e:	4d06      	ldr	r5, [pc, #24]	; (800f468 <_close_r+0x1c>)
 800f450:	2300      	movs	r3, #0
 800f452:	4604      	mov	r4, r0
 800f454:	4608      	mov	r0, r1
 800f456:	602b      	str	r3, [r5, #0]
 800f458:	f7f3 fa47 	bl	80028ea <_close>
 800f45c:	1c43      	adds	r3, r0, #1
 800f45e:	d102      	bne.n	800f466 <_close_r+0x1a>
 800f460:	682b      	ldr	r3, [r5, #0]
 800f462:	b103      	cbz	r3, 800f466 <_close_r+0x1a>
 800f464:	6023      	str	r3, [r4, #0]
 800f466:	bd38      	pop	{r3, r4, r5, pc}
 800f468:	200047bc 	.word	0x200047bc

0800f46c <_lseek_r>:
 800f46c:	b538      	push	{r3, r4, r5, lr}
 800f46e:	4d07      	ldr	r5, [pc, #28]	; (800f48c <_lseek_r+0x20>)
 800f470:	4604      	mov	r4, r0
 800f472:	4608      	mov	r0, r1
 800f474:	4611      	mov	r1, r2
 800f476:	2200      	movs	r2, #0
 800f478:	602a      	str	r2, [r5, #0]
 800f47a:	461a      	mov	r2, r3
 800f47c:	f7f3 fa5c 	bl	8002938 <_lseek>
 800f480:	1c43      	adds	r3, r0, #1
 800f482:	d102      	bne.n	800f48a <_lseek_r+0x1e>
 800f484:	682b      	ldr	r3, [r5, #0]
 800f486:	b103      	cbz	r3, 800f48a <_lseek_r+0x1e>
 800f488:	6023      	str	r3, [r4, #0]
 800f48a:	bd38      	pop	{r3, r4, r5, pc}
 800f48c:	200047bc 	.word	0x200047bc

0800f490 <_read_r>:
 800f490:	b538      	push	{r3, r4, r5, lr}
 800f492:	4d07      	ldr	r5, [pc, #28]	; (800f4b0 <_read_r+0x20>)
 800f494:	4604      	mov	r4, r0
 800f496:	4608      	mov	r0, r1
 800f498:	4611      	mov	r1, r2
 800f49a:	2200      	movs	r2, #0
 800f49c:	602a      	str	r2, [r5, #0]
 800f49e:	461a      	mov	r2, r3
 800f4a0:	f7f3 f9ea 	bl	8002878 <_read>
 800f4a4:	1c43      	adds	r3, r0, #1
 800f4a6:	d102      	bne.n	800f4ae <_read_r+0x1e>
 800f4a8:	682b      	ldr	r3, [r5, #0]
 800f4aa:	b103      	cbz	r3, 800f4ae <_read_r+0x1e>
 800f4ac:	6023      	str	r3, [r4, #0]
 800f4ae:	bd38      	pop	{r3, r4, r5, pc}
 800f4b0:	200047bc 	.word	0x200047bc

0800f4b4 <_write_r>:
 800f4b4:	b538      	push	{r3, r4, r5, lr}
 800f4b6:	4d07      	ldr	r5, [pc, #28]	; (800f4d4 <_write_r+0x20>)
 800f4b8:	4604      	mov	r4, r0
 800f4ba:	4608      	mov	r0, r1
 800f4bc:	4611      	mov	r1, r2
 800f4be:	2200      	movs	r2, #0
 800f4c0:	602a      	str	r2, [r5, #0]
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	f7f3 f9f5 	bl	80028b2 <_write>
 800f4c8:	1c43      	adds	r3, r0, #1
 800f4ca:	d102      	bne.n	800f4d2 <_write_r+0x1e>
 800f4cc:	682b      	ldr	r3, [r5, #0]
 800f4ce:	b103      	cbz	r3, 800f4d2 <_write_r+0x1e>
 800f4d0:	6023      	str	r3, [r4, #0]
 800f4d2:	bd38      	pop	{r3, r4, r5, pc}
 800f4d4:	200047bc 	.word	0x200047bc

0800f4d8 <__errno>:
 800f4d8:	4b01      	ldr	r3, [pc, #4]	; (800f4e0 <__errno+0x8>)
 800f4da:	6818      	ldr	r0, [r3, #0]
 800f4dc:	4770      	bx	lr
 800f4de:	bf00      	nop
 800f4e0:	200001b4 	.word	0x200001b4

0800f4e4 <__libc_init_array>:
 800f4e4:	b570      	push	{r4, r5, r6, lr}
 800f4e6:	4d0d      	ldr	r5, [pc, #52]	; (800f51c <__libc_init_array+0x38>)
 800f4e8:	4c0d      	ldr	r4, [pc, #52]	; (800f520 <__libc_init_array+0x3c>)
 800f4ea:	1b64      	subs	r4, r4, r5
 800f4ec:	10a4      	asrs	r4, r4, #2
 800f4ee:	2600      	movs	r6, #0
 800f4f0:	42a6      	cmp	r6, r4
 800f4f2:	d109      	bne.n	800f508 <__libc_init_array+0x24>
 800f4f4:	4d0b      	ldr	r5, [pc, #44]	; (800f524 <__libc_init_array+0x40>)
 800f4f6:	4c0c      	ldr	r4, [pc, #48]	; (800f528 <__libc_init_array+0x44>)
 800f4f8:	f001 f800 	bl	80104fc <_init>
 800f4fc:	1b64      	subs	r4, r4, r5
 800f4fe:	10a4      	asrs	r4, r4, #2
 800f500:	2600      	movs	r6, #0
 800f502:	42a6      	cmp	r6, r4
 800f504:	d105      	bne.n	800f512 <__libc_init_array+0x2e>
 800f506:	bd70      	pop	{r4, r5, r6, pc}
 800f508:	f855 3b04 	ldr.w	r3, [r5], #4
 800f50c:	4798      	blx	r3
 800f50e:	3601      	adds	r6, #1
 800f510:	e7ee      	b.n	800f4f0 <__libc_init_array+0xc>
 800f512:	f855 3b04 	ldr.w	r3, [r5], #4
 800f516:	4798      	blx	r3
 800f518:	3601      	adds	r6, #1
 800f51a:	e7f2      	b.n	800f502 <__libc_init_array+0x1e>
 800f51c:	08010e84 	.word	0x08010e84
 800f520:	08010e84 	.word	0x08010e84
 800f524:	08010e84 	.word	0x08010e84
 800f528:	08010e88 	.word	0x08010e88

0800f52c <__retarget_lock_acquire_recursive>:
 800f52c:	4770      	bx	lr

0800f52e <__retarget_lock_release_recursive>:
 800f52e:	4770      	bx	lr

0800f530 <strcpy>:
 800f530:	4603      	mov	r3, r0
 800f532:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f536:	f803 2b01 	strb.w	r2, [r3], #1
 800f53a:	2a00      	cmp	r2, #0
 800f53c:	d1f9      	bne.n	800f532 <strcpy+0x2>
 800f53e:	4770      	bx	lr

0800f540 <__assert_func>:
 800f540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f542:	4614      	mov	r4, r2
 800f544:	461a      	mov	r2, r3
 800f546:	4b09      	ldr	r3, [pc, #36]	; (800f56c <__assert_func+0x2c>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	4605      	mov	r5, r0
 800f54c:	68d8      	ldr	r0, [r3, #12]
 800f54e:	b14c      	cbz	r4, 800f564 <__assert_func+0x24>
 800f550:	4b07      	ldr	r3, [pc, #28]	; (800f570 <__assert_func+0x30>)
 800f552:	9100      	str	r1, [sp, #0]
 800f554:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f558:	4906      	ldr	r1, [pc, #24]	; (800f574 <__assert_func+0x34>)
 800f55a:	462b      	mov	r3, r5
 800f55c:	f000 fca4 	bl	800fea8 <fiprintf>
 800f560:	f000 fcec 	bl	800ff3c <abort>
 800f564:	4b04      	ldr	r3, [pc, #16]	; (800f578 <__assert_func+0x38>)
 800f566:	461c      	mov	r4, r3
 800f568:	e7f3      	b.n	800f552 <__assert_func+0x12>
 800f56a:	bf00      	nop
 800f56c:	200001b4 	.word	0x200001b4
 800f570:	08010e0a 	.word	0x08010e0a
 800f574:	08010e17 	.word	0x08010e17
 800f578:	08010e45 	.word	0x08010e45

0800f57c <_free_r>:
 800f57c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f57e:	2900      	cmp	r1, #0
 800f580:	d044      	beq.n	800f60c <_free_r+0x90>
 800f582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f586:	9001      	str	r0, [sp, #4]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	f1a1 0404 	sub.w	r4, r1, #4
 800f58e:	bfb8      	it	lt
 800f590:	18e4      	addlt	r4, r4, r3
 800f592:	f000 f8e7 	bl	800f764 <__malloc_lock>
 800f596:	4a1e      	ldr	r2, [pc, #120]	; (800f610 <_free_r+0x94>)
 800f598:	9801      	ldr	r0, [sp, #4]
 800f59a:	6813      	ldr	r3, [r2, #0]
 800f59c:	b933      	cbnz	r3, 800f5ac <_free_r+0x30>
 800f59e:	6063      	str	r3, [r4, #4]
 800f5a0:	6014      	str	r4, [r2, #0]
 800f5a2:	b003      	add	sp, #12
 800f5a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5a8:	f000 b8e2 	b.w	800f770 <__malloc_unlock>
 800f5ac:	42a3      	cmp	r3, r4
 800f5ae:	d908      	bls.n	800f5c2 <_free_r+0x46>
 800f5b0:	6825      	ldr	r5, [r4, #0]
 800f5b2:	1961      	adds	r1, r4, r5
 800f5b4:	428b      	cmp	r3, r1
 800f5b6:	bf01      	itttt	eq
 800f5b8:	6819      	ldreq	r1, [r3, #0]
 800f5ba:	685b      	ldreq	r3, [r3, #4]
 800f5bc:	1949      	addeq	r1, r1, r5
 800f5be:	6021      	streq	r1, [r4, #0]
 800f5c0:	e7ed      	b.n	800f59e <_free_r+0x22>
 800f5c2:	461a      	mov	r2, r3
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	b10b      	cbz	r3, 800f5cc <_free_r+0x50>
 800f5c8:	42a3      	cmp	r3, r4
 800f5ca:	d9fa      	bls.n	800f5c2 <_free_r+0x46>
 800f5cc:	6811      	ldr	r1, [r2, #0]
 800f5ce:	1855      	adds	r5, r2, r1
 800f5d0:	42a5      	cmp	r5, r4
 800f5d2:	d10b      	bne.n	800f5ec <_free_r+0x70>
 800f5d4:	6824      	ldr	r4, [r4, #0]
 800f5d6:	4421      	add	r1, r4
 800f5d8:	1854      	adds	r4, r2, r1
 800f5da:	42a3      	cmp	r3, r4
 800f5dc:	6011      	str	r1, [r2, #0]
 800f5de:	d1e0      	bne.n	800f5a2 <_free_r+0x26>
 800f5e0:	681c      	ldr	r4, [r3, #0]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	6053      	str	r3, [r2, #4]
 800f5e6:	440c      	add	r4, r1
 800f5e8:	6014      	str	r4, [r2, #0]
 800f5ea:	e7da      	b.n	800f5a2 <_free_r+0x26>
 800f5ec:	d902      	bls.n	800f5f4 <_free_r+0x78>
 800f5ee:	230c      	movs	r3, #12
 800f5f0:	6003      	str	r3, [r0, #0]
 800f5f2:	e7d6      	b.n	800f5a2 <_free_r+0x26>
 800f5f4:	6825      	ldr	r5, [r4, #0]
 800f5f6:	1961      	adds	r1, r4, r5
 800f5f8:	428b      	cmp	r3, r1
 800f5fa:	bf04      	itt	eq
 800f5fc:	6819      	ldreq	r1, [r3, #0]
 800f5fe:	685b      	ldreq	r3, [r3, #4]
 800f600:	6063      	str	r3, [r4, #4]
 800f602:	bf04      	itt	eq
 800f604:	1949      	addeq	r1, r1, r5
 800f606:	6021      	streq	r1, [r4, #0]
 800f608:	6054      	str	r4, [r2, #4]
 800f60a:	e7ca      	b.n	800f5a2 <_free_r+0x26>
 800f60c:	b003      	add	sp, #12
 800f60e:	bd30      	pop	{r4, r5, pc}
 800f610:	200047c4 	.word	0x200047c4

0800f614 <malloc>:
 800f614:	4b02      	ldr	r3, [pc, #8]	; (800f620 <malloc+0xc>)
 800f616:	4601      	mov	r1, r0
 800f618:	6818      	ldr	r0, [r3, #0]
 800f61a:	f000 b823 	b.w	800f664 <_malloc_r>
 800f61e:	bf00      	nop
 800f620:	200001b4 	.word	0x200001b4

0800f624 <sbrk_aligned>:
 800f624:	b570      	push	{r4, r5, r6, lr}
 800f626:	4e0e      	ldr	r6, [pc, #56]	; (800f660 <sbrk_aligned+0x3c>)
 800f628:	460c      	mov	r4, r1
 800f62a:	6831      	ldr	r1, [r6, #0]
 800f62c:	4605      	mov	r5, r0
 800f62e:	b911      	cbnz	r1, 800f636 <sbrk_aligned+0x12>
 800f630:	f000 fc66 	bl	800ff00 <_sbrk_r>
 800f634:	6030      	str	r0, [r6, #0]
 800f636:	4621      	mov	r1, r4
 800f638:	4628      	mov	r0, r5
 800f63a:	f000 fc61 	bl	800ff00 <_sbrk_r>
 800f63e:	1c43      	adds	r3, r0, #1
 800f640:	d00a      	beq.n	800f658 <sbrk_aligned+0x34>
 800f642:	1cc4      	adds	r4, r0, #3
 800f644:	f024 0403 	bic.w	r4, r4, #3
 800f648:	42a0      	cmp	r0, r4
 800f64a:	d007      	beq.n	800f65c <sbrk_aligned+0x38>
 800f64c:	1a21      	subs	r1, r4, r0
 800f64e:	4628      	mov	r0, r5
 800f650:	f000 fc56 	bl	800ff00 <_sbrk_r>
 800f654:	3001      	adds	r0, #1
 800f656:	d101      	bne.n	800f65c <sbrk_aligned+0x38>
 800f658:	f04f 34ff 	mov.w	r4, #4294967295
 800f65c:	4620      	mov	r0, r4
 800f65e:	bd70      	pop	{r4, r5, r6, pc}
 800f660:	200047c8 	.word	0x200047c8

0800f664 <_malloc_r>:
 800f664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f668:	1ccd      	adds	r5, r1, #3
 800f66a:	f025 0503 	bic.w	r5, r5, #3
 800f66e:	3508      	adds	r5, #8
 800f670:	2d0c      	cmp	r5, #12
 800f672:	bf38      	it	cc
 800f674:	250c      	movcc	r5, #12
 800f676:	2d00      	cmp	r5, #0
 800f678:	4607      	mov	r7, r0
 800f67a:	db01      	blt.n	800f680 <_malloc_r+0x1c>
 800f67c:	42a9      	cmp	r1, r5
 800f67e:	d905      	bls.n	800f68c <_malloc_r+0x28>
 800f680:	230c      	movs	r3, #12
 800f682:	603b      	str	r3, [r7, #0]
 800f684:	2600      	movs	r6, #0
 800f686:	4630      	mov	r0, r6
 800f688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f68c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f760 <_malloc_r+0xfc>
 800f690:	f000 f868 	bl	800f764 <__malloc_lock>
 800f694:	f8d8 3000 	ldr.w	r3, [r8]
 800f698:	461c      	mov	r4, r3
 800f69a:	bb5c      	cbnz	r4, 800f6f4 <_malloc_r+0x90>
 800f69c:	4629      	mov	r1, r5
 800f69e:	4638      	mov	r0, r7
 800f6a0:	f7ff ffc0 	bl	800f624 <sbrk_aligned>
 800f6a4:	1c43      	adds	r3, r0, #1
 800f6a6:	4604      	mov	r4, r0
 800f6a8:	d155      	bne.n	800f756 <_malloc_r+0xf2>
 800f6aa:	f8d8 4000 	ldr.w	r4, [r8]
 800f6ae:	4626      	mov	r6, r4
 800f6b0:	2e00      	cmp	r6, #0
 800f6b2:	d145      	bne.n	800f740 <_malloc_r+0xdc>
 800f6b4:	2c00      	cmp	r4, #0
 800f6b6:	d048      	beq.n	800f74a <_malloc_r+0xe6>
 800f6b8:	6823      	ldr	r3, [r4, #0]
 800f6ba:	4631      	mov	r1, r6
 800f6bc:	4638      	mov	r0, r7
 800f6be:	eb04 0903 	add.w	r9, r4, r3
 800f6c2:	f000 fc1d 	bl	800ff00 <_sbrk_r>
 800f6c6:	4581      	cmp	r9, r0
 800f6c8:	d13f      	bne.n	800f74a <_malloc_r+0xe6>
 800f6ca:	6821      	ldr	r1, [r4, #0]
 800f6cc:	1a6d      	subs	r5, r5, r1
 800f6ce:	4629      	mov	r1, r5
 800f6d0:	4638      	mov	r0, r7
 800f6d2:	f7ff ffa7 	bl	800f624 <sbrk_aligned>
 800f6d6:	3001      	adds	r0, #1
 800f6d8:	d037      	beq.n	800f74a <_malloc_r+0xe6>
 800f6da:	6823      	ldr	r3, [r4, #0]
 800f6dc:	442b      	add	r3, r5
 800f6de:	6023      	str	r3, [r4, #0]
 800f6e0:	f8d8 3000 	ldr.w	r3, [r8]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d038      	beq.n	800f75a <_malloc_r+0xf6>
 800f6e8:	685a      	ldr	r2, [r3, #4]
 800f6ea:	42a2      	cmp	r2, r4
 800f6ec:	d12b      	bne.n	800f746 <_malloc_r+0xe2>
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	605a      	str	r2, [r3, #4]
 800f6f2:	e00f      	b.n	800f714 <_malloc_r+0xb0>
 800f6f4:	6822      	ldr	r2, [r4, #0]
 800f6f6:	1b52      	subs	r2, r2, r5
 800f6f8:	d41f      	bmi.n	800f73a <_malloc_r+0xd6>
 800f6fa:	2a0b      	cmp	r2, #11
 800f6fc:	d917      	bls.n	800f72e <_malloc_r+0xca>
 800f6fe:	1961      	adds	r1, r4, r5
 800f700:	42a3      	cmp	r3, r4
 800f702:	6025      	str	r5, [r4, #0]
 800f704:	bf18      	it	ne
 800f706:	6059      	strne	r1, [r3, #4]
 800f708:	6863      	ldr	r3, [r4, #4]
 800f70a:	bf08      	it	eq
 800f70c:	f8c8 1000 	streq.w	r1, [r8]
 800f710:	5162      	str	r2, [r4, r5]
 800f712:	604b      	str	r3, [r1, #4]
 800f714:	4638      	mov	r0, r7
 800f716:	f104 060b 	add.w	r6, r4, #11
 800f71a:	f000 f829 	bl	800f770 <__malloc_unlock>
 800f71e:	f026 0607 	bic.w	r6, r6, #7
 800f722:	1d23      	adds	r3, r4, #4
 800f724:	1af2      	subs	r2, r6, r3
 800f726:	d0ae      	beq.n	800f686 <_malloc_r+0x22>
 800f728:	1b9b      	subs	r3, r3, r6
 800f72a:	50a3      	str	r3, [r4, r2]
 800f72c:	e7ab      	b.n	800f686 <_malloc_r+0x22>
 800f72e:	42a3      	cmp	r3, r4
 800f730:	6862      	ldr	r2, [r4, #4]
 800f732:	d1dd      	bne.n	800f6f0 <_malloc_r+0x8c>
 800f734:	f8c8 2000 	str.w	r2, [r8]
 800f738:	e7ec      	b.n	800f714 <_malloc_r+0xb0>
 800f73a:	4623      	mov	r3, r4
 800f73c:	6864      	ldr	r4, [r4, #4]
 800f73e:	e7ac      	b.n	800f69a <_malloc_r+0x36>
 800f740:	4634      	mov	r4, r6
 800f742:	6876      	ldr	r6, [r6, #4]
 800f744:	e7b4      	b.n	800f6b0 <_malloc_r+0x4c>
 800f746:	4613      	mov	r3, r2
 800f748:	e7cc      	b.n	800f6e4 <_malloc_r+0x80>
 800f74a:	230c      	movs	r3, #12
 800f74c:	603b      	str	r3, [r7, #0]
 800f74e:	4638      	mov	r0, r7
 800f750:	f000 f80e 	bl	800f770 <__malloc_unlock>
 800f754:	e797      	b.n	800f686 <_malloc_r+0x22>
 800f756:	6025      	str	r5, [r4, #0]
 800f758:	e7dc      	b.n	800f714 <_malloc_r+0xb0>
 800f75a:	605b      	str	r3, [r3, #4]
 800f75c:	deff      	udf	#255	; 0xff
 800f75e:	bf00      	nop
 800f760:	200047c4 	.word	0x200047c4

0800f764 <__malloc_lock>:
 800f764:	4801      	ldr	r0, [pc, #4]	; (800f76c <__malloc_lock+0x8>)
 800f766:	f7ff bee1 	b.w	800f52c <__retarget_lock_acquire_recursive>
 800f76a:	bf00      	nop
 800f76c:	200047c0 	.word	0x200047c0

0800f770 <__malloc_unlock>:
 800f770:	4801      	ldr	r0, [pc, #4]	; (800f778 <__malloc_unlock+0x8>)
 800f772:	f7ff bedc 	b.w	800f52e <__retarget_lock_release_recursive>
 800f776:	bf00      	nop
 800f778:	200047c0 	.word	0x200047c0

0800f77c <__ssputs_r>:
 800f77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f780:	688e      	ldr	r6, [r1, #8]
 800f782:	461f      	mov	r7, r3
 800f784:	42be      	cmp	r6, r7
 800f786:	680b      	ldr	r3, [r1, #0]
 800f788:	4682      	mov	sl, r0
 800f78a:	460c      	mov	r4, r1
 800f78c:	4690      	mov	r8, r2
 800f78e:	d82c      	bhi.n	800f7ea <__ssputs_r+0x6e>
 800f790:	898a      	ldrh	r2, [r1, #12]
 800f792:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f796:	d026      	beq.n	800f7e6 <__ssputs_r+0x6a>
 800f798:	6965      	ldr	r5, [r4, #20]
 800f79a:	6909      	ldr	r1, [r1, #16]
 800f79c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f7a0:	eba3 0901 	sub.w	r9, r3, r1
 800f7a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f7a8:	1c7b      	adds	r3, r7, #1
 800f7aa:	444b      	add	r3, r9
 800f7ac:	106d      	asrs	r5, r5, #1
 800f7ae:	429d      	cmp	r5, r3
 800f7b0:	bf38      	it	cc
 800f7b2:	461d      	movcc	r5, r3
 800f7b4:	0553      	lsls	r3, r2, #21
 800f7b6:	d527      	bpl.n	800f808 <__ssputs_r+0x8c>
 800f7b8:	4629      	mov	r1, r5
 800f7ba:	f7ff ff53 	bl	800f664 <_malloc_r>
 800f7be:	4606      	mov	r6, r0
 800f7c0:	b360      	cbz	r0, 800f81c <__ssputs_r+0xa0>
 800f7c2:	6921      	ldr	r1, [r4, #16]
 800f7c4:	464a      	mov	r2, r9
 800f7c6:	f000 fbab 	bl	800ff20 <memcpy>
 800f7ca:	89a3      	ldrh	r3, [r4, #12]
 800f7cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f7d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7d4:	81a3      	strh	r3, [r4, #12]
 800f7d6:	6126      	str	r6, [r4, #16]
 800f7d8:	6165      	str	r5, [r4, #20]
 800f7da:	444e      	add	r6, r9
 800f7dc:	eba5 0509 	sub.w	r5, r5, r9
 800f7e0:	6026      	str	r6, [r4, #0]
 800f7e2:	60a5      	str	r5, [r4, #8]
 800f7e4:	463e      	mov	r6, r7
 800f7e6:	42be      	cmp	r6, r7
 800f7e8:	d900      	bls.n	800f7ec <__ssputs_r+0x70>
 800f7ea:	463e      	mov	r6, r7
 800f7ec:	6820      	ldr	r0, [r4, #0]
 800f7ee:	4632      	mov	r2, r6
 800f7f0:	4641      	mov	r1, r8
 800f7f2:	f000 fb6b 	bl	800fecc <memmove>
 800f7f6:	68a3      	ldr	r3, [r4, #8]
 800f7f8:	1b9b      	subs	r3, r3, r6
 800f7fa:	60a3      	str	r3, [r4, #8]
 800f7fc:	6823      	ldr	r3, [r4, #0]
 800f7fe:	4433      	add	r3, r6
 800f800:	6023      	str	r3, [r4, #0]
 800f802:	2000      	movs	r0, #0
 800f804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f808:	462a      	mov	r2, r5
 800f80a:	f000 fb9e 	bl	800ff4a <_realloc_r>
 800f80e:	4606      	mov	r6, r0
 800f810:	2800      	cmp	r0, #0
 800f812:	d1e0      	bne.n	800f7d6 <__ssputs_r+0x5a>
 800f814:	6921      	ldr	r1, [r4, #16]
 800f816:	4650      	mov	r0, sl
 800f818:	f7ff feb0 	bl	800f57c <_free_r>
 800f81c:	230c      	movs	r3, #12
 800f81e:	f8ca 3000 	str.w	r3, [sl]
 800f822:	89a3      	ldrh	r3, [r4, #12]
 800f824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f828:	81a3      	strh	r3, [r4, #12]
 800f82a:	f04f 30ff 	mov.w	r0, #4294967295
 800f82e:	e7e9      	b.n	800f804 <__ssputs_r+0x88>

0800f830 <_svfiprintf_r>:
 800f830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f834:	4698      	mov	r8, r3
 800f836:	898b      	ldrh	r3, [r1, #12]
 800f838:	061b      	lsls	r3, r3, #24
 800f83a:	b09d      	sub	sp, #116	; 0x74
 800f83c:	4607      	mov	r7, r0
 800f83e:	460d      	mov	r5, r1
 800f840:	4614      	mov	r4, r2
 800f842:	d50e      	bpl.n	800f862 <_svfiprintf_r+0x32>
 800f844:	690b      	ldr	r3, [r1, #16]
 800f846:	b963      	cbnz	r3, 800f862 <_svfiprintf_r+0x32>
 800f848:	2140      	movs	r1, #64	; 0x40
 800f84a:	f7ff ff0b 	bl	800f664 <_malloc_r>
 800f84e:	6028      	str	r0, [r5, #0]
 800f850:	6128      	str	r0, [r5, #16]
 800f852:	b920      	cbnz	r0, 800f85e <_svfiprintf_r+0x2e>
 800f854:	230c      	movs	r3, #12
 800f856:	603b      	str	r3, [r7, #0]
 800f858:	f04f 30ff 	mov.w	r0, #4294967295
 800f85c:	e0d0      	b.n	800fa00 <_svfiprintf_r+0x1d0>
 800f85e:	2340      	movs	r3, #64	; 0x40
 800f860:	616b      	str	r3, [r5, #20]
 800f862:	2300      	movs	r3, #0
 800f864:	9309      	str	r3, [sp, #36]	; 0x24
 800f866:	2320      	movs	r3, #32
 800f868:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f86c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f870:	2330      	movs	r3, #48	; 0x30
 800f872:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fa18 <_svfiprintf_r+0x1e8>
 800f876:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f87a:	f04f 0901 	mov.w	r9, #1
 800f87e:	4623      	mov	r3, r4
 800f880:	469a      	mov	sl, r3
 800f882:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f886:	b10a      	cbz	r2, 800f88c <_svfiprintf_r+0x5c>
 800f888:	2a25      	cmp	r2, #37	; 0x25
 800f88a:	d1f9      	bne.n	800f880 <_svfiprintf_r+0x50>
 800f88c:	ebba 0b04 	subs.w	fp, sl, r4
 800f890:	d00b      	beq.n	800f8aa <_svfiprintf_r+0x7a>
 800f892:	465b      	mov	r3, fp
 800f894:	4622      	mov	r2, r4
 800f896:	4629      	mov	r1, r5
 800f898:	4638      	mov	r0, r7
 800f89a:	f7ff ff6f 	bl	800f77c <__ssputs_r>
 800f89e:	3001      	adds	r0, #1
 800f8a0:	f000 80a9 	beq.w	800f9f6 <_svfiprintf_r+0x1c6>
 800f8a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8a6:	445a      	add	r2, fp
 800f8a8:	9209      	str	r2, [sp, #36]	; 0x24
 800f8aa:	f89a 3000 	ldrb.w	r3, [sl]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	f000 80a1 	beq.w	800f9f6 <_svfiprintf_r+0x1c6>
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8be:	f10a 0a01 	add.w	sl, sl, #1
 800f8c2:	9304      	str	r3, [sp, #16]
 800f8c4:	9307      	str	r3, [sp, #28]
 800f8c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f8ca:	931a      	str	r3, [sp, #104]	; 0x68
 800f8cc:	4654      	mov	r4, sl
 800f8ce:	2205      	movs	r2, #5
 800f8d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8d4:	4850      	ldr	r0, [pc, #320]	; (800fa18 <_svfiprintf_r+0x1e8>)
 800f8d6:	f7f0 fc9b 	bl	8000210 <memchr>
 800f8da:	9a04      	ldr	r2, [sp, #16]
 800f8dc:	b9d8      	cbnz	r0, 800f916 <_svfiprintf_r+0xe6>
 800f8de:	06d0      	lsls	r0, r2, #27
 800f8e0:	bf44      	itt	mi
 800f8e2:	2320      	movmi	r3, #32
 800f8e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8e8:	0711      	lsls	r1, r2, #28
 800f8ea:	bf44      	itt	mi
 800f8ec:	232b      	movmi	r3, #43	; 0x2b
 800f8ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8f2:	f89a 3000 	ldrb.w	r3, [sl]
 800f8f6:	2b2a      	cmp	r3, #42	; 0x2a
 800f8f8:	d015      	beq.n	800f926 <_svfiprintf_r+0xf6>
 800f8fa:	9a07      	ldr	r2, [sp, #28]
 800f8fc:	4654      	mov	r4, sl
 800f8fe:	2000      	movs	r0, #0
 800f900:	f04f 0c0a 	mov.w	ip, #10
 800f904:	4621      	mov	r1, r4
 800f906:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f90a:	3b30      	subs	r3, #48	; 0x30
 800f90c:	2b09      	cmp	r3, #9
 800f90e:	d94d      	bls.n	800f9ac <_svfiprintf_r+0x17c>
 800f910:	b1b0      	cbz	r0, 800f940 <_svfiprintf_r+0x110>
 800f912:	9207      	str	r2, [sp, #28]
 800f914:	e014      	b.n	800f940 <_svfiprintf_r+0x110>
 800f916:	eba0 0308 	sub.w	r3, r0, r8
 800f91a:	fa09 f303 	lsl.w	r3, r9, r3
 800f91e:	4313      	orrs	r3, r2
 800f920:	9304      	str	r3, [sp, #16]
 800f922:	46a2      	mov	sl, r4
 800f924:	e7d2      	b.n	800f8cc <_svfiprintf_r+0x9c>
 800f926:	9b03      	ldr	r3, [sp, #12]
 800f928:	1d19      	adds	r1, r3, #4
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	9103      	str	r1, [sp, #12]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	bfbb      	ittet	lt
 800f932:	425b      	neglt	r3, r3
 800f934:	f042 0202 	orrlt.w	r2, r2, #2
 800f938:	9307      	strge	r3, [sp, #28]
 800f93a:	9307      	strlt	r3, [sp, #28]
 800f93c:	bfb8      	it	lt
 800f93e:	9204      	strlt	r2, [sp, #16]
 800f940:	7823      	ldrb	r3, [r4, #0]
 800f942:	2b2e      	cmp	r3, #46	; 0x2e
 800f944:	d10c      	bne.n	800f960 <_svfiprintf_r+0x130>
 800f946:	7863      	ldrb	r3, [r4, #1]
 800f948:	2b2a      	cmp	r3, #42	; 0x2a
 800f94a:	d134      	bne.n	800f9b6 <_svfiprintf_r+0x186>
 800f94c:	9b03      	ldr	r3, [sp, #12]
 800f94e:	1d1a      	adds	r2, r3, #4
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	9203      	str	r2, [sp, #12]
 800f954:	2b00      	cmp	r3, #0
 800f956:	bfb8      	it	lt
 800f958:	f04f 33ff 	movlt.w	r3, #4294967295
 800f95c:	3402      	adds	r4, #2
 800f95e:	9305      	str	r3, [sp, #20]
 800f960:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fa28 <_svfiprintf_r+0x1f8>
 800f964:	7821      	ldrb	r1, [r4, #0]
 800f966:	2203      	movs	r2, #3
 800f968:	4650      	mov	r0, sl
 800f96a:	f7f0 fc51 	bl	8000210 <memchr>
 800f96e:	b138      	cbz	r0, 800f980 <_svfiprintf_r+0x150>
 800f970:	9b04      	ldr	r3, [sp, #16]
 800f972:	eba0 000a 	sub.w	r0, r0, sl
 800f976:	2240      	movs	r2, #64	; 0x40
 800f978:	4082      	lsls	r2, r0
 800f97a:	4313      	orrs	r3, r2
 800f97c:	3401      	adds	r4, #1
 800f97e:	9304      	str	r3, [sp, #16]
 800f980:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f984:	4825      	ldr	r0, [pc, #148]	; (800fa1c <_svfiprintf_r+0x1ec>)
 800f986:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f98a:	2206      	movs	r2, #6
 800f98c:	f7f0 fc40 	bl	8000210 <memchr>
 800f990:	2800      	cmp	r0, #0
 800f992:	d038      	beq.n	800fa06 <_svfiprintf_r+0x1d6>
 800f994:	4b22      	ldr	r3, [pc, #136]	; (800fa20 <_svfiprintf_r+0x1f0>)
 800f996:	bb1b      	cbnz	r3, 800f9e0 <_svfiprintf_r+0x1b0>
 800f998:	9b03      	ldr	r3, [sp, #12]
 800f99a:	3307      	adds	r3, #7
 800f99c:	f023 0307 	bic.w	r3, r3, #7
 800f9a0:	3308      	adds	r3, #8
 800f9a2:	9303      	str	r3, [sp, #12]
 800f9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9a6:	4433      	add	r3, r6
 800f9a8:	9309      	str	r3, [sp, #36]	; 0x24
 800f9aa:	e768      	b.n	800f87e <_svfiprintf_r+0x4e>
 800f9ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9b0:	460c      	mov	r4, r1
 800f9b2:	2001      	movs	r0, #1
 800f9b4:	e7a6      	b.n	800f904 <_svfiprintf_r+0xd4>
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	3401      	adds	r4, #1
 800f9ba:	9305      	str	r3, [sp, #20]
 800f9bc:	4619      	mov	r1, r3
 800f9be:	f04f 0c0a 	mov.w	ip, #10
 800f9c2:	4620      	mov	r0, r4
 800f9c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9c8:	3a30      	subs	r2, #48	; 0x30
 800f9ca:	2a09      	cmp	r2, #9
 800f9cc:	d903      	bls.n	800f9d6 <_svfiprintf_r+0x1a6>
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d0c6      	beq.n	800f960 <_svfiprintf_r+0x130>
 800f9d2:	9105      	str	r1, [sp, #20]
 800f9d4:	e7c4      	b.n	800f960 <_svfiprintf_r+0x130>
 800f9d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9da:	4604      	mov	r4, r0
 800f9dc:	2301      	movs	r3, #1
 800f9de:	e7f0      	b.n	800f9c2 <_svfiprintf_r+0x192>
 800f9e0:	ab03      	add	r3, sp, #12
 800f9e2:	9300      	str	r3, [sp, #0]
 800f9e4:	462a      	mov	r2, r5
 800f9e6:	4b0f      	ldr	r3, [pc, #60]	; (800fa24 <_svfiprintf_r+0x1f4>)
 800f9e8:	a904      	add	r1, sp, #16
 800f9ea:	4638      	mov	r0, r7
 800f9ec:	f3af 8000 	nop.w
 800f9f0:	1c42      	adds	r2, r0, #1
 800f9f2:	4606      	mov	r6, r0
 800f9f4:	d1d6      	bne.n	800f9a4 <_svfiprintf_r+0x174>
 800f9f6:	89ab      	ldrh	r3, [r5, #12]
 800f9f8:	065b      	lsls	r3, r3, #25
 800f9fa:	f53f af2d 	bmi.w	800f858 <_svfiprintf_r+0x28>
 800f9fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa00:	b01d      	add	sp, #116	; 0x74
 800fa02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa06:	ab03      	add	r3, sp, #12
 800fa08:	9300      	str	r3, [sp, #0]
 800fa0a:	462a      	mov	r2, r5
 800fa0c:	4b05      	ldr	r3, [pc, #20]	; (800fa24 <_svfiprintf_r+0x1f4>)
 800fa0e:	a904      	add	r1, sp, #16
 800fa10:	4638      	mov	r0, r7
 800fa12:	f000 f879 	bl	800fb08 <_printf_i>
 800fa16:	e7eb      	b.n	800f9f0 <_svfiprintf_r+0x1c0>
 800fa18:	08010e46 	.word	0x08010e46
 800fa1c:	08010e50 	.word	0x08010e50
 800fa20:	00000000 	.word	0x00000000
 800fa24:	0800f77d 	.word	0x0800f77d
 800fa28:	08010e4c 	.word	0x08010e4c

0800fa2c <_printf_common>:
 800fa2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa30:	4616      	mov	r6, r2
 800fa32:	4699      	mov	r9, r3
 800fa34:	688a      	ldr	r2, [r1, #8]
 800fa36:	690b      	ldr	r3, [r1, #16]
 800fa38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	bfb8      	it	lt
 800fa40:	4613      	movlt	r3, r2
 800fa42:	6033      	str	r3, [r6, #0]
 800fa44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa48:	4607      	mov	r7, r0
 800fa4a:	460c      	mov	r4, r1
 800fa4c:	b10a      	cbz	r2, 800fa52 <_printf_common+0x26>
 800fa4e:	3301      	adds	r3, #1
 800fa50:	6033      	str	r3, [r6, #0]
 800fa52:	6823      	ldr	r3, [r4, #0]
 800fa54:	0699      	lsls	r1, r3, #26
 800fa56:	bf42      	ittt	mi
 800fa58:	6833      	ldrmi	r3, [r6, #0]
 800fa5a:	3302      	addmi	r3, #2
 800fa5c:	6033      	strmi	r3, [r6, #0]
 800fa5e:	6825      	ldr	r5, [r4, #0]
 800fa60:	f015 0506 	ands.w	r5, r5, #6
 800fa64:	d106      	bne.n	800fa74 <_printf_common+0x48>
 800fa66:	f104 0a19 	add.w	sl, r4, #25
 800fa6a:	68e3      	ldr	r3, [r4, #12]
 800fa6c:	6832      	ldr	r2, [r6, #0]
 800fa6e:	1a9b      	subs	r3, r3, r2
 800fa70:	42ab      	cmp	r3, r5
 800fa72:	dc26      	bgt.n	800fac2 <_printf_common+0x96>
 800fa74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fa78:	1e13      	subs	r3, r2, #0
 800fa7a:	6822      	ldr	r2, [r4, #0]
 800fa7c:	bf18      	it	ne
 800fa7e:	2301      	movne	r3, #1
 800fa80:	0692      	lsls	r2, r2, #26
 800fa82:	d42b      	bmi.n	800fadc <_printf_common+0xb0>
 800fa84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa88:	4649      	mov	r1, r9
 800fa8a:	4638      	mov	r0, r7
 800fa8c:	47c0      	blx	r8
 800fa8e:	3001      	adds	r0, #1
 800fa90:	d01e      	beq.n	800fad0 <_printf_common+0xa4>
 800fa92:	6823      	ldr	r3, [r4, #0]
 800fa94:	6922      	ldr	r2, [r4, #16]
 800fa96:	f003 0306 	and.w	r3, r3, #6
 800fa9a:	2b04      	cmp	r3, #4
 800fa9c:	bf02      	ittt	eq
 800fa9e:	68e5      	ldreq	r5, [r4, #12]
 800faa0:	6833      	ldreq	r3, [r6, #0]
 800faa2:	1aed      	subeq	r5, r5, r3
 800faa4:	68a3      	ldr	r3, [r4, #8]
 800faa6:	bf0c      	ite	eq
 800faa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800faac:	2500      	movne	r5, #0
 800faae:	4293      	cmp	r3, r2
 800fab0:	bfc4      	itt	gt
 800fab2:	1a9b      	subgt	r3, r3, r2
 800fab4:	18ed      	addgt	r5, r5, r3
 800fab6:	2600      	movs	r6, #0
 800fab8:	341a      	adds	r4, #26
 800faba:	42b5      	cmp	r5, r6
 800fabc:	d11a      	bne.n	800faf4 <_printf_common+0xc8>
 800fabe:	2000      	movs	r0, #0
 800fac0:	e008      	b.n	800fad4 <_printf_common+0xa8>
 800fac2:	2301      	movs	r3, #1
 800fac4:	4652      	mov	r2, sl
 800fac6:	4649      	mov	r1, r9
 800fac8:	4638      	mov	r0, r7
 800faca:	47c0      	blx	r8
 800facc:	3001      	adds	r0, #1
 800face:	d103      	bne.n	800fad8 <_printf_common+0xac>
 800fad0:	f04f 30ff 	mov.w	r0, #4294967295
 800fad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fad8:	3501      	adds	r5, #1
 800fada:	e7c6      	b.n	800fa6a <_printf_common+0x3e>
 800fadc:	18e1      	adds	r1, r4, r3
 800fade:	1c5a      	adds	r2, r3, #1
 800fae0:	2030      	movs	r0, #48	; 0x30
 800fae2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fae6:	4422      	add	r2, r4
 800fae8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800faec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800faf0:	3302      	adds	r3, #2
 800faf2:	e7c7      	b.n	800fa84 <_printf_common+0x58>
 800faf4:	2301      	movs	r3, #1
 800faf6:	4622      	mov	r2, r4
 800faf8:	4649      	mov	r1, r9
 800fafa:	4638      	mov	r0, r7
 800fafc:	47c0      	blx	r8
 800fafe:	3001      	adds	r0, #1
 800fb00:	d0e6      	beq.n	800fad0 <_printf_common+0xa4>
 800fb02:	3601      	adds	r6, #1
 800fb04:	e7d9      	b.n	800faba <_printf_common+0x8e>
	...

0800fb08 <_printf_i>:
 800fb08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb0c:	7e0f      	ldrb	r7, [r1, #24]
 800fb0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fb10:	2f78      	cmp	r7, #120	; 0x78
 800fb12:	4691      	mov	r9, r2
 800fb14:	4680      	mov	r8, r0
 800fb16:	460c      	mov	r4, r1
 800fb18:	469a      	mov	sl, r3
 800fb1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fb1e:	d807      	bhi.n	800fb30 <_printf_i+0x28>
 800fb20:	2f62      	cmp	r7, #98	; 0x62
 800fb22:	d80a      	bhi.n	800fb3a <_printf_i+0x32>
 800fb24:	2f00      	cmp	r7, #0
 800fb26:	f000 80d4 	beq.w	800fcd2 <_printf_i+0x1ca>
 800fb2a:	2f58      	cmp	r7, #88	; 0x58
 800fb2c:	f000 80c0 	beq.w	800fcb0 <_printf_i+0x1a8>
 800fb30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fb38:	e03a      	b.n	800fbb0 <_printf_i+0xa8>
 800fb3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fb3e:	2b15      	cmp	r3, #21
 800fb40:	d8f6      	bhi.n	800fb30 <_printf_i+0x28>
 800fb42:	a101      	add	r1, pc, #4	; (adr r1, 800fb48 <_printf_i+0x40>)
 800fb44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb48:	0800fba1 	.word	0x0800fba1
 800fb4c:	0800fbb5 	.word	0x0800fbb5
 800fb50:	0800fb31 	.word	0x0800fb31
 800fb54:	0800fb31 	.word	0x0800fb31
 800fb58:	0800fb31 	.word	0x0800fb31
 800fb5c:	0800fb31 	.word	0x0800fb31
 800fb60:	0800fbb5 	.word	0x0800fbb5
 800fb64:	0800fb31 	.word	0x0800fb31
 800fb68:	0800fb31 	.word	0x0800fb31
 800fb6c:	0800fb31 	.word	0x0800fb31
 800fb70:	0800fb31 	.word	0x0800fb31
 800fb74:	0800fcb9 	.word	0x0800fcb9
 800fb78:	0800fbe1 	.word	0x0800fbe1
 800fb7c:	0800fc73 	.word	0x0800fc73
 800fb80:	0800fb31 	.word	0x0800fb31
 800fb84:	0800fb31 	.word	0x0800fb31
 800fb88:	0800fcdb 	.word	0x0800fcdb
 800fb8c:	0800fb31 	.word	0x0800fb31
 800fb90:	0800fbe1 	.word	0x0800fbe1
 800fb94:	0800fb31 	.word	0x0800fb31
 800fb98:	0800fb31 	.word	0x0800fb31
 800fb9c:	0800fc7b 	.word	0x0800fc7b
 800fba0:	682b      	ldr	r3, [r5, #0]
 800fba2:	1d1a      	adds	r2, r3, #4
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	602a      	str	r2, [r5, #0]
 800fba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fbac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	e09f      	b.n	800fcf4 <_printf_i+0x1ec>
 800fbb4:	6820      	ldr	r0, [r4, #0]
 800fbb6:	682b      	ldr	r3, [r5, #0]
 800fbb8:	0607      	lsls	r7, r0, #24
 800fbba:	f103 0104 	add.w	r1, r3, #4
 800fbbe:	6029      	str	r1, [r5, #0]
 800fbc0:	d501      	bpl.n	800fbc6 <_printf_i+0xbe>
 800fbc2:	681e      	ldr	r6, [r3, #0]
 800fbc4:	e003      	b.n	800fbce <_printf_i+0xc6>
 800fbc6:	0646      	lsls	r6, r0, #25
 800fbc8:	d5fb      	bpl.n	800fbc2 <_printf_i+0xba>
 800fbca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fbce:	2e00      	cmp	r6, #0
 800fbd0:	da03      	bge.n	800fbda <_printf_i+0xd2>
 800fbd2:	232d      	movs	r3, #45	; 0x2d
 800fbd4:	4276      	negs	r6, r6
 800fbd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbda:	485a      	ldr	r0, [pc, #360]	; (800fd44 <_printf_i+0x23c>)
 800fbdc:	230a      	movs	r3, #10
 800fbde:	e012      	b.n	800fc06 <_printf_i+0xfe>
 800fbe0:	682b      	ldr	r3, [r5, #0]
 800fbe2:	6820      	ldr	r0, [r4, #0]
 800fbe4:	1d19      	adds	r1, r3, #4
 800fbe6:	6029      	str	r1, [r5, #0]
 800fbe8:	0605      	lsls	r5, r0, #24
 800fbea:	d501      	bpl.n	800fbf0 <_printf_i+0xe8>
 800fbec:	681e      	ldr	r6, [r3, #0]
 800fbee:	e002      	b.n	800fbf6 <_printf_i+0xee>
 800fbf0:	0641      	lsls	r1, r0, #25
 800fbf2:	d5fb      	bpl.n	800fbec <_printf_i+0xe4>
 800fbf4:	881e      	ldrh	r6, [r3, #0]
 800fbf6:	4853      	ldr	r0, [pc, #332]	; (800fd44 <_printf_i+0x23c>)
 800fbf8:	2f6f      	cmp	r7, #111	; 0x6f
 800fbfa:	bf0c      	ite	eq
 800fbfc:	2308      	moveq	r3, #8
 800fbfe:	230a      	movne	r3, #10
 800fc00:	2100      	movs	r1, #0
 800fc02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fc06:	6865      	ldr	r5, [r4, #4]
 800fc08:	60a5      	str	r5, [r4, #8]
 800fc0a:	2d00      	cmp	r5, #0
 800fc0c:	bfa2      	ittt	ge
 800fc0e:	6821      	ldrge	r1, [r4, #0]
 800fc10:	f021 0104 	bicge.w	r1, r1, #4
 800fc14:	6021      	strge	r1, [r4, #0]
 800fc16:	b90e      	cbnz	r6, 800fc1c <_printf_i+0x114>
 800fc18:	2d00      	cmp	r5, #0
 800fc1a:	d04b      	beq.n	800fcb4 <_printf_i+0x1ac>
 800fc1c:	4615      	mov	r5, r2
 800fc1e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fc22:	fb03 6711 	mls	r7, r3, r1, r6
 800fc26:	5dc7      	ldrb	r7, [r0, r7]
 800fc28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fc2c:	4637      	mov	r7, r6
 800fc2e:	42bb      	cmp	r3, r7
 800fc30:	460e      	mov	r6, r1
 800fc32:	d9f4      	bls.n	800fc1e <_printf_i+0x116>
 800fc34:	2b08      	cmp	r3, #8
 800fc36:	d10b      	bne.n	800fc50 <_printf_i+0x148>
 800fc38:	6823      	ldr	r3, [r4, #0]
 800fc3a:	07de      	lsls	r6, r3, #31
 800fc3c:	d508      	bpl.n	800fc50 <_printf_i+0x148>
 800fc3e:	6923      	ldr	r3, [r4, #16]
 800fc40:	6861      	ldr	r1, [r4, #4]
 800fc42:	4299      	cmp	r1, r3
 800fc44:	bfde      	ittt	le
 800fc46:	2330      	movle	r3, #48	; 0x30
 800fc48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fc4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fc50:	1b52      	subs	r2, r2, r5
 800fc52:	6122      	str	r2, [r4, #16]
 800fc54:	f8cd a000 	str.w	sl, [sp]
 800fc58:	464b      	mov	r3, r9
 800fc5a:	aa03      	add	r2, sp, #12
 800fc5c:	4621      	mov	r1, r4
 800fc5e:	4640      	mov	r0, r8
 800fc60:	f7ff fee4 	bl	800fa2c <_printf_common>
 800fc64:	3001      	adds	r0, #1
 800fc66:	d14a      	bne.n	800fcfe <_printf_i+0x1f6>
 800fc68:	f04f 30ff 	mov.w	r0, #4294967295
 800fc6c:	b004      	add	sp, #16
 800fc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc72:	6823      	ldr	r3, [r4, #0]
 800fc74:	f043 0320 	orr.w	r3, r3, #32
 800fc78:	6023      	str	r3, [r4, #0]
 800fc7a:	4833      	ldr	r0, [pc, #204]	; (800fd48 <_printf_i+0x240>)
 800fc7c:	2778      	movs	r7, #120	; 0x78
 800fc7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fc82:	6823      	ldr	r3, [r4, #0]
 800fc84:	6829      	ldr	r1, [r5, #0]
 800fc86:	061f      	lsls	r7, r3, #24
 800fc88:	f851 6b04 	ldr.w	r6, [r1], #4
 800fc8c:	d402      	bmi.n	800fc94 <_printf_i+0x18c>
 800fc8e:	065f      	lsls	r7, r3, #25
 800fc90:	bf48      	it	mi
 800fc92:	b2b6      	uxthmi	r6, r6
 800fc94:	07df      	lsls	r7, r3, #31
 800fc96:	bf48      	it	mi
 800fc98:	f043 0320 	orrmi.w	r3, r3, #32
 800fc9c:	6029      	str	r1, [r5, #0]
 800fc9e:	bf48      	it	mi
 800fca0:	6023      	strmi	r3, [r4, #0]
 800fca2:	b91e      	cbnz	r6, 800fcac <_printf_i+0x1a4>
 800fca4:	6823      	ldr	r3, [r4, #0]
 800fca6:	f023 0320 	bic.w	r3, r3, #32
 800fcaa:	6023      	str	r3, [r4, #0]
 800fcac:	2310      	movs	r3, #16
 800fcae:	e7a7      	b.n	800fc00 <_printf_i+0xf8>
 800fcb0:	4824      	ldr	r0, [pc, #144]	; (800fd44 <_printf_i+0x23c>)
 800fcb2:	e7e4      	b.n	800fc7e <_printf_i+0x176>
 800fcb4:	4615      	mov	r5, r2
 800fcb6:	e7bd      	b.n	800fc34 <_printf_i+0x12c>
 800fcb8:	682b      	ldr	r3, [r5, #0]
 800fcba:	6826      	ldr	r6, [r4, #0]
 800fcbc:	6961      	ldr	r1, [r4, #20]
 800fcbe:	1d18      	adds	r0, r3, #4
 800fcc0:	6028      	str	r0, [r5, #0]
 800fcc2:	0635      	lsls	r5, r6, #24
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	d501      	bpl.n	800fccc <_printf_i+0x1c4>
 800fcc8:	6019      	str	r1, [r3, #0]
 800fcca:	e002      	b.n	800fcd2 <_printf_i+0x1ca>
 800fccc:	0670      	lsls	r0, r6, #25
 800fcce:	d5fb      	bpl.n	800fcc8 <_printf_i+0x1c0>
 800fcd0:	8019      	strh	r1, [r3, #0]
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	6123      	str	r3, [r4, #16]
 800fcd6:	4615      	mov	r5, r2
 800fcd8:	e7bc      	b.n	800fc54 <_printf_i+0x14c>
 800fcda:	682b      	ldr	r3, [r5, #0]
 800fcdc:	1d1a      	adds	r2, r3, #4
 800fcde:	602a      	str	r2, [r5, #0]
 800fce0:	681d      	ldr	r5, [r3, #0]
 800fce2:	6862      	ldr	r2, [r4, #4]
 800fce4:	2100      	movs	r1, #0
 800fce6:	4628      	mov	r0, r5
 800fce8:	f7f0 fa92 	bl	8000210 <memchr>
 800fcec:	b108      	cbz	r0, 800fcf2 <_printf_i+0x1ea>
 800fcee:	1b40      	subs	r0, r0, r5
 800fcf0:	6060      	str	r0, [r4, #4]
 800fcf2:	6863      	ldr	r3, [r4, #4]
 800fcf4:	6123      	str	r3, [r4, #16]
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcfc:	e7aa      	b.n	800fc54 <_printf_i+0x14c>
 800fcfe:	6923      	ldr	r3, [r4, #16]
 800fd00:	462a      	mov	r2, r5
 800fd02:	4649      	mov	r1, r9
 800fd04:	4640      	mov	r0, r8
 800fd06:	47d0      	blx	sl
 800fd08:	3001      	adds	r0, #1
 800fd0a:	d0ad      	beq.n	800fc68 <_printf_i+0x160>
 800fd0c:	6823      	ldr	r3, [r4, #0]
 800fd0e:	079b      	lsls	r3, r3, #30
 800fd10:	d413      	bmi.n	800fd3a <_printf_i+0x232>
 800fd12:	68e0      	ldr	r0, [r4, #12]
 800fd14:	9b03      	ldr	r3, [sp, #12]
 800fd16:	4298      	cmp	r0, r3
 800fd18:	bfb8      	it	lt
 800fd1a:	4618      	movlt	r0, r3
 800fd1c:	e7a6      	b.n	800fc6c <_printf_i+0x164>
 800fd1e:	2301      	movs	r3, #1
 800fd20:	4632      	mov	r2, r6
 800fd22:	4649      	mov	r1, r9
 800fd24:	4640      	mov	r0, r8
 800fd26:	47d0      	blx	sl
 800fd28:	3001      	adds	r0, #1
 800fd2a:	d09d      	beq.n	800fc68 <_printf_i+0x160>
 800fd2c:	3501      	adds	r5, #1
 800fd2e:	68e3      	ldr	r3, [r4, #12]
 800fd30:	9903      	ldr	r1, [sp, #12]
 800fd32:	1a5b      	subs	r3, r3, r1
 800fd34:	42ab      	cmp	r3, r5
 800fd36:	dcf2      	bgt.n	800fd1e <_printf_i+0x216>
 800fd38:	e7eb      	b.n	800fd12 <_printf_i+0x20a>
 800fd3a:	2500      	movs	r5, #0
 800fd3c:	f104 0619 	add.w	r6, r4, #25
 800fd40:	e7f5      	b.n	800fd2e <_printf_i+0x226>
 800fd42:	bf00      	nop
 800fd44:	08010e57 	.word	0x08010e57
 800fd48:	08010e68 	.word	0x08010e68

0800fd4c <__sflush_r>:
 800fd4c:	898a      	ldrh	r2, [r1, #12]
 800fd4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd52:	4605      	mov	r5, r0
 800fd54:	0710      	lsls	r0, r2, #28
 800fd56:	460c      	mov	r4, r1
 800fd58:	d458      	bmi.n	800fe0c <__sflush_r+0xc0>
 800fd5a:	684b      	ldr	r3, [r1, #4]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	dc05      	bgt.n	800fd6c <__sflush_r+0x20>
 800fd60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	dc02      	bgt.n	800fd6c <__sflush_r+0x20>
 800fd66:	2000      	movs	r0, #0
 800fd68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd6e:	2e00      	cmp	r6, #0
 800fd70:	d0f9      	beq.n	800fd66 <__sflush_r+0x1a>
 800fd72:	2300      	movs	r3, #0
 800fd74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fd78:	682f      	ldr	r7, [r5, #0]
 800fd7a:	6a21      	ldr	r1, [r4, #32]
 800fd7c:	602b      	str	r3, [r5, #0]
 800fd7e:	d032      	beq.n	800fde6 <__sflush_r+0x9a>
 800fd80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fd82:	89a3      	ldrh	r3, [r4, #12]
 800fd84:	075a      	lsls	r2, r3, #29
 800fd86:	d505      	bpl.n	800fd94 <__sflush_r+0x48>
 800fd88:	6863      	ldr	r3, [r4, #4]
 800fd8a:	1ac0      	subs	r0, r0, r3
 800fd8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd8e:	b10b      	cbz	r3, 800fd94 <__sflush_r+0x48>
 800fd90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd92:	1ac0      	subs	r0, r0, r3
 800fd94:	2300      	movs	r3, #0
 800fd96:	4602      	mov	r2, r0
 800fd98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd9a:	6a21      	ldr	r1, [r4, #32]
 800fd9c:	4628      	mov	r0, r5
 800fd9e:	47b0      	blx	r6
 800fda0:	1c43      	adds	r3, r0, #1
 800fda2:	89a3      	ldrh	r3, [r4, #12]
 800fda4:	d106      	bne.n	800fdb4 <__sflush_r+0x68>
 800fda6:	6829      	ldr	r1, [r5, #0]
 800fda8:	291d      	cmp	r1, #29
 800fdaa:	d82b      	bhi.n	800fe04 <__sflush_r+0xb8>
 800fdac:	4a29      	ldr	r2, [pc, #164]	; (800fe54 <__sflush_r+0x108>)
 800fdae:	410a      	asrs	r2, r1
 800fdb0:	07d6      	lsls	r6, r2, #31
 800fdb2:	d427      	bmi.n	800fe04 <__sflush_r+0xb8>
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	6062      	str	r2, [r4, #4]
 800fdb8:	04d9      	lsls	r1, r3, #19
 800fdba:	6922      	ldr	r2, [r4, #16]
 800fdbc:	6022      	str	r2, [r4, #0]
 800fdbe:	d504      	bpl.n	800fdca <__sflush_r+0x7e>
 800fdc0:	1c42      	adds	r2, r0, #1
 800fdc2:	d101      	bne.n	800fdc8 <__sflush_r+0x7c>
 800fdc4:	682b      	ldr	r3, [r5, #0]
 800fdc6:	b903      	cbnz	r3, 800fdca <__sflush_r+0x7e>
 800fdc8:	6560      	str	r0, [r4, #84]	; 0x54
 800fdca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fdcc:	602f      	str	r7, [r5, #0]
 800fdce:	2900      	cmp	r1, #0
 800fdd0:	d0c9      	beq.n	800fd66 <__sflush_r+0x1a>
 800fdd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fdd6:	4299      	cmp	r1, r3
 800fdd8:	d002      	beq.n	800fde0 <__sflush_r+0x94>
 800fdda:	4628      	mov	r0, r5
 800fddc:	f7ff fbce 	bl	800f57c <_free_r>
 800fde0:	2000      	movs	r0, #0
 800fde2:	6360      	str	r0, [r4, #52]	; 0x34
 800fde4:	e7c0      	b.n	800fd68 <__sflush_r+0x1c>
 800fde6:	2301      	movs	r3, #1
 800fde8:	4628      	mov	r0, r5
 800fdea:	47b0      	blx	r6
 800fdec:	1c41      	adds	r1, r0, #1
 800fdee:	d1c8      	bne.n	800fd82 <__sflush_r+0x36>
 800fdf0:	682b      	ldr	r3, [r5, #0]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d0c5      	beq.n	800fd82 <__sflush_r+0x36>
 800fdf6:	2b1d      	cmp	r3, #29
 800fdf8:	d001      	beq.n	800fdfe <__sflush_r+0xb2>
 800fdfa:	2b16      	cmp	r3, #22
 800fdfc:	d101      	bne.n	800fe02 <__sflush_r+0xb6>
 800fdfe:	602f      	str	r7, [r5, #0]
 800fe00:	e7b1      	b.n	800fd66 <__sflush_r+0x1a>
 800fe02:	89a3      	ldrh	r3, [r4, #12]
 800fe04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe08:	81a3      	strh	r3, [r4, #12]
 800fe0a:	e7ad      	b.n	800fd68 <__sflush_r+0x1c>
 800fe0c:	690f      	ldr	r7, [r1, #16]
 800fe0e:	2f00      	cmp	r7, #0
 800fe10:	d0a9      	beq.n	800fd66 <__sflush_r+0x1a>
 800fe12:	0793      	lsls	r3, r2, #30
 800fe14:	680e      	ldr	r6, [r1, #0]
 800fe16:	bf08      	it	eq
 800fe18:	694b      	ldreq	r3, [r1, #20]
 800fe1a:	600f      	str	r7, [r1, #0]
 800fe1c:	bf18      	it	ne
 800fe1e:	2300      	movne	r3, #0
 800fe20:	eba6 0807 	sub.w	r8, r6, r7
 800fe24:	608b      	str	r3, [r1, #8]
 800fe26:	f1b8 0f00 	cmp.w	r8, #0
 800fe2a:	dd9c      	ble.n	800fd66 <__sflush_r+0x1a>
 800fe2c:	6a21      	ldr	r1, [r4, #32]
 800fe2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe30:	4643      	mov	r3, r8
 800fe32:	463a      	mov	r2, r7
 800fe34:	4628      	mov	r0, r5
 800fe36:	47b0      	blx	r6
 800fe38:	2800      	cmp	r0, #0
 800fe3a:	dc06      	bgt.n	800fe4a <__sflush_r+0xfe>
 800fe3c:	89a3      	ldrh	r3, [r4, #12]
 800fe3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe42:	81a3      	strh	r3, [r4, #12]
 800fe44:	f04f 30ff 	mov.w	r0, #4294967295
 800fe48:	e78e      	b.n	800fd68 <__sflush_r+0x1c>
 800fe4a:	4407      	add	r7, r0
 800fe4c:	eba8 0800 	sub.w	r8, r8, r0
 800fe50:	e7e9      	b.n	800fe26 <__sflush_r+0xda>
 800fe52:	bf00      	nop
 800fe54:	dfbffffe 	.word	0xdfbffffe

0800fe58 <_fflush_r>:
 800fe58:	b538      	push	{r3, r4, r5, lr}
 800fe5a:	690b      	ldr	r3, [r1, #16]
 800fe5c:	4605      	mov	r5, r0
 800fe5e:	460c      	mov	r4, r1
 800fe60:	b913      	cbnz	r3, 800fe68 <_fflush_r+0x10>
 800fe62:	2500      	movs	r5, #0
 800fe64:	4628      	mov	r0, r5
 800fe66:	bd38      	pop	{r3, r4, r5, pc}
 800fe68:	b118      	cbz	r0, 800fe72 <_fflush_r+0x1a>
 800fe6a:	6a03      	ldr	r3, [r0, #32]
 800fe6c:	b90b      	cbnz	r3, 800fe72 <_fflush_r+0x1a>
 800fe6e:	f7ff f9dd 	bl	800f22c <__sinit>
 800fe72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d0f3      	beq.n	800fe62 <_fflush_r+0xa>
 800fe7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fe7c:	07d0      	lsls	r0, r2, #31
 800fe7e:	d404      	bmi.n	800fe8a <_fflush_r+0x32>
 800fe80:	0599      	lsls	r1, r3, #22
 800fe82:	d402      	bmi.n	800fe8a <_fflush_r+0x32>
 800fe84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe86:	f7ff fb51 	bl	800f52c <__retarget_lock_acquire_recursive>
 800fe8a:	4628      	mov	r0, r5
 800fe8c:	4621      	mov	r1, r4
 800fe8e:	f7ff ff5d 	bl	800fd4c <__sflush_r>
 800fe92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe94:	07da      	lsls	r2, r3, #31
 800fe96:	4605      	mov	r5, r0
 800fe98:	d4e4      	bmi.n	800fe64 <_fflush_r+0xc>
 800fe9a:	89a3      	ldrh	r3, [r4, #12]
 800fe9c:	059b      	lsls	r3, r3, #22
 800fe9e:	d4e1      	bmi.n	800fe64 <_fflush_r+0xc>
 800fea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fea2:	f7ff fb44 	bl	800f52e <__retarget_lock_release_recursive>
 800fea6:	e7dd      	b.n	800fe64 <_fflush_r+0xc>

0800fea8 <fiprintf>:
 800fea8:	b40e      	push	{r1, r2, r3}
 800feaa:	b503      	push	{r0, r1, lr}
 800feac:	4601      	mov	r1, r0
 800feae:	ab03      	add	r3, sp, #12
 800feb0:	4805      	ldr	r0, [pc, #20]	; (800fec8 <fiprintf+0x20>)
 800feb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800feb6:	6800      	ldr	r0, [r0, #0]
 800feb8:	9301      	str	r3, [sp, #4]
 800feba:	f000 f89f 	bl	800fffc <_vfiprintf_r>
 800febe:	b002      	add	sp, #8
 800fec0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fec4:	b003      	add	sp, #12
 800fec6:	4770      	bx	lr
 800fec8:	200001b4 	.word	0x200001b4

0800fecc <memmove>:
 800fecc:	4288      	cmp	r0, r1
 800fece:	b510      	push	{r4, lr}
 800fed0:	eb01 0402 	add.w	r4, r1, r2
 800fed4:	d902      	bls.n	800fedc <memmove+0x10>
 800fed6:	4284      	cmp	r4, r0
 800fed8:	4623      	mov	r3, r4
 800feda:	d807      	bhi.n	800feec <memmove+0x20>
 800fedc:	1e43      	subs	r3, r0, #1
 800fede:	42a1      	cmp	r1, r4
 800fee0:	d008      	beq.n	800fef4 <memmove+0x28>
 800fee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fee6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800feea:	e7f8      	b.n	800fede <memmove+0x12>
 800feec:	4402      	add	r2, r0
 800feee:	4601      	mov	r1, r0
 800fef0:	428a      	cmp	r2, r1
 800fef2:	d100      	bne.n	800fef6 <memmove+0x2a>
 800fef4:	bd10      	pop	{r4, pc}
 800fef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fefa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fefe:	e7f7      	b.n	800fef0 <memmove+0x24>

0800ff00 <_sbrk_r>:
 800ff00:	b538      	push	{r3, r4, r5, lr}
 800ff02:	4d06      	ldr	r5, [pc, #24]	; (800ff1c <_sbrk_r+0x1c>)
 800ff04:	2300      	movs	r3, #0
 800ff06:	4604      	mov	r4, r0
 800ff08:	4608      	mov	r0, r1
 800ff0a:	602b      	str	r3, [r5, #0]
 800ff0c:	f7f2 fd22 	bl	8002954 <_sbrk>
 800ff10:	1c43      	adds	r3, r0, #1
 800ff12:	d102      	bne.n	800ff1a <_sbrk_r+0x1a>
 800ff14:	682b      	ldr	r3, [r5, #0]
 800ff16:	b103      	cbz	r3, 800ff1a <_sbrk_r+0x1a>
 800ff18:	6023      	str	r3, [r4, #0]
 800ff1a:	bd38      	pop	{r3, r4, r5, pc}
 800ff1c:	200047bc 	.word	0x200047bc

0800ff20 <memcpy>:
 800ff20:	440a      	add	r2, r1
 800ff22:	4291      	cmp	r1, r2
 800ff24:	f100 33ff 	add.w	r3, r0, #4294967295
 800ff28:	d100      	bne.n	800ff2c <memcpy+0xc>
 800ff2a:	4770      	bx	lr
 800ff2c:	b510      	push	{r4, lr}
 800ff2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff36:	4291      	cmp	r1, r2
 800ff38:	d1f9      	bne.n	800ff2e <memcpy+0xe>
 800ff3a:	bd10      	pop	{r4, pc}

0800ff3c <abort>:
 800ff3c:	b508      	push	{r3, lr}
 800ff3e:	2006      	movs	r0, #6
 800ff40:	f000 fa34 	bl	80103ac <raise>
 800ff44:	2001      	movs	r0, #1
 800ff46:	f7f2 fc8d 	bl	8002864 <_exit>

0800ff4a <_realloc_r>:
 800ff4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff4e:	4680      	mov	r8, r0
 800ff50:	4614      	mov	r4, r2
 800ff52:	460e      	mov	r6, r1
 800ff54:	b921      	cbnz	r1, 800ff60 <_realloc_r+0x16>
 800ff56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff5a:	4611      	mov	r1, r2
 800ff5c:	f7ff bb82 	b.w	800f664 <_malloc_r>
 800ff60:	b92a      	cbnz	r2, 800ff6e <_realloc_r+0x24>
 800ff62:	f7ff fb0b 	bl	800f57c <_free_r>
 800ff66:	4625      	mov	r5, r4
 800ff68:	4628      	mov	r0, r5
 800ff6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff6e:	f000 fa39 	bl	80103e4 <_malloc_usable_size_r>
 800ff72:	4284      	cmp	r4, r0
 800ff74:	4607      	mov	r7, r0
 800ff76:	d802      	bhi.n	800ff7e <_realloc_r+0x34>
 800ff78:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ff7c:	d812      	bhi.n	800ffa4 <_realloc_r+0x5a>
 800ff7e:	4621      	mov	r1, r4
 800ff80:	4640      	mov	r0, r8
 800ff82:	f7ff fb6f 	bl	800f664 <_malloc_r>
 800ff86:	4605      	mov	r5, r0
 800ff88:	2800      	cmp	r0, #0
 800ff8a:	d0ed      	beq.n	800ff68 <_realloc_r+0x1e>
 800ff8c:	42bc      	cmp	r4, r7
 800ff8e:	4622      	mov	r2, r4
 800ff90:	4631      	mov	r1, r6
 800ff92:	bf28      	it	cs
 800ff94:	463a      	movcs	r2, r7
 800ff96:	f7ff ffc3 	bl	800ff20 <memcpy>
 800ff9a:	4631      	mov	r1, r6
 800ff9c:	4640      	mov	r0, r8
 800ff9e:	f7ff faed 	bl	800f57c <_free_r>
 800ffa2:	e7e1      	b.n	800ff68 <_realloc_r+0x1e>
 800ffa4:	4635      	mov	r5, r6
 800ffa6:	e7df      	b.n	800ff68 <_realloc_r+0x1e>

0800ffa8 <__sfputc_r>:
 800ffa8:	6893      	ldr	r3, [r2, #8]
 800ffaa:	3b01      	subs	r3, #1
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	b410      	push	{r4}
 800ffb0:	6093      	str	r3, [r2, #8]
 800ffb2:	da08      	bge.n	800ffc6 <__sfputc_r+0x1e>
 800ffb4:	6994      	ldr	r4, [r2, #24]
 800ffb6:	42a3      	cmp	r3, r4
 800ffb8:	db01      	blt.n	800ffbe <__sfputc_r+0x16>
 800ffba:	290a      	cmp	r1, #10
 800ffbc:	d103      	bne.n	800ffc6 <__sfputc_r+0x1e>
 800ffbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffc2:	f000 b935 	b.w	8010230 <__swbuf_r>
 800ffc6:	6813      	ldr	r3, [r2, #0]
 800ffc8:	1c58      	adds	r0, r3, #1
 800ffca:	6010      	str	r0, [r2, #0]
 800ffcc:	7019      	strb	r1, [r3, #0]
 800ffce:	4608      	mov	r0, r1
 800ffd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffd4:	4770      	bx	lr

0800ffd6 <__sfputs_r>:
 800ffd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffd8:	4606      	mov	r6, r0
 800ffda:	460f      	mov	r7, r1
 800ffdc:	4614      	mov	r4, r2
 800ffde:	18d5      	adds	r5, r2, r3
 800ffe0:	42ac      	cmp	r4, r5
 800ffe2:	d101      	bne.n	800ffe8 <__sfputs_r+0x12>
 800ffe4:	2000      	movs	r0, #0
 800ffe6:	e007      	b.n	800fff8 <__sfputs_r+0x22>
 800ffe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffec:	463a      	mov	r2, r7
 800ffee:	4630      	mov	r0, r6
 800fff0:	f7ff ffda 	bl	800ffa8 <__sfputc_r>
 800fff4:	1c43      	adds	r3, r0, #1
 800fff6:	d1f3      	bne.n	800ffe0 <__sfputs_r+0xa>
 800fff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fffc <_vfiprintf_r>:
 800fffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010000:	460d      	mov	r5, r1
 8010002:	b09d      	sub	sp, #116	; 0x74
 8010004:	4614      	mov	r4, r2
 8010006:	4698      	mov	r8, r3
 8010008:	4606      	mov	r6, r0
 801000a:	b118      	cbz	r0, 8010014 <_vfiprintf_r+0x18>
 801000c:	6a03      	ldr	r3, [r0, #32]
 801000e:	b90b      	cbnz	r3, 8010014 <_vfiprintf_r+0x18>
 8010010:	f7ff f90c 	bl	800f22c <__sinit>
 8010014:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010016:	07d9      	lsls	r1, r3, #31
 8010018:	d405      	bmi.n	8010026 <_vfiprintf_r+0x2a>
 801001a:	89ab      	ldrh	r3, [r5, #12]
 801001c:	059a      	lsls	r2, r3, #22
 801001e:	d402      	bmi.n	8010026 <_vfiprintf_r+0x2a>
 8010020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010022:	f7ff fa83 	bl	800f52c <__retarget_lock_acquire_recursive>
 8010026:	89ab      	ldrh	r3, [r5, #12]
 8010028:	071b      	lsls	r3, r3, #28
 801002a:	d501      	bpl.n	8010030 <_vfiprintf_r+0x34>
 801002c:	692b      	ldr	r3, [r5, #16]
 801002e:	b99b      	cbnz	r3, 8010058 <_vfiprintf_r+0x5c>
 8010030:	4629      	mov	r1, r5
 8010032:	4630      	mov	r0, r6
 8010034:	f000 f93a 	bl	80102ac <__swsetup_r>
 8010038:	b170      	cbz	r0, 8010058 <_vfiprintf_r+0x5c>
 801003a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801003c:	07dc      	lsls	r4, r3, #31
 801003e:	d504      	bpl.n	801004a <_vfiprintf_r+0x4e>
 8010040:	f04f 30ff 	mov.w	r0, #4294967295
 8010044:	b01d      	add	sp, #116	; 0x74
 8010046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801004a:	89ab      	ldrh	r3, [r5, #12]
 801004c:	0598      	lsls	r0, r3, #22
 801004e:	d4f7      	bmi.n	8010040 <_vfiprintf_r+0x44>
 8010050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010052:	f7ff fa6c 	bl	800f52e <__retarget_lock_release_recursive>
 8010056:	e7f3      	b.n	8010040 <_vfiprintf_r+0x44>
 8010058:	2300      	movs	r3, #0
 801005a:	9309      	str	r3, [sp, #36]	; 0x24
 801005c:	2320      	movs	r3, #32
 801005e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010062:	f8cd 800c 	str.w	r8, [sp, #12]
 8010066:	2330      	movs	r3, #48	; 0x30
 8010068:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801021c <_vfiprintf_r+0x220>
 801006c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010070:	f04f 0901 	mov.w	r9, #1
 8010074:	4623      	mov	r3, r4
 8010076:	469a      	mov	sl, r3
 8010078:	f813 2b01 	ldrb.w	r2, [r3], #1
 801007c:	b10a      	cbz	r2, 8010082 <_vfiprintf_r+0x86>
 801007e:	2a25      	cmp	r2, #37	; 0x25
 8010080:	d1f9      	bne.n	8010076 <_vfiprintf_r+0x7a>
 8010082:	ebba 0b04 	subs.w	fp, sl, r4
 8010086:	d00b      	beq.n	80100a0 <_vfiprintf_r+0xa4>
 8010088:	465b      	mov	r3, fp
 801008a:	4622      	mov	r2, r4
 801008c:	4629      	mov	r1, r5
 801008e:	4630      	mov	r0, r6
 8010090:	f7ff ffa1 	bl	800ffd6 <__sfputs_r>
 8010094:	3001      	adds	r0, #1
 8010096:	f000 80a9 	beq.w	80101ec <_vfiprintf_r+0x1f0>
 801009a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801009c:	445a      	add	r2, fp
 801009e:	9209      	str	r2, [sp, #36]	; 0x24
 80100a0:	f89a 3000 	ldrb.w	r3, [sl]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	f000 80a1 	beq.w	80101ec <_vfiprintf_r+0x1f0>
 80100aa:	2300      	movs	r3, #0
 80100ac:	f04f 32ff 	mov.w	r2, #4294967295
 80100b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100b4:	f10a 0a01 	add.w	sl, sl, #1
 80100b8:	9304      	str	r3, [sp, #16]
 80100ba:	9307      	str	r3, [sp, #28]
 80100bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80100c0:	931a      	str	r3, [sp, #104]	; 0x68
 80100c2:	4654      	mov	r4, sl
 80100c4:	2205      	movs	r2, #5
 80100c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100ca:	4854      	ldr	r0, [pc, #336]	; (801021c <_vfiprintf_r+0x220>)
 80100cc:	f7f0 f8a0 	bl	8000210 <memchr>
 80100d0:	9a04      	ldr	r2, [sp, #16]
 80100d2:	b9d8      	cbnz	r0, 801010c <_vfiprintf_r+0x110>
 80100d4:	06d1      	lsls	r1, r2, #27
 80100d6:	bf44      	itt	mi
 80100d8:	2320      	movmi	r3, #32
 80100da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100de:	0713      	lsls	r3, r2, #28
 80100e0:	bf44      	itt	mi
 80100e2:	232b      	movmi	r3, #43	; 0x2b
 80100e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100e8:	f89a 3000 	ldrb.w	r3, [sl]
 80100ec:	2b2a      	cmp	r3, #42	; 0x2a
 80100ee:	d015      	beq.n	801011c <_vfiprintf_r+0x120>
 80100f0:	9a07      	ldr	r2, [sp, #28]
 80100f2:	4654      	mov	r4, sl
 80100f4:	2000      	movs	r0, #0
 80100f6:	f04f 0c0a 	mov.w	ip, #10
 80100fa:	4621      	mov	r1, r4
 80100fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010100:	3b30      	subs	r3, #48	; 0x30
 8010102:	2b09      	cmp	r3, #9
 8010104:	d94d      	bls.n	80101a2 <_vfiprintf_r+0x1a6>
 8010106:	b1b0      	cbz	r0, 8010136 <_vfiprintf_r+0x13a>
 8010108:	9207      	str	r2, [sp, #28]
 801010a:	e014      	b.n	8010136 <_vfiprintf_r+0x13a>
 801010c:	eba0 0308 	sub.w	r3, r0, r8
 8010110:	fa09 f303 	lsl.w	r3, r9, r3
 8010114:	4313      	orrs	r3, r2
 8010116:	9304      	str	r3, [sp, #16]
 8010118:	46a2      	mov	sl, r4
 801011a:	e7d2      	b.n	80100c2 <_vfiprintf_r+0xc6>
 801011c:	9b03      	ldr	r3, [sp, #12]
 801011e:	1d19      	adds	r1, r3, #4
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	9103      	str	r1, [sp, #12]
 8010124:	2b00      	cmp	r3, #0
 8010126:	bfbb      	ittet	lt
 8010128:	425b      	neglt	r3, r3
 801012a:	f042 0202 	orrlt.w	r2, r2, #2
 801012e:	9307      	strge	r3, [sp, #28]
 8010130:	9307      	strlt	r3, [sp, #28]
 8010132:	bfb8      	it	lt
 8010134:	9204      	strlt	r2, [sp, #16]
 8010136:	7823      	ldrb	r3, [r4, #0]
 8010138:	2b2e      	cmp	r3, #46	; 0x2e
 801013a:	d10c      	bne.n	8010156 <_vfiprintf_r+0x15a>
 801013c:	7863      	ldrb	r3, [r4, #1]
 801013e:	2b2a      	cmp	r3, #42	; 0x2a
 8010140:	d134      	bne.n	80101ac <_vfiprintf_r+0x1b0>
 8010142:	9b03      	ldr	r3, [sp, #12]
 8010144:	1d1a      	adds	r2, r3, #4
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	9203      	str	r2, [sp, #12]
 801014a:	2b00      	cmp	r3, #0
 801014c:	bfb8      	it	lt
 801014e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010152:	3402      	adds	r4, #2
 8010154:	9305      	str	r3, [sp, #20]
 8010156:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801022c <_vfiprintf_r+0x230>
 801015a:	7821      	ldrb	r1, [r4, #0]
 801015c:	2203      	movs	r2, #3
 801015e:	4650      	mov	r0, sl
 8010160:	f7f0 f856 	bl	8000210 <memchr>
 8010164:	b138      	cbz	r0, 8010176 <_vfiprintf_r+0x17a>
 8010166:	9b04      	ldr	r3, [sp, #16]
 8010168:	eba0 000a 	sub.w	r0, r0, sl
 801016c:	2240      	movs	r2, #64	; 0x40
 801016e:	4082      	lsls	r2, r0
 8010170:	4313      	orrs	r3, r2
 8010172:	3401      	adds	r4, #1
 8010174:	9304      	str	r3, [sp, #16]
 8010176:	f814 1b01 	ldrb.w	r1, [r4], #1
 801017a:	4829      	ldr	r0, [pc, #164]	; (8010220 <_vfiprintf_r+0x224>)
 801017c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010180:	2206      	movs	r2, #6
 8010182:	f7f0 f845 	bl	8000210 <memchr>
 8010186:	2800      	cmp	r0, #0
 8010188:	d03f      	beq.n	801020a <_vfiprintf_r+0x20e>
 801018a:	4b26      	ldr	r3, [pc, #152]	; (8010224 <_vfiprintf_r+0x228>)
 801018c:	bb1b      	cbnz	r3, 80101d6 <_vfiprintf_r+0x1da>
 801018e:	9b03      	ldr	r3, [sp, #12]
 8010190:	3307      	adds	r3, #7
 8010192:	f023 0307 	bic.w	r3, r3, #7
 8010196:	3308      	adds	r3, #8
 8010198:	9303      	str	r3, [sp, #12]
 801019a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801019c:	443b      	add	r3, r7
 801019e:	9309      	str	r3, [sp, #36]	; 0x24
 80101a0:	e768      	b.n	8010074 <_vfiprintf_r+0x78>
 80101a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80101a6:	460c      	mov	r4, r1
 80101a8:	2001      	movs	r0, #1
 80101aa:	e7a6      	b.n	80100fa <_vfiprintf_r+0xfe>
 80101ac:	2300      	movs	r3, #0
 80101ae:	3401      	adds	r4, #1
 80101b0:	9305      	str	r3, [sp, #20]
 80101b2:	4619      	mov	r1, r3
 80101b4:	f04f 0c0a 	mov.w	ip, #10
 80101b8:	4620      	mov	r0, r4
 80101ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101be:	3a30      	subs	r2, #48	; 0x30
 80101c0:	2a09      	cmp	r2, #9
 80101c2:	d903      	bls.n	80101cc <_vfiprintf_r+0x1d0>
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d0c6      	beq.n	8010156 <_vfiprintf_r+0x15a>
 80101c8:	9105      	str	r1, [sp, #20]
 80101ca:	e7c4      	b.n	8010156 <_vfiprintf_r+0x15a>
 80101cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80101d0:	4604      	mov	r4, r0
 80101d2:	2301      	movs	r3, #1
 80101d4:	e7f0      	b.n	80101b8 <_vfiprintf_r+0x1bc>
 80101d6:	ab03      	add	r3, sp, #12
 80101d8:	9300      	str	r3, [sp, #0]
 80101da:	462a      	mov	r2, r5
 80101dc:	4b12      	ldr	r3, [pc, #72]	; (8010228 <_vfiprintf_r+0x22c>)
 80101de:	a904      	add	r1, sp, #16
 80101e0:	4630      	mov	r0, r6
 80101e2:	f3af 8000 	nop.w
 80101e6:	4607      	mov	r7, r0
 80101e8:	1c78      	adds	r0, r7, #1
 80101ea:	d1d6      	bne.n	801019a <_vfiprintf_r+0x19e>
 80101ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101ee:	07d9      	lsls	r1, r3, #31
 80101f0:	d405      	bmi.n	80101fe <_vfiprintf_r+0x202>
 80101f2:	89ab      	ldrh	r3, [r5, #12]
 80101f4:	059a      	lsls	r2, r3, #22
 80101f6:	d402      	bmi.n	80101fe <_vfiprintf_r+0x202>
 80101f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101fa:	f7ff f998 	bl	800f52e <__retarget_lock_release_recursive>
 80101fe:	89ab      	ldrh	r3, [r5, #12]
 8010200:	065b      	lsls	r3, r3, #25
 8010202:	f53f af1d 	bmi.w	8010040 <_vfiprintf_r+0x44>
 8010206:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010208:	e71c      	b.n	8010044 <_vfiprintf_r+0x48>
 801020a:	ab03      	add	r3, sp, #12
 801020c:	9300      	str	r3, [sp, #0]
 801020e:	462a      	mov	r2, r5
 8010210:	4b05      	ldr	r3, [pc, #20]	; (8010228 <_vfiprintf_r+0x22c>)
 8010212:	a904      	add	r1, sp, #16
 8010214:	4630      	mov	r0, r6
 8010216:	f7ff fc77 	bl	800fb08 <_printf_i>
 801021a:	e7e4      	b.n	80101e6 <_vfiprintf_r+0x1ea>
 801021c:	08010e46 	.word	0x08010e46
 8010220:	08010e50 	.word	0x08010e50
 8010224:	00000000 	.word	0x00000000
 8010228:	0800ffd7 	.word	0x0800ffd7
 801022c:	08010e4c 	.word	0x08010e4c

08010230 <__swbuf_r>:
 8010230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010232:	460e      	mov	r6, r1
 8010234:	4614      	mov	r4, r2
 8010236:	4605      	mov	r5, r0
 8010238:	b118      	cbz	r0, 8010242 <__swbuf_r+0x12>
 801023a:	6a03      	ldr	r3, [r0, #32]
 801023c:	b90b      	cbnz	r3, 8010242 <__swbuf_r+0x12>
 801023e:	f7fe fff5 	bl	800f22c <__sinit>
 8010242:	69a3      	ldr	r3, [r4, #24]
 8010244:	60a3      	str	r3, [r4, #8]
 8010246:	89a3      	ldrh	r3, [r4, #12]
 8010248:	071a      	lsls	r2, r3, #28
 801024a:	d525      	bpl.n	8010298 <__swbuf_r+0x68>
 801024c:	6923      	ldr	r3, [r4, #16]
 801024e:	b31b      	cbz	r3, 8010298 <__swbuf_r+0x68>
 8010250:	6823      	ldr	r3, [r4, #0]
 8010252:	6922      	ldr	r2, [r4, #16]
 8010254:	1a98      	subs	r0, r3, r2
 8010256:	6963      	ldr	r3, [r4, #20]
 8010258:	b2f6      	uxtb	r6, r6
 801025a:	4283      	cmp	r3, r0
 801025c:	4637      	mov	r7, r6
 801025e:	dc04      	bgt.n	801026a <__swbuf_r+0x3a>
 8010260:	4621      	mov	r1, r4
 8010262:	4628      	mov	r0, r5
 8010264:	f7ff fdf8 	bl	800fe58 <_fflush_r>
 8010268:	b9e0      	cbnz	r0, 80102a4 <__swbuf_r+0x74>
 801026a:	68a3      	ldr	r3, [r4, #8]
 801026c:	3b01      	subs	r3, #1
 801026e:	60a3      	str	r3, [r4, #8]
 8010270:	6823      	ldr	r3, [r4, #0]
 8010272:	1c5a      	adds	r2, r3, #1
 8010274:	6022      	str	r2, [r4, #0]
 8010276:	701e      	strb	r6, [r3, #0]
 8010278:	6962      	ldr	r2, [r4, #20]
 801027a:	1c43      	adds	r3, r0, #1
 801027c:	429a      	cmp	r2, r3
 801027e:	d004      	beq.n	801028a <__swbuf_r+0x5a>
 8010280:	89a3      	ldrh	r3, [r4, #12]
 8010282:	07db      	lsls	r3, r3, #31
 8010284:	d506      	bpl.n	8010294 <__swbuf_r+0x64>
 8010286:	2e0a      	cmp	r6, #10
 8010288:	d104      	bne.n	8010294 <__swbuf_r+0x64>
 801028a:	4621      	mov	r1, r4
 801028c:	4628      	mov	r0, r5
 801028e:	f7ff fde3 	bl	800fe58 <_fflush_r>
 8010292:	b938      	cbnz	r0, 80102a4 <__swbuf_r+0x74>
 8010294:	4638      	mov	r0, r7
 8010296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010298:	4621      	mov	r1, r4
 801029a:	4628      	mov	r0, r5
 801029c:	f000 f806 	bl	80102ac <__swsetup_r>
 80102a0:	2800      	cmp	r0, #0
 80102a2:	d0d5      	beq.n	8010250 <__swbuf_r+0x20>
 80102a4:	f04f 37ff 	mov.w	r7, #4294967295
 80102a8:	e7f4      	b.n	8010294 <__swbuf_r+0x64>
	...

080102ac <__swsetup_r>:
 80102ac:	b538      	push	{r3, r4, r5, lr}
 80102ae:	4b2a      	ldr	r3, [pc, #168]	; (8010358 <__swsetup_r+0xac>)
 80102b0:	4605      	mov	r5, r0
 80102b2:	6818      	ldr	r0, [r3, #0]
 80102b4:	460c      	mov	r4, r1
 80102b6:	b118      	cbz	r0, 80102c0 <__swsetup_r+0x14>
 80102b8:	6a03      	ldr	r3, [r0, #32]
 80102ba:	b90b      	cbnz	r3, 80102c0 <__swsetup_r+0x14>
 80102bc:	f7fe ffb6 	bl	800f22c <__sinit>
 80102c0:	89a3      	ldrh	r3, [r4, #12]
 80102c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102c6:	0718      	lsls	r0, r3, #28
 80102c8:	d422      	bmi.n	8010310 <__swsetup_r+0x64>
 80102ca:	06d9      	lsls	r1, r3, #27
 80102cc:	d407      	bmi.n	80102de <__swsetup_r+0x32>
 80102ce:	2309      	movs	r3, #9
 80102d0:	602b      	str	r3, [r5, #0]
 80102d2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80102d6:	81a3      	strh	r3, [r4, #12]
 80102d8:	f04f 30ff 	mov.w	r0, #4294967295
 80102dc:	e034      	b.n	8010348 <__swsetup_r+0x9c>
 80102de:	0758      	lsls	r0, r3, #29
 80102e0:	d512      	bpl.n	8010308 <__swsetup_r+0x5c>
 80102e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102e4:	b141      	cbz	r1, 80102f8 <__swsetup_r+0x4c>
 80102e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102ea:	4299      	cmp	r1, r3
 80102ec:	d002      	beq.n	80102f4 <__swsetup_r+0x48>
 80102ee:	4628      	mov	r0, r5
 80102f0:	f7ff f944 	bl	800f57c <_free_r>
 80102f4:	2300      	movs	r3, #0
 80102f6:	6363      	str	r3, [r4, #52]	; 0x34
 80102f8:	89a3      	ldrh	r3, [r4, #12]
 80102fa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80102fe:	81a3      	strh	r3, [r4, #12]
 8010300:	2300      	movs	r3, #0
 8010302:	6063      	str	r3, [r4, #4]
 8010304:	6923      	ldr	r3, [r4, #16]
 8010306:	6023      	str	r3, [r4, #0]
 8010308:	89a3      	ldrh	r3, [r4, #12]
 801030a:	f043 0308 	orr.w	r3, r3, #8
 801030e:	81a3      	strh	r3, [r4, #12]
 8010310:	6923      	ldr	r3, [r4, #16]
 8010312:	b94b      	cbnz	r3, 8010328 <__swsetup_r+0x7c>
 8010314:	89a3      	ldrh	r3, [r4, #12]
 8010316:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801031a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801031e:	d003      	beq.n	8010328 <__swsetup_r+0x7c>
 8010320:	4621      	mov	r1, r4
 8010322:	4628      	mov	r0, r5
 8010324:	f000 f88c 	bl	8010440 <__smakebuf_r>
 8010328:	89a0      	ldrh	r0, [r4, #12]
 801032a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801032e:	f010 0301 	ands.w	r3, r0, #1
 8010332:	d00a      	beq.n	801034a <__swsetup_r+0x9e>
 8010334:	2300      	movs	r3, #0
 8010336:	60a3      	str	r3, [r4, #8]
 8010338:	6963      	ldr	r3, [r4, #20]
 801033a:	425b      	negs	r3, r3
 801033c:	61a3      	str	r3, [r4, #24]
 801033e:	6923      	ldr	r3, [r4, #16]
 8010340:	b943      	cbnz	r3, 8010354 <__swsetup_r+0xa8>
 8010342:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010346:	d1c4      	bne.n	80102d2 <__swsetup_r+0x26>
 8010348:	bd38      	pop	{r3, r4, r5, pc}
 801034a:	0781      	lsls	r1, r0, #30
 801034c:	bf58      	it	pl
 801034e:	6963      	ldrpl	r3, [r4, #20]
 8010350:	60a3      	str	r3, [r4, #8]
 8010352:	e7f4      	b.n	801033e <__swsetup_r+0x92>
 8010354:	2000      	movs	r0, #0
 8010356:	e7f7      	b.n	8010348 <__swsetup_r+0x9c>
 8010358:	200001b4 	.word	0x200001b4

0801035c <_raise_r>:
 801035c:	291f      	cmp	r1, #31
 801035e:	b538      	push	{r3, r4, r5, lr}
 8010360:	4604      	mov	r4, r0
 8010362:	460d      	mov	r5, r1
 8010364:	d904      	bls.n	8010370 <_raise_r+0x14>
 8010366:	2316      	movs	r3, #22
 8010368:	6003      	str	r3, [r0, #0]
 801036a:	f04f 30ff 	mov.w	r0, #4294967295
 801036e:	bd38      	pop	{r3, r4, r5, pc}
 8010370:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010372:	b112      	cbz	r2, 801037a <_raise_r+0x1e>
 8010374:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010378:	b94b      	cbnz	r3, 801038e <_raise_r+0x32>
 801037a:	4620      	mov	r0, r4
 801037c:	f000 f830 	bl	80103e0 <_getpid_r>
 8010380:	462a      	mov	r2, r5
 8010382:	4601      	mov	r1, r0
 8010384:	4620      	mov	r0, r4
 8010386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801038a:	f000 b817 	b.w	80103bc <_kill_r>
 801038e:	2b01      	cmp	r3, #1
 8010390:	d00a      	beq.n	80103a8 <_raise_r+0x4c>
 8010392:	1c59      	adds	r1, r3, #1
 8010394:	d103      	bne.n	801039e <_raise_r+0x42>
 8010396:	2316      	movs	r3, #22
 8010398:	6003      	str	r3, [r0, #0]
 801039a:	2001      	movs	r0, #1
 801039c:	e7e7      	b.n	801036e <_raise_r+0x12>
 801039e:	2400      	movs	r4, #0
 80103a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80103a4:	4628      	mov	r0, r5
 80103a6:	4798      	blx	r3
 80103a8:	2000      	movs	r0, #0
 80103aa:	e7e0      	b.n	801036e <_raise_r+0x12>

080103ac <raise>:
 80103ac:	4b02      	ldr	r3, [pc, #8]	; (80103b8 <raise+0xc>)
 80103ae:	4601      	mov	r1, r0
 80103b0:	6818      	ldr	r0, [r3, #0]
 80103b2:	f7ff bfd3 	b.w	801035c <_raise_r>
 80103b6:	bf00      	nop
 80103b8:	200001b4 	.word	0x200001b4

080103bc <_kill_r>:
 80103bc:	b538      	push	{r3, r4, r5, lr}
 80103be:	4d07      	ldr	r5, [pc, #28]	; (80103dc <_kill_r+0x20>)
 80103c0:	2300      	movs	r3, #0
 80103c2:	4604      	mov	r4, r0
 80103c4:	4608      	mov	r0, r1
 80103c6:	4611      	mov	r1, r2
 80103c8:	602b      	str	r3, [r5, #0]
 80103ca:	f7f2 fa3b 	bl	8002844 <_kill>
 80103ce:	1c43      	adds	r3, r0, #1
 80103d0:	d102      	bne.n	80103d8 <_kill_r+0x1c>
 80103d2:	682b      	ldr	r3, [r5, #0]
 80103d4:	b103      	cbz	r3, 80103d8 <_kill_r+0x1c>
 80103d6:	6023      	str	r3, [r4, #0]
 80103d8:	bd38      	pop	{r3, r4, r5, pc}
 80103da:	bf00      	nop
 80103dc:	200047bc 	.word	0x200047bc

080103e0 <_getpid_r>:
 80103e0:	f7f2 ba28 	b.w	8002834 <_getpid>

080103e4 <_malloc_usable_size_r>:
 80103e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103e8:	1f18      	subs	r0, r3, #4
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	bfbc      	itt	lt
 80103ee:	580b      	ldrlt	r3, [r1, r0]
 80103f0:	18c0      	addlt	r0, r0, r3
 80103f2:	4770      	bx	lr

080103f4 <__swhatbuf_r>:
 80103f4:	b570      	push	{r4, r5, r6, lr}
 80103f6:	460c      	mov	r4, r1
 80103f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103fc:	2900      	cmp	r1, #0
 80103fe:	b096      	sub	sp, #88	; 0x58
 8010400:	4615      	mov	r5, r2
 8010402:	461e      	mov	r6, r3
 8010404:	da0d      	bge.n	8010422 <__swhatbuf_r+0x2e>
 8010406:	89a3      	ldrh	r3, [r4, #12]
 8010408:	f013 0f80 	tst.w	r3, #128	; 0x80
 801040c:	f04f 0100 	mov.w	r1, #0
 8010410:	bf0c      	ite	eq
 8010412:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010416:	2340      	movne	r3, #64	; 0x40
 8010418:	2000      	movs	r0, #0
 801041a:	6031      	str	r1, [r6, #0]
 801041c:	602b      	str	r3, [r5, #0]
 801041e:	b016      	add	sp, #88	; 0x58
 8010420:	bd70      	pop	{r4, r5, r6, pc}
 8010422:	466a      	mov	r2, sp
 8010424:	f000 f848 	bl	80104b8 <_fstat_r>
 8010428:	2800      	cmp	r0, #0
 801042a:	dbec      	blt.n	8010406 <__swhatbuf_r+0x12>
 801042c:	9901      	ldr	r1, [sp, #4]
 801042e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010432:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010436:	4259      	negs	r1, r3
 8010438:	4159      	adcs	r1, r3
 801043a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801043e:	e7eb      	b.n	8010418 <__swhatbuf_r+0x24>

08010440 <__smakebuf_r>:
 8010440:	898b      	ldrh	r3, [r1, #12]
 8010442:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010444:	079d      	lsls	r5, r3, #30
 8010446:	4606      	mov	r6, r0
 8010448:	460c      	mov	r4, r1
 801044a:	d507      	bpl.n	801045c <__smakebuf_r+0x1c>
 801044c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010450:	6023      	str	r3, [r4, #0]
 8010452:	6123      	str	r3, [r4, #16]
 8010454:	2301      	movs	r3, #1
 8010456:	6163      	str	r3, [r4, #20]
 8010458:	b002      	add	sp, #8
 801045a:	bd70      	pop	{r4, r5, r6, pc}
 801045c:	ab01      	add	r3, sp, #4
 801045e:	466a      	mov	r2, sp
 8010460:	f7ff ffc8 	bl	80103f4 <__swhatbuf_r>
 8010464:	9900      	ldr	r1, [sp, #0]
 8010466:	4605      	mov	r5, r0
 8010468:	4630      	mov	r0, r6
 801046a:	f7ff f8fb 	bl	800f664 <_malloc_r>
 801046e:	b948      	cbnz	r0, 8010484 <__smakebuf_r+0x44>
 8010470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010474:	059a      	lsls	r2, r3, #22
 8010476:	d4ef      	bmi.n	8010458 <__smakebuf_r+0x18>
 8010478:	f023 0303 	bic.w	r3, r3, #3
 801047c:	f043 0302 	orr.w	r3, r3, #2
 8010480:	81a3      	strh	r3, [r4, #12]
 8010482:	e7e3      	b.n	801044c <__smakebuf_r+0xc>
 8010484:	89a3      	ldrh	r3, [r4, #12]
 8010486:	6020      	str	r0, [r4, #0]
 8010488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801048c:	81a3      	strh	r3, [r4, #12]
 801048e:	9b00      	ldr	r3, [sp, #0]
 8010490:	6163      	str	r3, [r4, #20]
 8010492:	9b01      	ldr	r3, [sp, #4]
 8010494:	6120      	str	r0, [r4, #16]
 8010496:	b15b      	cbz	r3, 80104b0 <__smakebuf_r+0x70>
 8010498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801049c:	4630      	mov	r0, r6
 801049e:	f000 f81d 	bl	80104dc <_isatty_r>
 80104a2:	b128      	cbz	r0, 80104b0 <__smakebuf_r+0x70>
 80104a4:	89a3      	ldrh	r3, [r4, #12]
 80104a6:	f023 0303 	bic.w	r3, r3, #3
 80104aa:	f043 0301 	orr.w	r3, r3, #1
 80104ae:	81a3      	strh	r3, [r4, #12]
 80104b0:	89a3      	ldrh	r3, [r4, #12]
 80104b2:	431d      	orrs	r5, r3
 80104b4:	81a5      	strh	r5, [r4, #12]
 80104b6:	e7cf      	b.n	8010458 <__smakebuf_r+0x18>

080104b8 <_fstat_r>:
 80104b8:	b538      	push	{r3, r4, r5, lr}
 80104ba:	4d07      	ldr	r5, [pc, #28]	; (80104d8 <_fstat_r+0x20>)
 80104bc:	2300      	movs	r3, #0
 80104be:	4604      	mov	r4, r0
 80104c0:	4608      	mov	r0, r1
 80104c2:	4611      	mov	r1, r2
 80104c4:	602b      	str	r3, [r5, #0]
 80104c6:	f7f2 fa1c 	bl	8002902 <_fstat>
 80104ca:	1c43      	adds	r3, r0, #1
 80104cc:	d102      	bne.n	80104d4 <_fstat_r+0x1c>
 80104ce:	682b      	ldr	r3, [r5, #0]
 80104d0:	b103      	cbz	r3, 80104d4 <_fstat_r+0x1c>
 80104d2:	6023      	str	r3, [r4, #0]
 80104d4:	bd38      	pop	{r3, r4, r5, pc}
 80104d6:	bf00      	nop
 80104d8:	200047bc 	.word	0x200047bc

080104dc <_isatty_r>:
 80104dc:	b538      	push	{r3, r4, r5, lr}
 80104de:	4d06      	ldr	r5, [pc, #24]	; (80104f8 <_isatty_r+0x1c>)
 80104e0:	2300      	movs	r3, #0
 80104e2:	4604      	mov	r4, r0
 80104e4:	4608      	mov	r0, r1
 80104e6:	602b      	str	r3, [r5, #0]
 80104e8:	f7f2 fa1b 	bl	8002922 <_isatty>
 80104ec:	1c43      	adds	r3, r0, #1
 80104ee:	d102      	bne.n	80104f6 <_isatty_r+0x1a>
 80104f0:	682b      	ldr	r3, [r5, #0]
 80104f2:	b103      	cbz	r3, 80104f6 <_isatty_r+0x1a>
 80104f4:	6023      	str	r3, [r4, #0]
 80104f6:	bd38      	pop	{r3, r4, r5, pc}
 80104f8:	200047bc 	.word	0x200047bc

080104fc <_init>:
 80104fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104fe:	bf00      	nop
 8010500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010502:	bc08      	pop	{r3}
 8010504:	469e      	mov	lr, r3
 8010506:	4770      	bx	lr

08010508 <_fini>:
 8010508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801050a:	bf00      	nop
 801050c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801050e:	bc08      	pop	{r3}
 8010510:	469e      	mov	lr, r3
 8010512:	4770      	bx	lr
