
F411-Tepelco-W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  0800febc  0800febc  0001febc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106a8  080106a8  00030198  2**0
                  CONTENTS
  4 .ARM          00000008  080106a8  080106a8  000206a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106b0  080106b0  00030198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106b0  080106b0  000206b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080106b4  080106b4  000206b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  080106b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043ac  20000198  08010850  00030198  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004544  08010850  00034544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a5f  00000000  00000000  0003020b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c7f  00000000  00000000  00044c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  000478f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd3  00000000  00000000  000489f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000184f1  00000000  00000000  000497cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000171f9  00000000  00000000  00061cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000935b1  00000000  00000000  00078eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053d4  00000000  00000000  0010c468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0011183c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000198 	.word	0x20000198
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fea4 	.word	0x0800fea4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000019c 	.word	0x2000019c
 80001dc:	0800fea4 	.word	0x0800fea4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	6039      	str	r1, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db0a      	blt.n	80005d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	490c      	ldr	r1, [pc, #48]	; (80005f8 <__NVIC_SetPriority+0x4c>)
 80005c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ca:	0112      	lsls	r2, r2, #4
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005d4:	e00a      	b.n	80005ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4908      	ldr	r1, [pc, #32]	; (80005fc <__NVIC_SetPriority+0x50>)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	f003 030f 	and.w	r3, r3, #15
 80005e2:	3b04      	subs	r3, #4
 80005e4:	0112      	lsls	r2, r2, #4
 80005e6:	b2d2      	uxtb	r2, r2
 80005e8:	440b      	add	r3, r1
 80005ea:	761a      	strb	r2, [r3, #24]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000e100 	.word	0xe000e100
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ffc2 	bl	80005ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800064c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000650:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d013      	beq.n	8000684 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800065c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000660:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000664:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000668:	2b00      	cmp	r3, #0
 800066a:	d00b      	beq.n	8000684 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800066c:	e000      	b.n	8000670 <ITM_SendChar+0x2c>
    {
      __NOP();
 800066e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000670:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800067a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000684:	687b      	ldr	r3, [r7, #4]
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000698:	b096      	sub	sp, #88	; 0x58
 800069a:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE BEGIN 1 */
	//----------------------- ETHERNET W5500 Environment-------------------------//
	//	GATEWAY ADDRESS
		ETH.GAR[0]=192;
 800069c:	4bce      	ldr	r3, [pc, #824]	; (80009d8 <main+0x344>)
 800069e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006a2:	22c0      	movs	r2, #192	; 0xc0
 80006a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		ETH.GAR[1]=168;
 80006a8:	4bcb      	ldr	r3, [pc, #812]	; (80009d8 <main+0x344>)
 80006aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ae:	22a8      	movs	r2, #168	; 0xa8
 80006b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		ETH.GAR[2]=0;
 80006b4:	4bc8      	ldr	r3, [pc, #800]	; (80009d8 <main+0x344>)
 80006b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		ETH.GAR[3]=1;
 80006c0:	4bc5      	ldr	r3, [pc, #788]	; (80009d8 <main+0x344>)
 80006c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006c6:	2201      	movs	r2, #1
 80006c8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	//	SUBNET MASK
		ETH.SUBR[0]=255;
 80006cc:	4bc2      	ldr	r3, [pc, #776]	; (80009d8 <main+0x344>)
 80006ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006d2:	22ff      	movs	r2, #255	; 0xff
 80006d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ETH.SUBR[1]=255;
 80006d8:	4bbf      	ldr	r3, [pc, #764]	; (80009d8 <main+0x344>)
 80006da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006de:	22ff      	movs	r2, #255	; 0xff
 80006e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		ETH.SUBR[2]=255;
 80006e4:	4bbc      	ldr	r3, [pc, #752]	; (80009d8 <main+0x344>)
 80006e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006ea:	22ff      	movs	r2, #255	; 0xff
 80006ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		ETH.SUBR[3]=0;
 80006f0:	4bb9      	ldr	r3, [pc, #740]	; (80009d8 <main+0x344>)
 80006f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	//	MAC ADDRESS
		ETH.SHAR[0]=0x00;
 80006fc:	4bb6      	ldr	r3, [pc, #728]	; (80009d8 <main+0x344>)
 80006fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000702:	2200      	movs	r2, #0
 8000704:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		ETH.SHAR[1]=0x08;
 8000708:	4bb3      	ldr	r3, [pc, #716]	; (80009d8 <main+0x344>)
 800070a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800070e:	2208      	movs	r2, #8
 8000710:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		ETH.SHAR[2]=0xDC;
 8000714:	4bb0      	ldr	r3, [pc, #704]	; (80009d8 <main+0x344>)
 8000716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800071a:	22dc      	movs	r2, #220	; 0xdc
 800071c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		ETH.SHAR[3]=0x00;
 8000720:	4bad      	ldr	r3, [pc, #692]	; (80009d8 <main+0x344>)
 8000722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000726:	2200      	movs	r2, #0
 8000728:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		ETH.SHAR[4]=0xC0;
 800072c:	4baa      	ldr	r3, [pc, #680]	; (80009d8 <main+0x344>)
 800072e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000732:	22c0      	movs	r2, #192	; 0xc0
 8000734:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		ETH.SHAR[5]=0x03;
 8000738:	4ba7      	ldr	r3, [pc, #668]	; (80009d8 <main+0x344>)
 800073a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800073e:	2203      	movs	r2, #3
 8000740:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	//	IP ADDRESS
		ETH.SIPR[0]=192;
 8000744:	4ba4      	ldr	r3, [pc, #656]	; (80009d8 <main+0x344>)
 8000746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800074a:	22c0      	movs	r2, #192	; 0xc0
 800074c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		ETH.SIPR[1]=168;
 8000750:	4ba1      	ldr	r3, [pc, #644]	; (80009d8 <main+0x344>)
 8000752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000756:	22a8      	movs	r2, #168	; 0xa8
 8000758:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		ETH.SIPR[2]=0;
 800075c:	4b9e      	ldr	r3, [pc, #632]	; (80009d8 <main+0x344>)
 800075e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		ETH.SIPR[3]=34,//ETH.SIPR[3]=34,
 8000768:	4b9b      	ldr	r3, [pc, #620]	; (80009d8 <main+0x344>)
 800076a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800076e:	2222      	movs	r2, #34	; 0x22
 8000770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	//  Socket RX memory
		ETH.RMSR=0x55;
 8000774:	4b98      	ldr	r3, [pc, #608]	; (80009d8 <main+0x344>)
 8000776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077a:	2255      	movs	r2, #85	; 0x55
 800077c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	//  Socket TX memory
		ETH.TMSR=0x55;
 8000780:	4b95      	ldr	r3, [pc, #596]	; (80009d8 <main+0x344>)
 8000782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000786:	2255      	movs	r2, #85	; 0x55
 8000788:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	//  S0 Port Number
		ETH.S_PORT[0]=0x01; //01
 800078c:	4b92      	ldr	r3, [pc, #584]	; (80009d8 <main+0x344>)
 800078e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000792:	2201      	movs	r2, #1
 8000794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		ETH.S_PORT[1]=0xF6; //f6
 8000798:	4b8f      	ldr	r3, [pc, #572]	; (80009d8 <main+0x344>)
 800079a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800079e:	22f6      	movs	r2, #246	; 0xf6
 80007a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	//	S0 Client IP ADDRESS
		ETH.S_DIPR[0]=192;
 80007a4:	4b8c      	ldr	r3, [pc, #560]	; (80009d8 <main+0x344>)
 80007a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007aa:	22c0      	movs	r2, #192	; 0xc0
 80007ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		ETH.S_DIPR[1]=168;
 80007b0:	4b89      	ldr	r3, [pc, #548]	; (80009d8 <main+0x344>)
 80007b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007b6:	22a8      	movs	r2, #168	; 0xa8
 80007b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		ETH.S_DIPR[2]=0;
 80007bc:	4b86      	ldr	r3, [pc, #536]	; (80009d8 <main+0x344>)
 80007be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		ETH.S_DIPR[3]=3;
 80007c8:	4b83      	ldr	r3, [pc, #524]	; (80009d8 <main+0x344>)
 80007ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ce:	2203      	movs	r2, #3
 80007d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	//	S0 Client IP ADDRESS
		ETH.S_DPORT[0]=0x01;
 80007d4:	4b80      	ldr	r3, [pc, #512]	; (80009d8 <main+0x344>)
 80007d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007da:	2201      	movs	r2, #1
 80007dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		ETH.S_DPORT[1]=0xF6;
 80007e0:	4b7d      	ldr	r3, [pc, #500]	; (80009d8 <main+0x344>)
 80007e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007e6:	22f6      	movs	r2, #246	; 0xf6
 80007e8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

		ETH.gS_RX_BASE = 0x0000;
 80007ec:	4b7a      	ldr	r3, [pc, #488]	; (80009d8 <main+0x344>)
 80007ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007f2:	2200      	movs	r2, #0
 80007f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		ETH.gS_RX_MASK = 0x07FF;
 80007f8:	4b77      	ldr	r3, [pc, #476]	; (80009d8 <main+0x344>)
 80007fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000802:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		ETH.gS1_RX_BASE = 0x6800;
 8000806:	4b74      	ldr	r3, [pc, #464]	; (80009d8 <main+0x344>)
 8000808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800080c:	f44f 42d0 	mov.w	r2, #26624	; 0x6800
 8000810:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		ETH.gS1_RX_MASK = 0x07FF;
 8000814:	4b70      	ldr	r3, [pc, #448]	; (80009d8 <main+0x344>)
 8000816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800081a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800081e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		ETH.gS2_RX_BASE = 0x7000;
 8000822:	4b6d      	ldr	r3, [pc, #436]	; (80009d8 <main+0x344>)
 8000824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000828:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800082c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		ETH.gS2_RX_MASK = 0x07FF;
 8000830:	4b69      	ldr	r3, [pc, #420]	; (80009d8 <main+0x344>)
 8000832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000836:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800083a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		ETH.gS3_RX_BASE = 0x7800;
 800083e:	4b66      	ldr	r3, [pc, #408]	; (80009d8 <main+0x344>)
 8000840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000844:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8000848:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		ETH.gS3_RX_MASK = 0x07FF;
 800084c:	4b62      	ldr	r3, [pc, #392]	; (80009d8 <main+0x344>)
 800084e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000852:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000856:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		ETH.gS_TX_BASE = 0x0000;
 800085a:	4b5f      	ldr	r3, [pc, #380]	; (80009d8 <main+0x344>)
 800085c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000860:	2200      	movs	r2, #0
 8000862:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		ETH.gS_TX_MASK = 0x07FF;
 8000866:	4b5c      	ldr	r3, [pc, #368]	; (80009d8 <main+0x344>)
 8000868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800086c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000870:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		ETH.gS1_TX_BASE = 0x4800;
 8000874:	4b58      	ldr	r3, [pc, #352]	; (80009d8 <main+0x344>)
 8000876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800087a:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800087e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		ETH.gS1_TX_MASK = 0x07FF;
 8000882:	4b55      	ldr	r3, [pc, #340]	; (80009d8 <main+0x344>)
 8000884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000888:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800088c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		ETH.gS2_TX_BASE = 0x5000;
 8000890:	4b51      	ldr	r3, [pc, #324]	; (80009d8 <main+0x344>)
 8000892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000896:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800089a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		ETH.gS2_TX_MASK = 0x07FF;
 800089e:	4b4e      	ldr	r3, [pc, #312]	; (80009d8 <main+0x344>)
 80008a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008a4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		ETH.gS3_TX_BASE = 0x5800;
 80008ac:	4b4a      	ldr	r3, [pc, #296]	; (80009d8 <main+0x344>)
 80008ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008b2:	f44f 42b0 	mov.w	r2, #22528	; 0x5800
 80008b6:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
		ETH.gS3_TX_MASK = 0x07FF;
 80008ba:	4b47      	ldr	r3, [pc, #284]	; (80009d8 <main+0x344>)
 80008bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80008c4:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

		ETH.S_ENserver = 0;			//Actúa como servidor S0_ENserver=1 o cliente S0_ENserver=0
 80008c8:	4b43      	ldr	r3, [pc, #268]	; (80009d8 <main+0x344>)
 80008ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

		spi_no_debug=1;
 80008d4:	4b41      	ldr	r3, [pc, #260]	; (80009dc <main+0x348>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
		ETH.NSS_PORT=GPIOA;
 80008da:	4b3f      	ldr	r3, [pc, #252]	; (80009d8 <main+0x344>)
 80008dc:	4a40      	ldr	r2, [pc, #256]	; (80009e0 <main+0x34c>)
 80008de:	605a      	str	r2, [r3, #4]
		ETH.NSS_PIN=GPIO_PIN_4;
 80008e0:	4b3d      	ldr	r3, [pc, #244]	; (80009d8 <main+0x344>)
 80008e2:	2210      	movs	r2, #16
 80008e4:	811a      	strh	r2, [r3, #8]
		ETH.RST_PORT=GPIOB;
 80008e6:	4b3c      	ldr	r3, [pc, #240]	; (80009d8 <main+0x344>)
 80008e8:	4a3e      	ldr	r2, [pc, #248]	; (80009e4 <main+0x350>)
 80008ea:	60da      	str	r2, [r3, #12]
		ETH.RST_PIN=GPIO_PIN_0;
 80008ec:	4b3a      	ldr	r3, [pc, #232]	; (80009d8 <main+0x344>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	821a      	strh	r2, [r3, #16]
		ETH.SPI= &hspi1;
 80008f2:	4b39      	ldr	r3, [pc, #228]	; (80009d8 <main+0x344>)
 80008f4:	4a3c      	ldr	r2, [pc, #240]	; (80009e8 <main+0x354>)
 80008f6:	601a      	str	r2, [r3, #0]
	  //----------------------- ETHERNET W5500 Environment-------------------------//
	  //----------------------- WIFI ------------------------//
 	  	Inicializar(&wf); 									//Borra todos los registros de la estructura
 80008f8:	483c      	ldr	r0, [pc, #240]	; (80009ec <main+0x358>)
 80008fa:	f005 fc99 	bl	8006230 <Inicializar>
		strcpy(wf._WF_Net, WIFI_NET);						//Nombre de la red WIFI  a conectar Fibertel WiFi967 2.4GHz
 80008fe:	493c      	ldr	r1, [pc, #240]	; (80009f0 <main+0x35c>)
 8000900:	483c      	ldr	r0, [pc, #240]	; (80009f4 <main+0x360>)
 8000902:	f00e fae9 	bl	800eed8 <strcpy>
		strcpy(wf._WF_Pass, WIFI_PASS);						//Password de la red WIFI
 8000906:	493c      	ldr	r1, [pc, #240]	; (80009f8 <main+0x364>)
 8000908:	483c      	ldr	r0, [pc, #240]	; (80009fc <main+0x368>)
 800090a:	f00e fae5 	bl	800eed8 <strcpy>
		strcpy(wf._TCP_Remote_Server_IP, TCP_SERVER);		//char _TCP_Remote_Server_IP[16];		//IP del Servidor TCP
 800090e:	493c      	ldr	r1, [pc, #240]	; (8000a00 <main+0x36c>)
 8000910:	483c      	ldr	r0, [pc, #240]	; (8000a04 <main+0x370>)
 8000912:	f00e fae1 	bl	800eed8 <strcpy>
		strcpy(wf._TCP_Remote_Server_Port, TCP_PORT);		//char _TCP_Remote_Server_Port[16];			//Puerto del Servidor TCP
 8000916:	493c      	ldr	r1, [pc, #240]	; (8000a08 <main+0x374>)
 8000918:	483c      	ldr	r0, [pc, #240]	; (8000a0c <main+0x378>)
 800091a:	f00e fadd 	bl	800eed8 <strcpy>
		strcpy(wf._TCP_Local_Server_IP, TCP_SERVER_LOCAL);
 800091e:	493c      	ldr	r1, [pc, #240]	; (8000a10 <main+0x37c>)
 8000920:	483c      	ldr	r0, [pc, #240]	; (8000a14 <main+0x380>)
 8000922:	f00e fad9 	bl	800eed8 <strcpy>
		strcpy(wf._TCP_Local_Server_GWY, TCP_SERVER_LOCAL_GWY);
 8000926:	493c      	ldr	r1, [pc, #240]	; (8000a18 <main+0x384>)
 8000928:	483c      	ldr	r0, [pc, #240]	; (8000a1c <main+0x388>)
 800092a:	f00e fad5 	bl	800eed8 <strcpy>
		strcpy(wf._TCP_Local_Server_MSK, TCP_SERVER_LOCAL_MSK);
 800092e:	493c      	ldr	r1, [pc, #240]	; (8000a20 <main+0x38c>)
 8000930:	483c      	ldr	r0, [pc, #240]	; (8000a24 <main+0x390>)
 8000932:	f00e fad1 	bl	800eed8 <strcpy>
		strcpy(wf._TCP_Local_Server_Port, TCP_PORT_LOCAL);
 8000936:	493c      	ldr	r1, [pc, #240]	; (8000a28 <main+0x394>)
 8000938:	483c      	ldr	r0, [pc, #240]	; (8000a2c <main+0x398>)
 800093a:	f00e facd 	bl	800eed8 <strcpy>
		wf._TCP_Local_Server_EN=0;							//Habilito el Servidor Local
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <main+0x358>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		wf._data2SND[0]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000946:	4b29      	ldr	r3, [pc, #164]	; (80009ec <main+0x358>)
 8000948:	2200      	movs	r2, #0
 800094a:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
		wf._data2SND[1]=0x00;
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <main+0x358>)
 8000950:	2200      	movs	r2, #0
 8000952:	f883 2295 	strb.w	r2, [r3, #661]	; 0x295
		wf._data2SND[2]=0x00;
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <main+0x358>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2296 	strb.w	r2, [r3, #662]	; 0x296
		wf._data2SND[3]=0x00;
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <main+0x358>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2297 	strb.w	r2, [r3, #663]	; 0x297
		wf._data2SND[4]=0x00;
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <main+0x358>)
 8000968:	2200      	movs	r2, #0
 800096a:	f883 2298 	strb.w	r2, [r3, #664]	; 0x298
		wf._data2SND[5]=0x06;
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <main+0x358>)
 8000970:	2206      	movs	r2, #6
 8000972:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		wf._data2SND[6]=0x01;
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <main+0x358>)
 8000978:	2201      	movs	r2, #1
 800097a:	f883 229a 	strb.w	r2, [r3, #666]	; 0x29a
		wf._data2SND[7]=0x03;
 800097e:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <main+0x358>)
 8000980:	2203      	movs	r2, #3
 8000982:	f883 229b 	strb.w	r2, [r3, #667]	; 0x29b
		wf._data2SND[8]=0x00;//strcpy(wf._data2SND,"01;03;00;00;00;0A;C5;CD");//strcpy(wf._data2SND,"20;352;52#");
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <main+0x358>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
		wf._data2SND[9]=0x00;
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <main+0x358>)
 8000990:	2200      	movs	r2, #0
 8000992:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
		wf._data2SND[10]=0x00;
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <main+0x358>)
 8000998:	2200      	movs	r2, #0
 800099a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
		wf._data2SND[11]=0x0A;
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <main+0x358>)
 80009a0:	220a      	movs	r2, #10
 80009a2:	f883 229f 	strb.w	r2, [r3, #671]	; 0x29f
		wf._data2SND[12]=0x00;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <main+0x358>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
		wf._data2SND[13]=0x33;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <main+0x358>)
 80009b0:	2233      	movs	r2, #51	; 0x33
 80009b2:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		wf._data2SND[14]=0x34;
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <main+0x358>)
 80009b8:	2234      	movs	r2, #52	; 0x34
 80009ba:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
		wf._data2SND[15]=0x35;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <main+0x358>)
 80009c0:	2235      	movs	r2, #53	; 0x35
 80009c2:	f883 22a3 	strb.w	r2, [r3, #675]	; 0x2a3
		wf._n_D2SND=12;
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <main+0x358>)
 80009c8:	220c      	movs	r2, #12
 80009ca:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		wf._estado_conexion=100;//Si no se define no arranca	//wf._estado_conexion=1;					//Arranco en WiFi Desconectado
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <main+0x358>)
 80009d0:	2264      	movs	r2, #100	; 0x64
 80009d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80009d6:	e02b      	b.n	8000a30 <main+0x39c>
 80009d8:	200002a0 	.word	0x200002a0
 80009dc:	20003fa4 	.word	0x20003fa4
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020400 	.word	0x40020400
 80009e8:	200001b4 	.word	0x200001b4
 80009ec:	20002370 	.word	0x20002370
 80009f0:	20000024 	.word	0x20000024
 80009f4:	20002376 	.word	0x20002376
 80009f8:	2000002c 	.word	0x2000002c
 80009fc:	20002396 	.word	0x20002396
 8000a00:	20000038 	.word	0x20000038
 8000a04:	200023a6 	.word	0x200023a6
 8000a08:	20000048 	.word	0x20000048
 8000a0c:	200023b6 	.word	0x200023b6
 8000a10:	20000050 	.word	0x20000050
 8000a14:	200023bc 	.word	0x200023bc
 8000a18:	20000060 	.word	0x20000060
 8000a1c:	200023d2 	.word	0x200023d2
 8000a20:	20000070 	.word	0x20000070
 8000a24:	200023e2 	.word	0x200023e2
 8000a28:	20000080 	.word	0x20000080
 8000a2c:	200023cc 	.word	0x200023cc
		wf._automatizacion=WF_CONNECT_TCP;//wf._automatizacion=WF_SEND;
 8000a30:	4b6c      	ldr	r3, [pc, #432]	; (8000be4 <main+0x550>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		wf._DBG_EN=1;
 8000a38:	4b6a      	ldr	r3, [pc, #424]	; (8000be4 <main+0x550>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f8c3 2d48 	str.w	r2, [r3, #3400]	; 0xd48
		wf.RESET_PORT=GPIOA;
 8000a40:	4b68      	ldr	r3, [pc, #416]	; (8000be4 <main+0x550>)
 8000a42:	4a69      	ldr	r2, [pc, #420]	; (8000be8 <main+0x554>)
 8000a44:	601a      	str	r2, [r3, #0]
		wf.RESET_PIN=GPIO_PIN_8;
 8000a46:	4b67      	ldr	r3, [pc, #412]	; (8000be4 <main+0x550>)
 8000a48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a4c:	809a      	strh	r2, [r3, #4]
	 //----------------------- WIFI ------------------------//

	 //---------------------- ModBUS -----------------------//
		ModBUS_Config(&mb_eth);		//ETHERNET como cliente TCP envía  ModBUS
 8000a4e:	4867      	ldr	r0, [pc, #412]	; (8000bec <main+0x558>)
 8000a50:	f00a fcd6 	bl	800b400 <ModBUS_Config>
		mb_eth._mode = CLIENTE;
 8000a54:	4b65      	ldr	r3, [pc, #404]	; (8000bec <main+0x558>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	705a      	strb	r2, [r3, #1]
		ModBUS_Config(&mb_wf);		//WIFI como servidor TCP, recibe comadno ModBUS
 8000a5a:	4865      	ldr	r0, [pc, #404]	; (8000bf0 <main+0x55c>)
 8000a5c:	f00a fcd0 	bl	800b400 <ModBUS_Config>
		mb_wf._mode = CLIENTE;
 8000a60:	4b63      	ldr	r3, [pc, #396]	; (8000bf0 <main+0x55c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	705a      	strb	r2, [r3, #1]
		ModBUS_F03_Assign(&mb_wf,3,0xAA55);
 8000a66:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8000a6a:	2103      	movs	r1, #3
 8000a6c:	4860      	ldr	r0, [pc, #384]	; (8000bf0 <main+0x55c>)
 8000a6e:	f00a fd6a 	bl	800b546 <ModBUS_F03_Assign>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a72:	f001 fd93 	bl	800259c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a76:	f000 fa97 	bl	8000fa8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SysTick_Config(SystemCoreClock/1000);
 8000a7a:	4b5e      	ldr	r3, [pc, #376]	; (8000bf4 <main+0x560>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a5e      	ldr	r2, [pc, #376]	; (8000bf8 <main+0x564>)
 8000a80:	fba2 2303 	umull	r2, r3, r2, r3
 8000a84:	099b      	lsrs	r3, r3, #6
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fdba 	bl	8000600 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8c:	f000 fbce 	bl	800122c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a90:	f000 faf2 	bl	8001078 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000a94:	f000 fb26 	bl	80010e4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a98:	f000 fb9e 	bl	80011d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  	  ITM0_Write("\r\n INICIO OK\r\n",strlen("\r\n INICIO OK\r\n"));
 8000a9c:	210e      	movs	r1, #14
 8000a9e:	4857      	ldr	r0, [pc, #348]	; (8000bfc <main+0x568>)
 8000aa0:	f000 fc6a 	bl	8001378 <ITM0_Write>
	  HW_RESET(&wf);
 8000aa4:	484f      	ldr	r0, [pc, #316]	; (8000be4 <main+0x550>)
 8000aa6:	f005 fabf 	bl	8006028 <HW_RESET>

	  if (wf._DBG_EN) ITM0_Write("\r\n RESET ESP8266 \r\n",strlen("\r\n RESET ESP8266 \r\n"));
 8000aaa:	4b4e      	ldr	r3, [pc, #312]	; (8000be4 <main+0x550>)
 8000aac:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <main+0x428>
 8000ab4:	2113      	movs	r1, #19
 8000ab6:	4852      	ldr	r0, [pc, #328]	; (8000c00 <main+0x56c>)
 8000ab8:	f000 fc5e 	bl	8001378 <ITM0_Write>
	  HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8000abc:	2201      	movs	r2, #1
 8000abe:	4951      	ldr	r1, [pc, #324]	; (8000c04 <main+0x570>)
 8000ac0:	4851      	ldr	r0, [pc, #324]	; (8000c08 <main+0x574>)
 8000ac2:	f004 fb23 	bl	800510c <HAL_UART_Receive_IT>

	  if (ETH_DBG_EN)ITM0_Write("\r\n SET-UP W5500 \r\n",strlen("\r\n SET-UP W5500 \r\n"));
 8000ac6:	4b51      	ldr	r3, [pc, #324]	; (8000c0c <main+0x578>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d003      	beq.n	8000ad6 <main+0x442>
 8000ace:	2112      	movs	r1, #18
 8000ad0:	484f      	ldr	r0, [pc, #316]	; (8000c10 <main+0x57c>)
 8000ad2:	f000 fc51 	bl	8001378 <ITM0_Write>


      SPI_ETH_PHY_RESET(&ETH);
 8000ad6:	484f      	ldr	r0, [pc, #316]	; (8000c14 <main+0x580>)
 8000ad8:	f00b ffee 	bl	800cab8 <SPI_ETH_PHY_RESET>
      HAL_Delay(800);
 8000adc:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000ae0:	f001 fdce 	bl	8002680 <HAL_Delay>
      eth_init(&ETH);
 8000ae4:	484b      	ldr	r0, [pc, #300]	; (8000c14 <main+0x580>)
 8000ae6:	f00c f9d1 	bl	800ce8c <eth_init>
      SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000aea:	494a      	ldr	r1, [pc, #296]	; (8000c14 <main+0x580>)
 8000aec:	484a      	ldr	r0, [pc, #296]	; (8000c18 <main+0x584>)
 8000aee:	f00c fd52 	bl	800d596 <SPI_ETH_SNIFF>
      HAL_Delay(800);
 8000af2:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000af6:	f001 fdc3 	bl	8002680 <HAL_Delay>
   	  eth_socket_init(&ETH,S0_REG);
 8000afa:	2101      	movs	r1, #1
 8000afc:	4845      	ldr	r0, [pc, #276]	; (8000c14 <main+0x580>)
 8000afe:	f00c fa97 	bl	800d030 <eth_socket_init>

   	  SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b02:	4944      	ldr	r1, [pc, #272]	; (8000c14 <main+0x580>)
 8000b04:	4844      	ldr	r0, [pc, #272]	; (8000c18 <main+0x584>)
 8000b06:	f00c fd46 	bl	800d596 <SPI_ETH_SNIFF>

	 uint16_t b=0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	83fb      	strh	r3, [r7, #30]
	 uint8_t spi_Data[2];
	 b = SPI_ETH_REG(&ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 8000b0e:	2302      	movs	r3, #2
 8000b10:	9301      	str	r3, [sp, #4]
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2124      	movs	r1, #36	; 0x24
 8000b1e:	483d      	ldr	r0, [pc, #244]	; (8000c14 <main+0x580>)
 8000b20:	f00c f821 	bl	800cb66 <SPI_ETH_REG>
 8000b24:	4603      	mov	r3, r0
 8000b26:	83fb      	strh	r3, [r7, #30]

	 eth_wr_SOCKET_MODE(&ETH,S0_REG,MODE_TCP);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4839      	ldr	r0, [pc, #228]	; (8000c14 <main+0x580>)
 8000b2e:	f00c f98b 	bl	800ce48 <eth_wr_SOCKET_MODE>
   	 SPI_ETH_REG(&ETH, S_DIPR, S0_REG,SPI_WRITE, ETH.S_DIPR,4);									// client
 8000b32:	2304      	movs	r3, #4
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	4b39      	ldr	r3, [pc, #228]	; (8000c1c <main+0x588>)
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	210c      	movs	r1, #12
 8000b40:	4834      	ldr	r0, [pc, #208]	; (8000c14 <main+0x580>)
 8000b42:	f00c f810 	bl	800cb66 <SPI_ETH_REG>
   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE PORT TO CONNECT\r\n"));									// client
 8000b46:	212e      	movs	r1, #46	; 0x2e
 8000b48:	4835      	ldr	r0, [pc, #212]	; (8000c20 <main+0x58c>)
 8000b4a:	f000 fc15 	bl	8001378 <ITM0_Write>
   	 SPI_ETH_REG(&ETH, S_DPORT, S0_REG,SPI_WRITE, ETH.S_DPORT,2);									// client
 8000b4e:	2302      	movs	r3, #2
 8000b50:	9301      	str	r3, [sp, #4]
 8000b52:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <main+0x590>)
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2301      	movs	r3, #1
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	482d      	ldr	r0, [pc, #180]	; (8000c14 <main+0x580>)
 8000b5e:	f00c f802 	bl	800cb66 <SPI_ETH_REG>
   	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP PORT SET\r\n"));						//same for server and client
 8000b62:	2120      	movs	r1, #32
 8000b64:	4830      	ldr	r0, [pc, #192]	; (8000c28 <main+0x594>)
 8000b66:	f000 fc07 	bl	8001378 <ITM0_Write>

   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b6a:	492a      	ldr	r1, [pc, #168]	; (8000c14 <main+0x580>)
 8000b6c:	482a      	ldr	r0, [pc, #168]	; (8000c18 <main+0x584>)
 8000b6e:	f00c fd12 	bl	800d596 <SPI_ETH_SNIFF>

   	 eth_wr_SOCKET_CMD(&ETH, S0_REG,OPEN );
 8000b72:	2201      	movs	r2, #1
 8000b74:	2101      	movs	r1, #1
 8000b76:	4827      	ldr	r0, [pc, #156]	; (8000c14 <main+0x580>)
 8000b78:	f00c f944 	bl	800ce04 <eth_wr_SOCKET_CMD>

   	 HAL_Delay(1000);
 8000b7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b80:	f001 fd7e 	bl	8002680 <HAL_Delay>

   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 8000b84:	4923      	ldr	r1, [pc, #140]	; (8000c14 <main+0x580>)
 8000b86:	4824      	ldr	r0, [pc, #144]	; (8000c18 <main+0x584>)
 8000b88:	f00c fd05 	bl	800d596 <SPI_ETH_SNIFF>

	 //SPI_READ_EN=1;
   	 //------------------------ RUN ESP -----------------------------------//
     if(ESP8266_HW_Init(&huart1)==1)
 8000b8c:	481e      	ldr	r0, [pc, #120]	; (8000c08 <main+0x574>)
 8000b8e:	f001 fa13 	bl	8001fb8 <ESP8266_HW_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d10c      	bne.n	8000bb2 <main+0x51e>
     {
		  ESP_HW_Init=1;
 8000b98:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <main+0x598>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]
		  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <main+0x550>)
 8000ba0:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d053      	beq.n	8000c50 <main+0x5bc>
 8000ba8:	2113      	movs	r1, #19
 8000baa:	4821      	ldr	r0, [pc, #132]	; (8000c30 <main+0x59c>)
 8000bac:	f000 fbe4 	bl	8001378 <ITM0_Write>
 8000bb0:	e04e      	b.n	8000c50 <main+0x5bc>
     }
     else
     {
		 HW_RESET(&wf);
 8000bb2:	480c      	ldr	r0, [pc, #48]	; (8000be4 <main+0x550>)
 8000bb4:	f005 fa38 	bl	8006028 <HW_RESET>
		 ESP_REinit=0;
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <main+0x5a0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
			  if(ESP8266_HW_Init(&huart1)==1)
 8000bbe:	4812      	ldr	r0, [pc, #72]	; (8000c08 <main+0x574>)
 8000bc0:	f001 f9fa 	bl	8001fb8 <ESP8266_HW_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d136      	bne.n	8000c38 <main+0x5a4>
				  {
					  ESP_HW_Init=1;
 8000bca:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <main+0x598>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
					  if (wf._DBG_EN) ITM0_Write("\r\n ESP HW Init OK\r\n",strlen("\r\n ESP HW Init OK\r\n"));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <main+0x550>)
 8000bd2:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d03a      	beq.n	8000c50 <main+0x5bc>
 8000bda:	2113      	movs	r1, #19
 8000bdc:	4814      	ldr	r0, [pc, #80]	; (8000c30 <main+0x59c>)
 8000bde:	f000 fbcb 	bl	8001378 <ITM0_Write>
 8000be2:	e035      	b.n	8000c50 <main+0x5bc>
 8000be4:	20002370 	.word	0x20002370
 8000be8:	40020000 	.word	0x40020000
 8000bec:	200030bc 	.word	0x200030bc
 8000bf0:	20003608 	.word	0x20003608
 8000bf4:	20000084 	.word	0x20000084
 8000bf8:	10624dd3 	.word	0x10624dd3
 8000bfc:	0800febc 	.word	0x0800febc
 8000c00:	0800fecc 	.word	0x0800fecc
 8000c04:	200043bc 	.word	0x200043bc
 8000c08:	20000254 	.word	0x20000254
 8000c0c:	20003f54 	.word	0x20003f54
 8000c10:	0800fee0 	.word	0x0800fee0
 8000c14:	200002a0 	.word	0x200002a0
 8000c18:	20001314 	.word	0x20001314
 8000c1c:	200012e4 	.word	0x200012e4
 8000c20:	0800fef4 	.word	0x0800fef4
 8000c24:	200012e8 	.word	0x200012e8
 8000c28:	0800ff24 	.word	0x0800ff24
 8000c2c:	20003fa7 	.word	0x20003fa7
 8000c30:	0800ff48 	.word	0x0800ff48
 8000c34:	20003fa5 	.word	0x20003fa5
				  }
				  else
				  {
					  ESP_HW_Init=0;
 8000c38:	4bad      	ldr	r3, [pc, #692]	; (8000ef0 <main+0x85c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
					  if (wf._DBG_EN)  ITM0_Write("\r\n ESP HW Init Fail\r\n",strlen("\r\n ESP HW Init Fail\r\n"));
 8000c3e:	4bad      	ldr	r3, [pc, #692]	; (8000ef4 <main+0x860>)
 8000c40:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <main+0x5bc>
 8000c48:	2115      	movs	r1, #21
 8000c4a:	48ab      	ldr	r0, [pc, #684]	; (8000ef8 <main+0x864>)
 8000c4c:	f000 fb94 	bl	8001378 <ITM0_Write>
				  }
     }
     //------------------------ RUN ESP -----------------------------------//

     HAL_Delay(1000);
 8000c50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c54:	f001 fd14 	bl	8002680 <HAL_Delay>
		 eth_wr_SOCKET_CMD(&ETH,0, OPEN);																				//only for server
		 if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5500-OPEN SOCKET\r\n",strlen("\r\nETH-W5500-OPEN SOCKET\r\n"));
		 HAL_Delay(1000);
	 	 eth_wr_SOCKET_CMD(&ETH,0, CONNECT);																				//only for server
		 ITM0_Write("\r\nETH-W5500-CONNECT\r\n",strlen("\r\nETH-W5500-CONNECT\r\n"));*/
		 SPI_READ_EN=1;
 8000c58:	4ba8      	ldr	r3, [pc, #672]	; (8000efc <main+0x868>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]





		  	  if (ESP_HW_Init==1)
 8000c5e:	4ba4      	ldr	r3, [pc, #656]	; (8000ef0 <main+0x85c>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	f040 80a6 	bne.w	8000db4 <main+0x720>
		  	  {
		  			if((WF_SND_FLAG==1)&&(wf._TCP_Local_Server_EN==0)&&(wf._estado_conexion>=609)&&(ETH.S_data_available))
 8000c68:	4ba5      	ldr	r3, [pc, #660]	; (8000f00 <main+0x86c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	f040 80a1 	bne.w	8000db4 <main+0x720>
 8000c72:	4ba0      	ldr	r3, [pc, #640]	; (8000ef4 <main+0x860>)
 8000c74:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f040 809b 	bne.w	8000db4 <main+0x720>
 8000c7e:	4b9d      	ldr	r3, [pc, #628]	; (8000ef4 <main+0x860>)
 8000c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000c84:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000c88:	f340 8094 	ble.w	8000db4 <main+0x720>
 8000c8c:	4b9d      	ldr	r3, [pc, #628]	; (8000f04 <main+0x870>)
 8000c8e:	7e9b      	ldrb	r3, [r3, #26]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 808f 	beq.w	8000db4 <main+0x720>
		  			{	ETH.S_data_available=0;
 8000c96:	4b9b      	ldr	r3, [pc, #620]	; (8000f04 <main+0x870>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	769a      	strb	r2, [r3, #26]
		  				wf_snd_flag_ticks=0;
 8000c9c:	4b9a      	ldr	r3, [pc, #616]	; (8000f08 <main+0x874>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
		  				WF_SND_FLAG=0;
 8000ca2:	4b97      	ldr	r3, [pc, #604]	; (8000f00 <main+0x86c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
		  				/*ModBUS_F03_Request(&mb_wf, 0 , 10);
		  				ModBUS(&mb_wf);							// Create ModBUS info to be sent
		  				CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
		  				wf._n_D2SND=mb_wf._n_MBUS_2SND;*/
		  				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000ca8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cac:	4897      	ldr	r0, [pc, #604]	; (8000f0c <main+0x878>)
 8000cae:	f002 f962 	bl	8002f76 <HAL_GPIO_TogglePin>
		  				ITM0_Write("\r\n#RED#WF-SE GENERA INFO Y ENVIA\r\n",strlen("\r\n#RED#WF-SE GENERA INFO Y ENVIA\r\n"));
 8000cb2:	2122      	movs	r1, #34	; 0x22
 8000cb4:	4896      	ldr	r0, [pc, #600]	; (8000f10 <main+0x87c>)
 8000cb6:	f000 fb5f 	bl	8001378 <ITM0_Write>

		  				if( httpPOST(	ENDPOINT, SERVER_IP,PORT,
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4895      	ldr	r0, [pc, #596]	; (8000f14 <main+0x880>)
 8000cbe:	f00a fc70 	bl	800b5a2 <ModBUS_F03_Read>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4698      	mov	r8, r3
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4892      	ldr	r0, [pc, #584]	; (8000f14 <main+0x880>)
 8000cca:	f00a fc6a 	bl	800b5a2 <ModBUS_F03_Read>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	461c      	mov	r4, r3
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	488f      	ldr	r0, [pc, #572]	; (8000f14 <main+0x880>)
 8000cd6:	f00a fc64 	bl	800b5a2 <ModBUS_F03_Read>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461d      	mov	r5, r3
 8000cde:	2103      	movs	r1, #3
 8000ce0:	488c      	ldr	r0, [pc, #560]	; (8000f14 <main+0x880>)
 8000ce2:	f00a fc5e 	bl	800b5a2 <ModBUS_F03_Read>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	461e      	mov	r6, r3
 8000cea:	2104      	movs	r1, #4
 8000cec:	4889      	ldr	r0, [pc, #548]	; (8000f14 <main+0x880>)
 8000cee:	f00a fc58 	bl	800b5a2 <ModBUS_F03_Read>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	2105      	movs	r1, #5
 8000cf8:	4886      	ldr	r0, [pc, #536]	; (8000f14 <main+0x880>)
 8000cfa:	f00a fc52 	bl	800b5a2 <ModBUS_F03_Read>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	2106      	movs	r1, #6
 8000d04:	4883      	ldr	r0, [pc, #524]	; (8000f14 <main+0x880>)
 8000d06:	f00a fc4c 	bl	800b5a2 <ModBUS_F03_Read>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	2107      	movs	r1, #7
 8000d10:	4880      	ldr	r0, [pc, #512]	; (8000f14 <main+0x880>)
 8000d12:	f00a fc46 	bl	800b5a2 <ModBUS_F03_Read>
 8000d16:	4603      	mov	r3, r0
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	2108      	movs	r1, #8
 8000d1c:	487d      	ldr	r0, [pc, #500]	; (8000f14 <main+0x880>)
 8000d1e:	f00a fc40 	bl	800b5a2 <ModBUS_F03_Read>
 8000d22:	4603      	mov	r3, r0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	2109      	movs	r1, #9
 8000d28:	487a      	ldr	r0, [pc, #488]	; (8000f14 <main+0x880>)
 8000d2a:	f00a fc3a 	bl	800b5a2 <ModBUS_F03_Read>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461a      	mov	r2, r3
 8000d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d36:	930c      	str	r3, [sp, #48]	; 0x30
 8000d38:	4b77      	ldr	r3, [pc, #476]	; (8000f18 <main+0x884>)
 8000d3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8000d3c:	4b77      	ldr	r3, [pc, #476]	; (8000f1c <main+0x888>)
 8000d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8000d40:	2302      	movs	r3, #2
 8000d42:	9309      	str	r3, [sp, #36]	; 0x24
 8000d44:	9208      	str	r2, [sp, #32]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	9207      	str	r2, [sp, #28]
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	9206      	str	r2, [sp, #24]
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	9205      	str	r2, [sp, #20]
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	9204      	str	r2, [sp, #16]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	9303      	str	r3, [sp, #12]
 8000d5a:	9602      	str	r6, [sp, #8]
 8000d5c:	9501      	str	r5, [sp, #4]
 8000d5e:	9400      	str	r4, [sp, #0]
 8000d60:	4643      	mov	r3, r8
 8000d62:	4a6f      	ldr	r2, [pc, #444]	; (8000f20 <main+0x88c>)
 8000d64:	496f      	ldr	r1, [pc, #444]	; (8000f24 <main+0x890>)
 8000d66:	4870      	ldr	r0, [pc, #448]	; (8000f28 <main+0x894>)
 8000d68:	f00a f89a 	bl	800aea0 <httpPOST>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d020      	beq.n	8000db4 <main+0x720>
		  								ModBUS_F03_Read(&mb_eth,8),
										ModBUS_F03_Read(&mb_eth,9),TEST_2,//ModBUS_F03_Read(&mb_eth,9),TEPELCO,
		  								post, body, 512))

		  				{
		  							CopiaVector(wf._data2SND,post,strlen(post),0,'A');
 8000d72:	486a      	ldr	r0, [pc, #424]	; (8000f1c <main+0x888>)
 8000d74:	f7ff fa3e 	bl	80001f4 <strlen>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	2341      	movs	r3, #65	; 0x41
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2300      	movs	r3, #0
 8000d82:	4966      	ldr	r1, [pc, #408]	; (8000f1c <main+0x888>)
 8000d84:	4869      	ldr	r0, [pc, #420]	; (8000f2c <main+0x898>)
 8000d86:	f00d fdcf 	bl	800e928 <CopiaVector>
		  							wf._n_D2SND=strlen(post);
 8000d8a:	4864      	ldr	r0, [pc, #400]	; (8000f1c <main+0x888>)
 8000d8c:	f7ff fa32 	bl	80001f4 <strlen>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b57      	ldr	r3, [pc, #348]	; (8000ef4 <main+0x860>)
 8000d96:	f8c3 2ce4 	str.w	r2, [r3, #3300]	; 0xce4
		  							if(wf._automatizacion < WF_SEND)		// Send only with automation sent diasabled
 8000d9a:	4b56      	ldr	r3, [pc, #344]	; (8000ef4 <main+0x860>)
 8000d9c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d807      	bhi.n	8000db4 <main+0x720>
		  							{
		  								EnviarDatos(&wf);
 8000da4:	4853      	ldr	r0, [pc, #332]	; (8000ef4 <main+0x860>)
 8000da6:	f005 fa2d 	bl	8006204 <EnviarDatos>
		  								wf._estado_conexion=TCP_SND_EN_CURSO;
 8000daa:	4b52      	ldr	r3, [pc, #328]	; (8000ef4 <main+0x860>)
 8000dac:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000db0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		  				}
		  			}
		  	  }
		  /**************[ FIN PIDO ENVIAR DATOS ]**************/

		  		if ((FLAG_UART1==1)||(FLAG_TIMEOUT==1))  //Si recibí datos o me fui por TimeOUT
 8000db4:	4b5e      	ldr	r3, [pc, #376]	; (8000f30 <main+0x89c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d003      	beq.n	8000dc4 <main+0x730>
 8000dbc:	4b5d      	ldr	r3, [pc, #372]	; (8000f34 <main+0x8a0>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d175      	bne.n	8000eb0 <main+0x81c>
		  		{
		  			if(FLAG_UART1==1)
 8000dc4:	4b5a      	ldr	r3, [pc, #360]	; (8000f30 <main+0x89c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d11c      	bne.n	8000e06 <main+0x772>
		  				{
		  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000dcc:	4b5a      	ldr	r3, [pc, #360]	; (8000f38 <main+0x8a4>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b5a      	ldr	r3, [pc, #360]	; (8000f3c <main+0x8a8>)
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	495a      	ldr	r1, [pc, #360]	; (8000f40 <main+0x8ac>)
 8000dd8:	485a      	ldr	r0, [pc, #360]	; (8000f44 <main+0x8b0>)
 8000dda:	f00d fda5 	bl	800e928 <CopiaVector>
		  					FLAG_UART1=0;
 8000dde:	4b54      	ldr	r3, [pc, #336]	; (8000f30 <main+0x89c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]

		  						if (error_rxdata==3)
 8000de4:	4b58      	ldr	r3, [pc, #352]	; (8000f48 <main+0x8b4>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d102      	bne.n	8000df2 <main+0x75e>
		  						{
		  							error_rxdata=0;
 8000dec:	4b56      	ldr	r3, [pc, #344]	; (8000f48 <main+0x8b4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
		  						}
		  						if (error_rxdata==1)
 8000df2:	4b55      	ldr	r3, [pc, #340]	; (8000f48 <main+0x8b4>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d105      	bne.n	8000e06 <main+0x772>
		  						{
		  							error_rxdata=5;
 8000dfa:	4b53      	ldr	r3, [pc, #332]	; (8000f48 <main+0x8b4>)
 8000dfc:	2205      	movs	r2, #5
 8000dfe:	701a      	strb	r2, [r3, #0]
		  							error_rxdata=0;
 8000e00:	4b51      	ldr	r3, [pc, #324]	; (8000f48 <main+0x8b4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
		  						}
		  				}
		  			if(FLAG_TIMEOUT==1)
 8000e06:	4b4b      	ldr	r3, [pc, #300]	; (8000f34 <main+0x8a0>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d102      	bne.n	8000e14 <main+0x780>
		  					{
		  						FLAG_TIMEOUT=0;
 8000e0e:	4b49      	ldr	r3, [pc, #292]	; (8000f34 <main+0x8a0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
		  					}

		  			if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000e14:	4b36      	ldr	r3, [pc, #216]	; (8000ef0 <main+0x85c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d149      	bne.n	8000eb0 <main+0x81c>
		  				{
		  					/*************** Copio y proceso info recibida ***************/
		  					wf._n_orig=UART_RX_items;
 8000e1c:	4b46      	ldr	r3, [pc, #280]	; (8000f38 <main+0x8a4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a34      	ldr	r2, [pc, #208]	; (8000ef4 <main+0x860>)
 8000e22:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
		  					CopiaVector(wf._uartRCVD,UART_RX_vect_hld,UART_RX_items,1,CMP_VECT);
 8000e26:	4b44      	ldr	r3, [pc, #272]	; (8000f38 <main+0x8a4>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	4b44      	ldr	r3, [pc, #272]	; (8000f3c <main+0x8a8>)
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	4943      	ldr	r1, [pc, #268]	; (8000f40 <main+0x8ac>)
 8000e32:	4844      	ldr	r0, [pc, #272]	; (8000f44 <main+0x8b0>)
 8000e34:	f00d fd78 	bl	800e928 <CopiaVector>
		  					resultado=AT_ESP8266_ND(&wf);
 8000e38:	482e      	ldr	r0, [pc, #184]	; (8000ef4 <main+0x860>)
 8000e3a:	f005 fac3 	bl	80063c4 <AT_ESP8266_ND>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4b42      	ldr	r3, [pc, #264]	; (8000f4c <main+0x8b8>)
 8000e44:	701a      	strb	r2, [r3, #0]

		  					/*************** Si recibo datos y estan correctos me fijo que son ***************/

		  					if ((wf._new_data_rcv==1)&&(wf._estado_rcv_data==99))
 8000e46:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <main+0x860>)
 8000e48:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d12f      	bne.n	8000eb0 <main+0x81c>
 8000e50:	4b28      	ldr	r3, [pc, #160]	; (8000ef4 <main+0x860>)
 8000e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e56:	2b63      	cmp	r3, #99	; 0x63
 8000e58:	d12a      	bne.n	8000eb0 <main+0x81c>
		  					{

		  						CopiaVector(mb_wf._MBUS_RCVD,wf._dataRCV,wf._n_dataRCV,0,'A');
 8000e5a:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <main+0x860>)
 8000e5c:	f8d3 2cf4 	ldr.w	r2, [r3, #3316]	; 0xcf4
 8000e60:	2341      	movs	r3, #65	; 0x41
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2300      	movs	r3, #0
 8000e66:	493a      	ldr	r1, [pc, #232]	; (8000f50 <main+0x8bc>)
 8000e68:	483a      	ldr	r0, [pc, #232]	; (8000f54 <main+0x8c0>)
 8000e6a:	f00d fd5d 	bl	800e928 <CopiaVector>
		  						mb_wf._n_MBUS_RCVD=wf._n_dataRCV;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <main+0x860>)
 8000e70:	f8d3 3cf4 	ldr.w	r3, [r3, #3316]	; 0xcf4
 8000e74:	4a38      	ldr	r2, [pc, #224]	; (8000f58 <main+0x8c4>)
 8000e76:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190

		  						ModBUS(&mb_wf);
 8000e7a:	4837      	ldr	r0, [pc, #220]	; (8000f58 <main+0x8c4>)
 8000e7c:	f00a fc16 	bl	800b6ac <ModBUS>

		  						CopiaVector(wf._data2SND,mb_wf._MBUS_2SND,mb_wf._n_MBUS_2SND,0,'A');
 8000e80:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <main+0x8c4>)
 8000e82:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8000e86:	2341      	movs	r3, #65	; 0x41
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	4933      	ldr	r1, [pc, #204]	; (8000f5c <main+0x8c8>)
 8000e8e:	4827      	ldr	r0, [pc, #156]	; (8000f2c <main+0x898>)
 8000e90:	f00d fd4a 	bl	800e928 <CopiaVector>
		  						wf._n_D2SND=mb_wf._n_MBUS_2SND;
 8000e94:	4b30      	ldr	r3, [pc, #192]	; (8000f58 <main+0x8c4>)
 8000e96:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8000e9a:	4a16      	ldr	r2, [pc, #88]	; (8000ef4 <main+0x860>)
 8000e9c:	f8c2 3ce4 	str.w	r3, [r2, #3300]	; 0xce4
		  						wf._new_data_rcv=0;//
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <main+0x860>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
		  						wf._send_data=1;
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <main+0x860>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
		  			//ITM0_Write(lr.txbuff,strlen(lr.txbuff))


		  		//}

		  		if (ESP_HW_Init==1) //Si el módulo se inició correctamente
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <main+0x85c>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d108      	bne.n	8000eca <main+0x836>
		  			{
		  				conexion=WiFi_Conn_ND(&wf,&huart1,1);	//Tiene que ir en el main el chequeo es constante
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4929      	ldr	r1, [pc, #164]	; (8000f60 <main+0x8cc>)
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <main+0x860>)
 8000ebe:	f008 fb81 	bl	80095c4 <WiFi_Conn_ND>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4b27      	ldr	r3, [pc, #156]	; (8000f64 <main+0x8d0>)
 8000ec8:	701a      	strb	r2, [r3, #0]
		  			}
		  		if (esp_restart==1) //WRNNG Hardcoded RESET WIFI
 8000eca:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <main+0x8d4>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	f47f aec2 	bne.w	8000c58 <main+0x5c4>
		  			{
		  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eda:	4824      	ldr	r0, [pc, #144]	; (8000f6c <main+0x8d8>)
 8000edc:	f002 f832 	bl	8002f44 <HAL_GPIO_WritePin>
		  				ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8000ee0:	2115      	movs	r1, #21
 8000ee2:	4823      	ldr	r0, [pc, #140]	; (8000f70 <main+0x8dc>)
 8000ee4:	f000 fa48 	bl	8001378 <ITM0_Write>
		  				HAL_Delay(2000);//210419
 8000ee8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000eec:	e042      	b.n	8000f74 <main+0x8e0>
 8000eee:	bf00      	nop
 8000ef0:	20003fa7 	.word	0x20003fa7
 8000ef4:	20002370 	.word	0x20002370
 8000ef8:	0800ff5c 	.word	0x0800ff5c
 8000efc:	20003fb4 	.word	0x20003fb4
 8000f00:	20003f55 	.word	0x20003f55
 8000f04:	200002a0 	.word	0x200002a0
 8000f08:	20003f58 	.word	0x20003f58
 8000f0c:	40020800 	.word	0x40020800
 8000f10:	0800ff74 	.word	0x0800ff74
 8000f14:	200030bc 	.word	0x200030bc
 8000f18:	20003d54 	.word	0x20003d54
 8000f1c:	20003b54 	.word	0x20003b54
 8000f20:	2000001c 	.word	0x2000001c
 8000f24:	2000000c 	.word	0x2000000c
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20002604 	.word	0x20002604
 8000f30:	20003fab 	.word	0x20003fab
 8000f34:	20003faa 	.word	0x20003faa
 8000f38:	200043c0 	.word	0x200043c0
 8000f3c:	200043b8 	.word	0x200043b8
 8000f40:	200041b8 	.word	0x200041b8
 8000f44:	20002a04 	.word	0x20002a04
 8000f48:	20003fad 	.word	0x20003fad
 8000f4c:	20003fac 	.word	0x20003fac
 8000f50:	20002404 	.word	0x20002404
 8000f54:	20003615 	.word	0x20003615
 8000f58:	20003608 	.word	0x20003608
 8000f5c:	2000379c 	.word	0x2000379c
 8000f60:	20000254 	.word	0x20000254
 8000f64:	20003faf 	.word	0x20003faf
 8000f68:	20003fae 	.word	0x20003fae
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	0800ff98 	.word	0x0800ff98
 8000f74:	f001 fb84 	bl	8002680 <HAL_Delay>
		  				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f7e:	4807      	ldr	r0, [pc, #28]	; (8000f9c <main+0x908>)
 8000f80:	f001 ffe0 	bl	8002f44 <HAL_GPIO_WritePin>
		  				ITM0_Write("\r\n ESP WAIT 5s AFT RST\r\n",strlen("\r\n ESP WAIT 5s AFT RST\r\n"));
 8000f84:	2118      	movs	r1, #24
 8000f86:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <main+0x90c>)
 8000f88:	f000 f9f6 	bl	8001378 <ITM0_Write>
		  				HAL_Delay(5000);//210419
 8000f8c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f90:	f001 fb76 	bl	8002680 <HAL_Delay>
		  				esp_restart=0;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <main+0x910>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
		 SPI_READ_EN=1;
 8000f9a:	e65d      	b.n	8000c58 <main+0x5c4>
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	0800ffb0 	.word	0x0800ffb0
 8000fa4:	20003fae 	.word	0x20003fae

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	; 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	2230      	movs	r2, #48	; 0x30
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f00d fea5 	bl	800ed06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <SystemClock_Config+0xc8>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a26      	ldr	r2, [pc, #152]	; (8001070 <SystemClock_Config+0xc8>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <SystemClock_Config+0xc8>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <SystemClock_Config+0xcc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a20      	ldr	r2, [pc, #128]	; (8001074 <SystemClock_Config+0xcc>)
 8000ff2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <SystemClock_Config+0xcc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001004:	2301      	movs	r3, #1
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001008:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100e:	2302      	movs	r3, #2
 8001010:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001018:	230c      	movs	r3, #12
 800101a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800101c:	2360      	movs	r3, #96	; 0x60
 800101e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001020:	2302      	movs	r3, #2
 8001022:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001024:	2304      	movs	r3, #4
 8001026:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	f107 0320 	add.w	r3, r7, #32
 800102c:	4618      	mov	r0, r3
 800102e:	f001 ffbd 	bl	8002fac <HAL_RCC_OscConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001038:	f001 f868 	bl	800210c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	230f      	movs	r3, #15
 800103e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001040:	2302      	movs	r3, #2
 8001042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	2103      	movs	r1, #3
 8001058:	4618      	mov	r0, r3
 800105a:	f002 fa1f 	bl	800349c <HAL_RCC_ClockConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001064:	f001 f852 	bl	800210c <Error_Handler>
  }
}
 8001068:	bf00      	nop
 800106a:	3750      	adds	r7, #80	; 0x50
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023800 	.word	0x40023800
 8001074:	40007000 	.word	0x40007000

08001078 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <MX_SPI1_Init+0x64>)
 800107e:	4a18      	ldr	r2, [pc, #96]	; (80010e0 <MX_SPI1_Init+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <MX_SPI1_Init+0x64>)
 8001084:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001088:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <MX_SPI1_Init+0x64>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_SPI1_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_SPI1_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_SPI1_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_SPI1_Init+0x64>)
 80010a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_SPI1_Init+0x64>)
 80010ac:	2208      	movs	r2, #8
 80010ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <MX_SPI1_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_SPI1_Init+0x64>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <MX_SPI1_Init+0x64>)
 80010be:	2200      	movs	r2, #0
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_SPI1_Init+0x64>)
 80010c4:	220a      	movs	r2, #10
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_SPI1_Init+0x64>)
 80010ca:	f002 fbc7 	bl	800385c <HAL_SPI_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010d4:	f001 f81a 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200001b4 	.word	0x200001b4
 80010e0:	40013000 	.word	0x40013000

080010e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08e      	sub	sp, #56	; 0x38
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f8:	f107 0320 	add.w	r3, r7, #32
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
 8001110:	615a      	str	r2, [r3, #20]
 8001112:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001114:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <MX_TIM2_Init+0xf0>)
 8001116:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 800111c:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <MX_TIM2_Init+0xf0>)
 800111e:	2264      	movs	r2, #100	; 0x64
 8001120:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001122:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <MX_TIM2_Init+0xf0>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8001128:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <MX_TIM2_Init+0xf0>)
 800112a:	2264      	movs	r2, #100	; 0x64
 800112c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112e:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <MX_TIM2_Init+0xf0>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001134:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <MX_TIM2_Init+0xf0>)
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800113a:	4826      	ldr	r0, [pc, #152]	; (80011d4 <MX_TIM2_Init+0xf0>)
 800113c:	f002 fe84 	bl	8003e48 <HAL_TIM_Base_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001146:	f000 ffe1 	bl	800210c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001150:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001154:	4619      	mov	r1, r3
 8001156:	481f      	ldr	r0, [pc, #124]	; (80011d4 <MX_TIM2_Init+0xf0>)
 8001158:	f003 fa8c 	bl	8004674 <HAL_TIM_ConfigClockSource>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001162:	f000 ffd3 	bl	800210c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001166:	481b      	ldr	r0, [pc, #108]	; (80011d4 <MX_TIM2_Init+0xf0>)
 8001168:	f002 febd 	bl	8003ee6 <HAL_TIM_OC_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001172:	f000 ffcb 	bl	800210c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8001176:	2108      	movs	r1, #8
 8001178:	4816      	ldr	r0, [pc, #88]	; (80011d4 <MX_TIM2_Init+0xf0>)
 800117a:	f003 f8bd 	bl	80042f8 <HAL_TIM_OnePulse_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001184:	f000 ffc2 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001190:	f107 0320 	add.w	r3, r7, #32
 8001194:	4619      	mov	r1, r3
 8001196:	480f      	ldr	r0, [pc, #60]	; (80011d4 <MX_TIM2_Init+0xf0>)
 8001198:	f003 fe28 	bl	8004dec <HAL_TIMEx_MasterConfigSynchronization>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80011a2:	f000 ffb3 	bl	800210c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 80011a6:	2320      	movs	r3, #32
 80011a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_TIM2_Init+0xf0>)
 80011be:	f003 f9fd 	bl	80045bc <HAL_TIM_OC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80011c8:	f000 ffa0 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	3738      	adds	r7, #56	; 0x38
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	2000020c 	.word	0x2000020c

080011d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <MX_USART1_UART_Init+0x50>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_USART1_UART_Init+0x4c>)
 8001210:	f003 fe6e 	bl	8004ef0 <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800121a:	f000 ff77 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000254 	.word	0x20000254
 8001228:	40011000 	.word	0x40011000

0800122c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b48      	ldr	r3, [pc, #288]	; (8001368 <MX_GPIO_Init+0x13c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a47      	ldr	r2, [pc, #284]	; (8001368 <MX_GPIO_Init+0x13c>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b45      	ldr	r3, [pc, #276]	; (8001368 <MX_GPIO_Init+0x13c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b41      	ldr	r3, [pc, #260]	; (8001368 <MX_GPIO_Init+0x13c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a40      	ldr	r2, [pc, #256]	; (8001368 <MX_GPIO_Init+0x13c>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b3e      	ldr	r3, [pc, #248]	; (8001368 <MX_GPIO_Init+0x13c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	4b3a      	ldr	r3, [pc, #232]	; (8001368 <MX_GPIO_Init+0x13c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a39      	ldr	r2, [pc, #228]	; (8001368 <MX_GPIO_Init+0x13c>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b37      	ldr	r3, [pc, #220]	; (8001368 <MX_GPIO_Init+0x13c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b33      	ldr	r3, [pc, #204]	; (8001368 <MX_GPIO_Init+0x13c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a32      	ldr	r2, [pc, #200]	; (8001368 <MX_GPIO_Init+0x13c>)
 80012a0:	f043 0302 	orr.w	r3, r3, #2
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b30      	ldr	r3, [pc, #192]	; (8001368 <MX_GPIO_Init+0x13c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PCB_LED_GPIO_Port, PCB_LED_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b8:	482c      	ldr	r0, [pc, #176]	; (800136c <MX_GPIO_Init+0x140>)
 80012ba:	f001 fe43 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|WiFi_EN_Pin, GPIO_PIN_SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80012c4:	482a      	ldr	r0, [pc, #168]	; (8001370 <MX_GPIO_Init+0x144>)
 80012c6:	f001 fe3d 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RST_GPIO_Port, SPI_RST_Pin, GPIO_PIN_SET);
 80012ca:	2201      	movs	r2, #1
 80012cc:	2101      	movs	r1, #1
 80012ce:	4829      	ldr	r0, [pc, #164]	; (8001374 <MX_GPIO_Init+0x148>)
 80012d0:	f001 fe38 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PCB_LED_Pin */
  GPIO_InitStruct.Pin = PCB_LED_Pin;
 80012d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012da:	2301      	movs	r3, #1
 80012dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PCB_LED_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	481f      	ldr	r0, [pc, #124]	; (800136c <MX_GPIO_Init+0x140>)
 80012ee:	f001 fbc1 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_BTN_Pin */
  GPIO_InitStruct.Pin = KEY_BTN_Pin;
 80012f2:	2301      	movs	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_BTN_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	481a      	ldr	r0, [pc, #104]	; (8001370 <MX_GPIO_Init+0x144>)
 8001306:	f001 fbb5 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 800130a:	2310      	movs	r3, #16
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4813      	ldr	r0, [pc, #76]	; (8001370 <MX_GPIO_Init+0x144>)
 8001322:	f001 fba7 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_RST_Pin */
  GPIO_InitStruct.Pin = SPI_RST_Pin;
 8001326:	2301      	movs	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132a:	2301      	movs	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_RST_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	480d      	ldr	r0, [pc, #52]	; (8001374 <MX_GPIO_Init+0x148>)
 800133e:	f001 fb99 	bl	8002a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : WiFi_EN_Pin */
  GPIO_InitStruct.Pin = WiFi_EN_Pin;
 8001342:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WiFi_EN_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_GPIO_Init+0x144>)
 800135c:	f001 fb8a 	bl	8002a74 <HAL_GPIO_Init>

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40020800 	.word	0x40020800
 8001370:	40020000 	.word	0x40020000
 8001374:	40020400 	.word	0x40020400

08001378 <ITM0_Write>:

/* USER CODE BEGIN 4 */


int ITM0_Write( char *ptr, int len)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
 int DataIdx;

  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	e009      	b.n	800139c <ITM0_Write+0x24>
  {
    ITM_SendChar(*ptr++);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f957 	bl	8000644 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	3301      	adds	r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dbf1      	blt.n	8001388 <ITM0_Write+0x10>
  }
  return len;
 80013a4:	683b      	ldr	r3, [r7, #0]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SysTick_IRQn 0 */

	ms_ticks++;	//100 ms
 80013b6:	4bba      	ldr	r3, [pc, #744]	; (80016a0 <SysTick_Handler+0x2f0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4ab8      	ldr	r2, [pc, #736]	; (80016a0 <SysTick_Handler+0x2f0>)
 80013be:	6013      	str	r3, [r2, #0]

	ESP_ticks++;
 80013c0:	4bb8      	ldr	r3, [pc, #736]	; (80016a4 <SysTick_Handler+0x2f4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	4ab7      	ldr	r2, [pc, #732]	; (80016a4 <SysTick_Handler+0x2f4>)
 80013c8:	6013      	str	r3, [r2, #0]
	if(mb_eth._w_answer) MB_TOUT_ticks++;
 80013ca:	4bb7      	ldr	r3, [pc, #732]	; (80016a8 <SysTick_Handler+0x2f8>)
 80013cc:	791b      	ldrb	r3, [r3, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d004      	beq.n	80013dc <SysTick_Handler+0x2c>
 80013d2:	4bb6      	ldr	r3, [pc, #728]	; (80016ac <SysTick_Handler+0x2fc>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	4ab4      	ldr	r2, [pc, #720]	; (80016ac <SysTick_Handler+0x2fc>)
 80013da:	6013      	str	r3, [r2, #0]
	if ( mb_eth._w_answer && (mb_eth._timeout < MB_TOUT_ticks))
 80013dc:	4bb2      	ldr	r3, [pc, #712]	; (80016a8 <SysTick_Handler+0x2f8>)
 80013de:	791b      	ldrb	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00c      	beq.n	80013fe <SysTick_Handler+0x4e>
 80013e4:	4bb0      	ldr	r3, [pc, #704]	; (80016a8 <SysTick_Handler+0x2f8>)
 80013e6:	885b      	ldrh	r3, [r3, #2]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4bb0      	ldr	r3, [pc, #704]	; (80016ac <SysTick_Handler+0x2fc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	da05      	bge.n	80013fe <SysTick_Handler+0x4e>
		{
			mb_eth._w_answer=0;
 80013f2:	4bad      	ldr	r3, [pc, #692]	; (80016a8 <SysTick_Handler+0x2f8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	711a      	strb	r2, [r3, #4]
			MB_TOUT_ticks=0;
 80013f8:	4bac      	ldr	r3, [pc, #688]	; (80016ac <SysTick_Handler+0x2fc>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
		}
	}*/
// ENVIO DATOS LoRa ---------------------------------------------------------------//
// ENVIO DATOS WF ---------------------------------------------------------------//

	if((wf._estado_conexion==609 || wf._estado_conexion==700)&&(wf._TCP_Local_Server_EN==0))  wf_snd_flag_ticks++;
 80013fe:	4bac      	ldr	r3, [pc, #688]	; (80016b0 <SysTick_Handler+0x300>)
 8001400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001404:	f240 2261 	movw	r2, #609	; 0x261
 8001408:	4293      	cmp	r3, r2
 800140a:	d005      	beq.n	8001418 <SysTick_Handler+0x68>
 800140c:	4ba8      	ldr	r3, [pc, #672]	; (80016b0 <SysTick_Handler+0x300>)
 800140e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001412:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8001416:	d109      	bne.n	800142c <SysTick_Handler+0x7c>
 8001418:	4ba5      	ldr	r3, [pc, #660]	; (80016b0 <SysTick_Handler+0x300>)
 800141a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800141e:	2b00      	cmp	r3, #0
 8001420:	d104      	bne.n	800142c <SysTick_Handler+0x7c>
 8001422:	4ba4      	ldr	r3, [pc, #656]	; (80016b4 <SysTick_Handler+0x304>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	4aa2      	ldr	r2, [pc, #648]	; (80016b4 <SysTick_Handler+0x304>)
 800142a:	6013      	str	r3, [r2, #0]

	if(wf_snd_flag_ticks>= 5000 && wf._ejecucion!=1 && wf._TCP_Local_Server_EN==0)		 	  WF_SND_FLAG=1;					//230517 wf_snd_flag_ticks>= 2000
 800142c:	4ba1      	ldr	r3, [pc, #644]	; (80016b4 <SysTick_Handler+0x304>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f241 3287 	movw	r2, #4999	; 0x1387
 8001434:	4293      	cmp	r3, r2
 8001436:	dd0c      	ble.n	8001452 <SysTick_Handler+0xa2>
 8001438:	4b9d      	ldr	r3, [pc, #628]	; (80016b0 <SysTick_Handler+0x300>)
 800143a:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 800143e:	2b01      	cmp	r3, #1
 8001440:	d007      	beq.n	8001452 <SysTick_Handler+0xa2>
 8001442:	4b9b      	ldr	r3, [pc, #620]	; (80016b0 <SysTick_Handler+0x300>)
 8001444:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <SysTick_Handler+0xa2>
 800144c:	4b9a      	ldr	r3, [pc, #616]	; (80016b8 <SysTick_Handler+0x308>)
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]

// ENVIO DATOS WF ----------------------------------- ---------------------------//

/**********************[ INICIO - EHTERNET WDG ] **********************/

	if(ETH.S_status == 0)
 8001452:	4b9a      	ldr	r3, [pc, #616]	; (80016bc <SysTick_Handler+0x30c>)
 8001454:	7d9b      	ldrb	r3, [r3, #22]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10e      	bne.n	8001478 <SysTick_Handler+0xc8>
	{
		ETH.ETH_WDG++;
 800145a:	4b98      	ldr	r3, [pc, #608]	; (80016bc <SysTick_Handler+0x30c>)
 800145c:	8a9b      	ldrh	r3, [r3, #20]
 800145e:	3301      	adds	r3, #1
 8001460:	b29a      	uxth	r2, r3
 8001462:	4b96      	ldr	r3, [pc, #600]	; (80016bc <SysTick_Handler+0x30c>)
 8001464:	829a      	strh	r2, [r3, #20]
		if (ETH.ETH_WDG>=64000)
 8001466:	4b95      	ldr	r3, [pc, #596]	; (80016bc <SysTick_Handler+0x30c>)
 8001468:	8a9b      	ldrh	r3, [r3, #20]
 800146a:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 800146e:	d303      	bcc.n	8001478 <SysTick_Handler+0xc8>
		{
			ETH.ETH_WDG=64000;
 8001470:	4b92      	ldr	r3, [pc, #584]	; (80016bc <SysTick_Handler+0x30c>)
 8001472:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8001476:	829a      	strh	r2, [r3, #20]
		}
	}

/**********************[ FIN 	- EHTERNET WDG ] **********************/

if (ms_ticks==100)//(ms_ticks==250)//(ms_ticks==50)
 8001478:	4b89      	ldr	r3, [pc, #548]	; (80016a0 <SysTick_Handler+0x2f0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b64      	cmp	r3, #100	; 0x64
 800147e:	f040 8423 	bne.w	8001cc8 <SysTick_Handler+0x918>
  {
	  dbgn++;
 8001482:	4b8f      	ldr	r3, [pc, #572]	; (80016c0 <SysTick_Handler+0x310>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	4a8d      	ldr	r2, [pc, #564]	; (80016c0 <SysTick_Handler+0x310>)
 800148a:	6013      	str	r3, [r2, #0]
	  ms_ticks=0;
 800148c:	4b84      	ldr	r3, [pc, #528]	; (80016a0 <SysTick_Handler+0x2f0>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
	  min_ticks++;
 8001492:	4b8c      	ldr	r3, [pc, #560]	; (80016c4 <SysTick_Handler+0x314>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	4a8a      	ldr	r2, [pc, #552]	; (80016c4 <SysTick_Handler+0x314>)
 800149a:	6013      	str	r3, [r2, #0]


	  	if(MBUS_ticks==360) MBUS_ticks=0;
 800149c:	4b8a      	ldr	r3, [pc, #552]	; (80016c8 <SysTick_Handler+0x318>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80014a4:	d102      	bne.n	80014ac <SysTick_Handler+0xfc>
 80014a6:	4b88      	ldr	r3, [pc, #544]	; (80016c8 <SysTick_Handler+0x318>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

	  	if (asc==0)  MBUS_ticks++;
 80014ac:	4b87      	ldr	r3, [pc, #540]	; (80016cc <SysTick_Handler+0x31c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d104      	bne.n	80014be <SysTick_Handler+0x10e>
 80014b4:	4b84      	ldr	r3, [pc, #528]	; (80016c8 <SysTick_Handler+0x318>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	3301      	adds	r3, #1
 80014ba:	4a83      	ldr	r2, [pc, #524]	; (80016c8 <SysTick_Handler+0x318>)
 80014bc:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==100) asc=1;
 80014be:	4b82      	ldr	r3, [pc, #520]	; (80016c8 <SysTick_Handler+0x318>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b64      	cmp	r3, #100	; 0x64
 80014c4:	d102      	bne.n	80014cc <SysTick_Handler+0x11c>
 80014c6:	4b81      	ldr	r3, [pc, #516]	; (80016cc <SysTick_Handler+0x31c>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
	  	if (asc==1) MBUS_ticks--;
 80014cc:	4b7f      	ldr	r3, [pc, #508]	; (80016cc <SysTick_Handler+0x31c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d104      	bne.n	80014de <SysTick_Handler+0x12e>
 80014d4:	4b7c      	ldr	r3, [pc, #496]	; (80016c8 <SysTick_Handler+0x318>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3b01      	subs	r3, #1
 80014da:	4a7b      	ldr	r2, [pc, #492]	; (80016c8 <SysTick_Handler+0x318>)
 80014dc:	6013      	str	r3, [r2, #0]
	  	if (MBUS_ticks==0) asc=0;
 80014de:	4b7a      	ldr	r3, [pc, #488]	; (80016c8 <SysTick_Handler+0x318>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d102      	bne.n	80014ec <SysTick_Handler+0x13c>
 80014e6:	4b79      	ldr	r3, [pc, #484]	; (80016cc <SysTick_Handler+0x31c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]


	  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  if(spi_no_debug)
 80014ec:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <SysTick_Handler+0x320>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 83db 	beq.w	8001cac <SysTick_Handler+0x8fc>
	  	  {
	  if(SPI_READ_EN)
 80014f6:	4b77      	ldr	r3, [pc, #476]	; (80016d4 <SysTick_Handler+0x324>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 83da 	beq.w	8001cb4 <SysTick_Handler+0x904>
	  {
	     ETH.S_status=eth_rd_SOCKET_STAT(&ETH,S0_REG);  //este era el bardo
 8001500:	2101      	movs	r1, #1
 8001502:	486e      	ldr	r0, [pc, #440]	; (80016bc <SysTick_Handler+0x30c>)
 8001504:	f00b fedc 	bl	800d2c0 <eth_rd_SOCKET_STAT>
 8001508:	4603      	mov	r3, r0
 800150a:	461a      	mov	r2, r3
 800150c:	4b6b      	ldr	r3, [pc, #428]	; (80016bc <SysTick_Handler+0x30c>)
 800150e:	759a      	strb	r2, [r3, #22]

		  switch(ETH.S_status)	//Check Socket status
 8001510:	4b6a      	ldr	r3, [pc, #424]	; (80016bc <SysTick_Handler+0x30c>)
 8001512:	7d9b      	ldrb	r3, [r3, #22]
 8001514:	2b5f      	cmp	r3, #95	; 0x5f
 8001516:	f200 83d0 	bhi.w	8001cba <SysTick_Handler+0x90a>
 800151a:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <SysTick_Handler+0x170>)
 800151c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001520:	080016d9 	.word	0x080016d9
 8001524:	08001cbb 	.word	0x08001cbb
 8001528:	08001cbb 	.word	0x08001cbb
 800152c:	08001cbb 	.word	0x08001cbb
 8001530:	08001cbb 	.word	0x08001cbb
 8001534:	08001cbb 	.word	0x08001cbb
 8001538:	08001cbb 	.word	0x08001cbb
 800153c:	08001cbb 	.word	0x08001cbb
 8001540:	08001cbb 	.word	0x08001cbb
 8001544:	08001cbb 	.word	0x08001cbb
 8001548:	08001cbb 	.word	0x08001cbb
 800154c:	08001cbb 	.word	0x08001cbb
 8001550:	08001cbb 	.word	0x08001cbb
 8001554:	08001cbb 	.word	0x08001cbb
 8001558:	08001cbb 	.word	0x08001cbb
 800155c:	08001cbb 	.word	0x08001cbb
 8001560:	08001cbb 	.word	0x08001cbb
 8001564:	08001cbb 	.word	0x08001cbb
 8001568:	08001cbb 	.word	0x08001cbb
 800156c:	080016fb 	.word	0x080016fb
 8001570:	0800175d 	.word	0x0800175d
 8001574:	08001775 	.word	0x08001775
 8001578:	0800178d 	.word	0x0800178d
 800157c:	080017a5 	.word	0x080017a5
 8001580:	08001b23 	.word	0x08001b23
 8001584:	08001cbb 	.word	0x08001cbb
 8001588:	08001b3b 	.word	0x08001b3b
 800158c:	08001b53 	.word	0x08001b53
 8001590:	08001b91 	.word	0x08001b91
 8001594:	08001c35 	.word	0x08001c35
 8001598:	08001cbb 	.word	0x08001cbb
 800159c:	08001cbb 	.word	0x08001cbb
 80015a0:	08001cbb 	.word	0x08001cbb
 80015a4:	08001cbb 	.word	0x08001cbb
 80015a8:	08001c4d 	.word	0x08001c4d
 80015ac:	08001cbb 	.word	0x08001cbb
 80015b0:	08001cbb 	.word	0x08001cbb
 80015b4:	08001cbb 	.word	0x08001cbb
 80015b8:	08001cbb 	.word	0x08001cbb
 80015bc:	08001cbb 	.word	0x08001cbb
 80015c0:	08001cbb 	.word	0x08001cbb
 80015c4:	08001cbb 	.word	0x08001cbb
 80015c8:	08001cbb 	.word	0x08001cbb
 80015cc:	08001cbb 	.word	0x08001cbb
 80015d0:	08001cbb 	.word	0x08001cbb
 80015d4:	08001cbb 	.word	0x08001cbb
 80015d8:	08001cbb 	.word	0x08001cbb
 80015dc:	08001cbb 	.word	0x08001cbb
 80015e0:	08001cbb 	.word	0x08001cbb
 80015e4:	08001cbb 	.word	0x08001cbb
 80015e8:	08001c65 	.word	0x08001c65
 80015ec:	08001cbb 	.word	0x08001cbb
 80015f0:	08001cbb 	.word	0x08001cbb
 80015f4:	08001cbb 	.word	0x08001cbb
 80015f8:	08001cbb 	.word	0x08001cbb
 80015fc:	08001cbb 	.word	0x08001cbb
 8001600:	08001cbb 	.word	0x08001cbb
 8001604:	08001cbb 	.word	0x08001cbb
 8001608:	08001cbb 	.word	0x08001cbb
 800160c:	08001cbb 	.word	0x08001cbb
 8001610:	08001cbb 	.word	0x08001cbb
 8001614:	08001cbb 	.word	0x08001cbb
 8001618:	08001cbb 	.word	0x08001cbb
 800161c:	08001cbb 	.word	0x08001cbb
 8001620:	08001cbb 	.word	0x08001cbb
 8001624:	08001cbb 	.word	0x08001cbb
 8001628:	08001c7d 	.word	0x08001c7d
 800162c:	08001cbb 	.word	0x08001cbb
 8001630:	08001cbb 	.word	0x08001cbb
 8001634:	08001cbb 	.word	0x08001cbb
 8001638:	08001cbb 	.word	0x08001cbb
 800163c:	08001cbb 	.word	0x08001cbb
 8001640:	08001cbb 	.word	0x08001cbb
 8001644:	08001cbb 	.word	0x08001cbb
 8001648:	08001cbb 	.word	0x08001cbb
 800164c:	08001cbb 	.word	0x08001cbb
 8001650:	08001cbb 	.word	0x08001cbb
 8001654:	08001cbb 	.word	0x08001cbb
 8001658:	08001cbb 	.word	0x08001cbb
 800165c:	08001cbb 	.word	0x08001cbb
 8001660:	08001cbb 	.word	0x08001cbb
 8001664:	08001cbb 	.word	0x08001cbb
 8001668:	08001cbb 	.word	0x08001cbb
 800166c:	08001cbb 	.word	0x08001cbb
 8001670:	08001cbb 	.word	0x08001cbb
 8001674:	08001cbb 	.word	0x08001cbb
 8001678:	08001cbb 	.word	0x08001cbb
 800167c:	08001cbb 	.word	0x08001cbb
 8001680:	08001cbb 	.word	0x08001cbb
 8001684:	08001cbb 	.word	0x08001cbb
 8001688:	08001cbb 	.word	0x08001cbb
 800168c:	08001cbb 	.word	0x08001cbb
 8001690:	08001cbb 	.word	0x08001cbb
 8001694:	08001cbb 	.word	0x08001cbb
 8001698:	08001cbb 	.word	0x08001cbb
 800169c:	08001c95 	.word	0x08001c95
 80016a0:	20000298 	.word	0x20000298
 80016a4:	200043c4 	.word	0x200043c4
 80016a8:	200030bc 	.word	0x200030bc
 80016ac:	200043cc 	.word	0x200043cc
 80016b0:	20002370 	.word	0x20002370
 80016b4:	20003f58 	.word	0x20003f58
 80016b8:	20003f55 	.word	0x20003f55
 80016bc:	200002a0 	.word	0x200002a0
 80016c0:	200043ec 	.word	0x200043ec
 80016c4:	2000029c 	.word	0x2000029c
 80016c8:	200043c8 	.word	0x200043c8
 80016cc:	20003fb0 	.word	0x20003fb0
 80016d0:	20003fa4 	.word	0x20003fa4
 80016d4:	20003fb4 	.word	0x20003fb4
	     {
			 case SOCK_CLOSED :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSED \r\n",strlen("\r\nS0_SOCK_CLOSED \r\n"));
 80016d8:	4b7f      	ldr	r3, [pc, #508]	; (80018d8 <SysTick_Handler+0x528>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <SysTick_Handler+0x338>
 80016e0:	2113      	movs	r1, #19
 80016e2:	487e      	ldr	r0, [pc, #504]	; (80018dc <SysTick_Handler+0x52c>)
 80016e4:	f7ff fe48 	bl	8001378 <ITM0_Write>
					 eth_wr_SOCKET_CMD(&ETH, S0_REG ,OPEN );
 80016e8:	2201      	movs	r2, #1
 80016ea:	2101      	movs	r1, #1
 80016ec:	487c      	ldr	r0, [pc, #496]	; (80018e0 <SysTick_Handler+0x530>)
 80016ee:	f00b fb89 	bl	800ce04 <eth_wr_SOCKET_CMD>
					 ETH.ETH_WDG=1;
 80016f2:	4b7b      	ldr	r3, [pc, #492]	; (80018e0 <SysTick_Handler+0x530>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	829a      	strh	r2, [r3, #20]


				 }
			 break;
 80016f8:	e2df      	b.n	8001cba <SysTick_Handler+0x90a>
			 case  SOCK_INIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 80016fa:	4b77      	ldr	r3, [pc, #476]	; (80018d8 <SysTick_Handler+0x528>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <SysTick_Handler+0x35a>
 8001702:	2111      	movs	r1, #17
 8001704:	4877      	ldr	r0, [pc, #476]	; (80018e4 <SysTick_Handler+0x534>)
 8001706:	f7ff fe37 	bl	8001378 <ITM0_Write>
					 if(ETH.S_ENserver == 1)
 800170a:	4b75      	ldr	r3, [pc, #468]	; (80018e0 <SysTick_Handler+0x530>)
 800170c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001710:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001714:	2b01      	cmp	r3, #1
 8001716:	d110      	bne.n	800173a <SysTick_Handler+0x38a>
					 {
						 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_INIT \r\n",strlen("\r\nS0_SOCK_INIT \r\n"));
 8001718:	4b6f      	ldr	r3, [pc, #444]	; (80018d8 <SysTick_Handler+0x528>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <SysTick_Handler+0x378>
 8001720:	2111      	movs	r1, #17
 8001722:	4870      	ldr	r0, [pc, #448]	; (80018e4 <SysTick_Handler+0x534>)
 8001724:	f7ff fe28 	bl	8001378 <ITM0_Write>
							eth_wr_SOCKET_CMD(&ETH, S0_REG, LISTEN );
 8001728:	2202      	movs	r2, #2
 800172a:	2101      	movs	r1, #1
 800172c:	486c      	ldr	r0, [pc, #432]	; (80018e0 <SysTick_Handler+0x530>)
 800172e:	f00b fb69 	bl	800ce04 <eth_wr_SOCKET_CMD>
							ETH.ETH_WDG=0;
 8001732:	4b6b      	ldr	r3, [pc, #428]	; (80018e0 <SysTick_Handler+0x530>)
 8001734:	2200      	movs	r2, #0
 8001736:	829a      	strh	r2, [r3, #20]
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5500-CONNECT\r\n",strlen("\r\nETH-W5500-CONNECT\r\n"));
						 	ETH.ETH_WDG=0;
					 }

				 }
			 break;
 8001738:	e2bf      	b.n	8001cba <SysTick_Handler+0x90a>
						    eth_wr_SOCKET_CMD(&ETH,S0_REG, CONNECT);																				//only for server
 800173a:	2204      	movs	r2, #4
 800173c:	2101      	movs	r1, #1
 800173e:	4868      	ldr	r0, [pc, #416]	; (80018e0 <SysTick_Handler+0x530>)
 8001740:	f00b fb60 	bl	800ce04 <eth_wr_SOCKET_CMD>
						 	if (ETH_DBG_EN)ITM0_Write("\r\nETH-W5500-CONNECT\r\n",strlen("\r\nETH-W5500-CONNECT\r\n"));
 8001744:	4b64      	ldr	r3, [pc, #400]	; (80018d8 <SysTick_Handler+0x528>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <SysTick_Handler+0x3a4>
 800174c:	2115      	movs	r1, #21
 800174e:	4866      	ldr	r0, [pc, #408]	; (80018e8 <SysTick_Handler+0x538>)
 8001750:	f7ff fe12 	bl	8001378 <ITM0_Write>
						 	ETH.ETH_WDG=0;
 8001754:	4b62      	ldr	r3, [pc, #392]	; (80018e0 <SysTick_Handler+0x530>)
 8001756:	2200      	movs	r2, #0
 8001758:	829a      	strh	r2, [r3, #20]
			 break;
 800175a:	e2ae      	b.n	8001cba <SysTick_Handler+0x90a>
			 case SOCK_LISTEN :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_LISTEN \r\n",strlen("\r\nS0_SOCK_LISTEN \r\n"));
 800175c:	4b5e      	ldr	r3, [pc, #376]	; (80018d8 <SysTick_Handler+0x528>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <SysTick_Handler+0x3bc>
 8001764:	2113      	movs	r1, #19
 8001766:	4861      	ldr	r0, [pc, #388]	; (80018ec <SysTick_Handler+0x53c>)
 8001768:	f7ff fe06 	bl	8001378 <ITM0_Write>
					 ETH.ETH_WDG=0;
 800176c:	4b5c      	ldr	r3, [pc, #368]	; (80018e0 <SysTick_Handler+0x530>)
 800176e:	2200      	movs	r2, #0
 8001770:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001772:	e2a2      	b.n	8001cba <SysTick_Handler+0x90a>
			 case SOCK_SYNSENT :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNSENT \r\n",strlen("\r\nS0_SOCK_SYNSENT \r\n"));
 8001774:	4b58      	ldr	r3, [pc, #352]	; (80018d8 <SysTick_Handler+0x528>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <SysTick_Handler+0x3d4>
 800177c:	2114      	movs	r1, #20
 800177e:	485c      	ldr	r0, [pc, #368]	; (80018f0 <SysTick_Handler+0x540>)
 8001780:	f7ff fdfa 	bl	8001378 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001784:	4b56      	ldr	r3, [pc, #344]	; (80018e0 <SysTick_Handler+0x530>)
 8001786:	2200      	movs	r2, #0
 8001788:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 800178a:	e296      	b.n	8001cba <SysTick_Handler+0x90a>
			 case SOCK_SYNRECV :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_SYNRECV \r\n",strlen("\r\nS0_SOCK_SYNRECV \r\n"));
 800178c:	4b52      	ldr	r3, [pc, #328]	; (80018d8 <SysTick_Handler+0x528>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <SysTick_Handler+0x3ec>
 8001794:	2114      	movs	r1, #20
 8001796:	4857      	ldr	r0, [pc, #348]	; (80018f4 <SysTick_Handler+0x544>)
 8001798:	f7ff fdee 	bl	8001378 <ITM0_Write>
					 ETH.ETH_WDG=0;
 800179c:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <SysTick_Handler+0x530>)
 800179e:	2200      	movs	r2, #0
 80017a0:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 80017a2:	e28a      	b.n	8001cba <SysTick_Handler+0x90a>
			 case SOCK_ESTABLISHED :
				 {
					 if (ETH_DBG_EN)ITM0_Write("\r\nS0_SOCK_ESTABLISHED \r\n",strlen("\r\nS0_SOCK_ESTABLISHED \r\n"));
 80017a4:	4b4c      	ldr	r3, [pc, #304]	; (80018d8 <SysTick_Handler+0x528>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <SysTick_Handler+0x404>
 80017ac:	2118      	movs	r1, #24
 80017ae:	4852      	ldr	r0, [pc, #328]	; (80018f8 <SysTick_Handler+0x548>)
 80017b0:	f7ff fde2 	bl	8001378 <ITM0_Write>
					 ETH.ETH_WDG=0;
 80017b4:	4b4a      	ldr	r3, [pc, #296]	; (80018e0 <SysTick_Handler+0x530>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	829a      	strh	r2, [r3, #20]

					if (ETH.S_ENserver == 1)  // Si el puerto Ethernet actúa como server (Recibe datos conexión mas pedido mbus
 80017ba:	4b49      	ldr	r3, [pc, #292]	; (80018e0 <SysTick_Handler+0x530>)
 80017bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	f040 80ad 	bne.w	8001924 <SysTick_Handler+0x574>
					{

						S0_get_size = SPI_ETH_REG(&ETH, S_RX_RSR ,S0_REG, SPI_READ, spi_Data,2);//S0_get_size = SPI_ETH_REG(&ETH, S_RX_SZ_ADDR_BASEHH,S_RX_SZ_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 80017ca:	2302      	movs	r3, #2
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	4b4b      	ldr	r3, [pc, #300]	; (80018fc <SysTick_Handler+0x54c>)
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2300      	movs	r3, #0
 80017d4:	2201      	movs	r2, #1
 80017d6:	2126      	movs	r1, #38	; 0x26
 80017d8:	4841      	ldr	r0, [pc, #260]	; (80018e0 <SysTick_Handler+0x530>)
 80017da:	f00b f9c4 	bl	800cb66 <SPI_ETH_REG>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b47      	ldr	r3, [pc, #284]	; (8001900 <SysTick_Handler+0x550>)
 80017e4:	801a      	strh	r2, [r3, #0]
							if(S0_get_size != 0x00)
 80017e6:	4b46      	ldr	r3, [pc, #280]	; (8001900 <SysTick_Handler+0x550>)
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 8264 	beq.w	8001cb8 <SysTick_Handler+0x908>
							{
								eth_rd_SOCKET_DATA(&ETH,S0_RX_BUFF,&rx_mem_pointer,S0_get_size); // read socket data
 80017f0:	4b43      	ldr	r3, [pc, #268]	; (8001900 <SysTick_Handler+0x550>)
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	4a43      	ldr	r2, [pc, #268]	; (8001904 <SysTick_Handler+0x554>)
 80017f6:	2103      	movs	r1, #3
 80017f8:	4839      	ldr	r0, [pc, #228]	; (80018e0 <SysTick_Handler+0x530>)
 80017fa:	f00b fd97 	bl	800d32c <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S_RX_RD0,rx_mem_pointer,S0_REG );		// write rx memory pointer
 80017fe:	4b41      	ldr	r3, [pc, #260]	; (8001904 <SysTick_Handler+0x554>)
 8001800:	881a      	ldrh	r2, [r3, #0]
 8001802:	2301      	movs	r3, #1
 8001804:	2128      	movs	r1, #40	; 0x28
 8001806:	4836      	ldr	r0, [pc, #216]	; (80018e0 <SysTick_Handler+0x530>)
 8001808:	f00b fa33 	bl	800cc72 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,RECV);							// write command to execute
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	2101      	movs	r1, #1
 8001810:	4833      	ldr	r0, [pc, #204]	; (80018e0 <SysTick_Handler+0x530>)
 8001812:	f00b faf7 	bl	800ce04 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,S0_REG))						// wait until end of command execution
 8001816:	bf00      	nop
 8001818:	2101      	movs	r1, #1
 800181a:	4831      	ldr	r0, [pc, #196]	; (80018e0 <SysTick_Handler+0x530>)
 800181c:	f00b fd6b 	bl	800d2f6 <eth_rd_SOCKET_CMD>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f8      	bne.n	8001818 <SysTick_Handler+0x468>
								{}

								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001826:	4b36      	ldr	r3, [pc, #216]	; (8001900 <SysTick_Handler+0x550>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	2300      	movs	r3, #0
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	2300      	movs	r3, #0
 8001832:	4935      	ldr	r1, [pc, #212]	; (8001908 <SysTick_Handler+0x558>)
 8001834:	4835      	ldr	r0, [pc, #212]	; (800190c <SysTick_Handler+0x55c>)
 8001836:	f00d f877 	bl	800e928 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 800183a:	4b31      	ldr	r3, [pc, #196]	; (8001900 <SysTick_Handler+0x550>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	4b33      	ldr	r3, [pc, #204]	; (8001910 <SysTick_Handler+0x560>)
 8001842:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

								if(S0_get_size > 0)	{ ETH.S_data_available=1;}					//Flag data received
 8001846:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <SysTick_Handler+0x550>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <SysTick_Handler+0x4a4>
 800184e:	4b24      	ldr	r3, [pc, #144]	; (80018e0 <SysTick_Handler+0x530>)
 8001850:	2201      	movs	r2, #1
 8001852:	769a      	strb	r2, [r3, #26]

								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001854:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <SysTick_Handler+0x560>)
 8001856:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800185a:	4619      	mov	r1, r3
 800185c:	482b      	ldr	r0, [pc, #172]	; (800190c <SysTick_Handler+0x55c>)
 800185e:	f009 fe23 	bl	800b4a8 <ModBUS_Check>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00d      	beq.n	8001884 <SysTick_Handler+0x4d4>
								{
									ModBUS(&mb_eth);										//ModBUS protocol execution
 8001868:	4829      	ldr	r0, [pc, #164]	; (8001910 <SysTick_Handler+0x560>)
 800186a:	f009 ff1f 	bl	800b6ac <ModBUS>
									CopiaVector(ETH.data, mb_eth._MBUS_2SND, mb_eth._n_MBUS_2SND, 0, 0);
 800186e:	4b28      	ldr	r3, [pc, #160]	; (8001910 <SysTick_Handler+0x560>)
 8001870:	f8d3 2314 	ldr.w	r2, [r3, #788]	; 0x314
 8001874:	2300      	movs	r3, #0
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2300      	movs	r3, #0
 800187a:	4926      	ldr	r1, [pc, #152]	; (8001914 <SysTick_Handler+0x564>)
 800187c:	4822      	ldr	r0, [pc, #136]	; (8001908 <SysTick_Handler+0x558>)
 800187e:	f00d f853 	bl	800e928 <CopiaVector>
 8001882:	e007      	b.n	8001894 <SysTick_Handler+0x4e4>
								}
								else
								{
									if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001884:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <SysTick_Handler+0x528>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <SysTick_Handler+0x4e4>
 800188c:	2111      	movs	r1, #17
 800188e:	4822      	ldr	r0, [pc, #136]	; (8001918 <SysTick_Handler+0x568>)
 8001890:	f7ff fd72 	bl	8001378 <ITM0_Write>
								}

								send_size=mb_eth._n_MBUS_2SND;  //ModBUS data qty
 8001894:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <SysTick_Handler+0x560>)
 8001896:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800189a:	b29a      	uxth	r2, r3
 800189c:	4b1f      	ldr	r3, [pc, #124]	; (800191c <SysTick_Handler+0x56c>)
 800189e:	801a      	strh	r2, [r3, #0]

								eth_wr_SOCKET_DATA(&ETH,S0_RX_BUFF, &tx_mem_pointer, send_size);	// write socket data
 80018a0:	4b1e      	ldr	r3, [pc, #120]	; (800191c <SysTick_Handler+0x56c>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <SysTick_Handler+0x570>)
 80018a6:	2103      	movs	r1, #3
 80018a8:	480d      	ldr	r0, [pc, #52]	; (80018e0 <SysTick_Handler+0x530>)
 80018aa:	f00b fdd0 	bl	800d44e <eth_wr_SOCKET_DATA>

								SPI_ETH_WR_REG_16(&ETH,S_TX_WR,tx_mem_pointer,S0_REG);			// write tx memory pointer//SPI_ETH_WR_REG_16(&ETH,0x424,tx_mem_pointer,0);			// write tx memory pointer
 80018ae:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <SysTick_Handler+0x570>)
 80018b0:	881a      	ldrh	r2, [r3, #0]
 80018b2:	2301      	movs	r3, #1
 80018b4:	2124      	movs	r1, #36	; 0x24
 80018b6:	480a      	ldr	r0, [pc, #40]	; (80018e0 <SysTick_Handler+0x530>)
 80018b8:	f00b f9db 	bl	800cc72 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,SEND);							// write command to execute
 80018bc:	2220      	movs	r2, #32
 80018be:	2101      	movs	r1, #1
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <SysTick_Handler+0x530>)
 80018c2:	f00b fa9f 	bl	800ce04 <eth_wr_SOCKET_CMD>
								while(eth_rd_SOCKET_CMD(&ETH,S0_REG))						// wait until end of command execution
 80018c6:	bf00      	nop
 80018c8:	2101      	movs	r1, #1
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <SysTick_Handler+0x530>)
 80018cc:	f00b fd13 	bl	800d2f6 <eth_rd_SOCKET_CMD>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f8      	bne.n	80018c8 <SysTick_Handler+0x518>

							}
						}
					}
				 }
			 break;
 80018d6:	e1ef      	b.n	8001cb8 <SysTick_Handler+0x908>
 80018d8:	20003f54 	.word	0x20003f54
 80018dc:	0800ffcc 	.word	0x0800ffcc
 80018e0:	200002a0 	.word	0x200002a0
 80018e4:	0800ffe0 	.word	0x0800ffe0
 80018e8:	0800fff4 	.word	0x0800fff4
 80018ec:	0801000c 	.word	0x0801000c
 80018f0:	08010020 	.word	0x08010020
 80018f4:	08010038 	.word	0x08010038
 80018f8:	08010050 	.word	0x08010050
 80018fc:	20003f64 	.word	0x20003f64
 8001900:	20003f5c 	.word	0x20003f5c
 8001904:	20003f60 	.word	0x20003f60
 8001908:	200002c4 	.word	0x200002c4
 800190c:	200030c9 	.word	0x200030c9
 8001910:	200030bc 	.word	0x200030bc
 8001914:	20003250 	.word	0x20003250
 8001918:	0801006c 	.word	0x0801006c
 800191c:	20003f62 	.word	0x20003f62
 8001920:	20003f5e 	.word	0x20003f5e
						if (mb_eth._w_answer==0)
 8001924:	4baa      	ldr	r3, [pc, #680]	; (8001bd0 <SysTick_Handler+0x820>)
 8001926:	791b      	ldrb	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d17c      	bne.n	8001a26 <SysTick_Handler+0x676>
							ETH.data[0]=0x00;
 800192c:	4ba9      	ldr	r3, [pc, #676]	; (8001bd4 <SysTick_Handler+0x824>)
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
							ETH.data[1]=0x00;
 8001934:	4ba7      	ldr	r3, [pc, #668]	; (8001bd4 <SysTick_Handler+0x824>)
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
							ETH.data[2]=0x00;
 800193c:	4ba5      	ldr	r3, [pc, #660]	; (8001bd4 <SysTick_Handler+0x824>)
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
							ETH.data[3]=0x00;
 8001944:	4ba3      	ldr	r3, [pc, #652]	; (8001bd4 <SysTick_Handler+0x824>)
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
							ETH.data[4]=0x00;
 800194c:	4ba1      	ldr	r3, [pc, #644]	; (8001bd4 <SysTick_Handler+0x824>)
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
							ETH.data[5]=0x06;
 8001954:	4b9f      	ldr	r3, [pc, #636]	; (8001bd4 <SysTick_Handler+0x824>)
 8001956:	2206      	movs	r2, #6
 8001958:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
							ETH.data[6]=0x01;
 800195c:	4b9d      	ldr	r3, [pc, #628]	; (8001bd4 <SysTick_Handler+0x824>)
 800195e:	2201      	movs	r2, #1
 8001960:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
							ETH.data[7]=0x03;
 8001964:	4b9b      	ldr	r3, [pc, #620]	; (8001bd4 <SysTick_Handler+0x824>)
 8001966:	2203      	movs	r2, #3
 8001968:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
							ETH.data[8]=0x00;
 800196c:	4b99      	ldr	r3, [pc, #612]	; (8001bd4 <SysTick_Handler+0x824>)
 800196e:	2200      	movs	r2, #0
 8001970:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
							ETH.data[9]=0x00;
 8001974:	4b97      	ldr	r3, [pc, #604]	; (8001bd4 <SysTick_Handler+0x824>)
 8001976:	2200      	movs	r2, #0
 8001978:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
							ETH.data[10]=0x00;
 800197c:	4b95      	ldr	r3, [pc, #596]	; (8001bd4 <SysTick_Handler+0x824>)
 800197e:	2200      	movs	r2, #0
 8001980:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
							ETH.data[11]=0x0A;
 8001984:	4b93      	ldr	r3, [pc, #588]	; (8001bd4 <SysTick_Handler+0x824>)
 8001986:	220a      	movs	r2, #10
 8001988:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
							send_size=12;
 800198c:	4b92      	ldr	r3, [pc, #584]	; (8001bd8 <SysTick_Handler+0x828>)
 800198e:	220c      	movs	r2, #12
 8001990:	801a      	strh	r2, [r3, #0]
							ModBUS_F03_Request(&mb_eth,0,15);
 8001992:	220f      	movs	r2, #15
 8001994:	2100      	movs	r1, #0
 8001996:	488e      	ldr	r0, [pc, #568]	; (8001bd0 <SysTick_Handler+0x820>)
 8001998:	f009 fe31 	bl	800b5fe <ModBUS_F03_Request>
							CopiaVector(ETH.data, mb_eth._MBUS_2SND, 12, 0, 0 );
 800199c:	2300      	movs	r3, #0
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	2300      	movs	r3, #0
 80019a2:	220c      	movs	r2, #12
 80019a4:	498d      	ldr	r1, [pc, #564]	; (8001bdc <SysTick_Handler+0x82c>)
 80019a6:	488e      	ldr	r0, [pc, #568]	; (8001be0 <SysTick_Handler+0x830>)
 80019a8:	f00c ffbe 	bl	800e928 <CopiaVector>
							eth_wr_SOCKET_DATA(&ETH,S0_TX_BUFF, &tx_mem_pointer, send_size);	// write socket data
 80019ac:	4b8a      	ldr	r3, [pc, #552]	; (8001bd8 <SysTick_Handler+0x828>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	4a8c      	ldr	r2, [pc, #560]	; (8001be4 <SysTick_Handler+0x834>)
 80019b2:	2102      	movs	r1, #2
 80019b4:	4887      	ldr	r0, [pc, #540]	; (8001bd4 <SysTick_Handler+0x824>)
 80019b6:	f00b fd4a 	bl	800d44e <eth_wr_SOCKET_DATA>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 80019ba:	4986      	ldr	r1, [pc, #536]	; (8001bd4 <SysTick_Handler+0x824>)
 80019bc:	488a      	ldr	r0, [pc, #552]	; (8001be8 <SysTick_Handler+0x838>)
 80019be:	f00b fdea 	bl	800d596 <SPI_ETH_SNIFF>
							SPI_ETH_WR_REG_16(&ETH,S_TX_WR,tx_mem_pointer,S0_REG);			// write tx memory pointer
 80019c2:	4b88      	ldr	r3, [pc, #544]	; (8001be4 <SysTick_Handler+0x834>)
 80019c4:	881a      	ldrh	r2, [r3, #0]
 80019c6:	2301      	movs	r3, #1
 80019c8:	2124      	movs	r1, #36	; 0x24
 80019ca:	4882      	ldr	r0, [pc, #520]	; (8001bd4 <SysTick_Handler+0x824>)
 80019cc:	f00b f951 	bl	800cc72 <SPI_ETH_WR_REG_16>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 80019d0:	4980      	ldr	r1, [pc, #512]	; (8001bd4 <SysTick_Handler+0x824>)
 80019d2:	4885      	ldr	r0, [pc, #532]	; (8001be8 <SysTick_Handler+0x838>)
 80019d4:	f00b fddf 	bl	800d596 <SPI_ETH_SNIFF>
							eth_wr_SOCKET_CMD(&ETH,S0_REG,SEND);							// write command to execute
 80019d8:	2220      	movs	r2, #32
 80019da:	2101      	movs	r1, #1
 80019dc:	487d      	ldr	r0, [pc, #500]	; (8001bd4 <SysTick_Handler+0x824>)
 80019de:	f00b fa11 	bl	800ce04 <eth_wr_SOCKET_CMD>
						   	 SPI_ETH_SNIFF(&ETH_SPY, &ETH);
 80019e2:	497c      	ldr	r1, [pc, #496]	; (8001bd4 <SysTick_Handler+0x824>)
 80019e4:	4880      	ldr	r0, [pc, #512]	; (8001be8 <SysTick_Handler+0x838>)
 80019e6:	f00b fdd6 	bl	800d596 <SPI_ETH_SNIFF>
							uint16_t read=0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	80fb      	strh	r3, [r7, #6]
								read=SPI_ETH_REG(&ETH, S_IR,S0_REG,SPI_READ, ETH.GAR,1);
 80019ee:	2301      	movs	r3, #1
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	4b7e      	ldr	r3, [pc, #504]	; (8001bec <SysTick_Handler+0x83c>)
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	2300      	movs	r3, #0
 80019f8:	2201      	movs	r2, #1
 80019fa:	2102      	movs	r1, #2
 80019fc:	4875      	ldr	r0, [pc, #468]	; (8001bd4 <SysTick_Handler+0x824>)
 80019fe:	f00b f8b2 	bl	800cb66 <SPI_ETH_REG>
 8001a02:	4603      	mov	r3, r0
 8001a04:	80fb      	strh	r3, [r7, #6]
							mb_eth._w_answer=1;	// Waiting answer flag_w_answer=1;	// Waiting answer flag
 8001a06:	4b72      	ldr	r3, [pc, #456]	; (8001bd0 <SysTick_Handler+0x820>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	711a      	strb	r2, [r3, #4]
							MB_TOUT_ticks=0;	// restart counting
 8001a0c:	4b78      	ldr	r3, [pc, #480]	; (8001bf0 <SysTick_Handler+0x840>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
							if (ETH_DBG_EN) ITM0_Write("\r\n SENT MBUS REQ \r\n",strlen("\r\n\r\n SENT MBUS REQ \r\n\r\n"));
 8001a12:	4b78      	ldr	r3, [pc, #480]	; (8001bf4 <SysTick_Handler+0x844>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 814e 	beq.w	8001cb8 <SysTick_Handler+0x908>
 8001a1c:	2117      	movs	r1, #23
 8001a1e:	4876      	ldr	r0, [pc, #472]	; (8001bf8 <SysTick_Handler+0x848>)
 8001a20:	f7ff fcaa 	bl	8001378 <ITM0_Write>
			 break;
 8001a24:	e148      	b.n	8001cb8 <SysTick_Handler+0x908>
						S0_get_size = SPI_ETH_REG(&ETH, S_RX_RSR ,S0_REG ,SPI_READ, spi_Data,2);
 8001a26:	2302      	movs	r3, #2
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	4b74      	ldr	r3, [pc, #464]	; (8001bfc <SysTick_Handler+0x84c>)
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2201      	movs	r2, #1
 8001a32:	2126      	movs	r1, #38	; 0x26
 8001a34:	4867      	ldr	r0, [pc, #412]	; (8001bd4 <SysTick_Handler+0x824>)
 8001a36:	f00b f896 	bl	800cb66 <SPI_ETH_REG>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b70      	ldr	r3, [pc, #448]	; (8001c00 <SysTick_Handler+0x850>)
 8001a40:	801a      	strh	r2, [r3, #0]
						if(S0_get_size != 0x00)
 8001a42:	4b6f      	ldr	r3, [pc, #444]	; (8001c00 <SysTick_Handler+0x850>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8136 	beq.w	8001cb8 <SysTick_Handler+0x908>
								eth_rd_SOCKET_DATA(&ETH,S0_RX_BUFF,&rx_mem_pointer,S0_get_size); // read socket data
 8001a4c:	4b6c      	ldr	r3, [pc, #432]	; (8001c00 <SysTick_Handler+0x850>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	4a6c      	ldr	r2, [pc, #432]	; (8001c04 <SysTick_Handler+0x854>)
 8001a52:	2103      	movs	r1, #3
 8001a54:	485f      	ldr	r0, [pc, #380]	; (8001bd4 <SysTick_Handler+0x824>)
 8001a56:	f00b fc69 	bl	800d32c <eth_rd_SOCKET_DATA>
								SPI_ETH_WR_REG_16(&ETH,S_RX_RD0,rx_mem_pointer,S0_REG);		// write rx memory pointer
 8001a5a:	4b6a      	ldr	r3, [pc, #424]	; (8001c04 <SysTick_Handler+0x854>)
 8001a5c:	881a      	ldrh	r2, [r3, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	2128      	movs	r1, #40	; 0x28
 8001a62:	485c      	ldr	r0, [pc, #368]	; (8001bd4 <SysTick_Handler+0x824>)
 8001a64:	f00b f905 	bl	800cc72 <SPI_ETH_WR_REG_16>
								eth_wr_SOCKET_CMD(&ETH,S0_REG,RECV);							// write command to execute
 8001a68:	2240      	movs	r2, #64	; 0x40
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	4859      	ldr	r0, [pc, #356]	; (8001bd4 <SysTick_Handler+0x824>)
 8001a6e:	f00b f9c9 	bl	800ce04 <eth_wr_SOCKET_CMD>
								if (ETH_DBG_EN) ITM0_Write("\r\n RCVD DATA \r\n",strlen("\r\n RCVD DATA \r\n"));
 8001a72:	4b60      	ldr	r3, [pc, #384]	; (8001bf4 <SysTick_Handler+0x844>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <SysTick_Handler+0x6d2>
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	4862      	ldr	r0, [pc, #392]	; (8001c08 <SysTick_Handler+0x858>)
 8001a7e:	f7ff fc7b 	bl	8001378 <ITM0_Write>
								CopiaVector(mb_eth._MBUS_RCVD, ETH.data, S0_get_size, 0, 0 );
 8001a82:	4b5f      	ldr	r3, [pc, #380]	; (8001c00 <SysTick_Handler+0x850>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	4954      	ldr	r1, [pc, #336]	; (8001be0 <SysTick_Handler+0x830>)
 8001a90:	485e      	ldr	r0, [pc, #376]	; (8001c0c <SysTick_Handler+0x85c>)
 8001a92:	f00c ff49 	bl	800e928 <CopiaVector>
								mb_eth._n_MBUS_RCVD=S0_get_size;
 8001a96:	4b5a      	ldr	r3, [pc, #360]	; (8001c00 <SysTick_Handler+0x850>)
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b4c      	ldr	r3, [pc, #304]	; (8001bd0 <SysTick_Handler+0x820>)
 8001a9e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
								if(S0_get_size > 0)	{ ETH.S_data_available=1;}
 8001aa2:	4b57      	ldr	r3, [pc, #348]	; (8001c00 <SysTick_Handler+0x850>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <SysTick_Handler+0x700>
 8001aaa:	4b4a      	ldr	r3, [pc, #296]	; (8001bd4 <SysTick_Handler+0x824>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	769a      	strb	r2, [r3, #26]
								if(ModBUS_Check(mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD))		//Ckecks ModBUS type data
 8001ab0:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <SysTick_Handler+0x820>)
 8001ab2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4854      	ldr	r0, [pc, #336]	; (8001c0c <SysTick_Handler+0x85c>)
 8001aba:	f009 fcf5 	bl	800b4a8 <ModBUS_Check>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d024      	beq.n	8001b0e <SysTick_Handler+0x75e>
										mb_eth._w_answer=0;  									//Si el mensaje recibido ya es modbus digo que ya recibi
 8001ac4:	4b42      	ldr	r3, [pc, #264]	; (8001bd0 <SysTick_Handler+0x820>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	711a      	strb	r2, [r3, #4]
										MB_TOUT_ticks=0;
 8001aca:	4b49      	ldr	r3, [pc, #292]	; (8001bf0 <SysTick_Handler+0x840>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
										ModBUS(&mb_eth);										//ModBUS protocol execution
 8001ad0:	483f      	ldr	r0, [pc, #252]	; (8001bd0 <SysTick_Handler+0x820>)
 8001ad2:	f009 fdeb 	bl	800b6ac <ModBUS>
										CopiaVector(ETH.swap, mb_eth._MBUS_RCVD, mb_eth._n_MBUS_RCVD, 0, 0);
 8001ad6:	4b3e      	ldr	r3, [pc, #248]	; (8001bd0 <SysTick_Handler+0x820>)
 8001ad8:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8001adc:	2300      	movs	r3, #0
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	494a      	ldr	r1, [pc, #296]	; (8001c0c <SysTick_Handler+0x85c>)
 8001ae4:	484a      	ldr	r0, [pc, #296]	; (8001c10 <SysTick_Handler+0x860>)
 8001ae6:	f00c ff1f 	bl	800e928 <CopiaVector>
										CopiaVector(mb_wf._Holding_Registers, mb_eth._Holding_Registers, 64, 0, 0);
 8001aea:	2300      	movs	r3, #0
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2300      	movs	r3, #0
 8001af0:	2240      	movs	r2, #64	; 0x40
 8001af2:	4948      	ldr	r1, [pc, #288]	; (8001c14 <SysTick_Handler+0x864>)
 8001af4:	4848      	ldr	r0, [pc, #288]	; (8001c18 <SysTick_Handler+0x868>)
 8001af6:	f00c ff17 	bl	800e928 <CopiaVector>
										if (ETH_DBG_EN) ITM0_Write("\r\n RCVD MBUS REQ \r\n",strlen("\r\n\r\n RCVD MBUS REQ \r\n\r\n"));
 8001afa:	4b3e      	ldr	r3, [pc, #248]	; (8001bf4 <SysTick_Handler+0x844>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 80da 	beq.w	8001cb8 <SysTick_Handler+0x908>
 8001b04:	2117      	movs	r1, #23
 8001b06:	4845      	ldr	r0, [pc, #276]	; (8001c1c <SysTick_Handler+0x86c>)
 8001b08:	f7ff fc36 	bl	8001378 <ITM0_Write>
			 break;
 8001b0c:	e0d4      	b.n	8001cb8 <SysTick_Handler+0x908>
										if (ETH_DBG_EN) ITM0_Write("\r\n NO MBUS \r\n",strlen("\r\n\r\n NO MBUS \r\n\r\n"));
 8001b0e:	4b39      	ldr	r3, [pc, #228]	; (8001bf4 <SysTick_Handler+0x844>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 80d0 	beq.w	8001cb8 <SysTick_Handler+0x908>
 8001b18:	2111      	movs	r1, #17
 8001b1a:	4841      	ldr	r0, [pc, #260]	; (8001c20 <SysTick_Handler+0x870>)
 8001b1c:	f7ff fc2c 	bl	8001378 <ITM0_Write>
			 break;
 8001b20:	e0ca      	b.n	8001cb8 <SysTick_Handler+0x908>
			 case SOCK_FIN_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_FIN_WAIT \r\n",strlen("\r\nS0_SOCK_FIN_WAIT \r\n"));
 8001b22:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <SysTick_Handler+0x844>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <SysTick_Handler+0x782>
 8001b2a:	2115      	movs	r1, #21
 8001b2c:	483d      	ldr	r0, [pc, #244]	; (8001c24 <SysTick_Handler+0x874>)
 8001b2e:	f7ff fc23 	bl	8001378 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b32:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <SysTick_Handler+0x824>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001b38:	e0bf      	b.n	8001cba <SysTick_Handler+0x90a>
			 case SOCK_CLOSING :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSING \r\n",strlen("\r\nS0_SOCK_CLOSING \r\n"));
 8001b3a:	4b2e      	ldr	r3, [pc, #184]	; (8001bf4 <SysTick_Handler+0x844>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <SysTick_Handler+0x79a>
 8001b42:	2114      	movs	r1, #20
 8001b44:	4838      	ldr	r0, [pc, #224]	; (8001c28 <SysTick_Handler+0x878>)
 8001b46:	f7ff fc17 	bl	8001378 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001b4a:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <SysTick_Handler+0x824>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001b50:	e0b3      	b.n	8001cba <SysTick_Handler+0x90a>
			 case  SOCK_TIME_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_TIME_WAIT \r\n",strlen("\r\nS0_SOCK_TIME_WAIT \r\n"));
 8001b52:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <SysTick_Handler+0x844>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <SysTick_Handler+0x7b2>
 8001b5a:	2116      	movs	r1, #22
 8001b5c:	4833      	ldr	r0, [pc, #204]	; (8001c2c <SysTick_Handler+0x87c>)
 8001b5e:	f7ff fc0b 	bl	8001378 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,S0_REG, DISCON );
 8001b62:	2208      	movs	r2, #8
 8001b64:	2101      	movs	r1, #1
 8001b66:	481b      	ldr	r0, [pc, #108]	; (8001bd4 <SysTick_Handler+0x824>)
 8001b68:	f00b f94c 	bl	800ce04 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH,S_CR ,S0_REG,SPI_READ, spi_Data,1))//while( SPI_ETH_REG(&ETH, S_CR_ADDR_BASEH,S_CR_ADDR_BASEL ,SPI_READ, spi_Data,1))
 8001b6c:	bf00      	nop
 8001b6e:	2301      	movs	r3, #1
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <SysTick_Handler+0x84c>)
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2300      	movs	r3, #0
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	4815      	ldr	r0, [pc, #84]	; (8001bd4 <SysTick_Handler+0x824>)
 8001b7e:	f00a fff2 	bl	800cb66 <SPI_ETH_REG>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f2      	bne.n	8001b6e <SysTick_Handler+0x7be>
					{}
					ETH.ETH_WDG=0;
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <SysTick_Handler+0x824>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001b8e:	e094      	b.n	8001cba <SysTick_Handler+0x90a>
			 case SOCK_CLOSE_WAIT :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_CLOSE_WAIT \r\n",strlen("\r\nS0_SOCK_CLOSE_WAIT \r\n"));
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <SysTick_Handler+0x844>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <SysTick_Handler+0x7f0>
 8001b98:	2117      	movs	r1, #23
 8001b9a:	4825      	ldr	r0, [pc, #148]	; (8001c30 <SysTick_Handler+0x880>)
 8001b9c:	f7ff fbec 	bl	8001378 <ITM0_Write>
					eth_wr_SOCKET_CMD(&ETH,S0_REG,DISCON );
 8001ba0:	2208      	movs	r2, #8
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <SysTick_Handler+0x824>)
 8001ba6:	f00b f92d 	bl	800ce04 <eth_wr_SOCKET_CMD>
					while( SPI_ETH_REG(&ETH,S_CR,S0_REG,SPI_READ, spi_Data,1))
 8001baa:	bf00      	nop
 8001bac:	2301      	movs	r3, #1
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <SysTick_Handler+0x84c>)
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <SysTick_Handler+0x824>)
 8001bbc:	f00a ffd3 	bl	800cb66 <SPI_ETH_REG>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f2      	bne.n	8001bac <SysTick_Handler+0x7fc>
					{}
					ETH.ETH_WDG=0;
 8001bc6:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <SysTick_Handler+0x824>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001bcc:	e075      	b.n	8001cba <SysTick_Handler+0x90a>
 8001bce:	bf00      	nop
 8001bd0:	200030bc 	.word	0x200030bc
 8001bd4:	200002a0 	.word	0x200002a0
 8001bd8:	20003f62 	.word	0x20003f62
 8001bdc:	20003250 	.word	0x20003250
 8001be0:	200002c4 	.word	0x200002c4
 8001be4:	20003f5e 	.word	0x20003f5e
 8001be8:	20001314 	.word	0x20001314
 8001bec:	200012c4 	.word	0x200012c4
 8001bf0:	200043cc 	.word	0x200043cc
 8001bf4:	20003f54 	.word	0x20003f54
 8001bf8:	0801007c 	.word	0x0801007c
 8001bfc:	20003f64 	.word	0x20003f64
 8001c00:	20003f5c 	.word	0x20003f5c
 8001c04:	20003f60 	.word	0x20003f60
 8001c08:	08010090 	.word	0x08010090
 8001c0c:	200030c9 	.word	0x200030c9
 8001c10:	20000ac4 	.word	0x20000ac4
 8001c14:	200033dc 	.word	0x200033dc
 8001c18:	20003928 	.word	0x20003928
 8001c1c:	080100a0 	.word	0x080100a0
 8001c20:	0801006c 	.word	0x0801006c
 8001c24:	080100b4 	.word	0x080100b4
 8001c28:	080100cc 	.word	0x080100cc
 8001c2c:	080100e4 	.word	0x080100e4
 8001c30:	080100fc 	.word	0x080100fc
			 case SOCK_LAST_ACK :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_LAST_ACK \r\n",strlen("\r\nS0_SOCK_LAST_ACK \r\n"));
 8001c34:	4b6e      	ldr	r3, [pc, #440]	; (8001df0 <SysTick_Handler+0xa40>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <SysTick_Handler+0x894>
 8001c3c:	2115      	movs	r1, #21
 8001c3e:	486d      	ldr	r0, [pc, #436]	; (8001df4 <SysTick_Handler+0xa44>)
 8001c40:	f7ff fb9a 	bl	8001378 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001c44:	4b6c      	ldr	r3, [pc, #432]	; (8001df8 <SysTick_Handler+0xa48>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001c4a:	e036      	b.n	8001cba <SysTick_Handler+0x90a>
			 case SOCK_UDP :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_UDP \r\n",strlen("\r\nS0_SOCK_UDP \r\n"));
 8001c4c:	4b68      	ldr	r3, [pc, #416]	; (8001df0 <SysTick_Handler+0xa40>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <SysTick_Handler+0x8ac>
 8001c54:	2110      	movs	r1, #16
 8001c56:	4869      	ldr	r0, [pc, #420]	; (8001dfc <SysTick_Handler+0xa4c>)
 8001c58:	f7ff fb8e 	bl	8001378 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001c5c:	4b66      	ldr	r3, [pc, #408]	; (8001df8 <SysTick_Handler+0xa48>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001c62:	e02a      	b.n	8001cba <SysTick_Handler+0x90a>
			 case  SOCK_IPRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_IPRAW \r\n",strlen("\r\nS0_SOCK_IPRAW \r\n"));
 8001c64:	4b62      	ldr	r3, [pc, #392]	; (8001df0 <SysTick_Handler+0xa40>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <SysTick_Handler+0x8c4>
 8001c6c:	2112      	movs	r1, #18
 8001c6e:	4864      	ldr	r0, [pc, #400]	; (8001e00 <SysTick_Handler+0xa50>)
 8001c70:	f7ff fb82 	bl	8001378 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001c74:	4b60      	ldr	r3, [pc, #384]	; (8001df8 <SysTick_Handler+0xa48>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001c7a:	e01e      	b.n	8001cba <SysTick_Handler+0x90a>
			 case  SOCK_MACRAW :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_MACRAW \r\n",strlen("\r\nS0_SOCK_MACRAW \r\n"));
 8001c7c:	4b5c      	ldr	r3, [pc, #368]	; (8001df0 <SysTick_Handler+0xa40>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <SysTick_Handler+0x8dc>
 8001c84:	2113      	movs	r1, #19
 8001c86:	485f      	ldr	r0, [pc, #380]	; (8001e04 <SysTick_Handler+0xa54>)
 8001c88:	f7ff fb76 	bl	8001378 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001c8c:	4b5a      	ldr	r3, [pc, #360]	; (8001df8 <SysTick_Handler+0xa48>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001c92:	e012      	b.n	8001cba <SysTick_Handler+0x90a>
			 case SOCK_PPOE :
				 {
					 if (ETH_DBG_EN) ITM0_Write("\r\nS0_SOCK_PPOE \r\n",strlen("\r\nS0_SOCK_PPOE \r\n"));
 8001c94:	4b56      	ldr	r3, [pc, #344]	; (8001df0 <SysTick_Handler+0xa40>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <SysTick_Handler+0x8f4>
 8001c9c:	2111      	movs	r1, #17
 8001c9e:	485a      	ldr	r0, [pc, #360]	; (8001e08 <SysTick_Handler+0xa58>)
 8001ca0:	f7ff fb6a 	bl	8001378 <ITM0_Write>
					 ETH.ETH_WDG=0;
 8001ca4:	4b54      	ldr	r3, [pc, #336]	; (8001df8 <SysTick_Handler+0xa48>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	829a      	strh	r2, [r3, #20]
				 }
			 break;
 8001caa:	e006      	b.n	8001cba <SysTick_Handler+0x90a>
	  }
	  }else
	  	  {
		  //ETH.operacion=SPI_READ;
		  //ETH.TX[3]=0x00;
		  SPI_ETH(&ETH);
 8001cac:	4852      	ldr	r0, [pc, #328]	; (8001df8 <SysTick_Handler+0xa48>)
 8001cae:	f00a ff32 	bl	800cb16 <SPI_ETH>
 8001cb2:	e002      	b.n	8001cba <SysTick_Handler+0x90a>
			 default:
 8001cb4:	bf00      	nop
 8001cb6:	e000      	b.n	8001cba <SysTick_Handler+0x90a>
			 break;
 8001cb8:	bf00      	nop
	  	  }
	  if(min_ticks==2)//if(min_ticks==10)
 8001cba:	4b54      	ldr	r3, [pc, #336]	; (8001e0c <SysTick_Handler+0xa5c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d102      	bne.n	8001cc8 <SysTick_Handler+0x918>
		  {
		  	  min_ticks=0;  /* SETEO CADA 2 min*/
 8001cc2:	4b52      	ldr	r3, [pc, #328]	; (8001e0c <SysTick_Handler+0xa5c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
		  }
  }

if(EN_USART1_TMR==1) USART1_ticks++;
 8001cc8:	4b51      	ldr	r3, [pc, #324]	; (8001e10 <SysTick_Handler+0xa60>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d104      	bne.n	8001cda <SysTick_Handler+0x92a>
 8001cd0:	4b50      	ldr	r3, [pc, #320]	; (8001e14 <SysTick_Handler+0xa64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	4a4f      	ldr	r2, [pc, #316]	; (8001e14 <SysTick_Handler+0xa64>)
 8001cd8:	6013      	str	r3, [r2, #0]

if(USART1_ticks>=2)//if(USART1_ticks>=10)
 8001cda:	4b4e      	ldr	r3, [pc, #312]	; (8001e14 <SysTick_Handler+0xa64>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	dd0f      	ble.n	8001d02 <SysTick_Handler+0x952>
{
	USART1_ticks=0;
 8001ce2:	4b4c      	ldr	r3, [pc, #304]	; (8001e14 <SysTick_Handler+0xa64>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
	FLAG_USART1=1;
 8001ce8:	4b4b      	ldr	r3, [pc, #300]	; (8001e18 <SysTick_Handler+0xa68>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
	EN_USART1_TMR=0;
 8001cee:	4b48      	ldr	r3, [pc, #288]	; (8001e10 <SysTick_Handler+0xa60>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
	items_rx=uart1pass;
 8001cf4:	4b49      	ldr	r3, [pc, #292]	; (8001e1c <SysTick_Handler+0xa6c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a49      	ldr	r2, [pc, #292]	; (8001e20 <SysTick_Handler+0xa70>)
 8001cfa:	6013      	str	r3, [r2, #0]
	uart1pass=0;
 8001cfc:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <SysTick_Handler+0xa6c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d02:	f000 fc9d 	bl	8002640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	if(wf._estado_conexion==4)//if((wf._estado_conexion!=1)&&(wf._estado_conexion!=2)&&(resultado!=20)&&(resultado!=24)) //Solo cuento cuando no estahaciendo otra cosa
 8001d06:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <SysTick_Handler+0xa74>)
 8001d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d105      	bne.n	8001d1c <SysTick_Handler+0x96c>
	{
		ticks++;
 8001d10:	4b45      	ldr	r3, [pc, #276]	; (8001e28 <SysTick_Handler+0xa78>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3301      	adds	r3, #1
 8001d16:	4a44      	ldr	r2, [pc, #272]	; (8001e28 <SysTick_Handler+0xa78>)
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e002      	b.n	8001d22 <SysTick_Handler+0x972>
	}
	else
	{
		ticks=0;
 8001d1c:	4b42      	ldr	r3, [pc, #264]	; (8001e28 <SysTick_Handler+0xa78>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
	}

	if(wf._ejecucion==1)
 8001d22:	4b40      	ldr	r3, [pc, #256]	; (8001e24 <SysTick_Handler+0xa74>)
 8001d24:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	; 0xab0
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d158      	bne.n	8001dde <SysTick_Handler+0xa2e>
		{
			if (FLAG_TIMEOUT!=1)
 8001d2c:	4b3f      	ldr	r3, [pc, #252]	; (8001e2c <SysTick_Handler+0xa7c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d017      	beq.n	8001d64 <SysTick_Handler+0x9b4>
			{
				if(wf._instruccion!=2) wf._ticks++;//-----------------------Solo cuento una vez reconcido el timeout, cuando entro al timeout no cuento
 8001d34:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <SysTick_Handler+0xa74>)
 8001d36:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d006      	beq.n	8001d4c <SysTick_Handler+0x99c>
 8001d3e:	4b39      	ldr	r3, [pc, #228]	; (8001e24 <SysTick_Handler+0xa74>)
 8001d40:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001d44:	3301      	adds	r3, #1
 8001d46:	4a37      	ldr	r2, [pc, #220]	; (8001e24 <SysTick_Handler+0xa74>)
 8001d48:	f8c2 3cb4 	str.w	r3, [r2, #3252]	; 0xcb4
				if(wf._instruccion==2) wf._ticks2++;
 8001d4c:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <SysTick_Handler+0xa74>)
 8001d4e:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d106      	bne.n	8001d64 <SysTick_Handler+0x9b4>
 8001d56:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <SysTick_Handler+0xa74>)
 8001d58:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	4a31      	ldr	r2, [pc, #196]	; (8001e24 <SysTick_Handler+0xa74>)
 8001d60:	f8c2 3cb8 	str.w	r3, [r2, #3256]	; 0xcb8
			}


			if ((wf._instruccion!=2)&&(wf._ticks > 5500)) //if (wf._ticks > 5000)
 8001d64:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <SysTick_Handler+0xa74>)
 8001d66:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d018      	beq.n	8001da0 <SysTick_Handler+0x9f0>
 8001d6e:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <SysTick_Handler+0xa74>)
 8001d70:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8001d74:	f241 527c 	movw	r2, #5500	; 0x157c
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	dd11      	ble.n	8001da0 <SysTick_Handler+0x9f0>
			{
				FLAG_TIMEOUT=1;
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <SysTick_Handler+0xa7c>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
				if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001d82:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <SysTick_Handler+0xa80>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f242 020c 	movw	r2, #8204	; 0x200c
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d107      	bne.n	8001da0 <SysTick_Handler+0x9f0>
				{
					HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001d90:	2201      	movs	r2, #1
 8001d92:	4928      	ldr	r1, [pc, #160]	; (8001e34 <SysTick_Handler+0xa84>)
 8001d94:	4826      	ldr	r0, [pc, #152]	; (8001e30 <SysTick_Handler+0xa80>)
 8001d96:	f003 f9b9 	bl	800510c <HAL_UART_Receive_IT>
					EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001d9a:	4b27      	ldr	r3, [pc, #156]	; (8001e38 <SysTick_Handler+0xa88>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	701a      	strb	r2, [r3, #0]
				}
				//wf._ticks=0;
			}
			if ((wf._instruccion==2)&&(wf._ticks2 > 20500)) //if (wf._ticks > 5000)
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <SysTick_Handler+0xa74>)
 8001da2:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d11d      	bne.n	8001de6 <SysTick_Handler+0xa36>
 8001daa:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <SysTick_Handler+0xa74>)
 8001dac:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8001db0:	f245 0214 	movw	r2, #20500	; 0x5014
 8001db4:	4293      	cmp	r3, r2
 8001db6:	dd16      	ble.n	8001de6 <SysTick_Handler+0xa36>
			{
				FLAG_TIMEOUT=1;
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <SysTick_Handler+0xa7c>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
				if(huart1.Instance->CR1 == 0x200C)  //--------------------Evito error UART colgado
 8001dbe:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <SysTick_Handler+0xa80>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f242 020c 	movw	r2, #8204	; 0x200c
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d10c      	bne.n	8001de6 <SysTick_Handler+0xa36>
				{
					HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1);
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4919      	ldr	r1, [pc, #100]	; (8001e34 <SysTick_Handler+0xa84>)
 8001dd0:	4817      	ldr	r0, [pc, #92]	; (8001e30 <SysTick_Handler+0xa80>)
 8001dd2:	f003 f99b 	bl	800510c <HAL_UART_Receive_IT>
					EN_UART1_TMR=0; //OBS-VER Para que me vuelva a habilitar el timer
 8001dd6:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <SysTick_Handler+0xa88>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
		else
		{
			wf._ticks=0;
		}
  /* USER CODE END SysTick_IRQn 1 */
}
 8001ddc:	e003      	b.n	8001de6 <SysTick_Handler+0xa36>
			wf._ticks=0;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <SysTick_Handler+0xa74>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20003f54 	.word	0x20003f54
 8001df4:	08010114 	.word	0x08010114
 8001df8:	200002a0 	.word	0x200002a0
 8001dfc:	0801012c 	.word	0x0801012c
 8001e00:	08010140 	.word	0x08010140
 8001e04:	08010154 	.word	0x08010154
 8001e08:	08010168 	.word	0x08010168
 8001e0c:	2000029c 	.word	0x2000029c
 8001e10:	20003fa9 	.word	0x20003fa9
 8001e14:	200043dc 	.word	0x200043dc
 8001e18:	200043e0 	.word	0x200043e0
 8001e1c:	200043d8 	.word	0x200043d8
 8001e20:	200043e4 	.word	0x200043e4
 8001e24:	20002370 	.word	0x20002370
 8001e28:	200043d0 	.word	0x200043d0
 8001e2c:	20003faa 	.word	0x20003faa
 8001e30:	20000254 	.word	0x20000254
 8001e34:	200043bc 	.word	0x200043bc
 8001e38:	20003fa8 	.word	0x20003fa8

08001e3c <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *ERRUART)

{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	if(ERRUART->Instance==USART1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a11      	ldr	r2, [pc, #68]	; (8001e90 <HAL_UART_ErrorCallback+0x54>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d11c      	bne.n	8001e88 <HAL_UART_ErrorCallback+0x4c>
	{
		 volatile int aore=0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
		 volatile int bore=0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]

		// if ( UART_FLAG_ORE == HAL_UART_GetError(huart1))
		//{
		//Al leer los registros de esta forma SR y luego DR se resetean los errores de Framing Noise y Overrun FE NE ORE
		//}
			 wf._debug_count9++;
 8001e56:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <HAL_UART_ErrorCallback+0x58>)
 8001e58:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <HAL_UART_ErrorCallback+0x58>)
 8001e60:	f8c2 3d1c 	str.w	r3, [r2, #3356]	; 0xd1c
			aore=ERRUART->Instance->SR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	60fb      	str	r3, [r7, #12]
			bore=ERRUART->Instance->DR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	60bb      	str	r3, [r7, #8]


		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f003 f888 	bl	8004f8a <HAL_UART_DeInit>
		 MX_USART1_UART_Init();
 8001e7a:	f7ff f9ad 	bl	80011d8 <MX_USART1_UART_Init>
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4905      	ldr	r1, [pc, #20]	; (8001e98 <HAL_UART_ErrorCallback+0x5c>)
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f003 f942 	bl	800510c <HAL_UART_Receive_IT>
		//HAL_UART_Transmit_IT(&huart5,"U4",strlen("U4"));
		 HAL_UART_DeInit(ERRUART);
		 MX_USART2_UART_Init();
		 HAL_UART_Receive_IT(ERRUART,(uint8_t *)UART_RX_byte,1);
	}*/
}
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40011000 	.word	0x40011000
 8001e94:	20002370 	.word	0x20002370
 8001e98:	200043bc 	.word	0x200043bc

08001e9c <HAL_UART_RxCpltCallback>:
		wf._debug_count10++;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *INTSERIE)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

// WiFi	USART 1 TIMER2
	if(INTSERIE->Instance==USART1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a15      	ldr	r2, [pc, #84]	; (8001f00 <HAL_UART_RxCpltCallback+0x64>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d123      	bne.n	8001ef6 <HAL_UART_RxCpltCallback+0x5a>
		 {
			UART_RX_vect[UART_RX_pos]=UART_RX_byte[0];
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_UART_RxCpltCallback+0x68>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a15      	ldr	r2, [pc, #84]	; (8001f08 <HAL_UART_RxCpltCallback+0x6c>)
 8001eb4:	7811      	ldrb	r1, [r2, #0]
 8001eb6:	4a15      	ldr	r2, [pc, #84]	; (8001f0c <HAL_UART_RxCpltCallback+0x70>)
 8001eb8:	54d1      	strb	r1, [r2, r3]
			UART_RX_pos++;
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_UART_RxCpltCallback+0x68>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	4a10      	ldr	r2, [pc, #64]	; (8001f04 <HAL_UART_RxCpltCallback+0x68>)
 8001ec2:	6013      	str	r3, [r2, #0]
			if(UART_RX_pos>=512) UART_RX_pos=512;
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_UART_RxCpltCallback+0x68>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ecc:	db03      	blt.n	8001ed6 <HAL_UART_RxCpltCallback+0x3a>
 8001ece:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <HAL_UART_RxCpltCallback+0x68>)
 8001ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed4:	601a      	str	r2, [r3, #0]
			HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	480d      	ldr	r0, [pc, #52]	; (8001f10 <HAL_UART_RxCpltCallback+0x74>)
 8001eda:	f002 f85d 	bl	8003f98 <HAL_TIM_OC_Start_IT>
			TIM2->CNT=1;
 8001ede:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24
			EN_UART1_TMR=1;	//Habilito Timeout de software
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_UART_RxCpltCallback+0x78>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART_RX_byte,1);
 8001eec:	2201      	movs	r2, #1
 8001eee:	4906      	ldr	r1, [pc, #24]	; (8001f08 <HAL_UART_RxCpltCallback+0x6c>)
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f003 f90b 	bl	800510c <HAL_UART_Receive_IT>
			HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);//HAL_TIM_Base_Start_IT(&htim7);	//Habilito el timer
			TIM3->CNT=1;
			EN_UART2_TMR=1;	//Habilito Timeout de software
			HAL_UART_Receive_IT(INTSERIE,(uint8_t *)UART2_RX_byte,1);
		 }*/
 }
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40011000 	.word	0x40011000
 8001f04:	200043e8 	.word	0x200043e8
 8001f08:	200043bc 	.word	0x200043bc
 8001f0c:	20003fb8 	.word	0x20003fb8
 8001f10:	2000020c 	.word	0x2000020c
 8001f14:	20003fa8 	.word	0x20003fa8

08001f18 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *TIMER)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	6078      	str	r0, [r7, #4]

		if(TIMER->Instance==TIM2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f28:	d12d      	bne.n	8001f86 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			{
				 HAL_TIM_OC_Stop_IT(TIMER, TIM_CHANNEL_1); //Paro el timer
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f002 f931 	bl	8004194 <HAL_TIM_OC_Stop_IT>
				 FLAG_UART1=1;
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	701a      	strb	r2, [r3, #0]
				 EN_UART1_TMR=0;
 8001f38:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
				 UART_RX_items=UART_RX_pos;
 8001f3e:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a16      	ldr	r2, [pc, #88]	; (8001f9c <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8001f44:	6013      	str	r3, [r2, #0]
				 UART_RX_pos=0;
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
				 UART_RX_vect[512]='\0'; //Finalizo el vector a la fuerza ya que recibo hasta 124
 8001f4c:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
				 CopiaVector(UART_RX_vect_hld,UART_RX_vect,UART_RX_items,1,CMP_VECT);
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	4910      	ldr	r1, [pc, #64]	; (8001fa0 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 8001f60:	4811      	ldr	r0, [pc, #68]	; (8001fa8 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001f62:	f00c fce1 	bl	800e928 <CopiaVector>
				 HAL_UART_Receive_IT(&huart1,(uint8_t *)UART_RX_byte,1); //Habilito le recepcón de puerto serie al terminar
 8001f66:	2201      	movs	r2, #1
 8001f68:	4910      	ldr	r1, [pc, #64]	; (8001fac <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8001f6a:	4811      	ldr	r0, [pc, #68]	; (8001fb0 <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8001f6c:	f003 f8ce 	bl	800510c <HAL_UART_Receive_IT>
				 if (wf._DBG_EN==1)
 8001f70:	4b10      	ldr	r3, [pc, #64]	; (8001fb4 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8001f72:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d105      	bne.n	8001f86 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
				 {
					 ITM0_Write((uint8_t *)UART_RX_vect_hld,UART_RX_items);
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4809      	ldr	r0, [pc, #36]	; (8001fa8 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8001f82:	f7ff f9f9 	bl	8001378 <ITM0_Write>
					 ITM0_Write("\r\nData LoRa recibida = ",strlen("\r\nData LoRa recibida = "));
					 ITM0_Write((uint8_t *)UART2_RX_vect,UART2_RX_items);
					 ITM0_Write("\r\n",strlen("\r\n"));
				 }
		}*/
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20003fab 	.word	0x20003fab
 8001f94:	20003fa8 	.word	0x20003fa8
 8001f98:	200043e8 	.word	0x200043e8
 8001f9c:	200043c0 	.word	0x200043c0
 8001fa0:	20003fb8 	.word	0x20003fb8
 8001fa4:	200043b8 	.word	0x200043b8
 8001fa8:	200041b8 	.word	0x200041b8
 8001fac:	200043bc 	.word	0x200043bc
 8001fb0:	20000254 	.word	0x20000254
 8001fb4:	20002370 	.word	0x20002370

08001fb8 <ESP8266_HW_Init>:

uint8_t ESP8266_HW_Init(UART_HandleTypeDef *SerialPort) //Devuelve 1 si reinició OK, y 0 si no
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af06      	add	r7, sp, #24
 8001fbe:	6078      	str	r0, [r7, #4]
	  do{
		  HAL_UART_Transmit(SerialPort, "AT+RESTORE\r\n",strlen("AT+RESTORE\r\n"),100);
 8001fc0:	2364      	movs	r3, #100	; 0x64
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	4943      	ldr	r1, [pc, #268]	; (80020d4 <ESP8266_HW_Init+0x11c>)
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f003 f80e 	bl	8004fe8 <HAL_UART_Transmit>
		  HAL_Delay(500);
 8001fcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fd0:	f000 fb56 	bl	8002680 <HAL_Delay>

		  wf._n_fcomp=strlen("ready");
 8001fd4:	4b40      	ldr	r3, [pc, #256]	; (80020d8 <ESP8266_HW_Init+0x120>)
 8001fd6:	2205      	movs	r2, #5
 8001fd8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		  wf._n_orig=UART_RX_items;
 8001fdc:	4b3f      	ldr	r3, [pc, #252]	; (80020dc <ESP8266_HW_Init+0x124>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a3d      	ldr	r2, [pc, #244]	; (80020d8 <ESP8266_HW_Init+0x120>)
 8001fe2:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8

		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 8001fe6:	e00e      	b.n	8002006 <ESP8266_HW_Init+0x4e>
		  {
			  	  wf._n_orig=UART_RX_items;
 8001fe8:	4b3c      	ldr	r3, [pc, #240]	; (80020dc <ESP8266_HW_Init+0x124>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a3a      	ldr	r2, [pc, #232]	; (80020d8 <ESP8266_HW_Init+0x120>)
 8001fee:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  	  if (ESP_ticks>=5000)
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	; (80020e0 <ESP8266_HW_Init+0x128>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f241 3287 	movw	r2, #4999	; 0x1387
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	dd03      	ble.n	8002006 <ESP8266_HW_Init+0x4e>
			  		 {
			  		 ESP_InitF=1;
 8001ffe:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <ESP8266_HW_Init+0x12c>)
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
			  		 break;
 8002004:	e012      	b.n	800202c <ESP8266_HW_Init+0x74>
		  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 8002006:	2300      	movs	r3, #0
 8002008:	9304      	str	r3, [sp, #16]
 800200a:	4b37      	ldr	r3, [pc, #220]	; (80020e8 <ESP8266_HW_Init+0x130>)
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	4b37      	ldr	r3, [pc, #220]	; (80020ec <ESP8266_HW_Init+0x134>)
 8002010:	9302      	str	r3, [sp, #8]
 8002012:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <ESP8266_HW_Init+0x138>)
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <ESP8266_HW_Init+0x13c>)
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	4b37      	ldr	r3, [pc, #220]	; (80020f8 <ESP8266_HW_Init+0x140>)
 800201c:	4a37      	ldr	r2, [pc, #220]	; (80020fc <ESP8266_HW_Init+0x144>)
 800201e:	4938      	ldr	r1, [pc, #224]	; (8002100 <ESP8266_HW_Init+0x148>)
 8002020:	4838      	ldr	r0, [pc, #224]	; (8002104 <ESP8266_HW_Init+0x14c>)
 8002022:	f00c f8d3 	bl	800e1cc <FT_String_ND>
 8002026:	4603      	mov	r3, r0
 8002028:	2b01      	cmp	r3, #1
 800202a:	d1dd      	bne.n	8001fe8 <ESP8266_HW_Init+0x30>
			  		 }
		  }

		  if(ESP_InitF==0)	//Si encontró la sentencia anterior analizo la siguiente
 800202c:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <ESP8266_HW_Init+0x12c>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d129      	bne.n	8002088 <ESP8266_HW_Init+0xd0>
		  {
			  wf._n_fcomp=strlen("ready");
 8002034:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <ESP8266_HW_Init+0x120>)
 8002036:	2205      	movs	r2, #5
 8002038:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			  wf._n_orig=UART_RX_items;
 800203c:	4b27      	ldr	r3, [pc, #156]	; (80020dc <ESP8266_HW_Init+0x124>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <ESP8266_HW_Init+0x120>)
 8002042:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 8002046:	e00a      	b.n	800205e <ESP8266_HW_Init+0xa6>
			  {
				  wf._n_orig=UART_RX_items;
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <ESP8266_HW_Init+0x124>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a22      	ldr	r2, [pc, #136]	; (80020d8 <ESP8266_HW_Init+0x120>)
 800204e:	f8c2 3cd8 	str.w	r3, [r2, #3288]	; 0xcd8
				  if (ESP_ticks>=5000)
 8002052:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <ESP8266_HW_Init+0x128>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f241 3287 	movw	r2, #4999	; 0x1387
 800205a:	4293      	cmp	r3, r2
 800205c:	dc13      	bgt.n	8002086 <ESP8266_HW_Init+0xce>
			  while(FT_String_ND(UART_RX_vect_hld,&wf._n_orig,"ready",&wf._n_fcomp,wf._uartRCVD_tok,&wf._n_tok,&ntestc,&wf._id_conn,FIND)!=1)
 800205e:	2300      	movs	r3, #0
 8002060:	9304      	str	r3, [sp, #16]
 8002062:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <ESP8266_HW_Init+0x130>)
 8002064:	9303      	str	r3, [sp, #12]
 8002066:	4b21      	ldr	r3, [pc, #132]	; (80020ec <ESP8266_HW_Init+0x134>)
 8002068:	9302      	str	r3, [sp, #8]
 800206a:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <ESP8266_HW_Init+0x138>)
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <ESP8266_HW_Init+0x13c>)
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <ESP8266_HW_Init+0x140>)
 8002074:	4a21      	ldr	r2, [pc, #132]	; (80020fc <ESP8266_HW_Init+0x144>)
 8002076:	4922      	ldr	r1, [pc, #136]	; (8002100 <ESP8266_HW_Init+0x148>)
 8002078:	4822      	ldr	r0, [pc, #136]	; (8002104 <ESP8266_HW_Init+0x14c>)
 800207a:	f00c f8a7 	bl	800e1cc <FT_String_ND>
 800207e:	4603      	mov	r3, r0
 8002080:	2b01      	cmp	r3, #1
 8002082:	d1e1      	bne.n	8002048 <ESP8266_HW_Init+0x90>
 8002084:	e000      	b.n	8002088 <ESP8266_HW_Init+0xd0>
					 {
					 break;
 8002086:	bf00      	nop
					 }
			  }
		  }

		  if (ESP_ticks<5000)
 8002088:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <ESP8266_HW_Init+0x128>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002090:	4293      	cmp	r3, r2
 8002092:	dc06      	bgt.n	80020a2 <ESP8266_HW_Init+0xea>
		  {
			  ESP_REinit=10;
 8002094:	4b1c      	ldr	r3, [pc, #112]	; (8002108 <ESP8266_HW_Init+0x150>)
 8002096:	220a      	movs	r2, #10
 8002098:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 800209a:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <ESP8266_HW_Init+0x128>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	e008      	b.n	80020b4 <ESP8266_HW_Init+0xfc>
		  }
		  else
		  {
			  ESP_REinit++;
 80020a2:	4b19      	ldr	r3, [pc, #100]	; (8002108 <ESP8266_HW_Init+0x150>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	3301      	adds	r3, #1
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <ESP8266_HW_Init+0x150>)
 80020ac:	701a      	strb	r2, [r3, #0]
			  ESP_ticks=0;
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <ESP8266_HW_Init+0x128>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
		  }

	  } while (ESP_REinit<=5);
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <ESP8266_HW_Init+0x150>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d981      	bls.n	8001fc0 <ESP8266_HW_Init+0x8>

	  if(ESP_REinit==10)
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <ESP8266_HW_Init+0x150>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b0a      	cmp	r3, #10
 80020c2:	d101      	bne.n	80020c8 <ESP8266_HW_Init+0x110>
	  {
		  return(1);
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <ESP8266_HW_Init+0x112>
	  }
	  else
	  {
		  return(0);
 80020c8:	2300      	movs	r3, #0
	  }
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	0801017c 	.word	0x0801017c
 80020d8:	20002370 	.word	0x20002370
 80020dc:	200043c0 	.word	0x200043c0
 80020e0:	200043c4 	.word	0x200043c4
 80020e4:	20003fa6 	.word	0x20003fa6
 80020e8:	20002e04 	.word	0x20002e04
 80020ec:	200043d4 	.word	0x200043d4
 80020f0:	20003050 	.word	0x20003050
 80020f4:	20002c04 	.word	0x20002c04
 80020f8:	2000305c 	.word	0x2000305c
 80020fc:	0801018c 	.word	0x0801018c
 8002100:	20003048 	.word	0x20003048
 8002104:	200041b8 	.word	0x200041b8
 8002108:	20003fa5 	.word	0x20003fa5

0800210c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002110:	b672      	cpsid	i
}
 8002112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002114:	e7fe      	b.n	8002114 <Error_Handler+0x8>
	...

08002118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_MspInit+0x4c>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <HAL_MspInit+0x4c>)
 8002128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800212c:	6453      	str	r3, [r2, #68]	; 0x44
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_MspInit+0x4c>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_MspInit+0x4c>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a08      	ldr	r2, [pc, #32]	; (8002164 <HAL_MspInit+0x4c>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_MspInit+0x4c>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800

08002168 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a19      	ldr	r2, [pc, #100]	; (80021ec <HAL_SPI_MspInit+0x84>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d12b      	bne.n	80021e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <HAL_SPI_MspInit+0x88>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <HAL_SPI_MspInit+0x88>)
 8002194:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002198:	6453      	str	r3, [r2, #68]	; 0x44
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <HAL_SPI_MspInit+0x88>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_SPI_MspInit+0x88>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a10      	ldr	r2, [pc, #64]	; (80021f0 <HAL_SPI_MspInit+0x88>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_SPI_MspInit+0x88>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80021c2:	23e0      	movs	r3, #224	; 0xe0
 80021c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021d2:	2305      	movs	r3, #5
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4805      	ldr	r0, [pc, #20]	; (80021f4 <HAL_SPI_MspInit+0x8c>)
 80021de:	f000 fc49 	bl	8002a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80021e2:	bf00      	nop
 80021e4:	3728      	adds	r7, #40	; 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40013000 	.word	0x40013000
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020000 	.word	0x40020000

080021f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002208:	d115      	bne.n	8002236 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_TIM_Base_MspInit+0x48>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <HAL_TIM_Base_MspInit+0x48>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_TIM_Base_MspInit+0x48>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	201c      	movs	r0, #28
 800222c:	f000 fb4b 	bl	80028c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002230:	201c      	movs	r0, #28
 8002232:	f000 fb64 	bl	80028fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800

08002244 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <HAL_UART_MspInit+0x94>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d134      	bne.n	80022d0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <HAL_UART_MspInit+0x98>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <HAL_UART_MspInit+0x98>)
 8002270:	f043 0310 	orr.w	r3, r3, #16
 8002274:	6453      	str	r3, [r2, #68]	; 0x44
 8002276:	4b19      	ldr	r3, [pc, #100]	; (80022dc <HAL_UART_MspInit+0x98>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <HAL_UART_MspInit+0x98>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a14      	ldr	r2, [pc, #80]	; (80022dc <HAL_UART_MspInit+0x98>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_UART_MspInit+0x98>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800229e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ac:	2303      	movs	r3, #3
 80022ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022b0:	2307      	movs	r3, #7
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	4619      	mov	r1, r3
 80022ba:	4809      	ldr	r0, [pc, #36]	; (80022e0 <HAL_UART_MspInit+0x9c>)
 80022bc:	f000 fbda 	bl	8002a74 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2100      	movs	r1, #0
 80022c4:	2025      	movs	r0, #37	; 0x25
 80022c6:	f000 fafe 	bl	80028c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ca:	2025      	movs	r0, #37	; 0x25
 80022cc:	f000 fb17 	bl	80028fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022d0:	bf00      	nop
 80022d2:	3728      	adds	r7, #40	; 0x28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40011000 	.word	0x40011000
 80022dc:	40023800 	.word	0x40023800
 80022e0:	40020000 	.word	0x40020000

080022e4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <HAL_UART_MspDeInit+0x38>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d10d      	bne.n	8002312 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <HAL_UART_MspDeInit+0x3c>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	4a09      	ldr	r2, [pc, #36]	; (8002320 <HAL_UART_MspDeInit+0x3c>)
 80022fc:	f023 0310 	bic.w	r3, r3, #16
 8002300:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002302:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002306:	4807      	ldr	r0, [pc, #28]	; (8002324 <HAL_UART_MspDeInit+0x40>)
 8002308:	f000 fd38 	bl	8002d7c <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800230c:	2025      	movs	r0, #37	; 0x25
 800230e:	f000 fb04 	bl	800291a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40011000 	.word	0x40011000
 8002320:	40023800 	.word	0x40023800
 8002324:	40020000 	.word	0x40020000

08002328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800232c:	e7fe      	b.n	800232c <NMI_Handler+0x4>

0800232e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002332:	e7fe      	b.n	8002332 <HardFault_Handler+0x4>

08002334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <MemManage_Handler+0x4>

0800233a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <BusFault_Handler+0x4>

08002340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <UsageFault_Handler+0x4>

08002346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <TIM2_IRQHandler+0x10>)
 8002376:	f002 f819 	bl	80043ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000020c 	.word	0x2000020c

08002384 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <USART1_IRQHandler+0x10>)
 800238a:	f002 feef 	bl	800516c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000254 	.word	0x20000254

08002398 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
	return 1;
 800239c:	2301      	movs	r3, #1
}
 800239e:	4618      	mov	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <_kill>:

int _kill(int pid, int sig)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023b2:	f00c fd65 	bl	800ee80 <__errno>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2216      	movs	r2, #22
 80023ba:	601a      	str	r2, [r3, #0]
	return -1;
 80023bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <_exit>:

void _exit (int status)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ffe7 	bl	80023a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023da:	e7fe      	b.n	80023da <_exit+0x12>

080023dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	e00a      	b.n	8002404 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023ee:	f3af 8000 	nop.w
 80023f2:	4601      	mov	r1, r0
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	60ba      	str	r2, [r7, #8]
 80023fa:	b2ca      	uxtb	r2, r1
 80023fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	3301      	adds	r3, #1
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	429a      	cmp	r2, r3
 800240a:	dbf0      	blt.n	80023ee <_read+0x12>
	}

return len;
 800240c:	687b      	ldr	r3, [r7, #4]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	e009      	b.n	800243c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	60ba      	str	r2, [r7, #8]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	3301      	adds	r3, #1
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	429a      	cmp	r2, r3
 8002442:	dbf1      	blt.n	8002428 <_write+0x12>
	}
	return len;
 8002444:	687b      	ldr	r3, [r7, #4]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <_close>:

int _close(int file)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
	return -1;
 8002456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002476:	605a      	str	r2, [r3, #4]
	return 0;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <_isatty>:

int _isatty(int file)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
	return 1;
 800248e:	2301      	movs	r3, #1
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
	return 0;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c0:	4a14      	ldr	r2, [pc, #80]	; (8002514 <_sbrk+0x5c>)
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <_sbrk+0x60>)
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024cc:	4b13      	ldr	r3, [pc, #76]	; (800251c <_sbrk+0x64>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <_sbrk+0x64>)
 80024d6:	4a12      	ldr	r2, [pc, #72]	; (8002520 <_sbrk+0x68>)
 80024d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <_sbrk+0x64>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d207      	bcs.n	80024f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024e8:	f00c fcca 	bl	800ee80 <__errno>
 80024ec:	4603      	mov	r3, r0
 80024ee:	220c      	movs	r2, #12
 80024f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295
 80024f6:	e009      	b.n	800250c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <_sbrk+0x64>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024fe:	4b07      	ldr	r3, [pc, #28]	; (800251c <_sbrk+0x64>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	4a05      	ldr	r2, [pc, #20]	; (800251c <_sbrk+0x64>)
 8002508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800250a:	68fb      	ldr	r3, [r7, #12]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20020000 	.word	0x20020000
 8002518:	00000400 	.word	0x00000400
 800251c:	200043f0 	.word	0x200043f0
 8002520:	20004548 	.word	0x20004548

08002524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <SystemInit+0x20>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	4a05      	ldr	r2, [pc, #20]	; (8002544 <SystemInit+0x20>)
 8002530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002580 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800254c:	480d      	ldr	r0, [pc, #52]	; (8002584 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800254e:	490e      	ldr	r1, [pc, #56]	; (8002588 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002550:	4a0e      	ldr	r2, [pc, #56]	; (800258c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002554:	e002      	b.n	800255c <LoopCopyDataInit>

08002556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800255a:	3304      	adds	r3, #4

0800255c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800255c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002560:	d3f9      	bcc.n	8002556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002562:	4a0b      	ldr	r2, [pc, #44]	; (8002590 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002564:	4c0b      	ldr	r4, [pc, #44]	; (8002594 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002568:	e001      	b.n	800256e <LoopFillZerobss>

0800256a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800256a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800256c:	3204      	adds	r2, #4

0800256e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002570:	d3fb      	bcc.n	800256a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002572:	f7ff ffd7 	bl	8002524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002576:	f00c fc89 	bl	800ee8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800257a:	f7fe f88b 	bl	8000694 <main>
  bx  lr    
 800257e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002580:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002588:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 800258c:	080106b8 	.word	0x080106b8
  ldr r2, =_sbss
 8002590:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8002594:	20004544 	.word	0x20004544

08002598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002598:	e7fe      	b.n	8002598 <ADC_IRQHandler>
	...

0800259c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025a0:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <HAL_Init+0x40>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0d      	ldr	r2, [pc, #52]	; (80025dc <HAL_Init+0x40>)
 80025a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_Init+0x40>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_Init+0x40>)
 80025b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <HAL_Init+0x40>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a07      	ldr	r2, [pc, #28]	; (80025dc <HAL_Init+0x40>)
 80025be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c4:	2003      	movs	r0, #3
 80025c6:	f000 f973 	bl	80028b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ca:	200f      	movs	r0, #15
 80025cc:	f000 f808 	bl	80025e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025d0:	f7ff fda2 	bl	8002118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023c00 	.word	0x40023c00

080025e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_InitTick+0x54>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_InitTick+0x58>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	4619      	mov	r1, r3
 80025f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 f999 	bl	8002936 <HAL_SYSTICK_Config>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e00e      	b.n	800262c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b0f      	cmp	r3, #15
 8002612:	d80a      	bhi.n	800262a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002614:	2200      	movs	r2, #0
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	f04f 30ff 	mov.w	r0, #4294967295
 800261c:	f000 f953 	bl	80028c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002620:	4a06      	ldr	r2, [pc, #24]	; (800263c <HAL_InitTick+0x5c>)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	e000      	b.n	800262c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000084 	.word	0x20000084
 8002638:	2000008c 	.word	0x2000008c
 800263c:	20000088 	.word	0x20000088

08002640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_IncTick+0x20>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	461a      	mov	r2, r3
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_IncTick+0x24>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4413      	add	r3, r2
 8002650:	4a04      	ldr	r2, [pc, #16]	; (8002664 <HAL_IncTick+0x24>)
 8002652:	6013      	str	r3, [r2, #0]
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	2000008c 	.word	0x2000008c
 8002664:	200043f4 	.word	0x200043f4

08002668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return uwTick;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_GetTick+0x14>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	200043f4 	.word	0x200043f4

08002680 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002688:	f7ff ffee 	bl	8002668 <HAL_GetTick>
 800268c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d005      	beq.n	80026a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <HAL_Delay+0x44>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4413      	add	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026a6:	bf00      	nop
 80026a8:	f7ff ffde 	bl	8002668 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d8f7      	bhi.n	80026a8 <HAL_Delay+0x28>
  {
  }
}
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2000008c 	.word	0x2000008c

080026c8 <__NVIC_SetPriorityGrouping>:
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <__NVIC_SetPriorityGrouping+0x44>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026e4:	4013      	ands	r3, r2
 80026e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026fa:	4a04      	ldr	r2, [pc, #16]	; (800270c <__NVIC_SetPriorityGrouping+0x44>)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	60d3      	str	r3, [r2, #12]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <__NVIC_GetPriorityGrouping>:
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002714:	4b04      	ldr	r3, [pc, #16]	; (8002728 <__NVIC_GetPriorityGrouping+0x18>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	0a1b      	lsrs	r3, r3, #8
 800271a:	f003 0307 	and.w	r3, r3, #7
}
 800271e:	4618      	mov	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_EnableIRQ>:
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	2b00      	cmp	r3, #0
 800273c:	db0b      	blt.n	8002756 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	f003 021f 	and.w	r2, r3, #31
 8002744:	4907      	ldr	r1, [pc, #28]	; (8002764 <__NVIC_EnableIRQ+0x38>)
 8002746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274a:	095b      	lsrs	r3, r3, #5
 800274c:	2001      	movs	r0, #1
 800274e:	fa00 f202 	lsl.w	r2, r0, r2
 8002752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	e000e100 	.word	0xe000e100

08002768 <__NVIC_DisableIRQ>:
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	2b00      	cmp	r3, #0
 8002778:	db12      	blt.n	80027a0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	f003 021f 	and.w	r2, r3, #31
 8002780:	490a      	ldr	r1, [pc, #40]	; (80027ac <__NVIC_DisableIRQ+0x44>)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	2001      	movs	r0, #1
 800278a:	fa00 f202 	lsl.w	r2, r0, r2
 800278e:	3320      	adds	r3, #32
 8002790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002794:	f3bf 8f4f 	dsb	sy
}
 8002798:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800279a:	f3bf 8f6f 	isb	sy
}
 800279e:	bf00      	nop
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000e100 	.word	0xe000e100

080027b0 <__NVIC_SetPriority>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	6039      	str	r1, [r7, #0]
 80027ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	db0a      	blt.n	80027da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	490c      	ldr	r1, [pc, #48]	; (80027fc <__NVIC_SetPriority+0x4c>)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	440b      	add	r3, r1
 80027d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027d8:	e00a      	b.n	80027f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4908      	ldr	r1, [pc, #32]	; (8002800 <__NVIC_SetPriority+0x50>)
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	3b04      	subs	r3, #4
 80027e8:	0112      	lsls	r2, r2, #4
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	440b      	add	r3, r1
 80027ee:	761a      	strb	r2, [r3, #24]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000e100 	.word	0xe000e100
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <NVIC_EncodePriority>:
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	; 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f1c3 0307 	rsb	r3, r3, #7
 800281e:	2b04      	cmp	r3, #4
 8002820:	bf28      	it	cs
 8002822:	2304      	movcs	r3, #4
 8002824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3304      	adds	r3, #4
 800282a:	2b06      	cmp	r3, #6
 800282c:	d902      	bls.n	8002834 <NVIC_EncodePriority+0x30>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3b03      	subs	r3, #3
 8002832:	e000      	b.n	8002836 <NVIC_EncodePriority+0x32>
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	f04f 32ff 	mov.w	r2, #4294967295
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	401a      	ands	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800284c:	f04f 31ff 	mov.w	r1, #4294967295
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	43d9      	mvns	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	4313      	orrs	r3, r2
}
 800285e:	4618      	mov	r0, r3
 8002860:	3724      	adds	r7, #36	; 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <SysTick_Config>:
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800287c:	d301      	bcc.n	8002882 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800287e:	2301      	movs	r3, #1
 8002880:	e00f      	b.n	80028a2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <SysTick_Config+0x40>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288a:	210f      	movs	r1, #15
 800288c:	f04f 30ff 	mov.w	r0, #4294967295
 8002890:	f7ff ff8e 	bl	80027b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <SysTick_Config+0x40>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289a:	4b04      	ldr	r3, [pc, #16]	; (80028ac <SysTick_Config+0x40>)
 800289c:	2207      	movs	r2, #7
 800289e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	e000e010 	.word	0xe000e010

080028b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff05 	bl	80026c8 <__NVIC_SetPriorityGrouping>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d8:	f7ff ff1a 	bl	8002710 <__NVIC_GetPriorityGrouping>
 80028dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	6978      	ldr	r0, [r7, #20]
 80028e4:	f7ff ff8e 	bl	8002804 <NVIC_EncodePriority>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff5d 	bl	80027b0 <__NVIC_SetPriority>
}
 80028f6:	bf00      	nop
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	4603      	mov	r3, r0
 8002906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff0d 	bl	800272c <__NVIC_EnableIRQ>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff1d 	bl	8002768 <__NVIC_DisableIRQ>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff ff94 	bl	800286c <SysTick_Config>
 8002944:	4603      	mov	r3, r0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800295c:	f7ff fe84 	bl	8002668 <HAL_GetTick>
 8002960:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d008      	beq.n	8002980 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2280      	movs	r2, #128	; 0x80
 8002972:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e052      	b.n	8002a26 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0216 	bic.w	r2, r2, #22
 800298e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800299e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d103      	bne.n	80029b0 <HAL_DMA_Abort+0x62>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0208 	bic.w	r2, r2, #8
 80029be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d0:	e013      	b.n	80029fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029d2:	f7ff fe49 	bl	8002668 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b05      	cmp	r3, #5
 80029de:	d90c      	bls.n	80029fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2203      	movs	r2, #3
 80029ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e015      	b.n	8002a26 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e4      	bne.n	80029d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0c:	223f      	movs	r2, #63	; 0x3f
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d004      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2280      	movs	r2, #128	; 0x80
 8002a46:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e00c      	b.n	8002a66 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2205      	movs	r2, #5
 8002a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0201 	bic.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	e159      	b.n	8002d44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a90:	2201      	movs	r2, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	f040 8148 	bne.w	8002d3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d005      	beq.n	8002ac6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d130      	bne.n	8002b28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002afc:	2201      	movs	r2, #1
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 0201 	and.w	r2, r3, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d017      	beq.n	8002b64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d123      	bne.n	8002bb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	08da      	lsrs	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3208      	adds	r2, #8
 8002b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	220f      	movs	r2, #15
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	08da      	lsrs	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3208      	adds	r2, #8
 8002bb2:	69b9      	ldr	r1, [r7, #24]
 8002bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0203 	and.w	r2, r3, #3
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80a2 	beq.w	8002d3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	4b57      	ldr	r3, [pc, #348]	; (8002d5c <HAL_GPIO_Init+0x2e8>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	4a56      	ldr	r2, [pc, #344]	; (8002d5c <HAL_GPIO_Init+0x2e8>)
 8002c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c08:	6453      	str	r3, [r2, #68]	; 0x44
 8002c0a:	4b54      	ldr	r3, [pc, #336]	; (8002d5c <HAL_GPIO_Init+0x2e8>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c16:	4a52      	ldr	r2, [pc, #328]	; (8002d60 <HAL_GPIO_Init+0x2ec>)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	089b      	lsrs	r3, r3, #2
 8002c1c:	3302      	adds	r3, #2
 8002c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	220f      	movs	r2, #15
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a49      	ldr	r2, [pc, #292]	; (8002d64 <HAL_GPIO_Init+0x2f0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d019      	beq.n	8002c76 <HAL_GPIO_Init+0x202>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a48      	ldr	r2, [pc, #288]	; (8002d68 <HAL_GPIO_Init+0x2f4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_GPIO_Init+0x1fe>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a47      	ldr	r2, [pc, #284]	; (8002d6c <HAL_GPIO_Init+0x2f8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00d      	beq.n	8002c6e <HAL_GPIO_Init+0x1fa>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a46      	ldr	r2, [pc, #280]	; (8002d70 <HAL_GPIO_Init+0x2fc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d007      	beq.n	8002c6a <HAL_GPIO_Init+0x1f6>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a45      	ldr	r2, [pc, #276]	; (8002d74 <HAL_GPIO_Init+0x300>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d101      	bne.n	8002c66 <HAL_GPIO_Init+0x1f2>
 8002c62:	2304      	movs	r3, #4
 8002c64:	e008      	b.n	8002c78 <HAL_GPIO_Init+0x204>
 8002c66:	2307      	movs	r3, #7
 8002c68:	e006      	b.n	8002c78 <HAL_GPIO_Init+0x204>
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e004      	b.n	8002c78 <HAL_GPIO_Init+0x204>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e002      	b.n	8002c78 <HAL_GPIO_Init+0x204>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_GPIO_Init+0x204>
 8002c76:	2300      	movs	r3, #0
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	f002 0203 	and.w	r2, r2, #3
 8002c7e:	0092      	lsls	r2, r2, #2
 8002c80:	4093      	lsls	r3, r2
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c88:	4935      	ldr	r1, [pc, #212]	; (8002d60 <HAL_GPIO_Init+0x2ec>)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	089b      	lsrs	r3, r3, #2
 8002c8e:	3302      	adds	r3, #2
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c96:	4b38      	ldr	r3, [pc, #224]	; (8002d78 <HAL_GPIO_Init+0x304>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cba:	4a2f      	ldr	r2, [pc, #188]	; (8002d78 <HAL_GPIO_Init+0x304>)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc0:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <HAL_GPIO_Init+0x304>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce4:	4a24      	ldr	r2, [pc, #144]	; (8002d78 <HAL_GPIO_Init+0x304>)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cea:	4b23      	ldr	r3, [pc, #140]	; (8002d78 <HAL_GPIO_Init+0x304>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d0e:	4a1a      	ldr	r2, [pc, #104]	; (8002d78 <HAL_GPIO_Init+0x304>)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d14:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <HAL_GPIO_Init+0x304>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	4013      	ands	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d38:	4a0f      	ldr	r2, [pc, #60]	; (8002d78 <HAL_GPIO_Init+0x304>)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	3301      	adds	r3, #1
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	2b0f      	cmp	r3, #15
 8002d48:	f67f aea2 	bls.w	8002a90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3724      	adds	r7, #36	; 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40013800 	.word	0x40013800
 8002d64:	40020000 	.word	0x40020000
 8002d68:	40020400 	.word	0x40020400
 8002d6c:	40020800 	.word	0x40020800
 8002d70:	40020c00 	.word	0x40020c00
 8002d74:	40021000 	.word	0x40021000
 8002d78:	40013c00 	.word	0x40013c00

08002d7c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	e0bb      	b.n	8002f10 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d98:	2201      	movs	r2, #1
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4013      	ands	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	f040 80ab 	bne.w	8002f0a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002db4:	4a5c      	ldr	r2, [pc, #368]	; (8002f28 <HAL_GPIO_DeInit+0x1ac>)
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	089b      	lsrs	r3, r3, #2
 8002dba:	3302      	adds	r3, #2
 8002dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	220f      	movs	r2, #15
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a54      	ldr	r2, [pc, #336]	; (8002f2c <HAL_GPIO_DeInit+0x1b0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d019      	beq.n	8002e12 <HAL_GPIO_DeInit+0x96>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a53      	ldr	r2, [pc, #332]	; (8002f30 <HAL_GPIO_DeInit+0x1b4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <HAL_GPIO_DeInit+0x92>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a52      	ldr	r2, [pc, #328]	; (8002f34 <HAL_GPIO_DeInit+0x1b8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00d      	beq.n	8002e0a <HAL_GPIO_DeInit+0x8e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a51      	ldr	r2, [pc, #324]	; (8002f38 <HAL_GPIO_DeInit+0x1bc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d007      	beq.n	8002e06 <HAL_GPIO_DeInit+0x8a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a50      	ldr	r2, [pc, #320]	; (8002f3c <HAL_GPIO_DeInit+0x1c0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d101      	bne.n	8002e02 <HAL_GPIO_DeInit+0x86>
 8002dfe:	2304      	movs	r3, #4
 8002e00:	e008      	b.n	8002e14 <HAL_GPIO_DeInit+0x98>
 8002e02:	2307      	movs	r3, #7
 8002e04:	e006      	b.n	8002e14 <HAL_GPIO_DeInit+0x98>
 8002e06:	2303      	movs	r3, #3
 8002e08:	e004      	b.n	8002e14 <HAL_GPIO_DeInit+0x98>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e002      	b.n	8002e14 <HAL_GPIO_DeInit+0x98>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_GPIO_DeInit+0x98>
 8002e12:	2300      	movs	r3, #0
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	f002 0203 	and.w	r2, r2, #3
 8002e1a:	0092      	lsls	r2, r2, #2
 8002e1c:	4093      	lsls	r3, r2
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d132      	bne.n	8002e8a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002e24:	4b46      	ldr	r3, [pc, #280]	; (8002f40 <HAL_GPIO_DeInit+0x1c4>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	4944      	ldr	r1, [pc, #272]	; (8002f40 <HAL_GPIO_DeInit+0x1c4>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002e32:	4b43      	ldr	r3, [pc, #268]	; (8002f40 <HAL_GPIO_DeInit+0x1c4>)
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	4941      	ldr	r1, [pc, #260]	; (8002f40 <HAL_GPIO_DeInit+0x1c4>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002e40:	4b3f      	ldr	r3, [pc, #252]	; (8002f40 <HAL_GPIO_DeInit+0x1c4>)
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	493d      	ldr	r1, [pc, #244]	; (8002f40 <HAL_GPIO_DeInit+0x1c4>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002e4e:	4b3c      	ldr	r3, [pc, #240]	; (8002f40 <HAL_GPIO_DeInit+0x1c4>)
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	43db      	mvns	r3, r3
 8002e56:	493a      	ldr	r1, [pc, #232]	; (8002f40 <HAL_GPIO_DeInit+0x1c4>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	220f      	movs	r2, #15
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002e6c:	4a2e      	ldr	r2, [pc, #184]	; (8002f28 <HAL_GPIO_DeInit+0x1ac>)
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	089b      	lsrs	r3, r3, #2
 8002e72:	3302      	adds	r3, #2
 8002e74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	482a      	ldr	r0, [pc, #168]	; (8002f28 <HAL_GPIO_DeInit+0x1ac>)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	400a      	ands	r2, r1
 8002e84:	3302      	adds	r3, #2
 8002e86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	2103      	movs	r1, #3
 8002e94:	fa01 f303 	lsl.w	r3, r1, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	08da      	lsrs	r2, r3, #3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3208      	adds	r2, #8
 8002ea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	220f      	movs	r2, #15
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	08d2      	lsrs	r2, r2, #3
 8002ec0:	4019      	ands	r1, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3208      	adds	r2, #8
 8002ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	2103      	movs	r1, #3
 8002ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	401a      	ands	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	401a      	ands	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	2103      	movs	r1, #3
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	401a      	ands	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b0f      	cmp	r3, #15
 8002f14:	f67f af40 	bls.w	8002d98 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	40020000 	.word	0x40020000
 8002f30:	40020400 	.word	0x40020400
 8002f34:	40020800 	.word	0x40020800
 8002f38:	40020c00 	.word	0x40020c00
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40013c00 	.word	0x40013c00

08002f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]
 8002f50:	4613      	mov	r3, r2
 8002f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f54:	787b      	ldrb	r3, [r7, #1]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f60:	e003      	b.n	8002f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	041a      	lsls	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	619a      	str	r2, [r3, #24]
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f88:	887a      	ldrh	r2, [r7, #2]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	041a      	lsls	r2, r3, #16
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	43d9      	mvns	r1, r3
 8002f94:	887b      	ldrh	r3, [r7, #2]
 8002f96:	400b      	ands	r3, r1
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	619a      	str	r2, [r3, #24]
}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e267      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d075      	beq.n	80030b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fca:	4b88      	ldr	r3, [pc, #544]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fd6:	4b85      	ldr	r3, [pc, #532]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d112      	bne.n	8003008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe2:	4b82      	ldr	r3, [pc, #520]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fee:	d10b      	bne.n	8003008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff0:	4b7e      	ldr	r3, [pc, #504]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d05b      	beq.n	80030b4 <HAL_RCC_OscConfig+0x108>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d157      	bne.n	80030b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e242      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003010:	d106      	bne.n	8003020 <HAL_RCC_OscConfig+0x74>
 8003012:	4b76      	ldr	r3, [pc, #472]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a75      	ldr	r2, [pc, #468]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	e01d      	b.n	800305c <HAL_RCC_OscConfig+0xb0>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003028:	d10c      	bne.n	8003044 <HAL_RCC_OscConfig+0x98>
 800302a:	4b70      	ldr	r3, [pc, #448]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a6f      	ldr	r2, [pc, #444]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	4b6d      	ldr	r3, [pc, #436]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a6c      	ldr	r2, [pc, #432]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e00b      	b.n	800305c <HAL_RCC_OscConfig+0xb0>
 8003044:	4b69      	ldr	r3, [pc, #420]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a68      	ldr	r2, [pc, #416]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800304a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4b66      	ldr	r3, [pc, #408]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a65      	ldr	r2, [pc, #404]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800305a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d013      	beq.n	800308c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7ff fb00 	bl	8002668 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800306c:	f7ff fafc 	bl	8002668 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e207      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307e:	4b5b      	ldr	r3, [pc, #364]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0xc0>
 800308a:	e014      	b.n	80030b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7ff faec 	bl	8002668 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003094:	f7ff fae8 	bl	8002668 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	; 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e1f3      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a6:	4b51      	ldr	r3, [pc, #324]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0xe8>
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d063      	beq.n	800318a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030c2:	4b4a      	ldr	r3, [pc, #296]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ce:	4b47      	ldr	r3, [pc, #284]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d11c      	bne.n	8003114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030da:	4b44      	ldr	r3, [pc, #272]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d116      	bne.n	8003114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e6:	4b41      	ldr	r3, [pc, #260]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_RCC_OscConfig+0x152>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e1c7      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fe:	4b3b      	ldr	r3, [pc, #236]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4937      	ldr	r1, [pc, #220]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003112:	e03a      	b.n	800318a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d020      	beq.n	800315e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800311c:	4b34      	ldr	r3, [pc, #208]	; (80031f0 <HAL_RCC_OscConfig+0x244>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003122:	f7ff faa1 	bl	8002668 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800312a:	f7ff fa9d 	bl	8002668 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e1a8      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003148:	4b28      	ldr	r3, [pc, #160]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4925      	ldr	r1, [pc, #148]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]
 800315c:	e015      	b.n	800318a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800315e:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <HAL_RCC_OscConfig+0x244>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7ff fa80 	bl	8002668 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800316c:	f7ff fa7c 	bl	8002668 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e187      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317e:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d036      	beq.n	8003204 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d016      	beq.n	80031cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <HAL_RCC_OscConfig+0x248>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7ff fa60 	bl	8002668 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ac:	f7ff fa5c 	bl	8002668 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e167      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <HAL_RCC_OscConfig+0x240>)
 80031c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x200>
 80031ca:	e01b      	b.n	8003204 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031cc:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_OscConfig+0x248>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d2:	f7ff fa49 	bl	8002668 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d8:	e00e      	b.n	80031f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031da:	f7ff fa45 	bl	8002668 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d907      	bls.n	80031f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e150      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
 80031ec:	40023800 	.word	0x40023800
 80031f0:	42470000 	.word	0x42470000
 80031f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f8:	4b88      	ldr	r3, [pc, #544]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80031fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1ea      	bne.n	80031da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	f000 8097 	beq.w	8003340 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003212:	2300      	movs	r3, #0
 8003214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003216:	4b81      	ldr	r3, [pc, #516]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10f      	bne.n	8003242 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	4b7d      	ldr	r3, [pc, #500]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	4a7c      	ldr	r2, [pc, #496]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800322c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003230:	6413      	str	r3, [r2, #64]	; 0x40
 8003232:	4b7a      	ldr	r3, [pc, #488]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323e:	2301      	movs	r3, #1
 8003240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003242:	4b77      	ldr	r3, [pc, #476]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d118      	bne.n	8003280 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800324e:	4b74      	ldr	r3, [pc, #464]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a73      	ldr	r2, [pc, #460]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800325a:	f7ff fa05 	bl	8002668 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003262:	f7ff fa01 	bl	8002668 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e10c      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003274:	4b6a      	ldr	r3, [pc, #424]	; (8003420 <HAL_RCC_OscConfig+0x474>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d106      	bne.n	8003296 <HAL_RCC_OscConfig+0x2ea>
 8003288:	4b64      	ldr	r3, [pc, #400]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800328a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328c:	4a63      	ldr	r2, [pc, #396]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	6713      	str	r3, [r2, #112]	; 0x70
 8003294:	e01c      	b.n	80032d0 <HAL_RCC_OscConfig+0x324>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b05      	cmp	r3, #5
 800329c:	d10c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x30c>
 800329e:	4b5f      	ldr	r3, [pc, #380]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	4a5e      	ldr	r2, [pc, #376]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032a4:	f043 0304 	orr.w	r3, r3, #4
 80032a8:	6713      	str	r3, [r2, #112]	; 0x70
 80032aa:	4b5c      	ldr	r3, [pc, #368]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	4a5b      	ldr	r2, [pc, #364]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	6713      	str	r3, [r2, #112]	; 0x70
 80032b6:	e00b      	b.n	80032d0 <HAL_RCC_OscConfig+0x324>
 80032b8:	4b58      	ldr	r3, [pc, #352]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032bc:	4a57      	ldr	r2, [pc, #348]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032be:	f023 0301 	bic.w	r3, r3, #1
 80032c2:	6713      	str	r3, [r2, #112]	; 0x70
 80032c4:	4b55      	ldr	r3, [pc, #340]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c8:	4a54      	ldr	r2, [pc, #336]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032ca:	f023 0304 	bic.w	r3, r3, #4
 80032ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d015      	beq.n	8003304 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7ff f9c6 	bl	8002668 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032de:	e00a      	b.n	80032f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e0:	f7ff f9c2 	bl	8002668 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e0cb      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f6:	4b49      	ldr	r3, [pc, #292]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0ee      	beq.n	80032e0 <HAL_RCC_OscConfig+0x334>
 8003302:	e014      	b.n	800332e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003304:	f7ff f9b0 	bl	8002668 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800330a:	e00a      	b.n	8003322 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330c:	f7ff f9ac 	bl	8002668 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	; 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e0b5      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003322:	4b3e      	ldr	r3, [pc, #248]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1ee      	bne.n	800330c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800332e:	7dfb      	ldrb	r3, [r7, #23]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003334:	4b39      	ldr	r3, [pc, #228]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	4a38      	ldr	r2, [pc, #224]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800333a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80a1 	beq.w	800348c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800334a:	4b34      	ldr	r3, [pc, #208]	; (800341c <HAL_RCC_OscConfig+0x470>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b08      	cmp	r3, #8
 8003354:	d05c      	beq.n	8003410 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d141      	bne.n	80033e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335e:	4b31      	ldr	r3, [pc, #196]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7ff f980 	bl	8002668 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336c:	f7ff f97c 	bl	8002668 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e087      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	4b27      	ldr	r3, [pc, #156]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	019b      	lsls	r3, r3, #6
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	3b01      	subs	r3, #1
 80033a4:	041b      	lsls	r3, r3, #16
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	061b      	lsls	r3, r3, #24
 80033ae:	491b      	ldr	r1, [pc, #108]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ba:	f7ff f955 	bl	8002668 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c2:	f7ff f951 	bl	8002668 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e05c      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d4:	4b11      	ldr	r3, [pc, #68]	; (800341c <HAL_RCC_OscConfig+0x470>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x416>
 80033e0:	e054      	b.n	800348c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <HAL_RCC_OscConfig+0x478>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7ff f93e 	bl	8002668 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f0:	f7ff f93a 	bl	8002668 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e045      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_RCC_OscConfig+0x470>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0x444>
 800340e:	e03d      	b.n	800348c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d107      	bne.n	8003428 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e038      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
 800341c:	40023800 	.word	0x40023800
 8003420:	40007000 	.word	0x40007000
 8003424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003428:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x4ec>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d028      	beq.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d121      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d11a      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003458:	4013      	ands	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800345e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003460:	4293      	cmp	r3, r2
 8003462:	d111      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	3b01      	subs	r3, #1
 8003472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d107      	bne.n	8003488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800

0800349c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0cc      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034b0:	4b68      	ldr	r3, [pc, #416]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d90c      	bls.n	80034d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b65      	ldr	r3, [pc, #404]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b63      	ldr	r3, [pc, #396]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0b8      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034f0:	4b59      	ldr	r3, [pc, #356]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4a58      	ldr	r2, [pc, #352]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003508:	4b53      	ldr	r3, [pc, #332]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a52      	ldr	r2, [pc, #328]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003514:	4b50      	ldr	r3, [pc, #320]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	494d      	ldr	r1, [pc, #308]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d044      	beq.n	80035bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	4b47      	ldr	r3, [pc, #284]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d119      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e07f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d003      	beq.n	800355a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003556:	2b03      	cmp	r3, #3
 8003558:	d107      	bne.n	800356a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355a:	4b3f      	ldr	r3, [pc, #252]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e06f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356a:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e067      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357a:	4b37      	ldr	r3, [pc, #220]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f023 0203 	bic.w	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4934      	ldr	r1, [pc, #208]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003588:	4313      	orrs	r3, r2
 800358a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800358c:	f7ff f86c 	bl	8002668 <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	e00a      	b.n	80035aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003594:	f7ff f868 	bl	8002668 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e04f      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	4b2b      	ldr	r3, [pc, #172]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 020c 	and.w	r2, r3, #12
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d1eb      	bne.n	8003594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035bc:	4b25      	ldr	r3, [pc, #148]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d20c      	bcs.n	80035e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ca:	4b22      	ldr	r3, [pc, #136]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	4b20      	ldr	r3, [pc, #128]	; (8003654 <HAL_RCC_ClockConfig+0x1b8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e032      	b.n	800364a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f0:	4b19      	ldr	r3, [pc, #100]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4916      	ldr	r1, [pc, #88]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800360e:	4b12      	ldr	r3, [pc, #72]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	490e      	ldr	r1, [pc, #56]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	4313      	orrs	r3, r2
 8003620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003622:	f000 f821 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8003626:	4602      	mov	r2, r0
 8003628:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	490a      	ldr	r1, [pc, #40]	; (800365c <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	5ccb      	ldrb	r3, [r1, r3]
 8003636:	fa22 f303 	lsr.w	r3, r2, r3
 800363a:	4a09      	ldr	r2, [pc, #36]	; (8003660 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <HAL_RCC_ClockConfig+0x1c8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7fe ffcc 	bl	80025e0 <HAL_InitTick>

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40023c00 	.word	0x40023c00
 8003658:	40023800 	.word	0x40023800
 800365c:	080104ac 	.word	0x080104ac
 8003660:	20000084 	.word	0x20000084
 8003664:	20000088 	.word	0x20000088

08003668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800366c:	b090      	sub	sp, #64	; 0x40
 800366e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	637b      	str	r3, [r7, #52]	; 0x34
 8003674:	2300      	movs	r3, #0
 8003676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003678:	2300      	movs	r3, #0
 800367a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003680:	4b59      	ldr	r3, [pc, #356]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 030c 	and.w	r3, r3, #12
 8003688:	2b08      	cmp	r3, #8
 800368a:	d00d      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0x40>
 800368c:	2b08      	cmp	r3, #8
 800368e:	f200 80a1 	bhi.w	80037d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_RCC_GetSysClockFreq+0x34>
 8003696:	2b04      	cmp	r3, #4
 8003698:	d003      	beq.n	80036a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800369a:	e09b      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800369c:	4b53      	ldr	r3, [pc, #332]	; (80037ec <HAL_RCC_GetSysClockFreq+0x184>)
 800369e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80036a0:	e09b      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036a2:	4b53      	ldr	r3, [pc, #332]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80036a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036a6:	e098      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036a8:	4b4f      	ldr	r3, [pc, #316]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b2:	4b4d      	ldr	r3, [pc, #308]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d028      	beq.n	8003710 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036be:	4b4a      	ldr	r3, [pc, #296]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	099b      	lsrs	r3, r3, #6
 80036c4:	2200      	movs	r2, #0
 80036c6:	623b      	str	r3, [r7, #32]
 80036c8:	627a      	str	r2, [r7, #36]	; 0x24
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80036d0:	2100      	movs	r1, #0
 80036d2:	4b47      	ldr	r3, [pc, #284]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80036d4:	fb03 f201 	mul.w	r2, r3, r1
 80036d8:	2300      	movs	r3, #0
 80036da:	fb00 f303 	mul.w	r3, r0, r3
 80036de:	4413      	add	r3, r2
 80036e0:	4a43      	ldr	r2, [pc, #268]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80036e2:	fba0 1202 	umull	r1, r2, r0, r2
 80036e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036e8:	460a      	mov	r2, r1
 80036ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80036ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ee:	4413      	add	r3, r2
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f4:	2200      	movs	r2, #0
 80036f6:	61bb      	str	r3, [r7, #24]
 80036f8:	61fa      	str	r2, [r7, #28]
 80036fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003702:	f7fc fdd5 	bl	80002b0 <__aeabi_uldivmod>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4613      	mov	r3, r2
 800370c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800370e:	e053      	b.n	80037b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003710:	4b35      	ldr	r3, [pc, #212]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	099b      	lsrs	r3, r3, #6
 8003716:	2200      	movs	r2, #0
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	617a      	str	r2, [r7, #20]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003722:	f04f 0b00 	mov.w	fp, #0
 8003726:	4652      	mov	r2, sl
 8003728:	465b      	mov	r3, fp
 800372a:	f04f 0000 	mov.w	r0, #0
 800372e:	f04f 0100 	mov.w	r1, #0
 8003732:	0159      	lsls	r1, r3, #5
 8003734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003738:	0150      	lsls	r0, r2, #5
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	ebb2 080a 	subs.w	r8, r2, sl
 8003742:	eb63 090b 	sbc.w	r9, r3, fp
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003752:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003756:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800375a:	ebb2 0408 	subs.w	r4, r2, r8
 800375e:	eb63 0509 	sbc.w	r5, r3, r9
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	00eb      	lsls	r3, r5, #3
 800376c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003770:	00e2      	lsls	r2, r4, #3
 8003772:	4614      	mov	r4, r2
 8003774:	461d      	mov	r5, r3
 8003776:	eb14 030a 	adds.w	r3, r4, sl
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	eb45 030b 	adc.w	r3, r5, fp
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800378e:	4629      	mov	r1, r5
 8003790:	028b      	lsls	r3, r1, #10
 8003792:	4621      	mov	r1, r4
 8003794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003798:	4621      	mov	r1, r4
 800379a:	028a      	lsls	r2, r1, #10
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037a2:	2200      	movs	r2, #0
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	60fa      	str	r2, [r7, #12]
 80037a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037ac:	f7fc fd80 	bl	80002b0 <__aeabi_uldivmod>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4613      	mov	r3, r2
 80037b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037b8:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	3301      	adds	r3, #1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80037c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037d2:	e002      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCC_GetSysClockFreq+0x184>)
 80037d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3740      	adds	r7, #64	; 0x40
 80037e0:	46bd      	mov	sp, r7
 80037e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800
 80037ec:	00f42400 	.word	0x00f42400
 80037f0:	017d7840 	.word	0x017d7840

080037f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f8:	4b03      	ldr	r3, [pc, #12]	; (8003808 <HAL_RCC_GetHCLKFreq+0x14>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000084 	.word	0x20000084

0800380c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003810:	f7ff fff0 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 8003814:	4602      	mov	r2, r0
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	0a9b      	lsrs	r3, r3, #10
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	4903      	ldr	r1, [pc, #12]	; (8003830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003822:	5ccb      	ldrb	r3, [r1, r3]
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40023800 	.word	0x40023800
 8003830:	080104bc 	.word	0x080104bc

08003834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003838:	f7ff ffdc 	bl	80037f4 <HAL_RCC_GetHCLKFreq>
 800383c:	4602      	mov	r2, r0
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	0b5b      	lsrs	r3, r3, #13
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	4903      	ldr	r1, [pc, #12]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800384a:	5ccb      	ldrb	r3, [r1, r3]
 800384c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003850:	4618      	mov	r0, r3
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40023800 	.word	0x40023800
 8003858:	080104bc 	.word	0x080104bc

0800385c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e07b      	b.n	8003966 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	2b00      	cmp	r3, #0
 8003874:	d108      	bne.n	8003888 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800387e:	d009      	beq.n	8003894 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	61da      	str	r2, [r3, #28]
 8003886:	e005      	b.n	8003894 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d106      	bne.n	80038b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7fe fc5a 	bl	8002168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003918:	ea42 0103 	orr.w	r1, r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	0c1b      	lsrs	r3, r3, #16
 8003932:	f003 0104 	and.w	r1, r3, #4
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	f003 0210 	and.w	r2, r3, #16
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	69da      	ldr	r2, [r3, #28]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003954:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b08c      	sub	sp, #48	; 0x30
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800397c:	2301      	movs	r3, #1
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_SPI_TransmitReceive+0x26>
 8003990:	2302      	movs	r3, #2
 8003992:	e18a      	b.n	8003caa <HAL_SPI_TransmitReceive+0x33c>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800399c:	f7fe fe64 	bl	8002668 <HAL_GetTick>
 80039a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80039b2:	887b      	ldrh	r3, [r7, #2]
 80039b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d00f      	beq.n	80039de <HAL_SPI_TransmitReceive+0x70>
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039c4:	d107      	bne.n	80039d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d103      	bne.n	80039d6 <HAL_SPI_TransmitReceive+0x68>
 80039ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d003      	beq.n	80039de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80039d6:	2302      	movs	r3, #2
 80039d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039dc:	e15b      	b.n	8003c96 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_SPI_TransmitReceive+0x82>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_SPI_TransmitReceive+0x82>
 80039ea:	887b      	ldrh	r3, [r7, #2]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d103      	bne.n	80039f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80039f6:	e14e      	b.n	8003c96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d003      	beq.n	8003a0c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2205      	movs	r2, #5
 8003a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	887a      	ldrh	r2, [r7, #2]
 8003a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	887a      	ldrh	r2, [r7, #2]
 8003a22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	887a      	ldrh	r2, [r7, #2]
 8003a2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	d007      	beq.n	8003a60 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a68:	d178      	bne.n	8003b5c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <HAL_SPI_TransmitReceive+0x10a>
 8003a72:	8b7b      	ldrh	r3, [r7, #26]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d166      	bne.n	8003b46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	881a      	ldrh	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	1c9a      	adds	r2, r3, #2
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a9c:	e053      	b.n	8003b46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d11b      	bne.n	8003ae4 <HAL_SPI_TransmitReceive+0x176>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d016      	beq.n	8003ae4 <HAL_SPI_TransmitReceive+0x176>
 8003ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d113      	bne.n	8003ae4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	881a      	ldrh	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	1c9a      	adds	r2, r3, #2
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d119      	bne.n	8003b26 <HAL_SPI_TransmitReceive+0x1b8>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d014      	beq.n	8003b26 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	b292      	uxth	r2, r2
 8003b08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	1c9a      	adds	r2, r3, #2
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b22:	2301      	movs	r3, #1
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b26:	f7fe fd9f 	bl	8002668 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d807      	bhi.n	8003b46 <HAL_SPI_TransmitReceive+0x1d8>
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d003      	beq.n	8003b46 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003b44:	e0a7      	b.n	8003c96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1a6      	bne.n	8003a9e <HAL_SPI_TransmitReceive+0x130>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1a1      	bne.n	8003a9e <HAL_SPI_TransmitReceive+0x130>
 8003b5a:	e07c      	b.n	8003c56 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <HAL_SPI_TransmitReceive+0x1fc>
 8003b64:	8b7b      	ldrh	r3, [r7, #26]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d16b      	bne.n	8003c42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	330c      	adds	r3, #12
 8003b74:	7812      	ldrb	r2, [r2, #0]
 8003b76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b90:	e057      	b.n	8003c42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d11c      	bne.n	8003bda <HAL_SPI_TransmitReceive+0x26c>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d017      	beq.n	8003bda <HAL_SPI_TransmitReceive+0x26c>
 8003baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d114      	bne.n	8003bda <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	330c      	adds	r3, #12
 8003bba:	7812      	ldrb	r2, [r2, #0]
 8003bbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d119      	bne.n	8003c1c <HAL_SPI_TransmitReceive+0x2ae>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d014      	beq.n	8003c1c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c1c:	f7fe fd24 	bl	8002668 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d803      	bhi.n	8003c34 <HAL_SPI_TransmitReceive+0x2c6>
 8003c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c32:	d102      	bne.n	8003c3a <HAL_SPI_TransmitReceive+0x2cc>
 8003c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d103      	bne.n	8003c42 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003c40:	e029      	b.n	8003c96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1a2      	bne.n	8003b92 <HAL_SPI_TransmitReceive+0x224>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d19d      	bne.n	8003b92 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f8b2 	bl	8003dc4 <SPI_EndRxTxTransaction>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003c72:	e010      	b.n	8003c96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10b      	bne.n	8003c94 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	e000      	b.n	8003c96 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003c94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ca6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3730      	adds	r7, #48	; 0x30
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cc4:	f7fe fcd0 	bl	8002668 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cd4:	f7fe fcc8 	bl	8002668 <HAL_GetTick>
 8003cd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cda:	4b39      	ldr	r3, [pc, #228]	; (8003dc0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	015b      	lsls	r3, r3, #5
 8003ce0:	0d1b      	lsrs	r3, r3, #20
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	fb02 f303 	mul.w	r3, r2, r3
 8003ce8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cea:	e054      	b.n	8003d96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf2:	d050      	beq.n	8003d96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cf4:	f7fe fcb8 	bl	8002668 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d902      	bls.n	8003d0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d13d      	bne.n	8003d86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d22:	d111      	bne.n	8003d48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d2c:	d004      	beq.n	8003d38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d36:	d107      	bne.n	8003d48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d50:	d10f      	bne.n	8003d72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e017      	b.n	8003db6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	bf0c      	ite	eq
 8003da6:	2301      	moveq	r3, #1
 8003da8:	2300      	movne	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d19b      	bne.n	8003cec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000084 	.word	0x20000084

08003dc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <SPI_EndRxTxTransaction+0x7c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1b      	ldr	r2, [pc, #108]	; (8003e44 <SPI_EndRxTxTransaction+0x80>)
 8003dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dda:	0d5b      	lsrs	r3, r3, #21
 8003ddc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003de0:	fb02 f303 	mul.w	r3, r2, r3
 8003de4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dee:	d112      	bne.n	8003e16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2200      	movs	r2, #0
 8003df8:	2180      	movs	r1, #128	; 0x80
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f7ff ff5a 	bl	8003cb4 <SPI_WaitFlagStateUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d016      	beq.n	8003e34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0a:	f043 0220 	orr.w	r2, r3, #32
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e00f      	b.n	8003e36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2c:	2b80      	cmp	r3, #128	; 0x80
 8003e2e:	d0f2      	beq.n	8003e16 <SPI_EndRxTxTransaction+0x52>
 8003e30:	e000      	b.n	8003e34 <SPI_EndRxTxTransaction+0x70>
        break;
 8003e32:	bf00      	nop
  }

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000084 	.word	0x20000084
 8003e44:	165e9f81 	.word	0x165e9f81

08003e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e041      	b.n	8003ede <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fe f9c2 	bl	80021f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4619      	mov	r1, r3
 8003e86:	4610      	mov	r0, r2
 8003e88:	f000 fce4 	bl	8004854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e041      	b.n	8003f7c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f839 	bl	8003f84 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2202      	movs	r2, #2
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4619      	mov	r1, r3
 8003f24:	4610      	mov	r0, r2
 8003f26:	f000 fc95 	bl	8004854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <HAL_TIM_OC_Start_IT+0x28>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	bf14      	ite	ne
 8003fb8:	2301      	movne	r3, #1
 8003fba:	2300      	moveq	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	e022      	b.n	8004006 <HAL_TIM_OC_Start_IT+0x6e>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d109      	bne.n	8003fda <HAL_TIM_OC_Start_IT+0x42>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	bf14      	ite	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	2300      	moveq	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	e015      	b.n	8004006 <HAL_TIM_OC_Start_IT+0x6e>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d109      	bne.n	8003ff4 <HAL_TIM_OC_Start_IT+0x5c>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e008      	b.n	8004006 <HAL_TIM_OC_Start_IT+0x6e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	bf14      	ite	ne
 8004000:	2301      	movne	r3, #1
 8004002:	2300      	moveq	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e0b3      	b.n	8004176 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d104      	bne.n	800401e <HAL_TIM_OC_Start_IT+0x86>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800401c:	e013      	b.n	8004046 <HAL_TIM_OC_Start_IT+0xae>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b04      	cmp	r3, #4
 8004022:	d104      	bne.n	800402e <HAL_TIM_OC_Start_IT+0x96>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800402c:	e00b      	b.n	8004046 <HAL_TIM_OC_Start_IT+0xae>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d104      	bne.n	800403e <HAL_TIM_OC_Start_IT+0xa6>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800403c:	e003      	b.n	8004046 <HAL_TIM_OC_Start_IT+0xae>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b0c      	cmp	r3, #12
 800404a:	d841      	bhi.n	80040d0 <HAL_TIM_OC_Start_IT+0x138>
 800404c:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <HAL_TIM_OC_Start_IT+0xbc>)
 800404e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004052:	bf00      	nop
 8004054:	08004089 	.word	0x08004089
 8004058:	080040d1 	.word	0x080040d1
 800405c:	080040d1 	.word	0x080040d1
 8004060:	080040d1 	.word	0x080040d1
 8004064:	0800409b 	.word	0x0800409b
 8004068:	080040d1 	.word	0x080040d1
 800406c:	080040d1 	.word	0x080040d1
 8004070:	080040d1 	.word	0x080040d1
 8004074:	080040ad 	.word	0x080040ad
 8004078:	080040d1 	.word	0x080040d1
 800407c:	080040d1 	.word	0x080040d1
 8004080:	080040d1 	.word	0x080040d1
 8004084:	080040bf 	.word	0x080040bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0202 	orr.w	r2, r2, #2
 8004096:	60da      	str	r2, [r3, #12]
      break;
 8004098:	e01d      	b.n	80040d6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0204 	orr.w	r2, r2, #4
 80040a8:	60da      	str	r2, [r3, #12]
      break;
 80040aa:	e014      	b.n	80040d6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0208 	orr.w	r2, r2, #8
 80040ba:	60da      	str	r2, [r3, #12]
      break;
 80040bc:	e00b      	b.n	80040d6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0210 	orr.w	r2, r2, #16
 80040cc:	60da      	str	r2, [r3, #12]
      break;
 80040ce:	e002      	b.n	80040d6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
      break;
 80040d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d14b      	bne.n	8004174 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2201      	movs	r2, #1
 80040e2:	6839      	ldr	r1, [r7, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fe5b 	bl	8004da0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a24      	ldr	r2, [pc, #144]	; (8004180 <HAL_TIM_OC_Start_IT+0x1e8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d107      	bne.n	8004104 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004102:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <HAL_TIM_OC_Start_IT+0x1e8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d018      	beq.n	8004140 <HAL_TIM_OC_Start_IT+0x1a8>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004116:	d013      	beq.n	8004140 <HAL_TIM_OC_Start_IT+0x1a8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a19      	ldr	r2, [pc, #100]	; (8004184 <HAL_TIM_OC_Start_IT+0x1ec>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d00e      	beq.n	8004140 <HAL_TIM_OC_Start_IT+0x1a8>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a18      	ldr	r2, [pc, #96]	; (8004188 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d009      	beq.n	8004140 <HAL_TIM_OC_Start_IT+0x1a8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a16      	ldr	r2, [pc, #88]	; (800418c <HAL_TIM_OC_Start_IT+0x1f4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <HAL_TIM_OC_Start_IT+0x1a8>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a15      	ldr	r2, [pc, #84]	; (8004190 <HAL_TIM_OC_Start_IT+0x1f8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d111      	bne.n	8004164 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b06      	cmp	r3, #6
 8004150:	d010      	beq.n	8004174 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0201 	orr.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004162:	e007      	b.n	8004174 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004174:	7bfb      	ldrb	r3, [r7, #15]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40010000 	.word	0x40010000
 8004184:	40000400 	.word	0x40000400
 8004188:	40000800 	.word	0x40000800
 800418c:	40000c00 	.word	0x40000c00
 8004190:	40014000 	.word	0x40014000

08004194 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b0c      	cmp	r3, #12
 80041a6:	d841      	bhi.n	800422c <HAL_TIM_OC_Stop_IT+0x98>
 80041a8:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <HAL_TIM_OC_Stop_IT+0x1c>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	080041e5 	.word	0x080041e5
 80041b4:	0800422d 	.word	0x0800422d
 80041b8:	0800422d 	.word	0x0800422d
 80041bc:	0800422d 	.word	0x0800422d
 80041c0:	080041f7 	.word	0x080041f7
 80041c4:	0800422d 	.word	0x0800422d
 80041c8:	0800422d 	.word	0x0800422d
 80041cc:	0800422d 	.word	0x0800422d
 80041d0:	08004209 	.word	0x08004209
 80041d4:	0800422d 	.word	0x0800422d
 80041d8:	0800422d 	.word	0x0800422d
 80041dc:	0800422d 	.word	0x0800422d
 80041e0:	0800421b 	.word	0x0800421b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0202 	bic.w	r2, r2, #2
 80041f2:	60da      	str	r2, [r3, #12]
      break;
 80041f4:	e01d      	b.n	8004232 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0204 	bic.w	r2, r2, #4
 8004204:	60da      	str	r2, [r3, #12]
      break;
 8004206:	e014      	b.n	8004232 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0208 	bic.w	r2, r2, #8
 8004216:	60da      	str	r2, [r3, #12]
      break;
 8004218:	e00b      	b.n	8004232 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0210 	bic.w	r2, r2, #16
 8004228:	60da      	str	r2, [r3, #12]
      break;
 800422a:	e002      	b.n	8004232 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
      break;
 8004230:	bf00      	nop
  }

  if (status == HAL_OK)
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d157      	bne.n	80042e8 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2200      	movs	r2, #0
 800423e:	6839      	ldr	r1, [r7, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f000 fdad 	bl	8004da0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a2a      	ldr	r2, [pc, #168]	; (80042f4 <HAL_TIM_OC_Stop_IT+0x160>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d117      	bne.n	8004280 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6a1a      	ldr	r2, [r3, #32]
 8004256:	f241 1311 	movw	r3, #4369	; 0x1111
 800425a:	4013      	ands	r3, r2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10f      	bne.n	8004280 <HAL_TIM_OC_Stop_IT+0xec>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6a1a      	ldr	r2, [r3, #32]
 8004266:	f240 4344 	movw	r3, #1092	; 0x444
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d107      	bne.n	8004280 <HAL_TIM_OC_Stop_IT+0xec>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800427e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6a1a      	ldr	r2, [r3, #32]
 8004286:	f241 1311 	movw	r3, #4369	; 0x1111
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10f      	bne.n	80042b0 <HAL_TIM_OC_Stop_IT+0x11c>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6a1a      	ldr	r2, [r3, #32]
 8004296:	f240 4344 	movw	r3, #1092	; 0x444
 800429a:	4013      	ands	r3, r2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d107      	bne.n	80042b0 <HAL_TIM_OC_Stop_IT+0x11c>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0201 	bic.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d104      	bne.n	80042c0 <HAL_TIM_OC_Stop_IT+0x12c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042be:	e013      	b.n	80042e8 <HAL_TIM_OC_Stop_IT+0x154>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d104      	bne.n	80042d0 <HAL_TIM_OC_Stop_IT+0x13c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042ce:	e00b      	b.n	80042e8 <HAL_TIM_OC_Stop_IT+0x154>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d104      	bne.n	80042e0 <HAL_TIM_OC_Stop_IT+0x14c>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042de:	e003      	b.n	80042e8 <HAL_TIM_OC_Stop_IT+0x154>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40010000 	.word	0x40010000

080042f8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e041      	b.n	8004390 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d106      	bne.n	8004326 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f839 	bl	8004398 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2202      	movs	r2, #2
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3304      	adds	r3, #4
 8004336:	4619      	mov	r1, r3
 8004338:	4610      	mov	r0, r2
 800433a:	f000 fa8b 	bl	8004854 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0208 	bic.w	r2, r2, #8
 800434c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6819      	ldr	r1, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d122      	bne.n	8004408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d11b      	bne.n	8004408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0202 	mvn.w	r2, #2
 80043d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fa11 	bl	8004816 <HAL_TIM_IC_CaptureCallback>
 80043f4:	e005      	b.n	8004402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fd fd8e 	bl	8001f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fa14 	bl	800482a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b04      	cmp	r3, #4
 8004414:	d122      	bne.n	800445c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b04      	cmp	r3, #4
 8004422:	d11b      	bne.n	800445c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0204 	mvn.w	r2, #4
 800442c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2202      	movs	r2, #2
 8004432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f9e7 	bl	8004816 <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fd fd64 	bl	8001f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f9ea 	bl	800482a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b08      	cmp	r3, #8
 8004468:	d122      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b08      	cmp	r3, #8
 8004476:	d11b      	bne.n	80044b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0208 	mvn.w	r2, #8
 8004480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2204      	movs	r2, #4
 8004486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f9bd 	bl	8004816 <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fd fd3a 	bl	8001f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f9c0 	bl	800482a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b10      	cmp	r3, #16
 80044bc:	d122      	bne.n	8004504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0310 	and.w	r3, r3, #16
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d11b      	bne.n	8004504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0210 	mvn.w	r2, #16
 80044d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2208      	movs	r2, #8
 80044da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f993 	bl	8004816 <HAL_TIM_IC_CaptureCallback>
 80044f0:	e005      	b.n	80044fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fd fd10 	bl	8001f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f996 	bl	800482a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b01      	cmp	r3, #1
 8004510:	d10e      	bne.n	8004530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b01      	cmp	r3, #1
 800451e:	d107      	bne.n	8004530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0201 	mvn.w	r2, #1
 8004528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f969 	bl	8004802 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b80      	cmp	r3, #128	; 0x80
 800453c:	d10e      	bne.n	800455c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004548:	2b80      	cmp	r3, #128	; 0x80
 800454a:	d107      	bne.n	800455c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fcc0 	bl	8004edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d10e      	bne.n	8004588 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004574:	2b40      	cmp	r3, #64	; 0x40
 8004576:	d107      	bne.n	8004588 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f95b 	bl	800483e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b20      	cmp	r3, #32
 8004594:	d10e      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b20      	cmp	r3, #32
 80045a2:	d107      	bne.n	80045b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0220 	mvn.w	r2, #32
 80045ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fc8a 	bl	8004ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045b4:	bf00      	nop
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d101      	bne.n	80045da <HAL_TIM_OC_ConfigChannel+0x1e>
 80045d6:	2302      	movs	r3, #2
 80045d8:	e048      	b.n	800466c <HAL_TIM_OC_ConfigChannel+0xb0>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b0c      	cmp	r3, #12
 80045e6:	d839      	bhi.n	800465c <HAL_TIM_OC_ConfigChannel+0xa0>
 80045e8:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	08004625 	.word	0x08004625
 80045f4:	0800465d 	.word	0x0800465d
 80045f8:	0800465d 	.word	0x0800465d
 80045fc:	0800465d 	.word	0x0800465d
 8004600:	08004633 	.word	0x08004633
 8004604:	0800465d 	.word	0x0800465d
 8004608:	0800465d 	.word	0x0800465d
 800460c:	0800465d 	.word	0x0800465d
 8004610:	08004641 	.word	0x08004641
 8004614:	0800465d 	.word	0x0800465d
 8004618:	0800465d 	.word	0x0800465d
 800461c:	0800465d 	.word	0x0800465d
 8004620:	0800464f 	.word	0x0800464f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f992 	bl	8004954 <TIM_OC1_SetConfig>
      break;
 8004630:	e017      	b.n	8004662 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68b9      	ldr	r1, [r7, #8]
 8004638:	4618      	mov	r0, r3
 800463a:	f000 f9f1 	bl	8004a20 <TIM_OC2_SetConfig>
      break;
 800463e:	e010      	b.n	8004662 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68b9      	ldr	r1, [r7, #8]
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fa56 	bl	8004af8 <TIM_OC3_SetConfig>
      break;
 800464c:	e009      	b.n	8004662 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fab9 	bl	8004bcc <TIM_OC4_SetConfig>
      break;
 800465a:	e002      	b.n	8004662 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	75fb      	strb	r3, [r7, #23]
      break;
 8004660:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800466a:	7dfb      	ldrb	r3, [r7, #23]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3718      	adds	r7, #24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_TIM_ConfigClockSource+0x1c>
 800468c:	2302      	movs	r3, #2
 800468e:	e0b4      	b.n	80047fa <HAL_TIM_ConfigClockSource+0x186>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c8:	d03e      	beq.n	8004748 <HAL_TIM_ConfigClockSource+0xd4>
 80046ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ce:	f200 8087 	bhi.w	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d6:	f000 8086 	beq.w	80047e6 <HAL_TIM_ConfigClockSource+0x172>
 80046da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046de:	d87f      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 80046e0:	2b70      	cmp	r3, #112	; 0x70
 80046e2:	d01a      	beq.n	800471a <HAL_TIM_ConfigClockSource+0xa6>
 80046e4:	2b70      	cmp	r3, #112	; 0x70
 80046e6:	d87b      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 80046e8:	2b60      	cmp	r3, #96	; 0x60
 80046ea:	d050      	beq.n	800478e <HAL_TIM_ConfigClockSource+0x11a>
 80046ec:	2b60      	cmp	r3, #96	; 0x60
 80046ee:	d877      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 80046f0:	2b50      	cmp	r3, #80	; 0x50
 80046f2:	d03c      	beq.n	800476e <HAL_TIM_ConfigClockSource+0xfa>
 80046f4:	2b50      	cmp	r3, #80	; 0x50
 80046f6:	d873      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 80046f8:	2b40      	cmp	r3, #64	; 0x40
 80046fa:	d058      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0x13a>
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	d86f      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004700:	2b30      	cmp	r3, #48	; 0x30
 8004702:	d064      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x15a>
 8004704:	2b30      	cmp	r3, #48	; 0x30
 8004706:	d86b      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004708:	2b20      	cmp	r3, #32
 800470a:	d060      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x15a>
 800470c:	2b20      	cmp	r3, #32
 800470e:	d867      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d05c      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x15a>
 8004714:	2b10      	cmp	r3, #16
 8004716:	d05a      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x15a>
 8004718:	e062      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	6899      	ldr	r1, [r3, #8]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f000 fb19 	bl	8004d60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800473c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	609a      	str	r2, [r3, #8]
      break;
 8004746:	e04f      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	6899      	ldr	r1, [r3, #8]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f000 fb02 	bl	8004d60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800476a:	609a      	str	r2, [r3, #8]
      break;
 800476c:	e03c      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6859      	ldr	r1, [r3, #4]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	461a      	mov	r2, r3
 800477c:	f000 fa76 	bl	8004c6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2150      	movs	r1, #80	; 0x50
 8004786:	4618      	mov	r0, r3
 8004788:	f000 facf 	bl	8004d2a <TIM_ITRx_SetConfig>
      break;
 800478c:	e02c      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6859      	ldr	r1, [r3, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	461a      	mov	r2, r3
 800479c:	f000 fa95 	bl	8004cca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2160      	movs	r1, #96	; 0x60
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fabf 	bl	8004d2a <TIM_ITRx_SetConfig>
      break;
 80047ac:	e01c      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6859      	ldr	r1, [r3, #4]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	461a      	mov	r2, r3
 80047bc:	f000 fa56 	bl	8004c6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2140      	movs	r1, #64	; 0x40
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 faaf 	bl	8004d2a <TIM_ITRx_SetConfig>
      break;
 80047cc:	e00c      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4619      	mov	r1, r3
 80047d8:	4610      	mov	r0, r2
 80047da:	f000 faa6 	bl	8004d2a <TIM_ITRx_SetConfig>
      break;
 80047de:	e003      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	73fb      	strb	r3, [r7, #15]
      break;
 80047e4:	e000      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
	...

08004854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a34      	ldr	r2, [pc, #208]	; (8004938 <TIM_Base_SetConfig+0xe4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00f      	beq.n	800488c <TIM_Base_SetConfig+0x38>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004872:	d00b      	beq.n	800488c <TIM_Base_SetConfig+0x38>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a31      	ldr	r2, [pc, #196]	; (800493c <TIM_Base_SetConfig+0xe8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d007      	beq.n	800488c <TIM_Base_SetConfig+0x38>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a30      	ldr	r2, [pc, #192]	; (8004940 <TIM_Base_SetConfig+0xec>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d003      	beq.n	800488c <TIM_Base_SetConfig+0x38>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a2f      	ldr	r2, [pc, #188]	; (8004944 <TIM_Base_SetConfig+0xf0>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d108      	bne.n	800489e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a25      	ldr	r2, [pc, #148]	; (8004938 <TIM_Base_SetConfig+0xe4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d01b      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ac:	d017      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a22      	ldr	r2, [pc, #136]	; (800493c <TIM_Base_SetConfig+0xe8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a21      	ldr	r2, [pc, #132]	; (8004940 <TIM_Base_SetConfig+0xec>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00f      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a20      	ldr	r2, [pc, #128]	; (8004944 <TIM_Base_SetConfig+0xf0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00b      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a1f      	ldr	r2, [pc, #124]	; (8004948 <TIM_Base_SetConfig+0xf4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a1e      	ldr	r2, [pc, #120]	; (800494c <TIM_Base_SetConfig+0xf8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d003      	beq.n	80048de <TIM_Base_SetConfig+0x8a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a1d      	ldr	r2, [pc, #116]	; (8004950 <TIM_Base_SetConfig+0xfc>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d108      	bne.n	80048f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a08      	ldr	r2, [pc, #32]	; (8004938 <TIM_Base_SetConfig+0xe4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d103      	bne.n	8004924 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	615a      	str	r2, [r3, #20]
}
 800492a:	bf00      	nop
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40010000 	.word	0x40010000
 800493c:	40000400 	.word	0x40000400
 8004940:	40000800 	.word	0x40000800
 8004944:	40000c00 	.word	0x40000c00
 8004948:	40014000 	.word	0x40014000
 800494c:	40014400 	.word	0x40014400
 8004950:	40014800 	.word	0x40014800

08004954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	f023 0201 	bic.w	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0303 	bic.w	r3, r3, #3
 800498a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f023 0302 	bic.w	r3, r3, #2
 800499c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a1c      	ldr	r2, [pc, #112]	; (8004a1c <TIM_OC1_SetConfig+0xc8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d10c      	bne.n	80049ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f023 0308 	bic.w	r3, r3, #8
 80049b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f023 0304 	bic.w	r3, r3, #4
 80049c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a13      	ldr	r2, [pc, #76]	; (8004a1c <TIM_OC1_SetConfig+0xc8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d111      	bne.n	80049f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	621a      	str	r2, [r3, #32]
}
 8004a10:	bf00      	nop
 8004a12:	371c      	adds	r7, #28
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	40010000 	.word	0x40010000

08004a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f023 0210 	bic.w	r2, r3, #16
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f023 0320 	bic.w	r3, r3, #32
 8004a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a1e      	ldr	r2, [pc, #120]	; (8004af4 <TIM_OC2_SetConfig+0xd4>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d10d      	bne.n	8004a9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a15      	ldr	r2, [pc, #84]	; (8004af4 <TIM_OC2_SetConfig+0xd4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d113      	bne.n	8004acc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	bf00      	nop
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40010000 	.word	0x40010000

08004af8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0303 	bic.w	r3, r3, #3
 8004b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a1d      	ldr	r2, [pc, #116]	; (8004bc8 <TIM_OC3_SetConfig+0xd0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d10d      	bne.n	8004b72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a14      	ldr	r2, [pc, #80]	; (8004bc8 <TIM_OC3_SetConfig+0xd0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d113      	bne.n	8004ba2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	621a      	str	r2, [r3, #32]
}
 8004bbc:	bf00      	nop
 8004bbe:	371c      	adds	r7, #28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	40010000 	.word	0x40010000

08004bcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	021b      	lsls	r3, r3, #8
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	031b      	lsls	r3, r3, #12
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a10      	ldr	r2, [pc, #64]	; (8004c68 <TIM_OC4_SetConfig+0x9c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d109      	bne.n	8004c40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	019b      	lsls	r3, r3, #6
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	621a      	str	r2, [r3, #32]
}
 8004c5a:	bf00      	nop
 8004c5c:	371c      	adds	r7, #28
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40010000 	.word	0x40010000

08004c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	f023 0201 	bic.w	r2, r3, #1
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f023 030a 	bic.w	r3, r3, #10
 8004ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	621a      	str	r2, [r3, #32]
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b087      	sub	sp, #28
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	f023 0210 	bic.w	r2, r3, #16
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	031b      	lsls	r3, r3, #12
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f043 0307 	orr.w	r3, r3, #7
 8004d4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	609a      	str	r2, [r3, #8]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	021a      	lsls	r2, r3, #8
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	609a      	str	r2, [r3, #8]
}
 8004d94:	bf00      	nop
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f003 031f 	and.w	r3, r3, #31
 8004db2:	2201      	movs	r2, #1
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a1a      	ldr	r2, [r3, #32]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	401a      	ands	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a1a      	ldr	r2, [r3, #32]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f003 031f 	and.w	r3, r3, #31
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	621a      	str	r2, [r3, #32]
}
 8004dde:	bf00      	nop
 8004de0:	371c      	adds	r7, #28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
	...

08004dec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e050      	b.n	8004ea6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1c      	ldr	r2, [pc, #112]	; (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d018      	beq.n	8004e7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e50:	d013      	beq.n	8004e7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a18      	ldr	r2, [pc, #96]	; (8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d00e      	beq.n	8004e7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a16      	ldr	r2, [pc, #88]	; (8004ebc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d009      	beq.n	8004e7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a15      	ldr	r2, [pc, #84]	; (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d004      	beq.n	8004e7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a13      	ldr	r2, [pc, #76]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d10c      	bne.n	8004e94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40010000 	.word	0x40010000
 8004eb8:	40000400 	.word	0x40000400
 8004ebc:	40000800 	.word	0x40000800
 8004ec0:	40000c00 	.word	0x40000c00
 8004ec4:	40014000 	.word	0x40014000

08004ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e03f      	b.n	8004f82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fd f994 	bl	8002244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2224      	movs	r2, #36	; 0x24
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fe03 	bl	8005b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695a      	ldr	r2, [r3, #20]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e021      	b.n	8004fe0 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2224      	movs	r2, #36	; 0x24
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fb2:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7fd f995 	bl	80022e4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b20      	cmp	r3, #32
 8005006:	d17c      	bne.n	8005102 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <HAL_UART_Transmit+0x2c>
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e075      	b.n	8005104 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_UART_Transmit+0x3e>
 8005022:	2302      	movs	r3, #2
 8005024:	e06e      	b.n	8005104 <HAL_UART_Transmit+0x11c>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2221      	movs	r2, #33	; 0x21
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800503c:	f7fd fb14 	bl	8002668 <HAL_GetTick>
 8005040:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	88fa      	ldrh	r2, [r7, #6]
 8005046:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	88fa      	ldrh	r2, [r7, #6]
 800504c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005056:	d108      	bne.n	800506a <HAL_UART_Transmit+0x82>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d104      	bne.n	800506a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005060:	2300      	movs	r3, #0
 8005062:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	61bb      	str	r3, [r7, #24]
 8005068:	e003      	b.n	8005072 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800506e:	2300      	movs	r3, #0
 8005070:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800507a:	e02a      	b.n	80050d2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2200      	movs	r2, #0
 8005084:	2180      	movs	r1, #128	; 0x80
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fb14 	bl	80056b4 <UART_WaitOnFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e036      	b.n	8005104 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10b      	bne.n	80050b4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050aa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	3302      	adds	r3, #2
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	e007      	b.n	80050c4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	781a      	ldrb	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	3301      	adds	r3, #1
 80050c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1cf      	bne.n	800507c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	2200      	movs	r2, #0
 80050e4:	2140      	movs	r1, #64	; 0x40
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 fae4 	bl	80056b4 <UART_WaitOnFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e006      	b.n	8005104 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e000      	b.n	8005104 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005102:	2302      	movs	r3, #2
  }
}
 8005104:	4618      	mov	r0, r3
 8005106:	3720      	adds	r7, #32
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	4613      	mov	r3, r2
 8005118:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b20      	cmp	r3, #32
 8005124:	d11d      	bne.n	8005162 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_UART_Receive_IT+0x26>
 800512c:	88fb      	ldrh	r3, [r7, #6]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e016      	b.n	8005164 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_UART_Receive_IT+0x38>
 8005140:	2302      	movs	r3, #2
 8005142:	e00f      	b.n	8005164 <HAL_UART_Receive_IT+0x58>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	461a      	mov	r2, r3
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 fb19 	bl	8005790 <UART_Start_Receive_IT>
 800515e:	4603      	mov	r3, r0
 8005160:	e000      	b.n	8005164 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005162:	2302      	movs	r3, #2
  }
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b0ba      	sub	sp, #232	; 0xe8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005192:	2300      	movs	r3, #0
 8005194:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005198:	2300      	movs	r3, #0
 800519a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800519e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a2:	f003 030f 	and.w	r3, r3, #15
 80051a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80051aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10f      	bne.n	80051d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d009      	beq.n	80051d2 <HAL_UART_IRQHandler+0x66>
 80051be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fbfd 	bl	80059ca <UART_Receive_IT>
      return;
 80051d0:	e256      	b.n	8005680 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 80de 	beq.w	8005398 <HAL_UART_IRQHandler+0x22c>
 80051dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d106      	bne.n	80051f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 80d1 	beq.w	8005398 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00b      	beq.n	800521a <HAL_UART_IRQHandler+0xae>
 8005202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520a:	2b00      	cmp	r3, #0
 800520c:	d005      	beq.n	800521a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f043 0201 	orr.w	r2, r3, #1
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800521a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00b      	beq.n	800523e <HAL_UART_IRQHandler+0xd2>
 8005226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d005      	beq.n	800523e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	f043 0202 	orr.w	r2, r3, #2
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800523e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00b      	beq.n	8005262 <HAL_UART_IRQHandler+0xf6>
 800524a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	f043 0204 	orr.w	r2, r3, #4
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d011      	beq.n	8005292 <HAL_UART_IRQHandler+0x126>
 800526e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b00      	cmp	r3, #0
 8005278:	d105      	bne.n	8005286 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800527a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f043 0208 	orr.w	r2, r3, #8
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 81ed 	beq.w	8005676 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800529c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_UART_IRQHandler+0x14e>
 80052a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fb88 	bl	80059ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c4:	2b40      	cmp	r3, #64	; 0x40
 80052c6:	bf0c      	ite	eq
 80052c8:	2301      	moveq	r3, #1
 80052ca:	2300      	movne	r3, #0
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d103      	bne.n	80052e6 <HAL_UART_IRQHandler+0x17a>
 80052de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d04f      	beq.n	8005386 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fa90 	bl	800580c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f6:	2b40      	cmp	r3, #64	; 0x40
 80052f8:	d141      	bne.n	800537e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3314      	adds	r3, #20
 8005300:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005310:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005318:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3314      	adds	r3, #20
 8005322:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005326:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800532a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005332:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800533e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1d9      	bne.n	80052fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	2b00      	cmp	r3, #0
 800534c:	d013      	beq.n	8005376 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005352:	4a7d      	ldr	r2, [pc, #500]	; (8005548 <HAL_UART_IRQHandler+0x3dc>)
 8005354:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	4618      	mov	r0, r3
 800535c:	f7fd fb67 	bl	8002a2e <HAL_DMA_Abort_IT>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d016      	beq.n	8005394 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005370:	4610      	mov	r0, r2
 8005372:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005374:	e00e      	b.n	8005394 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fc fd60 	bl	8001e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537c:	e00a      	b.n	8005394 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fc fd5c 	bl	8001e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005384:	e006      	b.n	8005394 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fc fd58 	bl	8001e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005392:	e170      	b.n	8005676 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005394:	bf00      	nop
    return;
 8005396:	e16e      	b.n	8005676 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	2b01      	cmp	r3, #1
 800539e:	f040 814a 	bne.w	8005636 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a6:	f003 0310 	and.w	r3, r3, #16
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 8143 	beq.w	8005636 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b4:	f003 0310 	and.w	r3, r3, #16
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 813c 	beq.w	8005636 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053be:	2300      	movs	r3, #0
 80053c0:	60bb      	str	r3, [r7, #8]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	60bb      	str	r3, [r7, #8]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b40      	cmp	r3, #64	; 0x40
 80053e0:	f040 80b4 	bne.w	800554c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 8140 	beq.w	800567a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005402:	429a      	cmp	r2, r3
 8005404:	f080 8139 	bcs.w	800567a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800540e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800541a:	f000 8088 	beq.w	800552e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	330c      	adds	r3, #12
 8005424:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800542c:	e853 3f00 	ldrex	r3, [r3]
 8005430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005434:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800543c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	330c      	adds	r3, #12
 8005446:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800544a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800544e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005456:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800545a:	e841 2300 	strex	r3, r2, [r1]
 800545e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005462:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1d9      	bne.n	800541e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3314      	adds	r3, #20
 8005470:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005472:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005474:	e853 3f00 	ldrex	r3, [r3]
 8005478:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800547a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800547c:	f023 0301 	bic.w	r3, r3, #1
 8005480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3314      	adds	r3, #20
 800548a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800548e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005492:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005494:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005496:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e1      	bne.n	800546a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3314      	adds	r3, #20
 80054ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054b0:	e853 3f00 	ldrex	r3, [r3]
 80054b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3314      	adds	r3, #20
 80054c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054d2:	e841 2300 	strex	r3, r2, [r1]
 80054d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1e3      	bne.n	80054a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	330c      	adds	r3, #12
 80054f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f6:	e853 3f00 	ldrex	r3, [r3]
 80054fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054fe:	f023 0310 	bic.w	r3, r3, #16
 8005502:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	330c      	adds	r3, #12
 800550c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005510:	65ba      	str	r2, [r7, #88]	; 0x58
 8005512:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005514:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005516:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800551e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e3      	bne.n	80054ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005528:	4618      	mov	r0, r3
 800552a:	f7fd fa10 	bl	800294e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005536:	b29b      	uxth	r3, r3
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	b29b      	uxth	r3, r3
 800553c:	4619      	mov	r1, r3
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f8ac 	bl	800569c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005544:	e099      	b.n	800567a <HAL_UART_IRQHandler+0x50e>
 8005546:	bf00      	nop
 8005548:	080058d3 	.word	0x080058d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005554:	b29b      	uxth	r3, r3
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 808b 	beq.w	800567e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005568:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 8086 	beq.w	800567e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	330c      	adds	r3, #12
 8005578:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005584:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005588:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	330c      	adds	r3, #12
 8005592:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005596:	647a      	str	r2, [r7, #68]	; 0x44
 8005598:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800559c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e3      	bne.n	8005572 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3314      	adds	r3, #20
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	e853 3f00 	ldrex	r3, [r3]
 80055b8:	623b      	str	r3, [r7, #32]
   return(result);
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	f023 0301 	bic.w	r3, r3, #1
 80055c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3314      	adds	r3, #20
 80055ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055ce:	633a      	str	r2, [r7, #48]	; 0x30
 80055d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e3      	bne.n	80055aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	330c      	adds	r3, #12
 80055f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	e853 3f00 	ldrex	r3, [r3]
 80055fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0310 	bic.w	r3, r3, #16
 8005606:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	330c      	adds	r3, #12
 8005610:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005614:	61fa      	str	r2, [r7, #28]
 8005616:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005618:	69b9      	ldr	r1, [r7, #24]
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	e841 2300 	strex	r3, r2, [r1]
 8005620:	617b      	str	r3, [r7, #20]
   return(result);
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1e3      	bne.n	80055f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005628:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f834 	bl	800569c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005634:	e023      	b.n	800567e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800563a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <HAL_UART_IRQHandler+0x4ea>
 8005642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f953 	bl	80058fa <UART_Transmit_IT>
    return;
 8005654:	e014      	b.n	8005680 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800565a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00e      	beq.n	8005680 <HAL_UART_IRQHandler+0x514>
 8005662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	d008      	beq.n	8005680 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f993 	bl	800599a <UART_EndTransmit_IT>
    return;
 8005674:	e004      	b.n	8005680 <HAL_UART_IRQHandler+0x514>
    return;
 8005676:	bf00      	nop
 8005678:	e002      	b.n	8005680 <HAL_UART_IRQHandler+0x514>
      return;
 800567a:	bf00      	nop
 800567c:	e000      	b.n	8005680 <HAL_UART_IRQHandler+0x514>
      return;
 800567e:	bf00      	nop
  }
}
 8005680:	37e8      	adds	r7, #232	; 0xe8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop

08005688 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b090      	sub	sp, #64	; 0x40
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	603b      	str	r3, [r7, #0]
 80056c0:	4613      	mov	r3, r2
 80056c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c4:	e050      	b.n	8005768 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056cc:	d04c      	beq.n	8005768 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d007      	beq.n	80056e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80056d4:	f7fc ffc8 	bl	8002668 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d241      	bcs.n	8005768 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	330c      	adds	r3, #12
 80056ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ee:	e853 3f00 	ldrex	r3, [r3]
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	330c      	adds	r3, #12
 8005702:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005704:	637a      	str	r2, [r7, #52]	; 0x34
 8005706:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005708:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800570a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800570c:	e841 2300 	strex	r3, r2, [r1]
 8005710:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e5      	bne.n	80056e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3314      	adds	r3, #20
 800571e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	e853 3f00 	ldrex	r3, [r3]
 8005726:	613b      	str	r3, [r7, #16]
   return(result);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f023 0301 	bic.w	r3, r3, #1
 800572e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3314      	adds	r3, #20
 8005736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005738:	623a      	str	r2, [r7, #32]
 800573a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	69f9      	ldr	r1, [r7, #28]
 800573e:	6a3a      	ldr	r2, [r7, #32]
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	61bb      	str	r3, [r7, #24]
   return(result);
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e5      	bne.n	8005718 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e00f      	b.n	8005788 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4013      	ands	r3, r2
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	429a      	cmp	r2, r3
 8005776:	bf0c      	ite	eq
 8005778:	2301      	moveq	r3, #1
 800577a:	2300      	movne	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	461a      	mov	r2, r3
 8005780:	79fb      	ldrb	r3, [r7, #7]
 8005782:	429a      	cmp	r2, r3
 8005784:	d09f      	beq.n	80056c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3740      	adds	r7, #64	; 0x40
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	4613      	mov	r3, r2
 800579c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	88fa      	ldrh	r2, [r7, #6]
 80057a8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	88fa      	ldrh	r2, [r7, #6]
 80057ae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2222      	movs	r2, #34	; 0x22
 80057ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057dc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695a      	ldr	r2, [r3, #20]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0201 	orr.w	r2, r2, #1
 80057ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0220 	orr.w	r2, r2, #32
 80057fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800580c:	b480      	push	{r7}
 800580e:	b095      	sub	sp, #84	; 0x54
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	330c      	adds	r3, #12
 800581a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005826:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800582a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	330c      	adds	r3, #12
 8005832:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005834:	643a      	str	r2, [r7, #64]	; 0x40
 8005836:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800583a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e5      	bne.n	8005814 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3314      	adds	r3, #20
 800584e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	61fb      	str	r3, [r7, #28]
   return(result);
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	f023 0301 	bic.w	r3, r3, #1
 800585e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3314      	adds	r3, #20
 8005866:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005868:	62fa      	str	r2, [r7, #44]	; 0x2c
 800586a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800586e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e5      	bne.n	8005848 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005880:	2b01      	cmp	r3, #1
 8005882:	d119      	bne.n	80058b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	330c      	adds	r3, #12
 800588a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	60bb      	str	r3, [r7, #8]
   return(result);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f023 0310 	bic.w	r3, r3, #16
 800589a:	647b      	str	r3, [r7, #68]	; 0x44
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	330c      	adds	r3, #12
 80058a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058a4:	61ba      	str	r2, [r7, #24]
 80058a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	6979      	ldr	r1, [r7, #20]
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	613b      	str	r3, [r7, #16]
   return(result);
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e5      	bne.n	8005884 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80058c6:	bf00      	nop
 80058c8:	3754      	adds	r7, #84	; 0x54
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f7fc faa5 	bl	8001e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f2:	bf00      	nop
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b21      	cmp	r3, #33	; 0x21
 800590c:	d13e      	bne.n	800598c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005916:	d114      	bne.n	8005942 <UART_Transmit_IT+0x48>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d110      	bne.n	8005942 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005934:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	1c9a      	adds	r2, r3, #2
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	621a      	str	r2, [r3, #32]
 8005940:	e008      	b.n	8005954 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	1c59      	adds	r1, r3, #1
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6211      	str	r1, [r2, #32]
 800594c:	781a      	ldrb	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005958:	b29b      	uxth	r3, r3
 800595a:	3b01      	subs	r3, #1
 800595c:	b29b      	uxth	r3, r3
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	4619      	mov	r1, r3
 8005962:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10f      	bne.n	8005988 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005976:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005986:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	e000      	b.n	800598e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800598c:	2302      	movs	r3, #2
  }
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68da      	ldr	r2, [r3, #12]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff fe64 	bl	8005688 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b08c      	sub	sp, #48	; 0x30
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b22      	cmp	r3, #34	; 0x22
 80059dc:	f040 80ab 	bne.w	8005b36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e8:	d117      	bne.n	8005a1a <UART_Receive_IT+0x50>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d113      	bne.n	8005a1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a12:	1c9a      	adds	r2, r3, #2
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	629a      	str	r2, [r3, #40]	; 0x28
 8005a18:	e026      	b.n	8005a68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a2c:	d007      	beq.n	8005a3e <UART_Receive_IT+0x74>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10a      	bne.n	8005a4c <UART_Receive_IT+0x82>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	e008      	b.n	8005a5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	4619      	mov	r1, r3
 8005a76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d15a      	bne.n	8005b32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0220 	bic.w	r2, r2, #32
 8005a8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695a      	ldr	r2, [r3, #20]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0201 	bic.w	r2, r2, #1
 8005aaa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d135      	bne.n	8005b28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	330c      	adds	r3, #12
 8005ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	e853 3f00 	ldrex	r3, [r3]
 8005ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f023 0310 	bic.w	r3, r3, #16
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	330c      	adds	r3, #12
 8005ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae2:	623a      	str	r2, [r7, #32]
 8005ae4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	69f9      	ldr	r1, [r7, #28]
 8005ae8:	6a3a      	ldr	r2, [r7, #32]
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	61bb      	str	r3, [r7, #24]
   return(result);
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e5      	bne.n	8005ac2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b10      	cmp	r3, #16
 8005b02:	d10a      	bne.n	8005b1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b04:	2300      	movs	r3, #0
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b1e:	4619      	mov	r1, r3
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7ff fdbb 	bl	800569c <HAL_UARTEx_RxEventCallback>
 8005b26:	e002      	b.n	8005b2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f7fc f9b7 	bl	8001e9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	e002      	b.n	8005b38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	e000      	b.n	8005b38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005b36:	2302      	movs	r3, #2
  }
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3730      	adds	r7, #48	; 0x30
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b44:	b0c0      	sub	sp, #256	; 0x100
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5c:	68d9      	ldr	r1, [r3, #12]
 8005b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	ea40 0301 	orr.w	r3, r0, r1
 8005b68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	431a      	orrs	r2, r3
 8005b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b98:	f021 010c 	bic.w	r1, r1, #12
 8005b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ba6:	430b      	orrs	r3, r1
 8005ba8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bba:	6999      	ldr	r1, [r3, #24]
 8005bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	ea40 0301 	orr.w	r3, r0, r1
 8005bc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4b8f      	ldr	r3, [pc, #572]	; (8005e0c <UART_SetConfig+0x2cc>)
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d005      	beq.n	8005be0 <UART_SetConfig+0xa0>
 8005bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	4b8d      	ldr	r3, [pc, #564]	; (8005e10 <UART_SetConfig+0x2d0>)
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d104      	bne.n	8005bea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005be0:	f7fd fe28 	bl	8003834 <HAL_RCC_GetPCLK2Freq>
 8005be4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005be8:	e003      	b.n	8005bf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bea:	f7fd fe0f 	bl	800380c <HAL_RCC_GetPCLK1Freq>
 8005bee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bfc:	f040 810c 	bne.w	8005e18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c04:	2200      	movs	r2, #0
 8005c06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c12:	4622      	mov	r2, r4
 8005c14:	462b      	mov	r3, r5
 8005c16:	1891      	adds	r1, r2, r2
 8005c18:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c1a:	415b      	adcs	r3, r3
 8005c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c22:	4621      	mov	r1, r4
 8005c24:	eb12 0801 	adds.w	r8, r2, r1
 8005c28:	4629      	mov	r1, r5
 8005c2a:	eb43 0901 	adc.w	r9, r3, r1
 8005c2e:	f04f 0200 	mov.w	r2, #0
 8005c32:	f04f 0300 	mov.w	r3, #0
 8005c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c42:	4690      	mov	r8, r2
 8005c44:	4699      	mov	r9, r3
 8005c46:	4623      	mov	r3, r4
 8005c48:	eb18 0303 	adds.w	r3, r8, r3
 8005c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c50:	462b      	mov	r3, r5
 8005c52:	eb49 0303 	adc.w	r3, r9, r3
 8005c56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c6e:	460b      	mov	r3, r1
 8005c70:	18db      	adds	r3, r3, r3
 8005c72:	653b      	str	r3, [r7, #80]	; 0x50
 8005c74:	4613      	mov	r3, r2
 8005c76:	eb42 0303 	adc.w	r3, r2, r3
 8005c7a:	657b      	str	r3, [r7, #84]	; 0x54
 8005c7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c84:	f7fa fb14 	bl	80002b0 <__aeabi_uldivmod>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4b61      	ldr	r3, [pc, #388]	; (8005e14 <UART_SetConfig+0x2d4>)
 8005c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c92:	095b      	lsrs	r3, r3, #5
 8005c94:	011c      	lsls	r4, r3, #4
 8005c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ca0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ca4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ca8:	4642      	mov	r2, r8
 8005caa:	464b      	mov	r3, r9
 8005cac:	1891      	adds	r1, r2, r2
 8005cae:	64b9      	str	r1, [r7, #72]	; 0x48
 8005cb0:	415b      	adcs	r3, r3
 8005cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005cb8:	4641      	mov	r1, r8
 8005cba:	eb12 0a01 	adds.w	sl, r2, r1
 8005cbe:	4649      	mov	r1, r9
 8005cc0:	eb43 0b01 	adc.w	fp, r3, r1
 8005cc4:	f04f 0200 	mov.w	r2, #0
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cd8:	4692      	mov	sl, r2
 8005cda:	469b      	mov	fp, r3
 8005cdc:	4643      	mov	r3, r8
 8005cde:	eb1a 0303 	adds.w	r3, sl, r3
 8005ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ce6:	464b      	mov	r3, r9
 8005ce8:	eb4b 0303 	adc.w	r3, fp, r3
 8005cec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d04:	460b      	mov	r3, r1
 8005d06:	18db      	adds	r3, r3, r3
 8005d08:	643b      	str	r3, [r7, #64]	; 0x40
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	eb42 0303 	adc.w	r3, r2, r3
 8005d10:	647b      	str	r3, [r7, #68]	; 0x44
 8005d12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d1a:	f7fa fac9 	bl	80002b0 <__aeabi_uldivmod>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	4611      	mov	r1, r2
 8005d24:	4b3b      	ldr	r3, [pc, #236]	; (8005e14 <UART_SetConfig+0x2d4>)
 8005d26:	fba3 2301 	umull	r2, r3, r3, r1
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	2264      	movs	r2, #100	; 0x64
 8005d2e:	fb02 f303 	mul.w	r3, r2, r3
 8005d32:	1acb      	subs	r3, r1, r3
 8005d34:	00db      	lsls	r3, r3, #3
 8005d36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d3a:	4b36      	ldr	r3, [pc, #216]	; (8005e14 <UART_SetConfig+0x2d4>)
 8005d3c:	fba3 2302 	umull	r2, r3, r3, r2
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d48:	441c      	add	r4, r3
 8005d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d5c:	4642      	mov	r2, r8
 8005d5e:	464b      	mov	r3, r9
 8005d60:	1891      	adds	r1, r2, r2
 8005d62:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d64:	415b      	adcs	r3, r3
 8005d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d6c:	4641      	mov	r1, r8
 8005d6e:	1851      	adds	r1, r2, r1
 8005d70:	6339      	str	r1, [r7, #48]	; 0x30
 8005d72:	4649      	mov	r1, r9
 8005d74:	414b      	adcs	r3, r1
 8005d76:	637b      	str	r3, [r7, #52]	; 0x34
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d84:	4659      	mov	r1, fp
 8005d86:	00cb      	lsls	r3, r1, #3
 8005d88:	4651      	mov	r1, sl
 8005d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d8e:	4651      	mov	r1, sl
 8005d90:	00ca      	lsls	r2, r1, #3
 8005d92:	4610      	mov	r0, r2
 8005d94:	4619      	mov	r1, r3
 8005d96:	4603      	mov	r3, r0
 8005d98:	4642      	mov	r2, r8
 8005d9a:	189b      	adds	r3, r3, r2
 8005d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005da0:	464b      	mov	r3, r9
 8005da2:	460a      	mov	r2, r1
 8005da4:	eb42 0303 	adc.w	r3, r2, r3
 8005da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005db8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005dbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	18db      	adds	r3, r3, r3
 8005dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	eb42 0303 	adc.w	r3, r2, r3
 8005dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005dd6:	f7fa fa6b 	bl	80002b0 <__aeabi_uldivmod>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4b0d      	ldr	r3, [pc, #52]	; (8005e14 <UART_SetConfig+0x2d4>)
 8005de0:	fba3 1302 	umull	r1, r3, r3, r2
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	2164      	movs	r1, #100	; 0x64
 8005de8:	fb01 f303 	mul.w	r3, r1, r3
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	3332      	adds	r3, #50	; 0x32
 8005df2:	4a08      	ldr	r2, [pc, #32]	; (8005e14 <UART_SetConfig+0x2d4>)
 8005df4:	fba2 2303 	umull	r2, r3, r2, r3
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	f003 0207 	and.w	r2, r3, #7
 8005dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4422      	add	r2, r4
 8005e06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e08:	e106      	b.n	8006018 <UART_SetConfig+0x4d8>
 8005e0a:	bf00      	nop
 8005e0c:	40011000 	.word	0x40011000
 8005e10:	40011400 	.word	0x40011400
 8005e14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e2a:	4642      	mov	r2, r8
 8005e2c:	464b      	mov	r3, r9
 8005e2e:	1891      	adds	r1, r2, r2
 8005e30:	6239      	str	r1, [r7, #32]
 8005e32:	415b      	adcs	r3, r3
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
 8005e36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e3a:	4641      	mov	r1, r8
 8005e3c:	1854      	adds	r4, r2, r1
 8005e3e:	4649      	mov	r1, r9
 8005e40:	eb43 0501 	adc.w	r5, r3, r1
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	f04f 0300 	mov.w	r3, #0
 8005e4c:	00eb      	lsls	r3, r5, #3
 8005e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e52:	00e2      	lsls	r2, r4, #3
 8005e54:	4614      	mov	r4, r2
 8005e56:	461d      	mov	r5, r3
 8005e58:	4643      	mov	r3, r8
 8005e5a:	18e3      	adds	r3, r4, r3
 8005e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e60:	464b      	mov	r3, r9
 8005e62:	eb45 0303 	adc.w	r3, r5, r3
 8005e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e7a:	f04f 0200 	mov.w	r2, #0
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e86:	4629      	mov	r1, r5
 8005e88:	008b      	lsls	r3, r1, #2
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e90:	4621      	mov	r1, r4
 8005e92:	008a      	lsls	r2, r1, #2
 8005e94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e98:	f7fa fa0a 	bl	80002b0 <__aeabi_uldivmod>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4b60      	ldr	r3, [pc, #384]	; (8006024 <UART_SetConfig+0x4e4>)
 8005ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	011c      	lsls	r4, r3, #4
 8005eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005eb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005eb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ebc:	4642      	mov	r2, r8
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	1891      	adds	r1, r2, r2
 8005ec2:	61b9      	str	r1, [r7, #24]
 8005ec4:	415b      	adcs	r3, r3
 8005ec6:	61fb      	str	r3, [r7, #28]
 8005ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ecc:	4641      	mov	r1, r8
 8005ece:	1851      	adds	r1, r2, r1
 8005ed0:	6139      	str	r1, [r7, #16]
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	414b      	adcs	r3, r1
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	f04f 0200 	mov.w	r2, #0
 8005edc:	f04f 0300 	mov.w	r3, #0
 8005ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ee4:	4659      	mov	r1, fp
 8005ee6:	00cb      	lsls	r3, r1, #3
 8005ee8:	4651      	mov	r1, sl
 8005eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eee:	4651      	mov	r1, sl
 8005ef0:	00ca      	lsls	r2, r1, #3
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	4642      	mov	r2, r8
 8005efa:	189b      	adds	r3, r3, r2
 8005efc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f00:	464b      	mov	r3, r9
 8005f02:	460a      	mov	r2, r1
 8005f04:	eb42 0303 	adc.w	r3, r2, r3
 8005f08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f18:	f04f 0200 	mov.w	r2, #0
 8005f1c:	f04f 0300 	mov.w	r3, #0
 8005f20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f24:	4649      	mov	r1, r9
 8005f26:	008b      	lsls	r3, r1, #2
 8005f28:	4641      	mov	r1, r8
 8005f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f2e:	4641      	mov	r1, r8
 8005f30:	008a      	lsls	r2, r1, #2
 8005f32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f36:	f7fa f9bb 	bl	80002b0 <__aeabi_uldivmod>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4611      	mov	r1, r2
 8005f40:	4b38      	ldr	r3, [pc, #224]	; (8006024 <UART_SetConfig+0x4e4>)
 8005f42:	fba3 2301 	umull	r2, r3, r3, r1
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	2264      	movs	r2, #100	; 0x64
 8005f4a:	fb02 f303 	mul.w	r3, r2, r3
 8005f4e:	1acb      	subs	r3, r1, r3
 8005f50:	011b      	lsls	r3, r3, #4
 8005f52:	3332      	adds	r3, #50	; 0x32
 8005f54:	4a33      	ldr	r2, [pc, #204]	; (8006024 <UART_SetConfig+0x4e4>)
 8005f56:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5a:	095b      	lsrs	r3, r3, #5
 8005f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f60:	441c      	add	r4, r3
 8005f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f66:	2200      	movs	r2, #0
 8005f68:	673b      	str	r3, [r7, #112]	; 0x70
 8005f6a:	677a      	str	r2, [r7, #116]	; 0x74
 8005f6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f70:	4642      	mov	r2, r8
 8005f72:	464b      	mov	r3, r9
 8005f74:	1891      	adds	r1, r2, r2
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	415b      	adcs	r3, r3
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f80:	4641      	mov	r1, r8
 8005f82:	1851      	adds	r1, r2, r1
 8005f84:	6039      	str	r1, [r7, #0]
 8005f86:	4649      	mov	r1, r9
 8005f88:	414b      	adcs	r3, r1
 8005f8a:	607b      	str	r3, [r7, #4]
 8005f8c:	f04f 0200 	mov.w	r2, #0
 8005f90:	f04f 0300 	mov.w	r3, #0
 8005f94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f98:	4659      	mov	r1, fp
 8005f9a:	00cb      	lsls	r3, r1, #3
 8005f9c:	4651      	mov	r1, sl
 8005f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fa2:	4651      	mov	r1, sl
 8005fa4:	00ca      	lsls	r2, r1, #3
 8005fa6:	4610      	mov	r0, r2
 8005fa8:	4619      	mov	r1, r3
 8005faa:	4603      	mov	r3, r0
 8005fac:	4642      	mov	r2, r8
 8005fae:	189b      	adds	r3, r3, r2
 8005fb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	460a      	mov	r2, r1
 8005fb6:	eb42 0303 	adc.w	r3, r2, r3
 8005fba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8005fc6:	667a      	str	r2, [r7, #100]	; 0x64
 8005fc8:	f04f 0200 	mov.w	r2, #0
 8005fcc:	f04f 0300 	mov.w	r3, #0
 8005fd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005fd4:	4649      	mov	r1, r9
 8005fd6:	008b      	lsls	r3, r1, #2
 8005fd8:	4641      	mov	r1, r8
 8005fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fde:	4641      	mov	r1, r8
 8005fe0:	008a      	lsls	r2, r1, #2
 8005fe2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005fe6:	f7fa f963 	bl	80002b0 <__aeabi_uldivmod>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4b0d      	ldr	r3, [pc, #52]	; (8006024 <UART_SetConfig+0x4e4>)
 8005ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	2164      	movs	r1, #100	; 0x64
 8005ff8:	fb01 f303 	mul.w	r3, r1, r3
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	3332      	adds	r3, #50	; 0x32
 8006002:	4a08      	ldr	r2, [pc, #32]	; (8006024 <UART_SetConfig+0x4e4>)
 8006004:	fba2 2303 	umull	r2, r3, r2, r3
 8006008:	095b      	lsrs	r3, r3, #5
 800600a:	f003 020f 	and.w	r2, r3, #15
 800600e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4422      	add	r2, r4
 8006016:	609a      	str	r2, [r3, #8]
}
 8006018:	bf00      	nop
 800601a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800601e:	46bd      	mov	sp, r7
 8006020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006024:	51eb851f 	.word	0x51eb851f

08006028 <HW_RESET>:


//No se puede quedar esperano en las funciones, hay que detectar a situaci�n y salir del bucle.
//pensar que solo entra cuando recibe datos, si no vuelve a entrar queda ah� eternamentes.
void HW_RESET(struct WIFI *a)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_RESET);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	889b      	ldrh	r3, [r3, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	4619      	mov	r1, r3
 800603c:	f7fc ff82 	bl	8002f44 <HAL_GPIO_WritePin>
    ITM0_Write("\r\n ESP HW Resetting\r\n",strlen("\r\n ESP HW Resetting\r\n"));
 8006040:	2115      	movs	r1, #21
 8006042:	480b      	ldr	r0, [pc, #44]	; (8006070 <HW_RESET+0x48>)
 8006044:	f7fb f998 	bl	8001378 <ITM0_Write>
    HAL_Delay(2000);											//Tiempo de reset del módulo
 8006048:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800604c:	f7fc fb18 	bl	8002680 <HAL_Delay>
    ITM0_Write("\r\n ESP Reset\r\n",strlen("\r\n ESP Reset\r\n"));
 8006050:	210e      	movs	r1, #14
 8006052:	4808      	ldr	r0, [pc, #32]	; (8006074 <HW_RESET+0x4c>)
 8006054:	f7fb f990 	bl	8001378 <ITM0_Write>
    HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN, GPIO_PIN_SET);		//Habilito módulo
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6818      	ldr	r0, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	889b      	ldrh	r3, [r3, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	4619      	mov	r1, r3
 8006064:	f7fc ff6e 	bl	8002f44 <HAL_GPIO_WritePin>
}
 8006068:	bf00      	nop
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	08010194 	.word	0x08010194
 8006074:	080101ac 	.word	0x080101ac

08006078 <NOP>:
void NOP(struct WIFI *a)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=0;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <Cambiar_CWMODE>:
void Cambiar_CWMODE(struct WIFI *a)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
	a->_instruccion=1;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <ConectarWIFI>:
	a->_instruccion=-1;
	a->_enviaruart=1;
	a->_pasos=0; //210416
}
void ConectarWIFI(struct WIFI *a)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
	a->_instruccion=2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <MUX>:
void MUX(struct WIFI *a)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
	a->_instruccion=4;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2204      	movs	r2, #4
 8006108:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <IPDef>:
void IPDef(struct WIFI *a)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
	a->_instruccion=5;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2205      	movs	r2, #5
 8006134:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <DesconectarWIFI>:
void DesconectarWIFI(struct WIFI *a)
	{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
	a->_instruccion=0;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <ConectarTCP>:
void ConectarTCP(struct WIFI *a)
	{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	a->_instruccion=6;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2206      	movs	r2, #6
 800618c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <CrearServidorTCP>:
void CrearServidorTCP(struct WIFI *a)
	{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
	a->_instruccion=8;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2208      	movs	r2, #8
 80061b8:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <EnviarDatosSRVR>:
void EnviarDatosSRVR(struct WIFI *a)
	{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
	a->_instruccion=9;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2209      	movs	r2, #9
 80061e4:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <EnviarDatos>:
	//a->_instruccion=4;
	a->_enviaruart=1;
	a->_pasos=0; //210416
	}
void EnviarDatos(struct WIFI *a)
	{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
	a->_instruccion=7;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2207      	movs	r2, #7
 8006210:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
	a->_enviaruart=1;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
	a->_pasos=0; //210416
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
	}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <Inicializar>:
void Inicializar(struct WIFI *a)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
a->_WF_Net[32]='\0';				//Nombre de la red WIFI  a conectaraurt
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
a->_WF_Pass[16]='\0';				//Password de la red WIFI
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
a->_TCP_Remote_Server_IP[16]='\0';			//IP del Servidor TCP al que me voy a conectar
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
a->_TCP_Remote_Server_Port[6]='\0';			//Puerto del Servidor TCP al que me voy a conectar
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
a->_TCP_Local_Server_IP[16]='\0';		//IP del Servidor TCP Local
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
a->_TCP_Local_Server_Port[6]='\0';		//Puerto del Servidor TCP local
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
a->_TCP_Local_Server_GWY[16]='\0';		//Gateway de red
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
a->_TCP_Local_Server_MSK[16]='\0';		//Mascara de red
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
a->_TCP_Local_Server_Initiated=0;		//Servidor TCP no iniciado
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
a->_estado=0;					//Estado de m�dulo WIFI
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
a->_estado_rcv_data=0;			//Estado de Recepcion de datos
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
a->_dataRCV[512]='\0';			//Data recibida por TCP   SOLO PARA EVITAR SOBREESCRITURA VALOR ORIGINAL 64 RESTRINGIR EN EL .C
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2294 	strb.w	r2, [r3, #660]	; 0x294
a->_data2SND[64]='\0';			//Data a enviar por TCP
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 22d4 	strb.w	r2, [r3, #724]	; 0x2d4
a->_uart2snd[512]='\0';			//Datos a enviar por UART
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
a->_uartRCVD[512]='\0';			//Datos recibidos de UART
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2894 	strb.w	r2, [r3, #2196]	; 0x894
a->_uartRCVD_tok[512]='\0';		//Datos recibidos de UART
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2a94 	strb.w	r2, [r3, #2708]	; 0xa94
a->_uartCHrcvd=0;				//Cantidad de caracteres recibidos por la uart
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
a->_TCPchRCVD=0;				//Caracteres recibidos por TCP
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
a->_enviaruart=0;				//Envia _uart2snd por puerto serie
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
a->_pasos=0;					//Pasos por la maquina de estados no se puede manejar como variable local porque hay que almacenarlos cuando entra y sale de la llamada
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
a->_instruccion=0;				//Funcion que se desea realizar
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
a->_ejecucion=0;				//Funcion en ejecucion	
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
a->_okenvio[64]='\0';			//String para enviao de datos, comparacion de enviado y recibido strings variables
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2af4 	strb.w	r2, [r3, #2804]	; 0xaf4
a->_ticks=0;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
a->_ticks2=0;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
a->_debug=0;					//utilizada par fines de debugging
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f8c3 2cbc 	str.w	r2, [r3, #3260]	; 0xcbc
a->_debug_str=0;				//utilizada par fines de debugging
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_debug_pos=0;				//utilizada par fines de debugging
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_chrs=0;				//utilizada par fines de debugging
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f8c3 2cc8 	str.w	r2, [r3, #3272]	; 0xcc8
a->_debug_rx_ok=0;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
a->_debug_rx_no_ok=0;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
a->_debug_SEND_OK=0;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
a->_debug_CLOSED=0;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
a->_debug_WF_DISCONNECT=0;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
a->_debug_FAIL=0;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
a->_debug_CONNECT=0;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
a->_debug_count=0;				//Cuento la catidad de ipds	
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f8c3 2cf8 	str.w	r2, [r3, #3320]	; 0xcf8
a->_debug_count_old=0;			//Cuento la catidad de ipds
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
a->_debug_count2=0;				//SEND OK para enviar datos
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
a->_debug_count3=0;				//SEND OK recuperado de un IPD	
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
a->_debug_count4=0;				//SEDN OK recibido directo
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
a->_debug_count5=0;				//Cuento la catidad de ipds	
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
a->_debug_count6=0;				//Cuento la catidad de ipds	
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f8c3 2d10 	str.w	r2, [r3, #3344]	; 0xd10
a->_debug_count7=0;				//Cuento la catidad de ipds
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
a->_debug_count8=0;				//Cuento la catidad de ipds
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
a->_debug_count9=0;				//Cuento la catidad de ipds
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8c3 2d1c 	str.w	r2, [r3, #3356]	; 0xd1c
a->_debug_count10=0;			//Cuento la catidad de ipds
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
a->_subpaso=0;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <AT_ESP8266_ND>:

 // estado no cambia a->estado salvo que dicho estado sea algun valor esperado en la funcion
 //	la recepcion de datos no afecta la variable a->estado, pero puede afectar el registro recibido, en tal caso la funci�n de cae por timeout de rpta a->ticks=5eg
 /*--------------------------------------------------------------*/
int AT_ESP8266_ND( struct WIFI *a )
 {
 80063c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063c6:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80063ca:	af06      	add	r7, sp, #24
 80063cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80063d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80063d4:	6018      	str	r0, [r3, #0]
	 int l3=0, AT_decode=0, estado=0, str=0,chr_pos_fnc=0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 80063dc:	2300      	movs	r3, #0
 80063de:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80063e2:	2300      	movs	r3, #0
 80063e4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80063e8:	2300      	movs	r3, #0
 80063ea:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80063ee:	2300      	movs	r3, #0
 80063f0:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	 char *token;
	 char memstr=' ';
 80063f4:	2320      	movs	r3, #32
 80063f6:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		char comillas='"';
 80063fa:	2322      	movs	r3, #34	; 0x22
 80063fc:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
		char separador[]={'"',',','"','\0'};
 8006400:	4b71      	ldr	r3, [pc, #452]	; (80065c8 <AT_ESP8266_ND+0x204>)
 8006402:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
		char finalizar[]={'"','\r','\n'};
 8006406:	4a71      	ldr	r2, [pc, #452]	; (80065cc <AT_ESP8266_ND+0x208>)
 8006408:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800640c:	6812      	ldr	r2, [r2, #0]
 800640e:	4611      	mov	r1, r2
 8006410:	8019      	strh	r1, [r3, #0]
 8006412:	3302      	adds	r3, #2
 8006414:	0c12      	lsrs	r2, r2, #16
 8006416:	701a      	strb	r2, [r3, #0]
		char separador2[]={'"',','};
 8006418:	f642 4322 	movw	r3, #11298	; 0x2c22
 800641c:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
		char finalizar2[]={'\r','\n'};
 8006420:	f640 230d 	movw	r3, #2573	; 0xa0d
 8006424:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
		char vectorcopia[512];
	 //Agregar condicion de falla al conectar strcmp(a->_uartRCVD,"+CWJAP 1\r\n\r\nFAIL\r\n")
	 //a->_estado=0;
//--------BUSCO ERRRORES DE SOLPAMIENTO------------//
int pos=0, pos2=0;
 8006428:	2300      	movs	r3, #0
 800642a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 800642e:	2300      	movs	r3, #0
 8006430:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
a->_debug_pos=0;
 8006434:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006438:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2200      	movs	r2, #0
 8006440:	f8c3 2cc4 	str.w	r2, [r3, #3268]	; 0xcc4
a->_debug_str=strlen(a->_uartRCVD);//str=strlen(a->_uartRCVD)-1;
 8006444:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006448:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006452:	4618      	mov	r0, r3
 8006454:	f7f9 fece 	bl	80001f4 <strlen>
 8006458:	4603      	mov	r3, r0
 800645a:	461a      	mov	r2, r3
 800645c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006460:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f8c3 2cc0 	str.w	r2, [r3, #3264]	; 0xcc0
a->_estado_data=0; //Al entrar, nunca se como se recibió la info
 800646a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800646e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2200      	movs	r2, #0
 8006476:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0

	 a->_uartCHrcvd=strlen(a->_uartRCVD);
 800647a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800647e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f203 6394 	addw	r3, r3, #1684	; 0x694
 8006488:	4618      	mov	r0, r3
 800648a:	f7f9 feb3 	bl	80001f4 <strlen>
 800648e:	4603      	mov	r3, r0
 8006490:	461a      	mov	r2, r3
 8006492:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006496:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f8c3 2a9c 	str.w	r2, [r3, #2716]	; 0xa9c
//------------------PREGUNTO RECEPCION DE DATOS------------------//
//***************************************************************//

	 // Si tiene datos recibidos los proceso y dejo el vector original

	 a->_n_fcomp=strlen("\r\n+IPD");
 80064a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2206      	movs	r2, #6
 80064ac:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80064b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80064be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80064cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064d0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80064da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80064de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80064e8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80064ec:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80064f0:	6812      	ldr	r2, [r2, #0]
 80064f2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80064f6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80064fa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80064fe:	6809      	ldr	r1, [r1, #0]
 8006500:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006504:	2600      	movs	r6, #0
 8006506:	9604      	str	r6, [sp, #16]
 8006508:	9103      	str	r1, [sp, #12]
 800650a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800650e:	9102      	str	r1, [sp, #8]
 8006510:	9201      	str	r2, [sp, #4]
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	462b      	mov	r3, r5
 8006516:	4a2e      	ldr	r2, [pc, #184]	; (80065d0 <AT_ESP8266_ND+0x20c>)
 8006518:	4621      	mov	r1, r4
 800651a:	f007 fe57 	bl	800e1cc <FT_String_ND>
 800651e:	4603      	mov	r3, r0
 8006520:	2b01      	cmp	r3, #1
 8006522:	f040 812a 	bne.w	800677a <AT_ESP8266_ND+0x3b6>
	 {

	 	a->_n_fcomp=strlen("\r\n+IPD");
 8006526:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800652a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2206      	movs	r2, #6
 8006532:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	 	//a->_estado_data=0;

	 	if(a->_TCP_Local_Server_EN==0)
 8006536:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800653a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006544:	2b00      	cmp	r3, #0
 8006546:	d145      	bne.n	80065d4 <AT_ESP8266_ND+0x210>
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATA);
 8006548:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800654c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006556:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800655a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006564:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006568:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006572:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006576:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006580:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006584:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800658e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006592:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006596:	6809      	ldr	r1, [r1, #0]
 8006598:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800659c:	2604      	movs	r6, #4
 800659e:	9604      	str	r6, [sp, #16]
 80065a0:	9103      	str	r1, [sp, #12]
 80065a2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80065a6:	9102      	str	r1, [sp, #8]
 80065a8:	9201      	str	r2, [sp, #4]
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	462b      	mov	r3, r5
 80065ae:	4a08      	ldr	r2, [pc, #32]	; (80065d0 <AT_ESP8266_ND+0x20c>)
 80065b0:	4621      	mov	r1, r4
 80065b2:	f007 fe0b 	bl	800e1cc <FT_String_ND>
 80065b6:	4602      	mov	r2, r0
 80065b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
 80065c6:	e044      	b.n	8006652 <AT_ESP8266_ND+0x28e>
 80065c8:	00222c22 	.word	0x00222c22
 80065cc:	08010394 	.word	0x08010394
 80065d0:	080101bc 	.word	0x080101bc
	 	}
	 	else
	 	{
	 		a->_estado_data=FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n+IPD",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,TOKIPDDATASRVR);
 80065d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80065e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80065f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80065f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80065fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006602:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800660c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006610:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006614:	6812      	ldr	r2, [r2, #0]
 8006616:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800661a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800661e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006622:	6809      	ldr	r1, [r1, #0]
 8006624:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006628:	2605      	movs	r6, #5
 800662a:	9604      	str	r6, [sp, #16]
 800662c:	9103      	str	r1, [sp, #12]
 800662e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006632:	9102      	str	r1, [sp, #8]
 8006634:	9201      	str	r2, [sp, #4]
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	462b      	mov	r3, r5
 800663a:	4ac1      	ldr	r2, [pc, #772]	; (8006940 <AT_ESP8266_ND+0x57c>)
 800663c:	4621      	mov	r1, r4
 800663e:	f007 fdc5 	bl	800e1cc <FT_String_ND>
 8006642:	4602      	mov	r2, r0
 8006644:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006648:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f8c3 2cf0 	str.w	r2, [r3, #3312]	; 0xcf0
	 	}

	 	if(a->_estado_data==4)
 8006652:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006656:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006660:	2b04      	cmp	r3, #4
 8006662:	d15a      	bne.n	800671a <AT_ESP8266_ND+0x356>
	 	{
	 		a->_estado_rcv_data=99;
 8006664:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006668:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2263      	movs	r2, #99	; 0x63
 8006670:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=a->_n_tok;
 8006674:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006678:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 8006682:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006686:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		CopiaVector(a->_dataRCV,a->_uartRCVD_tok,a->_n_tok,0,'A');  //Solo copio la info si es correcta
 8006690:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006694:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f103 0094 	add.w	r0, r3, #148	; 0x94
 800669e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f603 0194 	addw	r1, r3, #2196	; 0x894
 80066ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f8d3 2ce0 	ldr.w	r2, [r3, #3296]	; 0xce0
 80066ba:	2341      	movs	r3, #65	; 0x41
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	2300      	movs	r3, #0
 80066c0:	f008 f932 	bl	800e928 <CopiaVector>
	 		CopiaVector(a->_data2SND,a->_uartRCVD_tok,5,0,'A');  //Solo copio la info si es correcta
 80066c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f503 7025 	add.w	r0, r3, #660	; 0x294
 80066d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f603 0194 	addw	r1, r3, #2196	; 0x894
 80066e0:	2341      	movs	r3, #65	; 0x41
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	2300      	movs	r3, #0
 80066e6:	2205      	movs	r2, #5
 80066e8:	f008 f91e 	bl	800e928 <CopiaVector>

	 		a->_debug_rx_ok++;
 80066ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80066f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f8d3 3ccc 	ldr.w	r3, [r3, #3276]	; 0xccc
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006700:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f8c3 2ccc 	str.w	r2, [r3, #3276]	; 0xccc
	 		a->_new_data_rcv=1;
 800670a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800670e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2201      	movs	r2, #1
 8006716:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 	}
	 	if(a->_estado_data==5)
 800671a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800671e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f8d3 3cf0 	ldr.w	r3, [r3, #3312]	; 0xcf0
 8006728:	2b05      	cmp	r3, #5
 800672a:	d126      	bne.n	800677a <AT_ESP8266_ND+0x3b6>
	 	{
	 		a->_estado_rcv_data=55;
 800672c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006730:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2237      	movs	r2, #55	; 0x37
 8006738:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	 		a->_n_dataRCV=0;
 800673c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006740:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 2cf4 	str.w	r2, [r3, #3316]	; 0xcf4
	 		a->_debug_rx_no_ok++;
 800674c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006750:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f8d3 3cd4 	ldr.w	r3, [r3, #3284]	; 0xcd4
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006760:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f8c3 2cd4 	str.w	r2, [r3, #3284]	; 0xcd4
	 		a->_new_data_rcv=1;
 800676a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800676e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2201      	movs	r2, #1
 8006776:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
	 }

	 //--------------------------------------------------------------------------------------------------------------//
	 // 	Arranco preguntando por la sentencia OK, y luego busco otros string dentro de lo recibido     			 //
	 //--------------------------------------------------------------------------------------------------------------//
	 a->_n_fcomp=strlen("OK\r\n");
 800677a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800677e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2204      	movs	r2, #4
 8006786:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
	if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"OK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 800678a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800678e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006798:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800679c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80067a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80067b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80067b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80067c2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80067c6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80067ca:	6812      	ldr	r2, [r2, #0]
 80067cc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80067d0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80067d4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80067d8:	6809      	ldr	r1, [r1, #0]
 80067da:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80067de:	2600      	movs	r6, #0
 80067e0:	9604      	str	r6, [sp, #16]
 80067e2:	9103      	str	r1, [sp, #12]
 80067e4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80067e8:	9102      	str	r1, [sp, #8]
 80067ea:	9201      	str	r2, [sp, #4]
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	462b      	mov	r3, r5
 80067f0:	4a54      	ldr	r2, [pc, #336]	; (8006944 <AT_ESP8266_ND+0x580>)
 80067f2:	4621      	mov	r1, r4
 80067f4:	f007 fcea 	bl	800e1cc <FT_String_ND>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	f040 8334 	bne.w	8006e68 <AT_ESP8266_ND+0xaa4>
	{

		AT_decode=at_ok;
 8006800:	2301      	movs	r3, #1
 8006802:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

		//------------------CONFIRMO ENVIO DE INFO OK ------------------//
		a->_n_fcomp=strlen("\r\nSEND");
 8006806:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800680a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2206      	movs	r2, #6
 8006812:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Transmision ok
 8006816:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800681a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006824:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006828:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006832:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006836:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006840:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006844:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800684e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006852:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006856:	6812      	ldr	r2, [r2, #0]
 8006858:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800685c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006860:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006864:	6809      	ldr	r1, [r1, #0]
 8006866:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800686a:	2600      	movs	r6, #0
 800686c:	9604      	str	r6, [sp, #16]
 800686e:	9103      	str	r1, [sp, #12]
 8006870:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006874:	9102      	str	r1, [sp, #8]
 8006876:	9201      	str	r2, [sp, #4]
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	462b      	mov	r3, r5
 800687c:	4a32      	ldr	r2, [pc, #200]	; (8006948 <AT_ESP8266_ND+0x584>)
 800687e:	4621      	mov	r1, r4
 8006880:	f007 fca4 	bl	800e1cc <FT_String_ND>
 8006884:	4603      	mov	r3, r0
 8006886:	2b01      	cmp	r3, #1
 8006888:	d113      	bne.n	80068b2 <AT_ESP8266_ND+0x4ee>
			 {
			 AT_decode=at_tcp_enviado_ok;
 800688a:	2313      	movs	r3, #19
 800688c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 a->_debug_SEND_OK++;
 8006890:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006894:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f8d3 3d24 	ldr.w	r3, [r3, #3364]	; 0xd24
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 80068ae:	f001 b981 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
			 }
		 else
		 {
		//------------------CONFIRMO CIERRE DE  CONEXION------------------//
		a->_n_fcomp=strlen("AT+CWQAP");
 80068b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2208      	movs	r2, #8
 80068be:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWQAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80068c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80068d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068d4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80068de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80068ec:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80068f0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80068fa:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80068fe:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006902:	6812      	ldr	r2, [r2, #0]
 8006904:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006908:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800690c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006910:	6809      	ldr	r1, [r1, #0]
 8006912:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006916:	2600      	movs	r6, #0
 8006918:	9604      	str	r6, [sp, #16]
 800691a:	9103      	str	r1, [sp, #12]
 800691c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006920:	9102      	str	r1, [sp, #8]
 8006922:	9201      	str	r2, [sp, #4]
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	462b      	mov	r3, r5
 8006928:	4a08      	ldr	r2, [pc, #32]	; (800694c <AT_ESP8266_ND+0x588>)
 800692a:	4621      	mov	r1, r4
 800692c:	f007 fc4e 	bl	800e1cc <FT_String_ND>
 8006930:	4603      	mov	r3, r0
 8006932:	2b01      	cmp	r3, #1
 8006934:	d10c      	bne.n	8006950 <AT_ESP8266_ND+0x58c>
			{
			AT_decode=at_deconectar_ok;
 8006936:	230d      	movs	r3, #13
 8006938:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800693c:	f001 b93a 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
 8006940:	080101bc 	.word	0x080101bc
 8006944:	080101c4 	.word	0x080101c4
 8006948:	080101cc 	.word	0x080101cc
 800694c:	080101d4 	.word	0x080101d4
			}
		else
		{
		//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
		a->_n_fcomp=strlen("AT+CWMODE=");
 8006950:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006954:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	220a      	movs	r2, #10
 800695c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8006960:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006964:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800696e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006972:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800697c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006980:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800698a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800698e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006998:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800699c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80069a0:	6812      	ldr	r2, [r2, #0]
 80069a2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80069a6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80069aa:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80069ae:	6809      	ldr	r1, [r1, #0]
 80069b0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80069b4:	2600      	movs	r6, #0
 80069b6:	9604      	str	r6, [sp, #16]
 80069b8:	9103      	str	r1, [sp, #12]
 80069ba:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80069be:	9102      	str	r1, [sp, #8]
 80069c0:	9201      	str	r2, [sp, #4]
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	462b      	mov	r3, r5
 80069c6:	4ab7      	ldr	r2, [pc, #732]	; (8006ca4 <AT_ESP8266_ND+0x8e0>)
 80069c8:	4621      	mov	r1, r4
 80069ca:	f007 fbff 	bl	800e1cc <FT_String_ND>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d104      	bne.n	80069de <AT_ESP8266_ND+0x61a>
			{
				AT_decode=at_cambiar_modo_ok;
 80069d4:	231c      	movs	r3, #28
 80069d6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80069da:	f001 b8eb 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------INTENTO DE CREACION SEVER YA CREADO ------------------//
		a->_n_fcomp=strlen("no change\r\nOK\r\n");
 80069de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	220f      	movs	r2, #15
 80069ea:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no change\r\nOK\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80069ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80069f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80069fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006a0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006a18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006a26:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006a2a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006a2e:	6812      	ldr	r2, [r2, #0]
 8006a30:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006a34:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006a38:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006a3c:	6809      	ldr	r1, [r1, #0]
 8006a3e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006a42:	2600      	movs	r6, #0
 8006a44:	9604      	str	r6, [sp, #16]
 8006a46:	9103      	str	r1, [sp, #12]
 8006a48:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006a4c:	9102      	str	r1, [sp, #8]
 8006a4e:	9201      	str	r2, [sp, #4]
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	462b      	mov	r3, r5
 8006a54:	4a94      	ldr	r2, [pc, #592]	; (8006ca8 <AT_ESP8266_ND+0x8e4>)
 8006a56:	4621      	mov	r1, r4
 8006a58:	f007 fbb8 	bl	800e1cc <FT_String_ND>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d104      	bne.n	8006a6c <AT_ESP8266_ND+0x6a8>
			{
				AT_decode=at_tcp_srvr_ok_noch;
 8006a62:	2317      	movs	r3, #23
 8006a64:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006a68:	f001 b8a4 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK PARA ENVIAR------------------//
		a->_n_fcomp=strlen("\r\n>");
 8006a6c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a70:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2203      	movs	r2, #3
 8006a78:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\n>",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8006a7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006a8a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a8e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006a98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006a9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006aa6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006aaa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006ab4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006ab8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006abc:	6812      	ldr	r2, [r2, #0]
 8006abe:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ac2:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ac6:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006aca:	6809      	ldr	r1, [r1, #0]
 8006acc:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ad0:	2600      	movs	r6, #0
 8006ad2:	9604      	str	r6, [sp, #16]
 8006ad4:	9103      	str	r1, [sp, #12]
 8006ad6:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ada:	9102      	str	r1, [sp, #8]
 8006adc:	9201      	str	r2, [sp, #4]
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	462b      	mov	r3, r5
 8006ae2:	4a72      	ldr	r2, [pc, #456]	; (8006cac <AT_ESP8266_ND+0x8e8>)
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	f007 fb71 	bl	800e1cc <FT_String_ND>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d104      	bne.n	8006afa <AT_ESP8266_ND+0x736>
			{
				AT_decode=at_tcp_ok_to_send;
 8006af0:	2314      	movs	r3, #20
 8006af2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006af6:	f001 b85d 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------OK SERVIDOR------------------//
		a->_n_fcomp=strlen("AT+CIPSERVER");
 8006afa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006afe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	220c      	movs	r2, #12
 8006b06:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006b0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006b18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006b26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006b34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006b42:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006b46:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006b4a:	6812      	ldr	r2, [r2, #0]
 8006b4c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006b50:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006b54:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006b58:	6809      	ldr	r1, [r1, #0]
 8006b5a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006b5e:	2600      	movs	r6, #0
 8006b60:	9604      	str	r6, [sp, #16]
 8006b62:	9103      	str	r1, [sp, #12]
 8006b64:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006b68:	9102      	str	r1, [sp, #8]
 8006b6a:	9201      	str	r2, [sp, #4]
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	462b      	mov	r3, r5
 8006b70:	4a4f      	ldr	r2, [pc, #316]	; (8006cb0 <AT_ESP8266_ND+0x8ec>)
 8006b72:	4621      	mov	r1, r4
 8006b74:	f007 fb2a 	bl	800e1cc <FT_String_ND>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d104      	bne.n	8006b88 <AT_ESP8266_ND+0x7c4>
		{
			AT_decode=at_tcp_srvr_ok;
 8006b7e:	2315      	movs	r3, #21
 8006b80:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006b84:	f001 b816 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
		}
		else
		{
		//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
		a->_n_fcomp=strlen("AT+CIPCLOSE");
 8006b88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	220b      	movs	r2, #11
 8006b94:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006b98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006b9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006ba6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006baa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006bb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006bc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006bc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006bd0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006bd4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006bd8:	6812      	ldr	r2, [r2, #0]
 8006bda:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006bde:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006be2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006be6:	6809      	ldr	r1, [r1, #0]
 8006be8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006bec:	2600      	movs	r6, #0
 8006bee:	9604      	str	r6, [sp, #16]
 8006bf0:	9103      	str	r1, [sp, #12]
 8006bf2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006bf6:	9102      	str	r1, [sp, #8]
 8006bf8:	9201      	str	r2, [sp, #4]
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	462b      	mov	r3, r5
 8006bfe:	4a2d      	ldr	r2, [pc, #180]	; (8006cb4 <AT_ESP8266_ND+0x8f0>)
 8006c00:	4621      	mov	r1, r4
 8006c02:	f007 fae3 	bl	800e1cc <FT_String_ND>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d104      	bne.n	8006c16 <AT_ESP8266_ND+0x852>
			{
				AT_decode=at_tcp_closed_ok;
 8006c0c:	2309      	movs	r3, #9
 8006c0e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006c12:	f000 bfcf 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=1");
 8006c16:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c1a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	220b      	movs	r2, #11
 8006c22:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006c26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006c34:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c38:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006c42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006c50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006c54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006c5e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006c62:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006c66:	6812      	ldr	r2, [r2, #0]
 8006c68:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006c6c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006c70:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006c74:	6809      	ldr	r1, [r1, #0]
 8006c76:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006c7a:	2600      	movs	r6, #0
 8006c7c:	9604      	str	r6, [sp, #16]
 8006c7e:	9103      	str	r1, [sp, #12]
 8006c80:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006c84:	9102      	str	r1, [sp, #8]
 8006c86:	9201      	str	r2, [sp, #4]
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	462b      	mov	r3, r5
 8006c8c:	4a0a      	ldr	r2, [pc, #40]	; (8006cb8 <AT_ESP8266_ND+0x8f4>)
 8006c8e:	4621      	mov	r1, r4
 8006c90:	f007 fa9c 	bl	800e1cc <FT_String_ND>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d110      	bne.n	8006cbc <AT_ESP8266_ND+0x8f8>
			{
				AT_decode=at_multiple_conn_ok;
 8006c9a:	2307      	movs	r3, #7
 8006c9c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006ca0:	f000 bf88 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
 8006ca4:	080101e0 	.word	0x080101e0
 8006ca8:	080101ec 	.word	0x080101ec
 8006cac:	080101fc 	.word	0x080101fc
 8006cb0:	08010200 	.word	0x08010200
 8006cb4:	08010210 	.word	0x08010210
 8006cb8:	0801021c 	.word	0x0801021c
			}
		else
		{
		//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
		a->_n_fcomp=strlen("AT+CIPMUX=0");
 8006cbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	220b      	movs	r2, #11
 8006cc8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006ccc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cd0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006cda:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cde:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006ce8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006cf6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006cfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006d04:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d08:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d0c:	6812      	ldr	r2, [r2, #0]
 8006d0e:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006d12:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006d16:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006d1a:	6809      	ldr	r1, [r1, #0]
 8006d1c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006d20:	2600      	movs	r6, #0
 8006d22:	9604      	str	r6, [sp, #16]
 8006d24:	9103      	str	r1, [sp, #12]
 8006d26:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006d2a:	9102      	str	r1, [sp, #8]
 8006d2c:	9201      	str	r2, [sp, #4]
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	462b      	mov	r3, r5
 8006d32:	4ab7      	ldr	r2, [pc, #732]	; (8007010 <AT_ESP8266_ND+0xc4c>)
 8006d34:	4621      	mov	r1, r4
 8006d36:	f007 fa49 	bl	800e1cc <FT_String_ND>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d104      	bne.n	8006d4a <AT_ESP8266_ND+0x986>
			{
				AT_decode=at_no_multiple_conn_ok;
 8006d40:	2308      	movs	r3, #8
 8006d42:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006d46:	f000 bf35 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------DEFIIR IP OK------------------//
		a->_n_fcomp=strlen("AT+CIPSTA=");
 8006d4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	220a      	movs	r2, #10
 8006d56:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006d5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006d68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006d76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d7a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006d84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006d88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006d92:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006d96:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006d9a:	6812      	ldr	r2, [r2, #0]
 8006d9c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006da0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006da4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006da8:	6809      	ldr	r1, [r1, #0]
 8006daa:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006dae:	2600      	movs	r6, #0
 8006db0:	9604      	str	r6, [sp, #16]
 8006db2:	9103      	str	r1, [sp, #12]
 8006db4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006db8:	9102      	str	r1, [sp, #8]
 8006dba:	9201      	str	r2, [sp, #4]
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	462b      	mov	r3, r5
 8006dc0:	4a94      	ldr	r2, [pc, #592]	; (8007014 <AT_ESP8266_ND+0xc50>)
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	f007 fa02 	bl	800e1cc <FT_String_ND>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d104      	bne.n	8006dd8 <AT_ESP8266_ND+0xa14>
			{
				AT_decode=at_def_ip_ok;
 8006dce:	231b      	movs	r3, #27
 8006dd0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006dd4:	f000 beee 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
			}
		else
		{
		//------------------TCP CONECTADO------------------//
		a->_n_fcomp=strlen("CONNECT");
 8006dd8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ddc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2207      	movs	r2, #7
 8006de4:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8006de8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006df6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006dfa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006e04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006e12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006e20:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006e24:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006e28:	6812      	ldr	r2, [r2, #0]
 8006e2a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006e2e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006e32:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006e36:	6809      	ldr	r1, [r1, #0]
 8006e38:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006e3c:	2600      	movs	r6, #0
 8006e3e:	9604      	str	r6, [sp, #16]
 8006e40:	9103      	str	r1, [sp, #12]
 8006e42:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006e46:	9102      	str	r1, [sp, #8]
 8006e48:	9201      	str	r2, [sp, #4]
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	462b      	mov	r3, r5
 8006e4e:	4a72      	ldr	r2, [pc, #456]	; (8007018 <AT_ESP8266_ND+0xc54>)
 8006e50:	4621      	mov	r1, r4
 8006e52:	f007 f9bb 	bl	800e1cc <FT_String_ND>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	f040 86ab 	bne.w	8007bb4 <AT_ESP8266_ND+0x17f0>
			{
			AT_decode=at_tcp_conectado;
 8006e5e:	230f      	movs	r3, #15
 8006e60:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006e64:	f000 bea6 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
	else
	{
	//--------------------------------------------------------------------------------------------------------------//
	// 	Continuo preguntando por la sentencia ERROR, y luego busco otros string dentro de lo recibido     			 //
	//--------------------------------------------------------------------------------------------------------------//
		 a->_n_fcomp=strlen("ERROR\r\n");
 8006e68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2207      	movs	r2, #7
 8006e74:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
		if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"ERROR\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8006e78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006e86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006e94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006e98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006ea2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ea6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006eb0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006eb4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006eb8:	6812      	ldr	r2, [r2, #0]
 8006eba:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006ebe:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006ec2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006ec6:	6809      	ldr	r1, [r1, #0]
 8006ec8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006ecc:	2600      	movs	r6, #0
 8006ece:	9604      	str	r6, [sp, #16]
 8006ed0:	9103      	str	r1, [sp, #12]
 8006ed2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ed6:	9102      	str	r1, [sp, #8]
 8006ed8:	9201      	str	r2, [sp, #4]
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	462b      	mov	r3, r5
 8006ede:	4a4f      	ldr	r2, [pc, #316]	; (800701c <AT_ESP8266_ND+0xc58>)
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	f007 f973 	bl	800e1cc <FT_String_ND>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	f040 8326 	bne.w	800753a <AT_ESP8266_ND+0x1176>
		{
				AT_decode=at_error;
 8006eee:	2302      	movs	r3, #2
 8006ef0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
				//------------------TCP CAIDO AL INTENTAR CONECTAR------------------//
				a->_n_fcomp=strlen("CLOSED\r\n");
 8006ef4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006ef8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2208      	movs	r2, #8
 8006f00:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Intentando conectar con servidor TCP caido
 8006f04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006f12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006f20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006f2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006f3c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006f40:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006f44:	6812      	ldr	r2, [r2, #0]
 8006f46:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006f4a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006f4e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006f52:	6809      	ldr	r1, [r1, #0]
 8006f54:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006f58:	2600      	movs	r6, #0
 8006f5a:	9604      	str	r6, [sp, #16]
 8006f5c:	9103      	str	r1, [sp, #12]
 8006f5e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006f62:	9102      	str	r1, [sp, #8]
 8006f64:	9201      	str	r2, [sp, #4]
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	462b      	mov	r3, r5
 8006f6a:	4a2d      	ldr	r2, [pc, #180]	; (8007020 <AT_ESP8266_ND+0xc5c>)
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	f007 f92d 	bl	800e1cc <FT_String_ND>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d104      	bne.n	8006f82 <AT_ESP8266_ND+0xbbe>
				{
						AT_decode=at_tcp_conn_err;
 8006f78:	2306      	movs	r3, #6
 8006f7a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8006f7e:	f000 be19 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
				}
				 else
				 {
				//------------------CONECTAR TCP YA CONECTADO------------------//
				a->_n_fcomp=strlen("\r\nALREADY CONNECTED\r\n");
 8006f82:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f86:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2215      	movs	r2, #21
 8006f8e:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nALREADY CONNECTED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 8006f92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006f96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8006fa0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fa4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8006fae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8006fbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8006fc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8006fca:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8006fce:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8006fd2:	6812      	ldr	r2, [r2, #0]
 8006fd4:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8006fd8:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8006fdc:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8006fe0:	6809      	ldr	r1, [r1, #0]
 8006fe2:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8006fe6:	2600      	movs	r6, #0
 8006fe8:	9604      	str	r6, [sp, #16]
 8006fea:	9103      	str	r1, [sp, #12]
 8006fec:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8006ff0:	9102      	str	r1, [sp, #8]
 8006ff2:	9201      	str	r2, [sp, #4]
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	462b      	mov	r3, r5
 8006ff8:	4a0a      	ldr	r2, [pc, #40]	; (8007024 <AT_ESP8266_ND+0xc60>)
 8006ffa:	4621      	mov	r1, r4
 8006ffc:	f007 f8e6 	bl	800e1cc <FT_String_ND>
 8007000:	4603      	mov	r3, r0
 8007002:	2b01      	cmp	r3, #1
 8007004:	d110      	bne.n	8007028 <AT_ESP8266_ND+0xc64>
				{
					 	AT_decode=at_tcp_alrdy_cnntd_err;
 8007006:	230e      	movs	r3, #14
 8007008:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800700c:	f000 bdd2 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
 8007010:	08010228 	.word	0x08010228
 8007014:	08010234 	.word	0x08010234
 8007018:	08010240 	.word	0x08010240
 800701c:	08010248 	.word	0x08010248
 8007020:	08010250 	.word	0x08010250
 8007024:	0801025c 	.word	0x0801025c
				}
				else
				{
				//------------------OK PARA ENVIAR------------------//
				a->_n_fcomp=strlen("AT+CIPSERVER");
 8007028:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800702c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	220c      	movs	r2, #12
 8007034:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSERVER",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007038:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800703c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007046:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800704a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007054:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007058:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007062:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007066:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007070:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007074:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007078:	6812      	ldr	r2, [r2, #0]
 800707a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800707e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007082:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007086:	6809      	ldr	r1, [r1, #0]
 8007088:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800708c:	2600      	movs	r6, #0
 800708e:	9604      	str	r6, [sp, #16]
 8007090:	9103      	str	r1, [sp, #12]
 8007092:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007096:	9102      	str	r1, [sp, #8]
 8007098:	9201      	str	r2, [sp, #4]
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	462b      	mov	r3, r5
 800709e:	4ab7      	ldr	r2, [pc, #732]	; (800737c <AT_ESP8266_ND+0xfb8>)
 80070a0:	4621      	mov	r1, r4
 80070a2:	f007 f893 	bl	800e1cc <FT_String_ND>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d104      	bne.n	80070b6 <AT_ESP8266_ND+0xcf2>
				{
					AT_decode=at_tcp_srvr_err;
 80070ac:	2316      	movs	r3, #22
 80070ae:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80070b2:	f000 bd7f 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
				}
				else
				{
				//------------------DESCONECTAR TCP CUANDOYA EST� DESCONECTADO------------------//
				a->_n_fcomp=strlen("AT+CIPCLOSE");
 80070b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	220b      	movs	r2, #11
 80070c2:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPCLOSE",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 80070c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80070d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80070e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80070f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80070f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80070fe:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007102:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007106:	6812      	ldr	r2, [r2, #0]
 8007108:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800710c:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007110:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007114:	6809      	ldr	r1, [r1, #0]
 8007116:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800711a:	2600      	movs	r6, #0
 800711c:	9604      	str	r6, [sp, #16]
 800711e:	9103      	str	r1, [sp, #12]
 8007120:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007124:	9102      	str	r1, [sp, #8]
 8007126:	9201      	str	r2, [sp, #4]
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	462b      	mov	r3, r5
 800712c:	4a94      	ldr	r2, [pc, #592]	; (8007380 <AT_ESP8266_ND+0xfbc>)
 800712e:	4621      	mov	r1, r4
 8007130:	f007 f84c 	bl	800e1cc <FT_String_ND>
 8007134:	4603      	mov	r3, r0
 8007136:	2b01      	cmp	r3, #1
 8007138:	d104      	bne.n	8007144 <AT_ESP8266_ND+0xd80>
					{
						AT_decode=at_tcp_close_err;
 800713a:	231a      	movs	r3, #26
 800713c:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007140:	f000 bd38 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------INTENTAR ENVIAR DATOS EN TCP CAIDO------------------//
				a->_n_fcomp=strlen("link is not valid");
 8007144:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007148:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2211      	movs	r2, #17
 8007150:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"link is not valid",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 8007154:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007158:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007162:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007166:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007170:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007174:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800717e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007182:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800718c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007190:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007194:	6812      	ldr	r2, [r2, #0]
 8007196:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800719a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800719e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80071a2:	6809      	ldr	r1, [r1, #0]
 80071a4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80071a8:	2600      	movs	r6, #0
 80071aa:	9604      	str	r6, [sp, #16]
 80071ac:	9103      	str	r1, [sp, #12]
 80071ae:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80071b2:	9102      	str	r1, [sp, #8]
 80071b4:	9201      	str	r2, [sp, #4]
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	462b      	mov	r3, r5
 80071ba:	4a72      	ldr	r2, [pc, #456]	; (8007384 <AT_ESP8266_ND+0xfc0>)
 80071bc:	4621      	mov	r1, r4
 80071be:	f007 f805 	bl	800e1cc <FT_String_ND>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d104      	bne.n	80071d2 <AT_ESP8266_ND+0xe0e>
					{
						AT_decode=at_tcp_snd_err;
 80071c8:	2311      	movs	r3, #17
 80071ca:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80071ce:	f000 bcf1 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------CAMBIAR MODO DE FUNCIONAMIENTO------------------//
				a->_n_fcomp=strlen("AT+CWMODE=");
 80071d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	220a      	movs	r2, #10
 80071de:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWMODE=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Error desconectar TCP ya desconectado
 80071e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80071f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80071f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80071fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007202:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800720c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007210:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800721a:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800721e:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007222:	6812      	ldr	r2, [r2, #0]
 8007224:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007228:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800722c:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007230:	6809      	ldr	r1, [r1, #0]
 8007232:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007236:	2600      	movs	r6, #0
 8007238:	9604      	str	r6, [sp, #16]
 800723a:	9103      	str	r1, [sp, #12]
 800723c:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007240:	9102      	str	r1, [sp, #8]
 8007242:	9201      	str	r2, [sp, #4]
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	462b      	mov	r3, r5
 8007248:	4a4f      	ldr	r2, [pc, #316]	; (8007388 <AT_ESP8266_ND+0xfc4>)
 800724a:	4621      	mov	r1, r4
 800724c:	f006 ffbe 	bl	800e1cc <FT_String_ND>
 8007250:	4603      	mov	r3, r0
 8007252:	2b01      	cmp	r3, #1
 8007254:	d104      	bne.n	8007260 <AT_ESP8266_ND+0xe9c>
					{
						AT_decode=at_cambiar_modo_err;
 8007256:	231d      	movs	r3, #29
 8007258:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800725c:	f000 bcaa 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=1");
 8007260:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007264:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	220b      	movs	r2, #11
 800726c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=1",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007270:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007274:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800727e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007282:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800728c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007290:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800729a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800729e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80072a8:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80072ac:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80072b0:	6812      	ldr	r2, [r2, #0]
 80072b2:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80072b6:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80072ba:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80072be:	6809      	ldr	r1, [r1, #0]
 80072c0:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80072c4:	2600      	movs	r6, #0
 80072c6:	9604      	str	r6, [sp, #16]
 80072c8:	9103      	str	r1, [sp, #12]
 80072ca:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80072ce:	9102      	str	r1, [sp, #8]
 80072d0:	9201      	str	r2, [sp, #4]
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	462b      	mov	r3, r5
 80072d6:	4a2d      	ldr	r2, [pc, #180]	; (800738c <AT_ESP8266_ND+0xfc8>)
 80072d8:	4621      	mov	r1, r4
 80072da:	f006 ff77 	bl	800e1cc <FT_String_ND>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d104      	bne.n	80072ee <AT_ESP8266_ND+0xf2a>
					{
						AT_decode=at_multiple_conn_err;
 80072e4:	231e      	movs	r3, #30
 80072e6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80072ea:	f000 bc63 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------DEFIIR NO MULTIPLES CONEXIONES OK------------------//
				a->_n_fcomp=strlen("AT+CIPMUX=0");
 80072ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80072f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	220b      	movs	r2, #11
 80072fa:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPMUX=0",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80072fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007302:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800730c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007310:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800731a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800731e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007328:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800732c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007336:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800733a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800733e:	6812      	ldr	r2, [r2, #0]
 8007340:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007344:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007348:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800734c:	6809      	ldr	r1, [r1, #0]
 800734e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007352:	2600      	movs	r6, #0
 8007354:	9604      	str	r6, [sp, #16]
 8007356:	9103      	str	r1, [sp, #12]
 8007358:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800735c:	9102      	str	r1, [sp, #8]
 800735e:	9201      	str	r2, [sp, #4]
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	462b      	mov	r3, r5
 8007364:	4a0a      	ldr	r2, [pc, #40]	; (8007390 <AT_ESP8266_ND+0xfcc>)
 8007366:	4621      	mov	r1, r4
 8007368:	f006 ff30 	bl	800e1cc <FT_String_ND>
 800736c:	4603      	mov	r3, r0
 800736e:	2b01      	cmp	r3, #1
 8007370:	d110      	bne.n	8007394 <AT_ESP8266_ND+0xfd0>
					{
						AT_decode=at_no_multiple_conn_err;
 8007372:	231f      	movs	r3, #31
 8007374:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007378:	f000 bc1c 	b.w	8007bb4 <AT_ESP8266_ND+0x17f0>
 800737c:	08010200 	.word	0x08010200
 8007380:	08010210 	.word	0x08010210
 8007384:	08010274 	.word	0x08010274
 8007388:	080101e0 	.word	0x080101e0
 800738c:	0801021c 	.word	0x0801021c
 8007390:	08010228 	.word	0x08010228
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CWJAP");
 8007394:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007398:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2208      	movs	r2, #8
 80073a0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CWJAP",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80073a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80073b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80073c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80073ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80073d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80073dc:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80073e0:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80073e4:	6812      	ldr	r2, [r2, #0]
 80073e6:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80073ea:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80073ee:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80073f2:	6809      	ldr	r1, [r1, #0]
 80073f4:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80073f8:	2600      	movs	r6, #0
 80073fa:	9604      	str	r6, [sp, #16]
 80073fc:	9103      	str	r1, [sp, #12]
 80073fe:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007402:	9102      	str	r1, [sp, #8]
 8007404:	9201      	str	r2, [sp, #4]
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	462b      	mov	r3, r5
 800740a:	4ac4      	ldr	r2, [pc, #784]	; (800771c <AT_ESP8266_ND+0x1358>)
 800740c:	4621      	mov	r1, r4
 800740e:	f006 fedd 	bl	800e1cc <FT_String_ND>
 8007412:	4603      	mov	r3, r0
 8007414:	2b01      	cmp	r3, #1
 8007416:	d103      	bne.n	8007420 <AT_ESP8266_ND+0x105c>
					{
						AT_decode=at_conn_wifi_err;
 8007418:	2320      	movs	r3, #32
 800741a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800741e:	e3c9      	b.n	8007bb4 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("AT+CIPSTA=");
 8007420:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007424:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	220a      	movs	r2, #10
 800742c:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"AT+CIPSTA=",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 8007430:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007434:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f203 6094 	addw	r0, r3, #1684	; 0x694
 800743e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007442:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800744c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007450:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800745a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800745e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007468:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800746c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007470:	6812      	ldr	r2, [r2, #0]
 8007472:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007476:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800747a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800747e:	6809      	ldr	r1, [r1, #0]
 8007480:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007484:	2600      	movs	r6, #0
 8007486:	9604      	str	r6, [sp, #16]
 8007488:	9103      	str	r1, [sp, #12]
 800748a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800748e:	9102      	str	r1, [sp, #8]
 8007490:	9201      	str	r2, [sp, #4]
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	462b      	mov	r3, r5
 8007496:	4aa2      	ldr	r2, [pc, #648]	; (8007720 <AT_ESP8266_ND+0x135c>)
 8007498:	4621      	mov	r1, r4
 800749a:	f006 fe97 	bl	800e1cc <FT_String_ND>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d103      	bne.n	80074ac <AT_ESP8266_ND+0x10e8>
					{
						AT_decode=at_def_ip_err;
 80074a4:	2321      	movs	r3, #33	; 0x21
 80074a6:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80074aa:	e383      	b.n	8007bb4 <AT_ESP8266_ND+0x17f0>
					}
				else
				{
				//------------------ERROR AL CONECTAR WIFI------------------//
				a->_n_fcomp=strlen("no ip");
 80074ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2205      	movs	r2, #5
 80074b8:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"no ip",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)
 80074bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074c0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80074ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074ce:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80074d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074dc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80074e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80074ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80074f4:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80074f8:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80074fc:	6812      	ldr	r2, [r2, #0]
 80074fe:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007502:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007506:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800750a:	6809      	ldr	r1, [r1, #0]
 800750c:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007510:	2600      	movs	r6, #0
 8007512:	9604      	str	r6, [sp, #16]
 8007514:	9103      	str	r1, [sp, #12]
 8007516:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800751a:	9102      	str	r1, [sp, #8]
 800751c:	9201      	str	r2, [sp, #4]
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	462b      	mov	r3, r5
 8007522:	4a80      	ldr	r2, [pc, #512]	; (8007724 <AT_ESP8266_ND+0x1360>)
 8007524:	4621      	mov	r1, r4
 8007526:	f006 fe51 	bl	800e1cc <FT_String_ND>
 800752a:	4603      	mov	r3, r0
 800752c:	2b01      	cmp	r3, #1
 800752e:	f040 8341 	bne.w	8007bb4 <AT_ESP8266_ND+0x17f0>
					{
						AT_decode=at_tcp_noip_err;  //PROCESAR
 8007532:	2322      	movs	r3, #34	; 0x22
 8007534:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007538:	e33c      	b.n	8007bb4 <AT_ESP8266_ND+0x17f0>
		else
		{
			 //--------------------------------------------------------------------------------------------------------------//
			 // 	Continuo preguntando por las string individuales, los que nos tienen datos comunes		     			 //
			 //--------------------------------------------------------------------------------------------------------------//
			a->_n_fcomp=strlen("WIFI DISCONNECT");
 800753a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800753e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	220f      	movs	r2, #15
 8007546:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI DISCONNECT",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"WIFI DISCONNECT\r\n\r\nOK\r\n")==0)//WIFI DESCONECTADA
 800754a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800754e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007558:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800755c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007566:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800756a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007574:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007578:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007582:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007586:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 800758a:	6812      	ldr	r2, [r2, #0]
 800758c:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007590:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007594:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007598:	6809      	ldr	r1, [r1, #0]
 800759a:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 800759e:	2600      	movs	r6, #0
 80075a0:	9604      	str	r6, [sp, #16]
 80075a2:	9103      	str	r1, [sp, #12]
 80075a4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80075a8:	9102      	str	r1, [sp, #8]
 80075aa:	9201      	str	r2, [sp, #4]
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	462b      	mov	r3, r5
 80075b0:	4a5d      	ldr	r2, [pc, #372]	; (8007728 <AT_ESP8266_ND+0x1364>)
 80075b2:	4621      	mov	r1, r4
 80075b4:	f006 fe0a 	bl	800e1cc <FT_String_ND>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d112      	bne.n	80075e4 <AT_ESP8266_ND+0x1220>
				{
					 AT_decode=at_wifi_disconnect;
 80075be:	230a      	movs	r3, #10
 80075c0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					 a->_debug_WF_DISCONNECT++;
 80075c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
 80075e2:	e2e7      	b.n	8007bb4 <AT_ESP8266_ND+0x17f0>
				}
			else
			{
			//------------------CLIENTE DESCONECTADO DEL SERVIDOR ------------------//
			a->_n_fcomp=strlen(",CLOSED\r\n");
 80075e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075e8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2209      	movs	r2, #9
 80075f0:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 80075f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80075f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007602:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007606:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007610:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007614:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800761e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007622:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800762c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007630:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007634:	6812      	ldr	r2, [r2, #0]
 8007636:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800763a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800763e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007642:	6809      	ldr	r1, [r1, #0]
 8007644:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007648:	2600      	movs	r6, #0
 800764a:	9604      	str	r6, [sp, #16]
 800764c:	9103      	str	r1, [sp, #12]
 800764e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007652:	9102      	str	r1, [sp, #8]
 8007654:	9201      	str	r2, [sp, #4]
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	462b      	mov	r3, r5
 800765a:	4a34      	ldr	r2, [pc, #208]	; (800772c <AT_ESP8266_ND+0x1368>)
 800765c:	4621      	mov	r1, r4
 800765e:	f006 fdb5 	bl	800e1cc <FT_String_ND>
 8007662:	4603      	mov	r3, r0
 8007664:	2b01      	cmp	r3, #1
 8007666:	d112      	bne.n	800768e <AT_ESP8266_ND+0x12ca>
				{
					AT_decode=at_tcp_client_desc;
 8007668:	2319      	movs	r3, #25
 800766a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					a->_debug_CLOSED++;
 800766e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007672:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007682:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f8c3 2d2c 	str.w	r2, [r3, #3372]	; 0xd2c
 800768c:	e292      	b.n	8007bb4 <AT_ESP8266_ND+0x17f0>
			//------------------TCP CAIDO DESPUES DE CONECTADO------------------//
			// En el envío contínuo el CLOSED se concatena con el SEND OK y si //
			// primero ve el SEND OKse queda en el estado 705 por error al     //
			//  enviar														  //
			//-----------------------------------------------------------------//
			a->_n_fcomp=strlen("CLOSED\r\n");
 800768e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007692:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2208      	movs	r2, #8
 800769a:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"CLOSED\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"CLOSED\r\n")==0)//Cerrado TCP desde la APP
 800769e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80076ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80076ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80076c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80076cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80076d6:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80076da:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80076de:	6812      	ldr	r2, [r2, #0]
 80076e0:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80076e4:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80076e8:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80076ec:	6809      	ldr	r1, [r1, #0]
 80076ee:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80076f2:	2600      	movs	r6, #0
 80076f4:	9604      	str	r6, [sp, #16]
 80076f6:	9103      	str	r1, [sp, #12]
 80076f8:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80076fc:	9102      	str	r1, [sp, #8]
 80076fe:	9201      	str	r2, [sp, #4]
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	462b      	mov	r3, r5
 8007704:	4a0a      	ldr	r2, [pc, #40]	; (8007730 <AT_ESP8266_ND+0x136c>)
 8007706:	4621      	mov	r1, r4
 8007708:	f006 fd60 	bl	800e1cc <FT_String_ND>
 800770c:	4603      	mov	r3, r0
 800770e:	2b01      	cmp	r3, #1
 8007710:	d110      	bne.n	8007734 <AT_ESP8266_ND+0x1370>
				{
					AT_decode=at_tcp_desconectado;
 8007712:	2310      	movs	r3, #16
 8007714:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007718:	e24c      	b.n	8007bb4 <AT_ESP8266_ND+0x17f0>
 800771a:	bf00      	nop
 800771c:	08010288 	.word	0x08010288
 8007720:	08010234 	.word	0x08010234
 8007724:	08010294 	.word	0x08010294
 8007728:	0801029c 	.word	0x0801029c
 800772c:	080102ac 	.word	0x080102ac
 8007730:	08010250 	.word	0x08010250
				}
			else
			{

			//------------------ENVIADO = RECIBIDO ------------------//
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,a->_uart2snd,&a->_n_cmp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,a->_uart2snd)==0)//Recibo OK para transmitir
 8007734:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007738:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007742:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007746:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007750:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007754:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f203 4594 	addw	r5, r3, #1172	; 0x494
 800775e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007762:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f603 46dc 	addw	r6, r3, #3292	; 0xcdc
 800776c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007770:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800777a:	603b      	str	r3, [r7, #0]
 800777c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007780:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007784:	6812      	ldr	r2, [r2, #0]
 8007786:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800778a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800778e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007792:	6809      	ldr	r1, [r1, #0]
 8007794:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007798:	2300      	movs	r3, #0
 800779a:	9304      	str	r3, [sp, #16]
 800779c:	9103      	str	r1, [sp, #12]
 800779e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80077a2:	9102      	str	r1, [sp, #8]
 80077a4:	9201      	str	r2, [sp, #4]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	4633      	mov	r3, r6
 80077ac:	462a      	mov	r2, r5
 80077ae:	4621      	mov	r1, r4
 80077b0:	f006 fd0c 	bl	800e1cc <FT_String_ND>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d112      	bne.n	80077e0 <AT_ESP8266_ND+0x141c>
				 {
				 	if (a->_uartRCVD[0] != '\0') //Borro el vector de recepción
 80077ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f893 3694 	ldrb.w	r3, [r3, #1684]	; 0x694
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 81f3 	beq.w	8007bb4 <AT_ESP8266_ND+0x17f0>
				 		{
				 		//AT_decode=10;
				 		a->_n_orig=0;
 80077ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2200      	movs	r2, #0
 80077da:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
 80077de:	e1e9      	b.n	8007bb4 <AT_ESP8266_ND+0x17f0>
				 		}
				 	}
			else
			{
			//------------------PAQUETE ENVIADO EN FALLA--------------//
			a->_n_fcomp=strlen("\r\nSEND FAIL\r\n");
 80077e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	220d      	movs	r2, #13
 80077ec:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			 if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nSEND FAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//if (strcmp(a->_uartRCVD,"\r\nSEND OK\r\n")==0)//Transmision ok
 80077f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80077f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80077fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007802:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 800780c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007810:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800781a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800781e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007828:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800782c:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007830:	6812      	ldr	r2, [r2, #0]
 8007832:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007836:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800783a:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 800783e:	6809      	ldr	r1, [r1, #0]
 8007840:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007844:	2600      	movs	r6, #0
 8007846:	9604      	str	r6, [sp, #16]
 8007848:	9103      	str	r1, [sp, #12]
 800784a:	f507 710c 	add.w	r1, r7, #560	; 0x230
 800784e:	9102      	str	r1, [sp, #8]
 8007850:	9201      	str	r2, [sp, #4]
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	462b      	mov	r3, r5
 8007856:	4aaf      	ldr	r2, [pc, #700]	; (8007b14 <AT_ESP8266_ND+0x1750>)
 8007858:	4621      	mov	r1, r4
 800785a:	f006 fcb7 	bl	800e1cc <FT_String_ND>
 800785e:	4603      	mov	r3, r0
 8007860:	2b01      	cmp	r3, #1
 8007862:	d112      	bne.n	800788a <AT_ESP8266_ND+0x14c6>
			 	{
			 	 AT_decode=at_tcp_enviado_error;
 8007864:	2312      	movs	r3, #18
 8007866:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
			 	 a->_debug_FAIL++;
 800786a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800786e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f8d3 3d34 	ldr.w	r3, [r3, #3380]	; 0xd34
 8007878:	1c5a      	adds	r2, r3, #1
 800787a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800787e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f8c3 2d34 	str.w	r2, [r3, #3380]	; 0xd34
 8007888:	e194      	b.n	8007bb4 <AT_ESP8266_ND+0x17f0>



			//------------------OBTENCI�N DE IP------------------//
			// vienen concatenadas no logra ver el GOT IP se queda en el WIFI CONNECTED
			a->_n_fcomp=strlen("WIFI GOT IP\r\n");
 800788a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800788e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	220d      	movs	r2, #13
 8007896:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI GOT IP\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Obtiene IP
 800789a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800789e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80078a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 80078b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 80078c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80078c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f603 0394 	addw	r3, r3, #2196	; 0x894
 80078d2:	f507 7214 	add.w	r2, r7, #592	; 0x250
 80078d6:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 80078da:	6812      	ldr	r2, [r2, #0]
 80078dc:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 80078e0:	f507 7114 	add.w	r1, r7, #592	; 0x250
 80078e4:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 80078e8:	6809      	ldr	r1, [r1, #0]
 80078ea:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 80078ee:	2600      	movs	r6, #0
 80078f0:	9604      	str	r6, [sp, #16]
 80078f2:	9103      	str	r1, [sp, #12]
 80078f4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80078f8:	9102      	str	r1, [sp, #8]
 80078fa:	9201      	str	r2, [sp, #4]
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	462b      	mov	r3, r5
 8007900:	4a85      	ldr	r2, [pc, #532]	; (8007b18 <AT_ESP8266_ND+0x1754>)
 8007902:	4621      	mov	r1, r4
 8007904:	f006 fc62 	bl	800e1cc <FT_String_ND>
 8007908:	4603      	mov	r3, r0
 800790a:	2b01      	cmp	r3, #1
 800790c:	d112      	bne.n	8007934 <AT_ESP8266_ND+0x1570>
				{
					a->_debug_WF_GOTIP++;
 800790e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007912:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	; 0xd40
 800791c:	1c5a      	adds	r2, r3, #1
 800791e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007922:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f8c3 2d40 	str.w	r2, [r3, #3392]	; 0xd40
					AT_decode=at_wifi_gotip;
 800792c:	230c      	movs	r3, #12
 800792e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007932:	e13f      	b.n	8007bb4 <AT_ESP8266_ND+0x17f0>
				}
			else
			{
				//------------------WIFI CONECTADA------------------//
			a->_n_fcomp=strlen("WIFI CONNECTED");
 8007934:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007938:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	220e      	movs	r2, #14
 8007940:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"WIFI CONNECTED",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//WIFI CONECTADA
 8007944:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007948:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007952:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007956:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007960:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007964:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 800796e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007972:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f603 0394 	addw	r3, r3, #2196	; 0x894
 800797c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007980:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007984:	6812      	ldr	r2, [r2, #0]
 8007986:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 800798a:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800798e:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007992:	6809      	ldr	r1, [r1, #0]
 8007994:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007998:	2600      	movs	r6, #0
 800799a:	9604      	str	r6, [sp, #16]
 800799c:	9103      	str	r1, [sp, #12]
 800799e:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80079a2:	9102      	str	r1, [sp, #8]
 80079a4:	9201      	str	r2, [sp, #4]
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	462b      	mov	r3, r5
 80079aa:	4a5c      	ldr	r2, [pc, #368]	; (8007b1c <AT_ESP8266_ND+0x1758>)
 80079ac:	4621      	mov	r1, r4
 80079ae:	f006 fc0d 	bl	800e1cc <FT_String_ND>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d112      	bne.n	80079de <AT_ESP8266_ND+0x161a>
				{
					a->_debug_WF_CNNCTD++;
 80079b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079bc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f8d3 3d3c 	ldr.w	r3, [r3, #3388]	; 0xd3c
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079cc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f8c3 2d3c 	str.w	r2, [r3, #3388]	; 0xd3c
						 AT_decode=at_wifi_connected;
 80079d6:	230b      	movs	r3, #11
 80079d8:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 80079dc:	e0ea      	b.n	8007bb4 <AT_ESP8266_ND+0x17f0>
				}
			else
			{

			//------------------CLIENTE TCP CONECTADO------------------//
			a->_n_fcomp=strlen(",CONNECT\r\n");
 80079de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	220a      	movs	r2, #10
 80079ea:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
			if (FT_String_ND(a->_uartRCVD,&a->_n_orig,",CONNECT\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 80079ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80079f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f203 6094 	addw	r0, r3, #1684	; 0x694
 80079fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007a0a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a0e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007a18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007a26:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007a2a:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007a2e:	6812      	ldr	r2, [r2, #0]
 8007a30:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007a34:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007a38:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007a3c:	6809      	ldr	r1, [r1, #0]
 8007a3e:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007a42:	2600      	movs	r6, #0
 8007a44:	9604      	str	r6, [sp, #16]
 8007a46:	9103      	str	r1, [sp, #12]
 8007a48:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007a4c:	9102      	str	r1, [sp, #8]
 8007a4e:	9201      	str	r2, [sp, #4]
 8007a50:	9300      	str	r3, [sp, #0]
 8007a52:	462b      	mov	r3, r5
 8007a54:	4a32      	ldr	r2, [pc, #200]	; (8007b20 <AT_ESP8266_ND+0x175c>)
 8007a56:	4621      	mov	r1, r4
 8007a58:	f006 fbb8 	bl	800e1cc <FT_String_ND>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d112      	bne.n	8007a88 <AT_ESP8266_ND+0x16c4>
				  {
					  AT_decode=at_tcp_client_conectado;
 8007a62:	2318      	movs	r3, #24
 8007a64:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					  a->_debug_CONNECT++;
 8007a68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f8d3 3d28 	ldr.w	r3, [r3, #3368]	; 0xd28
 8007a76:	1c5a      	adds	r2, r3, #1
 8007a78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f8c3 2d28 	str.w	r2, [r3, #3368]	; 0xd28
 8007a86:	e095      	b.n	8007bb4 <AT_ESP8266_ND+0x17f0>
				  }
			else
			{

			//------------------FALLA------------------//
			a->_n_fcomp=strlen("\r\nFAIL\r\n");
 8007a88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2208      	movs	r2, #8
 8007a94:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"\r\nFAIL\r\n",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007a98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007a9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007aa6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007aaa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007ab4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ab8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007ac2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ac6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007ad0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007ad4:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007ad8:	6812      	ldr	r2, [r2, #0]
 8007ada:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007ade:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007ae2:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007ae6:	6809      	ldr	r1, [r1, #0]
 8007ae8:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007aec:	2600      	movs	r6, #0
 8007aee:	9604      	str	r6, [sp, #16]
 8007af0:	9103      	str	r1, [sp, #12]
 8007af2:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007af6:	9102      	str	r1, [sp, #8]
 8007af8:	9201      	str	r2, [sp, #4]
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	462b      	mov	r3, r5
 8007afe:	4a09      	ldr	r2, [pc, #36]	; (8007b24 <AT_ESP8266_ND+0x1760>)
 8007b00:	4621      	mov	r1, r4
 8007b02:	f006 fb63 	bl	800e1cc <FT_String_ND>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d10d      	bne.n	8007b28 <AT_ESP8266_ND+0x1764>
				{
					AT_decode=at_fail;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8007b12:	e04f      	b.n	8007bb4 <AT_ESP8266_ND+0x17f0>
 8007b14:	080102b8 	.word	0x080102b8
 8007b18:	080102c8 	.word	0x080102c8
 8007b1c:	080102d8 	.word	0x080102d8
 8007b20:	080102e8 	.word	0x080102e8
 8007b24:	080102f4 	.word	0x080102f4
				}
			else
			{
			//------------------busy processing------------------//
				a->_n_fcomp=strlen("busy p...");
 8007b28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2209      	movs	r2, #9
 8007b34:	f8c3 2cec 	str.w	r2, [r3, #3308]	; 0xcec
				if (FT_String_ND(a->_uartRCVD,&a->_n_orig,"busy p...",&a->_n_fcomp,a->_uartRCVD_tok,&a->_n_tok,&chr_pos_fnc,&a->_id_conn,FIND)==1)//Conectado desde el modulo
 8007b38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f203 6094 	addw	r0, r3, #1684	; 0x694
 8007b46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f603 44d8 	addw	r4, r3, #3288	; 0xcd8
 8007b54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f603 45ec 	addw	r5, r3, #3308	; 0xcec
 8007b62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007b66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f603 0394 	addw	r3, r3, #2196	; 0x894
 8007b70:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8007b74:	f5a2 7213 	sub.w	r2, r2, #588	; 0x24c
 8007b78:	6812      	ldr	r2, [r2, #0]
 8007b7a:	f502 624e 	add.w	r2, r2, #3296	; 0xce0
 8007b7e:	f507 7114 	add.w	r1, r7, #592	; 0x250
 8007b82:	f5a1 7113 	sub.w	r1, r1, #588	; 0x24c
 8007b86:	6809      	ldr	r1, [r1, #0]
 8007b88:	f601 2194 	addw	r1, r1, #2708	; 0xa94
 8007b8c:	2600      	movs	r6, #0
 8007b8e:	9604      	str	r6, [sp, #16]
 8007b90:	9103      	str	r1, [sp, #12]
 8007b92:	f507 710c 	add.w	r1, r7, #560	; 0x230
 8007b96:	9102      	str	r1, [sp, #8]
 8007b98:	9201      	str	r2, [sp, #4]
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	462b      	mov	r3, r5
 8007b9e:	4a77      	ldr	r2, [pc, #476]	; (8007d7c <AT_ESP8266_ND+0x19b8>)
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	f006 fb13 	bl	800e1cc <FT_String_ND>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d103      	bne.n	8007bb4 <AT_ESP8266_ND+0x17f0>
					{
					AT_decode=at_busy_p;
 8007bac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007bb0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
		}}}}}}}}}}
	}

 //Eval�o todo lo recibido desde el puerto serie

		switch (a->_instruccion)
 8007bb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f8d3 3aac 	ldr.w	r3, [r3, #2732]	; 0xaac
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	2b08      	cmp	r3, #8
 8007bc6:	f201 84c6 	bhi.w	8009556 <AT_ESP8266_ND+0x3192>
 8007bca:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <AT_ESP8266_ND+0x180c>)
 8007bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd0:	08007bf5 	.word	0x08007bf5
 8007bd4:	08007d85 	.word	0x08007d85
 8007bd8:	08008007 	.word	0x08008007
 8007bdc:	08008185 	.word	0x08008185
 8007be0:	0800835d 	.word	0x0800835d
 8007be4:	08008631 	.word	0x08008631
 8007be8:	080088e9 	.word	0x080088e9
 8007bec:	08008e01 	.word	0x08008e01
 8007bf0:	08008fd7 	.word	0x08008fd7
			//--------------------------------------------------------//
			//					Cambiar CWMODE						  //
		    //--------------------------------------------------------//
			case 1:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007bf4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007bf8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8007c04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c08:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d14f      	bne.n	8007cb6 <AT_ESP8266_ND+0x18f2>
 8007c16:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d04b      	beq.n	8007cb6 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_error)
 8007c1e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d047      	beq.n	8007cb6 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_restart)
 8007c26:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	d043      	beq.n	8007cb6 <AT_ESP8266_ND+0x18f2>
									   &&(AT_decode!=at_tcp_enviado_ok))
 8007c2e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007c32:	2b13      	cmp	r3, #19
 8007c34:	d03f      	beq.n	8007cb6 <AT_ESP8266_ND+0x18f2>
						{
						a->_pasos=0;
 8007c36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8007c46:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c4a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						strncat(a->_uart2snd,"AT+CWMODE=1\r\n",strlen("AT+CWMODE=1\r\n"));
 8007c56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8007c64:	4620      	mov	r0, r4
 8007c66:	f7f8 fac5 	bl	80001f4 <strlen>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	4423      	add	r3, r4
 8007c6e:	4a44      	ldr	r2, [pc, #272]	; (8007d80 <AT_ESP8266_ND+0x19bc>)
 8007c70:	461c      	mov	r4, r3
 8007c72:	4613      	mov	r3, r2
 8007c74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007c76:	6020      	str	r0, [r4, #0]
 8007c78:	6061      	str	r1, [r4, #4]
 8007c7a:	60a2      	str	r2, [r4, #8]
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	81a3      	strh	r3, [r4, #12]
						a->_n_uart2SND=strlen(a->_uart2snd);
 8007c80:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c84:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7f8 fab0 	bl	80001f4 <strlen>
 8007c94:	4603      	mov	r3, r0
 8007c96:	461a      	mov	r2, r3
 8007c98:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007c9c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=100;
 8007ca6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007caa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2264      	movs	r2, #100	; 0x64
 8007cb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}
				a->_pasos++;
 8007cb6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007cc4:	1c5a      	adds	r2, r3, #1
 8007cc6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_cambiar_modo_ok)
 8007cd4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007cd8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d11b      	bne.n	8007d1e <AT_ESP8266_ND+0x195a>
 8007ce6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d023      	beq.n	8007d36 <AT_ESP8266_ND+0x1972>
 8007cee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007cf2:	2b1c      	cmp	r3, #28
 8007cf4:	d01f      	beq.n	8007d36 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_error)
 8007cf6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d01b      	beq.n	8007d36 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_restart)
 8007cfe:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007d02:	2b04      	cmp	r3, #4
 8007d04:	d017      	beq.n	8007d36 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_connected)
 8007d06:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007d0a:	2b0b      	cmp	r3, #11
 8007d0c:	d013      	beq.n	8007d36 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_wifi_gotip)
 8007d0e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007d12:	2b0c      	cmp	r3, #12
 8007d14:	d00f      	beq.n	8007d36 <AT_ESP8266_ND+0x1972>
															 ||(AT_decode==at_tcp_enviado_ok)))
 8007d16:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007d1a:	2b13      	cmp	r3, #19
 8007d1c:	d00b      	beq.n	8007d36 <AT_ESP8266_ND+0x1972>
															 ||(a->_ticks > 5000))//210630 Se agrega ATDecode 11 y 12 //Que analice luego de enviar por uart
 8007d1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8007d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d30:	4293      	cmp	r3, r2
 8007d32:	f341 841a 	ble.w	800956a <AT_ESP8266_ND+0x31a6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007d36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8007d48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8007d58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8007d68:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d6c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}

			}
			break;
 8007d78:	f001 bbf7 	b.w	800956a <AT_ESP8266_ND+0x31a6>
 8007d7c:	08010300 	.word	0x08010300
 8007d80:	0801030c 	.word	0x0801030c
			//--------------------------------------------------------//
			//					Conectar WiFi						  //
		    //--------------------------------------------------------//
			case 2:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8007d84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
				if(( a->_enviaruart==1)&&(AT_decode!=at_ok)
 8007d94:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007d98:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	f040 80c8 	bne.w	8007f38 <AT_ESP8266_ND+0x1b74>
 8007da8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	f000 80c3 	beq.w	8007f38 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_error)
 8007db2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	f000 80be 	beq.w	8007f38 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_fail)
 8007dbc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	f000 80b9 	beq.w	8007f38 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_restart)
 8007dc6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007dca:	2b04      	cmp	r3, #4
 8007dcc:	f000 80b4 	beq.w	8007f38 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_disconnect)
 8007dd0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007dd4:	2b0a      	cmp	r3, #10
 8007dd6:	f000 80af 	beq.w	8007f38 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_connected)
 8007dda:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007dde:	2b0b      	cmp	r3, #11
 8007de0:	f000 80aa 	beq.w	8007f38 <AT_ESP8266_ND+0x1b74>
									   &&(AT_decode!=at_wifi_gotip))
 8007de4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007de8:	2b0c      	cmp	r3, #12
 8007dea:	f000 80a5 	beq.w	8007f38 <AT_ESP8266_ND+0x1b74>
						{
						a->_pasos=0;
 8007dee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007df2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8007dfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						////HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_SET);
						//------Generacion del comando para conectar---------//
						strncat(a->_uart2snd,"AT+CWJAP=",strlen("AT+CWJAP="));
 8007e0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f7f8 f9e9 	bl	80001f4 <strlen>
 8007e22:	4603      	mov	r3, r0
 8007e24:	4423      	add	r3, r4
 8007e26:	49d5      	ldr	r1, [pc, #852]	; (800817c <AT_ESP8266_ND+0x1db8>)
 8007e28:	461a      	mov	r2, r3
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	cb03      	ldmia	r3!, {r0, r1}
 8007e2e:	6010      	str	r0, [r2, #0]
 8007e30:	6051      	str	r1, [r2, #4]
 8007e32:	881b      	ldrh	r3, [r3, #0]
 8007e34:	8113      	strh	r3, [r2, #8]
						strncat(a->_uart2snd,&comillas,1);
 8007e36:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e3a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8007e44:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8007e48:	2201      	movs	r2, #1
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f006 ff63 	bl	800ed16 <strncat>
						strncat(a->_uart2snd,a->_WF_Net,strlen(a->_WF_Net));
 8007e50:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e54:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8007e5e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e62:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	1d9d      	adds	r5, r3, #6
 8007e6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3306      	adds	r3, #6
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7f8 f9bc 	bl	80001f4 <strlen>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	461a      	mov	r2, r3
 8007e80:	4629      	mov	r1, r5
 8007e82:	4620      	mov	r0, r4
 8007e84:	f006 ff47 	bl	800ed16 <strncat>
						strncat(a->_uart2snd,separador,strlen(separador));//strncat(a->_uart2snd,separador,3);//
 8007e88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007e8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8007e96:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7f8 f9aa 	bl	80001f4 <strlen>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	f006 ff34 	bl	800ed16 <strncat>
						strncat(a->_uart2snd,a->_WF_Pass,strlen(a->_WF_Pass));
 8007eae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eb2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8007ebc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ec0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8007eca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ece:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3326      	adds	r3, #38	; 0x26
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7f8 f98c 	bl	80001f4 <strlen>
 8007edc:	4603      	mov	r3, r0
 8007ede:	461a      	mov	r2, r3
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f006 ff17 	bl	800ed16 <strncat>
						strncat(a->_uart2snd,finalizar,3);//strncat(a->_uart2snd,finalizar,strlen(finalizar));
 8007ee8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007eec:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8007ef6:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8007efa:	2203      	movs	r2, #3
 8007efc:	4618      	mov	r0, r3
 8007efe:	f006 ff0a 	bl	800ed16 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);//210418
 8007f02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7f8 f96f 	bl	80001f4 <strlen>
 8007f16:	4603      	mov	r3, r0
 8007f18:	461a      	mov	r2, r3
 8007f1a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f1e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=200;
 8007f28:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f2c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	22c8      	movs	r2, #200	; 0xc8
 8007f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando para conectar---------//
						}

				a->_pasos++;
 8007f38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f3c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8007f46:	1c5a      	adds	r2, r3, #1
 8007f48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_error)
 8007f56:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007f5a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d11b      	bne.n	8007fa0 <AT_ESP8266_ND+0x1bdc>
 8007f68:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d023      	beq.n	8007fb8 <AT_ESP8266_ND+0x1bf4>
 8007f70:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d01f      	beq.n	8007fb8 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_fail)
 8007f78:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f7c:	2b03      	cmp	r3, #3
 8007f7e:	d01b      	beq.n	8007fb8 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_restart)
 8007f80:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d017      	beq.n	8007fb8 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_disconnect)
 8007f88:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f8c:	2b0a      	cmp	r3, #10
 8007f8e:	d013      	beq.n	8007fb8 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_connected)
 8007f90:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f94:	2b0b      	cmp	r3, #11
 8007f96:	d00f      	beq.n	8007fb8 <AT_ESP8266_ND+0x1bf4>
															||(AT_decode==at_wifi_gotip)))
 8007f98:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007f9c:	2b0c      	cmp	r3, #12
 8007f9e:	d00b      	beq.n	8007fb8 <AT_ESP8266_ND+0x1bf4>
															||(a->_ticks2 > 20000))  //Que analice luego de enviar por uart
 8007fa0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fa4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f8d3 3cb8 	ldr.w	r3, [r3, #3256]	; 0xcb8
 8007fae:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	f341 82db 	ble.w	800956e <AT_ESP8266_ND+0x31aa>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8007fb8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fbc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8007fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						if(AT_decode!=at_wifi_disconnect)
 8007fca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007fce:	2b0a      	cmp	r3, #10
 8007fd0:	d00f      	beq.n	8007ff2 <AT_ESP8266_ND+0x1c2e>
						{
							a->_instruccion=0;	//Para que siga contando por timeout al recibir WIFI DISCONNECT//Finalizo la instrucci�n
 8007fd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
							a->_ejecucion=0;
 8007fe2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007fe6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
							//HW_RESET(a);
							//HAL_GPIO_WritePin(a->RESET_PORT, a->RESET_PIN , GPIO_PIN_RESET);
							//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
						}

						a->_ticks2=0;
 8007ff2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8007ff6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f8c3 2cb8 	str.w	r2, [r3, #3256]	; 0xcb8
					}

			}
			break;
 8008002:	f001 bab4 	b.w	800956e <AT_ESP8266_ND+0x31aa>
			//--------------------------------------------------------//
			//					Desconectar WiFi					  //
		    //--------------------------------------------------------//
			case 3:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008006:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800800a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)&&(AT_decode!=at_wifi_disconnect)&&(AT_decode!=at_deconectar_ok ))
 8008016:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800801a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008024:	2b01      	cmp	r3, #1
 8008026:	d14d      	bne.n	80080c4 <AT_ESP8266_ND+0x1d00>
 8008028:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800802c:	2b04      	cmp	r3, #4
 800802e:	d049      	beq.n	80080c4 <AT_ESP8266_ND+0x1d00>
 8008030:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008034:	2b0a      	cmp	r3, #10
 8008036:	d045      	beq.n	80080c4 <AT_ESP8266_ND+0x1d00>
 8008038:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800803c:	2b0d      	cmp	r3, #13
 800803e:	d041      	beq.n	80080c4 <AT_ESP8266_ND+0x1d00>
						{
						a->_pasos=0;
 8008040:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008044:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2200      	movs	r2, #0
 800804c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008050:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008054:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2201      	movs	r2, #1
 800805c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CWQAP\r\n",strlen("AT+CWQAP\r\n"));
 8008060:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008064:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800806e:	4620      	mov	r0, r4
 8008070:	f7f8 f8c0 	bl	80001f4 <strlen>
 8008074:	4603      	mov	r3, r0
 8008076:	4423      	add	r3, r4
 8008078:	4941      	ldr	r1, [pc, #260]	; (8008180 <AT_ESP8266_ND+0x1dbc>)
 800807a:	461a      	mov	r2, r3
 800807c:	460b      	mov	r3, r1
 800807e:	cb03      	ldmia	r3!, {r0, r1}
 8008080:	6010      	str	r0, [r2, #0]
 8008082:	6051      	str	r1, [r2, #4]
 8008084:	8819      	ldrh	r1, [r3, #0]
 8008086:	789b      	ldrb	r3, [r3, #2]
 8008088:	8111      	strh	r1, [r2, #8]
 800808a:	7293      	strb	r3, [r2, #10]
						a->_n_uart2SND=strlen(a->_uart2snd);
 800808c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008090:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800809a:	4618      	mov	r0, r3
 800809c:	f7f8 f8aa 	bl	80001f4 <strlen>
 80080a0:	4603      	mov	r3, r0
 80080a2:	461a      	mov	r2, r3
 80080a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=300;
 80080b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80080c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 80080c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 80080d2:	1c5a      	adds	r2, r3, #1
 80080d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 80080e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80080e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d113      	bne.n	800811c <AT_ESP8266_ND+0x1d58>
 80080f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80080f8:	2b0a      	cmp	r3, #10
 80080fa:	d01b      	beq.n	8008134 <AT_ESP8266_ND+0x1d70>
 80080fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008100:	2b0b      	cmp	r3, #11
 8008102:	d017      	beq.n	8008134 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_wifi_gotip)
 8008104:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008108:	2b0c      	cmp	r3, #12
 800810a:	d013      	beq.n	8008134 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_restart	)
 800810c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008110:	2b04      	cmp	r3, #4
 8008112:	d00f      	beq.n	8008134 <AT_ESP8266_ND+0x1d70>
																		  ||(AT_decode==at_deconectar_ok )))
 8008114:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008118:	2b0d      	cmp	r3, #13
 800811a:	d00b      	beq.n	8008134 <AT_ESP8266_ND+0x1d70>
																		  ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 800811c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008120:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800812a:	f241 3288 	movw	r2, #5000	; 0x1388
 800812e:	4293      	cmp	r3, r2
 8008130:	f341 821f 	ble.w	8009572 <AT_ESP8266_ND+0x31ae>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008134:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008138:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008146:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800814a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2200      	movs	r2, #0
 8008152:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008156:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800815a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2200      	movs	r2, #0
 8008162:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008166:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800816a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2200      	movs	r2, #0
 8008172:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008176:	f001 b9fc 	b.w	8009572 <AT_ESP8266_ND+0x31ae>
 800817a:	bf00      	nop
 800817c:	0801031c 	.word	0x0801031c
 8008180:	08010328 	.word	0x08010328
			//--------------------------------------------------------//
			//					Multiples Conexiones     			  //
		    //--------------------------------------------------------//
			case 4:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008184:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008188:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart	)
 8008194:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008198:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d16b      	bne.n	800827e <AT_ESP8266_ND+0x1eba>
 80081a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081aa:	2b04      	cmp	r3, #4
 80081ac:	d067      	beq.n	800827e <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_ok)
 80081ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d063      	beq.n	800827e <AT_ESP8266_ND+0x1eba>
									   &&(AT_decode!=at_error))
 80081b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d05f      	beq.n	800827e <AT_ESP8266_ND+0x1eba>
						{
						a->_pasos=0;
 80081be:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081c2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80081ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2201      	movs	r2, #1
 80081da:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						if(a->_TCP_Local_Server_EN==1)
 80081de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d115      	bne.n	800821c <AT_ESP8266_ND+0x1e58>
						{
							strncat(a->_uart2snd,"AT+CIPMUX=1\r\n",strlen("AT+CIPMUX=1\r\n"));
 80081f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80081f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80081fe:	4620      	mov	r0, r4
 8008200:	f7f7 fff8 	bl	80001f4 <strlen>
 8008204:	4603      	mov	r3, r0
 8008206:	4423      	add	r3, r4
 8008208:	4a52      	ldr	r2, [pc, #328]	; (8008354 <AT_ESP8266_ND+0x1f90>)
 800820a:	461c      	mov	r4, r3
 800820c:	4613      	mov	r3, r2
 800820e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008210:	6020      	str	r0, [r4, #0]
 8008212:	6061      	str	r1, [r4, #4]
 8008214:	60a2      	str	r2, [r4, #8]
 8008216:	881b      	ldrh	r3, [r3, #0]
 8008218:	81a3      	strh	r3, [r4, #12]
 800821a:	e014      	b.n	8008246 <AT_ESP8266_ND+0x1e82>
						}
						else
						{
							strncat(a->_uart2snd,"AT+CIPMUX=0\r\n",strlen("AT+CIPMUX=0\r\n"));
 800821c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008220:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800822a:	4620      	mov	r0, r4
 800822c:	f7f7 ffe2 	bl	80001f4 <strlen>
 8008230:	4603      	mov	r3, r0
 8008232:	4423      	add	r3, r4
 8008234:	4a48      	ldr	r2, [pc, #288]	; (8008358 <AT_ESP8266_ND+0x1f94>)
 8008236:	461c      	mov	r4, r3
 8008238:	4613      	mov	r3, r2
 800823a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800823c:	6020      	str	r0, [r4, #0]
 800823e:	6061      	str	r1, [r4, #4]
 8008240:	60a2      	str	r2, [r4, #8]
 8008242:	881b      	ldrh	r3, [r3, #0]
 8008244:	81a3      	strh	r3, [r4, #12]
						}
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008246:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800824a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008254:	4618      	mov	r0, r3
 8008256:	f7f7 ffcd 	bl	80001f4 <strlen>
 800825a:	4603      	mov	r3, r0
 800825c:	461a      	mov	r2, r3
 800825e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008262:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=400;
 800826c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008270:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800827a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 800827e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008282:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 800828c:	1c5a      	adds	r2, r3, #1
 800828e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008292:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 800829c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d123      	bne.n	80082f6 <AT_ESP8266_ND+0x1f32>
 80082ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d02b      	beq.n	800830e <AT_ESP8266_ND+0x1f4a>
 80082b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082ba:	2b0b      	cmp	r3, #11
 80082bc:	d027      	beq.n	800830e <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_wifi_gotip)
 80082be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082c2:	2b0c      	cmp	r3, #12
 80082c4:	d023      	beq.n	800830e <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_restart)
 80082c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082ca:	2b04      	cmp	r3, #4
 80082cc:	d01f      	beq.n	800830e <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_error)
 80082ce:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d01b      	beq.n	800830e <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_ok)
 80082d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082da:	2b07      	cmp	r3, #7
 80082dc:	d017      	beq.n	800830e <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_ok)
 80082de:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082e2:	2b08      	cmp	r3, #8
 80082e4:	d013      	beq.n	800830e <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_multiple_conn_err)
 80082e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082ea:	2b1e      	cmp	r3, #30
 80082ec:	d00f      	beq.n	800830e <AT_ESP8266_ND+0x1f4a>
															||(AT_decode==at_no_multiple_conn_err)))
 80082ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80082f2:	2b1f      	cmp	r3, #31
 80082f4:	d00b      	beq.n	800830e <AT_ESP8266_ND+0x1f4a>
															||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80082f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80082fa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008304:	f241 3288 	movw	r2, #5000	; 0x1388
 8008308:	4293      	cmp	r3, r2
 800830a:	f341 8134 	ble.w	8009576 <AT_ESP8266_ND+0x31b2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 800830e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008312:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 800831c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008320:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008324:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2200      	movs	r2, #0
 800832c:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008330:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008334:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2200      	movs	r2, #0
 800833c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008340:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008344:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2200      	movs	r2, #0
 800834c:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008350:	f001 b911 	b.w	8009576 <AT_ESP8266_ND+0x31b2>
 8008354:	08010334 	.word	0x08010334
 8008358:	08010344 	.word	0x08010344
			//--------------------------------------------------------//
			//					Especificar IP           			  //
		    //--------------------------------------------------------//
			case 5:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 800835c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008360:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_restart)
 800836c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008370:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800837a:	2b01      	cmp	r3, #1
 800837c:	f040 80f3 	bne.w	8008566 <AT_ESP8266_ND+0x21a2>
 8008380:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008384:	2b04      	cmp	r3, #4
 8008386:	f000 80ee 	beq.w	8008566 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_ok)
 800838a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800838e:	2b01      	cmp	r3, #1
 8008390:	f000 80e9 	beq.w	8008566 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_error)
 8008394:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008398:	2b02      	cmp	r3, #2
 800839a:	f000 80e4 	beq.w	8008566 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_err)
 800839e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083a2:	2b21      	cmp	r3, #33	; 0x21
 80083a4:	f000 80df 	beq.w	8008566 <AT_ESP8266_ND+0x21a2>
									   &&(AT_decode!=at_def_ip_ok))
 80083a8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80083ac:	2b1b      	cmp	r3, #27
 80083ae:	f000 80da 	beq.w	8008566 <AT_ESP8266_ND+0x21a2>
						{
						a->_pasos=0;
 80083b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083b6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2200      	movs	r2, #0
 80083be:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80083c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando para desconectar---------//
						strncat(a->_uart2snd,"AT+CIPSTA=",strlen("AT+CIPSTA="));
 80083d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80083d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80083e0:	4620      	mov	r0, r4
 80083e2:	f7f7 ff07 	bl	80001f4 <strlen>
 80083e6:	4603      	mov	r3, r0
 80083e8:	4423      	add	r3, r4
 80083ea:	4990      	ldr	r1, [pc, #576]	; (800862c <AT_ESP8266_ND+0x2268>)
 80083ec:	461a      	mov	r2, r3
 80083ee:	460b      	mov	r3, r1
 80083f0:	cb03      	ldmia	r3!, {r0, r1}
 80083f2:	6010      	str	r0, [r2, #0]
 80083f4:	6051      	str	r1, [r2, #4]
 80083f6:	8819      	ldrh	r1, [r3, #0]
 80083f8:	789b      	ldrb	r3, [r3, #2]
 80083fa:	8111      	strh	r1, [r2, #8]
 80083fc:	7293      	strb	r3, [r2, #10]
						strncat(a->_uart2snd,&comillas,1);
 80083fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008402:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800840c:	f207 212f 	addw	r1, r7, #559	; 0x22f
 8008410:	2201      	movs	r2, #1
 8008412:	4618      	mov	r0, r3
 8008414:	f006 fc7f 	bl	800ed16 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_IP,strlen(a->_TCP_Local_Server_IP));
 8008418:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800841c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008426:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800842a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f103 054c 	add.w	r5, r3, #76	; 0x4c
 8008434:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008438:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	334c      	adds	r3, #76	; 0x4c
 8008440:	4618      	mov	r0, r3
 8008442:	f7f7 fed7 	bl	80001f4 <strlen>
 8008446:	4603      	mov	r3, r0
 8008448:	461a      	mov	r2, r3
 800844a:	4629      	mov	r1, r5
 800844c:	4620      	mov	r0, r4
 800844e:	f006 fc62 	bl	800ed16 <strncat>
						strncat(a->_uart2snd,separador,3);
 8008452:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008456:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008460:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008464:	2203      	movs	r2, #3
 8008466:	4618      	mov	r0, r3
 8008468:	f006 fc55 	bl	800ed16 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_GWY,strlen(a->_TCP_Local_Server_GWY));
 800846c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008470:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800847a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800847e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f103 0562 	add.w	r5, r3, #98	; 0x62
 8008488:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800848c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3362      	adds	r3, #98	; 0x62
 8008494:	4618      	mov	r0, r3
 8008496:	f7f7 fead 	bl	80001f4 <strlen>
 800849a:	4603      	mov	r3, r0
 800849c:	461a      	mov	r2, r3
 800849e:	4629      	mov	r1, r5
 80084a0:	4620      	mov	r0, r4
 80084a2:	f006 fc38 	bl	800ed16 <strncat>
						strncat(a->_uart2snd,separador,3);
 80084a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084aa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80084b4:	f507 710a 	add.w	r1, r7, #552	; 0x228
 80084b8:	2203      	movs	r2, #3
 80084ba:	4618      	mov	r0, r3
 80084bc:	f006 fc2b 	bl	800ed16 <strncat>
						strncat(a->_uart2snd,a->_TCP_Local_Server_MSK,strlen(a->_TCP_Local_Server_MSK));
 80084c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80084ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f103 0572 	add.w	r5, r3, #114	; 0x72
 80084dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3372      	adds	r3, #114	; 0x72
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7f7 fe83 	bl	80001f4 <strlen>
 80084ee:	4603      	mov	r3, r0
 80084f0:	461a      	mov	r2, r3
 80084f2:	4629      	mov	r1, r5
 80084f4:	4620      	mov	r0, r4
 80084f6:	f006 fc0e 	bl	800ed16 <strncat>
						strncat(a->_uart2snd,&comillas,1);
 80084fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80084fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008508:	f207 212f 	addw	r1, r7, #559	; 0x22f
 800850c:	2201      	movs	r2, #1
 800850e:	4618      	mov	r0, r3
 8008510:	f006 fc01 	bl	800ed16 <strncat>
						strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008514:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008518:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008522:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008526:	2202      	movs	r2, #2
 8008528:	4618      	mov	r0, r3
 800852a:	f006 fbf4 	bl	800ed16 <strncat>

						a->_n_uart2SND=strlen(a->_uart2snd);
 800852e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008532:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f203 4394 	addw	r3, r3, #1172	; 0x494
 800853c:	4618      	mov	r0, r3
 800853e:	f7f7 fe59 	bl	80001f4 <strlen>
 8008542:	4603      	mov	r3, r0
 8008544:	461a      	mov	r2, r3
 8008546:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800854a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						//------Generacion del comando para desconectar---------//
						a->_estado=500;
 8008554:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008558:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						}

				a->_pasos++;
 8008566:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800856a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008574:	1c5a      	adds	r2, r3, #1
 8008576:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800857a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_ok)||(AT_decode==at_wifi_connected)
 8008584:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008588:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008592:	2b00      	cmp	r3, #0
 8008594:	d11b      	bne.n	80085ce <AT_ESP8266_ND+0x220a>
 8008596:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800859a:	2b01      	cmp	r3, #1
 800859c:	d023      	beq.n	80085e6 <AT_ESP8266_ND+0x2222>
 800859e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085a2:	2b0b      	cmp	r3, #11
 80085a4:	d01f      	beq.n	80085e6 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_wifi_gotip)
 80085a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085aa:	2b0c      	cmp	r3, #12
 80085ac:	d01b      	beq.n	80085e6 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_restart)
 80085ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085b2:	2b04      	cmp	r3, #4
 80085b4:	d017      	beq.n	80085e6 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_error)
 80085b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d013      	beq.n	80085e6 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_err)
 80085be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085c2:	2b21      	cmp	r3, #33	; 0x21
 80085c4:	d00f      	beq.n	80085e6 <AT_ESP8266_ND+0x2222>
															 ||(AT_decode==at_def_ip_ok)))
 80085c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80085ca:	2b1b      	cmp	r3, #27
 80085cc:	d00b      	beq.n	80085e6 <AT_ESP8266_ND+0x2222>
															 ||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 80085ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80085dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80085e0:	4293      	cmp	r3, r2
 80085e2:	f340 87ca 	ble.w	800957a <AT_ESP8266_ND+0x31b6>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80085e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80085f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80085f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80085fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2200      	movs	r2, #0
 8008604:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008608:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800860c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2200      	movs	r2, #0
 8008614:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008618:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800861c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2200      	movs	r2, #0
 8008624:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
  		}
			break;
 8008628:	f000 bfa7 	b.w	800957a <AT_ESP8266_ND+0x31b6>
 800862c:	08010234 	.word	0x08010234
			//--------------------------------------------------------//
			//					Conectar a TCP Server    			  //
		    //--------------------------------------------------------//
			case 6:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008630:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008634:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if(( a->_enviaruart==1)&&(AT_decode!=at_wifi_connected)
 8008640:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008644:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800864e:	2b01      	cmp	r3, #1
 8008650:	f040 80e2 	bne.w	8008818 <AT_ESP8266_ND+0x2454>
 8008654:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008658:	2b0b      	cmp	r3, #11
 800865a:	f000 80dd 	beq.w	8008818 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_wifi_gotip)
 800865e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008662:	2b0c      	cmp	r3, #12
 8008664:	f000 80d8 	beq.w	8008818 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_alrdy_cnntd_err)
 8008668:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800866c:	2b0e      	cmp	r3, #14
 800866e:	f000 80d3 	beq.w	8008818 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_conectado)
 8008672:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008676:	2b0f      	cmp	r3, #15
 8008678:	f000 80ce 	beq.w	8008818 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_tcp_desconectado)
 800867c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008680:	2b10      	cmp	r3, #16
 8008682:	f000 80c9 	beq.w	8008818 <AT_ESP8266_ND+0x2454>
									   &&(AT_decode!=at_error))
 8008686:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800868a:	2b02      	cmp	r3, #2
 800868c:	f000 80c4 	beq.w	8008818 <AT_ESP8266_ND+0x2454>
						{
						a->_pasos=0;
 8008690:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008694:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2200      	movs	r2, #0
 800869c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 80086a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSTART=",strlen("AT+CIPSTART="));
 80086b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80086be:	4620      	mov	r0, r4
 80086c0:	f7f7 fd98 	bl	80001f4 <strlen>
 80086c4:	4603      	mov	r3, r0
 80086c6:	4423      	add	r3, r4
 80086c8:	4aa1      	ldr	r2, [pc, #644]	; (8008950 <AT_ESP8266_ND+0x258c>)
 80086ca:	461c      	mov	r4, r3
 80086cc:	4613      	mov	r3, r2
 80086ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80086d0:	6020      	str	r0, [r4, #0]
 80086d2:	6061      	str	r1, [r4, #4]
 80086d4:	60a2      	str	r2, [r4, #8]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	7323      	strb	r3, [r4, #12]
						strncat(a->_uart2snd,&comillas,1);
 80086da:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086de:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80086e8:	f207 212f 	addw	r1, r7, #559	; 0x22f
 80086ec:	2201      	movs	r2, #1
 80086ee:	4618      	mov	r0, r3
 80086f0:	f006 fb11 	bl	800ed16 <strncat>
						strncat(a->_uart2snd,"TCP",strlen("TCP"));
 80086f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80086f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008702:	4620      	mov	r0, r4
 8008704:	f7f7 fd76 	bl	80001f4 <strlen>
 8008708:	4603      	mov	r3, r0
 800870a:	4423      	add	r3, r4
 800870c:	4a91      	ldr	r2, [pc, #580]	; (8008954 <AT_ESP8266_ND+0x2590>)
 800870e:	6810      	ldr	r0, [r2, #0]
 8008710:	6018      	str	r0, [r3, #0]
						strncat(a->_uart2snd,separador,3);
 8008712:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008716:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008720:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8008724:	2203      	movs	r2, #3
 8008726:	4618      	mov	r0, r3
 8008728:	f006 faf5 	bl	800ed16 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_IP,strlen(a->_TCP_Remote_Server_IP));
 800872c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008730:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800873a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800873e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f103 0536 	add.w	r5, r3, #54	; 0x36
 8008748:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800874c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3336      	adds	r3, #54	; 0x36
 8008754:	4618      	mov	r0, r3
 8008756:	f7f7 fd4d 	bl	80001f4 <strlen>
 800875a:	4603      	mov	r3, r0
 800875c:	461a      	mov	r2, r3
 800875e:	4629      	mov	r1, r5
 8008760:	4620      	mov	r0, r4
 8008762:	f006 fad8 	bl	800ed16 <strncat>
						strncat(a->_uart2snd,separador2,2);
 8008766:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800876a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008774:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8008778:	2202      	movs	r2, #2
 800877a:	4618      	mov	r0, r3
 800877c:	f006 facb 	bl	800ed16 <strncat>
						strncat(a->_uart2snd,a->_TCP_Remote_Server_Port,strlen(a->_TCP_Remote_Server_Port));
 8008780:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008784:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800878e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008792:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f103 0546 	add.w	r5, r3, #70	; 0x46
 800879c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	3346      	adds	r3, #70	; 0x46
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7f7 fd23 	bl	80001f4 <strlen>
 80087ae:	4603      	mov	r3, r0
 80087b0:	461a      	mov	r2, r3
 80087b2:	4629      	mov	r1, r5
 80087b4:	4620      	mov	r0, r4
 80087b6:	f006 faae 	bl	800ed16 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80087ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087be:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80087c8:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7f7 fd11 	bl	80001f4 <strlen>
 80087d2:	4602      	mov	r2, r0
 80087d4:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80087d8:	4619      	mov	r1, r3
 80087da:	4620      	mov	r0, r4
 80087dc:	f006 fa9b 	bl	800ed16 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 80087e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7f7 fd00 	bl	80001f4 <strlen>
 80087f4:	4603      	mov	r3, r0
 80087f6:	461a      	mov	r2, r3
 80087f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80087fc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=600;
 8008806:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800880a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}

				a->_pasos++;
 8008818:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800881c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008826:	1c5a      	adds	r2, r3, #1
 8008828:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800882c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)
 8008836:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800883a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008844:	2b00      	cmp	r3, #0
 8008846:	d120      	bne.n	800888a <AT_ESP8266_ND+0x24c6>
 8008848:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800884c:	2b0a      	cmp	r3, #10
 800884e:	d028      	beq.n	80088a2 <AT_ESP8266_ND+0x24de>
 8008850:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008854:	2b0b      	cmp	r3, #11
 8008856:	d024      	beq.n	80088a2 <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_wifi_gotip)
 8008858:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800885c:	2b0c      	cmp	r3, #12
 800885e:	d020      	beq.n	80088a2 <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_alrdy_cnntd_err)
 8008860:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008864:	2b0e      	cmp	r3, #14
 8008866:	d01c      	beq.n	80088a2 <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_conectado)
 8008868:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800886c:	2b0f      	cmp	r3, #15
 800886e:	d018      	beq.n	80088a2 <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_tcp_desconectado)
 8008870:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008874:	2b10      	cmp	r3, #16
 8008876:	d014      	beq.n	80088a2 <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_error)
 8008878:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800887c:	2b02      	cmp	r3, #2
 800887e:	d010      	beq.n	80088a2 <AT_ESP8266_ND+0x24de>
																		  ||(AT_decode==at_busy_p)))
 8008880:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008884:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008888:	d00b      	beq.n	80088a2 <AT_ESP8266_ND+0x24de>
																		  ||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 800888a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800888e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008898:	f241 3288 	movw	r2, #5000	; 0x1388
 800889c:	4293      	cmp	r3, r2
 800889e:	f340 866e 	ble.w	800957e <AT_ESP8266_ND+0x31ba>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 80088a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80088b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 80088b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	2200      	movs	r2, #0
 80088c0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 80088c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088c8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 80088d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088d8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2200      	movs	r2, #0
 80088e0:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 80088e4:	f000 be4b 	b.w	800957e <AT_ESP8266_ND+0x31ba>
			//--------------------------------------------------------//
			//			   Enviar datos a TCP Server    			  //
		    //--------------------------------------------------------//
			case 7:
			{
					unsigned char caracteres[8]="";
 80088e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80088ec:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80088f0:	2200      	movs	r2, #0
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	2200      	movs	r2, #0
 80088f6:	605a      	str	r2, [r3, #4]



				if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 80088f8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80088fc:	2b10      	cmp	r3, #16
 80088fe:	d003      	beq.n	8008908 <AT_ESP8266_ND+0x2544>
 8008900:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008904:	2b0a      	cmp	r3, #10
 8008906:	d127      	bne.n	8008958 <AT_ESP8266_ND+0x2594>
				{
					a->_estado=AT_decode;
 8008908:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800890c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 800891a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800891e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2200      	movs	r2, #0
 8008926:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 800892a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800892e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2200      	movs	r2, #0
 8008936:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 800893a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800893e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2200      	movs	r2, #0
 8008946:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 800894a:	f000 be1a 	b.w	8009582 <AT_ESP8266_ND+0x31be>
 800894e:	bf00      	nop
 8008950:	08010354 	.word	0x08010354
 8008954:	08010364 	.word	0x08010364
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8008958:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800895c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008966:	2b01      	cmp	r3, #1
 8008968:	f040 80d1 	bne.w	8008b0e <AT_ESP8266_ND+0x274a>
 800896c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008970:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800897a:	2b00      	cmp	r3, #0
 800897c:	f040 80c7 	bne.w	8008b0e <AT_ESP8266_ND+0x274a>
										a->_ejecucion=1;
 8008980:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008984:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2201      	movs	r2, #1
 800898c:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8008990:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008994:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2218      	movs	r2, #24
 800899c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 80089a0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089a4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 80089b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089b4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80089be:	1c5a      	adds	r2, r3, #1
 80089c0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089c4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 80089ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2200      	movs	r2, #0
 80089da:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80089de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089e2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));
 80089ee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80089f2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80089fc:	4620      	mov	r0, r4
 80089fe:	f7f7 fbf9 	bl	80001f4 <strlen>
 8008a02:	4603      	mov	r3, r0
 8008a04:	4423      	add	r3, r4
 8008a06:	4abe      	ldr	r2, [pc, #760]	; (8008d00 <AT_ESP8266_ND+0x293c>)
 8008a08:	461c      	mov	r4, r3
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a0e:	6020      	str	r0, [r4, #0]
 8008a10:	6061      	str	r1, [r4, #4]
 8008a12:	60a2      	str	r2, [r4, #8]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 8008a14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a18:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 8008a22:	f107 0214 	add.w	r2, r7, #20
 8008a26:	4611      	mov	r1, r2
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f005 ff01 	bl	800e830 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8008a2e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a32:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008a3c:	f107 0314 	add.w	r3, r7, #20
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7f7 fbd7 	bl	80001f4 <strlen>
 8008a46:	4602      	mov	r2, r0
 8008a48:	f107 0314 	add.w	r3, r7, #20
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f006 f961 	bl	800ed16 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 8008a54:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a58:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 8008a62:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a66:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008a70:	4619      	mov	r1, r3
 8008a72:	4610      	mov	r0, r2
 8008a74:	f006 fa30 	bl	800eed8 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008a78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008a86:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f006 f942 	bl	800ed16 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 8008a92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008a96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7f7 fba7 	bl	80001f4 <strlen>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008aae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8008ab8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008abc:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f7f7 fb94 	bl	80001f4 <strlen>
 8008acc:	4603      	mov	r3, r0
 8008ace:	4423      	add	r3, r4
 8008ad0:	4a8c      	ldr	r2, [pc, #560]	; (8008d04 <AT_ESP8266_ND+0x2940>)
 8008ad2:	461c      	mov	r4, r3
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ad8:	6020      	str	r0, [r4, #0]
 8008ada:	6061      	str	r1, [r4, #4]
 8008adc:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8008ade:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ae2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008af2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=700;
 8008afc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b00:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8008b0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8008b0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008b1c:	1c5a      	adds	r2, r3, #1
 8008b1e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b22:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)
 8008b2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f040 80a6 	bne.w	8008c8c <AT_ESP8266_ND+0x28c8>
 8008b40:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b44:	2b13      	cmp	r3, #19
 8008b46:	f000 80a1 	beq.w	8008c8c <AT_ESP8266_ND+0x28c8>
												   &&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)
 8008b4a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b4e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f203 6294 	addw	r2, r3, #1684	; 0x694
 8008b58:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b5c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 8008b66:	4619      	mov	r1, r3
 8008b68:	4610      	mov	r0, r2
 8008b6a:	f7f7 fb39 	bl	80001e0 <strcmp>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d01b      	beq.n	8008bac <AT_ESP8266_ND+0x27e8>
 8008b74:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d017      	beq.n	8008bac <AT_ESP8266_ND+0x27e8>
														   	   	   	   	   	   	   	   	   ||(AT_decode==at_tcp_ok_to_send)
 8008b7c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008b80:	2b14      	cmp	r3, #20
 8008b82:	d013      	beq.n	8008bac <AT_ESP8266_ND+0x27e8>
																						   ||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8008b84:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b88:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b96:	4293      	cmp	r3, r2
 8008b98:	dd78      	ble.n	8008c8c <AT_ESP8266_ND+0x28c8>
 8008b9a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008b9e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d16f      	bne.n	8008c8c <AT_ESP8266_ND+0x28c8>
								if(a->_ticks > 5000)//if((a->_ticks > 5000)||(a->_subpaso==1))//((a->_ticks > 5000)&&(a->_subpaso==1))
 8008bac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bb0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	dd0e      	ble.n	8008be0 <AT_ESP8266_ND+0x281c>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8008bc2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bc6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 8008bd0:	1c5a      	adds	r2, r3, #1
 8008bd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bd6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 8008be0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008be4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 8008bee:	1c5a      	adds	r2, r3, #1
 8008bf0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008bf4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 8008bfe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c02:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008c0c:	1c5a      	adds	r2, r3, #1
 8008c0e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c12:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 8008c1c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c20:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 8008c2c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c30:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8008c3a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c3e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f503 7125 	add.w	r1, r3, #660	; 0x294
 8008c48:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c4c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8008c56:	2361      	movs	r3, #97	; 0x61
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	f005 fe64 	bl	800e928 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 8008c60:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c64:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 8008c6e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c72:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 8008c7c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c80:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==700)&&((AT_decode==at_tcp_enviado_ok)||(a->_ticks > 5000)
 8008c8c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008c90:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c9a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8008c9e:	f040 8470 	bne.w	8009582 <AT_ESP8266_ND+0x31be>
 8008ca2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ca6:	2b13      	cmp	r3, #19
 8008ca8:	d02e      	beq.n	8008d08 <AT_ESP8266_ND+0x2944>
 8008caa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008cae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	dc23      	bgt.n	8008d08 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_disconnect)
 8008cc0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cc4:	2b0a      	cmp	r3, #10
 8008cc6:	d01f      	beq.n	8008d08 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_connected)
 8008cc8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ccc:	2b0b      	cmp	r3, #11
 8008cce:	d01b      	beq.n	8008d08 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_wifi_gotip)
 8008cd0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cd4:	2b0c      	cmp	r3, #12
 8008cd6:	d017      	beq.n	8008d08 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_desconectado)
 8008cd8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cdc:	2b10      	cmp	r3, #16
 8008cde:	d013      	beq.n	8008d08 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_snd_err)
 8008ce0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ce4:	2b11      	cmp	r3, #17
 8008ce6:	d00f      	beq.n	8008d08 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_tcp_enviado_error)
 8008ce8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cec:	2b12      	cmp	r3, #18
 8008cee:	d00b      	beq.n	8008d08 <AT_ESP8266_ND+0x2944>
																				 ||(AT_decode==at_busy_p)))
 8008cf0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008cf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cf8:	f040 8443 	bne.w	8009582 <AT_ESP8266_ND+0x31be>
 8008cfc:	e004      	b.n	8008d08 <AT_ESP8266_ND+0x2944>
 8008cfe:	bf00      	nop
 8008d00:	08010368 	.word	0x08010368
 8008d04:	08010374 	.word	0x08010374
									a->_debug_count5++;
 8008d08:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d0c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8008d16:	1c5a      	adds	r2, r3, #1
 8008d18:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d1c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 8008d26:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d2a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	dd25      	ble.n	8008d88 <AT_ESP8266_ND+0x29c4>
										a->_debug_count8++;
 8008d3c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d40:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 8008d4a:	1c5a      	adds	r2, r3, #1
 8008d4c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d50:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 8008d5a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d5e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008d68:	1c5a      	adds	r2, r3, #1
 8008d6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 8008d78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 8008d88:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008d8c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	dd10      	ble.n	8008dbc <AT_ESP8266_ND+0x29f8>
 8008d9a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008d9e:	2b10      	cmp	r3, #16
 8008da0:	d00c      	beq.n	8008dbc <AT_ESP8266_ND+0x29f8>
 8008da2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008da6:	2b0a      	cmp	r3, #10
 8008da8:	d008      	beq.n	8008dbc <AT_ESP8266_ND+0x29f8>
										a->_estado=15;//-----------------------------Error de Env�o TCP
 8008daa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dae:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	220f      	movs	r2, #15
 8008db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8008dba:	e008      	b.n	8008dce <AT_ESP8266_ND+0x2a0a>
										a->_estado=AT_decode;	//Devuelvo el estado
 8008dbc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dc0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8008dce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008dd2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8008dde:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008de2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8008dee:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008df2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8008dfe:	e3c0      	b.n	8009582 <AT_ESP8266_ND+0x31be>
			//--------------------------------------------------------//
			//					Crear Local TCP Server    			  //
		    //--------------------------------------------------------//
			case 8:
			{
				a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8008e00:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e04:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

				if( a->_enviaruart==1)
 8008e10:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e14:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d16f      	bne.n	8008f02 <AT_ESP8266_ND+0x2b3e>
						{
						a->_pasos=0;
 8008e22:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e26:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
						a->_ejecucion=1;
 8008e32:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e36:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						//------Generacion del comando ---------//
						strncat(a->_uart2snd,"AT+CIPSERVER=1,",strlen("AT+CIPSERVER=1,"));
 8008e42:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e46:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e50:	4620      	mov	r0, r4
 8008e52:	f7f7 f9cf 	bl	80001f4 <strlen>
 8008e56:	4603      	mov	r3, r0
 8008e58:	4423      	add	r3, r4
 8008e5a:	4a78      	ldr	r2, [pc, #480]	; (800903c <AT_ESP8266_ND+0x2c78>)
 8008e5c:	461c      	mov	r4, r3
 8008e5e:	4615      	mov	r5, r2
 8008e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e62:	6020      	str	r0, [r4, #0]
 8008e64:	6061      	str	r1, [r4, #4]
 8008e66:	60a2      	str	r2, [r4, #8]
 8008e68:	60e3      	str	r3, [r4, #12]
						strncat(a->_uart2snd,a->_TCP_Local_Server_Port,strlen(a->_TCP_Local_Server_Port));
 8008e6a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e6e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008e78:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e7c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f103 055c 	add.w	r5, r3, #92	; 0x5c
 8008e86:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008e8a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	335c      	adds	r3, #92	; 0x5c
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7f7 f9ae 	bl	80001f4 <strlen>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f005 ff39 	bl	800ed16 <strncat>
						strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 8008ea4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ea8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8008eb2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7f7 f99c 	bl	80001f4 <strlen>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f005 ff26 	bl	800ed16 <strncat>
						a->_n_uart2SND=strlen(a->_uart2snd);
 8008eca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ece:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7f7 f98b 	bl	80001f4 <strlen>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ee6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
						a->_estado=800;
 8008ef0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ef4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008efe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						//------Generacion del comando ---------//
						}
				a->_pasos++;
 8008f02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f06:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8008f10:	1c5a      	adds	r2, r3, #1
 8008f12:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f16:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
				if (((a->_enviaruart==0)&&((AT_decode==at_wifi_disconnect)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(AT_decode==at_tcp_alrdy_cnntd_err)||(AT_decode==at_tcp_conectado)||(AT_decode==at_tcp_desconectado)||(AT_decode==21)||(AT_decode==22)||(AT_decode==23)))||(a->_ticks > 5000))//210419 if (((a->_enviaruart==0)&&((estado==5)||(estado==6)||(estado==7)||(estado==13)||(estado==14)))||(a->_ticks > 5000))  //Que analice luego de enviar por uart
 8008f20:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f24:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d123      	bne.n	8008f7a <AT_ESP8266_ND+0x2bb6>
 8008f32:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f36:	2b0a      	cmp	r3, #10
 8008f38:	d02b      	beq.n	8008f92 <AT_ESP8266_ND+0x2bce>
 8008f3a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f3e:	2b0b      	cmp	r3, #11
 8008f40:	d027      	beq.n	8008f92 <AT_ESP8266_ND+0x2bce>
 8008f42:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f46:	2b0c      	cmp	r3, #12
 8008f48:	d023      	beq.n	8008f92 <AT_ESP8266_ND+0x2bce>
 8008f4a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f4e:	2b0e      	cmp	r3, #14
 8008f50:	d01f      	beq.n	8008f92 <AT_ESP8266_ND+0x2bce>
 8008f52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f56:	2b0f      	cmp	r3, #15
 8008f58:	d01b      	beq.n	8008f92 <AT_ESP8266_ND+0x2bce>
 8008f5a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f5e:	2b10      	cmp	r3, #16
 8008f60:	d017      	beq.n	8008f92 <AT_ESP8266_ND+0x2bce>
 8008f62:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f66:	2b15      	cmp	r3, #21
 8008f68:	d013      	beq.n	8008f92 <AT_ESP8266_ND+0x2bce>
 8008f6a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f6e:	2b16      	cmp	r3, #22
 8008f70:	d00f      	beq.n	8008f92 <AT_ESP8266_ND+0x2bce>
 8008f72:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008f76:	2b17      	cmp	r3, #23
 8008f78:	d00b      	beq.n	8008f92 <AT_ESP8266_ND+0x2bce>
 8008f7a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f7e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8008f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	f340 82fa 	ble.w	8009586 <AT_ESP8266_ND+0x31c2>
					{
						a->_estado=AT_decode;	//Devuelvo el estado WIFI Conectada
 8008f92:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008f96:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8008fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						a->_instruccion=0;	//Finalizo la instrucci�n
 8008fa4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fa8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
						a->_ejecucion=0;
 8008fb4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fb8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
						a->_ticks=0;
 8008fc4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fc8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
					}
			}
			break;
 8008fd4:	e2d7      	b.n	8009586 <AT_ESP8266_ND+0x31c2>
			//--------------------------------------------------------//
			//			   Enviar datos desde TCP Server    			  //
		    //--------------------------------------------------------//
			case 9:
			{
					unsigned char caracteres[8]="";
 8008fd6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008fda:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8008fde:	2200      	movs	r2, #0
 8008fe0:	601a      	str	r2, [r3, #0]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	605a      	str	r2, [r3, #4]

					if((AT_decode==at_tcp_desconectado)||(AT_decode==at_wifi_disconnect))
 8008fe6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008fea:	2b10      	cmp	r3, #16
 8008fec:	d003      	beq.n	8008ff6 <AT_ESP8266_ND+0x2c32>
 8008fee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008ff2:	2b0a      	cmp	r3, #10
 8008ff4:	d124      	bne.n	8009040 <AT_ESP8266_ND+0x2c7c>
				{
					a->_estado=AT_decode;
 8008ff6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8008ffa:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					a->_instruccion=0;		//Finalizo la instrucci�n
 8009008:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800900c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2200      	movs	r2, #0
 8009014:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
					a->_ejecucion=0;
 8009018:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800901c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2200      	movs	r2, #0
 8009024:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
					a->_subpaso=0;
 8009028:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800902c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2200      	movs	r2, #0
 8009034:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
									a->_subpaso=0;
								}
				}
					//a->_ticks=0;						//Reseteo cada vez que entro
			}
			break;
 8009038:	e2a7      	b.n	800958a <AT_ESP8266_ND+0x31c6>
 800903a:	bf00      	nop
 800903c:	08010380 	.word	0x08010380
							if( (a->_enviaruart==1)&&(a->_subpaso==0))
 8009040:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009044:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800904e:	2b01      	cmp	r3, #1
 8009050:	f040 8102 	bne.w	8009258 <AT_ESP8266_ND+0x2e94>
 8009054:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009058:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 8009062:	2b00      	cmp	r3, #0
 8009064:	f040 80f8 	bne.w	8009258 <AT_ESP8266_ND+0x2e94>
										a->_ejecucion=1;
 8009068:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800906c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2201      	movs	r2, #1
 8009074:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
										a->_estado=24;
 8009078:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800907c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2218      	movs	r2, #24
 8009084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
										a->_uart2snd[0]='\0';		//En teor�a borro lo que tenga el vector
 8009088:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800908c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
										a->_subpaso++;					//Asigno para que no vuelva a entrar
 8009098:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800909c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80090a6:	1c5a      	adds	r2, r3, #1
 80090a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_pasos=0;
 80090b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2200      	movs	r2, #0
 80090c2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
										a->_okenvio[0]='\0';	  //Borro el vector a->_okenvio
 80090c6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090ca:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f883 2ab4 	strb.w	r2, [r3, #2740]	; 0xab4
										strncat(a->_uart2snd,"AT+CIPSEND=",strlen("AT+CIPSEND="));//strncat(a->_uart2snd,"AT+CIPSEND=0,",strlen("AT+CIPSEND=0,"));
 80090d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80090da:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f203 4494 	addw	r4, r3, #1172	; 0x494
 80090e4:	4620      	mov	r0, r4
 80090e6:	f7f7 f885 	bl	80001f4 <strlen>
 80090ea:	4603      	mov	r3, r0
 80090ec:	4423      	add	r3, r4
 80090ee:	4a83      	ldr	r2, [pc, #524]	; (80092fc <AT_ESP8266_ND+0x2f38>)
 80090f0:	461c      	mov	r4, r3
 80090f2:	4613      	mov	r3, r2
 80090f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80090f6:	6020      	str	r0, [r4, #0]
 80090f8:	6061      	str	r1, [r4, #4]
 80090fa:	60a2      	str	r2, [r4, #8]
										INTOA(a->_id_conn, caracteres);
 80090fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009100:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f8d3 3a94 	ldr.w	r3, [r3, #2708]	; 0xa94
 800910a:	f107 020c 	add.w	r2, r7, #12
 800910e:	4611      	mov	r1, r2
 8009110:	4618      	mov	r0, r3
 8009112:	f005 fb8d 	bl	800e830 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));
 8009116:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800911a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009124:	f107 030c 	add.w	r3, r7, #12
 8009128:	4618      	mov	r0, r3
 800912a:	f7f7 f863 	bl	80001f4 <strlen>
 800912e:	4602      	mov	r2, r0
 8009130:	f107 030c 	add.w	r3, r7, #12
 8009134:	4619      	mov	r1, r3
 8009136:	4620      	mov	r0, r4
 8009138:	f005 fded 	bl	800ed16 <strncat>
										strncat(a->_uart2snd,",",1);
 800913c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009140:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f203 4494 	addw	r4, r3, #1172	; 0x494
 800914a:	4620      	mov	r0, r4
 800914c:	f7f7 f852 	bl	80001f4 <strlen>
 8009150:	4603      	mov	r3, r0
 8009152:	4423      	add	r3, r4
 8009154:	496a      	ldr	r1, [pc, #424]	; (8009300 <AT_ESP8266_ND+0x2f3c>)
 8009156:	461a      	mov	r2, r3
 8009158:	460b      	mov	r3, r1
 800915a:	881b      	ldrh	r3, [r3, #0]
 800915c:	8013      	strh	r3, [r2, #0]
										INTOA(a->_n_D2SND, caracteres);	//INTOA(strlen(a->_data2SND), caracteres);		        //Longitud  de datos a enviar
 800915e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009162:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800916c:	f107 020c 	add.w	r2, r7, #12
 8009170:	4611      	mov	r1, r2
 8009172:	4618      	mov	r0, r3
 8009174:	f005 fb5c 	bl	800e830 <INTOA>
										strncat(a->_uart2snd,caracteres,strlen(caracteres));//strncat(a->_uart2snd,caracteres,strlen(caracteres));//AT+CIPSEND="cdad caracteres"
 8009178:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800917c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8009186:	f107 030c 	add.w	r3, r7, #12
 800918a:	4618      	mov	r0, r3
 800918c:	f7f7 f832 	bl	80001f4 <strlen>
 8009190:	4602      	mov	r2, r0
 8009192:	f107 030c 	add.w	r3, r7, #12
 8009196:	4619      	mov	r1, r3
 8009198:	4620      	mov	r0, r4
 800919a:	f005 fdbc 	bl	800ed16 <strncat>
										strcpy(a->_okenvio,a->_uart2snd);
 800919e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091a2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f603 22b4 	addw	r2, r3, #2740	; 0xab4
 80091ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80091ba:	4619      	mov	r1, r3
 80091bc:	4610      	mov	r0, r2
 80091be:	f005 fe8b 	bl	800eed8 <strcpy>
										strncat(a->_uart2snd,finalizar2,2);//strncat(a->_uart2snd,finalizar2,strlen(finalizar2));
 80091c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80091d0:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 80091d4:	2202      	movs	r2, #2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f005 fd9d 	bl	800ed16 <strncat>
										a->_n_uart2SND=strlen(a->_uart2snd);
 80091dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7f7 f802 	bl	80001f4 <strlen>
 80091f0:	4603      	mov	r3, r0
 80091f2:	461a      	mov	r2, r3
 80091f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80091f8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
										strncat(a->_okenvio,"\r\r\n\r\nOK\r\n> ",strlen("\r\r\n\r\nOK\r\n> "));
 8009202:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009206:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f603 24b4 	addw	r4, r3, #2740	; 0xab4
 8009210:	4620      	mov	r0, r4
 8009212:	f7f6 ffef 	bl	80001f4 <strlen>
 8009216:	4603      	mov	r3, r0
 8009218:	4423      	add	r3, r4
 800921a:	4a3a      	ldr	r2, [pc, #232]	; (8009304 <AT_ESP8266_ND+0x2f40>)
 800921c:	461c      	mov	r4, r3
 800921e:	4613      	mov	r3, r2
 8009220:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009222:	6020      	str	r0, [r4, #0]
 8009224:	6061      	str	r1, [r4, #4]
 8009226:	60a2      	str	r2, [r4, #8]
										a->_debug_count3++;
 8009228:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800922c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800923c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
										a->_estado=900;
 8009246:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800924a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f44f 7261 	mov.w	r2, #900	; 0x384
 8009254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								a->_pasos++;
 8009258:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800925c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f8d3 3aa8 	ldr.w	r3, [r3, #2728]	; 0xaa8
 8009266:	1c5a      	adds	r2, r3, #1
 8009268:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800926c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
							if ((a->_enviaruart==0)&&(AT_decode!=at_tcp_enviado_ok)&&((strcmp(a->_uartRCVD,a->_okenvio)==0)||(AT_decode==at_ok)||(AT_decode==20)||((a->_ticks > 5000)&&(a->_subpaso==1))))
 8009276:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800927a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009284:	2b00      	cmp	r3, #0
 8009286:	f040 80b8 	bne.w	80093fa <AT_ESP8266_ND+0x3036>
 800928a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800928e:	2b13      	cmp	r3, #19
 8009290:	f000 80b3 	beq.w	80093fa <AT_ESP8266_ND+0x3036>
 8009294:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009298:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f203 6294 	addw	r2, r3, #1684	; 0x694
 80092a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092a6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f603 23b4 	addw	r3, r3, #2740	; 0xab4
 80092b0:	4619      	mov	r1, r3
 80092b2:	4610      	mov	r0, r2
 80092b4:	f7f6 ff94 	bl	80001e0 <strcmp>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d024      	beq.n	8009308 <AT_ESP8266_ND+0x2f44>
 80092be:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d020      	beq.n	8009308 <AT_ESP8266_ND+0x2f44>
 80092c6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80092ca:	2b14      	cmp	r3, #20
 80092cc:	d01c      	beq.n	8009308 <AT_ESP8266_ND+0x2f44>
 80092ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 80092dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80092e0:	4293      	cmp	r3, r2
 80092e2:	f340 808a 	ble.w	80093fa <AT_ESP8266_ND+0x3036>
 80092e6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80092ea:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	f040 8080 	bne.w	80093fa <AT_ESP8266_ND+0x3036>
 80092fa:	e005      	b.n	8009308 <AT_ESP8266_ND+0x2f44>
 80092fc:	08010368 	.word	0x08010368
 8009300:	08010390 	.word	0x08010390
 8009304:	08010374 	.word	0x08010374
								if((a->_ticks > 5000)&&(a->_subpaso==1))
 8009308:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800930c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009316:	f241 3288 	movw	r2, #5000	; 0x1388
 800931a:	4293      	cmp	r3, r2
 800931c:	dd17      	ble.n	800934e <AT_ESP8266_ND+0x2f8a>
 800931e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009322:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800932c:	2b01      	cmp	r3, #1
 800932e:	d10e      	bne.n	800934e <AT_ESP8266_ND+0x2f8a>
									a->_debug_count7++;//-----------------------------Cuento los que entran por timeout
 8009330:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009334:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f8d3 3d14 	ldr.w	r3, [r3, #3348]	; 0xd14
 800933e:	1c5a      	adds	r2, r3, #1
 8009340:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009344:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
								a->_debug_count4++;
 800934e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009352:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f8d3 3d08 	ldr.w	r3, [r3, #3336]	; 0xd08
 800935c:	1c5a      	adds	r2, r3, #1
 800935e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009362:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
								a->_subpaso++;
 800936c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009370:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009380:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
								a->_enviaruart=1;
 800938a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800938e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2201      	movs	r2, #1
 8009396:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								CopiaVector(a->_uart2snd,a->_data2SND,a->_n_D2SND,1,'a');//strcpy(a->_uart2snd,a->_data2SND);
 800939a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800939e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f203 4094 	addw	r0, r3, #1172	; 0x494
 80093a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ac:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f503 7125 	add.w	r1, r3, #660	; 0x294
 80093b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ba:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80093c4:	2361      	movs	r3, #97	; 0x61
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	2301      	movs	r3, #1
 80093ca:	f005 faad 	bl	800e928 <CopiaVector>
								a->_n_uart2SND=a->_n_D2SND; //Asigno cantidad de elementos del vector
 80093ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093d2:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f8d3 2ce4 	ldr.w	r2, [r3, #3300]	; 0xce4
 80093dc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093e0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f8c3 2ce8 	str.w	r2, [r3, #3304]	; 0xce8
								a->_ticks=0;//----------------------------------Evito que entre de toque en el siguiente
 80093ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093ee:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
							if((a->_estado==900)&&((AT_decode==at_tcp_enviado_ok)||(AT_decode==at_wifi_connected)||(AT_decode==at_wifi_gotip)||(a->_ticks > 5000)||(AT_decode==at_wifi_disconnect)||(AT_decode==at_tcp_desconectado)||(AT_decode==at_tcp_snd_err)||(AT_decode==at_tcp_enviado_error)||(AT_decode==22)||(AT_decode==25)))
 80093fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80093fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009408:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800940c:	f040 80bd 	bne.w	800958a <AT_ESP8266_ND+0x31c6>
 8009410:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009414:	2b13      	cmp	r3, #19
 8009416:	d02b      	beq.n	8009470 <AT_ESP8266_ND+0x30ac>
 8009418:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800941c:	2b0b      	cmp	r3, #11
 800941e:	d027      	beq.n	8009470 <AT_ESP8266_ND+0x30ac>
 8009420:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009424:	2b0c      	cmp	r3, #12
 8009426:	d023      	beq.n	8009470 <AT_ESP8266_ND+0x30ac>
 8009428:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800942c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 8009436:	f241 3288 	movw	r2, #5000	; 0x1388
 800943a:	4293      	cmp	r3, r2
 800943c:	dc18      	bgt.n	8009470 <AT_ESP8266_ND+0x30ac>
 800943e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009442:	2b0a      	cmp	r3, #10
 8009444:	d014      	beq.n	8009470 <AT_ESP8266_ND+0x30ac>
 8009446:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800944a:	2b10      	cmp	r3, #16
 800944c:	d010      	beq.n	8009470 <AT_ESP8266_ND+0x30ac>
 800944e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009452:	2b11      	cmp	r3, #17
 8009454:	d00c      	beq.n	8009470 <AT_ESP8266_ND+0x30ac>
 8009456:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800945a:	2b12      	cmp	r3, #18
 800945c:	d008      	beq.n	8009470 <AT_ESP8266_ND+0x30ac>
 800945e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009462:	2b16      	cmp	r3, #22
 8009464:	d004      	beq.n	8009470 <AT_ESP8266_ND+0x30ac>
 8009466:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800946a:	2b19      	cmp	r3, #25
 800946c:	f040 808d 	bne.w	800958a <AT_ESP8266_ND+0x31c6>
									a->_debug_count5++;
 8009470:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009474:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800947e:	1c5a      	adds	r2, r3, #1
 8009480:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009484:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
									if(a->_ticks > 5000)
 800948e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009492:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f8d3 3cb4 	ldr.w	r3, [r3, #3252]	; 0xcb4
 800949c:	f241 3288 	movw	r2, #5000	; 0x1388
 80094a0:	4293      	cmp	r3, r2
 80094a2:	dd25      	ble.n	80094f0 <AT_ESP8266_ND+0x312c>
										a->_debug_count8++;
 80094a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f8d3 3d18 	ldr.w	r3, [r3, #3352]	; 0xd18
 80094b2:	1c5a      	adds	r2, r3, #1
 80094b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094b8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f8c3 2d18 	str.w	r2, [r3, #3352]	; 0xd18
										a->_subpaso++;
 80094c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094c6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80094d0:	1c5a      	adds	r2, r3, #1
 80094d2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094d6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
										a->_ticks=0;
 80094e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094e4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f8c3 2cb4 	str.w	r2, [r3, #3252]	; 0xcb4
									if((a->_subpaso > 2)&&(AT_decode!=at_tcp_desconectado)&&(AT_decode!=at_wifi_disconnect))//--------------No considero los etados de fallas por TCP o WIFI caido
 80094f0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80094f4:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f8d3 3d44 	ldr.w	r3, [r3, #3396]	; 0xd44
 80094fe:	2b02      	cmp	r3, #2
 8009500:	dd07      	ble.n	8009512 <AT_ESP8266_ND+0x314e>
 8009502:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009506:	2b10      	cmp	r3, #16
 8009508:	d003      	beq.n	8009512 <AT_ESP8266_ND+0x314e>
 800950a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800950e:	2b0a      	cmp	r3, #10
 8009510:	d108      	bne.n	8009524 <AT_ESP8266_ND+0x3160>
										a->_estado=AT_decode;	//Devuelvo el estado
 8009512:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009516:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									a->_instruccion=0;		//Finalizo la instrucci�n
 8009524:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009528:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2200      	movs	r2, #0
 8009530:	f8c3 2aac 	str.w	r2, [r3, #2732]	; 0xaac
									a->_ejecucion=0;
 8009534:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009538:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2200      	movs	r2, #0
 8009540:	f8c3 2ab0 	str.w	r2, [r3, #2736]	; 0xab0
									a->_subpaso=0;
 8009544:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009548:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2200      	movs	r2, #0
 8009550:	f8c3 2d44 	str.w	r2, [r3, #3396]	; 0xd44
			break;
 8009554:	e019      	b.n	800958a <AT_ESP8266_ND+0x31c6>
			default:		//Si no hay instruccion paso el estado a la estructura
			{
				a->_estado=AT_decode;
 8009556:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800955a:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009568:	e010      	b.n	800958c <AT_ESP8266_ND+0x31c8>
			break;
 800956a:	bf00      	nop
 800956c:	e00e      	b.n	800958c <AT_ESP8266_ND+0x31c8>
			break;
 800956e:	bf00      	nop
 8009570:	e00c      	b.n	800958c <AT_ESP8266_ND+0x31c8>
			break;
 8009572:	bf00      	nop
 8009574:	e00a      	b.n	800958c <AT_ESP8266_ND+0x31c8>
			break;
 8009576:	bf00      	nop
 8009578:	e008      	b.n	800958c <AT_ESP8266_ND+0x31c8>
			break;
 800957a:	bf00      	nop
 800957c:	e006      	b.n	800958c <AT_ESP8266_ND+0x31c8>
			break;
 800957e:	bf00      	nop
 8009580:	e004      	b.n	800958c <AT_ESP8266_ND+0x31c8>
			break;
 8009582:	bf00      	nop
 8009584:	e002      	b.n	800958c <AT_ESP8266_ND+0x31c8>
			break;
 8009586:	bf00      	nop
 8009588:	e000      	b.n	800958c <AT_ESP8266_ND+0x31c8>
			break;
 800958a:	bf00      	nop
		}


		a->_uartRCVD[0]='\0'; //200829  Elimino el registro de recepcion, solo se vuelve a actualizar en TIMEOUT
 800958c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8009590:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2200      	movs	r2, #0
 8009598:	f883 2694 	strb.w	r2, [r3, #1684]	; 0x694
		a->_n_orig=0;
 800959c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095a0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

		return (a->_estado);
 80095ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095b0:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

 }
 80095ba:	4618      	mov	r0, r3
 80095bc:	f507 7715 	add.w	r7, r7, #596	; 0x254
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095c4 <WiFi_Conn_ND>:
 }
 /*--------------------------------------------------------------*/

		//--------------Maquina de estados para conectar a TCP
int WiFi_Conn_ND( struct WIFI *b, UART_HandleTypeDef *PORTSER, int EN_DEBUG )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
		switch (b->_estado_conexion)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095d6:	f240 328d 	movw	r2, #909	; 0x38d
 80095da:	4293      	cmp	r3, r2
 80095dc:	f001 83c3 	beq.w	800ad66 <WiFi_Conn_ND+0x17a2>
 80095e0:	f240 328d 	movw	r2, #909	; 0x38d
 80095e4:	4293      	cmp	r3, r2
 80095e6:	f301 8453 	bgt.w	800ae90 <WiFi_Conn_ND+0x18cc>
 80095ea:	f240 3289 	movw	r2, #905	; 0x389
 80095ee:	4293      	cmp	r3, r2
 80095f0:	f001 8335 	beq.w	800ac5e <WiFi_Conn_ND+0x169a>
 80095f4:	f240 3289 	movw	r2, #905	; 0x389
 80095f8:	4293      	cmp	r3, r2
 80095fa:	f301 8449 	bgt.w	800ae90 <WiFi_Conn_ND+0x18cc>
 80095fe:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8009602:	f001 8224 	beq.w	800aa4e <WiFi_Conn_ND+0x148a>
 8009606:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800960a:	f301 8441 	bgt.w	800ae90 <WiFi_Conn_ND+0x18cc>
 800960e:	f240 3229 	movw	r2, #809	; 0x329
 8009612:	4293      	cmp	r3, r2
 8009614:	f301 843c 	bgt.w	800ae90 <WiFi_Conn_ND+0x18cc>
 8009618:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800961c:	f280 80a5 	bge.w	800976a <WiFi_Conn_ND+0x1a6>
 8009620:	f240 22c5 	movw	r2, #709	; 0x2c5
 8009624:	4293      	cmp	r3, r2
 8009626:	f000 8776 	beq.w	800a516 <WiFi_Conn_ND+0xf52>
 800962a:	f240 22c5 	movw	r2, #709	; 0x2c5
 800962e:	4293      	cmp	r3, r2
 8009630:	f301 842e 	bgt.w	800ae90 <WiFi_Conn_ND+0x18cc>
 8009634:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009638:	4293      	cmp	r3, r2
 800963a:	f000 86fc 	beq.w	800a436 <WiFi_Conn_ND+0xe72>
 800963e:	f240 22c1 	movw	r2, #705	; 0x2c1
 8009642:	4293      	cmp	r3, r2
 8009644:	f301 8424 	bgt.w	800ae90 <WiFi_Conn_ND+0x18cc>
 8009648:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800964c:	f000 862b 	beq.w	800a2a6 <WiFi_Conn_ND+0xce2>
 8009650:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8009654:	f301 841c 	bgt.w	800ae90 <WiFi_Conn_ND+0x18cc>
 8009658:	f240 2261 	movw	r2, #609	; 0x261
 800965c:	4293      	cmp	r3, r2
 800965e:	f000 85b1 	beq.w	800a1c4 <WiFi_Conn_ND+0xc00>
 8009662:	f240 2261 	movw	r2, #609	; 0x261
 8009666:	4293      	cmp	r3, r2
 8009668:	f301 8412 	bgt.w	800ae90 <WiFi_Conn_ND+0x18cc>
 800966c:	f240 225d 	movw	r2, #605	; 0x25d
 8009670:	4293      	cmp	r3, r2
 8009672:	f000 8551 	beq.w	800a118 <WiFi_Conn_ND+0xb54>
 8009676:	f240 225d 	movw	r2, #605	; 0x25d
 800967a:	4293      	cmp	r3, r2
 800967c:	f301 8408 	bgt.w	800ae90 <WiFi_Conn_ND+0x18cc>
 8009680:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8009684:	f000 84cf 	beq.w	800a026 <WiFi_Conn_ND+0xa62>
 8009688:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800968c:	f301 8400 	bgt.w	800ae90 <WiFi_Conn_ND+0x18cc>
 8009690:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009694:	4293      	cmp	r3, r2
 8009696:	f000 846a 	beq.w	8009f6e <WiFi_Conn_ND+0x9aa>
 800969a:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800969e:	f281 83f7 	bge.w	800ae90 <WiFi_Conn_ND+0x18cc>
 80096a2:	f240 12f9 	movw	r2, #505	; 0x1f9
 80096a6:	4293      	cmp	r3, r2
 80096a8:	f000 8425 	beq.w	8009ef6 <WiFi_Conn_ND+0x932>
 80096ac:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 80096b0:	f281 83ee 	bge.w	800ae90 <WiFi_Conn_ND+0x18cc>
 80096b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80096b8:	f000 83b0 	beq.w	8009e1c <WiFi_Conn_ND+0x858>
 80096bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80096c0:	f301 83e6 	bgt.w	800ae90 <WiFi_Conn_ND+0x18cc>
 80096c4:	f240 1299 	movw	r2, #409	; 0x199
 80096c8:	4293      	cmp	r3, r2
 80096ca:	f000 8369 	beq.w	8009da0 <WiFi_Conn_ND+0x7dc>
 80096ce:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 80096d2:	f281 83dd 	bge.w	800ae90 <WiFi_Conn_ND+0x18cc>
 80096d6:	f240 1295 	movw	r2, #405	; 0x195
 80096da:	4293      	cmp	r3, r2
 80096dc:	f000 8329 	beq.w	8009d32 <WiFi_Conn_ND+0x76e>
 80096e0:	f5b3 7fcb 	cmp.w	r3, #406	; 0x196
 80096e4:	f281 83d4 	bge.w	800ae90 <WiFi_Conn_ND+0x18cc>
 80096e8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80096ec:	f000 82a0 	beq.w	8009c30 <WiFi_Conn_ND+0x66c>
 80096f0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80096f4:	f301 83cc 	bgt.w	800ae90 <WiFi_Conn_ND+0x18cc>
 80096f8:	f240 1235 	movw	r2, #309	; 0x135
 80096fc:	4293      	cmp	r3, r2
 80096fe:	f000 8271 	beq.w	8009be4 <WiFi_Conn_ND+0x620>
 8009702:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8009706:	f281 83c3 	bge.w	800ae90 <WiFi_Conn_ND+0x18cc>
 800970a:	f240 1231 	movw	r2, #305	; 0x131
 800970e:	4293      	cmp	r3, r2
 8009710:	f000 8263 	beq.w	8009bda <WiFi_Conn_ND+0x616>
 8009714:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009718:	f281 83ba 	bge.w	800ae90 <WiFi_Conn_ND+0x18cc>
 800971c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009720:	f000 8207 	beq.w	8009b32 <WiFi_Conn_ND+0x56e>
 8009724:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009728:	f301 83b2 	bgt.w	800ae90 <WiFi_Conn_ND+0x18cc>
 800972c:	2bd1      	cmp	r3, #209	; 0xd1
 800972e:	f000 81a0 	beq.w	8009a72 <WiFi_Conn_ND+0x4ae>
 8009732:	2bd1      	cmp	r3, #209	; 0xd1
 8009734:	f301 83ac 	bgt.w	800ae90 <WiFi_Conn_ND+0x18cc>
 8009738:	2bcd      	cmp	r3, #205	; 0xcd
 800973a:	f000 8170 	beq.w	8009a1e <WiFi_Conn_ND+0x45a>
 800973e:	2bcd      	cmp	r3, #205	; 0xcd
 8009740:	f301 83a6 	bgt.w	800ae90 <WiFi_Conn_ND+0x18cc>
 8009744:	2bc8      	cmp	r3, #200	; 0xc8
 8009746:	f000 80f1 	beq.w	800992c <WiFi_Conn_ND+0x368>
 800974a:	2bc8      	cmp	r3, #200	; 0xc8
 800974c:	f301 83a0 	bgt.w	800ae90 <WiFi_Conn_ND+0x18cc>
 8009750:	2b6d      	cmp	r3, #109	; 0x6d
 8009752:	f000 80b3 	beq.w	80098bc <WiFi_Conn_ND+0x2f8>
 8009756:	2b6d      	cmp	r3, #109	; 0x6d
 8009758:	f301 839a 	bgt.w	800ae90 <WiFi_Conn_ND+0x18cc>
 800975c:	2b64      	cmp	r3, #100	; 0x64
 800975e:	d021      	beq.n	80097a4 <WiFi_Conn_ND+0x1e0>
 8009760:	2b69      	cmp	r3, #105	; 0x69
 8009762:	f000 8096 	beq.w	8009892 <WiFi_Conn_ND+0x2ce>
 8009766:	f001 bb93 	b.w	800ae90 <WiFi_Conn_ND+0x18cc>
 800976a:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
 800976e:	2b09      	cmp	r3, #9
 8009770:	f201 838e 	bhi.w	800ae90 <WiFi_Conn_ND+0x18cc>
 8009774:	a201      	add	r2, pc, #4	; (adr r2, 800977c <WiFi_Conn_ND+0x1b8>)
 8009776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977a:	bf00      	nop
 800977c:	0800a623 	.word	0x0800a623
 8009780:	0800ae91 	.word	0x0800ae91
 8009784:	0800ae91 	.word	0x0800ae91
 8009788:	0800ae91 	.word	0x0800ae91
 800978c:	0800ae91 	.word	0x0800ae91
 8009790:	0800a6f1 	.word	0x0800a6f1
 8009794:	0800a791 	.word	0x0800a791
 8009798:	0800a831 	.word	0x0800a831
 800979c:	0800a8d1 	.word	0x0800a8d1
 80097a0:	0800a971 	.word	0x0800a971
		{
			case CAMBIAR_MODO_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=100)&&(b->_estado!=at_ok)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097aa:	2b64      	cmp	r3, #100	; 0x64
 80097ac:	d046      	beq.n	800983c <WiFi_Conn_ND+0x278>
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d041      	beq.n	800983c <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_cambiar_modo_ok)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097be:	2b1c      	cmp	r3, #28
 80097c0:	d03c      	beq.n	800983c <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_error)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d037      	beq.n	800983c <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_restart)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097d2:	2b04      	cmp	r3, #4
 80097d4:	d032      	beq.n	800983c <WiFi_Conn_ND+0x278>
									&&(b->_estado!=at_tcp_enviado_ok))	//Si estoy conectando, no vuelvo a conectar.
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097dc:	2b13      	cmp	r3, #19
 80097de:	d02d      	beq.n	800983c <WiFi_Conn_ND+0x278>
				{
						Cambiar_CWMODE(b);
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f7fc fc5f 	bl	80060a4 <Cambiar_CWMODE>
						if(b->_enviaruart==1)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d14e      	bne.n	800988e <WiFi_Conn_ND+0x2ca>
							{
								b->_estado=AT_ESP8266_ND(b);  //Genero las instrucciones a enviar
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f7fc fde7 	bl	80063c4 <AT_ESP8266_ND>
 80097f6:	4602      	mov	r2, r0
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800980c:	2b01      	cmp	r3, #1
 800980e:	d109      	bne.n	8009824 <WiFi_Conn_ND+0x260>
								{
									ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800981c:	4619      	mov	r1, r3
 800981e:	4610      	mov	r0, r2
 8009820:	f7f7 fdaa 	bl	8001378 <ITM0_Write>
								}else{}
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009830:	b29a      	uxth	r2, r3
 8009832:	2364      	movs	r3, #100	; 0x64
 8009834:	68b8      	ldr	r0, [r7, #8]
 8009836:	f7fb fbd7 	bl	8004fe8 <HAL_UART_Transmit>
						if(b->_enviaruart==1)
 800983a:	e028      	b.n	800988e <WiFi_Conn_ND+0x2ca>
						else{}
				}
				else
				{
					//----Condiciones de cambio de estado
					if((b->_estado==at_ok)||
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009842:	2b01      	cmp	r3, #1
 8009844:	d004      	beq.n	8009850 <WiFi_Conn_ND+0x28c>
					   (b->_estado==at_cambiar_modo_ok))
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					if((b->_estado==at_ok)||
 800984c:	2b1c      	cmp	r3, #28
 800984e:	d103      	bne.n	8009858 <WiFi_Conn_ND+0x294>
						{
						b->_estado_conexion=CAMBIAR_MODO_OK; 	//Cambio de estado exitoso
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	226d      	movs	r2, #109	; 0x6d
 8009854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}

					if((b->_estado==at_error)||(b->_estado==at_restart)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800985e:	2b02      	cmp	r3, #2
 8009860:	d00f      	beq.n	8009882 <WiFi_Conn_ND+0x2be>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009868:	2b04      	cmp	r3, #4
 800986a:	d00a      	beq.n	8009882 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_connected)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009872:	2b0b      	cmp	r3, #11
 8009874:	d005      	beq.n	8009882 <WiFi_Conn_ND+0x2be>
											 ||(b->_estado==at_wifi_gotip))
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800987c:	2b0c      	cmp	r3, #12
 800987e:	f041 82d8 	bne.w	800ae32 <WiFi_Conn_ND+0x186e>
						{
						b->_estado_conexion=CAMBIAR_MODO_ERROR; //210630 Se agrega ATDecode 4, 11 y 12	//Cambio de estado erroneo
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2269      	movs	r2, #105	; 0x69
 8009886:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						}
					//----Condiciones de cambio de estado
				}
			}
			break;
 800988a:	f001 bad2 	b.w	800ae32 <WiFi_Conn_ND+0x186e>
 800988e:	f001 bad0 	b.w	800ae32 <WiFi_Conn_ND+0x186e>
			case CAMBIAR_MODO_ERROR://Error al cambiar de modo
			{
				Cambiar_CWMODE(b);
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f7fc fc06 	bl	80060a4 <Cambiar_CWMODE>
				b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2264      	movs	r2, #100	; 0x64
 800989c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
			}
			break;
 80098b8:	f001 baea 	b.w	800ae90 <WiFi_Conn_ND+0x18cc>
			case CAMBIAR_MODO_OK ://Cambio de modo OK
			{
//220818
				if (b->_TCP_Local_Server_EN)//
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00c      	beq.n	80098e0 <WiFi_Conn_ND+0x31c>
				{//
					MUX(b);	//								//Si me conecté seteo las múltiples Conexiones
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f7fc fc18 	bl	80060fc <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;//
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80098d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;//
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80098de:	e00e      	b.n	80098fe <WiFi_Conn_ND+0x33a>

				}//
				else//
				{//
					ConectarWIFI(b);
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f7fc fbf5 	bl	80060d0 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	22c8      	movs	r2, #200	; 0xc8
 80098ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}//

				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009904:	2b04      	cmp	r3, #4
 8009906:	f041 8296 	bne.w	800ae36 <WiFi_Conn_ND+0x1872>
					{
						Cambiar_CWMODE(b);
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f7fc fbca 	bl	80060a4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2264      	movs	r2, #100	; 0x64
 8009914:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2200      	movs	r2, #0
 800991c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009928:	f001 ba85 	b.w	800ae36 <WiFi_Conn_ND+0x1872>
			case CONEXION_EN_CURSO:			//WIFI Desconectado --> Conectar a WIFI nuevamente
			{
				if((b->_estado!=200)&&((b->_estado!=at_ok)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009932:	2bc8      	cmp	r3, #200	; 0xc8
 8009934:	d04f      	beq.n	80099d6 <WiFi_Conn_ND+0x412>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800993c:	2b01      	cmp	r3, #1
 800993e:	d04a      	beq.n	80099d6 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_error)
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009946:	2b02      	cmp	r3, #2
 8009948:	d045      	beq.n	80099d6 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_fail)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009950:	2b03      	cmp	r3, #3
 8009952:	d040      	beq.n	80099d6 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_restart)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800995a:	2b04      	cmp	r3, #4
 800995c:	d03b      	beq.n	80099d6 <WiFi_Conn_ND+0x412>
						            &&(b->_estado!=at_wifi_disconnect)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009964:	2b0a      	cmp	r3, #10
 8009966:	d036      	beq.n	80099d6 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_connected)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800996e:	2b0b      	cmp	r3, #11
 8009970:	d031      	beq.n	80099d6 <WiFi_Conn_ND+0x412>
									&&(b->_estado!=at_wifi_gotip)))	//Si estoy conectando, no vuelvo a conectar.
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009978:	2b0c      	cmp	r3, #12
 800997a:	d02c      	beq.n	80099d6 <WiFi_Conn_ND+0x412>
				{
						ConectarWIFI(b);
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f7fc fba7 	bl	80060d0 <ConectarWIFI>
						if(b->_enviaruart==1)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009988:	2b01      	cmp	r3, #1
 800998a:	d124      	bne.n	80099d6 <WiFi_Conn_ND+0x412>
							{
								b->_estado=AT_ESP8266_ND(b);
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f7fc fd19 	bl	80063c4 <AT_ESP8266_ND>
 8009992:	4602      	mov	r2, r0
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d109      	bne.n	80099c0 <WiFi_Conn_ND+0x3fc>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f203 4294 	addw	r2, r3, #1172	; 0x494
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 80099b8:	4619      	mov	r1, r3
 80099ba:	4610      	mov	r0, r2
 80099bc:	f7f7 fcdc 	bl	8001378 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f203 4194 	addw	r1, r3, #1172	; 0x494
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 80099cc:	b29a      	uxth	r2, r3
 80099ce:	2364      	movs	r3, #100	; 0x64
 80099d0:	68b8      	ldr	r0, [r7, #8]
 80099d2:	f7fb fb09 	bl	8004fe8 <HAL_UART_Transmit>
							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_wifi_gotip))
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d004      	beq.n	80099ea <WiFi_Conn_ND+0x426>
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099e6:	2b0c      	cmp	r3, #12
 80099e8:	d103      	bne.n	80099f2 <WiFi_Conn_ND+0x42e>

					{
						b->_estado_conexion=CONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	22d1      	movs	r2, #209	; 0xd1
 80099ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					}
				if((b->_estado==at_error)||(b->_estado==at_fail)||(b->_estado==at_conn_wifi_err)) b->_estado_conexion=CONEXION_ERROR; 	//Ya puedo pedir conexi�n TCP
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d00a      	beq.n	8009a12 <WiFi_Conn_ND+0x44e>
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a02:	2b03      	cmp	r3, #3
 8009a04:	d005      	beq.n	8009a12 <WiFi_Conn_ND+0x44e>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a0c:	2b20      	cmp	r3, #32
 8009a0e:	f041 8214 	bne.w	800ae3a <WiFi_Conn_ND+0x1876>
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	22cd      	movs	r2, #205	; 0xcd
 8009a16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009a1a:	f001 ba0e 	b.w	800ae3a <WiFi_Conn_ND+0x1876>
			case CONEXION_ERROR://Error al conectar
			{
				HAL_Delay(5000); //Cuando entrega el error, lo hace rápido no demora.
 8009a1e:	f241 3088 	movw	r0, #5000	; 0x1388
 8009a22:	f7f8 fe2d 	bl	8002680 <HAL_Delay>
				// bucle infinito de ERRORES al querer conectar.										//
				// La unica manera de solucionarlo es seteando nuevamente AT+CWMODE=1					//
				// La realidad es que es muy dificil que se borre la flash una vez inciado el módulo	//
				// se le podría dar un tratamiento pero de momento no lo haremos salvo que sea necesario//
				//--------------------------------------------------------------------------------------//
				ConectarWIFI(b);
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f7fc fb52 	bl	80060d0 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	22c8      	movs	r2, #200	; 0xc8
 8009a30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				b->_n_orig=0; //Borro el vector RX
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a4a:	2b04      	cmp	r3, #4
 8009a4c:	f041 81f7 	bne.w	800ae3e <WiFi_Conn_ND+0x187a>
					{
						Cambiar_CWMODE(b);
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f7fc fb27 	bl	80060a4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2264      	movs	r2, #100	; 0x64
 8009a5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009a6e:	f001 b9e6 	b.w	800ae3e <WiFi_Conn_ND+0x187a>
			case CONEXION_OK://Conecta OK
			{
				b->_n_orig=0; //Borro el vector RX
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				if(b->_TCP_Local_Server_Initiated==1)  //Si el servidor ya estaba iniciado, voy al servidor inciado
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f893 3083 	ldrb.w	r3, [r3, #131]	; 0x83
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d108      	bne.n	8009a96 <WiFi_Conn_ND+0x4d2>
				{
					b->_estado_conexion=TCP_SRVR_OK ;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f240 3229 	movw	r2, #809	; 0x329
 8009a8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok)) //Si me desconecto, me vuelvo a conectar
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a9c:	2b0a      	cmp	r3, #10
 8009a9e:	d004      	beq.n	8009aaa <WiFi_Conn_ND+0x4e6>
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aa6:	2b0d      	cmp	r3, #13
 8009aa8:	d10a      	bne.n	8009ac0 <WiFi_Conn_ND+0x4fc>
				{
					ConectarWIFI(b);
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f7fc fb10 	bl	80060d0 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	22c8      	movs	r2, #200	; 0xc8
 8009ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				}

				if(b->_estado==at_restart	)					  //Reinicio involuntario de módulo
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ac6:	2b04      	cmp	r3, #4
 8009ac8:	d10e      	bne.n	8009ae8 <WiFi_Conn_ND+0x524>
					{
						Cambiar_CWMODE(b);
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f7fc faea 	bl	80060a4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2264      	movs	r2, #100	; 0x64
 8009ad4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
//220818
				if(b->_TCP_Local_Server_EN)//
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d011      	beq.n	8009b16 <WiFi_Conn_ND+0x552>
				{//
					CrearServidorTCP(b);
 8009af2:	68f8      	ldr	r0, [r7, #12]
 8009af4:	f7fc fb5a 	bl	80061ac <CrearServidorTCP>
					b->_estado_conexion=TCP_SRVR_EN_CURSO;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009afe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
					b->_estado_conexion=MUX_CONN_EN_CURSO;
					b->_estado=0;
				}//
			}
			break;
 8009b12:	f001 b9bd 	b.w	800ae90 <WiFi_Conn_ND+0x18cc>
					MUX(b);									//Si me conecté seteo las múltiples Conexiones
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7fc faf0 	bl	80060fc <MUX>
					b->_estado_conexion=MUX_CONN_EN_CURSO;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009b22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			break;
 8009b2e:	f001 b9af 	b.w	800ae90 <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_EN_CURSO:			//Desconectar WiFi
			{
				if((b->_estado!=300)&&(b->_estado!=at_restart)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=at_deconectar_ok ))	//Si estoy conectando, no vuelvo a conectar.
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b38:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009b3c:	d03b      	beq.n	8009bb6 <WiFi_Conn_ND+0x5f2>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b44:	2b04      	cmp	r3, #4
 8009b46:	d036      	beq.n	8009bb6 <WiFi_Conn_ND+0x5f2>
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b4e:	2b0a      	cmp	r3, #10
 8009b50:	d031      	beq.n	8009bb6 <WiFi_Conn_ND+0x5f2>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b58:	2b0d      	cmp	r3, #13
 8009b5a:	d02c      	beq.n	8009bb6 <WiFi_Conn_ND+0x5f2>
				{
						DesconectarWIFI(b);
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f7fc faf9 	bl	8006154 <DesconectarWIFI>
						if(b->_enviaruart==1)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d124      	bne.n	8009bb6 <WiFi_Conn_ND+0x5f2>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f7fc fc29 	bl	80063c4 <AT_ESP8266_ND>
 8009b72:	4602      	mov	r2, r0
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d109      	bne.n	8009ba0 <WiFi_Conn_ND+0x5dc>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009b98:	4619      	mov	r1, r3
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	f7f7 fbec 	bl	8001378 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	2364      	movs	r3, #100	; 0x64
 8009bb0:	68b8      	ldr	r0, [r7, #8]
 8009bb2:	f7fb fa19 	bl	8004fe8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) b->_estado_conexion=DESCONEXION_OK; 	//Ya puedo pedir conexi�n TCP
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bbc:	2b0a      	cmp	r3, #10
 8009bbe:	d005      	beq.n	8009bcc <WiFi_Conn_ND+0x608>
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bc6:	2b0d      	cmp	r3, #13
 8009bc8:	f041 813b 	bne.w	800ae42 <WiFi_Conn_ND+0x187e>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f240 1235 	movw	r2, #309	; 0x135
 8009bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009bd6:	f001 b934 	b.w	800ae42 <WiFi_Conn_ND+0x187e>
			case DESCONEXION_ERROR ://Error al Desconectar WiFi
			{
				NOP(b);
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f7fc fa4c 	bl	8006078 <NOP>
			}
			break;
 8009be0:	f001 b956 	b.w	800ae90 <WiFi_Conn_ND+0x18cc>
			case DESCONEXION_OK ://Desconectar WiFi OK
			{
				b->_n_orig=0; //Borro el vector RX
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

				ConectarWIFI(b);
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f7fc fa6f 	bl	80060d0 <ConectarWIFI>
				b->_estado_conexion=CONEXION_EN_CURSO;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	22c8      	movs	r2, #200	; 0xc8
 8009bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				b->_estado=0;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

					if(b->_estado==at_restart	)		//Reinicio involuntario de módulo
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c08:	2b04      	cmp	r3, #4
 8009c0a:	f041 811c 	bne.w	800ae46 <WiFi_Conn_ND+0x1882>
					{
						Cambiar_CWMODE(b);
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f7fc fa48 	bl	80060a4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2264      	movs	r2, #100	; 0x64
 8009c18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88


						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
			}
			break;
 8009c2c:	f001 b90b 	b.w	800ae46 <WiFi_Conn_ND+0x1882>
			case MUX_CONN_EN_CURSO:			//Multiples Conexiones
			{
				if((b->_estado!=400)&&(b->_estado!=at_restart)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c36:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009c3a:	d04f      	beq.n	8009cdc <WiFi_Conn_ND+0x718>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c42:	2b04      	cmp	r3, #4
 8009c44:	d04a      	beq.n	8009cdc <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_ok)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d045      	beq.n	8009cdc <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_error)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d040      	beq.n	8009cdc <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_ok)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c60:	2b07      	cmp	r3, #7
 8009c62:	d03b      	beq.n	8009cdc <WiFi_Conn_ND+0x718>
						            &&(b->_estado!=at_no_multiple_conn_ok)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c6a:	2b08      	cmp	r3, #8
 8009c6c:	d036      	beq.n	8009cdc <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_multiple_conn_err)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c74:	2b1e      	cmp	r3, #30
 8009c76:	d031      	beq.n	8009cdc <WiFi_Conn_ND+0x718>
									&&(b->_estado!=at_no_multiple_conn_err))	//Si estoy conectando, no vuelvo a conectar.
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c7e:	2b1f      	cmp	r3, #31
 8009c80:	d02c      	beq.n	8009cdc <WiFi_Conn_ND+0x718>
				{
						MUX(b);
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f7fc fa3a 	bl	80060fc <MUX>
						if(b->_enviaruart==1)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d124      	bne.n	8009cdc <WiFi_Conn_ND+0x718>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f7fc fb96 	bl	80063c4 <AT_ESP8266_ND>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d109      	bne.n	8009cc6 <WiFi_Conn_ND+0x702>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	4610      	mov	r0, r2
 8009cc2:	f7f7 fb59 	bl	8001378 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	2364      	movs	r3, #100	; 0x64
 8009cd6:	68b8      	ldr	r0, [r7, #8]
 8009cd8:	f7fb f986 	bl	8004fe8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_multiple_conn_ok)||(b->_estado==at_no_multiple_conn_ok)) b->_estado_conexion=MUX_CONN_OK;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d009      	beq.n	8009cfa <WiFi_Conn_ND+0x736>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cec:	2b07      	cmp	r3, #7
 8009cee:	d004      	beq.n	8009cfa <WiFi_Conn_ND+0x736>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cf6:	2b08      	cmp	r3, #8
 8009cf8:	d104      	bne.n	8009d04 <WiFi_Conn_ND+0x740>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f240 1299 	movw	r2, #409	; 0x199
 8009d00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_multiple_conn_err)||(b->_estado==at_no_multiple_conn_err)) b->_estado_conexion=MUX_CONN_ERROR;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d00a      	beq.n	8009d24 <WiFi_Conn_ND+0x760>
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d14:	2b1e      	cmp	r3, #30
 8009d16:	d005      	beq.n	8009d24 <WiFi_Conn_ND+0x760>
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d1e:	2b1f      	cmp	r3, #31
 8009d20:	f041 8093 	bne.w	800ae4a <WiFi_Conn_ND+0x1886>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f240 1295 	movw	r2, #405	; 0x195
 8009d2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009d2e:	f001 b88c 	b.w	800ae4a <WiFi_Conn_ND+0x1886>
			case MUX_CONN_ERROR://Error Multiples Conexiones
			{
				NOP(b);
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f7fc f9a0 	bl	8006078 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d3e:	2b04      	cmp	r3, #4
 8009d40:	d112      	bne.n	8009d68 <WiFi_Conn_ND+0x7a4>
				{
					Cambiar_CWMODE(b);
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f7fc f9ae 	bl	80060a4 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2264      	movs	r2, #100	; 0x64
 8009d4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d6e:	2b0a      	cmp	r3, #10
 8009d70:	d005      	beq.n	8009d7e <WiFi_Conn_ND+0x7ba>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d78:	2b0d      	cmp	r3, #13
 8009d7a:	f041 8068 	bne.w	800ae4e <WiFi_Conn_ND+0x188a>
				{
					ConectarWIFI(b);
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f7fc f9a6 	bl	80060d0 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	22c8      	movs	r2, #200	; 0xc8
 8009d88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 8009d9c:	f001 b857 	b.w	800ae4e <WiFi_Conn_ND+0x188a>
			case MUX_CONN_OK://Multiples Conexiones OK
			{
				NOP(b);
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f7fc f969 	bl	8006078 <NOP>
				b->_n_orig=0; //Borro el vector RX
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db4:	2b04      	cmp	r3, #4
 8009db6:	d10e      	bne.n	8009dd6 <WiFi_Conn_ND+0x812>
					{
						Cambiar_CWMODE(b);
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f7fc f973 	bl	80060a4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2264      	movs	r2, #100	; 0x64
 8009dc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ddc:	2b0a      	cmp	r3, #10
 8009dde:	d004      	beq.n	8009dea <WiFi_Conn_ND+0x826>
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de6:	2b0d      	cmp	r3, #13
 8009de8:	d10a      	bne.n	8009e00 <WiFi_Conn_ND+0x83c>
					{
						ConectarWIFI(b);
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f7fc f970 	bl	80060d0 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	22c8      	movs	r2, #200	; 0xc8
 8009df4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					}

					IPDef(b);
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f7fc f991 	bl	8006128 <IPDef>
					b->_estado_conexion=DEF_IP_EN_CURSO;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009e0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			}
			break;
 8009e18:	f001 b83a 	b.w	800ae90 <WiFi_Conn_ND+0x18cc>
			case DEF_IP_EN_CURSO:			//Definir IP
			{
				if((b->_estado!=500)&&(b->_estado!=at_restart)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009e26:	d045      	beq.n	8009eb4 <WiFi_Conn_ND+0x8f0>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e2e:	2b04      	cmp	r3, #4
 8009e30:	d040      	beq.n	8009eb4 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_ok)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d03b      	beq.n	8009eb4 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_error)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d036      	beq.n	8009eb4 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_ok)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e4c:	2b1b      	cmp	r3, #27
 8009e4e:	d031      	beq.n	8009eb4 <WiFi_Conn_ND+0x8f0>
									&&(b->_estado!=at_def_ip_err))	//Si estoy conectando, no vuelvo a conectar.
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e56:	2b21      	cmp	r3, #33	; 0x21
 8009e58:	d02c      	beq.n	8009eb4 <WiFi_Conn_ND+0x8f0>
				{
						IPDef(b);
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f7fc f964 	bl	8006128 <IPDef>
						if(b->_enviaruart==1)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d124      	bne.n	8009eb4 <WiFi_Conn_ND+0x8f0>
							{
								b->_estado=AT_ESP8266_ND(b);
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f7fc faaa 	bl	80063c4 <AT_ESP8266_ND>
 8009e70:	4602      	mov	r2, r0
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d109      	bne.n	8009e9e <WiFi_Conn_ND+0x8da>
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009e96:	4619      	mov	r1, r3
 8009e98:	4610      	mov	r0, r2
 8009e9a:	f7f7 fa6d 	bl	8001378 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f203 4194 	addw	r1, r3, #1172	; 0x494
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	2364      	movs	r3, #100	; 0x64
 8009eae:	68b8      	ldr	r0, [r7, #8]
 8009eb0:	f7fb f89a 	bl	8004fe8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_def_ip_ok)) b->_estado_conexion=DEF_IP_OK;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d004      	beq.n	8009ec8 <WiFi_Conn_ND+0x904>
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ec4:	2b1b      	cmp	r3, #27
 8009ec6:	d104      	bne.n	8009ed2 <WiFi_Conn_ND+0x90e>
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f240 12fd 	movw	r2, #509	; 0x1fd
 8009ece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_def_ip_err)) b->_estado_conexion=DEF_IP_ERROR;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d005      	beq.n	8009ee8 <WiFi_Conn_ND+0x924>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee2:	2b21      	cmp	r3, #33	; 0x21
 8009ee4:	f040 87b5 	bne.w	800ae52 <WiFi_Conn_ND+0x188e>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f240 12f9 	movw	r2, #505	; 0x1f9
 8009eee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				//----Condiciones de cambio de estado
			}
			break;
 8009ef2:	f000 bfae 	b.w	800ae52 <WiFi_Conn_ND+0x188e>
			case DEF_IP_ERROR://Error Definir IP
			{
				NOP(b);
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f7fc f8be 	bl	8006078 <NOP>
				if((b->_estado==at_restart)||(b->_estado==at_error))		//Reinicio involuntario de módulo
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f02:	2b04      	cmp	r3, #4
 8009f04:	d004      	beq.n	8009f10 <WiFi_Conn_ND+0x94c>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	d112      	bne.n	8009f36 <WiFi_Conn_ND+0x972>
				{
					Cambiar_CWMODE(b);
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f7fc f8c7 	bl	80060a4 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2264      	movs	r2, #100	; 0x64
 8009f1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f3c:	2b0a      	cmp	r3, #10
 8009f3e:	d005      	beq.n	8009f4c <WiFi_Conn_ND+0x988>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f46:	2b0d      	cmp	r3, #13
 8009f48:	f040 8785 	bne.w	800ae56 <WiFi_Conn_ND+0x1892>
				{
					ConectarWIFI(b);
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7fc f8bf 	bl	80060d0 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	22c8      	movs	r2, #200	; 0xc8
 8009f56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 8009f6a:	f000 bf74 	b.w	800ae56 <WiFi_Conn_ND+0x1892>
			case DEF_IP_OK://Definir IP OK
			{
				NOP(b);
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f7fc f882 	bl	8006078 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f7a:	2b04      	cmp	r3, #4
 8009f7c:	d112      	bne.n	8009fa4 <WiFi_Conn_ND+0x9e0>
					{
						Cambiar_CWMODE(b);
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f7fc f890 	bl	80060a4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2264      	movs	r2, #100	; 0x64
 8009f88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009faa:	2b0a      	cmp	r3, #10
 8009fac:	d004      	beq.n	8009fb8 <WiFi_Conn_ND+0x9f4>
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fb4:	2b0d      	cmp	r3, #13
 8009fb6:	d10e      	bne.n	8009fd6 <WiFi_Conn_ND+0xa12>
					{
						ConectarWIFI(b);
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f7fc f889 	bl	80060d0 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	22c8      	movs	r2, #200	; 0xc8
 8009fc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}

//220818 lo anulado esta presente, para volver atras descomentar

					if (b->_TCP_Local_Server_EN==0)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d111      	bne.n	800a004 <WiFi_Conn_ND+0xa40>
					{
						ConectarTCP(b);
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f7fc f8cd 	bl	8006180 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009fec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						//b->_estado_conexion=TCP_SRVR_EN_CURSO;
						//b->_estado=0;
						//b->_n_orig=0; //Borro el vector RX
					}
			}
			break;
 800a000:	f000 bf46 	b.w	800ae90 <WiFi_Conn_ND+0x18cc>
						ConectarWIFI(b);//
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f7fc f863 	bl	80060d0 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;//
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	22c8      	movs	r2, #200	; 0xc8
 800a00e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;//
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0;// //Borro el vector RX
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a022:	f000 bf35 	b.w	800ae90 <WiFi_Conn_ND+0x18cc>
			case TCP_CONN_EN_CURSO:			//Conectar a Servidor TCP
			{
				if((b->_estado!=600)&&(b->_estado!=at_error)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a02c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a030:	d04a      	beq.n	800a0c8 <WiFi_Conn_ND+0xb04>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d045      	beq.n	800a0c8 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_ok)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a042:	2b01      	cmp	r3, #1
 800a044:	d040      	beq.n	800a0c8 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_wifi_disconnect)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a04c:	2b0a      	cmp	r3, #10
 800a04e:	d03b      	beq.n	800a0c8 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_alrdy_cnntd_err)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a056:	2b0e      	cmp	r3, #14
 800a058:	d036      	beq.n	800a0c8 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_conectado)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a060:	2b0f      	cmp	r3, #15
 800a062:	d031      	beq.n	800a0c8 <WiFi_Conn_ND+0xb04>
									&&(b->_estado!=at_tcp_desconectado))	//Si estoy conectando, no vuelvo a conectar.
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a06a:	2b10      	cmp	r3, #16
 800a06c:	d02c      	beq.n	800a0c8 <WiFi_Conn_ND+0xb04>
				{
					ConectarTCP(b);
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f7fc f886 	bl	8006180 <ConectarTCP>
						if(b->_enviaruart==1)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d124      	bne.n	800a0c8 <WiFi_Conn_ND+0xb04>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f7fc f9a0 	bl	80063c4 <AT_ESP8266_ND>
 800a084:	4602      	mov	r2, r0
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d109      	bne.n	800a0b2 <WiFi_Conn_ND+0xaee>
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	f7f7 f963 	bl	8001378 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	2364      	movs	r3, #100	; 0x64
 800a0c2:	68b8      	ldr	r0, [r7, #8]
 800a0c4:	f7fa ff90 	bl	8004fe8 <HAL_UART_Transmit>

							}
				}

				//----Condiciones de cambio de estado
				if((b->_estado==at_ok)||(b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d009      	beq.n	800a0e6 <WiFi_Conn_ND+0xb22>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d8:	2b0e      	cmp	r3, #14
 800a0da:	d004      	beq.n	800a0e6 <WiFi_Conn_ND+0xb22>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e2:	2b0f      	cmp	r3, #15
 800a0e4:	d106      	bne.n	800a0f4 <WiFi_Conn_ND+0xb30>
					{
					b->_estado_conexion=TCP_CONN_OK;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f240 2261 	movw	r2, #609	; 0x261
 800a0ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				{
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
				}
				//----Condiciones de cambio de estado
			}
			break;
 800a0f0:	f000 beb3 	b.w	800ae5a <WiFi_Conn_ND+0x1896>
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)) b->_estado_conexion=TCP_CONN_ERROR;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	d005      	beq.n	800a10a <WiFi_Conn_ND+0xb46>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a104:	2b10      	cmp	r3, #16
 800a106:	f040 86a8 	bne.w	800ae5a <WiFi_Conn_ND+0x1896>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f240 225d 	movw	r2, #605	; 0x25d
 800a110:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			break;
 800a114:	f000 bea1 	b.w	800ae5a <WiFi_Conn_ND+0x1896>
			case TCP_CONN_ERROR://Error al Conectar a Servidor TCP
			{
				NOP(b);
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f7fb ffad 	bl	8006078 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a124:	2b04      	cmp	r3, #4
 800a126:	d112      	bne.n	800a14e <WiFi_Conn_ND+0xb8a>
				{
					Cambiar_CWMODE(b);
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f7fb ffbb 	bl	80060a4 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2264      	movs	r2, #100	; 0x64
 800a132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2200      	movs	r2, #0
 800a14a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a154:	2b0a      	cmp	r3, #10
 800a156:	d004      	beq.n	800a162 <WiFi_Conn_ND+0xb9e>
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a15e:	2b0d      	cmp	r3, #13
 800a160:	d10e      	bne.n	800a180 <WiFi_Conn_ND+0xbbc>
				{
					ConectarWIFI(b);
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f7fb ffb4 	bl	80060d0 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	22c8      	movs	r2, #200	; 0xc8
 800a16c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2200      	movs	r2, #0
 800a174:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)||(b->_estado==at_tcp_alrdy_cnntd_err))	//Si se cierra la conexión vuelvo a conectar
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a186:	2b02      	cmp	r3, #2
 800a188:	d00a      	beq.n	800a1a0 <WiFi_Conn_ND+0xbdc>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a190:	2b10      	cmp	r3, #16
 800a192:	d005      	beq.n	800a1a0 <WiFi_Conn_ND+0xbdc>
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a19a:	2b0e      	cmp	r3, #14
 800a19c:	f040 865f 	bne.w	800ae5e <WiFi_Conn_ND+0x189a>
				{
					ConectarTCP(b);
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f7fb ffed 	bl	8006180 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a1ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a1c0:	f000 be4d 	b.w	800ae5e <WiFi_Conn_ND+0x189a>
			case TCP_CONN_OK://Conectar a Servidor TCP OK
			{
				NOP(b);
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f7fb ff57 	bl	8006078 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d0:	2b04      	cmp	r3, #4
 800a1d2:	d112      	bne.n	800a1fa <WiFi_Conn_ND+0xc36>
					{
						Cambiar_CWMODE(b);
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f7fb ff65 	bl	80060a4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2264      	movs	r2, #100	; 0x64
 800a1de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a200:	2b0a      	cmp	r3, #10
 800a202:	d004      	beq.n	800a20e <WiFi_Conn_ND+0xc4a>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a20a:	2b0d      	cmp	r3, #13
 800a20c:	d10e      	bne.n	800a22c <WiFi_Conn_ND+0xc68>
					{
						ConectarWIFI(b);
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f7fb ff5e 	bl	80060d0 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	22c8      	movs	r2, #200	; 0xc8
 800a218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a232:	2b02      	cmp	r3, #2
 800a234:	d004      	beq.n	800a240 <WiFi_Conn_ND+0xc7c>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a23c:	2b10      	cmp	r3, #16
 800a23e:	d10f      	bne.n	800a260 <WiFi_Conn_ND+0xc9c>
					{
						ConectarTCP(b);
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f7fb ff9d 	bl	8006180 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a24c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2200      	movs	r2, #0
 800a254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX2
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_tcp_alrdy_cnntd_err)||(b->_estado==at_tcp_conectado))
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a266:	2b0e      	cmp	r3, #14
 800a268:	d005      	beq.n	800a276 <WiFi_Conn_ND+0xcb2>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a270:	2b0f      	cmp	r3, #15
 800a272:	f040 85f6 	bne.w	800ae62 <WiFi_Conn_ND+0x189e>
					{
						if(b->_automatizacion >= WF_SEND )
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	f240 85f0 	bls.w	800ae62 <WiFi_Conn_ND+0x189e>
						{
							EnviarDatos(b);
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f7fb ffbe 	bl	8006204 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a28e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector Rx
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
						}
					}
			}
			break;
 800a2a2:	f000 bdde 	b.w	800ae62 <WiFi_Conn_ND+0x189e>
			case TCP_SND_EN_CURSO:			//Enviar datos a Servidor TCP
			{
				if((b->_estado!=700)&&(b->_estado!=at_error)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ac:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a2b0:	d054      	beq.n	800a35c <WiFi_Conn_ND+0xd98>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d04f      	beq.n	800a35c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_wifi_disconnect)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2c2:	2b0a      	cmp	r3, #10
 800a2c4:	d04a      	beq.n	800a35c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_desconectado)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2cc:	2b10      	cmp	r3, #16
 800a2ce:	d045      	beq.n	800a35c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_snd_err)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d6:	2b11      	cmp	r3, #17
 800a2d8:	d040      	beq.n	800a35c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_ok_to_send)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e0:	2b14      	cmp	r3, #20
 800a2e2:	d03b      	beq.n	800a35c <WiFi_Conn_ND+0xd98>
									&&(b->_estado!=at_tcp_enviado_error))	//Si estoy conectando, no vuelvo a conectar.
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2ea:	2b12      	cmp	r3, #18
 800a2ec:	d036      	beq.n	800a35c <WiFi_Conn_ND+0xd98>
				{

					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))  // El envío por este medio es permanente
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d907      	bls.n	800a308 <WiFi_Conn_ND+0xd44>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d002      	beq.n	800a308 <WiFi_Conn_ND+0xd44>
					{	/*Ensure to have data before sending*/
							EnviarDatos(b);
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f7fb ff7e 	bl	8006204 <EnviarDatos>
							b->_data2SND[9]=0x00;
							b->_data2SND[10]=0x00;
							b->_data2SND[11]=0x0A;
							b->_n_D2SND=12;*/
					}
						if(b->_enviaruart==1)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d124      	bne.n	800a35c <WiFi_Conn_ND+0xd98>
							{
								b->_estado=AT_ESP8266_ND(b);
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f7fc f856 	bl	80063c4 <AT_ESP8266_ND>
 800a318:	4602      	mov	r2, r0
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_enviaruart=0;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d109      	bne.n	800a346 <WiFi_Conn_ND+0xd82>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a33e:	4619      	mov	r1, r3
 800a340:	4610      	mov	r0, r2
 800a342:	f7f7 f819 	bl	8001378 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a352:	b29a      	uxth	r2, r3
 800a354:	2364      	movs	r3, #100	; 0x64
 800a356:	68b8      	ldr	r0, [r7, #8]
 800a358:	f7fa fe46 	bl	8004fe8 <HAL_UART_Transmit>


							}
				}
						if((b->_estado==700)&&(b->_enviaruart==1)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a362:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800a366:	d13b      	bne.n	800a3e0 <WiFi_Conn_ND+0xe1c>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d136      	bne.n	800a3e0 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_error)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d031      	beq.n	800a3e0 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_wifi_disconnect)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a382:	2b0a      	cmp	r3, #10
 800a384:	d02c      	beq.n	800a3e0 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_desconectado)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a38c:	2b10      	cmp	r3, #16
 800a38e:	d027      	beq.n	800a3e0 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_snd_err)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a396:	2b11      	cmp	r3, #17
 800a398:	d022      	beq.n	800a3e0 <WiFi_Conn_ND+0xe1c>
											&&(b->_estado!=at_tcp_enviado_error))
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a0:	2b12      	cmp	r3, #18
 800a3a2:	d01d      	beq.n	800a3e0 <WiFi_Conn_ND+0xe1c>
							{
								b->_enviaruart=0;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
								if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d109      	bne.n	800a3ca <WiFi_Conn_ND+0xe06>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	f7f6 ffd7 	bl	8001378 <ITM0_Write>
								HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	2364      	movs	r3, #100	; 0x64
 800a3da:	68b8      	ldr	r0, [r7, #8]
 800a3dc:	f7fa fe04 	bl	8004fe8 <HAL_UART_Transmit>


							}

				//----Condiciones de cambio de estado
				if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SND_OK;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e6:	2b13      	cmp	r3, #19
 800a3e8:	d104      	bne.n	800a3f4 <WiFi_Conn_ND+0xe30>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f240 22c5 	movw	r2, #709	; 0x2c5
 800a3f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				if((b->_estado==at_error)||(b->_estado==at_wifi_disconnect)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d014      	beq.n	800a428 <WiFi_Conn_ND+0xe64>
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a404:	2b0a      	cmp	r3, #10
 800a406:	d00f      	beq.n	800a428 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_desconectado)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a40e:	2b10      	cmp	r3, #16
 800a410:	d00a      	beq.n	800a428 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_snd_err)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a418:	2b11      	cmp	r3, #17
 800a41a:	d005      	beq.n	800a428 <WiFi_Conn_ND+0xe64>
										 ||(b->_estado==at_tcp_enviado_error))
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a422:	2b12      	cmp	r3, #18
 800a424:	f040 851f 	bne.w	800ae66 <WiFi_Conn_ND+0x18a2>
					{
					b->_estado_conexion=TCP_SND_ERROR;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f240 22c1 	movw	r2, #705	; 0x2c1
 800a42e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
					}
				//----Condiciones de cambio de estado
			}
			break;
 800a432:	f000 bd18 	b.w	800ae66 <WiFi_Conn_ND+0x18a2>
			case TCP_SND_ERROR://Error al Enviar datos a Servidor TCP
			{
				NOP(b);
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f7fb fe1e 	bl	8006078 <NOP>
				if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a442:	2b04      	cmp	r3, #4
 800a444:	d112      	bne.n	800a46c <WiFi_Conn_ND+0xea8>
				{
					Cambiar_CWMODE(b);
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f7fb fe2c 	bl	80060a4 <Cambiar_CWMODE>
					b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2264      	movs	r2, #100	; 0x64
 800a450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2200      	movs	r2, #0
 800a458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

					b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
				}
				if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a472:	2b0a      	cmp	r3, #10
 800a474:	d004      	beq.n	800a480 <WiFi_Conn_ND+0xebc>
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a47c:	2b0d      	cmp	r3, #13
 800a47e:	d10e      	bne.n	800a49e <WiFi_Conn_ND+0xeda>
				{
					ConectarWIFI(b);
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f7fb fe25 	bl	80060d0 <ConectarWIFI>
					b->_estado_conexion=CONEXION_EN_CURSO;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	22c8      	movs	r2, #200	; 0xc8
 800a48a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_wifi_gotip))	//220130 Si se cayó la conexion y vuelve a conectar, que conecte TCP nuevamente
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4a4:	2b0c      	cmp	r3, #12
 800a4a6:	d10f      	bne.n	800a4c8 <WiFi_Conn_ND+0xf04>
				{
					ConectarTCP(b);
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f7fb fe69 	bl	8006180 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a4b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}

				if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	d00f      	beq.n	800a4f2 <WiFi_Conn_ND+0xf2e>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4d8:	2b10      	cmp	r3, #16
 800a4da:	d00a      	beq.n	800a4f2 <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_snd_err)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4e2:	2b11      	cmp	r3, #17
 800a4e4:	d005      	beq.n	800a4f2 <WiFi_Conn_ND+0xf2e>
										 ||(b->_estado==at_tcp_enviado_error))	//Si se cierra la conexión vuelvo a conectar
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ec:	2b12      	cmp	r3, #18
 800a4ee:	f040 84bc 	bne.w	800ae6a <WiFi_Conn_ND+0x18a6>
				{
					ConectarTCP(b);
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f7fb fe44 	bl	8006180 <ConectarTCP>
					b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a4fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
					b->_estado=0;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
					b->_n_orig=0; //Borro el vector RX
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
				}
			}
			break;
 800a512:	f000 bcaa 	b.w	800ae6a <WiFi_Conn_ND+0x18a6>
			case TCP_SND_OK://Enviar datos a Servidor TCP OK
			{
				NOP(b);
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f7fb fdae 	bl	8006078 <NOP>

					if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a522:	2b04      	cmp	r3, #4
 800a524:	d112      	bne.n	800a54c <WiFi_Conn_ND+0xf88>
					{
						Cambiar_CWMODE(b);
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f7fb fdbc 	bl	80060a4 <Cambiar_CWMODE>
						b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2264      	movs	r2, #100	; 0x64
 800a530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2200      	movs	r2, #0
 800a538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

						b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
					}
					if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a552:	2b0a      	cmp	r3, #10
 800a554:	d004      	beq.n	800a560 <WiFi_Conn_ND+0xf9c>
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a55c:	2b0d      	cmp	r3, #13
 800a55e:	d10e      	bne.n	800a57e <WiFi_Conn_ND+0xfba>
					{
						ConectarWIFI(b);
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f7fb fdb5 	bl	80060d0 <ConectarWIFI>
						b->_estado_conexion=CONEXION_EN_CURSO;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	22c8      	movs	r2, #200	; 0xc8
 800a56a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2200      	movs	r2, #0
 800a572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					if((b->_estado==at_error)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a584:	2b02      	cmp	r3, #2
 800a586:	d00e      	beq.n	800a5a6 <WiFi_Conn_ND+0xfe2>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a58e:	2b0b      	cmp	r3, #11
 800a590:	d009      	beq.n	800a5a6 <WiFi_Conn_ND+0xfe2>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a598:	2b0c      	cmp	r3, #12
 800a59a:	d004      	beq.n	800a5a6 <WiFi_Conn_ND+0xfe2>
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5a2:	2b10      	cmp	r3, #16
 800a5a4:	d10f      	bne.n	800a5c6 <WiFi_Conn_ND+0x1002>
					{
						ConectarTCP(b);
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f7fb fdea 	bl	8006180 <ConectarTCP>
						b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a5b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
						b->_estado=0;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
						b->_n_orig=0; //Borro el vector RX
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
					}
					//EVITO EL REENVÍO PERMANENTE CON CLIENTE TCO, SOLO BAJO DEMANDA

					HAL_Delay(200);
 800a5c6:	20c8      	movs	r0, #200	; 0xc8
 800a5c8:	f7f8 f85a 	bl	8002680 <HAL_Delay>
					if((b->_automatizacion >= WF_SEND)&&(b->_n_D2SND!=0))//Check data availability after send process
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d916      	bls.n	800a604 <WiFi_Conn_ND+0x1040>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d011      	beq.n	800a604 <WiFi_Conn_ND+0x1040>
					{
							EnviarDatos(b);
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f7fb fe0f 	bl	8006204 <EnviarDatos>
							b->_estado_conexion=TCP_SND_EN_CURSO;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800a5ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0; //Borro el vector RX
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							b->_estado=0;
							b->_n_orig=0;

					}
			}
			break;
 800a600:	f000 bc46 	b.w	800ae90 <WiFi_Conn_ND+0x18cc>
							b->_estado_conexion=TCP_CONN_OK;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f240 2261 	movw	r2, #609	; 0x261
 800a60a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							b->_estado=0;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	2200      	movs	r2, #0
 800a612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							b->_n_orig=0;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
			break;
 800a61e:	f000 bc37 	b.w	800ae90 <WiFi_Conn_ND+0x18cc>
			case TCP_SRVR_EN_CURSO:			//Conectar Servidor TCP local
						{
							if((b->_estado!=800)&&(b->_estado!=at_error)&&(b->_estado!=at_wifi_disconnect)&&(b->_estado!=21)&&(b->_estado!=22)&&(b->_estado!=23))	//Si estoy conectando, no vuelvo a conectar.
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a628:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800a62c:	d045      	beq.n	800a6ba <WiFi_Conn_ND+0x10f6>
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a634:	2b02      	cmp	r3, #2
 800a636:	d040      	beq.n	800a6ba <WiFi_Conn_ND+0x10f6>
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a63e:	2b0a      	cmp	r3, #10
 800a640:	d03b      	beq.n	800a6ba <WiFi_Conn_ND+0x10f6>
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a648:	2b15      	cmp	r3, #21
 800a64a:	d036      	beq.n	800a6ba <WiFi_Conn_ND+0x10f6>
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a652:	2b16      	cmp	r3, #22
 800a654:	d031      	beq.n	800a6ba <WiFi_Conn_ND+0x10f6>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a65c:	2b17      	cmp	r3, #23
 800a65e:	d02c      	beq.n	800a6ba <WiFi_Conn_ND+0x10f6>
							{
								CrearServidorTCP(b);
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f7fb fda3 	bl	80061ac <CrearServidorTCP>
									if(b->_enviaruart==1)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d124      	bne.n	800a6ba <WiFi_Conn_ND+0x10f6>
										{
											b->_estado=AT_ESP8266_ND(b);
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f7fb fea7 	bl	80063c4 <AT_ESP8266_ND>
 800a676:	4602      	mov	r2, r0
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d109      	bne.n	800a6a4 <WiFi_Conn_ND+0x10e0>
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a69c:	4619      	mov	r1, r3
 800a69e:	4610      	mov	r0, r2
 800a6a0:	f7f6 fe6a 	bl	8001378 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	2364      	movs	r3, #100	; 0x64
 800a6b4:	68b8      	ldr	r0, [r7, #8]
 800a6b6:	f7fa fc97 	bl	8004fe8 <HAL_UART_Transmit>

										}
							}

							//----Condiciones de cambio de estado
							if((b->_estado==21)||(b->_estado==23)) b->_estado_conexion=TCP_SRVR_OK;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6c0:	2b15      	cmp	r3, #21
 800a6c2:	d004      	beq.n	800a6ce <WiFi_Conn_ND+0x110a>
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ca:	2b17      	cmp	r3, #23
 800a6cc:	d104      	bne.n	800a6d8 <WiFi_Conn_ND+0x1114>
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f240 3229 	movw	r2, #809	; 0x329
 800a6d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							if((b->_estado==22)) b->_estado_conexion=TCP_SRVR_ERROR;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6de:	2b16      	cmp	r3, #22
 800a6e0:	f040 83c5 	bne.w	800ae6e <WiFi_Conn_ND+0x18aa>
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f240 3225 	movw	r2, #805	; 0x325
 800a6ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
							//----Condiciones de cambio de estado
						}
						break;
 800a6ee:	e3be      	b.n	800ae6e <WiFi_Conn_ND+0x18aa>
						case TCP_SRVR_ERROR://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f7fb fcc1 	bl	8006078 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6fc:	2b04      	cmp	r3, #4
 800a6fe:	d112      	bne.n	800a726 <WiFi_Conn_ND+0x1162>
							{
								Cambiar_CWMODE(b);
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f7fb fccf 	bl	80060a4 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2264      	movs	r2, #100	; 0x64
 800a70a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2200      	movs	r2, #0
 800a712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2200      	movs	r2, #0
 800a71a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a72c:	2b0a      	cmp	r3, #10
 800a72e:	d004      	beq.n	800a73a <WiFi_Conn_ND+0x1176>
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a736:	2b0d      	cmp	r3, #13
 800a738:	d10e      	bne.n	800a758 <WiFi_Conn_ND+0x1194>
							{
								ConectarWIFI(b);
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f7fb fcc8 	bl	80060d0 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	22c8      	movs	r2, #200	; 0xc8
 800a744:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a75e:	2b02      	cmp	r3, #2
 800a760:	d005      	beq.n	800a76e <WiFi_Conn_ND+0x11aa>
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a768:	2b10      	cmp	r3, #16
 800a76a:	f040 8382 	bne.w	800ae72 <WiFi_Conn_ND+0x18ae>
							{
								ConectarTCP(b);
 800a76e:	68f8      	ldr	r0, [r7, #12]
 800a770:	f7fb fd06 	bl	8006180 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a77a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2200      	movs	r2, #0
 800a78a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;//	//Indico servidor debe ser iniciado
							}*/

						}
						break;
 800a78e:	e370      	b.n	800ae72 <WiFi_Conn_ND+0x18ae>
						case TCP_SRVR_CLIENT_DSCNN://Error Conectar Servidor TCP local
						{
							NOP(b);
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f7fb fc71 	bl	8006078 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a79c:	2b04      	cmp	r3, #4
 800a79e:	d112      	bne.n	800a7c6 <WiFi_Conn_ND+0x1202>
							{
								Cambiar_CWMODE(b);
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f7fb fc7f 	bl	80060a4 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2264      	movs	r2, #100	; 0x64
 800a7aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7cc:	2b0a      	cmp	r3, #10
 800a7ce:	d004      	beq.n	800a7da <WiFi_Conn_ND+0x1216>
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7d6:	2b0d      	cmp	r3, #13
 800a7d8:	d10e      	bne.n	800a7f8 <WiFi_Conn_ND+0x1234>
							{
								ConectarWIFI(b);
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f7fb fc78 	bl	80060d0 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	22c8      	movs	r2, #200	; 0xc8
 800a7e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d005      	beq.n	800a80e <WiFi_Conn_ND+0x124a>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a808:	2b10      	cmp	r3, #16
 800a80a:	f040 8334 	bne.w	800ae76 <WiFi_Conn_ND+0x18b2>
							{
								ConectarTCP(b);
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f7fb fcb6 	bl	8006180 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a81a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800a82e:	e322      	b.n	800ae76 <WiFi_Conn_ND+0x18b2>
						case TCP_SRVR_CLIENT_RX://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f7fb fc21 	bl	8006078 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a83c:	2b04      	cmp	r3, #4
 800a83e:	d112      	bne.n	800a866 <WiFi_Conn_ND+0x12a2>
							{
								Cambiar_CWMODE(b);
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f7fb fc2f 	bl	80060a4 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2264      	movs	r2, #100	; 0x64
 800a84a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a86c:	2b0a      	cmp	r3, #10
 800a86e:	d004      	beq.n	800a87a <WiFi_Conn_ND+0x12b6>
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a876:	2b0d      	cmp	r3, #13
 800a878:	d10e      	bne.n	800a898 <WiFi_Conn_ND+0x12d4>
							{
								ConectarWIFI(b);
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f7fb fc28 	bl	80060d0 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	22c8      	movs	r2, #200	; 0xc8
 800a884:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2200      	movs	r2, #0
 800a894:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	d005      	beq.n	800a8ae <WiFi_Conn_ND+0x12ea>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8a8:	2b10      	cmp	r3, #16
 800a8aa:	f040 82e6 	bne.w	800ae7a <WiFi_Conn_ND+0x18b6>
							{
								ConectarTCP(b);
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f7fb fc66 	bl	8006180 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800a8ce:	e2d4      	b.n	800ae7a <WiFi_Conn_ND+0x18b6>
						case TCP_SRVR_CLIENT_CNN://Error al Conectar Servidor TCP local
						{
							NOP(b);
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f7fb fbd1 	bl	8006078 <NOP>
							if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8dc:	2b04      	cmp	r3, #4
 800a8de:	d112      	bne.n	800a906 <WiFi_Conn_ND+0x1342>
							{
								Cambiar_CWMODE(b);
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f7fb fbdf 	bl	80060a4 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2264      	movs	r2, #100	; 0x64
 800a8ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a90c:	2b0a      	cmp	r3, #10
 800a90e:	d004      	beq.n	800a91a <WiFi_Conn_ND+0x1356>
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a916:	2b0d      	cmp	r3, #13
 800a918:	d10e      	bne.n	800a938 <WiFi_Conn_ND+0x1374>
							{
								ConectarWIFI(b);
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f7fb fbd8 	bl	80060d0 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	22c8      	movs	r2, #200	; 0xc8
 800a924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2200      	movs	r2, #0
 800a934:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d005      	beq.n	800a94e <WiFi_Conn_ND+0x138a>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a948:	2b10      	cmp	r3, #16
 800a94a:	f040 8298 	bne.w	800ae7e <WiFi_Conn_ND+0x18ba>
							{
								ConectarTCP(b);
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f7fb fc16 	bl	8006180 <ConectarTCP>
								b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f44f 7216 	mov.w	r2, #600	; 0x258
 800a95a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}
						}
						break;
 800a96e:	e286      	b.n	800ae7e <WiFi_Conn_ND+0x18ba>
						case TCP_SRVR_OK://Conectar Servidor TCP local OK
						{
							NOP(b);
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f7fb fb81 	bl	8006078 <NOP>
								b->_TCP_Local_Server_Initiated=1;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2201      	movs	r2, #1
 800a97a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								if(b->_estado==at_restart)		//Reinicio involuntario de módulo
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a984:	2b04      	cmp	r3, #4
 800a986:	d112      	bne.n	800a9ae <WiFi_Conn_ND+0x13ea>
								{
									Cambiar_CWMODE(b);
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f7fb fb8b 	bl	80060a4 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2264      	movs	r2, #100	; 0x64
 800a992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2200      	movs	r2, #0
 800a99a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b4:	2b0a      	cmp	r3, #10
 800a9b6:	d004      	beq.n	800a9c2 <WiFi_Conn_ND+0x13fe>
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9be:	2b0d      	cmp	r3, #13
 800a9c0:	d10e      	bne.n	800a9e0 <WiFi_Conn_ND+0x141c>
								{
									ConectarWIFI(b);
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f7fb fb84 	bl	80060d0 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	22c8      	movs	r2, #200	; 0xc8
 800a9cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}
								if((b->_estado==at_error)||(b->_estado==at_tcp_desconectado))	//Si se cierra la conexión vuelvo a conectar
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9e6:	2b02      	cmp	r3, #2
 800a9e8:	d004      	beq.n	800a9f4 <WiFi_Conn_ND+0x1430>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9f0:	2b10      	cmp	r3, #16
 800a9f2:	d10f      	bne.n	800aa14 <WiFi_Conn_ND+0x1450>
								{
									ConectarTCP(b);
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f7fb fbc3 	bl	8006180 <ConectarTCP>
									b->_estado_conexion=TCP_CONN_EN_CURSO;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f44f 7216 	mov.w	r2, #600	; 0x258
 800aa00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
									b->_estado=0;
									b->_n_orig=0; //Borro el vector RX
								}*/

								if((b->_send_data==1)&&(b->_n_D2SND!=0)) //Check data availability after send process
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	f040 8231 	bne.w	800ae82 <WiFi_Conn_ND+0x18be>
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	f000 822b 	beq.w	800ae82 <WiFi_Conn_ND+0x18be>
								{
									EnviarDatosSRVR(b);
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f7fb fbd3 	bl	80061d8 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f44f 7261 	mov.w	r2, #900	; 0x384
 800aa38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_send_data==0;//b->_new_data_rcv=0; 220219
								}
						}
						break;
 800aa4c:	e219      	b.n	800ae82 <WiFi_Conn_ND+0x18be>

						case TCP_SRVR_TX_EN_CURSO:			//Enviar datos desde Servidor TCP
						{
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa54:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800aa58:	d063      	beq.n	800ab22 <WiFi_Conn_ND+0x155e>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d05e      	beq.n	800ab22 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_disconnect)&&
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado!=900)&&(b->_estado!=at_error)&&
 800aa6a:	2b0a      	cmp	r3, #10
 800aa6c:	d059      	beq.n	800ab22 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_connected)&&
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_disconnect)&&
 800aa74:	2b0b      	cmp	r3, #11
 800aa76:	d054      	beq.n	800ab22 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_wifi_gotip)&&
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_connected)&&
 800aa7e:	2b0c      	cmp	r3, #12
 800aa80:	d04f      	beq.n	800ab22 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_desconectado)&&
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_wifi_gotip)&&
 800aa88:	2b10      	cmp	r3, #16
 800aa8a:	d04a      	beq.n	800ab22 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_snd_err)&&
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_desconectado)&&
 800aa92:	2b11      	cmp	r3, #17
 800aa94:	d045      	beq.n	800ab22 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_error)&&
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_snd_err)&&
 800aa9c:	2b12      	cmp	r3, #18
 800aa9e:	d040      	beq.n	800ab22 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=at_tcp_enviado_ok)&&
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_error)&&
 800aaa6:	2b13      	cmp	r3, #19
 800aaa8:	d03b      	beq.n	800ab22 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado!=at_tcp_enviado_ok)&&
 800aab0:	2b16      	cmp	r3, #22
 800aab2:	d036      	beq.n	800ab22 <WiFi_Conn_ND+0x155e>
							   (b->_estado!=22)&&(b->_estado!=25)&&(b->_n_D2SND!=0))	//Check data availability after send process
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaba:	2b19      	cmp	r3, #25
 800aabc:	d031      	beq.n	800ab22 <WiFi_Conn_ND+0x155e>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d02c      	beq.n	800ab22 <WiFi_Conn_ND+0x155e>
								{
								EnviarDatosSRVR(b);
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f7fb fb85 	bl	80061d8 <EnviarDatosSRVR>
									if(b->_enviaruart==1)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d124      	bne.n	800ab22 <WiFi_Conn_ND+0x155e>
										{
											b->_estado=AT_ESP8266_ND(b);
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f7fb fc73 	bl	80063c4 <AT_ESP8266_ND>
 800aade:	4602      	mov	r2, r0
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
											b->_enviaruart=0;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d109      	bne.n	800ab0c <WiFi_Conn_ND+0x1548>
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ab04:	4619      	mov	r1, r3
 800ab06:	4610      	mov	r0, r2
 800ab08:	f7f6 fc36 	bl	8001378 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	2364      	movs	r3, #100	; 0x64
 800ab1c:	68b8      	ldr	r0, [r7, #8]
 800ab1e:	f7fa fa63 	bl	8004fe8 <HAL_UART_Transmit>


										}
							}
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab28:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 800ab2c:	d154      	bne.n	800abd8 <WiFi_Conn_ND+0x1614>
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f8d3 3aa4 	ldr.w	r3, [r3, #2724]	; 0xaa4
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d14f      	bne.n	800abd8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_error)&&
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									if((b->_estado==900)&&(b->_enviaruart==1)&&
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d04a      	beq.n	800abd8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_disconnect)&&
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_error)&&
 800ab48:	2b0a      	cmp	r3, #10
 800ab4a:	d045      	beq.n	800abd8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_connected)&&
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_disconnect)&&
 800ab52:	2b0b      	cmp	r3, #11
 800ab54:	d040      	beq.n	800abd8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_wifi_gotip)&&
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_connected)&&
 800ab5c:	2b0c      	cmp	r3, #12
 800ab5e:	d03b      	beq.n	800abd8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_desconectado)&&
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_wifi_gotip)&&
 800ab66:	2b10      	cmp	r3, #16
 800ab68:	d036      	beq.n	800abd8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_snd_err)&&
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_desconectado)&&
 800ab70:	2b11      	cmp	r3, #17
 800ab72:	d031      	beq.n	800abd8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_error)&&
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_snd_err)&&
 800ab7a:	2b12      	cmp	r3, #18
 800ab7c:	d02c      	beq.n	800abd8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=at_tcp_enviado_ok)&&
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_error)&&
 800ab84:	2b13      	cmp	r3, #19
 800ab86:	d027      	beq.n	800abd8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
									   (b->_estado!=at_tcp_enviado_ok)&&
 800ab8e:	2b16      	cmp	r3, #22
 800ab90:	d022      	beq.n	800abd8 <WiFi_Conn_ND+0x1614>
									   (b->_estado!=22)&&(b->_estado!=25))//210630 Se agrega 11 y 12 //
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab98:	2b19      	cmp	r3, #25
 800ab9a:	d01d      	beq.n	800abd8 <WiFi_Conn_ND+0x1614>
										{
											b->_enviaruart=0;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f8c3 2aa4 	str.w	r2, [r3, #2724]	; 0xaa4
											if (b->_DBG_EN==1) ITM0_Write((uint8_t*)b->_uart2snd, b->_n_uart2SND); //210915
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f8d3 3d48 	ldr.w	r3, [r3, #3400]	; 0xd48
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d109      	bne.n	800abc2 <WiFi_Conn_ND+0x15fe>
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f203 4294 	addw	r2, r3, #1172	; 0x494
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800abba:	4619      	mov	r1, r3
 800abbc:	4610      	mov	r0, r2
 800abbe:	f7f6 fbdb 	bl	8001378 <ITM0_Write>
											HAL_UART_Transmit(PORTSER,(uint8_t*)b->_uart2snd, b->_n_uart2SND,100);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f203 4194 	addw	r1, r3, #1172	; 0x494
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f8d3 3ce8 	ldr.w	r3, [r3, #3304]	; 0xce8
 800abce:	b29a      	uxth	r2, r3
 800abd0:	2364      	movs	r3, #100	; 0x64
 800abd2:	68b8      	ldr	r0, [r7, #8]
 800abd4:	f7fa fa08 	bl	8004fe8 <HAL_UART_Transmit>


										}

							//----Condiciones de cambio de estado
							if((b->_estado==at_tcp_enviado_ok)) b->_estado_conexion=TCP_SRVR_TX_OK;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abde:	2b13      	cmp	r3, #19
 800abe0:	d104      	bne.n	800abec <WiFi_Conn_ND+0x1628>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f240 328d 	movw	r2, #909	; 0x38d
 800abe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d02d      	beq.n	800ac52 <WiFi_Conn_ND+0x168e>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abfc:	2b04      	cmp	r3, #4
 800abfe:	d028      	beq.n	800ac52 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							if((b->_estado==at_error)||(b->_estado==at_restart)||
 800ac06:	2b0a      	cmp	r3, #10
 800ac08:	d023      	beq.n	800ac52 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac10:	2b0b      	cmp	r3, #11
 800ac12:	d01e      	beq.n	800ac52 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_disconnect)||(b->_estado==at_wifi_connected)||
 800ac1a:	2b0c      	cmp	r3, #12
 800ac1c:	d019      	beq.n	800ac52 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac24:	2b10      	cmp	r3, #16
 800ac26:	d014      	beq.n	800ac52 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_wifi_gotip)||(b->_estado==at_tcp_desconectado)||
 800ac2e:	2b11      	cmp	r3, #17
 800ac30:	d00f      	beq.n	800ac52 <WiFi_Conn_ND+0x168e>
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac38:	2b12      	cmp	r3, #18
 800ac3a:	d00a      	beq.n	800ac52 <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
							   (b->_estado==at_tcp_snd_err)||(b->_estado==at_tcp_enviado_error)||
 800ac42:	2b16      	cmp	r3, #22
 800ac44:	d005      	beq.n	800ac52 <WiFi_Conn_ND+0x168e>
							   (b->_estado==22)||(b->_estado==25))//210630 Se agrega ATDecode 4, 11 y 12
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4c:	2b19      	cmp	r3, #25
 800ac4e:	f040 811a 	bne.w	800ae86 <WiFi_Conn_ND+0x18c2>
								{
								b->_estado_conexion=TCP_SRVR_TX_ERROR;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	f240 3289 	movw	r2, #905	; 0x389
 800ac58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_enviaruart==0;		//Si hay error no me arriesgo a que envíe algo
								}
							//----Condiciones de cambio de estado
						}
						break;
 800ac5c:	e113      	b.n	800ae86 <WiFi_Conn_ND+0x18c2>
						case TCP_SRVR_TX_ERROR://Error al Enviar datos a Servidor TCP
						{
							NOP(b);
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f7fb fa0a 	bl	8006078 <NOP>
							if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear		//Reinicio involuntario de módulo
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac6a:	2b04      	cmp	r3, #4
 800ac6c:	d009      	beq.n	800ac82 <WiFi_Conn_ND+0x16be>
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac74:	2b0b      	cmp	r3, #11
 800ac76:	d004      	beq.n	800ac82 <WiFi_Conn_ND+0x16be>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac7e:	2b0c      	cmp	r3, #12
 800ac80:	d112      	bne.n	800aca8 <WiFi_Conn_ND+0x16e4>
							{
								Cambiar_CWMODE(b);
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f7fb fa0e 	bl	80060a4 <Cambiar_CWMODE>
								b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2264      	movs	r2, #100	; 0x64
 800ac8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

								b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
							}
							if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acae:	2b0a      	cmp	r3, #10
 800acb0:	d004      	beq.n	800acbc <WiFi_Conn_ND+0x16f8>
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acb8:	2b0d      	cmp	r3, #13
 800acba:	d10e      	bne.n	800acda <WiFi_Conn_ND+0x1716>
							{
								ConectarWIFI(b);
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f7fb fa07 	bl	80060d0 <ConectarWIFI>
								b->_estado_conexion=CONEXION_EN_CURSO;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	22c8      	movs	r2, #200	; 0xc8
 800acc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==22)		//Error con el Servidor TCP
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ace0:	2b16      	cmp	r3, #22
 800ace2:	d10c      	bne.n	800acfe <WiFi_Conn_ND+0x173a>
							{
								b->_estado_conexion=TCP_SRVR_ERROR;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f240 3225 	movw	r2, #805	; 0x325
 800acea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if(b->_estado==24)		//Se conecta nuevamente el cliente
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad04:	2b18      	cmp	r3, #24
 800ad06:	d10c      	bne.n	800ad22 <WiFi_Conn_ND+0x175e>
							{
								b->_estado_conexion=TCP_SRVR_OK;  //Listo para enviar datos
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f240 3229 	movw	r2, #809	; 0x329
 800ad0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
								b->_estado=0;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
								b->_n_orig=0; //Borro el vector RX
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
							}

							if((b->_estado==25)||(b->_estado==at_tcp_snd_err)||(b->_estado=at_tcp_enviado_error))		//Desconexion del cliente o error al enviar vuelvo al proceso de envío
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad28:	2b19      	cmp	r3, #25
 800ad2a:	d008      	beq.n	800ad3e <WiFi_Conn_ND+0x177a>
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad32:	2b11      	cmp	r3, #17
 800ad34:	d003      	beq.n	800ad3e <WiFi_Conn_ND+0x177a>
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2212      	movs	r2, #18
 800ad3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
							{
								if(b->_new_data_rcv==1) //Vuelvo a enviar solo cuando recibo nuevos datos
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	f040 80a0 	bne.w	800ae8a <WiFi_Conn_ND+0x18c6>
								{
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f44f 7261 	mov.w	r2, #900	; 0x384
 800ad50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

							}


						}
						break;
 800ad64:	e091      	b.n	800ae8a <WiFi_Conn_ND+0x18c6>
						case TCP_SRVR_TX_OK://Enviar datos a Servidor TCP OK
						{
							NOP(b);
 800ad66:	68f8      	ldr	r0, [r7, #12]
 800ad68:	f7fb f986 	bl	8006078 <NOP>

								if((b->_estado==at_restart)||(b->_estado==at_wifi_connected)||(b->_estado==at_wifi_gotip))	//210630 Si se reconecta a este nivel hay que resetear	//Reinicio involuntario de módulo
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad72:	2b04      	cmp	r3, #4
 800ad74:	d009      	beq.n	800ad8a <WiFi_Conn_ND+0x17c6>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad7c:	2b0b      	cmp	r3, #11
 800ad7e:	d004      	beq.n	800ad8a <WiFi_Conn_ND+0x17c6>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad86:	2b0c      	cmp	r3, #12
 800ad88:	d112      	bne.n	800adb0 <WiFi_Conn_ND+0x17ec>
								{
									Cambiar_CWMODE(b);
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f7fb f98a 	bl	80060a4 <Cambiar_CWMODE>
									b->_estado_conexion=CAMBIAR_MODO_EN_CURSO;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2264      	movs	r2, #100	; 0x64
 800ad94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8

									b->_TCP_Local_Server_Initiated=0;	//Indico servidor debe ser iniciado
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83

								}
								if((b->_estado==at_wifi_disconnect)||(b->_estado==at_deconectar_ok )) //Si me desconecto, me vuelvo a conectar
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adb6:	2b0a      	cmp	r3, #10
 800adb8:	d004      	beq.n	800adc4 <WiFi_Conn_ND+0x1800>
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adc0:	2b0d      	cmp	r3, #13
 800adc2:	d10e      	bne.n	800ade2 <WiFi_Conn_ND+0x181e>
								{
									ConectarWIFI(b);
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f7fb f983 	bl	80060d0 <ConectarWIFI>
									b->_estado_conexion=CONEXION_EN_CURSO;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	22c8      	movs	r2, #200	; 0xc8
 800adce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
								}

								if(((b->_new_data_rcv==1)||(b->_send_data==1))&&(b->_n_D2SND!=0)) // Only send with data
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f8d3 3cd0 	ldr.w	r3, [r3, #3280]	; 0xcd0
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d004      	beq.n	800adf6 <WiFi_Conn_ND+0x1832>
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f8d3 3a98 	ldr.w	r3, [r3, #2712]	; 0xa98
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d14b      	bne.n	800ae8e <WiFi_Conn_ND+0x18ca>
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f8d3 3ce4 	ldr.w	r3, [r3, #3300]	; 0xce4
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d046      	beq.n	800ae8e <WiFi_Conn_ND+0x18ca>
								{
									EnviarDatosSRVR(b);
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f7fb f9e9 	bl	80061d8 <EnviarDatosSRVR>
									b->_estado_conexion=TCP_SRVR_TX_EN_CURSO;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f44f 7261 	mov.w	r2, #900	; 0x384
 800ae0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
									b->_estado=0;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2200      	movs	r2, #0
 800ae14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
									b->_n_orig=0; //Borro el vector RX
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f8c3 2cd8 	str.w	r2, [r3, #3288]	; 0xcd8
									b->_new_data_rcv=0;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f8c3 2cd0 	str.w	r2, [r3, #3280]	; 0xcd0
									b->_send_data=0;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
								}

						}
						break;
 800ae30:	e02d      	b.n	800ae8e <WiFi_Conn_ND+0x18ca>
			break;
 800ae32:	bf00      	nop
 800ae34:	e02c      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
			break;
 800ae36:	bf00      	nop
 800ae38:	e02a      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
			break;
 800ae3a:	bf00      	nop
 800ae3c:	e028      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
			break;
 800ae3e:	bf00      	nop
 800ae40:	e026      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
			break;
 800ae42:	bf00      	nop
 800ae44:	e024      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
			break;
 800ae46:	bf00      	nop
 800ae48:	e022      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
			break;
 800ae4a:	bf00      	nop
 800ae4c:	e020      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
			break;
 800ae4e:	bf00      	nop
 800ae50:	e01e      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
			break;
 800ae52:	bf00      	nop
 800ae54:	e01c      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
			break;
 800ae56:	bf00      	nop
 800ae58:	e01a      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
			break;
 800ae5a:	bf00      	nop
 800ae5c:	e018      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
			break;
 800ae5e:	bf00      	nop
 800ae60:	e016      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
			break;
 800ae62:	bf00      	nop
 800ae64:	e014      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
			break;
 800ae66:	bf00      	nop
 800ae68:	e012      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
			break;
 800ae6a:	bf00      	nop
 800ae6c:	e010      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
						break;
 800ae6e:	bf00      	nop
 800ae70:	e00e      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
						break;
 800ae72:	bf00      	nop
 800ae74:	e00c      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
						break;
 800ae76:	bf00      	nop
 800ae78:	e00a      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
						break;
 800ae7a:	bf00      	nop
 800ae7c:	e008      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
						break;
 800ae7e:	bf00      	nop
 800ae80:	e006      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
						break;
 800ae82:	bf00      	nop
 800ae84:	e004      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
						break;
 800ae86:	bf00      	nop
 800ae88:	e002      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
						break;
 800ae8a:	bf00      	nop
 800ae8c:	e000      	b.n	800ae90 <WiFi_Conn_ND+0x18cc>
						break;
 800ae8e:	bf00      	nop

		}
		return(b->_estado_conexion);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop

0800aea0 <httpPOST>:




httpPOST(char * endpoint, char* server_ip, char * port,uint16_t dp_cartucho, uint16_t dp_filtro, uint16_t ciclo_ev1, uint16_t ciclo_ev2,uint16_t ciclo_ev3,uint16_t ciclo_ev4,uint16_t ciclo_ev5,uint16_t ciclo_ev6,uint16_t ciclo_ev7,uint16_t ciclo_ev8, uint16_t devId, char  * post, char * body, int max_char)
{
 800aea0:	b5b0      	push	{r4, r5, r7, lr}
 800aea2:	b09c      	sub	sp, #112	; 0x70
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
 800aeac:	807b      	strh	r3, [r7, #2]
	post[0]='\0';
 800aeae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	701a      	strb	r2, [r3, #0]
	body[0]='\0';
 800aeb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aeba:	2200      	movs	r2, #0
 800aebc:	701a      	strb	r2, [r3, #0]
	strncat(post,"POST ",strlen("POST "));
 800aebe:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800aec2:	f7f5 f997 	bl	80001f4 <strlen>
 800aec6:	4603      	mov	r3, r0
 800aec8:	461a      	mov	r2, r3
 800aeca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aece:	4413      	add	r3, r2
 800aed0:	4aeb      	ldr	r2, [pc, #940]	; (800b280 <httpPOST+0x3e0>)
 800aed2:	6810      	ldr	r0, [r2, #0]
 800aed4:	6018      	str	r0, [r3, #0]
 800aed6:	8892      	ldrh	r2, [r2, #4]
 800aed8:	809a      	strh	r2, [r3, #4]
	strncat(post,endpoint,strlen(endpoint));
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f7f5 f98a 	bl	80001f4 <strlen>
 800aee0:	4603      	mov	r3, r0
 800aee2:	461a      	mov	r2, r3
 800aee4:	68f9      	ldr	r1, [r7, #12]
 800aee6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800aeea:	f003 ff14 	bl	800ed16 <strncat>
	strncat(post,"/ HTTP/1.1",strlen("/ HTTP/1.1"));
 800aeee:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800aef2:	f7f5 f97f 	bl	80001f4 <strlen>
 800aef6:	4603      	mov	r3, r0
 800aef8:	461a      	mov	r2, r3
 800aefa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aefe:	4413      	add	r3, r2
 800af00:	49e0      	ldr	r1, [pc, #896]	; (800b284 <httpPOST+0x3e4>)
 800af02:	461a      	mov	r2, r3
 800af04:	460b      	mov	r3, r1
 800af06:	cb03      	ldmia	r3!, {r0, r1}
 800af08:	6010      	str	r0, [r2, #0]
 800af0a:	6051      	str	r1, [r2, #4]
 800af0c:	8819      	ldrh	r1, [r3, #0]
 800af0e:	789b      	ldrb	r3, [r3, #2]
 800af10:	8111      	strh	r1, [r2, #8]
 800af12:	7293      	strb	r3, [r2, #10]
	strncat(post,"\r\n",strlen("\r\n"));
 800af14:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800af18:	f7f5 f96c 	bl	80001f4 <strlen>
 800af1c:	4603      	mov	r3, r0
 800af1e:	461a      	mov	r2, r3
 800af20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af24:	4413      	add	r3, r2
 800af26:	4ad8      	ldr	r2, [pc, #864]	; (800b288 <httpPOST+0x3e8>)
 800af28:	8811      	ldrh	r1, [r2, #0]
 800af2a:	7892      	ldrb	r2, [r2, #2]
 800af2c:	8019      	strh	r1, [r3, #0]
 800af2e:	709a      	strb	r2, [r3, #2]

	strncat(post,"Host: ",strlen("Host: "));
 800af30:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800af34:	f7f5 f95e 	bl	80001f4 <strlen>
 800af38:	4603      	mov	r3, r0
 800af3a:	461a      	mov	r2, r3
 800af3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af40:	4413      	add	r3, r2
 800af42:	4ad2      	ldr	r2, [pc, #840]	; (800b28c <httpPOST+0x3ec>)
 800af44:	6810      	ldr	r0, [r2, #0]
 800af46:	6018      	str	r0, [r3, #0]
 800af48:	8891      	ldrh	r1, [r2, #4]
 800af4a:	7992      	ldrb	r2, [r2, #6]
 800af4c:	8099      	strh	r1, [r3, #4]
 800af4e:	719a      	strb	r2, [r3, #6]
	strncat(post,server_ip,strlen(server_ip));
 800af50:	68b8      	ldr	r0, [r7, #8]
 800af52:	f7f5 f94f 	bl	80001f4 <strlen>
 800af56:	4603      	mov	r3, r0
 800af58:	461a      	mov	r2, r3
 800af5a:	68b9      	ldr	r1, [r7, #8]
 800af5c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800af60:	f003 fed9 	bl	800ed16 <strncat>
	strncat(post,":",1);
 800af64:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800af68:	f7f5 f944 	bl	80001f4 <strlen>
 800af6c:	4603      	mov	r3, r0
 800af6e:	461a      	mov	r2, r3
 800af70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af74:	4413      	add	r3, r2
 800af76:	49c6      	ldr	r1, [pc, #792]	; (800b290 <httpPOST+0x3f0>)
 800af78:	461a      	mov	r2, r3
 800af7a:	460b      	mov	r3, r1
 800af7c:	881b      	ldrh	r3, [r3, #0]
 800af7e:	8013      	strh	r3, [r2, #0]
	strncat(post,port,strlen(port));
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7f5 f937 	bl	80001f4 <strlen>
 800af86:	4603      	mov	r3, r0
 800af88:	461a      	mov	r2, r3
 800af8a:	6879      	ldr	r1, [r7, #4]
 800af8c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800af90:	f003 fec1 	bl	800ed16 <strncat>



	strncat(post,"\r\n",strlen("\r\n"));
 800af94:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800af98:	f7f5 f92c 	bl	80001f4 <strlen>
 800af9c:	4603      	mov	r3, r0
 800af9e:	461a      	mov	r2, r3
 800afa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800afa4:	4413      	add	r3, r2
 800afa6:	4ab8      	ldr	r2, [pc, #736]	; (800b288 <httpPOST+0x3e8>)
 800afa8:	8811      	ldrh	r1, [r2, #0]
 800afaa:	7892      	ldrb	r2, [r2, #2]
 800afac:	8019      	strh	r1, [r3, #0]
 800afae:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Type: application/JSON",strlen("Content-Type: application/JSON"));
 800afb0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800afb4:	f7f5 f91e 	bl	80001f4 <strlen>
 800afb8:	4603      	mov	r3, r0
 800afba:	461a      	mov	r2, r3
 800afbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800afc0:	4413      	add	r3, r2
 800afc2:	4ab4      	ldr	r2, [pc, #720]	; (800b294 <httpPOST+0x3f4>)
 800afc4:	461d      	mov	r5, r3
 800afc6:	4614      	mov	r4, r2
 800afc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afca:	6028      	str	r0, [r5, #0]
 800afcc:	6069      	str	r1, [r5, #4]
 800afce:	60aa      	str	r2, [r5, #8]
 800afd0:	60eb      	str	r3, [r5, #12]
 800afd2:	cc07      	ldmia	r4!, {r0, r1, r2}
 800afd4:	6128      	str	r0, [r5, #16]
 800afd6:	6169      	str	r1, [r5, #20]
 800afd8:	61aa      	str	r2, [r5, #24]
 800afda:	8823      	ldrh	r3, [r4, #0]
 800afdc:	78a2      	ldrb	r2, [r4, #2]
 800afde:	83ab      	strh	r3, [r5, #28]
 800afe0:	4613      	mov	r3, r2
 800afe2:	77ab      	strb	r3, [r5, #30]
	strncat(post,"\r\n",strlen("\r\n"));
 800afe4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800afe8:	f7f5 f904 	bl	80001f4 <strlen>
 800afec:	4603      	mov	r3, r0
 800afee:	461a      	mov	r2, r3
 800aff0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aff4:	4413      	add	r3, r2
 800aff6:	4aa4      	ldr	r2, [pc, #656]	; (800b288 <httpPOST+0x3e8>)
 800aff8:	8811      	ldrh	r1, [r2, #0]
 800affa:	7892      	ldrb	r2, [r2, #2]
 800affc:	8019      	strh	r1, [r3, #0]
 800affe:	709a      	strb	r2, [r3, #2]
	strncat(post,"Content-Length:",strlen("Content-Length:"));
 800b000:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b004:	f7f5 f8f6 	bl	80001f4 <strlen>
 800b008:	4603      	mov	r3, r0
 800b00a:	461a      	mov	r2, r3
 800b00c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b010:	4413      	add	r3, r2
 800b012:	4aa1      	ldr	r2, [pc, #644]	; (800b298 <httpPOST+0x3f8>)
 800b014:	461c      	mov	r4, r3
 800b016:	4615      	mov	r5, r2
 800b018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b01a:	6020      	str	r0, [r4, #0]
 800b01c:	6061      	str	r1, [r4, #4]
 800b01e:	60a2      	str	r2, [r4, #8]
 800b020:	60e3      	str	r3, [r4, #12]


	// Conversión de datos recibido por ModBUS
	char _cartucho[8];
	_cartucho[0]='\0';
 800b022:	2300      	movs	r3, #0
 800b024:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	FTOA( dp_cartucho,_cartucho,2);
 800b028:	887b      	ldrh	r3, [r7, #2]
 800b02a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800b02e:	2202      	movs	r2, #2
 800b030:	4618      	mov	r0, r3
 800b032:	f003 fc31 	bl	800e898 <FTOA>
	char _filtro[8];
	_filtro[0]='\0';
 800b036:	2300      	movs	r3, #0
 800b038:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	FTOA( dp_filtro, _filtro,2);//INTOA( dp_filtro, _filtro);//
 800b03c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800b040:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800b044:	2202      	movs	r2, #2
 800b046:	4618      	mov	r0, r3
 800b048:	f003 fc26 	bl	800e898 <FTOA>
	char _ev1[8];
	_ev1[0]='\0';
 800b04c:	2300      	movs	r3, #0
 800b04e:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	FTOA( ciclo_ev1, _ev1,2);
 800b052:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b056:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b05a:	2202      	movs	r2, #2
 800b05c:	4618      	mov	r0, r3
 800b05e:	f003 fc1b 	bl	800e898 <FTOA>
	char _ev2[8];
	_ev2[0]='\0';
 800b062:	2300      	movs	r3, #0
 800b064:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	FTOA( ciclo_ev2, _ev2,2);
 800b068:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800b06c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800b070:	2202      	movs	r2, #2
 800b072:	4618      	mov	r0, r3
 800b074:	f003 fc10 	bl	800e898 <FTOA>
	char _ev3[8];
	_ev3[0]='\0';
 800b078:	2300      	movs	r3, #0
 800b07a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	FTOA( ciclo_ev3, _ev3,2);
 800b07e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800b082:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800b086:	2202      	movs	r2, #2
 800b088:	4618      	mov	r0, r3
 800b08a:	f003 fc05 	bl	800e898 <FTOA>
	char _ev4[8];
	_ev4[0]='\0';
 800b08e:	2300      	movs	r3, #0
 800b090:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	INTOA( ciclo_ev4, _ev4);
 800b094:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800b098:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800b09c:	4611      	mov	r1, r2
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f003 fbc6 	bl	800e830 <INTOA>
	char _ev5[8];
	_ev5[0]='\0';
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	FTOA( ciclo_ev5, _ev5,2);
 800b0aa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b0ae:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800b0b2:	2202      	movs	r2, #2
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f003 fbef 	bl	800e898 <FTOA>
	char _ev6[8];
	_ev6[0]='\0';
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	FTOA( ciclo_ev6, _ev6,2);
 800b0c0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800b0c4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800b0c8:	2202      	movs	r2, #2
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f003 fbe4 	bl	800e898 <FTOA>
	char _ev7[8];
	_ev7[0]='\0';
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FTOA( ciclo_ev7, _ev7,2);
 800b0d6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b0da:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b0de:	2202      	movs	r2, #2
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f003 fbd9 	bl	800e898 <FTOA>
	char _ev8[8];
	_ev8[0]='\0';
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	f887 3020 	strb.w	r3, [r7, #32]
	FTOA( ciclo_ev8, _ev8,2);
 800b0ec:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800b0f0:	f107 0120 	add.w	r1, r7, #32
 800b0f4:	2202      	movs	r2, #2
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f003 fbce 	bl	800e898 <FTOA>
	char _devId[8];
	_devId[0]='\0';
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	763b      	strb	r3, [r7, #24]
	INTOA(devId, _devId);
 800b100:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800b104:	f107 0218 	add.w	r2, r7, #24
 800b108:	4611      	mov	r1, r2
 800b10a:	4618      	mov	r0, r3
 800b10c:	f003 fb90 	bl	800e830 <INTOA>

	strncat(body,cartucho,strlen(cartucho));
 800b110:	4862      	ldr	r0, [pc, #392]	; (800b29c <httpPOST+0x3fc>)
 800b112:	f7f5 f86f 	bl	80001f4 <strlen>
 800b116:	4603      	mov	r3, r0
 800b118:	461a      	mov	r2, r3
 800b11a:	4960      	ldr	r1, [pc, #384]	; (800b29c <httpPOST+0x3fc>)
 800b11c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b120:	f003 fdf9 	bl	800ed16 <strncat>
	strncat(body,_cartucho,strlen(_cartucho));
 800b124:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b128:	4618      	mov	r0, r3
 800b12a:	f7f5 f863 	bl	80001f4 <strlen>
 800b12e:	4602      	mov	r2, r0
 800b130:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b134:	4619      	mov	r1, r3
 800b136:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b13a:	f003 fdec 	bl	800ed16 <strncat>
	strncat(body,filtro,strlen(filtro));
 800b13e:	4858      	ldr	r0, [pc, #352]	; (800b2a0 <httpPOST+0x400>)
 800b140:	f7f5 f858 	bl	80001f4 <strlen>
 800b144:	4603      	mov	r3, r0
 800b146:	461a      	mov	r2, r3
 800b148:	4955      	ldr	r1, [pc, #340]	; (800b2a0 <httpPOST+0x400>)
 800b14a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b14e:	f003 fde2 	bl	800ed16 <strncat>
	strncat(body,_filtro,strlen(_filtro));
 800b152:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b156:	4618      	mov	r0, r3
 800b158:	f7f5 f84c 	bl	80001f4 <strlen>
 800b15c:	4602      	mov	r2, r0
 800b15e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800b162:	4619      	mov	r1, r3
 800b164:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b168:	f003 fdd5 	bl	800ed16 <strncat>
	strncat(body,ev1,strlen(ev1));
 800b16c:	484d      	ldr	r0, [pc, #308]	; (800b2a4 <httpPOST+0x404>)
 800b16e:	f7f5 f841 	bl	80001f4 <strlen>
 800b172:	4603      	mov	r3, r0
 800b174:	461a      	mov	r2, r3
 800b176:	494b      	ldr	r1, [pc, #300]	; (800b2a4 <httpPOST+0x404>)
 800b178:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b17c:	f003 fdcb 	bl	800ed16 <strncat>
	strncat(body,_ev1,strlen(_ev1));
 800b180:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b184:	4618      	mov	r0, r3
 800b186:	f7f5 f835 	bl	80001f4 <strlen>
 800b18a:	4602      	mov	r2, r0
 800b18c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b190:	4619      	mov	r1, r3
 800b192:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b196:	f003 fdbe 	bl	800ed16 <strncat>
	strncat(body,ev2,strlen(ev2));
 800b19a:	4843      	ldr	r0, [pc, #268]	; (800b2a8 <httpPOST+0x408>)
 800b19c:	f7f5 f82a 	bl	80001f4 <strlen>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	4940      	ldr	r1, [pc, #256]	; (800b2a8 <httpPOST+0x408>)
 800b1a6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b1aa:	f003 fdb4 	bl	800ed16 <strncat>
	strncat(body,_ev2,strlen(_ev2));
 800b1ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7f5 f81e 	bl	80001f4 <strlen>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b1be:	4619      	mov	r1, r3
 800b1c0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b1c4:	f003 fda7 	bl	800ed16 <strncat>
	strncat(body,ev3,strlen(ev3));
 800b1c8:	4838      	ldr	r0, [pc, #224]	; (800b2ac <httpPOST+0x40c>)
 800b1ca:	f7f5 f813 	bl	80001f4 <strlen>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	4936      	ldr	r1, [pc, #216]	; (800b2ac <httpPOST+0x40c>)
 800b1d4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b1d8:	f003 fd9d 	bl	800ed16 <strncat>
	strncat(body,_ev3,strlen(_ev3));
 800b1dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7f5 f807 	bl	80001f4 <strlen>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b1f2:	f003 fd90 	bl	800ed16 <strncat>
	strncat(body,ev4,strlen(ev4));
 800b1f6:	482e      	ldr	r0, [pc, #184]	; (800b2b0 <httpPOST+0x410>)
 800b1f8:	f7f4 fffc 	bl	80001f4 <strlen>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	461a      	mov	r2, r3
 800b200:	492b      	ldr	r1, [pc, #172]	; (800b2b0 <httpPOST+0x410>)
 800b202:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b206:	f003 fd86 	bl	800ed16 <strncat>
	strncat(body,_ev4,strlen(_ev4));
 800b20a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b20e:	4618      	mov	r0, r3
 800b210:	f7f4 fff0 	bl	80001f4 <strlen>
 800b214:	4602      	mov	r2, r0
 800b216:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b21a:	4619      	mov	r1, r3
 800b21c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b220:	f003 fd79 	bl	800ed16 <strncat>
	strncat(body,ev5,strlen(ev5));
 800b224:	4823      	ldr	r0, [pc, #140]	; (800b2b4 <httpPOST+0x414>)
 800b226:	f7f4 ffe5 	bl	80001f4 <strlen>
 800b22a:	4603      	mov	r3, r0
 800b22c:	461a      	mov	r2, r3
 800b22e:	4921      	ldr	r1, [pc, #132]	; (800b2b4 <httpPOST+0x414>)
 800b230:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b234:	f003 fd6f 	bl	800ed16 <strncat>
	strncat(body,_ev5,strlen(_ev5));
 800b238:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7f4 ffd9 	bl	80001f4 <strlen>
 800b242:	4602      	mov	r2, r0
 800b244:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b248:	4619      	mov	r1, r3
 800b24a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b24e:	f003 fd62 	bl	800ed16 <strncat>
	strncat(body,ev6,strlen(ev6));
 800b252:	4819      	ldr	r0, [pc, #100]	; (800b2b8 <httpPOST+0x418>)
 800b254:	f7f4 ffce 	bl	80001f4 <strlen>
 800b258:	4603      	mov	r3, r0
 800b25a:	461a      	mov	r2, r3
 800b25c:	4916      	ldr	r1, [pc, #88]	; (800b2b8 <httpPOST+0x418>)
 800b25e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b262:	f003 fd58 	bl	800ed16 <strncat>
	strncat(body,_ev6,strlen(_ev6));
 800b266:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b26a:	4618      	mov	r0, r3
 800b26c:	f7f4 ffc2 	bl	80001f4 <strlen>
 800b270:	4602      	mov	r2, r0
 800b272:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b276:	4619      	mov	r1, r3
 800b278:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b27c:	e01e      	b.n	800b2bc <httpPOST+0x41c>
 800b27e:	bf00      	nop
 800b280:	080103a8 	.word	0x080103a8
 800b284:	080103b0 	.word	0x080103b0
 800b288:	080103bc 	.word	0x080103bc
 800b28c:	080103c0 	.word	0x080103c0
 800b290:	080103c8 	.word	0x080103c8
 800b294:	080103cc 	.word	0x080103cc
 800b298:	080103ec 	.word	0x080103ec
 800b29c:	20000090 	.word	0x20000090
 800b2a0:	200000a0 	.word	0x200000a0
 800b2a4:	200000b0 	.word	0x200000b0
 800b2a8:	200000c0 	.word	0x200000c0
 800b2ac:	200000d0 	.word	0x200000d0
 800b2b0:	200000e0 	.word	0x200000e0
 800b2b4:	200000f0 	.word	0x200000f0
 800b2b8:	20000100 	.word	0x20000100
 800b2bc:	f003 fd2b 	bl	800ed16 <strncat>
	strncat(body,ev7,strlen(ev7));
 800b2c0:	484a      	ldr	r0, [pc, #296]	; (800b3ec <httpPOST+0x54c>)
 800b2c2:	f7f4 ff97 	bl	80001f4 <strlen>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	4948      	ldr	r1, [pc, #288]	; (800b3ec <httpPOST+0x54c>)
 800b2cc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b2d0:	f003 fd21 	bl	800ed16 <strncat>
	strncat(body,_ev7,strlen(_ev7));
 800b2d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7f4 ff8b 	bl	80001f4 <strlen>
 800b2de:	4602      	mov	r2, r0
 800b2e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b2ea:	f003 fd14 	bl	800ed16 <strncat>
	strncat(body,ev8,strlen(ev8));
 800b2ee:	4840      	ldr	r0, [pc, #256]	; (800b3f0 <httpPOST+0x550>)
 800b2f0:	f7f4 ff80 	bl	80001f4 <strlen>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	493d      	ldr	r1, [pc, #244]	; (800b3f0 <httpPOST+0x550>)
 800b2fa:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b2fe:	f003 fd0a 	bl	800ed16 <strncat>
	strncat(body,_ev8,strlen(_ev8));
 800b302:	f107 0320 	add.w	r3, r7, #32
 800b306:	4618      	mov	r0, r3
 800b308:	f7f4 ff74 	bl	80001f4 <strlen>
 800b30c:	4602      	mov	r2, r0
 800b30e:	f107 0320 	add.w	r3, r7, #32
 800b312:	4619      	mov	r1, r3
 800b314:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b318:	f003 fcfd 	bl	800ed16 <strncat>
	strncat(body,deviceId,strlen(deviceId));
 800b31c:	4835      	ldr	r0, [pc, #212]	; (800b3f4 <httpPOST+0x554>)
 800b31e:	f7f4 ff69 	bl	80001f4 <strlen>
 800b322:	4603      	mov	r3, r0
 800b324:	461a      	mov	r2, r3
 800b326:	4933      	ldr	r1, [pc, #204]	; (800b3f4 <httpPOST+0x554>)
 800b328:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b32c:	f003 fcf3 	bl	800ed16 <strncat>
	strncat(body,_devId,strlen(_devId));
 800b330:	f107 0318 	add.w	r3, r7, #24
 800b334:	4618      	mov	r0, r3
 800b336:	f7f4 ff5d 	bl	80001f4 <strlen>
 800b33a:	4602      	mov	r2, r0
 800b33c:	f107 0318 	add.w	r3, r7, #24
 800b340:	4619      	mov	r1, r3
 800b342:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b346:	f003 fce6 	bl	800ed16 <strncat>

	strncat(body,"}",strlen("}"));
 800b34a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b34e:	f7f4 ff51 	bl	80001f4 <strlen>
 800b352:	4603      	mov	r3, r0
 800b354:	461a      	mov	r2, r3
 800b356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b35a:	4413      	add	r3, r2
 800b35c:	4926      	ldr	r1, [pc, #152]	; (800b3f8 <httpPOST+0x558>)
 800b35e:	461a      	mov	r2, r3
 800b360:	460b      	mov	r3, r1
 800b362:	881b      	ldrh	r3, [r3, #0]
 800b364:	8013      	strh	r3, [r2, #0]

	char length[5];
	INTOA(strlen(body), length);
 800b366:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b36a:	f7f4 ff43 	bl	80001f4 <strlen>
 800b36e:	4602      	mov	r2, r0
 800b370:	f107 0310 	add.w	r3, r7, #16
 800b374:	4619      	mov	r1, r3
 800b376:	4610      	mov	r0, r2
 800b378:	f003 fa5a 	bl	800e830 <INTOA>
	strncat(post,length,strlen(length));
 800b37c:	f107 0310 	add.w	r3, r7, #16
 800b380:	4618      	mov	r0, r3
 800b382:	f7f4 ff37 	bl	80001f4 <strlen>
 800b386:	4602      	mov	r2, r0
 800b388:	f107 0310 	add.w	r3, r7, #16
 800b38c:	4619      	mov	r1, r3
 800b38e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b392:	f003 fcc0 	bl	800ed16 <strncat>
	strncat(post,"\r\n\r\n",strlen("\r\n\r\n"));
 800b396:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b39a:	f7f4 ff2b 	bl	80001f4 <strlen>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3a6:	4413      	add	r3, r2
 800b3a8:	4a14      	ldr	r2, [pc, #80]	; (800b3fc <httpPOST+0x55c>)
 800b3aa:	6810      	ldr	r0, [r2, #0]
 800b3ac:	6018      	str	r0, [r3, #0]
 800b3ae:	7912      	ldrb	r2, [r2, #4]
 800b3b0:	711a      	strb	r2, [r3, #4]
	if(strlen(body) < max_char)
 800b3b2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b3b6:	f7f4 ff1d 	bl	80001f4 <strlen>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d20d      	bcs.n	800b3e0 <httpPOST+0x540>
	{
		strncat(post,body,strlen(body));
 800b3c4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800b3c8:	f7f4 ff14 	bl	80001f4 <strlen>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800b3d4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 800b3d8:	f003 fc9d 	bl	800ed16 <strncat>
		return 1 ;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e000      	b.n	800b3e2 <httpPOST+0x542>
	}
		else
		{
			return 0;
 800b3e0:	2300      	movs	r3, #0
		}
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3770      	adds	r7, #112	; 0x70
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bdb0      	pop	{r4, r5, r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	20000110 	.word	0x20000110
 800b3f0:	20000120 	.word	0x20000120
 800b3f4:	20000130 	.word	0x20000130
 800b3f8:	080103fc 	.word	0x080103fc
 800b3fc:	08010400 	.word	0x08010400

0800b400 <ModBUS_Config>:
 *      Author: Marcelo
 */
#include "ModBUS_Chelo.h"

void ModBUS_Config(struct MBUS *m)
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
	m->_address=1;							//Canal  o direccion ModBUS
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	701a      	strb	r2, [r3, #0]

	m->_mode=0;								//Defino modo de trabajo, cliente o servidor.
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	705a      	strb	r2, [r3, #1]
	m->_timeout=5000;						//Timeout para la recepción de respuesta.
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f241 3288 	movw	r2, #5000	; 0x1388
 800b41a:	805a      	strh	r2, [r3, #2]

	m->_01_ReadCoils_EN=1;					//Habilito Funcion 1
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	715a      	strb	r2, [r3, #5]
	m->_01_ReadCoils_QTY=32;				//Defino cantidad de Coils disponibles en la funcion 1
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2220      	movs	r2, #32
 800b426:	f883 251c 	strb.w	r2, [r3, #1308]	; 0x51c
	m->_Coils=0xF0F0AF5A;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4a1c      	ldr	r2, [pc, #112]	; (800b4a0 <ModBUS_Config+0xa0>)
 800b42e:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

	m->_02_ReadDiscreteInputs_EN=1;			//Habilito la funcion 2
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2201      	movs	r2, #1
 800b436:	719a      	strb	r2, [r3, #6]
	m->_02_ReadDiscreteInputs_QTY=32;		//Defino cantidad de Discrete Inputs disponibles en la funcion 2
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2220      	movs	r2, #32
 800b43c:	f883 2522 	strb.w	r2, [r3, #1314]	; 0x522
	m->_Inputs=0xA5FA0F0F;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a18      	ldr	r2, [pc, #96]	; (800b4a4 <ModBUS_Config+0xa4>)
 800b444:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c

	m->_03_ReadHoldingRegisters_EN=1;		//Habilito la funcion 3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	71da      	strb	r2, [r3, #7]
	m->_03_ReadHoldingRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2210      	movs	r2, #16
 800b452:	f883 2528 	strb.w	r2, [r3, #1320]	; 0x528

	m->_04_ReadInputRegisters_EN=1;			//Habilito la funcion 4
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	721a      	strb	r2, [r3, #8]
	m->_04_ReadInputRegisters_QTY=16;		//Defino cantidad de registros disponibles en la funcion 4
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2210      	movs	r2, #16
 800b460:	f883 252e 	strb.w	r2, [r3, #1326]	; 0x52e

	m->_05_WriteSingleCoil_EN=1;			//Habilito la funcion 5
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	725a      	strb	r2, [r3, #9]
	m->_05_WriteSingleCoil_QTY=32;			//Defino cantidad de registros disponibles en la funcion 5
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2220      	movs	r2, #32
 800b46e:	f883 2534 	strb.w	r2, [r3, #1332]	; 0x534

	m->_06_WriteSingleRegister_EN=1;		//Habilito la funcion 06
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2201      	movs	r2, #1
 800b476:	729a      	strb	r2, [r3, #10]

	m->_15_WriteMultipleCoils_EN=1;			//Habilito la funcion 15
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	72da      	strb	r2, [r3, #11]
	m->_15_WriteMultipleCoils_QTY=32;		//Defino cantidad de registros disponibles en la funcion 5
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2220      	movs	r2, #32
 800b482:	f883 253a 	strb.w	r2, [r3, #1338]	; 0x53a

	m->_16_WriteMultipleRegisters_EN=1;		//Habilito la funcion 16
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2201      	movs	r2, #1
 800b48a:	731a      	strb	r2, [r3, #12]
	m->_16_WriteMultipleRegisters_QTY=32;	//Defino cantidad de registros disponibles en la funcion 5
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2220      	movs	r2, #32
 800b490:	f883 2546 	strb.w	r2, [r3, #1350]	; 0x546
}
 800b494:	bf00      	nop
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr
 800b4a0:	f0f0af5a 	.word	0xf0f0af5a
 800b4a4:	a5fa0f0f 	.word	0xa5fa0f0f

0800b4a8 <ModBUS_Check>:

int ModBUS_Check(char *a, int b)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
	//Identifico protocolo ModBus con a[2]+a[3]==0 y coherencia en los datos con a[5]+6==b
	if((a[5]+6==b)&&(a[2]+a[3]==0))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	3305      	adds	r3, #5
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	3306      	adds	r3, #6
 800b4ba:	683a      	ldr	r2, [r7, #0]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d10b      	bne.n	800b4d8 <ModBUS_Check+0x30>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	3302      	adds	r3, #2
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	3303      	adds	r3, #3
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <ModBUS_Check+0x30>
	{
		return(1);
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e000      	b.n	800b4da <ModBUS_Check+0x32>
	}
	else
	{
		return(0);
 800b4d8:	2300      	movs	r3, #0
	}
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	370c      	adds	r7, #12
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr

0800b4e6 <ModBUS_Check_tid>:

int ModBUS_Check_tid(struct MBUS *m2)
{
 800b4e6:	b480      	push	{r7}
 800b4e8:	b083      	sub	sp, #12
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]

	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f893 2194 	ldrb.w	r2, [r3, #404]	; 0x194
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	7b5b      	ldrb	r3, [r3, #13]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d11d      	bne.n	800b538 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f893 2195 	ldrb.w	r2, [r3, #405]	; 0x195
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	7b9b      	ldrb	r3, [r3, #14]
	if( (m2->_MBUS_2SND[0] == m2->_MBUS_RCVD[0])&&
 800b506:	429a      	cmp	r2, r3
 800b508:	d116      	bne.n	800b538 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	7bdb      	ldrb	r3, [r3, #15]
		(m2->_MBUS_2SND[1] == m2->_MBUS_RCVD[1])&&
 800b514:	429a      	cmp	r2, r3
 800b516:	d10f      	bne.n	800b538 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f893 2197 	ldrb.w	r2, [r3, #407]	; 0x197
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	7c1b      	ldrb	r3, [r3, #16]
		(m2->_MBUS_2SND[2] == m2->_MBUS_RCVD[2])&&
 800b522:	429a      	cmp	r2, r3
 800b524:	d108      	bne.n	800b538 <ModBUS_Check_tid+0x52>
		(m2->_MBUS_2SND[7] == m2->_MBUS_RCVD[7]))
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f893 219b 	ldrb.w	r2, [r3, #411]	; 0x19b
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	7d1b      	ldrb	r3, [r3, #20]
		(m2->_MBUS_2SND[3] == m2->_MBUS_RCVD[3])&&
 800b530:	429a      	cmp	r2, r3
 800b532:	d101      	bne.n	800b538 <ModBUS_Check_tid+0x52>
	{
		return(1);
 800b534:	2301      	movs	r3, #1
 800b536:	e000      	b.n	800b53a <ModBUS_Check_tid+0x54>
	}
	else
	{

		return(0);
 800b538:	2300      	movs	r3, #0
	}
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	370c      	adds	r7, #12
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr

0800b546 <ModBUS_F03_Assign>:

int ModBUS_F03_Assign(struct MBUS *m2, uint8_t a, uint16_t b)
{
 800b546:	b480      	push	{r7}
 800b548:	b085      	sub	sp, #20
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
 800b54e:	460b      	mov	r3, r1
 800b550:	70fb      	strb	r3, [r7, #3]
 800b552:	4613      	mov	r3, r2
 800b554:	803b      	strh	r3, [r7, #0]
	uint8_t c=0;
 800b556:	2300      	movs	r3, #0
 800b558:	73fb      	strb	r3, [r7, #15]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800b560:	78fa      	ldrb	r2, [r7, #3]
 800b562:	429a      	cmp	r2, r3
 800b564:	d901      	bls.n	800b56a <ModBUS_F03_Assign+0x24>
	{
		return(1);
 800b566:	2301      	movs	r3, #1
 800b568:	e015      	b.n	800b596 <ModBUS_F03_Assign+0x50>
	}
	else
	{
		m2->_Holding_Registers[(a*2)+1]=b;
 800b56a:	78fb      	ldrb	r3, [r7, #3]
 800b56c:	005b      	lsls	r3, r3, #1
 800b56e:	3301      	adds	r3, #1
 800b570:	883a      	ldrh	r2, [r7, #0]
 800b572:	b2d1      	uxtb	r1, r2
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	4413      	add	r3, r2
 800b578:	460a      	mov	r2, r1
 800b57a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
		c=b>>8;
 800b57e:	883b      	ldrh	r3, [r7, #0]
 800b580:	0a1b      	lsrs	r3, r3, #8
 800b582:	b29b      	uxth	r3, r3
 800b584:	73fb      	strb	r3, [r7, #15]
		m2->_Holding_Registers[(a*2)]=c;
 800b586:	78fb      	ldrb	r3, [r7, #3]
 800b588:	005b      	lsls	r3, r3, #1
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	4413      	add	r3, r2
 800b58e:	7bfa      	ldrb	r2, [r7, #15]
 800b590:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

		return(0);
 800b594:	2300      	movs	r3, #0
	}
}
 800b596:	4618      	mov	r0, r3
 800b598:	3714      	adds	r7, #20
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr

0800b5a2 <ModBUS_F03_Read>:
		return(0);
	}
}

uint16_t ModBUS_F03_Read(struct MBUS *m2, uint8_t a)
{
 800b5a2:	b480      	push	{r7}
 800b5a4:	b085      	sub	sp, #20
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	70fb      	strb	r3, [r7, #3]
	uint16_t n=0;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	81fb      	strh	r3, [r7, #14]
	uint8_t c=0;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	737b      	strb	r3, [r7, #13]
	//	Analizo que el rango de direcciones sea el correcto
	if( (a) > m2->_03_ReadHoldingRegisters_QTY)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800b5bc:	78fa      	ldrb	r2, [r7, #3]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d901      	bls.n	800b5c6 <ModBUS_F03_Read+0x24>
	{
		return(1);
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e015      	b.n	800b5f2 <ModBUS_F03_Read+0x50>
	}
	else
	{
		n=m2->_Holding_Registers[(a*2)];
 800b5c6:	78fb      	ldrb	r3, [r7, #3]
 800b5c8:	005b      	lsls	r3, r3, #1
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b5d2:	81fb      	strh	r3, [r7, #14]
		n=n<<8;
 800b5d4:	89fb      	ldrh	r3, [r7, #14]
 800b5d6:	021b      	lsls	r3, r3, #8
 800b5d8:	81fb      	strh	r3, [r7, #14]
		n|=m2->_Holding_Registers[(a*2)+1];
 800b5da:	78fb      	ldrb	r3, [r7, #3]
 800b5dc:	005b      	lsls	r3, r3, #1
 800b5de:	3301      	adds	r3, #1
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	4413      	add	r3, r2
 800b5e4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	89fb      	ldrh	r3, [r7, #14]
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	81fb      	strh	r3, [r7, #14]

		/*m2->_Holding_Registers[(a*2)+1]=b;
		c=b>>8;
		m2->_Holding_Registers[(a*2)]=c;*/
		return(n);
 800b5f0:	89fb      	ldrh	r3, [r7, #14]
	}
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3714      	adds	r7, #20
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <ModBUS_F03_Request>:
		return(n);
	}
}

ModBUS_F03_Request(struct MBUS *m2, uint16_t addr , uint8_t qty)
{
 800b5fe:	b480      	push	{r7}
 800b600:	b083      	sub	sp, #12
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	460b      	mov	r3, r1
 800b608:	807b      	strh	r3, [r7, #2]
 800b60a:	4613      	mov	r3, r2
 800b60c:	707b      	strb	r3, [r7, #1]
	// Se deberia asignar variable inremental para el transaction id
	m2->_MBUS_2SND[9]= addr && 0x0F;
 800b60e:	887b      	ldrh	r3, [r7, #2]
 800b610:	2b00      	cmp	r3, #0
 800b612:	bf14      	ite	ne
 800b614:	2301      	movne	r3, #1
 800b616:	2300      	moveq	r3, #0
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	461a      	mov	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
	addr&=0xF0;
 800b622:	887b      	ldrh	r3, [r7, #2]
 800b624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b628:	807b      	strh	r3, [r7, #2]
	addr=addr>>8;
 800b62a:	887b      	ldrh	r3, [r7, #2]
 800b62c:	0a1b      	lsrs	r3, r3, #8
 800b62e:	807b      	strh	r3, [r7, #2]
	addr&=0x0F;
 800b630:	887b      	ldrh	r3, [r7, #2]
 800b632:	f003 030f 	and.w	r3, r3, #15
 800b636:	807b      	strh	r3, [r7, #2]

	m2->_MBUS_2SND[0]=0x00;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	m2->_MBUS_2SND[1]=0x00;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	m2->_MBUS_2SND[2]=0x00;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
	m2->_MBUS_2SND[3]=0x00;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
	m2->_MBUS_2SND[4]=0x00;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	m2->_MBUS_2SND[5]=0x06;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2206      	movs	r2, #6
 800b664:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
	m2->_MBUS_2SND[6]=m2->_address;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	781a      	ldrb	r2, [r3, #0]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
	m2->_MBUS_2SND[7]=0x03;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2203      	movs	r2, #3
 800b676:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
	m2->_MBUS_2SND[8]=addr;
 800b67a:	887b      	ldrh	r3, [r7, #2]
 800b67c:	b2da      	uxtb	r2, r3
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

	m2->_MBUS_2SND[10]=0x00;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
	m2->_MBUS_2SND[11]=qty;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	787a      	ldrb	r2, [r7, #1]
 800b690:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
	m2->_n_MBUS_2SND=12;			//Conteo de bytes a transmitir
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	220c      	movs	r2, #12
 800b698:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

}
 800b69c:	bf00      	nop
 800b69e:	4618      	mov	r0, r3
 800b6a0:	370c      	adds	r7, #12
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
	...

0800b6ac <ModBUS>:

int ModBUS(struct MBUS *m3)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b09c      	sub	sp, #112	; 0x70
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]

	if(m3->_mode == SERVIDOR)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	785b      	ldrb	r3, [r3, #1]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	f041 813f 	bne.w	800c93c <ModBUS+0x1290>
	{
		if (ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))//if (m3->_n_MBUS_RCVD>=10)  //Garantizo longitud minima de telegram MBUS
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f103 020d 	add.w	r2, r3, #13
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	4610      	mov	r0, r2
 800b6ce:	f7ff feeb 	bl	800b4a8 <ModBUS_Check>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f001 812f 	beq.w	800c938 <ModBUS+0x128c>
		{
			switch(m3->_MBUS_RCVD[7])
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	7d1b      	ldrb	r3, [r3, #20]
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	2b0f      	cmp	r3, #15
 800b6e2:	f201 80f3 	bhi.w	800c8cc <ModBUS+0x1220>
 800b6e6:	a201      	add	r2, pc, #4	; (adr r2, 800b6ec <ModBUS+0x40>)
 800b6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ec:	0800b72d 	.word	0x0800b72d
 800b6f0:	0800b96d 	.word	0x0800b96d
 800b6f4:	0800bbad 	.word	0x0800bbad
 800b6f8:	0800bde5 	.word	0x0800bde5
 800b6fc:	0800c01d 	.word	0x0800c01d
 800b700:	0800c233 	.word	0x0800c233
 800b704:	0800c8cd 	.word	0x0800c8cd
 800b708:	0800c8cd 	.word	0x0800c8cd
 800b70c:	0800c8cd 	.word	0x0800c8cd
 800b710:	0800c8cd 	.word	0x0800c8cd
 800b714:	0800c8cd 	.word	0x0800c8cd
 800b718:	0800c8cd 	.word	0x0800c8cd
 800b71c:	0800c8cd 	.word	0x0800c8cd
 800b720:	0800c8cd 	.word	0x0800c8cd
 800b724:	0800c3ef 	.word	0x0800c3ef
 800b728:	0800c67f 	.word	0x0800c67f

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	7c5a      	ldrb	r2, [r3, #17]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	7c1a      	ldrb	r2, [r3, #16]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	7bda      	ldrb	r2, [r3, #15]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	7b9a      	ldrb	r2, [r3, #14]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	7b5a      	ldrb	r2, [r3, #13]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800b75e:	2300      	movs	r3, #0
 800b760:	617b      	str	r3, [r7, #20]
					if  ( m3->_01_ReadCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	795b      	ldrb	r3, [r3, #5]
 800b766:	2b01      	cmp	r3, #1
 800b768:	f040 80e6 	bne.w	800b938 <ModBUS+0x28c>
					{


							m3->_01_ReadCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	7d5b      	ldrb	r3, [r3, #21]
 800b770:	b29a      	uxth	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr = m3->_01_ReadCoils_StrtAddr<<8;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800b77e:	021b      	lsls	r3, r3, #8
 800b780:	b29a      	uxth	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr &= 0xFF00;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800b78e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b792:	b29a      	uxth	r2, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e
							m3->_01_ReadCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8b3 251e 	ldrh.w	r2, [r3, #1310]	; 0x51e
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	7d9b      	ldrb	r3, [r3, #22]
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	b29a      	uxth	r2, r3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8a3 251e 	strh.w	r2, [r3, #1310]	; 0x51e

							m3->_01_ReadCoils_QTYReg = m3->_MBUS_RCVD[10];
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	7ddb      	ldrb	r3, [r3, #23]
 800b7b4:	b29a      	uxth	r2, r3
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg = m3->_01_ReadCoils_QTYReg<<8;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800b7c2:	021b      	lsls	r3, r3, #8
 800b7c4:	b29a      	uxth	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg &= 0xFF00;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800b7d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b7d6:	b29a      	uxth	r2, r3
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520
							m3->_01_ReadCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	7e1b      	ldrb	r3, [r3, #24]
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8a3 2520 	strh.w	r2, [r3, #1312]	; 0x520



							if ( m3->_01_ReadCoils_QTYReg <=  m3->_01_ReadCoils_QTY) //Cdad pedida menor a igual que disponible
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8b3 2520 	ldrh.w	r2, [r3, #1312]	; 0x520
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f893 351c 	ldrb.w	r3, [r3, #1308]	; 0x51c
 800b800:	b29b      	uxth	r3, r3
 800b802:	429a      	cmp	r2, r3
 800b804:	d87e      	bhi.n	800b904 <ModBUS+0x258>
							{
								if ( (m3->_01_ReadCoils_StrtAddr + m3->_01_ReadCoils_QTYReg) <=  m3->_01_ReadCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8b3 351e 	ldrh.w	r3, [r3, #1310]	; 0x51e
 800b80c:	461a      	mov	r2, r3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800b814:	4413      	add	r3, r2
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	f892 251c 	ldrb.w	r2, [r2, #1308]	; 0x51c
 800b81c:	4293      	cmp	r3, r2
 800b81e:	dc57      	bgt.n	800b8d0 <ModBUS+0x224>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800b820:	2300      	movs	r3, #0
 800b822:	613b      	str	r3, [r7, #16]
 800b824:	2300      	movs	r3, #0
 800b826:	60fb      	str	r3, [r7, #12]
 800b828:	2300      	movs	r3, #0
 800b82a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b82c:	2300      	movs	r3, #0
 800b82e:	60bb      	str	r3, [r7, #8]
								uint32_t coils=0;
 800b830:	2300      	movs	r3, #0
 800b832:	66bb      	str	r3, [r7, #104]	; 0x68
									// Verificado el mensaje, se procesa.

									coils = (m3->_Coils >> m3->_01_ReadCoils_StrtAddr);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	f8b2 251e 	ldrh.w	r2, [r2, #1310]	; 0x51e
 800b840:	40d3      	lsrs	r3, r2
 800b842:	66bb      	str	r3, [r7, #104]	; 0x68
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_01_ReadCoils_QTYReg/8;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800b84a:	08db      	lsrs	r3, r3, #3
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	613b      	str	r3, [r7, #16]
									resto=m3->_01_ReadCoils_QTYReg%8;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8b3 3520 	ldrh.w	r3, [r3, #1312]	; 0x520
 800b856:	f003 0307 	and.w	r3, r3, #7
 800b85a:	60fb      	str	r3, [r7, #12]

									if(resto==0)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d102      	bne.n	800b868 <ModBUS+0x1bc>
									{
										bytes=div;
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b866:	e002      	b.n	800b86e <ModBUS+0x1c2>
									}
									else
									{
										bytes=div+1;
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	3301      	adds	r3, #1
 800b86c:	66fb      	str	r3, [r7, #108]	; 0x6c
									}

									m3->_MBUS_2SND[8]=bytes;
 800b86e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b870:	b2da      	uxtb	r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800b878:	e00e      	b.n	800b898 <ModBUS+0x1ec>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800b87a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b87c:	3308      	adds	r3, #8
 800b87e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b880:	b2d1      	uxtb	r1, r2
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	4413      	add	r3, r2
 800b886:	460a      	mov	r2, r1
 800b888:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800b88c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b88e:	0a1b      	lsrs	r3, r3, #8
 800b890:	66bb      	str	r3, [r7, #104]	; 0x68
										bytes--;
 800b892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b894:	3b01      	subs	r3, #1
 800b896:	66fb      	str	r3, [r7, #108]	; 0x6c
									while(bytes > 0)
 800b898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	dced      	bgt.n	800b87a <ModBUS+0x1ce>
									}


									m3->_MBUS_2SND[7]=0x01;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800b8b4:	3303      	adds	r3, #3
 800b8b6:	b2da      	uxtb	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800b8c4:	1d9a      	adds	r2, r3, #6
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800b8cc:	f001 b8d4 	b.w	800ca78 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2202      	movs	r2, #2
 800b8d4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x81;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2281      	movs	r2, #129	; 0x81
 800b8dc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2203      	movs	r2, #3
 800b8ec:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800b8f6:	1d9a      	adds	r2, r3, #6
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800b8fe:	2302      	movs	r3, #2
 800b900:	f001 b8ba 	b.w	800ca78 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2203      	movs	r2, #3
 800b908:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x81;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2281      	movs	r2, #129	; 0x81
 800b910:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2201      	movs	r2, #1
 800b918:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2203      	movs	r2, #3
 800b920:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800b92a:	1d9a      	adds	r2, r3, #6
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800b932:	2303      	movs	r3, #3
 800b934:	f001 b8a0 	b.w	800ca78 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x81;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2281      	movs	r2, #129	; 0x81
 800b944:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2203      	movs	r2, #3
 800b954:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800b95e:	1d9a      	adds	r2, r3, #6
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800b966:	2301      	movs	r3, #1
 800b968:	f001 b886 	b.w	800ca78 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	7c5a      	ldrb	r2, [r3, #17]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	7c1a      	ldrb	r2, [r3, #16]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	7bda      	ldrb	r2, [r3, #15]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	7b9a      	ldrb	r2, [r3, #14]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	7b5a      	ldrb	r2, [r3, #13]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	627b      	str	r3, [r7, #36]	; 0x24
					if  ( m3->_02_ReadDiscreteInputs_EN == 1 ) //Debe estar habilitado el código de funcion
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	799b      	ldrb	r3, [r3, #6]
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	f040 80e6 	bne.w	800bb78 <ModBUS+0x4cc>
					{


							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_MBUS_RCVD[8];
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	7d5b      	ldrb	r3, [r3, #21]
 800b9b0:	b29a      	uxth	r2, r3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr = m3->_02_ReadDiscreteInputs_StrtAddr<<8;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800b9be:	021b      	lsls	r3, r3, #8
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr &= 0xFF00;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800b9ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b9d2:	b29a      	uxth	r2, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524
							m3->_02_ReadDiscreteInputs_StrtAddr |= m3->_MBUS_RCVD[9];
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8b3 2524 	ldrh.w	r2, [r3, #1316]	; 0x524
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	7d9b      	ldrb	r3, [r3, #22]
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8a3 2524 	strh.w	r2, [r3, #1316]	; 0x524

							m3->_02_ReadDiscreteInputs_QTYReg = m3->_MBUS_RCVD[10];
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	7ddb      	ldrb	r3, [r3, #23]
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg = m3->_02_ReadDiscreteInputs_QTYReg<<8;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ba02:	021b      	lsls	r3, r3, #8
 800ba04:	b29a      	uxth	r2, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg &= 0xFF00;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ba12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ba16:	b29a      	uxth	r2, r3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526
							m3->_02_ReadDiscreteInputs_QTYReg |= m3->_MBUS_RCVD[11];
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	7e1b      	ldrb	r3, [r3, #24]
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	b29a      	uxth	r2, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8a3 2526 	strh.w	r2, [r3, #1318]	; 0x526



							if ( m3->_02_ReadDiscreteInputs_QTYReg <=  m3->_02_ReadDiscreteInputs_QTY) //Cdad pedida menor a igual que disponible
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8b3 2526 	ldrh.w	r2, [r3, #1318]	; 0x526
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 3522 	ldrb.w	r3, [r3, #1314]	; 0x522
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d87e      	bhi.n	800bb44 <ModBUS+0x498>
							{
								if ( (m3->_02_ReadDiscreteInputs_StrtAddr + m3->_02_ReadDiscreteInputs_QTYReg) <=  m3->_02_ReadDiscreteInputs_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8b3 3524 	ldrh.w	r3, [r3, #1316]	; 0x524
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ba54:	4413      	add	r3, r2
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	f892 2522 	ldrb.w	r2, [r2, #1314]	; 0x522
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	dc57      	bgt.n	800bb10 <ModBUS+0x464>
								{
								int div=0, resto=0, bytes=0,pos=0;
 800ba60:	2300      	movs	r3, #0
 800ba62:	623b      	str	r3, [r7, #32]
 800ba64:	2300      	movs	r3, #0
 800ba66:	61fb      	str	r3, [r7, #28]
 800ba68:	2300      	movs	r3, #0
 800ba6a:	667b      	str	r3, [r7, #100]	; 0x64
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	61bb      	str	r3, [r7, #24]
								uint32_t coils=0;
 800ba70:	2300      	movs	r3, #0
 800ba72:	663b      	str	r3, [r7, #96]	; 0x60
									// Verificado el mensaje, se procesa.

									coils = (m3->_Inputs >> m3->_02_ReadDiscreteInputs_StrtAddr);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	f8b2 2524 	ldrh.w	r2, [r2, #1316]	; 0x524
 800ba80:	40d3      	lsrs	r3, r2
 800ba82:	663b      	str	r3, [r7, #96]	; 0x60
									//Debo determinar la cantidad de bytes a enviar

									div=m3->_02_ReadDiscreteInputs_QTYReg/8;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ba8a:	08db      	lsrs	r3, r3, #3
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	623b      	str	r3, [r7, #32]
									resto=m3->_02_ReadDiscreteInputs_QTYReg%8;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8b3 3526 	ldrh.w	r3, [r3, #1318]	; 0x526
 800ba96:	f003 0307 	and.w	r3, r3, #7
 800ba9a:	61fb      	str	r3, [r7, #28]

									if(resto==0)
 800ba9c:	69fb      	ldr	r3, [r7, #28]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d102      	bne.n	800baa8 <ModBUS+0x3fc>
									{
										bytes=div;
 800baa2:	6a3b      	ldr	r3, [r7, #32]
 800baa4:	667b      	str	r3, [r7, #100]	; 0x64
 800baa6:	e002      	b.n	800baae <ModBUS+0x402>
									}
									else
									{
										bytes=div+1;
 800baa8:	6a3b      	ldr	r3, [r7, #32]
 800baaa:	3301      	adds	r3, #1
 800baac:	667b      	str	r3, [r7, #100]	; 0x64
									}

									m3->_MBUS_2SND[8]=bytes;
 800baae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bab0:	b2da      	uxtb	r2, r3
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c


									while(bytes > 0)
 800bab8:	e00e      	b.n	800bad8 <ModBUS+0x42c>
									{
										m3->_MBUS_2SND[8+bytes]=coils;
 800baba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800babc:	3308      	adds	r3, #8
 800babe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bac0:	b2d1      	uxtb	r1, r2
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	4413      	add	r3, r2
 800bac6:	460a      	mov	r2, r1
 800bac8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
										coils=coils>>8;
 800bacc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bace:	0a1b      	lsrs	r3, r3, #8
 800bad0:	663b      	str	r3, [r7, #96]	; 0x60
										bytes--;
 800bad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bad4:	3b01      	subs	r3, #1
 800bad6:	667b      	str	r3, [r7, #100]	; 0x64
									while(bytes > 0)
 800bad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bada:	2b00      	cmp	r3, #0
 800badc:	dced      	bgt.n	800baba <ModBUS+0x40e>
									}


									m3->_MBUS_2SND[7]=0x02;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2202      	movs	r2, #2
 800bae2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2201      	movs	r2, #1
 800baea:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800baf4:	3303      	adds	r3, #3
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bb04:	1d9a      	adds	r2, r3, #6
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bb0c:	f000 bfb4 	b.w	800ca78 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2202      	movs	r2, #2
 800bb14:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x82;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2282      	movs	r2, #130	; 0x82
 800bb1c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2201      	movs	r2, #1
 800bb24:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2203      	movs	r2, #3
 800bb2c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bb36:	1d9a      	adds	r2, r3, #6
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800bb3e:	2302      	movs	r3, #2
 800bb40:	f000 bf9a 	b.w	800ca78 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2203      	movs	r2, #3
 800bb48:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x82;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2282      	movs	r2, #130	; 0x82
 800bb50:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2203      	movs	r2, #3
 800bb60:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bb6a:	1d9a      	adds	r2, r3, #6
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800bb72:	2303      	movs	r3, #3
 800bb74:	f000 bf80 	b.w	800ca78 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x82;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2282      	movs	r2, #130	; 0x82
 800bb84:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2203      	movs	r2, #3
 800bb94:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bb9e:	1d9a      	adds	r2, r3, #6
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800bba6:	2301      	movs	r3, #1
 800bba8:	f000 bf66 	b.w	800ca78 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	7c5a      	ldrb	r2, [r3, #17]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	7c1a      	ldrb	r2, [r3, #16]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	7bda      	ldrb	r2, [r3, #15]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	7b9a      	ldrb	r2, [r3, #14]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	7b5a      	ldrb	r2, [r3, #13]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	65fb      	str	r3, [r7, #92]	; 0x5c
					if  ( m3->_03_ReadHoldingRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	79db      	ldrb	r3, [r3, #7]
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	f040 80e2 	bne.w	800bdb0 <ModBUS+0x704>
					{


							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	7d5b      	ldrb	r3, [r3, #21]
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr = m3->_03_ReadHoldingRegisters_StrtAddr<<8;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800bbfe:	021b      	lsls	r3, r3, #8
 800bc00:	b29a      	uxth	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr &= 0xFF00;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800bc0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a
							m3->_03_ReadHoldingRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8b3 252a 	ldrh.w	r2, [r3, #1322]	; 0x52a
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	7d9b      	ldrb	r3, [r3, #22]
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	4313      	orrs	r3, r2
 800bc28:	b29a      	uxth	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8a3 252a 	strh.w	r2, [r3, #1322]	; 0x52a

							m3->_03_ReadHoldingRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	7ddb      	ldrb	r3, [r3, #23]
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg = m3->_03_ReadHoldingRegisters_QTYReg<<8;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800bc42:	021b      	lsls	r3, r3, #8
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg &= 0xFF00;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800bc52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c
							m3->_03_ReadHoldingRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	7e1b      	ldrb	r3, [r3, #24]
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f8a3 252c 	strh.w	r2, [r3, #1324]	; 0x52c



							if ( m3->_03_ReadHoldingRegisters_QTYReg <=  m3->_03_ReadHoldingRegisters_QTY) //Cdad pedida menor a igual que disponible
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8b3 252c 	ldrh.w	r2, [r3, #1324]	; 0x52c
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f893 3528 	ldrb.w	r3, [r3, #1320]	; 0x528
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d87a      	bhi.n	800bd7c <ModBUS+0x6d0>
							{
								if ( (m3->_03_ReadHoldingRegisters_StrtAddr + m3->_03_ReadHoldingRegisters_QTYReg) <=  m3->_03_ReadHoldingRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800bc94:	4413      	add	r3, r2
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	f892 2528 	ldrb.w	r2, [r2, #1320]	; 0x528
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	dc53      	bgt.n	800bd48 <ModBUS+0x69c>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800bca0:	e029      	b.n	800bcf6 <ModBUS+0x64a>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg];
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800bca8:	461a      	mov	r2, r3
 800bcaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcac:	4413      	add	r3, r2
 800bcae:	005a      	lsls	r2, r3, #1
 800bcb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcb2:	005b      	lsls	r3, r3, #1
 800bcb4:	3309      	adds	r3, #9
 800bcb6:	6879      	ldr	r1, [r7, #4]
 800bcb8:	440a      	add	r2, r1
 800bcba:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	460a      	mov	r2, r1
 800bcc4:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_Holding_Registers[m3->_03_ReadHoldingRegisters_StrtAddr*2 + 2*qty_reg+1];
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8b3 352a 	ldrh.w	r3, [r3, #1322]	; 0x52a
 800bcce:	461a      	mov	r2, r3
 800bcd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcd2:	4413      	add	r3, r2
 800bcd4:	005b      	lsls	r3, r3, #1
 800bcd6:	1c5a      	adds	r2, r3, #1
 800bcd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcda:	3305      	adds	r3, #5
 800bcdc:	005b      	lsls	r3, r3, #1
 800bcde:	6879      	ldr	r1, [r7, #4]
 800bce0:	440a      	add	r2, r1
 800bce2:	f892 1320 	ldrb.w	r1, [r2, #800]	; 0x320
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	4413      	add	r3, r2
 800bcea:	460a      	mov	r2, r1
 800bcec:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800bcf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	65fb      	str	r3, [r7, #92]	; 0x5c
									while(qty_reg < m3->_03_ReadHoldingRegisters_QTYReg)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd00:	4293      	cmp	r3, r2
 800bd02:	dbce      	blt.n	800bca2 <ModBUS+0x5f6>

									}

									m3->_MBUS_2SND[8]=m3->_03_ReadHoldingRegisters_QTYReg*2;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8b3 352c 	ldrh.w	r3, [r3, #1324]	; 0x52c
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	005b      	lsls	r3, r3, #1
 800bd0e:	b2da      	uxtb	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x03;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2203      	movs	r2, #3
 800bd1a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2201      	movs	r2, #1
 800bd22:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800bd2c:	3303      	adds	r3, #3
 800bd2e:	b2da      	uxtb	r2, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bd3c:	1d9a      	adds	r2, r3, #6
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bd44:	f000 be98 	b.w	800ca78 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2202      	movs	r2, #2
 800bd4c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x83;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2283      	movs	r2, #131	; 0x83
 800bd54:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2203      	movs	r2, #3
 800bd64:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bd6e:	1d9a      	adds	r2, r3, #6
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800bd76:	2302      	movs	r3, #2
 800bd78:	f000 be7e 	b.w	800ca78 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2203      	movs	r2, #3
 800bd80:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x83;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2283      	movs	r2, #131	; 0x83
 800bd88:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2203      	movs	r2, #3
 800bd98:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bda2:	1d9a      	adds	r2, r3, #6
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800bdaa:	2303      	movs	r3, #3
 800bdac:	f000 be64 	b.w	800ca78 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x83;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2283      	movs	r2, #131	; 0x83
 800bdbc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2203      	movs	r2, #3
 800bdcc:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bdd6:	1d9a      	adds	r2, r3, #6
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800bdde:	2301      	movs	r3, #1
 800bde0:	f000 be4a 	b.w	800ca78 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	7c5a      	ldrb	r2, [r3, #17]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	7c1a      	ldrb	r2, [r3, #16]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	7bda      	ldrb	r2, [r3, #15]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	7b9a      	ldrb	r2, [r3, #14]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	7b5a      	ldrb	r2, [r3, #13]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800be16:	2300      	movs	r3, #0
 800be18:	65bb      	str	r3, [r7, #88]	; 0x58
					if  ( m3->_04_ReadInputRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	7a1b      	ldrb	r3, [r3, #8]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	f040 80e2 	bne.w	800bfe8 <ModBUS+0x93c>
					{


							m3->_04_ReadInputRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	7d5b      	ldrb	r3, [r3, #21]
 800be28:	b29a      	uxth	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr = m3->_04_ReadInputRegisters_StrtAddr<<8;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800be36:	021b      	lsls	r3, r3, #8
 800be38:	b29a      	uxth	r2, r3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr &= 0xFF00;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800be46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530
							m3->_04_ReadInputRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8b3 2530 	ldrh.w	r2, [r3, #1328]	; 0x530
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	7d9b      	ldrb	r3, [r3, #22]
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	4313      	orrs	r3, r2
 800be60:	b29a      	uxth	r2, r3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8a3 2530 	strh.w	r2, [r3, #1328]	; 0x530

							m3->_04_ReadInputRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	7ddb      	ldrb	r3, [r3, #23]
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg = m3->_04_ReadInputRegisters_QTYReg<<8;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800be7a:	021b      	lsls	r3, r3, #8
 800be7c:	b29a      	uxth	r2, r3
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg &= 0xFF00;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800be8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800be8e:	b29a      	uxth	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532
							m3->_04_ReadInputRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	7e1b      	ldrb	r3, [r3, #24]
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	4313      	orrs	r3, r2
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8a3 2532 	strh.w	r2, [r3, #1330]	; 0x532



							if ( m3->_04_ReadInputRegisters_QTYReg <=  m3->_04_ReadInputRegisters_QTY) //Cdad pedida menor a igual que disponible
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8b3 2532 	ldrh.w	r2, [r3, #1330]	; 0x532
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 352e 	ldrb.w	r3, [r3, #1326]	; 0x52e
 800beb8:	b29b      	uxth	r3, r3
 800beba:	429a      	cmp	r2, r3
 800bebc:	d87a      	bhi.n	800bfb4 <ModBUS+0x908>
							{
								if ( (m3->_04_ReadInputRegisters_StrtAddr + m3->_04_ReadInputRegisters_QTYReg) <=  m3->_04_ReadInputRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800bec4:	461a      	mov	r2, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800becc:	4413      	add	r3, r2
 800bece:	687a      	ldr	r2, [r7, #4]
 800bed0:	f892 252e 	ldrb.w	r2, [r2, #1326]	; 0x52e
 800bed4:	4293      	cmp	r3, r2
 800bed6:	dc53      	bgt.n	800bf80 <ModBUS+0x8d4>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800bed8:	e029      	b.n	800bf2e <ModBUS+0x882>
									{

									 m3->_MBUS_2SND[2*qty_reg + 9]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg];
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800bee0:	461a      	mov	r2, r3
 800bee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bee4:	4413      	add	r3, r2
 800bee6:	005a      	lsls	r2, r3, #1
 800bee8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800beea:	005b      	lsls	r3, r3, #1
 800beec:	3309      	adds	r3, #9
 800beee:	6879      	ldr	r1, [r7, #4]
 800bef0:	440a      	add	r2, r1
 800bef2:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	4413      	add	r3, r2
 800befa:	460a      	mov	r2, r1
 800befc:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
									 m3->_MBUS_2SND[2*qty_reg + 10]=m3->_InputRegisters[m3->_04_ReadInputRegisters_StrtAddr*2 + 2*qty_reg+1];
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8b3 3530 	ldrh.w	r3, [r3, #1328]	; 0x530
 800bf06:	461a      	mov	r2, r3
 800bf08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf0a:	4413      	add	r3, r2
 800bf0c:	005b      	lsls	r3, r3, #1
 800bf0e:	1c5a      	adds	r2, r3, #1
 800bf10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf12:	3305      	adds	r3, #5
 800bf14:	005b      	lsls	r3, r3, #1
 800bf16:	6879      	ldr	r1, [r7, #4]
 800bf18:	440a      	add	r2, r1
 800bf1a:	f892 141e 	ldrb.w	r1, [r2, #1054]	; 0x41e
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	4413      	add	r3, r2
 800bf22:	460a      	mov	r2, r1
 800bf24:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

										qty_reg++; //Incremento la cantidad de registros
 800bf28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	65bb      	str	r3, [r7, #88]	; 0x58
									while(qty_reg < m3->_04_ReadInputRegisters_QTYReg)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800bf34:	461a      	mov	r2, r3
 800bf36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	dbce      	blt.n	800beda <ModBUS+0x82e>

									}

									m3->_MBUS_2SND[8]=m3->_04_ReadInputRegisters_QTYReg*2;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8b3 3532 	ldrh.w	r3, [r3, #1330]	; 0x532
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	005b      	lsls	r3, r3, #1
 800bf46:	b2da      	uxtb	r2, r3
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x04;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2204      	movs	r2, #4
 800bf52:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2201      	movs	r2, #1
 800bf5a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+3; //Cdad de datos
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800bf64:	3303      	adds	r3, #3
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bf74:	1d9a      	adds	r2, r3, #6
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800bf7c:	f000 bd7c 	b.w	800ca78 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2202      	movs	r2, #2
 800bf84:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x84;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2284      	movs	r2, #132	; 0x84
 800bf8c:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2203      	movs	r2, #3
 800bf9c:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bfa6:	1d9a      	adds	r2, r3, #6
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800bfae:	2302      	movs	r3, #2
 800bfb0:	f000 bd62 	b.w	800ca78 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2203      	movs	r2, #3
 800bfb8:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x84;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2284      	movs	r2, #132	; 0x84
 800bfc0:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2203      	movs	r2, #3
 800bfd0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800bfda:	1d9a      	adds	r2, r3, #6
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800bfe2:	2303      	movs	r3, #3
 800bfe4:	f000 bd48 	b.w	800ca78 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2201      	movs	r2, #1
 800bfec:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x84;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2284      	movs	r2, #132	; 0x84
 800bff4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2203      	movs	r2, #3
 800c004:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c00e:	1d9a      	adds	r2, r3, #6
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c016:	2301      	movs	r3, #1
 800c018:	f000 bd2e 	b.w	800ca78 <ModBUS+0x13cc>

								//-----------------------------------------------------//
								//		Para todos los casos se devuelve el mismo	   //
								//		encabezado de respuesta						   //
								//-----------------------------------------------------//
								m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	7c5a      	ldrb	r2, [r3, #17]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
								m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	7c1a      	ldrb	r2, [r3, #16]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
								m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	7bda      	ldrb	r2, [r3, #15]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
								m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	7b9a      	ldrb	r2, [r3, #14]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
								m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	7b5a      	ldrb	r2, [r3, #13]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

								int qty_reg=0;
 800c04e:	2300      	movs	r3, #0
 800c050:	62bb      	str	r3, [r7, #40]	; 0x28
								if  ( m3->_05_WriteSingleCoil_EN == 1 ) //Debe estar habilitado el código de funcion
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	7a5b      	ldrb	r3, [r3, #9]
 800c056:	2b01      	cmp	r3, #1
 800c058:	f040 80d1 	bne.w	800c1fe <ModBUS+0xb52>
								{


										m3->_05_WriteSingleCoil_StrtAddr = m3->_MBUS_RCVD[8];
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	7d5b      	ldrb	r3, [r3, #21]
 800c060:	b29a      	uxth	r2, r3
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr = m3->_05_WriteSingleCoil_StrtAddr<<8;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800c06e:	021b      	lsls	r3, r3, #8
 800c070:	b29a      	uxth	r2, r3
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr &= 0xFF00;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800c07e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c082:	b29a      	uxth	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536
										m3->_05_WriteSingleCoil_StrtAddr |= m3->_MBUS_RCVD[9];
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8b3 2536 	ldrh.w	r2, [r3, #1334]	; 0x536
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	7d9b      	ldrb	r3, [r3, #22]
 800c094:	b29b      	uxth	r3, r3
 800c096:	4313      	orrs	r3, r2
 800c098:	b29a      	uxth	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8a3 2536 	strh.w	r2, [r3, #1334]	; 0x536

										m3->_05_WriteSingleCoil_State = m3->_MBUS_RCVD[10];
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	7ddb      	ldrb	r3, [r3, #23]
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State = m3->_05_WriteSingleCoil_State<<8;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c0b2:	021b      	lsls	r3, r3, #8
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State &= 0xFF00;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c0c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538
										m3->_05_WriteSingleCoil_State |= m3->_MBUS_RCVD[11];
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8b3 2538 	ldrh.w	r2, [r3, #1336]	; 0x538
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	7e1b      	ldrb	r3, [r3, #24]
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	b29a      	uxth	r2, r3
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f8a3 2538 	strh.w	r2, [r3, #1336]	; 0x538



										if ( m3->_05_WriteSingleCoil_StrtAddr <=  (m3->_05_WriteSingleCoil_QTY-1)) //Cdad pedida menor a igual que disponible
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f893 3534 	ldrb.w	r3, [r3, #1332]	; 0x534
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8b3 3536 	ldrh.w	r3, [r3, #1334]	; 0x536
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	dd69      	ble.n	800c1ca <ModBUS+0xb1e>
										{
											if ( (m3->_05_WriteSingleCoil_State == 0x0000)||(m3->_05_WriteSingleCoil_State == 0xFF00)) //Dirección inicial + cantidad menor a igual que disponible
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d005      	beq.n	800c10c <ModBUS+0xa60>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c106:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c10a:	d144      	bne.n	800c196 <ModBUS+0xaea>
											{
											// Verificado el mensaje, se procesa.

												if  (m3->_05_WriteSingleCoil_State == 0xFF00)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8b3 3538 	ldrh.w	r3, [r3, #1336]	; 0x538
 800c112:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 800c116:	d10d      	bne.n	800c134 <ModBUS+0xa88>
												{
													m3->_Coils |= 1 << m3->_05_WriteSingleCoil_StrtAddr;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	f8b2 2536 	ldrh.w	r2, [r2, #1334]	; 0x536
 800c124:	4611      	mov	r1, r2
 800c126:	2201      	movs	r2, #1
 800c128:	408a      	lsls	r2, r1
 800c12a:	431a      	orrs	r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800c132:	e003      	b.n	800c13c <ModBUS+0xa90>
												}
												else
												{
													m3->_Coils &= 0 << m3->_05_WriteSingleCoil_StrtAddr;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
												}

												m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	7e1a      	ldrb	r2, [r3, #24]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
												m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	7dda      	ldrb	r2, [r3, #23]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
												m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	7d9a      	ldrb	r2, [r3, #22]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
												m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	7d5a      	ldrb	r2, [r3, #21]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x05;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2205      	movs	r2, #5
 800c168:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2201      	movs	r2, #1
 800c170:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c17a:	3306      	adds	r3, #6
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c18a:	1d9a      	adds	r2, r3, #6
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
									return(1);//Error excepcion 01
								}
							}
				break;
 800c192:	f000 bc71 	b.w	800ca78 <ModBUS+0x13cc>
												m3->_MBUS_2SND[8]=0x02;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2202      	movs	r2, #2
 800c19a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
												m3->_MBUS_2SND[7]=0x85;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2285      	movs	r2, #133	; 0x85
 800c1a2:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
												m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
												m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2203      	movs	r2, #3
 800c1b2:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
												m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c1bc:	1d9a      	adds	r2, r3, #6
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
												return(2);//Error excepcion 02
 800c1c4:	2302      	movs	r3, #2
 800c1c6:	f000 bc57 	b.w	800ca78 <ModBUS+0x13cc>
											m3->_MBUS_2SND[8]=0x03;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2203      	movs	r2, #3
 800c1ce:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
											m3->_MBUS_2SND[7]=0x85;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2285      	movs	r2, #133	; 0x85
 800c1d6:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
											m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2201      	movs	r2, #1
 800c1de:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
											m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2203      	movs	r2, #3
 800c1e6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
											m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c1f0:	1d9a      	adds	r2, r3, #6
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
											return(3);//Erroe excepcion 03
 800c1f8:	2303      	movs	r3, #3
 800c1fa:	f000 bc3d 	b.w	800ca78 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x01;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2201      	movs	r2, #1
 800c202:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x85;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2285      	movs	r2, #133	; 0x85
 800c20a:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2201      	movs	r2, #1
 800c212:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2203      	movs	r2, #3
 800c21a:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c224:	1d9a      	adds	r2, r3, #6
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(1);//Error excepcion 01
 800c22c:	2301      	movs	r3, #1
 800c22e:	f000 bc23 	b.w	800ca78 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	7c5a      	ldrb	r2, [r3, #17]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	7c1a      	ldrb	r2, [r3, #16]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	7bda      	ldrb	r2, [r3, #15]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	7b9a      	ldrb	r2, [r3, #14]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	7b5a      	ldrb	r2, [r3, #13]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800c264:	2300      	movs	r3, #0
 800c266:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c268:	2300      	movs	r3, #0
 800c26a:	85bb      	strh	r3, [r7, #44]	; 0x2c
					if  ( m3->_06_WriteSingleRegister_EN == 1 ) //Debe estar habilitado el código de funcion
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	7a9b      	ldrb	r3, [r3, #10]
 800c270:	2b01      	cmp	r3, #1
 800c272:	f040 80a3 	bne.w	800c3bc <ModBUS+0xd10>
					{


							m3->_06_WriteSingleRegister_Addr = m3->_MBUS_RCVD[8];
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	7d5b      	ldrb	r3, [r3, #21]
 800c27a:	b29a      	uxth	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr = m3->_06_WriteSingleRegister_Addr<<8;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800c288:	021b      	lsls	r3, r3, #8
 800c28a:	b29a      	uxth	r2, r3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr &= 0xFF00;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800c298:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c29c:	b29a      	uxth	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542
							m3->_06_WriteSingleRegister_Addr |= m3->_MBUS_RCVD[9];
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	7d9b      	ldrb	r3, [r3, #22]
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8a3 2542 	strh.w	r2, [r3, #1346]	; 0x542

							start_address=m3->_06_WriteSingleRegister_Addr;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8b3 3542 	ldrh.w	r3, [r3, #1346]	; 0x542
 800c2c0:	85bb      	strh	r3, [r7, #44]	; 0x2c

							m3->_06_WriteSingleRegister_Value = m3->_MBUS_RCVD[10];
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	7ddb      	ldrb	r3, [r3, #23]
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value = m3->_06_WriteSingleRegister_Value<<8;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800c2d4:	021b      	lsls	r3, r3, #8
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value &= 0xFF00;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8b3 3544 	ldrh.w	r3, [r3, #1348]	; 0x544
 800c2e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c2e8:	b29a      	uxth	r2, r3
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544
							m3->_06_WriteSingleRegister_Value |= m3->_MBUS_RCVD[11];
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8b3 2544 	ldrh.w	r2, [r3, #1348]	; 0x544
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	7e1b      	ldrb	r3, [r3, #24]
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	b29a      	uxth	r2, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8a3 2544 	strh.w	r2, [r3, #1348]	; 0x544



							if ((m3->_06_WriteSingleRegister_Value <=  0xFFFF)&&(m3->_06_WriteSingleRegister_Value >=  0x0000)) //Cdad pedida menor a igual que disponible
							{
								if ( m3->_06_WriteSingleRegister_Addr  <=  m3->_06_WriteSingleRegister_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8b3 2542 	ldrh.w	r2, [r3, #1346]	; 0x542
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f893 3540 	ldrb.w	r3, [r3, #1344]	; 0x540
 800c312:	b29b      	uxth	r3, r3
 800c314:	429a      	cmp	r2, r3
 800c316:	d838      	bhi.n	800c38a <ModBUS+0xcde>
								{
								// Verificado el mensaje, se procesa.

										m3->_Holding_Registers[start_address] = m3->_MBUS_RCVD[10];
 800c318:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	7dd1      	ldrb	r1, [r2, #23]
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	4413      	add	r3, r2
 800c322:	460a      	mov	r2, r1
 800c324:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										m3->_Holding_Registers[start_address + 1] = m3->_MBUS_RCVD[11];
 800c328:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c32a:	3301      	adds	r3, #1
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	7e11      	ldrb	r1, [r2, #24]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	4413      	add	r3, r2
 800c334:	460a      	mov	r2, r1
 800c336:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	7e1a      	ldrb	r2, [r3, #24]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	7dda      	ldrb	r2, [r3, #23]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	7d9a      	ldrb	r2, [r3, #22]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	7d5a      	ldrb	r2, [r3, #21]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x06;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2206      	movs	r2, #6
 800c366:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2201      	movs	r2, #1
 800c36e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2206      	movs	r2, #6
 800c376:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c380:	1d9a      	adds	r2, r3, #6
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c388:	e376      	b.n	800ca78 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2202      	movs	r2, #2
 800c38e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x86;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2286      	movs	r2, #134	; 0x86
 800c396:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2201      	movs	r2, #1
 800c39e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2203      	movs	r2, #3
 800c3a6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c3b0:	1d9a      	adds	r2, r3, #6
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c3b8:	2302      	movs	r3, #2
 800c3ba:	e35d      	b.n	800ca78 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x86;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2286      	movs	r2, #134	; 0x86
 800c3c8:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2203      	movs	r2, #3
 800c3d8:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c3e2:	1d9a      	adds	r2, r3, #6
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e344      	b.n	800ca78 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	7c5a      	ldrb	r2, [r3, #17]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	7c1a      	ldrb	r2, [r3, #16]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	7bda      	ldrb	r2, [r3, #15]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	7b9a      	ldrb	r2, [r3, #14]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	7b5a      	ldrb	r2, [r3, #13]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					int qty_reg=0;
 800c420:	2300      	movs	r3, #0
 800c422:	633b      	str	r3, [r7, #48]	; 0x30
					if  ( m3->_15_WriteMultipleCoils_EN == 1 ) //Debe estar habilitado el código de funcion
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	7adb      	ldrb	r3, [r3, #11]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	f040 810f 	bne.w	800c64c <ModBUS+0xfa0>
					{


							m3->_15_WriteMultipleCoils_StrtAddr = m3->_MBUS_RCVD[8];
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	7d5b      	ldrb	r3, [r3, #21]
 800c432:	b29a      	uxth	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr = m3->_15_WriteMultipleCoils_StrtAddr<<8;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c440:	021b      	lsls	r3, r3, #8
 800c442:	b29a      	uxth	r2, r3
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr &= 0xFF00;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c450:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c454:	b29a      	uxth	r2, r3
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c
							m3->_15_WriteMultipleCoils_StrtAddr |= m3->_MBUS_RCVD[9];
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8b3 253c 	ldrh.w	r2, [r3, #1340]	; 0x53c
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	7d9b      	ldrb	r3, [r3, #22]
 800c466:	b29b      	uxth	r3, r3
 800c468:	4313      	orrs	r3, r2
 800c46a:	b29a      	uxth	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8a3 253c 	strh.w	r2, [r3, #1340]	; 0x53c

							m3->_15_WriteMultipleCoils_QTYReg = m3->_MBUS_RCVD[10];
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	7ddb      	ldrb	r3, [r3, #23]
 800c476:	b29a      	uxth	r2, r3
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg = m3->_15_WriteMultipleCoils_QTYReg<<8;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800c484:	021b      	lsls	r3, r3, #8
 800c486:	b29a      	uxth	r2, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg &= 0xFF00;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800c494:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c498:	b29a      	uxth	r2, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e
							m3->_15_WriteMultipleCoils_QTYReg |= m3->_MBUS_RCVD[11];
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	7e1b      	ldrb	r3, [r3, #24]
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	b29a      	uxth	r2, r3
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8a3 253e 	strh.w	r2, [r3, #1342]	; 0x53e



							if ( m3->_15_WriteMultipleCoils_QTYReg <=  m3->_15_WriteMultipleCoils_QTY) //Cdad pedida menor a igual que disponible
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8b3 253e 	ldrh.w	r2, [r3, #1342]	; 0x53e
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f893 353a 	ldrb.w	r3, [r3, #1338]	; 0x53a
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	f200 80a8 	bhi.w	800c61a <ModBUS+0xf6e>
							{
								if ( (m3->_15_WriteMultipleCoils_StrtAddr + m3->_15_WriteMultipleCoils_QTYReg) <=  m3->_15_WriteMultipleCoils_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800c4d8:	4413      	add	r3, r2
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	f892 253a 	ldrb.w	r2, [r2, #1338]	; 0x53a
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	f300 8081 	bgt.w	800c5e8 <ModBUS+0xf3c>
								{
								// Verificado el mensaje, se procesa.
								uint32_t data=0x00000000,cdad_bytes=0,cdad_datos=0, mascara=0x00000000;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	657b      	str	r3, [r7, #84]	; 0x54
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	653b      	str	r3, [r7, #80]	; 0x50
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	64bb      	str	r3, [r7, #72]	; 0x48

									cdad_bytes=m3->_MBUS_RCVD[12];
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	7e5b      	ldrb	r3, [r3, #25]
 800c4fa:	653b      	str	r3, [r7, #80]	; 0x50


									while(cdad_bytes > 0)
 800c4fc:	e00e      	b.n	800c51c <ModBUS+0xe70>
									{
										data=data<<8;
 800c4fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c500:	021b      	lsls	r3, r3, #8
 800c502:	657b      	str	r3, [r7, #84]	; 0x54
										data|=m3->_MBUS_RCVD[12+cdad_bytes];
 800c504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c506:	330c      	adds	r3, #12
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	4413      	add	r3, r2
 800c50c:	7b5b      	ldrb	r3, [r3, #13]
 800c50e:	461a      	mov	r2, r3
 800c510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c512:	4313      	orrs	r3, r2
 800c514:	657b      	str	r3, [r7, #84]	; 0x54
										cdad_bytes--;
 800c516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c518:	3b01      	subs	r3, #1
 800c51a:	653b      	str	r3, [r7, #80]	; 0x50
									while(cdad_bytes > 0)
 800c51c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d1ed      	bne.n	800c4fe <ModBUS+0xe52>
									}
									data=data << m3->_15_WriteMultipleCoils_StrtAddr; //Dejo los datos listo para la OR de Transferencia
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c528:	461a      	mov	r2, r3
 800c52a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c52c:	4093      	lsls	r3, r2
 800c52e:	657b      	str	r3, [r7, #84]	; 0x54

									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800c530:	e00f      	b.n	800c552 <ModBUS+0xea6>
									{
										mascara |= (1 << (m3->_15_WriteMultipleCoils_StrtAddr + cdad_datos));
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8b3 353c 	ldrh.w	r3, [r3, #1340]	; 0x53c
 800c538:	461a      	mov	r2, r3
 800c53a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c53c:	4413      	add	r3, r2
 800c53e:	2201      	movs	r2, #1
 800c540:	fa02 f303 	lsl.w	r3, r2, r3
 800c544:	461a      	mov	r2, r3
 800c546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c548:	4313      	orrs	r3, r2
 800c54a:	64bb      	str	r3, [r7, #72]	; 0x48
										cdad_datos++;
 800c54c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c54e:	3301      	adds	r3, #1
 800c550:	64fb      	str	r3, [r7, #76]	; 0x4c
									while (cdad_datos < m3->_15_WriteMultipleCoils_QTYReg)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8b3 353e 	ldrh.w	r3, [r3, #1342]	; 0x53e
 800c558:	461a      	mov	r2, r3
 800c55a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d3e8      	bcc.n	800c532 <ModBUS+0xe86>
									}

									mascara = ~ mascara;
 800c560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c562:	43db      	mvns	r3, r3
 800c564:	64bb      	str	r3, [r7, #72]	; 0x48

									m3->_Coils &= mascara;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800c56c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c56e:	401a      	ands	r2, r3
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318


									data &= ~mascara;
 800c576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c578:	43db      	mvns	r3, r3
 800c57a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c57c:	4013      	ands	r3, r2
 800c57e:	657b      	str	r3, [r7, #84]	; 0x54

									m3->_Coils |= data;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 2318 	ldr.w	r2, [r3, #792]	; 0x318
 800c586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c588:	431a      	orrs	r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	7e1a      	ldrb	r2, [r3, #24]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	7dda      	ldrb	r2, [r3, #23]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	7d9a      	ldrb	r2, [r3, #22]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	7d5a      	ldrb	r2, [r3, #21]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x0F;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	220f      	movs	r2, #15
 800c5bc:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=m3->_MBUS_2SND[8]+6; //Cdad de datos
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c5ce:	3306      	adds	r3, #6
 800c5d0:	b2da      	uxtb	r2, r3
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c5de:	1d9a      	adds	r2, r3, #6
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c5e6:	e247      	b.n	800ca78 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2202      	movs	r2, #2
 800c5ec:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x8F;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	228f      	movs	r2, #143	; 0x8f
 800c5f4:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2203      	movs	r2, #3
 800c604:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c60e:	1d9a      	adds	r2, r3, #6
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c616:	2302      	movs	r3, #2
 800c618:	e22e      	b.n	800ca78 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2203      	movs	r2, #3
 800c61e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x8F;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	228f      	movs	r2, #143	; 0x8f
 800c626:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2201      	movs	r2, #1
 800c62e:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2203      	movs	r2, #3
 800c636:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c640:	1d9a      	adds	r2, r3, #6
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800c648:	2303      	movs	r3, #3
 800c64a:	e215      	b.n	800ca78 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2201      	movs	r2, #1
 800c650:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x8F;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	228f      	movs	r2, #143	; 0x8f
 800c658:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2201      	movs	r2, #1
 800c660:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2203      	movs	r2, #3
 800c668:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c672:	1d9a      	adds	r2, r3, #6
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c67a:	2301      	movs	r3, #1
 800c67c:	e1fc      	b.n	800ca78 <ModBUS+0x13cc>

					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	7c5a      	ldrb	r2, [r3, #17]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	7c1a      	ldrb	r2, [r3, #16]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	7bda      	ldrb	r2, [r3, #15]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	7b9a      	ldrb	r2, [r3, #14]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	7b5a      	ldrb	r2, [r3, #13]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					uint16_t qty_reg=0, start_address=0;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	86fb      	strh	r3, [r7, #54]	; 0x36
					if  ( m3->_16_WriteMultipleRegisters_EN == 1 ) //Debe estar habilitado el código de funcion
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	7b1b      	ldrb	r3, [r3, #12]
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	f040 80eb 	bne.w	800c89a <ModBUS+0x11ee>
					{


							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_MBUS_RCVD[8];
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	7d5b      	ldrb	r3, [r3, #21]
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr = m3->_16_WriteMultipleRegisters_StrtAddr<<8;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800c6d6:	021b      	lsls	r3, r3, #8
 800c6d8:	b29a      	uxth	r2, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr &= 0xFF00;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800c6e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c6ea:	b29a      	uxth	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548
							m3->_16_WriteMultipleRegisters_StrtAddr |= m3->_MBUS_RCVD[9];
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8b3 2548 	ldrh.w	r2, [r3, #1352]	; 0x548
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	7d9b      	ldrb	r3, [r3, #22]
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	4313      	orrs	r3, r2
 800c700:	b29a      	uxth	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8a3 2548 	strh.w	r2, [r3, #1352]	; 0x548

							start_address= (2 * m3->_16_WriteMultipleRegisters_StrtAddr);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800c70e:	005b      	lsls	r3, r3, #1
 800c710:	86fb      	strh	r3, [r7, #54]	; 0x36

							m3->_16_WriteMultipleRegisters_QTYReg = m3->_MBUS_RCVD[10];
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	7ddb      	ldrb	r3, [r3, #23]
 800c716:	b29a      	uxth	r2, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg = m3->_16_WriteMultipleRegisters_QTYReg<<8;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800c724:	021b      	lsls	r3, r3, #8
 800c726:	b29a      	uxth	r2, r3
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg &= 0xFF00;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800c734:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c738:	b29a      	uxth	r2, r3
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a
							m3->_16_WriteMultipleRegisters_QTYReg |= m3->_MBUS_RCVD[11];
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	7e1b      	ldrb	r3, [r3, #24]
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	4313      	orrs	r3, r2
 800c74e:	b29a      	uxth	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8a3 254a 	strh.w	r2, [r3, #1354]	; 0x54a



							if ( m3->_16_WriteMultipleRegisters_QTYReg <=  m3->_16_WriteMultipleRegisters_QTY) //Cdad pedida menor a igual que disponible
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8b3 254a 	ldrh.w	r2, [r3, #1354]	; 0x54a
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f893 3546 	ldrb.w	r3, [r3, #1350]	; 0x546
 800c762:	b29b      	uxth	r3, r3
 800c764:	429a      	cmp	r2, r3
 800c766:	d87f      	bhi.n	800c868 <ModBUS+0x11bc>
							{
								if ( (m3->_16_WriteMultipleRegisters_StrtAddr + m3->_16_WriteMultipleRegisters_QTYReg) <=  m3->_16_WriteMultipleRegisters_QTY) //Dirección inicial + cantidad menor a igual que disponible
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8b3 3548 	ldrh.w	r3, [r3, #1352]	; 0x548
 800c76e:	461a      	mov	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8b3 354a 	ldrh.w	r3, [r3, #1354]	; 0x54a
 800c776:	4413      	add	r3, r2
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	f892 2546 	ldrb.w	r2, [r2, #1350]	; 0x546
 800c77e:	4293      	cmp	r3, r2
 800c780:	dc59      	bgt.n	800c836 <ModBUS+0x118a>
								{
								// Verificado el mensaje, se procesa.

									while(qty_reg < m3->_MBUS_RCVD[12])
 800c782:	e029      	b.n	800c7d8 <ModBUS+0x112c>
									{
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800c784:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c788:	f103 020d 	add.w	r2, r3, #13
 800c78c:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800c78e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c792:	440b      	add	r3, r1
 800c794:	6879      	ldr	r1, [r7, #4]
 800c796:	440a      	add	r2, r1
 800c798:	7b51      	ldrb	r1, [r2, #13]
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	4413      	add	r3, r2
 800c79e:	460a      	mov	r2, r1
 800c7a0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										//Esto era para vectores de UINT16_T
										//m3->_Holding_Registers[start_address + qty_reg] = m3->_Holding_Registers[start_address + qty_reg]<<8;
										//m3->_Holding_Registers[start_address + qty_reg] &= 0xFF00;
										qty_reg++;
 800c7a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
										m3->_Holding_Registers[start_address + qty_reg] = m3->_MBUS_RCVD[13 + qty_reg];
 800c7ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c7b2:	f103 020d 	add.w	r2, r3, #13
 800c7b6:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800c7b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c7bc:	440b      	add	r3, r1
 800c7be:	6879      	ldr	r1, [r7, #4]
 800c7c0:	440a      	add	r2, r1
 800c7c2:	7b51      	ldrb	r1, [r2, #13]
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	4413      	add	r3, r2
 800c7c8:	460a      	mov	r2, r1
 800c7ca:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
										qty_reg++;
 800c7ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
									while(qty_reg < m3->_MBUS_RCVD[12])
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	7e5b      	ldrb	r3, [r3, #25]
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d3ce      	bcc.n	800c784 <ModBUS+0x10d8>

									}
									m3->_MBUS_2SND[11]=m3->_MBUS_RCVD[11];
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	7e1a      	ldrb	r2, [r3, #24]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f883 219f 	strb.w	r2, [r3, #415]	; 0x19f
									m3->_MBUS_2SND[10]=m3->_MBUS_RCVD[10];
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	7dda      	ldrb	r2, [r3, #23]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f883 219e 	strb.w	r2, [r3, #414]	; 0x19e
									m3->_MBUS_2SND[9]=m3->_MBUS_RCVD[9];
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	7d9a      	ldrb	r2, [r3, #22]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f883 219d 	strb.w	r2, [r3, #413]	; 0x19d
									m3->_MBUS_2SND[8]=m3->_MBUS_RCVD[8];
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	7d5a      	ldrb	r2, [r3, #21]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x10;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2210      	movs	r2, #16
 800c812:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2201      	movs	r2, #1
 800c81a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x06; //Cdad de datos
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2206      	movs	r2, #6
 800c822:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199


									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c82c:	1d9a      	adds	r2, r3, #6
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314

						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
						return(1);//Error excepcion 01
					}
				}
				break;
 800c834:	e120      	b.n	800ca78 <ModBUS+0x13cc>
									m3->_MBUS_2SND[8]=0x02;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2202      	movs	r2, #2
 800c83a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
									m3->_MBUS_2SND[7]=0x90;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2290      	movs	r2, #144	; 0x90
 800c842:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
									m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2201      	movs	r2, #1
 800c84a:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
									m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2203      	movs	r2, #3
 800c852:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
									m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c85c:	1d9a      	adds	r2, r3, #6
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
									return(2);//Error excepcion 02
 800c864:	2302      	movs	r3, #2
 800c866:	e107      	b.n	800ca78 <ModBUS+0x13cc>
								m3->_MBUS_2SND[8]=0x03;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2203      	movs	r2, #3
 800c86c:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
								m3->_MBUS_2SND[7]=0x90;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2290      	movs	r2, #144	; 0x90
 800c874:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
								m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2201      	movs	r2, #1
 800c87c:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
								m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2203      	movs	r2, #3
 800c884:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
								m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c88e:	1d9a      	adds	r2, r3, #6
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
								return(3);//Erroe excepcion 03
 800c896:	2303      	movs	r3, #3
 800c898:	e0ee      	b.n	800ca78 <ModBUS+0x13cc>
						m3->_MBUS_2SND[8]=0x01;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2201      	movs	r2, #1
 800c89e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
						m3->_MBUS_2SND[7]=0x90;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2290      	movs	r2, #144	; 0x90
 800c8a6:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
						m3->_MBUS_2SND[6]=0x01; //En teoría es el canal
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
						m3->_MBUS_2SND[5]=0x03; //Cdad de datos
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2203      	movs	r2, #3
 800c8b6:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
						m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c8c0:	1d9a      	adds	r2, r3, #6
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
						return(1);//Error excepcion 01
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e0d5      	b.n	800ca78 <ModBUS+0x13cc>
				{	// Comando no soportado
					//-----------------------------------------------------//
					//		Para todos los casos se devuelve el mismo	   //
					//		encabezado de respuesta						   //
					//-----------------------------------------------------//
					m3->_MBUS_2SND[8]=0x01;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
					m3->_MBUS_2SND[7]=m3->_MBUS_RCVD[7] + 0x80;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	7d1b      	ldrb	r3, [r3, #20]
 800c8d8:	3b80      	subs	r3, #128	; 0x80
 800c8da:	b2da      	uxtb	r2, r3
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f883 219b 	strb.w	r2, [r3, #411]	; 0x19b
					m3->_MBUS_2SND[6]=m3->_MBUS_RCVD[6];
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	7cda      	ldrb	r2, [r3, #19]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f883 219a 	strb.w	r2, [r3, #410]	; 0x19a
					m3->_MBUS_2SND[5]=0x03;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2203      	movs	r2, #3
 800c8f0:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
					m3->_MBUS_2SND[4]=m3->_MBUS_RCVD[4];
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	7c5a      	ldrb	r2, [r3, #17]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
					m3->_MBUS_2SND[3]=m3->_MBUS_RCVD[3];
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	7c1a      	ldrb	r2, [r3, #16]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
					m3->_MBUS_2SND[2]=m3->_MBUS_RCVD[2];
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	7bda      	ldrb	r2, [r3, #15]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
					m3->_MBUS_2SND[1]=m3->_MBUS_RCVD[1];
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	7b9a      	ldrb	r2, [r3, #14]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
					m3->_MBUS_2SND[0]=m3->_MBUS_RCVD[0];
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	7b5a      	ldrb	r2, [r3, #13]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

					m3->_n_MBUS_2SND=(m3->_MBUS_2SND[5]+6);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 800c92c:	1d9a      	adds	r2, r3, #6
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8c3 2314 	str.w	r2, [r3, #788]	; 0x314
					return(1);
 800c934:	2301      	movs	r3, #1
 800c936:	e09f      	b.n	800ca78 <ModBUS+0x13cc>


		}
		else
		{
			return(1);
 800c938:	2301      	movs	r3, #1
 800c93a:	e09d      	b.n	800ca78 <ModBUS+0x13cc>
		}
	}
	else if (m3->_mode == CLIENTE)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	785b      	ldrb	r3, [r3, #1]
 800c940:	2b00      	cmp	r3, #0
 800c942:	f040 8099 	bne.w	800ca78 <ModBUS+0x13cc>
	{
		if(ModBUS_Check(m3->_MBUS_RCVD,m3->_n_MBUS_RCVD))   //Verifico si el vector recibido es ModBUS
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f103 020d 	add.w	r2, r3, #13
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800c952:	4619      	mov	r1, r3
 800c954:	4610      	mov	r0, r2
 800c956:	f7fe fda7 	bl	800b4a8 <ModBUS_Check>
 800c95a:	4603      	mov	r3, r0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	f000 808b 	beq.w	800ca78 <ModBUS+0x13cc>
		{
			if(ModBUS_Check_tid(m3))
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f7fe fdbf 	bl	800b4e6 <ModBUS_Check_tid>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d04f      	beq.n	800ca0e <ModBUS+0x1362>
			{

				switch (m3->_MBUS_RCVD[7])
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	7d1b      	ldrb	r3, [r3, #20]
 800c972:	2b03      	cmp	r3, #3
 800c974:	d143      	bne.n	800c9fe <ModBUS+0x1352>
				{
					case 0x03: // Si el comando fue un ReadHoldingRegisters
					{
						uint16_t start_address = 0;
 800c976:	2300      	movs	r3, #0
 800c978:	87fb      	strh	r3, [r7, #62]	; 0x3e
						uint8_t qty=0;
 800c97a:	2300      	movs	r3, #0
 800c97c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						start_address = m3->_MBUS_2SND[8];
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800c986:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address = start_address << 8 ;
 800c988:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c98a:	021b      	lsls	r3, r3, #8
 800c98c:	87fb      	strh	r3, [r7, #62]	; 0x3e
						start_address |= m3->_MBUS_2SND[9];
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800c994:	b29a      	uxth	r2, r3
 800c996:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c998:	4313      	orrs	r3, r2
 800c99a:	87fb      	strh	r3, [r7, #62]	; 0x3e

						qty = m3->_MBUS_2SND[11];
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f893 319f 	ldrb.w	r3, [r3, #415]	; 0x19f
 800c9a2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

						for (int i=0;i< qty; i++)
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	643b      	str	r3, [r7, #64]	; 0x40
 800c9aa:	e022      	b.n	800c9f2 <ModBUS+0x1346>
						{
							m3->_Holding_Registers[(start_address*2)+(2*i)]=m3->_MBUS_RCVD[9+2*i];
 800c9ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9ae:	005b      	lsls	r3, r3, #1
 800c9b0:	f103 0209 	add.w	r2, r3, #9
 800c9b4:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800c9b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9b8:	440b      	add	r3, r1
 800c9ba:	005b      	lsls	r3, r3, #1
 800c9bc:	6879      	ldr	r1, [r7, #4]
 800c9be:	440a      	add	r2, r1
 800c9c0:	7b51      	ldrb	r1, [r2, #13]
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	460a      	mov	r2, r1
 800c9c8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
							m3->_Holding_Registers[(start_address*2)+(2*i) + 1]=m3->_MBUS_RCVD[10+2*i];
 800c9cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9ce:	3305      	adds	r3, #5
 800c9d0:	005a      	lsls	r2, r3, #1
 800c9d2:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800c9d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9d6:	440b      	add	r3, r1
 800c9d8:	005b      	lsls	r3, r3, #1
 800c9da:	3301      	adds	r3, #1
 800c9dc:	6879      	ldr	r1, [r7, #4]
 800c9de:	440a      	add	r2, r1
 800c9e0:	7b51      	ldrb	r1, [r2, #13]
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	460a      	mov	r2, r1
 800c9e8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
						for (int i=0;i< qty; i++)
 800c9ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	643b      	str	r3, [r7, #64]	; 0x40
 800c9f2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c9f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	dbd7      	blt.n	800c9ac <ModBUS+0x1300>

						}


					}
					break;
 800c9fc:	bf00      	nop
					}
				}



				int qty = m3->_MBUS_RCVD[5]-m3->_MBUS_RCVD[8];
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	7c9b      	ldrb	r3, [r3, #18]
 800ca02:	461a      	mov	r2, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	7d5b      	ldrb	r3, [r3, #21]
 800ca08:	1ad3      	subs	r3, r2, r3
 800ca0a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca0c:	e034      	b.n	800ca78 <ModBUS+0x13cc>

			}
			else
			{
				switch(m3->_MBUS_RCVD[7])
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	7d1b      	ldrb	r3, [r3, #20]
 800ca12:	3b81      	subs	r3, #129	; 0x81
 800ca14:	2b15      	cmp	r3, #21
 800ca16:	d82f      	bhi.n	800ca78 <ModBUS+0x13cc>
 800ca18:	a201      	add	r2, pc, #4	; (adr r2, 800ca20 <ModBUS+0x1374>)
 800ca1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca1e:	bf00      	nop
 800ca20:	0800ca79 	.word	0x0800ca79
 800ca24:	0800ca79 	.word	0x0800ca79
 800ca28:	0800ca79 	.word	0x0800ca79
 800ca2c:	0800ca79 	.word	0x0800ca79
 800ca30:	0800ca79 	.word	0x0800ca79
 800ca34:	0800ca79 	.word	0x0800ca79
 800ca38:	0800ca79 	.word	0x0800ca79
 800ca3c:	0800ca79 	.word	0x0800ca79
 800ca40:	0800ca79 	.word	0x0800ca79
 800ca44:	0800ca79 	.word	0x0800ca79
 800ca48:	0800ca79 	.word	0x0800ca79
 800ca4c:	0800ca79 	.word	0x0800ca79
 800ca50:	0800ca79 	.word	0x0800ca79
 800ca54:	0800ca79 	.word	0x0800ca79
 800ca58:	0800ca79 	.word	0x0800ca79
 800ca5c:	0800ca79 	.word	0x0800ca79
 800ca60:	0800ca79 	.word	0x0800ca79
 800ca64:	0800ca79 	.word	0x0800ca79
 800ca68:	0800ca79 	.word	0x0800ca79
 800ca6c:	0800ca79 	.word	0x0800ca79
 800ca70:	0800ca79 	.word	0x0800ca79
 800ca74:	0800ca79 	.word	0x0800ca79
			}
		}
	}


}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3770      	adds	r7, #112	; 0x70
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <SPI_ETH_RESET>:
 */

#include "ETH_W5500.h"

SPI_ETH_RESET(struct W5500_SPI * x)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->RST_PORT, x->RST_PIN , GPIO_PIN_RESET);		//RST LOW
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	68d8      	ldr	r0, [r3, #12]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	8a1b      	ldrh	r3, [r3, #16]
 800ca90:	2200      	movs	r2, #0
 800ca92:	4619      	mov	r1, r3
 800ca94:	f7f6 fa56 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800ca98:	2001      	movs	r0, #1
 800ca9a:	f7f5 fdf1 	bl	8002680 <HAL_Delay>
	HAL_GPIO_WritePin(x->RST_PORT, x->RST_PIN , GPIO_PIN_SET);			//RST HIGH
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	68d8      	ldr	r0, [r3, #12]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	8a1b      	ldrh	r3, [r3, #16]
 800caa6:	2201      	movs	r2, #1
 800caa8:	4619      	mov	r1, r3
 800caaa:	f7f6 fa4b 	bl	8002f44 <HAL_GPIO_WritePin>
}
 800caae:	bf00      	nop
 800cab0:	4618      	mov	r0, r3
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <SPI_ETH_PHY_RESET>:

SPI_ETH_PHY_RESET(struct W5500_SPI * x)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
uint8_t a;

	x->TX[0]=0x00;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2200      	movs	r2, #0
 800cac4:	771a      	strb	r2, [r3, #28]
	x->TX[1]=0x2E;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	222e      	movs	r2, #46	; 0x2e
 800caca:	775a      	strb	r2, [r3, #29]
	x->TX[2]=0x00;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2200      	movs	r2, #0
 800cad0:	779a      	strb	r2, [r3, #30]
	x->TX[3]=0x00;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2200      	movs	r2, #0
 800cad6:	77da      	strb	r2, [r3, #31]
	SPI_ETH(x);			//Realizo la letura de PHYCFGR
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 f81c 	bl	800cb16 <SPI_ETH>
	a=x->RX[3];
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800cae4:	73fb      	strb	r3, [r7, #15]
	a=a&0xFE;
 800cae6:	7bfb      	ldrb	r3, [r7, #15]
 800cae8:	f023 0301 	bic.w	r3, r3, #1
 800caec:	73fb      	strb	r3, [r7, #15]
	x->TX[0]=0x00;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2200      	movs	r2, #0
 800caf2:	771a      	strb	r2, [r3, #28]
	x->TX[1]=0x2E;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	222e      	movs	r2, #46	; 0x2e
 800caf8:	775a      	strb	r2, [r3, #29]
	x->TX[2]=0x04;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2204      	movs	r2, #4
 800cafe:	779a      	strb	r2, [r3, #30]
	x->TX[3]=a;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	7bfa      	ldrb	r2, [r7, #15]
 800cb04:	77da      	strb	r2, [r3, #31]
	SPI_ETH(x);
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 f805 	bl	800cb16 <SPI_ETH>
}
 800cb0c:	bf00      	nop
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <SPI_ETH>:

uint8_t  SPI_ETH(struct  W5500_SPI * x )
{
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b084      	sub	sp, #16
 800cb1a:	af02      	add	r7, sp, #8
 800cb1c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_RESET);				// NSS LOW
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6858      	ldr	r0, [r3, #4]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	891b      	ldrh	r3, [r3, #8]
 800cb26:	2200      	movs	r2, #0
 800cb28:	4619      	mov	r1, r3
 800cb2a:	f7f6 fa0b 	bl	8002f44 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(x->SPI, x->TX , x->RX, 4, 100);						//SPI COMM
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6818      	ldr	r0, [r3, #0]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f103 011c 	add.w	r1, r3, #28
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f103 0220 	add.w	r2, r3, #32
 800cb3e:	2364      	movs	r3, #100	; 0x64
 800cb40:	9300      	str	r3, [sp, #0]
 800cb42:	2304      	movs	r3, #4
 800cb44:	f7f6 ff13 	bl	800396e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(x->NSS_PORT, x->NSS_PIN , GPIO_PIN_SET);			//NSS HIGH
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6858      	ldr	r0, [r3, #4]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	891b      	ldrh	r3, [r3, #8]
 800cb50:	2201      	movs	r2, #1
 800cb52:	4619      	mov	r1, r3
 800cb54:	f7f6 f9f6 	bl	8002f44 <HAL_GPIO_WritePin>
	return (x->RX[3]);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3708      	adds	r7, #8
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <SPI_ETH_REG>:

uint16_t SPI_ETH_REG(struct W5500_SPI * x,  uint16_t ph_addr, uint8_t addr,uint8_t op, uint8_t * data, uint8_t lnght)
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b086      	sub	sp, #24
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
 800cb6e:	4608      	mov	r0, r1
 800cb70:	4611      	mov	r1, r2
 800cb72:	461a      	mov	r2, r3
 800cb74:	4603      	mov	r3, r0
 800cb76:	807b      	strh	r3, [r7, #2]
 800cb78:	460b      	mov	r3, r1
 800cb7a:	707b      	strb	r3, [r7, #1]
 800cb7c:	4613      	mov	r3, r2
 800cb7e:	703b      	strb	r3, [r7, #0]
 uint16_t res=0;
 800cb80:	2300      	movs	r3, #0
 800cb82:	82fb      	strh	r3, [r7, #22]
 uint8_t  a=op;
 800cb84:	783b      	ldrb	r3, [r7, #0]
 800cb86:	72fb      	strb	r3, [r7, #11]

 x->TX[0]= (ph_addr & 0xFF00)>>8; 				//High Address Phase
 800cb88:	887b      	ldrh	r3, [r7, #2]
 800cb8a:	0a1b      	lsrs	r3, r3, #8
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	b2da      	uxtb	r2, r3
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	771a      	strb	r2, [r3, #28]
 x->TX[1]= ph_addr & 0x00FF;					//Low Address Phase
 800cb94:	887b      	ldrh	r3, [r7, #2]
 800cb96:	b2da      	uxtb	r2, r3
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	775a      	strb	r2, [r3, #29]
 x->TX[2]= ((addr)<<3)|((op)<<2);
 800cb9c:	787b      	ldrb	r3, [r7, #1]
 800cb9e:	00db      	lsls	r3, r3, #3
 800cba0:	b25a      	sxtb	r2, r3
 800cba2:	783b      	ldrb	r3, [r7, #0]
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	b25b      	sxtb	r3, r3
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	b25b      	sxtb	r3, r3
 800cbac:	b2da      	uxtb	r2, r3
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	779a      	strb	r2, [r3, #30]
 x->TX[3]=0x00;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	77da      	strb	r2, [r3, #31]
 if(op == 1)								//Write operation
 800cbb8:	783b      	ldrb	r3, [r7, #0]
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d11d      	bne.n	800cbfa <SPI_ETH_REG+0x94>
 {
	 for(int i=0; i<(lnght); i++)			//Esto solo incrementa 256 ubicaciones
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	613b      	str	r3, [r7, #16]
 800cbc2:	e013      	b.n	800cbec <SPI_ETH_REG+0x86>
	 {
		x->TX[3]=data[i];					//Put data to be sent
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	6a3a      	ldr	r2, [r7, #32]
 800cbc8:	4413      	add	r3, r2
 800cbca:	781a      	ldrb	r2, [r3, #0]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	77da      	strb	r2, [r3, #31]
		res=SPI_ETH(x);						//Send data to device
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f7ff ffa0 	bl	800cb16 <SPI_ETH>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	82fb      	strh	r3, [r7, #22]
		x->TX[1]++;							//Address increased once
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	7f5b      	ldrb	r3, [r3, #29]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	b2da      	uxtb	r2, r3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	775a      	strb	r2, [r3, #29]
	 for(int i=0; i<(lnght); i++)			//Esto solo incrementa 256 ubicaciones
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	613b      	str	r3, [r7, #16]
 800cbec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cbf0:	693a      	ldr	r2, [r7, #16]
 800cbf2:	429a      	cmp	r2, r3
 800cbf4:	dbe6      	blt.n	800cbc4 <SPI_ETH_REG+0x5e>
	 }
	 return(res);
 800cbf6:	8afb      	ldrh	r3, [r7, #22]
 800cbf8:	e037      	b.n	800cc6a <SPI_ETH_REG+0x104>
 }
	 if(op == 0)							//Read operation
 800cbfa:	783b      	ldrb	r3, [r7, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d134      	bne.n	800cc6a <SPI_ETH_REG+0x104>
	 {
		 x->TX[3]=0x00;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2200      	movs	r2, #0
 800cc04:	77da      	strb	r2, [r3, #31]
		 if (lnght==2)
 800cc06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cc0a:	2b02      	cmp	r3, #2
 800cc0c:	d120      	bne.n	800cc50 <SPI_ETH_REG+0xea>
		{
		for(int i=0; i<(lnght); i++)
 800cc0e:	2300      	movs	r3, #0
 800cc10:	60fb      	str	r3, [r7, #12]
 800cc12:	e016      	b.n	800cc42 <SPI_ETH_REG+0xdc>
			{
			res|=SPI_ETH(x);
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f7ff ff7e 	bl	800cb16 <SPI_ETH>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	b29a      	uxth	r2, r3
 800cc1e:	8afb      	ldrh	r3, [r7, #22]
 800cc20:	4313      	orrs	r3, r2
 800cc22:	82fb      	strh	r3, [r7, #22]
			x->TX[1]++;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	7f5b      	ldrb	r3, [r3, #29]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	b2da      	uxtb	r2, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	775a      	strb	r2, [r3, #29]
			if (i==0)res=res<<8;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d102      	bne.n	800cc3c <SPI_ETH_REG+0xd6>
 800cc36:	8afb      	ldrh	r3, [r7, #22]
 800cc38:	021b      	lsls	r3, r3, #8
 800cc3a:	82fb      	strh	r3, [r7, #22]
		for(int i=0; i<(lnght); i++)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	60fb      	str	r3, [r7, #12]
 800cc42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cc46:	68fa      	ldr	r2, [r7, #12]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	dbe3      	blt.n	800cc14 <SPI_ETH_REG+0xae>
			}
		 return(res);
 800cc4c:	8afb      	ldrh	r3, [r7, #22]
 800cc4e:	e00c      	b.n	800cc6a <SPI_ETH_REG+0x104>
		}else
		{
			res=SPI_ETH(x);
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7ff ff60 	bl	800cb16 <SPI_ETH>
 800cc56:	4603      	mov	r3, r0
 800cc58:	82fb      	strh	r3, [r7, #22]
			x->TX[1]++;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	7f5b      	ldrb	r3, [r3, #29]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	b2da      	uxtb	r2, r3
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	775a      	strb	r2, [r3, #29]
			return(res);
 800cc66:	8afb      	ldrh	r3, [r7, #22]
 800cc68:	e7ff      	b.n	800cc6a <SPI_ETH_REG+0x104>
		}
 	 }
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3718      	adds	r7, #24
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}

0800cc72 <SPI_ETH_WR_REG_16>:

uint16_t SPI_ETH_WR_REG_16(struct W5500_SPI * x, uint16_t addr, uint16_t  data, uint8_t socket)
{
 800cc72:	b580      	push	{r7, lr}
 800cc74:	b088      	sub	sp, #32
 800cc76:	af00      	add	r7, sp, #0
 800cc78:	60f8      	str	r0, [r7, #12]
 800cc7a:	4608      	mov	r0, r1
 800cc7c:	4611      	mov	r1, r2
 800cc7e:	461a      	mov	r2, r3
 800cc80:	4603      	mov	r3, r0
 800cc82:	817b      	strh	r3, [r7, #10]
 800cc84:	460b      	mov	r3, r1
 800cc86:	813b      	strh	r3, [r7, #8]
 800cc88:	4613      	mov	r3, r2
 800cc8a:	71fb      	strb	r3, [r7, #7]
	uint16_t res=0;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	83fb      	strh	r3, [r7, #30]
	uint8_t num[2];
			x->TX[2]= ((socket)<<3)|0x04;
 800cc90:	79fb      	ldrb	r3, [r7, #7]
 800cc92:	00db      	lsls	r3, r3, #3
 800cc94:	b25b      	sxtb	r3, r3
 800cc96:	f043 0304 	orr.w	r3, r3, #4
 800cc9a:	b25b      	sxtb	r3, r3
 800cc9c:	b2da      	uxtb	r2, r3
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	779a      	strb	r2, [r3, #30]
			num[1] = data & 0x00FF ;
 800cca2:	893b      	ldrh	r3, [r7, #8]
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	757b      	strb	r3, [r7, #21]
			num[0] = (data & 0xFF00)>>8 ;
 800cca8:	893b      	ldrh	r3, [r7, #8]
 800ccaa:	0a1b      	lsrs	r3, r3, #8
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	753b      	strb	r3, [r7, #20]

			 for(int i=0; i<(2); i++)
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	61bb      	str	r3, [r7, #24]
 800ccb6:	e01b      	b.n	800ccf0 <SPI_ETH_WR_REG_16+0x7e>
				 {
				 	x->TX[1]= addr & 0x00FF;//x->TX[2]= addr & 0x00FF;
 800ccb8:	897b      	ldrh	r3, [r7, #10]
 800ccba:	b2da      	uxtb	r2, r3
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	775a      	strb	r2, [r3, #29]
				 	x->TX[0]=(addr & 0xFF00)>>8;//x->TX[1]=(addr & 0xFF00)>>8;
 800ccc0:	897b      	ldrh	r3, [r7, #10]
 800ccc2:	0a1b      	lsrs	r3, r3, #8
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	b2da      	uxtb	r2, r3
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	771a      	strb	r2, [r3, #28]
					addr++;
 800cccc:	897b      	ldrh	r3, [r7, #10]
 800ccce:	3301      	adds	r3, #1
 800ccd0:	817b      	strh	r3, [r7, #10]
					x->TX[3]=num[i];
 800ccd2:	f107 0214 	add.w	r2, r7, #20
 800ccd6:	69bb      	ldr	r3, [r7, #24]
 800ccd8:	4413      	add	r3, r2
 800ccda:	781a      	ldrb	r2, [r3, #0]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	77da      	strb	r2, [r3, #31]
					res=SPI_ETH(x);
 800cce0:	68f8      	ldr	r0, [r7, #12]
 800cce2:	f7ff ff18 	bl	800cb16 <SPI_ETH>
 800cce6:	4603      	mov	r3, r0
 800cce8:	83fb      	strh	r3, [r7, #30]
			 for(int i=0; i<(2); i++)
 800ccea:	69bb      	ldr	r3, [r7, #24]
 800ccec:	3301      	adds	r3, #1
 800ccee:	61bb      	str	r3, [r7, #24]
 800ccf0:	69bb      	ldr	r3, [r7, #24]
 800ccf2:	2b01      	cmp	r3, #1
 800ccf4:	dde0      	ble.n	800ccb8 <SPI_ETH_WR_REG_16+0x46>
				 }
			 return(res);
 800ccf6:	8bfb      	ldrh	r3, [r7, #30]
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3720      	adds	r7, #32
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <SPI_ETH_RD_RCV_REG_16>:
	return(1);
	}
}

uint16_t SPI_ETH_RD_RCV_REG_16(struct W5500_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght, uint8_t socket )
{
 800cd00:	b590      	push	{r4, r7, lr}
 800cd02:	b087      	sub	sp, #28
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	607a      	str	r2, [r7, #4]
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	817b      	strh	r3, [r7, #10]
 800cd10:	4613      	mov	r3, r2
 800cd12:	813b      	strh	r3, [r7, #8]
		x->TX[2]= ((socket)<<3)|0x00;
 800cd14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cd18:	00db      	lsls	r3, r3, #3
 800cd1a:	b2da      	uxtb	r2, r3
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	779a      	strb	r2, [r3, #30]
	if(lnght < 2048)
 800cd20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cd22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd26:	d226      	bcs.n	800cd76 <SPI_ETH_RD_RCV_REG_16+0x76>
	{
			x->TX[3]=0x00;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	77da      	strb	r2, [r3, #31]
			for(int i=0; i<(lnght); i++)
 800cd2e:	2300      	movs	r3, #0
 800cd30:	617b      	str	r3, [r7, #20]
 800cd32:	e01a      	b.n	800cd6a <SPI_ETH_RD_RCV_REG_16+0x6a>
				{
				x->TX[1] = addr & 0x00FF;
 800cd34:	897b      	ldrh	r3, [r7, #10]
 800cd36:	b2da      	uxtb	r2, r3
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	775a      	strb	r2, [r3, #29]
				x->TX[0] = (addr & 0xFF00)>>8;
 800cd3c:	897b      	ldrh	r3, [r7, #10]
 800cd3e:	0a1b      	lsrs	r3, r3, #8
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	b2da      	uxtb	r2, r3
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	771a      	strb	r2, [r3, #28]
				data[i+offset]=SPI_ETH(x);
 800cd48:	893a      	ldrh	r2, [r7, #8]
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	4413      	add	r3, r2
 800cd4e:	461a      	mov	r2, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	189c      	adds	r4, r3, r2
 800cd54:	68f8      	ldr	r0, [r7, #12]
 800cd56:	f7ff fede 	bl	800cb16 <SPI_ETH>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	7023      	strb	r3, [r4, #0]
				addr++;
 800cd5e:	897b      	ldrh	r3, [r7, #10]
 800cd60:	3301      	adds	r3, #1
 800cd62:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	3301      	adds	r3, #1
 800cd68:	617b      	str	r3, [r7, #20]
 800cd6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cd6c:	697a      	ldr	r2, [r7, #20]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	dbe0      	blt.n	800cd34 <SPI_ETH_RD_RCV_REG_16+0x34>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800cd72:	2300      	movs	r3, #0
 800cd74:	e000      	b.n	800cd78 <SPI_ETH_RD_RCV_REG_16+0x78>
	}
	else
	{
	return(1);
 800cd76:	2301      	movs	r3, #1
	}
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	371c      	adds	r7, #28
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd90      	pop	{r4, r7, pc}

0800cd80 <SPI_ETH_WR_TX_REG_16>:

uint16_t SPI_ETH_WR_TX_REG_16(struct W5500_SPI * x, uint16_t addr, uint8_t * data, uint16_t offset, uint16_t lnght, uint8_t socket )
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	607a      	str	r2, [r7, #4]
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	817b      	strh	r3, [r7, #10]
 800cd90:	4613      	mov	r3, r2
 800cd92:	813b      	strh	r3, [r7, #8]
		x->TX[2]= ((socket)<<3)|0x04;
 800cd94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cd98:	00db      	lsls	r3, r3, #3
 800cd9a:	b25b      	sxtb	r3, r3
 800cd9c:	f043 0304 	orr.w	r3, r3, #4
 800cda0:	b25b      	sxtb	r3, r3
 800cda2:	b2da      	uxtb	r2, r3
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	779a      	strb	r2, [r3, #30]
	if(lnght < 2048)
 800cda8:	8c3b      	ldrh	r3, [r7, #32]
 800cdaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdae:	d224      	bcs.n	800cdfa <SPI_ETH_WR_TX_REG_16+0x7a>
	{

			for(int i=0; i<(lnght); i++)
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	617b      	str	r3, [r7, #20]
 800cdb4:	e01b      	b.n	800cdee <SPI_ETH_WR_TX_REG_16+0x6e>
				{
				x->TX[1] = addr & 0x00FF;
 800cdb6:	897b      	ldrh	r3, [r7, #10]
 800cdb8:	b2da      	uxtb	r2, r3
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	775a      	strb	r2, [r3, #29]
				x->TX[0] = (addr & 0xFF00)>>8;
 800cdbe:	897b      	ldrh	r3, [r7, #10]
 800cdc0:	0a1b      	lsrs	r3, r3, #8
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	b2da      	uxtb	r2, r3
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	771a      	strb	r2, [r3, #28]
				x->TX[3]= x->data[i+offset];
 800cdca:	893a      	ldrh	r2, [r7, #8]
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	4413      	add	r3, r2
 800cdd0:	68fa      	ldr	r2, [r7, #12]
 800cdd2:	4413      	add	r3, r2
 800cdd4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	77da      	strb	r2, [r3, #31]
				SPI_ETH(x);
 800cddc:	68f8      	ldr	r0, [r7, #12]
 800cdde:	f7ff fe9a 	bl	800cb16 <SPI_ETH>
				addr++;
 800cde2:	897b      	ldrh	r3, [r7, #10]
 800cde4:	3301      	adds	r3, #1
 800cde6:	817b      	strh	r3, [r7, #10]
			for(int i=0; i<(lnght); i++)
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	3301      	adds	r3, #1
 800cdec:	617b      	str	r3, [r7, #20]
 800cdee:	8c3b      	ldrh	r3, [r7, #32]
 800cdf0:	697a      	ldr	r2, [r7, #20]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	dbdf      	blt.n	800cdb6 <SPI_ETH_WR_TX_REG_16+0x36>
				}
		return (0); //Retorno la dirección del puntero a la memoria
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	e000      	b.n	800cdfc <SPI_ETH_WR_TX_REG_16+0x7c>
	}
	else
	{
	return(1);
 800cdfa:	2301      	movs	r3, #1
	}
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3718      	adds	r7, #24
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <eth_wr_SOCKET_CMD>:

eth_wr_SOCKET_CMD(struct  W5500_SPI * y, uint8_t socket, uint8_t z)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	460b      	mov	r3, r1
 800ce0e:	70fb      	strb	r3, [r7, #3]
 800ce10:	4613      	mov	r3, r2
 800ce12:	70bb      	strb	r3, [r7, #2]
	y->TX[0]= 0x00; 				//High Address Phase Hardcoded MR Register
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2200      	movs	r2, #0
 800ce18:	771a      	strb	r2, [r3, #28]
	y->TX[1]= 0x01;					//Low Address Phase Command
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	775a      	strb	r2, [r3, #29]
	y->TX[2]= ((socket<<3)|0x04);	//Control Phase address + R/W + OP Mode
 800ce20:	78fb      	ldrb	r3, [r7, #3]
 800ce22:	00db      	lsls	r3, r3, #3
 800ce24:	b25b      	sxtb	r3, r3
 800ce26:	f043 0304 	orr.w	r3, r3, #4
 800ce2a:	b25b      	sxtb	r3, r3
 800ce2c:	b2da      	uxtb	r2, r3
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	779a      	strb	r2, [r3, #30]
	y->TX[3]= z ;		//Load data to save
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	78ba      	ldrb	r2, [r7, #2]
 800ce36:	77da      	strb	r2, [r3, #31]
	SPI_ETH(y);
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f7ff fe6c 	bl	800cb16 <SPI_ETH>
}
 800ce3e:	bf00      	nop
 800ce40:	4618      	mov	r0, r3
 800ce42:	3708      	adds	r7, #8
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <eth_wr_SOCKET_MODE>:

eth_wr_SOCKET_MODE(struct  W5500_SPI * y, uint8_t socket, uint8_t z)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	460b      	mov	r3, r1
 800ce52:	70fb      	strb	r3, [r7, #3]
 800ce54:	4613      	mov	r3, r2
 800ce56:	70bb      	strb	r3, [r7, #2]
		y->TX[0]= 0x00; 				//High Address Phase Hardcoded MR Register
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	771a      	strb	r2, [r3, #28]
		y->TX[1]= 0x00;					//Low Address Phase Mode
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2200      	movs	r2, #0
 800ce62:	775a      	strb	r2, [r3, #29]
		y->TX[2]= ((socket)<<3)|0x04;	//Control Phase address + R/W + OP Mode
 800ce64:	78fb      	ldrb	r3, [r7, #3]
 800ce66:	00db      	lsls	r3, r3, #3
 800ce68:	b25b      	sxtb	r3, r3
 800ce6a:	f043 0304 	orr.w	r3, r3, #4
 800ce6e:	b25b      	sxtb	r3, r3
 800ce70:	b2da      	uxtb	r2, r3
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	779a      	strb	r2, [r3, #30]
		y->TX[3]= z ;		//Load data to save
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	78ba      	ldrb	r2, [r7, #2]
 800ce7a:	77da      	strb	r2, [r3, #31]

	SPI_ETH(y);
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f7ff fe4a 	bl	800cb16 <SPI_ETH>
}
 800ce82:	bf00      	nop
 800ce84:	4618      	mov	r0, r3
 800ce86:	3708      	adds	r7, #8
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <eth_init>:


uint8_t eth_init(struct W5500_SPI * ETH)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af02      	add	r7, sp, #8
 800ce92:	6078      	str	r0, [r7, #4]
  	 SPI_ETH_RESET(ETH);	//Reset W5500 por hardware
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f7ff fdf3 	bl	800ca80 <SPI_ETH_RESET>
  	 HAL_Delay(800);
 800ce9a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800ce9e:	f7f5 fbef 	bl	8002680 <HAL_Delay>

  	 SPI_ETH_REG(ETH, GAR,COMM_REG,SPI_WRITE, ETH->GAR,4);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cea8:	3304      	adds	r3, #4
 800ceaa:	2204      	movs	r2, #4
 800ceac:	9201      	str	r2, [sp, #4]
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	2101      	movs	r1, #1
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f7ff fe55 	bl	800cb66 <SPI_ETH_REG>

	 ETH->T8=0x00;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cec2:	2200      	movs	r2, #0
 800cec4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, IMR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cece:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ced2:	461a      	mov	r2, r3
 800ced4:	2301      	movs	r3, #1
 800ced6:	9301      	str	r3, [sp, #4]
 800ced8:	9200      	str	r2, [sp, #0]
 800ceda:	2301      	movs	r3, #1
 800cedc:	2200      	movs	r2, #0
 800cede:	2116      	movs	r1, #22
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f7ff fe40 	bl	800cb66 <SPI_ETH_REG>

	 ETH->T8=0x0F;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ceec:	220f      	movs	r2, #15
 800ceee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RTR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cef8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800cefc:	461a      	mov	r2, r3
 800cefe:	2301      	movs	r3, #1
 800cf00:	9301      	str	r3, [sp, #4]
 800cf02:	9200      	str	r2, [sp, #0]
 800cf04:	2301      	movs	r3, #1
 800cf06:	2200      	movs	r2, #0
 800cf08:	2119      	movs	r1, #25
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f7ff fe2b 	bl	800cb66 <SPI_ETH_REG>

	 ETH->T8=0xA0;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf16:	22a0      	movs	r2, #160	; 0xa0
 800cf18:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RTR+1,COMM_REG,SPI_WRITE, ETH->T8,1);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf22:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800cf26:	461a      	mov	r2, r3
 800cf28:	2301      	movs	r3, #1
 800cf2a:	9301      	str	r3, [sp, #4]
 800cf2c:	9200      	str	r2, [sp, #0]
 800cf2e:	2301      	movs	r3, #1
 800cf30:	2200      	movs	r2, #0
 800cf32:	211a      	movs	r1, #26
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f7ff fe16 	bl	800cb66 <SPI_ETH_REG>

	 ETH->T8=0x07;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf40:	2207      	movs	r2, #7
 800cf42:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, RCR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf4c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800cf50:	461a      	mov	r2, r3
 800cf52:	2301      	movs	r3, #1
 800cf54:	9301      	str	r3, [sp, #4]
 800cf56:	9200      	str	r2, [sp, #0]
 800cf58:	2301      	movs	r3, #1
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	211b      	movs	r1, #27
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f7ff fe01 	bl	800cb66 <SPI_ETH_REG>

	 ETH->T8=0x00;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, SIMR,COMM_REG	,SPI_WRITE, ETH->T8,1);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf76:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	9301      	str	r3, [sp, #4]
 800cf80:	9200      	str	r2, [sp, #0]
 800cf82:	2301      	movs	r3, #1
 800cf84:	2200      	movs	r2, #0
 800cf86:	2118      	movs	r1, #24
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f7ff fdec 	bl	800cb66 <SPI_ETH_REG>

	 SPI_ETH_REG(ETH, SHAR,COMM_REG,SPI_WRITE, ETH->SHAR,6);												//same for server and client
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cf94:	330c      	adds	r3, #12
 800cf96:	2206      	movs	r2, #6
 800cf98:	9201      	str	r2, [sp, #4]
 800cf9a:	9300      	str	r3, [sp, #0]
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	2109      	movs	r1, #9
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f7ff fddf 	bl	800cb66 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-MAC SET\r\n",strlen("\r\nETH-W5500-MAC SET"));
 800cfa8:	2113      	movs	r1, #19
 800cfaa:	481d      	ldr	r0, [pc, #116]	; (800d020 <eth_init+0x194>)
 800cfac:	f7f4 f9e4 	bl	8001378 <ITM0_Write>
	 SPI_ETH_REG(ETH, GAR,COMM_REG,SPI_WRITE, ETH->GAR,4);	//SPI_ETH_REG(ETH, GAR_ADDR_BASEH,GAR_ADDR_BASEL,SPI_WRITE, ETH->GAR,4);													//same for server and client
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cfb6:	3304      	adds	r3, #4
 800cfb8:	2204      	movs	r2, #4
 800cfba:	9201      	str	r2, [sp, #4]
 800cfbc:	9300      	str	r3, [sp, #0]
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	2101      	movs	r1, #1
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f7ff fdce 	bl	800cb66 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-GATEWAY SET\r\n",strlen("\r\nETH-W5500-GATEWAY SET\r\n"));									//same for server and client
 800cfca:	2119      	movs	r1, #25
 800cfcc:	4815      	ldr	r0, [pc, #84]	; (800d024 <eth_init+0x198>)
 800cfce:	f7f4 f9d3 	bl	8001378 <ITM0_Write>
	 SPI_ETH_REG(ETH, SUBR,COMM_REG,SPI_WRITE, ETH->SUBR,4);												//same for server and client
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cfd8:	3308      	adds	r3, #8
 800cfda:	2204      	movs	r2, #4
 800cfdc:	9201      	str	r2, [sp, #4]
 800cfde:	9300      	str	r3, [sp, #0]
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	2105      	movs	r1, #5
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f7ff fdbd 	bl	800cb66 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-SUBNET SET\r\n",strlen("\r\nETH-W5500-SUBNET SET"));											//same for server and client
 800cfec:	2116      	movs	r1, #22
 800cfee:	480e      	ldr	r0, [pc, #56]	; (800d028 <eth_init+0x19c>)
 800cff0:	f7f4 f9c2 	bl	8001378 <ITM0_Write>
	 SPI_ETH_REG(ETH, SIPR,COMM_REG,SPI_WRITE, ETH->SIPR,4);												//same for server and client
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800cffa:	3312      	adds	r3, #18
 800cffc:	2204      	movs	r2, #4
 800cffe:	9201      	str	r2, [sp, #4]
 800d000:	9300      	str	r3, [sp, #0]
 800d002:	2301      	movs	r3, #1
 800d004:	2200      	movs	r2, #0
 800d006:	210f      	movs	r1, #15
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f7ff fdac 	bl	800cb66 <SPI_ETH_REG>
	 ITM0_Write("\r\nETH-W5500-IP SET\r\n",strlen("\r\nETH-W5500-IP SET"));
 800d00e:	2112      	movs	r1, #18
 800d010:	4806      	ldr	r0, [pc, #24]	; (800d02c <eth_init+0x1a0>)
 800d012:	f7f4 f9b1 	bl	8001378 <ITM0_Write>

}
 800d016:	bf00      	nop
 800d018:	4618      	mov	r0, r3
 800d01a:	3708      	adds	r7, #8
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	08010408 	.word	0x08010408
 800d024:	08010420 	.word	0x08010420
 800d028:	0801043c 	.word	0x0801043c
 800d02c:	08010458 	.word	0x08010458

0800d030 <eth_socket_init>:

uint8_t eth_socket_init(struct W5500_SPI * ETH, uint8_t socket)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b086      	sub	sp, #24
 800d034:	af02      	add	r7, sp, #8
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	460b      	mov	r3, r1
 800d03a:	70fb      	strb	r3, [r7, #3]

	 ETH->T8=0x02;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d042:	2202      	movs	r2, #2
 800d044:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S0_REG,SPI_WRITE, ETH->T8,1);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d04e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d052:	461a      	mov	r2, r3
 800d054:	2301      	movs	r3, #1
 800d056:	9301      	str	r3, [sp, #4]
 800d058:	9200      	str	r2, [sp, #0]
 800d05a:	2301      	movs	r3, #1
 800d05c:	2201      	movs	r2, #1
 800d05e:	211e      	movs	r1, #30
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f7ff fd80 	bl	800cb66 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S0_REG,SPI_WRITE, ETH->T8,1);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d06c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d070:	461a      	mov	r2, r3
 800d072:	2301      	movs	r3, #1
 800d074:	9301      	str	r3, [sp, #4]
 800d076:	9200      	str	r2, [sp, #0]
 800d078:	2301      	movs	r3, #1
 800d07a:	2201      	movs	r2, #1
 800d07c:	211f      	movs	r1, #31
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f7ff fd71 	bl	800cb66 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S1_REG,SPI_WRITE, ETH->T8,1);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d08a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d08e:	461a      	mov	r2, r3
 800d090:	2301      	movs	r3, #1
 800d092:	9301      	str	r3, [sp, #4]
 800d094:	9200      	str	r2, [sp, #0]
 800d096:	2301      	movs	r3, #1
 800d098:	2205      	movs	r2, #5
 800d09a:	211e      	movs	r1, #30
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f7ff fd62 	bl	800cb66 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S1_REG,SPI_WRITE, ETH->T8,1);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0a8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	9301      	str	r3, [sp, #4]
 800d0b2:	9200      	str	r2, [sp, #0]
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	2205      	movs	r2, #5
 800d0b8:	211f      	movs	r1, #31
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7ff fd53 	bl	800cb66 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S2_REG,SPI_WRITE, ETH->T8,1);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0c6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	9301      	str	r3, [sp, #4]
 800d0d0:	9200      	str	r2, [sp, #0]
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	2209      	movs	r2, #9
 800d0d6:	211e      	movs	r1, #30
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7ff fd44 	bl	800cb66 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S2_REG,SPI_WRITE, ETH->T8,1);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d0e4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	9301      	str	r3, [sp, #4]
 800d0ee:	9200      	str	r2, [sp, #0]
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	2209      	movs	r2, #9
 800d0f4:	211f      	movs	r1, #31
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f7ff fd35 	bl	800cb66 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S3_REG,SPI_WRITE, ETH->T8,1);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d102:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d106:	461a      	mov	r2, r3
 800d108:	2301      	movs	r3, #1
 800d10a:	9301      	str	r3, [sp, #4]
 800d10c:	9200      	str	r2, [sp, #0]
 800d10e:	2301      	movs	r3, #1
 800d110:	220d      	movs	r2, #13
 800d112:	211e      	movs	r1, #30
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f7ff fd26 	bl	800cb66 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S3_REG,SPI_WRITE, ETH->T8,1);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d120:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d124:	461a      	mov	r2, r3
 800d126:	2301      	movs	r3, #1
 800d128:	9301      	str	r3, [sp, #4]
 800d12a:	9200      	str	r2, [sp, #0]
 800d12c:	2301      	movs	r3, #1
 800d12e:	220d      	movs	r2, #13
 800d130:	211f      	movs	r1, #31
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f7ff fd17 	bl	800cb66 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S4_REG,SPI_WRITE, ETH->T8,1);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d13e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d142:	461a      	mov	r2, r3
 800d144:	2301      	movs	r3, #1
 800d146:	9301      	str	r3, [sp, #4]
 800d148:	9200      	str	r2, [sp, #0]
 800d14a:	2301      	movs	r3, #1
 800d14c:	2211      	movs	r2, #17
 800d14e:	211e      	movs	r1, #30
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f7ff fd08 	bl	800cb66 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S4_REG,SPI_WRITE, ETH->T8,1);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d15c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d160:	461a      	mov	r2, r3
 800d162:	2301      	movs	r3, #1
 800d164:	9301      	str	r3, [sp, #4]
 800d166:	9200      	str	r2, [sp, #0]
 800d168:	2301      	movs	r3, #1
 800d16a:	2211      	movs	r2, #17
 800d16c:	211f      	movs	r1, #31
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f7ff fcf9 	bl	800cb66 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S5_REG,SPI_WRITE, ETH->T8,1);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d17a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d17e:	461a      	mov	r2, r3
 800d180:	2301      	movs	r3, #1
 800d182:	9301      	str	r3, [sp, #4]
 800d184:	9200      	str	r2, [sp, #0]
 800d186:	2301      	movs	r3, #1
 800d188:	2215      	movs	r2, #21
 800d18a:	211e      	movs	r1, #30
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f7ff fcea 	bl	800cb66 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S5_REG,SPI_WRITE, ETH->T8,1);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d198:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d19c:	461a      	mov	r2, r3
 800d19e:	2301      	movs	r3, #1
 800d1a0:	9301      	str	r3, [sp, #4]
 800d1a2:	9200      	str	r2, [sp, #0]
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	2215      	movs	r2, #21
 800d1a8:	211f      	movs	r1, #31
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f7ff fcdb 	bl	800cb66 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S6_REG,SPI_WRITE, ETH->T8,1);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1b6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	2301      	movs	r3, #1
 800d1be:	9301      	str	r3, [sp, #4]
 800d1c0:	9200      	str	r2, [sp, #0]
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	2219      	movs	r2, #25
 800d1c6:	211e      	movs	r1, #30
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f7ff fccc 	bl	800cb66 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S6_REG,SPI_WRITE, ETH->T8,1);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1d4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d1d8:	461a      	mov	r2, r3
 800d1da:	2301      	movs	r3, #1
 800d1dc:	9301      	str	r3, [sp, #4]
 800d1de:	9200      	str	r2, [sp, #0]
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	2219      	movs	r2, #25
 800d1e4:	211f      	movs	r1, #31
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7ff fcbd 	bl	800cb66 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_RXBUF_SIZE,S7_REG,SPI_WRITE, ETH->T8,1);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1f2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	9301      	str	r3, [sp, #4]
 800d1fc:	9200      	str	r2, [sp, #0]
 800d1fe:	2301      	movs	r3, #1
 800d200:	221d      	movs	r2, #29
 800d202:	211e      	movs	r1, #30
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f7ff fcae 	bl	800cb66 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 SPI_ETH_REG(ETH, S_TXBUF_SIZE,S7_REG,SPI_WRITE, ETH->T8,1);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d210:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d214:	461a      	mov	r2, r3
 800d216:	2301      	movs	r3, #1
 800d218:	9301      	str	r3, [sp, #4]
 800d21a:	9200      	str	r2, [sp, #0]
 800d21c:	2301      	movs	r3, #1
 800d21e:	221d      	movs	r2, #29
 800d220:	211f      	movs	r1, #31
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f7ff fc9f 	bl	800cb66 <SPI_ETH_REG>
	 ETH->T8=0x00;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d22e:	2200      	movs	r2, #0
 800d230:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 SPI_ETH_REG(ETH, S_TX_WR,S0_REG,SPI_WRITE, ETH->T8,1);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d23a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d23e:	461a      	mov	r2, r3
 800d240:	2301      	movs	r3, #1
 800d242:	9301      	str	r3, [sp, #4]
 800d244:	9200      	str	r2, [sp, #0]
 800d246:	2301      	movs	r3, #1
 800d248:	2201      	movs	r2, #1
 800d24a:	2124      	movs	r1, #36	; 0x24
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f7ff fc8a 	bl	800cb66 <SPI_ETH_REG>
	 SPI_ETH_REG(ETH, S_TX_WR+1,S0_REG,SPI_WRITE, ETH->T8,1);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d258:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d25c:	461a      	mov	r2, r3
 800d25e:	2301      	movs	r3, #1
 800d260:	9301      	str	r3, [sp, #4]
 800d262:	9200      	str	r2, [sp, #0]
 800d264:	2301      	movs	r3, #1
 800d266:	2201      	movs	r2, #1
 800d268:	2125      	movs	r1, #37	; 0x25
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f7ff fc7b 	bl	800cb66 <SPI_ETH_REG>
	 uint16_t b=0;
 800d270:	2300      	movs	r3, #0
 800d272:	81fb      	strh	r3, [r7, #14]
	 uint8_t spi_Data[2];
	 b = SPI_ETH_REG(ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2);
 800d274:	2302      	movs	r3, #2
 800d276:	9301      	str	r3, [sp, #4]
 800d278:	f107 030c 	add.w	r3, r7, #12
 800d27c:	9300      	str	r3, [sp, #0]
 800d27e:	2300      	movs	r3, #0
 800d280:	2201      	movs	r2, #1
 800d282:	2124      	movs	r1, #36	; 0x24
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f7ff fc6e 	bl	800cb66 <SPI_ETH_REG>
 800d28a:	4603      	mov	r3, r0
 800d28c:	81fb      	strh	r3, [r7, #14]
	 //ITM0_Write("\r\nETH-W5500-SOCK0 TCP SET\r\n",strlen("\r\nETH-W5500-SOCK0 TCP SET"));									//same for server and client
	 SPI_ETH_REG(ETH, S_PORT, S0_REG,SPI_WRITE, ETH->S_PORT,2);									//same for server and client
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d294:	3302      	adds	r3, #2
 800d296:	2202      	movs	r2, #2
 800d298:	9201      	str	r2, [sp, #4]
 800d29a:	9300      	str	r3, [sp, #0]
 800d29c:	2301      	movs	r3, #1
 800d29e:	2201      	movs	r2, #1
 800d2a0:	2104      	movs	r1, #4
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f7ff fc5f 	bl	800cb66 <SPI_ETH_REG>
	 //HAL_Delay(100);
	 ITM0_Write("\r\nETH-W5500-SOCK0 TCP REMOTE IP TO CONNECT\r\n",strlen("\r\nETH-W5500-SOCK0 TCP REMOTE IP TO CONNECT\r\n"));									// client
 800d2a8:	212c      	movs	r1, #44	; 0x2c
 800d2aa:	4804      	ldr	r0, [pc, #16]	; (800d2bc <eth_socket_init+0x28c>)
 800d2ac:	f7f4 f864 	bl	8001378 <ITM0_Write>


}
 800d2b0:	bf00      	nop
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3710      	adds	r7, #16
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	08010470 	.word	0x08010470

0800d2c0 <eth_rd_SOCKET_STAT>:

uint8_t eth_rd_SOCKET_STAT(struct  W5500_SPI * y, uint8_t socket)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	70fb      	strb	r3, [r7, #3]
			y->TX[0]= 0x00; 				//High Address Phase Hardcoded Stat Register
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	771a      	strb	r2, [r3, #28]
			y->TX[1]= 0x03;					//Low Address Phase Mode
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2203      	movs	r2, #3
 800d2d6:	775a      	strb	r2, [r3, #29]
			y->TX[2]= ((socket)<<3)|0x00;	   //Control Phase address + R/W + OP Mode
 800d2d8:	78fb      	ldrb	r3, [r7, #3]
 800d2da:	00db      	lsls	r3, r3, #3
 800d2dc:	b2da      	uxtb	r2, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	779a      	strb	r2, [r3, #30]
			SPI_ETH(y);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f7ff fc17 	bl	800cb16 <SPI_ETH>
			return(y->RX[3]);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23

}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3708      	adds	r7, #8
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}

0800d2f6 <eth_rd_SOCKET_CMD>:

uint8_t eth_rd_SOCKET_CMD(struct  W5500_SPI * y, uint8_t socket)
{
 800d2f6:	b580      	push	{r7, lr}
 800d2f8:	b082      	sub	sp, #8
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	6078      	str	r0, [r7, #4]
 800d2fe:	460b      	mov	r3, r1
 800d300:	70fb      	strb	r3, [r7, #3]
			y->TX[0]= 0x00; 				//High Address Phase Hardcoded Command Register
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2200      	movs	r2, #0
 800d306:	771a      	strb	r2, [r3, #28]
			y->TX[1]= 0x01;					//Low Address Phase Mode
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2201      	movs	r2, #1
 800d30c:	775a      	strb	r2, [r3, #29]
			y->TX[2]= ((socket)<<3)|0x00;	   //Control Phase address + R/W + OP Mode
 800d30e:	78fb      	ldrb	r3, [r7, #3]
 800d310:	00db      	lsls	r3, r3, #3
 800d312:	b2da      	uxtb	r2, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	779a      	strb	r2, [r3, #30]
			SPI_ETH(y);
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f7ff fbfc 	bl	800cb16 <SPI_ETH>
			return(y->RX[3]);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23

}
 800d324:	4618      	mov	r0, r3
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <eth_rd_SOCKET_DATA>:

uint16_t  eth_rd_SOCKET_DATA(struct W5500_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t sizedata)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b08c      	sub	sp, #48	; 0x30
 800d330:	af02      	add	r7, sp, #8
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	607a      	str	r2, [r7, #4]
 800d336:	461a      	mov	r2, r3
 800d338:	460b      	mov	r3, r1
 800d33a:	72fb      	strb	r3, [r7, #11]
 800d33c:	4613      	mov	r3, r2
 800d33e:	813b      	strh	r3, [r7, #8]
	uint16_t S_bf_rcv_offset=0,
 800d340:	2300      	movs	r3, #0
 800d342:	84fb      	strh	r3, [r7, #38]	; 0x26
			 left_size=0,
 800d344:	2300      	movs	r3, #0
 800d346:	84bb      	strh	r3, [r7, #36]	; 0x24
			 upper_size=0,
 800d348:	2300      	movs	r3, #0
 800d34a:	847b      	strh	r3, [r7, #34]	; 0x22
			 destination_addr=0,
 800d34c:	2300      	movs	r3, #0
 800d34e:	843b      	strh	r3, [r7, #32]
			 S_RX_RD=0,
 800d350:	2300      	movs	r3, #0
 800d352:	83fb      	strh	r3, [r7, #30]
			 S_get_offset=0,
 800d354:	2300      	movs	r3, #0
 800d356:	83bb      	strh	r3, [r7, #28]
			 S_get_start_address=0,
 800d358:	2300      	movs	r3, #0
 800d35a:	837b      	strh	r3, [r7, #26]
			 S_mem_pointer=0,
 800d35c:	2300      	movs	r3, #0
 800d35e:	833b      	strh	r3, [r7, #24]
			 RX_MASK=0,
 800d360:	2300      	movs	r3, #0
 800d362:	82fb      	strh	r3, [r7, #22]
			 RX_BASE=0;
 800d364:	2300      	movs	r3, #0
 800d366:	82bb      	strh	r3, [r7, #20]
			RX_BASE=ETH->gS3_RX_BASE;
		}
		break;*/
		default :
		{
			RX_MASK=ETH->gS_RX_MASK;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d36e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d372:	82fb      	strh	r3, [r7, #22]
			RX_BASE=ETH->gS_RX_BASE;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d37a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d37e:	82bb      	strh	r3, [r7, #20]
		}
		break;
 800d380:	bf00      	nop
	}

	S_RX_RD = SPI_ETH_REG(ETH, S_RX_RD0 ,S0_REG ,SPI_READ, spi_Data,2);//S_RX_RD = SPI_ETH_REG(ETH, S_RX_RD_ADDR_BASEHH + socket ,S_RX_RD_ADDR_BASEHL ,SPI_READ, spi_Data,2);
 800d382:	2302      	movs	r3, #2
 800d384:	9301      	str	r3, [sp, #4]
 800d386:	f107 0310 	add.w	r3, r7, #16
 800d38a:	9300      	str	r3, [sp, #0]
 800d38c:	2300      	movs	r3, #0
 800d38e:	2201      	movs	r2, #1
 800d390:	2128      	movs	r1, #40	; 0x28
 800d392:	68f8      	ldr	r0, [r7, #12]
 800d394:	f7ff fbe7 	bl	800cb66 <SPI_ETH_REG>
 800d398:	4603      	mov	r3, r0
 800d39a:	83fb      	strh	r3, [r7, #30]
	S_get_offset = S_RX_RD & RX_MASK;
 800d39c:	8bfa      	ldrh	r2, [r7, #30]
 800d39e:	8afb      	ldrh	r3, [r7, #22]
 800d3a0:	4013      	ands	r3, r2
 800d3a2:	83bb      	strh	r3, [r7, #28]
	S_get_start_address  = RX_BASE + S_get_offset;
 800d3a4:	8aba      	ldrh	r2, [r7, #20]
 800d3a6:	8bbb      	ldrh	r3, [r7, #28]
 800d3a8:	4413      	add	r3, r2
 800d3aa:	837b      	strh	r3, [r7, #26]
	if((S_get_offset  + sizedata )>(RX_MASK + 1))
 800d3ac:	8bba      	ldrh	r2, [r7, #28]
 800d3ae:	893b      	ldrh	r3, [r7, #8]
 800d3b0:	441a      	add	r2, r3
 800d3b2:	8afb      	ldrh	r3, [r7, #22]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	dd30      	ble.n	800d41c <eth_rd_SOCKET_DATA+0xf0>
		{
			upper_size = (RX_MASK + 1) - S_get_offset ;
 800d3ba:	8afa      	ldrh	r2, [r7, #22]
 800d3bc:	8bbb      	ldrh	r3, [r7, #28]
 800d3be:	1ad3      	subs	r3, r2, r3
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	847b      	strh	r3, [r7, #34]	; 0x22
			SPI_ETH_RD_RCV_REG_16(ETH , S_get_start_address , ETH->data , S_bf_rcv_offset, upper_size, socket);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d3cc:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800d3ce:	8b79      	ldrh	r1, [r7, #26]
 800d3d0:	7afb      	ldrb	r3, [r7, #11]
 800d3d2:	9301      	str	r3, [sp, #4]
 800d3d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	4603      	mov	r3, r0
 800d3da:	68f8      	ldr	r0, [r7, #12]
 800d3dc:	f7ff fc90 	bl	800cd00 <SPI_ETH_RD_RCV_REG_16>
			destination_addr+=upper_size;
 800d3e0:	8c3a      	ldrh	r2, [r7, #32]
 800d3e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3e4:	4413      	add	r3, r2
 800d3e6:	843b      	strh	r3, [r7, #32]
			left_size=sizedata-upper_size;
 800d3e8:	893a      	ldrh	r2, [r7, #8]
 800d3ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3ec:	1ad3      	subs	r3, r2, r3
 800d3ee:	84bb      	strh	r3, [r7, #36]	; 0x24
			S_bf_rcv_offset=upper_size;
 800d3f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3f2:	84fb      	strh	r3, [r7, #38]	; 0x26
			SPI_ETH_RD_RCV_REG_16(ETH , RX_BASE , ETH->data , S_bf_rcv_offset, left_size, socket);
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d3fa:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800d3fc:	8ab9      	ldrh	r1, [r7, #20]
 800d3fe:	7afb      	ldrb	r3, [r7, #11]
 800d400:	9301      	str	r3, [sp, #4]
 800d402:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	4603      	mov	r3, r0
 800d408:	68f8      	ldr	r0, [r7, #12]
 800d40a:	f7ff fc79 	bl	800cd00 <SPI_ETH_RD_RCV_REG_16>
			*mem_pointer=S_RX_RD + sizedata;
 800d40e:	8bfa      	ldrh	r2, [r7, #30]
 800d410:	893b      	ldrh	r3, [r7, #8]
 800d412:	4413      	add	r3, r2
 800d414:	b29a      	uxth	r2, r3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	801a      	strh	r2, [r3, #0]
 800d41a:	e012      	b.n	800d442 <eth_rd_SOCKET_DATA+0x116>
		}
		else
			{
				SPI_ETH_RD_RCV_REG_16(ETH , S_get_start_address , ETH->data , S_bf_rcv_offset, sizedata, socket);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d422:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800d424:	8b79      	ldrh	r1, [r7, #26]
 800d426:	7afb      	ldrb	r3, [r7, #11]
 800d428:	9301      	str	r3, [sp, #4]
 800d42a:	893b      	ldrh	r3, [r7, #8]
 800d42c:	9300      	str	r3, [sp, #0]
 800d42e:	4603      	mov	r3, r0
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	f7ff fc65 	bl	800cd00 <SPI_ETH_RD_RCV_REG_16>
				*mem_pointer=S_RX_RD + sizedata;
 800d436:	8bfa      	ldrh	r2, [r7, #30]
 800d438:	893b      	ldrh	r3, [r7, #8]
 800d43a:	4413      	add	r3, r2
 800d43c:	b29a      	uxth	r2, r3
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	801a      	strh	r2, [r3, #0]
			}
	return(mem_pointer);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	b29b      	uxth	r3, r3
}
 800d446:	4618      	mov	r0, r3
 800d448:	3728      	adds	r7, #40	; 0x28
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}

0800d44e <eth_wr_SOCKET_DATA>:

uint16_t eth_wr_SOCKET_DATA(struct W5500_SPI * ETH, uint8_t socket, uint16_t * mem_pointer, uint16_t send_size)
{
 800d44e:	b580      	push	{r7, lr}
 800d450:	b08c      	sub	sp, #48	; 0x30
 800d452:	af02      	add	r7, sp, #8
 800d454:	60f8      	str	r0, [r7, #12]
 800d456:	607a      	str	r2, [r7, #4]
 800d458:	461a      	mov	r2, r3
 800d45a:	460b      	mov	r3, r1
 800d45c:	72fb      	strb	r3, [r7, #11]
 800d45e:	4613      	mov	r3, r2
 800d460:	813b      	strh	r3, [r7, #8]
	uint16_t S_bf_rcv_offset=0,
 800d462:	2300      	movs	r3, #0
 800d464:	84bb      	strh	r3, [r7, #36]	; 0x24
			 left_size=0,
 800d466:	2300      	movs	r3, #0
 800d468:	847b      	strh	r3, [r7, #34]	; 0x22
			 upper_size=0,
 800d46a:	2300      	movs	r3, #0
 800d46c:	843b      	strh	r3, [r7, #32]
			 source_addr=0,
 800d46e:	2300      	movs	r3, #0
 800d470:	83fb      	strh	r3, [r7, #30]
			 Sn_TX_WR=0,
 800d472:	2300      	movs	r3, #0
 800d474:	83bb      	strh	r3, [r7, #28]
			 get_offset=0,
 800d476:	2300      	movs	r3, #0
 800d478:	837b      	strh	r3, [r7, #26]
			 get_free_size=0,
 800d47a:	2300      	movs	r3, #0
 800d47c:	84fb      	strh	r3, [r7, #38]	; 0x26
			 get_start_address=0,
 800d47e:	2300      	movs	r3, #0
 800d480:	833b      	strh	r3, [r7, #24]
			 S_mem_pointer=0,
 800d482:	2300      	movs	r3, #0
 800d484:	82fb      	strh	r3, [r7, #22]
			 TX_MASK=0,
 800d486:	2300      	movs	r3, #0
 800d488:	82bb      	strh	r3, [r7, #20]
			 TX_BASE=0;
 800d48a:	2300      	movs	r3, #0
 800d48c:	827b      	strh	r3, [r7, #18]
			TX_BASE=ETH->gS3_TX_BASE;
		}
		break;*/
		default :
		{
			TX_MASK=ETH->gS_TX_MASK;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d494:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d498:	82bb      	strh	r3, [r7, #20]
			TX_BASE=ETH->gS_TX_BASE;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d4a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d4a4:	827b      	strh	r3, [r7, #18]
		}
		break;
 800d4a6:	bf00      	nop
	}

	while(get_free_size<send_size)
 800d4a8:	e00c      	b.n	800d4c4 <eth_wr_SOCKET_DATA+0x76>
			{
				get_free_size=SPI_ETH_REG(ETH, S_TX_FSR, S0_REG ,SPI_READ, spi_Data,2);//get_free_size=SPI_ETH_REG(ETH, 0x04 + socket, 0x20 ,SPI_READ, spi_Data,2); //Leo registro S_TX_FSR	=   0x420,
 800d4aa:	2302      	movs	r3, #2
 800d4ac:	9301      	str	r3, [sp, #4]
 800d4ae:	f107 0310 	add.w	r3, r7, #16
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	2120      	movs	r1, #32
 800d4ba:	68f8      	ldr	r0, [r7, #12]
 800d4bc:	f7ff fb53 	bl	800cb66 <SPI_ETH_REG>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	84fb      	strh	r3, [r7, #38]	; 0x26
	while(get_free_size<send_size)
 800d4c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d4c6:	893b      	ldrh	r3, [r7, #8]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d3ee      	bcc.n	800d4aa <eth_wr_SOCKET_DATA+0x5c>
			}
				Sn_TX_WR = SPI_ETH_REG(ETH, S_TX_WR, S0_REG ,SPI_READ, spi_Data,2); // S_TX_RD =   0x424,Sn_TX_WR = SPI_ETH_REG(ETH, 0x04 + socket,0x24 ,SPI_READ, spi_Data,2); // S_TX_RD =   0x424,
 800d4cc:	2302      	movs	r3, #2
 800d4ce:	9301      	str	r3, [sp, #4]
 800d4d0:	f107 0310 	add.w	r3, r7, #16
 800d4d4:	9300      	str	r3, [sp, #0]
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	2201      	movs	r2, #1
 800d4da:	2124      	movs	r1, #36	; 0x24
 800d4dc:	68f8      	ldr	r0, [r7, #12]
 800d4de:	f7ff fb42 	bl	800cb66 <SPI_ETH_REG>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	83bb      	strh	r3, [r7, #28]
				get_offset= Sn_TX_WR & TX_MASK;
 800d4e6:	8bba      	ldrh	r2, [r7, #28]
 800d4e8:	8abb      	ldrh	r3, [r7, #20]
 800d4ea:	4013      	ands	r3, r2
 800d4ec:	837b      	strh	r3, [r7, #26]
				get_start_address=TX_BASE + get_offset;
 800d4ee:	8a7a      	ldrh	r2, [r7, #18]
 800d4f0:	8b7b      	ldrh	r3, [r7, #26]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	833b      	strh	r3, [r7, #24]

				if((get_offset + send_size)>(TX_MASK + 1))
 800d4f6:	8b7a      	ldrh	r2, [r7, #26]
 800d4f8:	893b      	ldrh	r3, [r7, #8]
 800d4fa:	441a      	add	r2, r3
 800d4fc:	8abb      	ldrh	r3, [r7, #20]
 800d4fe:	3301      	adds	r3, #1
 800d500:	429a      	cmp	r2, r3
 800d502:	dd30      	ble.n	800d566 <eth_wr_SOCKET_DATA+0x118>
					{
						upper_size=( TX_MASK + 1) - get_offset;
 800d504:	8aba      	ldrh	r2, [r7, #20]
 800d506:	8b7b      	ldrh	r3, [r7, #26]
 800d508:	1ad3      	subs	r3, r2, r3
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	3301      	adds	r3, #1
 800d50e:	843b      	strh	r3, [r7, #32]
						SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S_bf_rcv_offset, upper_size,socket);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d516:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800d518:	8b39      	ldrh	r1, [r7, #24]
 800d51a:	7afb      	ldrb	r3, [r7, #11]
 800d51c:	9301      	str	r3, [sp, #4]
 800d51e:	8c3b      	ldrh	r3, [r7, #32]
 800d520:	9300      	str	r3, [sp, #0]
 800d522:	4603      	mov	r3, r0
 800d524:	68f8      	ldr	r0, [r7, #12]
 800d526:	f7ff fc2b 	bl	800cd80 <SPI_ETH_WR_TX_REG_16>
						source_addr+=upper_size;
 800d52a:	8bfa      	ldrh	r2, [r7, #30]
 800d52c:	8c3b      	ldrh	r3, [r7, #32]
 800d52e:	4413      	add	r3, r2
 800d530:	83fb      	strh	r3, [r7, #30]
						left_size=send_size-upper_size;
 800d532:	893a      	ldrh	r2, [r7, #8]
 800d534:	8c3b      	ldrh	r3, [r7, #32]
 800d536:	1ad3      	subs	r3, r2, r3
 800d538:	847b      	strh	r3, [r7, #34]	; 0x22
						S_bf_rcv_offset=upper_size;
 800d53a:	8c3b      	ldrh	r3, [r7, #32]
 800d53c:	84bb      	strh	r3, [r7, #36]	; 0x24
						SPI_ETH_WR_TX_REG_16(ETH , TX_BASE , ETH->data , S_bf_rcv_offset, left_size, socket);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d544:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800d546:	8a79      	ldrh	r1, [r7, #18]
 800d548:	7afb      	ldrb	r3, [r7, #11]
 800d54a:	9301      	str	r3, [sp, #4]
 800d54c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d54e:	9300      	str	r3, [sp, #0]
 800d550:	4603      	mov	r3, r0
 800d552:	68f8      	ldr	r0, [r7, #12]
 800d554:	f7ff fc14 	bl	800cd80 <SPI_ETH_WR_TX_REG_16>
						*mem_pointer=Sn_TX_WR + send_size;
 800d558:	8bba      	ldrh	r2, [r7, #28]
 800d55a:	893b      	ldrh	r3, [r7, #8]
 800d55c:	4413      	add	r3, r2
 800d55e:	b29a      	uxth	r2, r3
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	801a      	strh	r2, [r3, #0]
 800d564:	e012      	b.n	800d58c <eth_wr_SOCKET_DATA+0x13e>
					}
				else
					{
					SPI_ETH_WR_TX_REG_16(ETH , get_start_address , ETH->data , S_bf_rcv_offset, send_size, socket);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800d56c:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 800d56e:	8b39      	ldrh	r1, [r7, #24]
 800d570:	7afb      	ldrb	r3, [r7, #11]
 800d572:	9301      	str	r3, [sp, #4]
 800d574:	893b      	ldrh	r3, [r7, #8]
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	4603      	mov	r3, r0
 800d57a:	68f8      	ldr	r0, [r7, #12]
 800d57c:	f7ff fc00 	bl	800cd80 <SPI_ETH_WR_TX_REG_16>
					*mem_pointer=Sn_TX_WR + send_size;
 800d580:	8bba      	ldrh	r2, [r7, #28]
 800d582:	893b      	ldrh	r3, [r7, #8]
 800d584:	4413      	add	r3, r2
 800d586:	b29a      	uxth	r2, r3
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	801a      	strh	r2, [r3, #0]
					}

}
 800d58c:	bf00      	nop
 800d58e:	4618      	mov	r0, r3
 800d590:	3728      	adds	r7, #40	; 0x28
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}

0800d596 <SPI_ETH_SNIFF>:

uint8_t SPI_ETH_SNIFF(struct W5500_SPY * Y,struct W5500_SPI * X)
{
 800d596:	b580      	push	{r7, lr}
 800d598:	b084      	sub	sp, #16
 800d59a:	af02      	add	r7, sp, #8
 800d59c:	6078      	str	r0, [r7, #4]
 800d59e:	6039      	str	r1, [r7, #0]
	Y->MR=SPI_ETH_REG(X, 0 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d5a6:	3318      	adds	r3, #24
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	9201      	str	r2, [sp, #4]
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	2100      	movs	r1, #0
 800d5b4:	6838      	ldr	r0, [r7, #0]
 800d5b6:	f7ff fad6 	bl	800cb66 <SPI_ETH_REG>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	b2da      	uxtb	r2, r3
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	701a      	strb	r2, [r3, #0]

	Y->GAR[0]=SPI_ETH_REG(X, 1 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d5c8:	3318      	adds	r3, #24
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	9201      	str	r2, [sp, #4]
 800d5ce:	9300      	str	r3, [sp, #0]
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	2101      	movs	r1, #1
 800d5d6:	6838      	ldr	r0, [r7, #0]
 800d5d8:	f7ff fac5 	bl	800cb66 <SPI_ETH_REG>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	b2da      	uxtb	r2, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	705a      	strb	r2, [r3, #1]
	Y->GAR[1]=SPI_ETH_REG(X, 2 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d5ea:	3318      	adds	r3, #24
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	9201      	str	r2, [sp, #4]
 800d5f0:	9300      	str	r3, [sp, #0]
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	2102      	movs	r1, #2
 800d5f8:	6838      	ldr	r0, [r7, #0]
 800d5fa:	f7ff fab4 	bl	800cb66 <SPI_ETH_REG>
 800d5fe:	4603      	mov	r3, r0
 800d600:	b2da      	uxtb	r2, r3
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	709a      	strb	r2, [r3, #2]
	Y->GAR[2]=SPI_ETH_REG(X, 3 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d60c:	3318      	adds	r3, #24
 800d60e:	2201      	movs	r2, #1
 800d610:	9201      	str	r2, [sp, #4]
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	2300      	movs	r3, #0
 800d616:	2200      	movs	r2, #0
 800d618:	2103      	movs	r1, #3
 800d61a:	6838      	ldr	r0, [r7, #0]
 800d61c:	f7ff faa3 	bl	800cb66 <SPI_ETH_REG>
 800d620:	4603      	mov	r3, r0
 800d622:	b2da      	uxtb	r2, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	70da      	strb	r2, [r3, #3]
	Y->GAR[3]=SPI_ETH_REG(X, 4 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d62e:	3318      	adds	r3, #24
 800d630:	2201      	movs	r2, #1
 800d632:	9201      	str	r2, [sp, #4]
 800d634:	9300      	str	r3, [sp, #0]
 800d636:	2300      	movs	r3, #0
 800d638:	2200      	movs	r2, #0
 800d63a:	2104      	movs	r1, #4
 800d63c:	6838      	ldr	r0, [r7, #0]
 800d63e:	f7ff fa92 	bl	800cb66 <SPI_ETH_REG>
 800d642:	4603      	mov	r3, r0
 800d644:	b2da      	uxtb	r2, r3
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	711a      	strb	r2, [r3, #4]

	Y->SUBR[0]=SPI_ETH_REG(X, 5 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d650:	3318      	adds	r3, #24
 800d652:	2201      	movs	r2, #1
 800d654:	9201      	str	r2, [sp, #4]
 800d656:	9300      	str	r3, [sp, #0]
 800d658:	2300      	movs	r3, #0
 800d65a:	2200      	movs	r2, #0
 800d65c:	2105      	movs	r1, #5
 800d65e:	6838      	ldr	r0, [r7, #0]
 800d660:	f7ff fa81 	bl	800cb66 <SPI_ETH_REG>
 800d664:	4603      	mov	r3, r0
 800d666:	b2da      	uxtb	r2, r3
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	715a      	strb	r2, [r3, #5]
	Y->SUBR[1]=SPI_ETH_REG(X, 6 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d672:	3318      	adds	r3, #24
 800d674:	2201      	movs	r2, #1
 800d676:	9201      	str	r2, [sp, #4]
 800d678:	9300      	str	r3, [sp, #0]
 800d67a:	2300      	movs	r3, #0
 800d67c:	2200      	movs	r2, #0
 800d67e:	2106      	movs	r1, #6
 800d680:	6838      	ldr	r0, [r7, #0]
 800d682:	f7ff fa70 	bl	800cb66 <SPI_ETH_REG>
 800d686:	4603      	mov	r3, r0
 800d688:	b2da      	uxtb	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	719a      	strb	r2, [r3, #6]
	Y->SUBR[2]=SPI_ETH_REG(X, 7 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d694:	3318      	adds	r3, #24
 800d696:	2201      	movs	r2, #1
 800d698:	9201      	str	r2, [sp, #4]
 800d69a:	9300      	str	r3, [sp, #0]
 800d69c:	2300      	movs	r3, #0
 800d69e:	2200      	movs	r2, #0
 800d6a0:	2107      	movs	r1, #7
 800d6a2:	6838      	ldr	r0, [r7, #0]
 800d6a4:	f7ff fa5f 	bl	800cb66 <SPI_ETH_REG>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	b2da      	uxtb	r2, r3
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	71da      	strb	r2, [r3, #7]
	Y->SUBR[3]=SPI_ETH_REG(X, 8 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d6b6:	3318      	adds	r3, #24
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	9201      	str	r2, [sp, #4]
 800d6bc:	9300      	str	r3, [sp, #0]
 800d6be:	2300      	movs	r3, #0
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	2108      	movs	r1, #8
 800d6c4:	6838      	ldr	r0, [r7, #0]
 800d6c6:	f7ff fa4e 	bl	800cb66 <SPI_ETH_REG>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	b2da      	uxtb	r2, r3
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	721a      	strb	r2, [r3, #8]

	Y->SHAR[0]=SPI_ETH_REG(X, 9 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d6d8:	3318      	adds	r3, #24
 800d6da:	2201      	movs	r2, #1
 800d6dc:	9201      	str	r2, [sp, #4]
 800d6de:	9300      	str	r3, [sp, #0]
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	2109      	movs	r1, #9
 800d6e6:	6838      	ldr	r0, [r7, #0]
 800d6e8:	f7ff fa3d 	bl	800cb66 <SPI_ETH_REG>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	b2da      	uxtb	r2, r3
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	725a      	strb	r2, [r3, #9]
	Y->SHAR[1]=SPI_ETH_REG(X, 10 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d6fa:	3318      	adds	r3, #24
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	9201      	str	r2, [sp, #4]
 800d700:	9300      	str	r3, [sp, #0]
 800d702:	2300      	movs	r3, #0
 800d704:	2200      	movs	r2, #0
 800d706:	210a      	movs	r1, #10
 800d708:	6838      	ldr	r0, [r7, #0]
 800d70a:	f7ff fa2c 	bl	800cb66 <SPI_ETH_REG>
 800d70e:	4603      	mov	r3, r0
 800d710:	b2da      	uxtb	r2, r3
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	729a      	strb	r2, [r3, #10]
	Y->SHAR[2]=SPI_ETH_REG(X, 11 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d71c:	3318      	adds	r3, #24
 800d71e:	2201      	movs	r2, #1
 800d720:	9201      	str	r2, [sp, #4]
 800d722:	9300      	str	r3, [sp, #0]
 800d724:	2300      	movs	r3, #0
 800d726:	2200      	movs	r2, #0
 800d728:	210b      	movs	r1, #11
 800d72a:	6838      	ldr	r0, [r7, #0]
 800d72c:	f7ff fa1b 	bl	800cb66 <SPI_ETH_REG>
 800d730:	4603      	mov	r3, r0
 800d732:	b2da      	uxtb	r2, r3
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	72da      	strb	r2, [r3, #11]
	Y->SHAR[3]=SPI_ETH_REG(X, 12 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d73e:	3318      	adds	r3, #24
 800d740:	2201      	movs	r2, #1
 800d742:	9201      	str	r2, [sp, #4]
 800d744:	9300      	str	r3, [sp, #0]
 800d746:	2300      	movs	r3, #0
 800d748:	2200      	movs	r2, #0
 800d74a:	210c      	movs	r1, #12
 800d74c:	6838      	ldr	r0, [r7, #0]
 800d74e:	f7ff fa0a 	bl	800cb66 <SPI_ETH_REG>
 800d752:	4603      	mov	r3, r0
 800d754:	b2da      	uxtb	r2, r3
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	731a      	strb	r2, [r3, #12]
	Y->SHAR[4]=SPI_ETH_REG(X, 13 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d760:	3318      	adds	r3, #24
 800d762:	2201      	movs	r2, #1
 800d764:	9201      	str	r2, [sp, #4]
 800d766:	9300      	str	r3, [sp, #0]
 800d768:	2300      	movs	r3, #0
 800d76a:	2200      	movs	r2, #0
 800d76c:	210d      	movs	r1, #13
 800d76e:	6838      	ldr	r0, [r7, #0]
 800d770:	f7ff f9f9 	bl	800cb66 <SPI_ETH_REG>
 800d774:	4603      	mov	r3, r0
 800d776:	b2da      	uxtb	r2, r3
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	735a      	strb	r2, [r3, #13]
	Y->SHAR[5]=SPI_ETH_REG(X, 14 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d782:	3318      	adds	r3, #24
 800d784:	2201      	movs	r2, #1
 800d786:	9201      	str	r2, [sp, #4]
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	2300      	movs	r3, #0
 800d78c:	2200      	movs	r2, #0
 800d78e:	210e      	movs	r1, #14
 800d790:	6838      	ldr	r0, [r7, #0]
 800d792:	f7ff f9e8 	bl	800cb66 <SPI_ETH_REG>
 800d796:	4603      	mov	r3, r0
 800d798:	b2da      	uxtb	r2, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	739a      	strb	r2, [r3, #14]

	Y->SIPR[0]=SPI_ETH_REG(X, 15 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d7a4:	3318      	adds	r3, #24
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	9201      	str	r2, [sp, #4]
 800d7aa:	9300      	str	r3, [sp, #0]
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	210f      	movs	r1, #15
 800d7b2:	6838      	ldr	r0, [r7, #0]
 800d7b4:	f7ff f9d7 	bl	800cb66 <SPI_ETH_REG>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	b2da      	uxtb	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	73da      	strb	r2, [r3, #15]
	Y->SIPR[1]=SPI_ETH_REG(X, 16 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d7c6:	3318      	adds	r3, #24
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	9201      	str	r2, [sp, #4]
 800d7cc:	9300      	str	r3, [sp, #0]
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	2110      	movs	r1, #16
 800d7d4:	6838      	ldr	r0, [r7, #0]
 800d7d6:	f7ff f9c6 	bl	800cb66 <SPI_ETH_REG>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	b2da      	uxtb	r2, r3
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	741a      	strb	r2, [r3, #16]
	Y->SIPR[2]=SPI_ETH_REG(X, 17 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d7e8:	3318      	adds	r3, #24
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	9201      	str	r2, [sp, #4]
 800d7ee:	9300      	str	r3, [sp, #0]
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	2111      	movs	r1, #17
 800d7f6:	6838      	ldr	r0, [r7, #0]
 800d7f8:	f7ff f9b5 	bl	800cb66 <SPI_ETH_REG>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	b2da      	uxtb	r2, r3
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	745a      	strb	r2, [r3, #17]
	Y->SIPR[3]=SPI_ETH_REG(X, 18 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d80a:	3318      	adds	r3, #24
 800d80c:	2201      	movs	r2, #1
 800d80e:	9201      	str	r2, [sp, #4]
 800d810:	9300      	str	r3, [sp, #0]
 800d812:	2300      	movs	r3, #0
 800d814:	2200      	movs	r2, #0
 800d816:	2112      	movs	r1, #18
 800d818:	6838      	ldr	r0, [r7, #0]
 800d81a:	f7ff f9a4 	bl	800cb66 <SPI_ETH_REG>
 800d81e:	4603      	mov	r3, r0
 800d820:	b2da      	uxtb	r2, r3
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	749a      	strb	r2, [r3, #18]

	Y->INTLEVEL[0]=SPI_ETH_REG(X, 19 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d82c:	3318      	adds	r3, #24
 800d82e:	2201      	movs	r2, #1
 800d830:	9201      	str	r2, [sp, #4]
 800d832:	9300      	str	r3, [sp, #0]
 800d834:	2300      	movs	r3, #0
 800d836:	2200      	movs	r2, #0
 800d838:	2113      	movs	r1, #19
 800d83a:	6838      	ldr	r0, [r7, #0]
 800d83c:	f7ff f993 	bl	800cb66 <SPI_ETH_REG>
 800d840:	4603      	mov	r3, r0
 800d842:	b2da      	uxtb	r2, r3
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	74da      	strb	r2, [r3, #19]
	Y->INTLEVEL[1]=SPI_ETH_REG(X, 20 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d84e:	3318      	adds	r3, #24
 800d850:	2201      	movs	r2, #1
 800d852:	9201      	str	r2, [sp, #4]
 800d854:	9300      	str	r3, [sp, #0]
 800d856:	2300      	movs	r3, #0
 800d858:	2200      	movs	r2, #0
 800d85a:	2114      	movs	r1, #20
 800d85c:	6838      	ldr	r0, [r7, #0]
 800d85e:	f7ff f982 	bl	800cb66 <SPI_ETH_REG>
 800d862:	4603      	mov	r3, r0
 800d864:	b2da      	uxtb	r2, r3
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	751a      	strb	r2, [r3, #20]

	Y->IR=SPI_ETH_REG(X, 21 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d870:	3318      	adds	r3, #24
 800d872:	2201      	movs	r2, #1
 800d874:	9201      	str	r2, [sp, #4]
 800d876:	9300      	str	r3, [sp, #0]
 800d878:	2300      	movs	r3, #0
 800d87a:	2200      	movs	r2, #0
 800d87c:	2115      	movs	r1, #21
 800d87e:	6838      	ldr	r0, [r7, #0]
 800d880:	f7ff f971 	bl	800cb66 <SPI_ETH_REG>
 800d884:	4603      	mov	r3, r0
 800d886:	b2da      	uxtb	r2, r3
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	755a      	strb	r2, [r3, #21]

	Y->IMR=SPI_ETH_REG(X, 22 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d892:	3318      	adds	r3, #24
 800d894:	2201      	movs	r2, #1
 800d896:	9201      	str	r2, [sp, #4]
 800d898:	9300      	str	r3, [sp, #0]
 800d89a:	2300      	movs	r3, #0
 800d89c:	2200      	movs	r2, #0
 800d89e:	2116      	movs	r1, #22
 800d8a0:	6838      	ldr	r0, [r7, #0]
 800d8a2:	f7ff f960 	bl	800cb66 <SPI_ETH_REG>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	759a      	strb	r2, [r3, #22]

	Y->SIR=SPI_ETH_REG(X, 23 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d8b4:	3318      	adds	r3, #24
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	9201      	str	r2, [sp, #4]
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	2300      	movs	r3, #0
 800d8be:	2200      	movs	r2, #0
 800d8c0:	2117      	movs	r1, #23
 800d8c2:	6838      	ldr	r0, [r7, #0]
 800d8c4:	f7ff f94f 	bl	800cb66 <SPI_ETH_REG>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	b2da      	uxtb	r2, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	75da      	strb	r2, [r3, #23]

	Y->SIMR=SPI_ETH_REG(X, 24 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d8d6:	3318      	adds	r3, #24
 800d8d8:	2201      	movs	r2, #1
 800d8da:	9201      	str	r2, [sp, #4]
 800d8dc:	9300      	str	r3, [sp, #0]
 800d8de:	2300      	movs	r3, #0
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	2118      	movs	r1, #24
 800d8e4:	6838      	ldr	r0, [r7, #0]
 800d8e6:	f7ff f93e 	bl	800cb66 <SPI_ETH_REG>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	b2da      	uxtb	r2, r3
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	761a      	strb	r2, [r3, #24]

	Y->RTR[0]=SPI_ETH_REG(X, 25 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d8f8:	3318      	adds	r3, #24
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	9201      	str	r2, [sp, #4]
 800d8fe:	9300      	str	r3, [sp, #0]
 800d900:	2300      	movs	r3, #0
 800d902:	2200      	movs	r2, #0
 800d904:	2119      	movs	r1, #25
 800d906:	6838      	ldr	r0, [r7, #0]
 800d908:	f7ff f92d 	bl	800cb66 <SPI_ETH_REG>
 800d90c:	4603      	mov	r3, r0
 800d90e:	b2da      	uxtb	r2, r3
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	765a      	strb	r2, [r3, #25]
	Y->RTR[1]=SPI_ETH_REG(X, 26 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d91a:	3318      	adds	r3, #24
 800d91c:	2201      	movs	r2, #1
 800d91e:	9201      	str	r2, [sp, #4]
 800d920:	9300      	str	r3, [sp, #0]
 800d922:	2300      	movs	r3, #0
 800d924:	2200      	movs	r2, #0
 800d926:	211a      	movs	r1, #26
 800d928:	6838      	ldr	r0, [r7, #0]
 800d92a:	f7ff f91c 	bl	800cb66 <SPI_ETH_REG>
 800d92e:	4603      	mov	r3, r0
 800d930:	b2da      	uxtb	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	769a      	strb	r2, [r3, #26]

	Y->RCR=SPI_ETH_REG(X, 27 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d93c:	3318      	adds	r3, #24
 800d93e:	2201      	movs	r2, #1
 800d940:	9201      	str	r2, [sp, #4]
 800d942:	9300      	str	r3, [sp, #0]
 800d944:	2300      	movs	r3, #0
 800d946:	2200      	movs	r2, #0
 800d948:	211b      	movs	r1, #27
 800d94a:	6838      	ldr	r0, [r7, #0]
 800d94c:	f7ff f90b 	bl	800cb66 <SPI_ETH_REG>
 800d950:	4603      	mov	r3, r0
 800d952:	b2da      	uxtb	r2, r3
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	76da      	strb	r2, [r3, #27]

	Y->PTIMER=SPI_ETH_REG(X, 28 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d95e:	3318      	adds	r3, #24
 800d960:	2201      	movs	r2, #1
 800d962:	9201      	str	r2, [sp, #4]
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	2300      	movs	r3, #0
 800d968:	2200      	movs	r2, #0
 800d96a:	211c      	movs	r1, #28
 800d96c:	6838      	ldr	r0, [r7, #0]
 800d96e:	f7ff f8fa 	bl	800cb66 <SPI_ETH_REG>
 800d972:	4603      	mov	r3, r0
 800d974:	b2da      	uxtb	r2, r3
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	771a      	strb	r2, [r3, #28]

	Y->PMAGIC=SPI_ETH_REG(X, 29 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d980:	3318      	adds	r3, #24
 800d982:	2201      	movs	r2, #1
 800d984:	9201      	str	r2, [sp, #4]
 800d986:	9300      	str	r3, [sp, #0]
 800d988:	2300      	movs	r3, #0
 800d98a:	2200      	movs	r2, #0
 800d98c:	211d      	movs	r1, #29
 800d98e:	6838      	ldr	r0, [r7, #0]
 800d990:	f7ff f8e9 	bl	800cb66 <SPI_ETH_REG>
 800d994:	4603      	mov	r3, r0
 800d996:	b2da      	uxtb	r2, r3
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	775a      	strb	r2, [r3, #29]

	Y->PHAR[0]=SPI_ETH_REG(X, 30 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d9a2:	3318      	adds	r3, #24
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	9201      	str	r2, [sp, #4]
 800d9a8:	9300      	str	r3, [sp, #0]
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	211e      	movs	r1, #30
 800d9b0:	6838      	ldr	r0, [r7, #0]
 800d9b2:	f7ff f8d8 	bl	800cb66 <SPI_ETH_REG>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	b2da      	uxtb	r2, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	779a      	strb	r2, [r3, #30]
	Y->PHAR[1]=SPI_ETH_REG(X, 31 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d9c4:	3318      	adds	r3, #24
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	9201      	str	r2, [sp, #4]
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	211f      	movs	r1, #31
 800d9d2:	6838      	ldr	r0, [r7, #0]
 800d9d4:	f7ff f8c7 	bl	800cb66 <SPI_ETH_REG>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	b2da      	uxtb	r2, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	77da      	strb	r2, [r3, #31]
	Y->PHAR[2]=SPI_ETH_REG(X, 32 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800d9e6:	3318      	adds	r3, #24
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	9201      	str	r2, [sp, #4]
 800d9ec:	9300      	str	r3, [sp, #0]
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	2120      	movs	r1, #32
 800d9f4:	6838      	ldr	r0, [r7, #0]
 800d9f6:	f7ff f8b6 	bl	800cb66 <SPI_ETH_REG>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f883 2020 	strb.w	r2, [r3, #32]
	Y->PHAR[3]=SPI_ETH_REG(X, 33 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800da0a:	3318      	adds	r3, #24
 800da0c:	2201      	movs	r2, #1
 800da0e:	9201      	str	r2, [sp, #4]
 800da10:	9300      	str	r3, [sp, #0]
 800da12:	2300      	movs	r3, #0
 800da14:	2200      	movs	r2, #0
 800da16:	2121      	movs	r1, #33	; 0x21
 800da18:	6838      	ldr	r0, [r7, #0]
 800da1a:	f7ff f8a4 	bl	800cb66 <SPI_ETH_REG>
 800da1e:	4603      	mov	r3, r0
 800da20:	b2da      	uxtb	r2, r3
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	Y->PHAR[4]=SPI_ETH_REG(X, 34 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800da2e:	3318      	adds	r3, #24
 800da30:	2201      	movs	r2, #1
 800da32:	9201      	str	r2, [sp, #4]
 800da34:	9300      	str	r3, [sp, #0]
 800da36:	2300      	movs	r3, #0
 800da38:	2200      	movs	r2, #0
 800da3a:	2122      	movs	r1, #34	; 0x22
 800da3c:	6838      	ldr	r0, [r7, #0]
 800da3e:	f7ff f892 	bl	800cb66 <SPI_ETH_REG>
 800da42:	4603      	mov	r3, r0
 800da44:	b2da      	uxtb	r2, r3
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	Y->PHAR[5]=SPI_ETH_REG(X, 35 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800da52:	3318      	adds	r3, #24
 800da54:	2201      	movs	r2, #1
 800da56:	9201      	str	r2, [sp, #4]
 800da58:	9300      	str	r3, [sp, #0]
 800da5a:	2300      	movs	r3, #0
 800da5c:	2200      	movs	r2, #0
 800da5e:	2123      	movs	r1, #35	; 0x23
 800da60:	6838      	ldr	r0, [r7, #0]
 800da62:	f7ff f880 	bl	800cb66 <SPI_ETH_REG>
 800da66:	4603      	mov	r3, r0
 800da68:	b2da      	uxtb	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	Y->PSID[0]=SPI_ETH_REG(X, 36 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800da76:	3318      	adds	r3, #24
 800da78:	2201      	movs	r2, #1
 800da7a:	9201      	str	r2, [sp, #4]
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	2300      	movs	r3, #0
 800da80:	2200      	movs	r2, #0
 800da82:	2124      	movs	r1, #36	; 0x24
 800da84:	6838      	ldr	r0, [r7, #0]
 800da86:	f7ff f86e 	bl	800cb66 <SPI_ETH_REG>
 800da8a:	4603      	mov	r3, r0
 800da8c:	b2da      	uxtb	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	Y->PSID[1]=SPI_ETH_REG(X, 37 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800da9a:	3318      	adds	r3, #24
 800da9c:	2201      	movs	r2, #1
 800da9e:	9201      	str	r2, [sp, #4]
 800daa0:	9300      	str	r3, [sp, #0]
 800daa2:	2300      	movs	r3, #0
 800daa4:	2200      	movs	r2, #0
 800daa6:	2125      	movs	r1, #37	; 0x25
 800daa8:	6838      	ldr	r0, [r7, #0]
 800daaa:	f7ff f85c 	bl	800cb66 <SPI_ETH_REG>
 800daae:	4603      	mov	r3, r0
 800dab0:	b2da      	uxtb	r2, r3
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	Y->PMRU[0]=SPI_ETH_REG(X, 38 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dabe:	3318      	adds	r3, #24
 800dac0:	2201      	movs	r2, #1
 800dac2:	9201      	str	r2, [sp, #4]
 800dac4:	9300      	str	r3, [sp, #0]
 800dac6:	2300      	movs	r3, #0
 800dac8:	2200      	movs	r2, #0
 800daca:	2126      	movs	r1, #38	; 0x26
 800dacc:	6838      	ldr	r0, [r7, #0]
 800dace:	f7ff f84a 	bl	800cb66 <SPI_ETH_REG>
 800dad2:	4603      	mov	r3, r0
 800dad4:	b2da      	uxtb	r2, r3
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Y->PMRU[1]=SPI_ETH_REG(X, 39 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dae2:	3318      	adds	r3, #24
 800dae4:	2201      	movs	r2, #1
 800dae6:	9201      	str	r2, [sp, #4]
 800dae8:	9300      	str	r3, [sp, #0]
 800daea:	2300      	movs	r3, #0
 800daec:	2200      	movs	r2, #0
 800daee:	2127      	movs	r1, #39	; 0x27
 800daf0:	6838      	ldr	r0, [r7, #0]
 800daf2:	f7ff f838 	bl	800cb66 <SPI_ETH_REG>
 800daf6:	4603      	mov	r3, r0
 800daf8:	b2da      	uxtb	r2, r3
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	Y->UIPR[0]=SPI_ETH_REG(X, 40 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db06:	3318      	adds	r3, #24
 800db08:	2201      	movs	r2, #1
 800db0a:	9201      	str	r2, [sp, #4]
 800db0c:	9300      	str	r3, [sp, #0]
 800db0e:	2300      	movs	r3, #0
 800db10:	2200      	movs	r2, #0
 800db12:	2128      	movs	r1, #40	; 0x28
 800db14:	6838      	ldr	r0, [r7, #0]
 800db16:	f7ff f826 	bl	800cb66 <SPI_ETH_REG>
 800db1a:	4603      	mov	r3, r0
 800db1c:	b2da      	uxtb	r2, r3
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	Y->UIPR[1]=SPI_ETH_REG(X, 41 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db2a:	3318      	adds	r3, #24
 800db2c:	2201      	movs	r2, #1
 800db2e:	9201      	str	r2, [sp, #4]
 800db30:	9300      	str	r3, [sp, #0]
 800db32:	2300      	movs	r3, #0
 800db34:	2200      	movs	r2, #0
 800db36:	2129      	movs	r1, #41	; 0x29
 800db38:	6838      	ldr	r0, [r7, #0]
 800db3a:	f7ff f814 	bl	800cb66 <SPI_ETH_REG>
 800db3e:	4603      	mov	r3, r0
 800db40:	b2da      	uxtb	r2, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	Y->UIPR[2]=SPI_ETH_REG(X, 42 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db4e:	3318      	adds	r3, #24
 800db50:	2201      	movs	r2, #1
 800db52:	9201      	str	r2, [sp, #4]
 800db54:	9300      	str	r3, [sp, #0]
 800db56:	2300      	movs	r3, #0
 800db58:	2200      	movs	r2, #0
 800db5a:	212a      	movs	r1, #42	; 0x2a
 800db5c:	6838      	ldr	r0, [r7, #0]
 800db5e:	f7ff f802 	bl	800cb66 <SPI_ETH_REG>
 800db62:	4603      	mov	r3, r0
 800db64:	b2da      	uxtb	r2, r3
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	Y->UIPR[3]=SPI_ETH_REG(X, 43 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db72:	3318      	adds	r3, #24
 800db74:	2201      	movs	r2, #1
 800db76:	9201      	str	r2, [sp, #4]
 800db78:	9300      	str	r3, [sp, #0]
 800db7a:	2300      	movs	r3, #0
 800db7c:	2200      	movs	r2, #0
 800db7e:	212b      	movs	r1, #43	; 0x2b
 800db80:	6838      	ldr	r0, [r7, #0]
 800db82:	f7fe fff0 	bl	800cb66 <SPI_ETH_REG>
 800db86:	4603      	mov	r3, r0
 800db88:	b2da      	uxtb	r2, r3
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	Y->UPORT[0]=SPI_ETH_REG(X, 44 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800db96:	3318      	adds	r3, #24
 800db98:	2201      	movs	r2, #1
 800db9a:	9201      	str	r2, [sp, #4]
 800db9c:	9300      	str	r3, [sp, #0]
 800db9e:	2300      	movs	r3, #0
 800dba0:	2200      	movs	r2, #0
 800dba2:	212c      	movs	r1, #44	; 0x2c
 800dba4:	6838      	ldr	r0, [r7, #0]
 800dba6:	f7fe ffde 	bl	800cb66 <SPI_ETH_REG>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	b2da      	uxtb	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	Y->UPORT[1]=SPI_ETH_REG(X, 45 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dbba:	3318      	adds	r3, #24
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	9201      	str	r2, [sp, #4]
 800dbc0:	9300      	str	r3, [sp, #0]
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	212d      	movs	r1, #45	; 0x2d
 800dbc8:	6838      	ldr	r0, [r7, #0]
 800dbca:	f7fe ffcc 	bl	800cb66 <SPI_ETH_REG>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	b2da      	uxtb	r2, r3
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	Y->PHYCFGR=SPI_ETH_REG(X, 46 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dbde:	3318      	adds	r3, #24
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	9201      	str	r2, [sp, #4]
 800dbe4:	9300      	str	r3, [sp, #0]
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	2200      	movs	r2, #0
 800dbea:	212e      	movs	r1, #46	; 0x2e
 800dbec:	6838      	ldr	r0, [r7, #0]
 800dbee:	f7fe ffba 	bl	800cb66 <SPI_ETH_REG>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	b2da      	uxtb	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	Y->VERSIONR=SPI_ETH_REG(X, 57 ,COMM_REG,SPI_READ, Y->DUMMY,1);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc02:	3318      	adds	r3, #24
 800dc04:	2201      	movs	r2, #1
 800dc06:	9201      	str	r2, [sp, #4]
 800dc08:	9300      	str	r3, [sp, #0]
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	2139      	movs	r1, #57	; 0x39
 800dc10:	6838      	ldr	r0, [r7, #0]
 800dc12:	f7fe ffa8 	bl	800cb66 <SPI_ETH_REG>
 800dc16:	4603      	mov	r3, r0
 800dc18:	b2da      	uxtb	r2, r3
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	//---------------------------port -------------------------//
	Y->Sn_MR=SPI_ETH_REG(X, 0x00 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc26:	3318      	adds	r3, #24
 800dc28:	2201      	movs	r2, #1
 800dc2a:	9201      	str	r2, [sp, #4]
 800dc2c:	9300      	str	r3, [sp, #0]
 800dc2e:	2300      	movs	r3, #0
 800dc30:	2201      	movs	r2, #1
 800dc32:	2100      	movs	r1, #0
 800dc34:	6838      	ldr	r0, [r7, #0]
 800dc36:	f7fe ff96 	bl	800cb66 <SPI_ETH_REG>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	b2da      	uxtb	r2, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	Y->Sn_CR=SPI_ETH_REG(X, 0x01 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc4a:	3318      	adds	r3, #24
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	9201      	str	r2, [sp, #4]
 800dc50:	9300      	str	r3, [sp, #0]
 800dc52:	2300      	movs	r3, #0
 800dc54:	2201      	movs	r2, #1
 800dc56:	2101      	movs	r1, #1
 800dc58:	6838      	ldr	r0, [r7, #0]
 800dc5a:	f7fe ff84 	bl	800cb66 <SPI_ETH_REG>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	b2da      	uxtb	r2, r3
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	Y->Sn_IR=SPI_ETH_REG(X, 0x02 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc6e:	3318      	adds	r3, #24
 800dc70:	2201      	movs	r2, #1
 800dc72:	9201      	str	r2, [sp, #4]
 800dc74:	9300      	str	r3, [sp, #0]
 800dc76:	2300      	movs	r3, #0
 800dc78:	2201      	movs	r2, #1
 800dc7a:	2102      	movs	r1, #2
 800dc7c:	6838      	ldr	r0, [r7, #0]
 800dc7e:	f7fe ff72 	bl	800cb66 <SPI_ETH_REG>
 800dc82:	4603      	mov	r3, r0
 800dc84:	b2da      	uxtb	r2, r3
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	Y->Sn_SR=SPI_ETH_REG(X, 0x03 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dc92:	3318      	adds	r3, #24
 800dc94:	2201      	movs	r2, #1
 800dc96:	9201      	str	r2, [sp, #4]
 800dc98:	9300      	str	r3, [sp, #0]
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	2103      	movs	r1, #3
 800dca0:	6838      	ldr	r0, [r7, #0]
 800dca2:	f7fe ff60 	bl	800cb66 <SPI_ETH_REG>
 800dca6:	4603      	mov	r3, r0
 800dca8:	b2da      	uxtb	r2, r3
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	Y->Sn_PORT[0]=SPI_ETH_REG(X, 0x04 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dcb6:	3318      	adds	r3, #24
 800dcb8:	2201      	movs	r2, #1
 800dcba:	9201      	str	r2, [sp, #4]
 800dcbc:	9300      	str	r3, [sp, #0]
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	2104      	movs	r1, #4
 800dcc4:	6838      	ldr	r0, [r7, #0]
 800dcc6:	f7fe ff4e 	bl	800cb66 <SPI_ETH_REG>
 800dcca:	4603      	mov	r3, r0
 800dccc:	b2da      	uxtb	r2, r3
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Y->Sn_PORT[1]=SPI_ETH_REG(X, 0x05 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dcda:	3318      	adds	r3, #24
 800dcdc:	2201      	movs	r2, #1
 800dcde:	9201      	str	r2, [sp, #4]
 800dce0:	9300      	str	r3, [sp, #0]
 800dce2:	2300      	movs	r3, #0
 800dce4:	2201      	movs	r2, #1
 800dce6:	2105      	movs	r1, #5
 800dce8:	6838      	ldr	r0, [r7, #0]
 800dcea:	f7fe ff3c 	bl	800cb66 <SPI_ETH_REG>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	b2da      	uxtb	r2, r3
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	Y->Sn_DHAR[0]=SPI_ETH_REG(X, 0x06 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dcfe:	3318      	adds	r3, #24
 800dd00:	2201      	movs	r2, #1
 800dd02:	9201      	str	r2, [sp, #4]
 800dd04:	9300      	str	r3, [sp, #0]
 800dd06:	2300      	movs	r3, #0
 800dd08:	2201      	movs	r2, #1
 800dd0a:	2106      	movs	r1, #6
 800dd0c:	6838      	ldr	r0, [r7, #0]
 800dd0e:	f7fe ff2a 	bl	800cb66 <SPI_ETH_REG>
 800dd12:	4603      	mov	r3, r0
 800dd14:	b2da      	uxtb	r2, r3
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	Y->Sn_DHAR[1]=SPI_ETH_REG(X, 0x07 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd22:	3318      	adds	r3, #24
 800dd24:	2201      	movs	r2, #1
 800dd26:	9201      	str	r2, [sp, #4]
 800dd28:	9300      	str	r3, [sp, #0]
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	2107      	movs	r1, #7
 800dd30:	6838      	ldr	r0, [r7, #0]
 800dd32:	f7fe ff18 	bl	800cb66 <SPI_ETH_REG>
 800dd36:	4603      	mov	r3, r0
 800dd38:	b2da      	uxtb	r2, r3
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	Y->Sn_DHAR[2]=SPI_ETH_REG(X, 0x08 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd46:	3318      	adds	r3, #24
 800dd48:	2201      	movs	r2, #1
 800dd4a:	9201      	str	r2, [sp, #4]
 800dd4c:	9300      	str	r3, [sp, #0]
 800dd4e:	2300      	movs	r3, #0
 800dd50:	2201      	movs	r2, #1
 800dd52:	2108      	movs	r1, #8
 800dd54:	6838      	ldr	r0, [r7, #0]
 800dd56:	f7fe ff06 	bl	800cb66 <SPI_ETH_REG>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	b2da      	uxtb	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	Y->Sn_DHAR[3]=SPI_ETH_REG(X, 0x09 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd6a:	3318      	adds	r3, #24
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	9201      	str	r2, [sp, #4]
 800dd70:	9300      	str	r3, [sp, #0]
 800dd72:	2300      	movs	r3, #0
 800dd74:	2201      	movs	r2, #1
 800dd76:	2109      	movs	r1, #9
 800dd78:	6838      	ldr	r0, [r7, #0]
 800dd7a:	f7fe fef4 	bl	800cb66 <SPI_ETH_REG>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	b2da      	uxtb	r2, r3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	Y->Sn_DHAR[4]=SPI_ETH_REG(X, 0x0A ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dd8e:	3318      	adds	r3, #24
 800dd90:	2201      	movs	r2, #1
 800dd92:	9201      	str	r2, [sp, #4]
 800dd94:	9300      	str	r3, [sp, #0]
 800dd96:	2300      	movs	r3, #0
 800dd98:	2201      	movs	r2, #1
 800dd9a:	210a      	movs	r1, #10
 800dd9c:	6838      	ldr	r0, [r7, #0]
 800dd9e:	f7fe fee2 	bl	800cb66 <SPI_ETH_REG>
 800dda2:	4603      	mov	r3, r0
 800dda4:	b2da      	uxtb	r2, r3
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	Y->Sn_DHAR[5]=SPI_ETH_REG(X, 0x0B ,S0_REG,SPI_READ, Y->DUMMY,1);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddb2:	3318      	adds	r3, #24
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	9201      	str	r2, [sp, #4]
 800ddb8:	9300      	str	r3, [sp, #0]
 800ddba:	2300      	movs	r3, #0
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	210b      	movs	r1, #11
 800ddc0:	6838      	ldr	r0, [r7, #0]
 800ddc2:	f7fe fed0 	bl	800cb66 <SPI_ETH_REG>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	b2da      	uxtb	r2, r3
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	Y->Sn_DIPR[0]=SPI_ETH_REG(X, 0x0C ,S0_REG,SPI_READ, Y->DUMMY,1);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddd6:	3318      	adds	r3, #24
 800ddd8:	2201      	movs	r2, #1
 800ddda:	9201      	str	r2, [sp, #4]
 800dddc:	9300      	str	r3, [sp, #0]
 800ddde:	2300      	movs	r3, #0
 800dde0:	2201      	movs	r2, #1
 800dde2:	210c      	movs	r1, #12
 800dde4:	6838      	ldr	r0, [r7, #0]
 800dde6:	f7fe febe 	bl	800cb66 <SPI_ETH_REG>
 800ddea:	4603      	mov	r3, r0
 800ddec:	b2da      	uxtb	r2, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Y->Sn_DIPR[1]=SPI_ETH_REG(X, 0x0D ,S0_REG,SPI_READ, Y->DUMMY,1);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ddfa:	3318      	adds	r3, #24
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	9201      	str	r2, [sp, #4]
 800de00:	9300      	str	r3, [sp, #0]
 800de02:	2300      	movs	r3, #0
 800de04:	2201      	movs	r2, #1
 800de06:	210d      	movs	r1, #13
 800de08:	6838      	ldr	r0, [r7, #0]
 800de0a:	f7fe feac 	bl	800cb66 <SPI_ETH_REG>
 800de0e:	4603      	mov	r3, r0
 800de10:	b2da      	uxtb	r2, r3
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Y->Sn_DIPR[2]=SPI_ETH_REG(X, 0x0E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de1e:	3318      	adds	r3, #24
 800de20:	2201      	movs	r2, #1
 800de22:	9201      	str	r2, [sp, #4]
 800de24:	9300      	str	r3, [sp, #0]
 800de26:	2300      	movs	r3, #0
 800de28:	2201      	movs	r2, #1
 800de2a:	210e      	movs	r1, #14
 800de2c:	6838      	ldr	r0, [r7, #0]
 800de2e:	f7fe fe9a 	bl	800cb66 <SPI_ETH_REG>
 800de32:	4603      	mov	r3, r0
 800de34:	b2da      	uxtb	r2, r3
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Y->Sn_DIPR[3]=SPI_ETH_REG(X, 0x0F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de42:	3318      	adds	r3, #24
 800de44:	2201      	movs	r2, #1
 800de46:	9201      	str	r2, [sp, #4]
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	2300      	movs	r3, #0
 800de4c:	2201      	movs	r2, #1
 800de4e:	210f      	movs	r1, #15
 800de50:	6838      	ldr	r0, [r7, #0]
 800de52:	f7fe fe88 	bl	800cb66 <SPI_ETH_REG>
 800de56:	4603      	mov	r3, r0
 800de58:	b2da      	uxtb	r2, r3
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	Y->Sn_DPORT[0]=SPI_ETH_REG(X, 0x10 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de66:	3318      	adds	r3, #24
 800de68:	2201      	movs	r2, #1
 800de6a:	9201      	str	r2, [sp, #4]
 800de6c:	9300      	str	r3, [sp, #0]
 800de6e:	2300      	movs	r3, #0
 800de70:	2201      	movs	r2, #1
 800de72:	2110      	movs	r1, #16
 800de74:	6838      	ldr	r0, [r7, #0]
 800de76:	f7fe fe76 	bl	800cb66 <SPI_ETH_REG>
 800de7a:	4603      	mov	r3, r0
 800de7c:	b2da      	uxtb	r2, r3
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	Y->Sn_DPORT[1]=SPI_ETH_REG(X, 0x11 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800de8a:	3318      	adds	r3, #24
 800de8c:	2201      	movs	r2, #1
 800de8e:	9201      	str	r2, [sp, #4]
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	2300      	movs	r3, #0
 800de94:	2201      	movs	r2, #1
 800de96:	2111      	movs	r1, #17
 800de98:	6838      	ldr	r0, [r7, #0]
 800de9a:	f7fe fe64 	bl	800cb66 <SPI_ETH_REG>
 800de9e:	4603      	mov	r3, r0
 800dea0:	b2da      	uxtb	r2, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	Y->Sn_MSSR[0]=SPI_ETH_REG(X, 0x12 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800deae:	3318      	adds	r3, #24
 800deb0:	2201      	movs	r2, #1
 800deb2:	9201      	str	r2, [sp, #4]
 800deb4:	9300      	str	r3, [sp, #0]
 800deb6:	2300      	movs	r3, #0
 800deb8:	2201      	movs	r2, #1
 800deba:	2112      	movs	r1, #18
 800debc:	6838      	ldr	r0, [r7, #0]
 800debe:	f7fe fe52 	bl	800cb66 <SPI_ETH_REG>
 800dec2:	4603      	mov	r3, r0
 800dec4:	b2da      	uxtb	r2, r3
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Y->Sn_MSSR[1]=SPI_ETH_REG(X, 0x13 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800ded2:	3318      	adds	r3, #24
 800ded4:	2201      	movs	r2, #1
 800ded6:	9201      	str	r2, [sp, #4]
 800ded8:	9300      	str	r3, [sp, #0]
 800deda:	2300      	movs	r3, #0
 800dedc:	2201      	movs	r2, #1
 800dede:	2113      	movs	r1, #19
 800dee0:	6838      	ldr	r0, [r7, #0]
 800dee2:	f7fe fe40 	bl	800cb66 <SPI_ETH_REG>
 800dee6:	4603      	mov	r3, r0
 800dee8:	b2da      	uxtb	r2, r3
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	Y->Sn_TOS=SPI_ETH_REG(X, 0x15 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800def6:	3318      	adds	r3, #24
 800def8:	2201      	movs	r2, #1
 800defa:	9201      	str	r2, [sp, #4]
 800defc:	9300      	str	r3, [sp, #0]
 800defe:	2300      	movs	r3, #0
 800df00:	2201      	movs	r2, #1
 800df02:	2115      	movs	r1, #21
 800df04:	6838      	ldr	r0, [r7, #0]
 800df06:	f7fe fe2e 	bl	800cb66 <SPI_ETH_REG>
 800df0a:	4603      	mov	r3, r0
 800df0c:	b2da      	uxtb	r2, r3
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	Y->Sn_TTL=SPI_ETH_REG(X, 0x16 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df1a:	3318      	adds	r3, #24
 800df1c:	2201      	movs	r2, #1
 800df1e:	9201      	str	r2, [sp, #4]
 800df20:	9300      	str	r3, [sp, #0]
 800df22:	2300      	movs	r3, #0
 800df24:	2201      	movs	r2, #1
 800df26:	2116      	movs	r1, #22
 800df28:	6838      	ldr	r0, [r7, #0]
 800df2a:	f7fe fe1c 	bl	800cb66 <SPI_ETH_REG>
 800df2e:	4603      	mov	r3, r0
 800df30:	b2da      	uxtb	r2, r3
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	Y->Sn_RXBUF_SIZE=SPI_ETH_REG(X, 0x1E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df3e:	3318      	adds	r3, #24
 800df40:	2201      	movs	r2, #1
 800df42:	9201      	str	r2, [sp, #4]
 800df44:	9300      	str	r3, [sp, #0]
 800df46:	2300      	movs	r3, #0
 800df48:	2201      	movs	r2, #1
 800df4a:	211e      	movs	r1, #30
 800df4c:	6838      	ldr	r0, [r7, #0]
 800df4e:	f7fe fe0a 	bl	800cb66 <SPI_ETH_REG>
 800df52:	4603      	mov	r3, r0
 800df54:	b2da      	uxtb	r2, r3
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	Y->Sn_TXBUF_SIZE=SPI_ETH_REG(X, 0x1F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df62:	3318      	adds	r3, #24
 800df64:	2201      	movs	r2, #1
 800df66:	9201      	str	r2, [sp, #4]
 800df68:	9300      	str	r3, [sp, #0]
 800df6a:	2300      	movs	r3, #0
 800df6c:	2201      	movs	r2, #1
 800df6e:	211f      	movs	r1, #31
 800df70:	6838      	ldr	r0, [r7, #0]
 800df72:	f7fe fdf8 	bl	800cb66 <SPI_ETH_REG>
 800df76:	4603      	mov	r3, r0
 800df78:	b2da      	uxtb	r2, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	Y->Sn_TX_FSR[0]=SPI_ETH_REG(X, 0x20 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800df86:	3318      	adds	r3, #24
 800df88:	2201      	movs	r2, #1
 800df8a:	9201      	str	r2, [sp, #4]
 800df8c:	9300      	str	r3, [sp, #0]
 800df8e:	2300      	movs	r3, #0
 800df90:	2201      	movs	r2, #1
 800df92:	2120      	movs	r1, #32
 800df94:	6838      	ldr	r0, [r7, #0]
 800df96:	f7fe fde6 	bl	800cb66 <SPI_ETH_REG>
 800df9a:	4603      	mov	r3, r0
 800df9c:	b2da      	uxtb	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Y->Sn_TX_FSR[1]=SPI_ETH_REG(X, 0x21 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dfaa:	3318      	adds	r3, #24
 800dfac:	2201      	movs	r2, #1
 800dfae:	9201      	str	r2, [sp, #4]
 800dfb0:	9300      	str	r3, [sp, #0]
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	2201      	movs	r2, #1
 800dfb6:	2121      	movs	r1, #33	; 0x21
 800dfb8:	6838      	ldr	r0, [r7, #0]
 800dfba:	f7fe fdd4 	bl	800cb66 <SPI_ETH_REG>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	b2da      	uxtb	r2, r3
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	Y->Sn_TX_RD[0]=SPI_ETH_REG(X, 0x22 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dfce:	3318      	adds	r3, #24
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	9201      	str	r2, [sp, #4]
 800dfd4:	9300      	str	r3, [sp, #0]
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	2201      	movs	r2, #1
 800dfda:	2122      	movs	r1, #34	; 0x22
 800dfdc:	6838      	ldr	r0, [r7, #0]
 800dfde:	f7fe fdc2 	bl	800cb66 <SPI_ETH_REG>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	b2da      	uxtb	r2, r3
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Y->Sn_TX_RD[1]=SPI_ETH_REG(X, 0x23 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800dff2:	3318      	adds	r3, #24
 800dff4:	2201      	movs	r2, #1
 800dff6:	9201      	str	r2, [sp, #4]
 800dff8:	9300      	str	r3, [sp, #0]
 800dffa:	2300      	movs	r3, #0
 800dffc:	2201      	movs	r2, #1
 800dffe:	2123      	movs	r1, #35	; 0x23
 800e000:	6838      	ldr	r0, [r7, #0]
 800e002:	f7fe fdb0 	bl	800cb66 <SPI_ETH_REG>
 800e006:	4603      	mov	r3, r0
 800e008:	b2da      	uxtb	r2, r3
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	Y->Sn_TX_WR[0]=SPI_ETH_REG(X, 0x24 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e016:	3318      	adds	r3, #24
 800e018:	2201      	movs	r2, #1
 800e01a:	9201      	str	r2, [sp, #4]
 800e01c:	9300      	str	r3, [sp, #0]
 800e01e:	2300      	movs	r3, #0
 800e020:	2201      	movs	r2, #1
 800e022:	2124      	movs	r1, #36	; 0x24
 800e024:	6838      	ldr	r0, [r7, #0]
 800e026:	f7fe fd9e 	bl	800cb66 <SPI_ETH_REG>
 800e02a:	4603      	mov	r3, r0
 800e02c:	b2da      	uxtb	r2, r3
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Y->Sn_TX_WR[1]=SPI_ETH_REG(X, 0x25 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e03a:	3318      	adds	r3, #24
 800e03c:	2201      	movs	r2, #1
 800e03e:	9201      	str	r2, [sp, #4]
 800e040:	9300      	str	r3, [sp, #0]
 800e042:	2300      	movs	r3, #0
 800e044:	2201      	movs	r2, #1
 800e046:	2125      	movs	r1, #37	; 0x25
 800e048:	6838      	ldr	r0, [r7, #0]
 800e04a:	f7fe fd8c 	bl	800cb66 <SPI_ETH_REG>
 800e04e:	4603      	mov	r3, r0
 800e050:	b2da      	uxtb	r2, r3
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	Y->Sn_RX_RSR[0]=SPI_ETH_REG(X, 0x26 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e05e:	3318      	adds	r3, #24
 800e060:	2201      	movs	r2, #1
 800e062:	9201      	str	r2, [sp, #4]
 800e064:	9300      	str	r3, [sp, #0]
 800e066:	2300      	movs	r3, #0
 800e068:	2201      	movs	r2, #1
 800e06a:	2126      	movs	r1, #38	; 0x26
 800e06c:	6838      	ldr	r0, [r7, #0]
 800e06e:	f7fe fd7a 	bl	800cb66 <SPI_ETH_REG>
 800e072:	4603      	mov	r3, r0
 800e074:	b2da      	uxtb	r2, r3
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Y->Sn_RX_RSR[1]=SPI_ETH_REG(X, 0x27 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e082:	3318      	adds	r3, #24
 800e084:	2201      	movs	r2, #1
 800e086:	9201      	str	r2, [sp, #4]
 800e088:	9300      	str	r3, [sp, #0]
 800e08a:	2300      	movs	r3, #0
 800e08c:	2201      	movs	r2, #1
 800e08e:	2127      	movs	r1, #39	; 0x27
 800e090:	6838      	ldr	r0, [r7, #0]
 800e092:	f7fe fd68 	bl	800cb66 <SPI_ETH_REG>
 800e096:	4603      	mov	r3, r0
 800e098:	b2da      	uxtb	r2, r3
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f

	Y->Sn_RX_RD[0]=SPI_ETH_REG(X, 0x28 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0a6:	3318      	adds	r3, #24
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	9201      	str	r2, [sp, #4]
 800e0ac:	9300      	str	r3, [sp, #0]
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	2128      	movs	r1, #40	; 0x28
 800e0b4:	6838      	ldr	r0, [r7, #0]
 800e0b6:	f7fe fd56 	bl	800cb66 <SPI_ETH_REG>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	b2da      	uxtb	r2, r3
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Y->Sn_RX_RD[1]=SPI_ETH_REG(X, 0x29 ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0ca:	3318      	adds	r3, #24
 800e0cc:	2201      	movs	r2, #1
 800e0ce:	9201      	str	r2, [sp, #4]
 800e0d0:	9300      	str	r3, [sp, #0]
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	2129      	movs	r1, #41	; 0x29
 800e0d8:	6838      	ldr	r0, [r7, #0]
 800e0da:	f7fe fd44 	bl	800cb66 <SPI_ETH_REG>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	b2da      	uxtb	r2, r3
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	Y->Sn_RX_WR[0]=SPI_ETH_REG(X, 0x2A ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e0ee:	3318      	adds	r3, #24
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	9201      	str	r2, [sp, #4]
 800e0f4:	9300      	str	r3, [sp, #0]
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	212a      	movs	r1, #42	; 0x2a
 800e0fc:	6838      	ldr	r0, [r7, #0]
 800e0fe:	f7fe fd32 	bl	800cb66 <SPI_ETH_REG>
 800e102:	4603      	mov	r3, r0
 800e104:	b2da      	uxtb	r2, r3
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Y->Sn_RX_WR[1]=SPI_ETH_REG(X, 0x2B ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e112:	3318      	adds	r3, #24
 800e114:	2201      	movs	r2, #1
 800e116:	9201      	str	r2, [sp, #4]
 800e118:	9300      	str	r3, [sp, #0]
 800e11a:	2300      	movs	r3, #0
 800e11c:	2201      	movs	r2, #1
 800e11e:	212b      	movs	r1, #43	; 0x2b
 800e120:	6838      	ldr	r0, [r7, #0]
 800e122:	f7fe fd20 	bl	800cb66 <SPI_ETH_REG>
 800e126:	4603      	mov	r3, r0
 800e128:	b2da      	uxtb	r2, r3
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	Y->Sn_IMR=SPI_ETH_REG(X, 0x2C ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e136:	3318      	adds	r3, #24
 800e138:	2201      	movs	r2, #1
 800e13a:	9201      	str	r2, [sp, #4]
 800e13c:	9300      	str	r3, [sp, #0]
 800e13e:	2300      	movs	r3, #0
 800e140:	2201      	movs	r2, #1
 800e142:	212c      	movs	r1, #44	; 0x2c
 800e144:	6838      	ldr	r0, [r7, #0]
 800e146:	f7fe fd0e 	bl	800cb66 <SPI_ETH_REG>
 800e14a:	4603      	mov	r3, r0
 800e14c:	b2da      	uxtb	r2, r3
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

	Y->Sn_FRAG[0]=SPI_ETH_REG(X, 0x2D ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e15a:	3318      	adds	r3, #24
 800e15c:	2201      	movs	r2, #1
 800e15e:	9201      	str	r2, [sp, #4]
 800e160:	9300      	str	r3, [sp, #0]
 800e162:	2300      	movs	r3, #0
 800e164:	2201      	movs	r2, #1
 800e166:	212d      	movs	r1, #45	; 0x2d
 800e168:	6838      	ldr	r0, [r7, #0]
 800e16a:	f7fe fcfc 	bl	800cb66 <SPI_ETH_REG>
 800e16e:	4603      	mov	r3, r0
 800e170:	b2da      	uxtb	r2, r3
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Y->Sn_FRAG[1]=SPI_ETH_REG(X, 0x2E ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e17e:	3318      	adds	r3, #24
 800e180:	2201      	movs	r2, #1
 800e182:	9201      	str	r2, [sp, #4]
 800e184:	9300      	str	r3, [sp, #0]
 800e186:	2300      	movs	r3, #0
 800e188:	2201      	movs	r2, #1
 800e18a:	212e      	movs	r1, #46	; 0x2e
 800e18c:	6838      	ldr	r0, [r7, #0]
 800e18e:	f7fe fcea 	bl	800cb66 <SPI_ETH_REG>
 800e192:	4603      	mov	r3, r0
 800e194:	b2da      	uxtb	r2, r3
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56


	Y->Sn_KPALVTR=SPI_ETH_REG(X, 0x2F ,S0_REG,SPI_READ, Y->DUMMY,1);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800e1a2:	3318      	adds	r3, #24
 800e1a4:	2201      	movs	r2, #1
 800e1a6:	9201      	str	r2, [sp, #4]
 800e1a8:	9300      	str	r3, [sp, #0]
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	212f      	movs	r1, #47	; 0x2f
 800e1b0:	6838      	ldr	r0, [r7, #0]
 800e1b2:	f7fe fcd8 	bl	800cb66 <SPI_ETH_REG>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	b2da      	uxtb	r2, r3
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
};
 800e1c0:	bf00      	nop
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3708      	adds	r7, #8
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}
	...

0800e1cc <FT_String_ND>:
				return(2);
			}
}

int FT_String_ND( unsigned char * a, int *an, unsigned char * b, int *bn, unsigned char * c,int *cn, int *ubicacion, int *idcom, int tf)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b090      	sub	sp, #64	; 0x40
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	60b9      	str	r1, [r7, #8]
 800e1d6:	607a      	str	r2, [r7, #4]
 800e1d8:	603b      	str	r3, [r7, #0]
	int n=0,n2=0,n3=0,n4=0,n5=0, lnga=0, lngb=0,lngd=0,lnge=0,h=0,estado=0,cliente=0;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e1de:	2300      	movs	r3, #0
 800e1e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	637b      	str	r3, [r7, #52]	; 0x34
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	633b      	str	r3, [r7, #48]	; 0x30
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	623b      	str	r3, [r7, #32]
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	61fb      	str	r3, [r7, #28]
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	61bb      	str	r3, [r7, #24]
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1fe:	2300      	movs	r3, #0
 800e200:	617b      	str	r3, [r7, #20]
 800e202:	2300      	movs	r3, #0
 800e204:	627b      	str	r3, [r7, #36]	; 0x24
 800e206:	2300      	movs	r3, #0
 800e208:	613b      	str	r3, [r7, #16]

	lnga=*an;
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	623b      	str	r3, [r7, #32]
	lngb=*bn;
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	61fb      	str	r3, [r7, #28]
			if (lnga>=lngb) //Solo buscao si la cadena a buscar es menor a la que la contiene
 800e216:	6a3a      	ldr	r2, [r7, #32]
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	f2c0 82fe 	blt.w	800e81c <FT_String_ND+0x650>
			{
				//Debo preguntar por el primer caracter, recorro hasta encontrar el primero, si no lo encuentro me voy
				do{
						n2=0;
 800e220:	2300      	movs	r3, #0
 800e222:	63bb      	str	r3, [r7, #56]	; 0x38
							while(a[n]!= b[n2])
 800e224:	e00c      	b.n	800e240 <FT_String_ND+0x74>
							{
								n++;
 800e226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e228:	3301      	adds	r3, #1
 800e22a:	63fb      	str	r3, [r7, #60]	; 0x3c
								if(n+lngb>(lnga+1))
 800e22c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e22e:	69fb      	ldr	r3, [r7, #28]
 800e230:	441a      	add	r2, r3
 800e232:	6a3b      	ldr	r3, [r7, #32]
 800e234:	3301      	adds	r3, #1
 800e236:	429a      	cmp	r2, r3
 800e238:	dd02      	ble.n	800e240 <FT_String_ND+0x74>
								{
									estado=0;
 800e23a:	2300      	movs	r3, #0
 800e23c:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e23e:	e009      	b.n	800e254 <FT_String_ND+0x88>
							while(a[n]!= b[n2])
 800e240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e242:	68fa      	ldr	r2, [r7, #12]
 800e244:	4413      	add	r3, r2
 800e246:	781a      	ldrb	r2, [r3, #0]
 800e248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24a:	6879      	ldr	r1, [r7, #4]
 800e24c:	440b      	add	r3, r1
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	429a      	cmp	r2, r3
 800e252:	d1e8      	bne.n	800e226 <FT_String_ND+0x5a>
								}//return(0); //No esta el string
							}

							do
							{   //Aca el primero ya es igual
							 n++;
 800e254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e256:	3301      	adds	r3, #1
 800e258:	63fb      	str	r3, [r7, #60]	; 0x3c

							 n2++;
 800e25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25c:	3301      	adds	r3, #1
 800e25e:	63bb      	str	r3, [r7, #56]	; 0x38
							 if(n2==lngb)				//Si pasé poracá recorriendo todo el vector ya se que lo contiene
 800e260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	429a      	cmp	r2, r3
 800e266:	d108      	bne.n	800e27a <FT_String_ND+0xae>
									{
									*ubicacion=n-lngb+1;
 800e268:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e26a:	69fb      	ldr	r3, [r7, #28]
 800e26c:	1ad3      	subs	r3, r2, r3
 800e26e:	1c5a      	adds	r2, r3, #1
 800e270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e272:	601a      	str	r2, [r3, #0]
									estado=1;
 800e274:	2301      	movs	r3, #1
 800e276:	627b      	str	r3, [r7, #36]	; 0x24
									break;
 800e278:	e010      	b.n	800e29c <FT_String_ND+0xd0>
									//if (tf==0) return(1);	//Si solo pido buscar salgo ahora
									}		//Esta el string if(n2>=lngb-1) return(1);

							 if(n2>lngb)//if((a[n]=='\0')||(n2>lngb))	//Si finaliz� el vector o bien ya reviso mas caracteres que los que contiene el vector
 800e27a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	429a      	cmp	r2, r3
 800e280:	dd02      	ble.n	800e288 <FT_String_ND+0xbc>
									 {
									 estado=0;
 800e282:	2300      	movs	r3, #0
 800e284:	627b      	str	r3, [r7, #36]	; 0x24
									 break;
 800e286:	e009      	b.n	800e29c <FT_String_ND+0xd0>
									 //return(0);//if(n+lngb>=lnga) return(0);//No esta el string
									 }
							}while(a[n]== b[n2]);
 800e288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e28a:	68fa      	ldr	r2, [r7, #12]
 800e28c:	4413      	add	r3, r2
 800e28e:	781a      	ldrb	r2, [r3, #0]
 800e290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e292:	6879      	ldr	r1, [r7, #4]
 800e294:	440b      	add	r3, r1
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	429a      	cmp	r2, r3
 800e29a:	d0db      	beq.n	800e254 <FT_String_ND+0x88>

					}	while((n+(lngb-1)<=(lnga-1))&&(estado!=1));	//while(n+lngb<=lnga);
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	1e5a      	subs	r2, r3, #1
 800e2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2a2:	4413      	add	r3, r2
 800e2a4:	6a3a      	ldr	r2, [r7, #32]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	dd02      	ble.n	800e2b0 <FT_String_ND+0xe4>
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d1b7      	bne.n	800e220 <FT_String_ND+0x54>

					if (tf==0) 					//Si solo pido buscar
 800e2b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d101      	bne.n	800e2ba <FT_String_ND+0xee>
					{return(estado);			//Agregado para no dejar valor si solo quiero buscar
 800e2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b8:	e2b1      	b.n	800e81e <FT_String_ND+0x652>
					}
					else
					{								//Si quiero eliminar lo encontrado
						if((tf==1)&&(estado==1))//------------------------------Si la voy a eliminar tiene que estar
 800e2ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d12c      	bne.n	800e31a <FT_String_ND+0x14e>
 800e2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c2:	2b01      	cmp	r3, #1
 800e2c4:	d129      	bne.n	800e31a <FT_String_ND+0x14e>
							/*while (a[*ubicacion+n2+n3]!='\0')
									{
										a[*ubicacion+n3]=a[*ubicacion+lngb+n3];
										n3++;
									}*/
							while ((*ubicacion+n2+n3)<=lnga)
 800e2c6:	e014      	b.n	800e2f2 <FT_String_ND+0x126>
									{
										a[*ubicacion+n3-1]=a[*ubicacion+lngb+n3-1];
 800e2c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	441a      	add	r2, r3
 800e2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2d2:	4413      	add	r3, r2
 800e2d4:	3b01      	subs	r3, #1
 800e2d6:	68fa      	ldr	r2, [r7, #12]
 800e2d8:	441a      	add	r2, r3
 800e2da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2dc:	6819      	ldr	r1, [r3, #0]
 800e2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2e0:	440b      	add	r3, r1
 800e2e2:	3b01      	subs	r3, #1
 800e2e4:	68f9      	ldr	r1, [r7, #12]
 800e2e6:	440b      	add	r3, r1
 800e2e8:	7812      	ldrb	r2, [r2, #0]
 800e2ea:	701a      	strb	r2, [r3, #0]
										n3++;
 800e2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ee:	3301      	adds	r3, #1
 800e2f0:	637b      	str	r3, [r7, #52]	; 0x34
							while ((*ubicacion+n2+n3)<=lnga)
 800e2f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2f4:	681a      	ldr	r2, [r3, #0]
 800e2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f8:	441a      	add	r2, r3
 800e2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2fc:	4413      	add	r3, r2
 800e2fe:	6a3a      	ldr	r2, [r7, #32]
 800e300:	429a      	cmp	r2, r3
 800e302:	dae1      	bge.n	800e2c8 <FT_String_ND+0xfc>
									}

							//a[*ubicacion+n3-1]='\0';	//Identifico finalizacion del vector
							*an=*ubicacion+n3-1;		//Largo del vector
 800e304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e306:	681a      	ldr	r2, [r3, #0]
 800e308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e30a:	4413      	add	r3, r2
 800e30c:	1e5a      	subs	r2, r3, #1
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	601a      	str	r2, [r3, #0]
							estado=3;
 800e312:	2303      	movs	r3, #3
 800e314:	627b      	str	r3, [r7, #36]	; 0x24
							return(estado);
 800e316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e318:	e281      	b.n	800e81e <FT_String_ND+0x652>
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA
						//------------------------------------------------------------------------------------
						if((tf==2)&&(estado==1))
 800e31a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e31c:	2b02      	cmp	r3, #2
 800e31e:	f040 80b6 	bne.w	800e48e <FT_String_ND+0x2c2>
 800e322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e324:	2b01      	cmp	r3, #1
 800e326:	f040 80b2 	bne.w	800e48e <FT_String_ND+0x2c2>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e32a:	e012      	b.n	800e352 <FT_String_ND+0x186>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e32c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	1ad2      	subs	r2, r2, r3
 800e332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e334:	4413      	add	r3, r2
 800e336:	461a      	mov	r2, r3
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	441a      	add	r2, r3
 800e33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e340:	440b      	add	r3, r1
 800e342:	7812      	ldrb	r2, [r2, #0]
 800e344:	701a      	strb	r2, [r3, #0]
								n4++;
 800e346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e348:	3301      	adds	r3, #1
 800e34a:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;
 800e34c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e34e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e350:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e352:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	1ad2      	subs	r2, r2, r3
 800e358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e35a:	4413      	add	r3, r2
 800e35c:	6a3a      	ldr	r2, [r7, #32]
 800e35e:	429a      	cmp	r2, r3
 800e360:	dae4      	bge.n	800e32c <FT_String_ND+0x160>
							}
							strtok(c,",:");
 800e362:	499e      	ldr	r1, [pc, #632]	; (800e5dc <FT_String_ND+0x410>)
 800e364:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e366:	f000 fce9 	bl	800ed3c <strtok>
							lngd= atoi(strtok(NULL,",: "));
 800e36a:	499d      	ldr	r1, [pc, #628]	; (800e5e0 <FT_String_ND+0x414>)
 800e36c:	2000      	movs	r0, #0
 800e36e:	f000 fce5 	bl	800ed3c <strtok>
 800e372:	4603      	mov	r3, r0
 800e374:	4618      	mov	r0, r3
 800e376:	f000 fb22 	bl	800e9be <atoi>
 800e37a:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e37c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e37e:	3306      	adds	r3, #6
 800e380:	222c      	movs	r2, #44	; 0x2c
 800e382:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e384:	69bb      	ldr	r3, [r7, #24]
 800e386:	2b09      	cmp	r3, #9
 800e388:	dc0d      	bgt.n	800e3a6 <FT_String_ND+0x1da>
											{
												c[8]=':';
 800e38a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e38c:	3308      	adds	r3, #8
 800e38e:	223a      	movs	r2, #58	; 0x3a
 800e390:	701a      	strb	r2, [r3, #0]
												c[8+lngd+1]='\0';
 800e392:	69bb      	ldr	r3, [r7, #24]
 800e394:	3309      	adds	r3, #9
 800e396:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e398:	4413      	add	r3, r2
 800e39a:	2200      	movs	r2, #0
 800e39c:	701a      	strb	r2, [r3, #0]
												lnge=9+lngd;
 800e39e:	69bb      	ldr	r3, [r7, #24]
 800e3a0:	3309      	adds	r3, #9
 800e3a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3a4:	e021      	b.n	800e3ea <FT_String_ND+0x21e>
											}
											else{
														if (lngd< 100)
 800e3a6:	69bb      	ldr	r3, [r7, #24]
 800e3a8:	2b63      	cmp	r3, #99	; 0x63
 800e3aa:	dc0d      	bgt.n	800e3c8 <FT_String_ND+0x1fc>
														{
															c[9]=':';
 800e3ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3ae:	3309      	adds	r3, #9
 800e3b0:	223a      	movs	r2, #58	; 0x3a
 800e3b2:	701a      	strb	r2, [r3, #0]
															c[9+lngd+1]='\0';
 800e3b4:	69bb      	ldr	r3, [r7, #24]
 800e3b6:	330a      	adds	r3, #10
 800e3b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3ba:	4413      	add	r3, r2
 800e3bc:	2200      	movs	r2, #0
 800e3be:	701a      	strb	r2, [r3, #0]
															lnge=10+lngd;
 800e3c0:	69bb      	ldr	r3, [r7, #24]
 800e3c2:	330a      	adds	r3, #10
 800e3c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3c6:	e010      	b.n	800e3ea <FT_String_ND+0x21e>
														}
														else
														{
														if (lngd < 1000)
 800e3c8:	69bb      	ldr	r3, [r7, #24]
 800e3ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e3ce:	da0c      	bge.n	800e3ea <FT_String_ND+0x21e>
														{
															c[10]=':';
 800e3d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3d2:	330a      	adds	r3, #10
 800e3d4:	223a      	movs	r2, #58	; 0x3a
 800e3d6:	701a      	strb	r2, [r3, #0]
															c[10+lngd+1]='\0';
 800e3d8:	69bb      	ldr	r3, [r7, #24]
 800e3da:	330b      	adds	r3, #11
 800e3dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3de:	4413      	add	r3, r2
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	701a      	strb	r2, [r3, #0]
															lnge=11+lngd;
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	330b      	adds	r3, #11
 800e3e8:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge;
 800e3ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3ee:	601a      	str	r2, [r3, #0]
							n4=0;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e3f4:	e016      	b.n	800e424 <FT_String_ND+0x258>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e3f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e3f8:	69fb      	ldr	r3, [r7, #28]
 800e3fa:	1ad2      	subs	r2, r2, r3
 800e3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3fe:	441a      	add	r2, r3
 800e400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e402:	4413      	add	r3, r2
 800e404:	461a      	mov	r2, r3
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	441a      	add	r2, r3
 800e40a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	1ac9      	subs	r1, r1, r3
 800e410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e412:	440b      	add	r3, r1
 800e414:	4619      	mov	r1, r3
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	440b      	add	r3, r1
 800e41a:	7812      	ldrb	r2, [r2, #0]
 800e41c:	701a      	strb	r2, [r3, #0]
								n4++;
 800e41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e420:	3301      	adds	r3, #1
 800e422:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e424:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	1ad2      	subs	r2, r2, r3
 800e42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42c:	441a      	add	r2, r3
 800e42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e430:	4413      	add	r3, r2
 800e432:	6a3a      	ldr	r2, [r7, #32]
 800e434:	429a      	cmp	r2, r3
 800e436:	dade      	bge.n	800e3f6 <FT_String_ND+0x22a>
							}
							*an=n+n4-lngb-1;
 800e438:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43c:	441a      	add	r2, r3
 800e43e:	69fb      	ldr	r3, [r7, #28]
 800e440:	1ad3      	subs	r3, r2, r3
 800e442:	1e5a      	subs	r2, r3, #1
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	601a      	str	r2, [r3, #0]
							a[n-lngb+lnge+n4]='\0';
 800e448:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	1ad2      	subs	r2, r2, r3
 800e44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e450:	441a      	add	r2, r3
 800e452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e454:	4413      	add	r3, r2
 800e456:	461a      	mov	r2, r3
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	4413      	add	r3, r2
 800e45c:	2200      	movs	r2, #0
 800e45e:	701a      	strb	r2, [r3, #0]
							a[n-lngb+n4]='\0';
 800e460:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e462:	69fb      	ldr	r3, [r7, #28]
 800e464:	1ad2      	subs	r2, r2, r3
 800e466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e468:	4413      	add	r3, r2
 800e46a:	461a      	mov	r2, r3
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	4413      	add	r3, r2
 800e470:	2200      	movs	r2, #0
 800e472:	701a      	strb	r2, [r3, #0]
							if((n-lngb)==(lnge+n4)) a[0]='\0';
 800e474:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e476:	69fb      	ldr	r3, [r7, #28]
 800e478:	1ad2      	subs	r2, r2, r3
 800e47a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47e:	440b      	add	r3, r1
 800e480:	429a      	cmp	r2, r3
 800e482:	d102      	bne.n	800e48a <FT_String_ND+0x2be>
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	2200      	movs	r2, #0
 800e488:	701a      	strb	r2, [r3, #0]
							estado=3;
 800e48a:	2303      	movs	r3, #3
 800e48c:	627b      	str	r3, [r7, #36]	; 0x24

						}
						//------------------------------------------------------------------------------------
						//---EXTRACCI�N DE CADENA PRINCIPAL Y COPIA A CADENA SECUNDARIA-----------------------
						//------------------------------------------------------------------------------------
						if((tf==3)&&(estado==1))
 800e48e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e490:	2b03      	cmp	r3, #3
 800e492:	d146      	bne.n	800e522 <FT_String_ND+0x356>
 800e494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e496:	2b01      	cmp	r3, #1
 800e498:	d143      	bne.n	800e522 <FT_String_ND+0x356>
						{
						n3=0;
 800e49a:	2300      	movs	r3, #0
 800e49c:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e49e:	e00e      	b.n	800e4be <FT_String_ND+0x2f2>
									{
										c[n3]=a[*ubicacion+n3-1];
 800e4a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4a6:	4413      	add	r3, r2
 800e4a8:	3b01      	subs	r3, #1
 800e4aa:	68fa      	ldr	r2, [r7, #12]
 800e4ac:	441a      	add	r2, r3
 800e4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e4b2:	440b      	add	r3, r1
 800e4b4:	7812      	ldrb	r2, [r2, #0]
 800e4b6:	701a      	strb	r2, [r3, #0]
										n3++;
 800e4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	637b      	str	r3, [r7, #52]	; 0x34
						while (n3<lngb)//---------------Copio la info a extraer
 800e4be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	dbec      	blt.n	800e4a0 <FT_String_ND+0x2d4>
									}
									//c[n3]='\0';//---------------Finalizo el vector extra�do
						n5=0;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e4ca:	e014      	b.n	800e4f6 <FT_String_ND+0x32a>
									{
										a[*ubicacion+n5-1]=a[*ubicacion+lngb+n5-1];
 800e4cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4ce:	681a      	ldr	r2, [r3, #0]
 800e4d0:	69fb      	ldr	r3, [r7, #28]
 800e4d2:	441a      	add	r2, r3
 800e4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d6:	4413      	add	r3, r2
 800e4d8:	3b01      	subs	r3, #1
 800e4da:	68fa      	ldr	r2, [r7, #12]
 800e4dc:	441a      	add	r2, r3
 800e4de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4e0:	6819      	ldr	r1, [r3, #0]
 800e4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e4:	440b      	add	r3, r1
 800e4e6:	3b01      	subs	r3, #1
 800e4e8:	68f9      	ldr	r1, [r7, #12]
 800e4ea:	440b      	add	r3, r1
 800e4ec:	7812      	ldrb	r2, [r2, #0]
 800e4ee:	701a      	strb	r2, [r3, #0]
										n5++;
 800e4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
						while ((*ubicacion+lngb+n5)<=*an)
 800e4f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	69fb      	ldr	r3, [r7, #28]
 800e4fc:	441a      	add	r2, r3
 800e4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e500:	441a      	add	r2, r3
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	429a      	cmp	r2, r3
 800e508:	dde0      	ble.n	800e4cc <FT_String_ND+0x300>
									}
							//a[*ubicacion+n3]='\0';	//Identifico finalizacion del vector
						    *an=*ubicacion+n5-1;
 800e50a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e50c:	681a      	ldr	r2, [r3, #0]
 800e50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e510:	4413      	add	r3, r2
 800e512:	1e5a      	subs	r2, r3, #1
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	601a      	str	r2, [r3, #0]
							*cn=n3;
 800e518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e51a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e51c:	601a      	str	r2, [r3, #0]
							estado=3;
 800e51e:	2303      	movs	r3, #3
 800e520:	627b      	str	r3, [r7, #36]	; 0x24
						}
						//------------------------------------------------------------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------------------------------------------------------------------------
						if((tf==4)&&(estado==1))
 800e522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e524:	2b04      	cmp	r3, #4
 800e526:	f040 80b6 	bne.w	800e696 <FT_String_ND+0x4ca>
 800e52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	f040 80b2 	bne.w	800e696 <FT_String_ND+0x4ca>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e532:	e012      	b.n	800e55a <FT_String_ND+0x38e>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e534:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e536:	69fb      	ldr	r3, [r7, #28]
 800e538:	1ad2      	subs	r2, r2, r3
 800e53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53c:	4413      	add	r3, r2
 800e53e:	461a      	mov	r2, r3
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	441a      	add	r2, r3
 800e544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e546:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e548:	440b      	add	r3, r1
 800e54a:	7812      	ldrb	r2, [r2, #0]
 800e54c:	701a      	strb	r2, [r3, #0]
								n4++;
 800e54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e550:	3301      	adds	r3, #1
 800e552:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800e554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e558:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e55a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	1ad2      	subs	r2, r2, r3
 800e560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e562:	4413      	add	r3, r2
 800e564:	6a3a      	ldr	r2, [r7, #32]
 800e566:	429a      	cmp	r2, r3
 800e568:	dae4      	bge.n	800e534 <FT_String_ND+0x368>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e56a:	491c      	ldr	r1, [pc, #112]	; (800e5dc <FT_String_ND+0x410>)
 800e56c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e56e:	f000 fbe5 	bl	800ed3c <strtok>
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e572:	491b      	ldr	r1, [pc, #108]	; (800e5e0 <FT_String_ND+0x414>)
 800e574:	2000      	movs	r0, #0
 800e576:	f000 fbe1 	bl	800ed3c <strtok>
 800e57a:	4603      	mov	r3, r0
 800e57c:	4618      	mov	r0, r3
 800e57e:	f000 fa1e 	bl	800e9be <atoi>
 800e582:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e586:	3306      	adds	r3, #6
 800e588:	222c      	movs	r2, #44	; 0x2c
 800e58a:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e58c:	69bb      	ldr	r3, [r7, #24]
 800e58e:	2b09      	cmp	r3, #9
 800e590:	dc07      	bgt.n	800e5a2 <FT_String_ND+0x3d6>
											{
												c[8]=':';
 800e592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e594:	3308      	adds	r3, #8
 800e596:	223a      	movs	r2, #58	; 0x3a
 800e598:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=9+lngd;
 800e59a:	69bb      	ldr	r3, [r7, #24]
 800e59c:	3309      	adds	r3, #9
 800e59e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5a0:	e015      	b.n	800e5ce <FT_String_ND+0x402>
											}
											else{
														if (lngd< 100)
 800e5a2:	69bb      	ldr	r3, [r7, #24]
 800e5a4:	2b63      	cmp	r3, #99	; 0x63
 800e5a6:	dc07      	bgt.n	800e5b8 <FT_String_ND+0x3ec>
														{
															c[9]=':';
 800e5a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5aa:	3309      	adds	r3, #9
 800e5ac:	223a      	movs	r2, #58	; 0x3a
 800e5ae:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=10+lngd;
 800e5b0:	69bb      	ldr	r3, [r7, #24]
 800e5b2:	330a      	adds	r3, #10
 800e5b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5b6:	e00a      	b.n	800e5ce <FT_String_ND+0x402>
														}
														else
														{
														if (lngd < 1000)
 800e5b8:	69bb      	ldr	r3, [r7, #24]
 800e5ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e5be:	da06      	bge.n	800e5ce <FT_String_ND+0x402>
														{
															c[10]=':';
 800e5c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5c2:	330a      	adds	r3, #10
 800e5c4:	223a      	movs	r2, #58	; 0x3a
 800e5c6:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=11+lngd;
 800e5c8:	69bb      	ldr	r3, [r7, #24]
 800e5ca:	330b      	adds	r3, #11
 800e5cc:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800e5ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e5d2:	601a      	str	r2, [r3, #0]
							n4=0;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e5d8:	e01b      	b.n	800e612 <FT_String_ND+0x446>
 800e5da:	bf00      	nop
 800e5dc:	080104a0 	.word	0x080104a0
 800e5e0:	080104a4 	.word	0x080104a4
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e5e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e5e6:	69fb      	ldr	r3, [r7, #28]
 800e5e8:	1ad2      	subs	r2, r2, r3
 800e5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ec:	441a      	add	r2, r3
 800e5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f0:	4413      	add	r3, r2
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	441a      	add	r2, r3
 800e5f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e5fa:	69fb      	ldr	r3, [r7, #28]
 800e5fc:	1ac9      	subs	r1, r1, r3
 800e5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e600:	440b      	add	r3, r1
 800e602:	4619      	mov	r1, r3
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	440b      	add	r3, r1
 800e608:	7812      	ldrb	r2, [r2, #0]
 800e60a:	701a      	strb	r2, [r3, #0]
								n4++;
 800e60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60e:	3301      	adds	r3, #1
 800e610:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e612:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e614:	69fb      	ldr	r3, [r7, #28]
 800e616:	1ad2      	subs	r2, r2, r3
 800e618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e61a:	441a      	add	r2, r3
 800e61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61e:	4413      	add	r3, r2
 800e620:	6a3a      	ldr	r2, [r7, #32]
 800e622:	429a      	cmp	r2, r3
 800e624:	dade      	bge.n	800e5e4 <FT_String_ND+0x418>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800e626:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62a:	441a      	add	r2, r3
 800e62c:	69fb      	ldr	r3, [r7, #28]
 800e62e:	1ad3      	subs	r3, r2, r3
 800e630:	1e5a      	subs	r2, r3, #1
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	601a      	str	r2, [r3, #0]
							n5=0;
 800e636:	2300      	movs	r3, #0
 800e638:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e63a:	e00f      	b.n	800e65c <FT_String_ND+0x490>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800e63c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e63e:	69bb      	ldr	r3, [r7, #24]
 800e640:	1ad2      	subs	r2, r2, r3
 800e642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e644:	4413      	add	r3, r2
 800e646:	461a      	mov	r2, r3
 800e648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e64a:	441a      	add	r2, r3
 800e64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e650:	440b      	add	r3, r1
 800e652:	7812      	ldrb	r2, [r2, #0]
 800e654:	701a      	strb	r2, [r3, #0]
								n5++;
 800e656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e658:	3301      	adds	r3, #1
 800e65a:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e65c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	1ad2      	subs	r2, r2, r3
 800e662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e664:	441a      	add	r2, r3
 800e666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	429a      	cmp	r2, r3
 800e66c:	dbe6      	blt.n	800e63c <FT_String_ND+0x470>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800e66e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e672:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800e674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e676:	681a      	ldr	r2, [r3, #0]
 800e678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67a:	441a      	add	r2, r3
 800e67c:	69bb      	ldr	r3, [r7, #24]
 800e67e:	1ad2      	subs	r2, r2, r3
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	4413      	add	r3, r2
 800e686:	6a3a      	ldr	r2, [r7, #32]
 800e688:	429a      	cmp	r2, r3
 800e68a:	d102      	bne.n	800e692 <FT_String_ND+0x4c6>
							{
								estado=4;
 800e68c:	2304      	movs	r3, #4
 800e68e:	627b      	str	r3, [r7, #36]	; 0x24
 800e690:	e001      	b.n	800e696 <FT_String_ND+0x4ca>

							}
							else
							{
								estado=5;
 800e692:	2305      	movs	r3, #5
 800e694:	627b      	str	r3, [r7, #36]	; 0x24
						//--------------------------------    MODO SERVIDOR    -------------------------------
						//---DECODIFICACION DE IPD, EXTRACCI�N DE CADENA PRINCIPAL COPIA A CADENA SECUNDARIA DE
						//--- LOS DATOS CON EVALUACION DE INTEGRIDAD DE LOS MISMOS 4 DATOS OK 5 DATOS NO OK
						//------------------- SOLO VALIDO PARA CLIENTES DE 0 A 9     -------------------------
						//------------------------------------------------------------------------------------
						if((tf==5)&&(estado==1))
 800e696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e698:	2b05      	cmp	r3, #5
 800e69a:	f040 80bd 	bne.w	800e818 <FT_String_ND+0x64c>
 800e69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a0:	2b01      	cmp	r3, #1
 800e6a2:	f040 80b9 	bne.w	800e818 <FT_String_ND+0x64c>
						{
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e6a6:	e012      	b.n	800e6ce <FT_String_ND+0x502>
							{						 // n quedó en la ultima posicion del vector b
								c[n4]=a[n-lngb+n4];
 800e6a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6aa:	69fb      	ldr	r3, [r7, #28]
 800e6ac:	1ad2      	subs	r2, r2, r3
 800e6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b0:	4413      	add	r3, r2
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	441a      	add	r2, r3
 800e6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e6bc:	440b      	add	r3, r1
 800e6be:	7812      	ldrb	r2, [r2, #0]
 800e6c0:	701a      	strb	r2, [r3, #0]
								n4++;
 800e6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	633b      	str	r3, [r7, #48]	; 0x30
								*cn=n4;  //lonitud del vector tok + el /r/n+IPD,XXX:
 800e6c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6cc:	601a      	str	r2, [r3, #0]
							while((n-lngb+n4)<=lnga)//---------------Copio a partir del IPD al vector tok que es el c.
 800e6ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e6d0:	69fb      	ldr	r3, [r7, #28]
 800e6d2:	1ad2      	subs	r2, r2, r3
 800e6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d6:	4413      	add	r3, r2
 800e6d8:	6a3a      	ldr	r2, [r7, #32]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	dae4      	bge.n	800e6a8 <FT_String_ND+0x4dc>
							}
							strtok(c,",:"); //En teoria no afecta el vector
 800e6de:	4952      	ldr	r1, [pc, #328]	; (800e828 <FT_String_ND+0x65c>)
 800e6e0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e6e2:	f000 fb2b 	bl	800ed3c <strtok>
							cliente= atoi(strtok(NULL,",: ")); //Clieng del cual se reciben los datos
 800e6e6:	4951      	ldr	r1, [pc, #324]	; (800e82c <FT_String_ND+0x660>)
 800e6e8:	2000      	movs	r0, #0
 800e6ea:	f000 fb27 	bl	800ed3c <strtok>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f000 f964 	bl	800e9be <atoi>
 800e6f6:	6138      	str	r0, [r7, #16]
							lngd= atoi(strtok(NULL,",: ")); //Datos informados de +IPD,XX: no deberia afectar el vector
 800e6f8:	494c      	ldr	r1, [pc, #304]	; (800e82c <FT_String_ND+0x660>)
 800e6fa:	2000      	movs	r0, #0
 800e6fc:	f000 fb1e 	bl	800ed3c <strtok>
 800e700:	4603      	mov	r3, r0
 800e702:	4618      	mov	r0, r3
 800e704:	f000 f95b 	bl	800e9be <atoi>
 800e708:	61b8      	str	r0, [r7, #24]
							c[6]=',';//------------------------------Reconstruyo vector
 800e70a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e70c:	3306      	adds	r3, #6
 800e70e:	222c      	movs	r2, #44	; 0x2c
 800e710:	701a      	strb	r2, [r3, #0]
									if (lngd < 10)
 800e712:	69bb      	ldr	r3, [r7, #24]
 800e714:	2b09      	cmp	r3, #9
 800e716:	dc07      	bgt.n	800e728 <FT_String_ND+0x55c>
											{
												c[10]=':';
 800e718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e71a:	330a      	adds	r3, #10
 800e71c:	223a      	movs	r2, #58	; 0x3a
 800e71e:	701a      	strb	r2, [r3, #0]
												//c[8+lngd+1]='\0';
												lnge=11+lngd;
 800e720:	69bb      	ldr	r3, [r7, #24]
 800e722:	330b      	adds	r3, #11
 800e724:	62bb      	str	r3, [r7, #40]	; 0x28
 800e726:	e015      	b.n	800e754 <FT_String_ND+0x588>
											}
											else{
														if (lngd< 100)
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	2b63      	cmp	r3, #99	; 0x63
 800e72c:	dc07      	bgt.n	800e73e <FT_String_ND+0x572>
														{
															c[11]=':';
 800e72e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e730:	330b      	adds	r3, #11
 800e732:	223a      	movs	r2, #58	; 0x3a
 800e734:	701a      	strb	r2, [r3, #0]
															//c[9+lngd+1]='\0';
															lnge=12+lngd;
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	330c      	adds	r3, #12
 800e73a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e73c:	e00a      	b.n	800e754 <FT_String_ND+0x588>
														}
														else
														{
														if (lngd < 1000)
 800e73e:	69bb      	ldr	r3, [r7, #24]
 800e740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e744:	da06      	bge.n	800e754 <FT_String_ND+0x588>
														{
															c[12]=':';
 800e746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e748:	330c      	adds	r3, #12
 800e74a:	223a      	movs	r2, #58	; 0x3a
 800e74c:	701a      	strb	r2, [r3, #0]
															//c[10+lngd+1]='\0';
															lnge=13+lngd;
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	330d      	adds	r3, #13
 800e752:	62bb      	str	r3, [r7, #40]	; 0x28
														}
														}
													}
												//------------------------------Vector reconstruido
							  //------------------------------Extraccion del vector en el original
							*cn=lnge; //Longitud del vecto TOK completo
 800e754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e758:	601a      	str	r2, [r3, #0]
							n4=0;
 800e75a:	2300      	movs	r3, #0
 800e75c:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e75e:	e016      	b.n	800e78e <FT_String_ND+0x5c2>
							{
								a[n-lngb+n4]=a[n-lngb+lnge+n4];
 800e760:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	1ad2      	subs	r2, r2, r3
 800e766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e768:	441a      	add	r2, r3
 800e76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e76c:	4413      	add	r3, r2
 800e76e:	461a      	mov	r2, r3
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	441a      	add	r2, r3
 800e774:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e776:	69fb      	ldr	r3, [r7, #28]
 800e778:	1ac9      	subs	r1, r1, r3
 800e77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e77c:	440b      	add	r3, r1
 800e77e:	4619      	mov	r1, r3
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	440b      	add	r3, r1
 800e784:	7812      	ldrb	r2, [r2, #0]
 800e786:	701a      	strb	r2, [r3, #0]
								n4++;
 800e788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e78a:	3301      	adds	r3, #1
 800e78c:	633b      	str	r3, [r7, #48]	; 0x30
							while((n-lngb+lnge+n4)<=lnga)//while(a[n-lngb+lnge+n4]!='\0')//---------------Copio a partir del IPD al vector tok.
 800e78e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e790:	69fb      	ldr	r3, [r7, #28]
 800e792:	1ad2      	subs	r2, r2, r3
 800e794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e796:	441a      	add	r2, r3
 800e798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79a:	4413      	add	r3, r2
 800e79c:	6a3a      	ldr	r2, [r7, #32]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	dade      	bge.n	800e760 <FT_String_ND+0x594>
							}
							*an=n+n4-lngb-1; //longitud del vector A
 800e7a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a6:	441a      	add	r2, r3
 800e7a8:	69fb      	ldr	r3, [r7, #28]
 800e7aa:	1ad3      	subs	r3, r2, r3
 800e7ac:	1e5a      	subs	r2, r3, #1
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	601a      	str	r2, [r3, #0]
							n5=0;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e7b6:	e00f      	b.n	800e7d8 <FT_String_ND+0x60c>
							{
								c[n5]=c[(lnge-lngd+n5)];
 800e7b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	1ad2      	subs	r2, r2, r3
 800e7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c0:	4413      	add	r3, r2
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7c6:	441a      	add	r2, r3
 800e7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e7cc:	440b      	add	r3, r1
 800e7ce:	7812      	ldrb	r2, [r2, #0]
 800e7d0:	701a      	strb	r2, [r3, #0]
								n5++;
 800e7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
							while((lnge-lngd+n5)<*cn)
 800e7d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7da:	69bb      	ldr	r3, [r7, #24]
 800e7dc:	1ad2      	subs	r2, r2, r3
 800e7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e0:	441a      	add	r2, r3
 800e7e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	dbe6      	blt.n	800e7b8 <FT_String_ND+0x5ec>
							}
							*cn=n5; //Nueva longitud del vector con datos extaidos
 800e7ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7ee:	601a      	str	r2, [r3, #0]

							if((*cn+lnge-lngd+*an)==lnga)
 800e7f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f6:	441a      	add	r2, r3
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	1ad2      	subs	r2, r2, r3
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	4413      	add	r3, r2
 800e802:	6a3a      	ldr	r2, [r7, #32]
 800e804:	429a      	cmp	r2, r3
 800e806:	d105      	bne.n	800e814 <FT_String_ND+0x648>
							{
								estado=4;
 800e808:	2304      	movs	r3, #4
 800e80a:	627b      	str	r3, [r7, #36]	; 0x24
								*idcom=cliente;
 800e80c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e80e:	693a      	ldr	r2, [r7, #16]
 800e810:	601a      	str	r2, [r3, #0]
 800e812:	e001      	b.n	800e818 <FT_String_ND+0x64c>
							}
							else
							{
								estado=5;
 800e814:	2305      	movs	r3, #5
 800e816:	627b      	str	r3, [r7, #36]	; 0x24
							//a[n-lngb+n4]='\0';
							//if((n-lngb)==(lnge+n4)) a[0]='\0';
							//estado=3;

						}
						return(estado);
 800e818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81a:	e000      	b.n	800e81e <FT_String_ND+0x652>
					}
			}
			else
			{
				return(2);
 800e81c:	2302      	movs	r3, #2
			}
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3740      	adds	r7, #64	; 0x40
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	080104a0 	.word	0x080104a0
 800e82c:	080104a4 	.word	0x080104a4

0800e830 <INTOA>:


int INTOA( int a,  unsigned char *v1)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b088      	sub	sp, #32
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6039      	str	r1, [r7, #0]
char origbuff[20]="0";	
 800e83a:	2330      	movs	r3, #48	; 0x30
 800e83c:	60bb      	str	r3, [r7, #8]
 800e83e:	f107 030c 	add.w	r3, r7, #12
 800e842:	2200      	movs	r2, #0
 800e844:	601a      	str	r2, [r3, #0]
 800e846:	605a      	str	r2, [r3, #4]
 800e848:	609a      	str	r2, [r3, #8]
 800e84a:	60da      	str	r2, [r3, #12]
int i=0;	
 800e84c:	2300      	movs	r3, #0
 800e84e:	61fb      	str	r3, [r7, #28]
	
		sprintf(origbuff,"%i",a);	
 800e850:	f107 0308 	add.w	r3, r7, #8
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	490f      	ldr	r1, [pc, #60]	; (800e894 <INTOA+0x64>)
 800e858:	4618      	mov	r0, r3
 800e85a:	f000 f9f1 	bl	800ec40 <siprintf>
		while(i<=strlen(origbuff))
 800e85e:	e00b      	b.n	800e878 <INTOA+0x48>
		{			
		*v1++=(unsigned char)origbuff[i];
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	1c5a      	adds	r2, r3, #1
 800e864:	603a      	str	r2, [r7, #0]
 800e866:	f107 0108 	add.w	r1, r7, #8
 800e86a:	69fa      	ldr	r2, [r7, #28]
 800e86c:	440a      	add	r2, r1
 800e86e:	7812      	ldrb	r2, [r2, #0]
 800e870:	701a      	strb	r2, [r3, #0]
		i++;
 800e872:	69fb      	ldr	r3, [r7, #28]
 800e874:	3301      	adds	r3, #1
 800e876:	61fb      	str	r3, [r7, #28]
		while(i<=strlen(origbuff))
 800e878:	f107 0308 	add.w	r3, r7, #8
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7f1 fcb9 	bl	80001f4 <strlen>
 800e882:	4602      	mov	r2, r0
 800e884:	69fb      	ldr	r3, [r7, #28]
 800e886:	429a      	cmp	r2, r3
 800e888:	d2ea      	bcs.n	800e860 <INTOA+0x30>
		}
		return(i);
 800e88a:	69fb      	ldr	r3, [r7, #28]
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3720      	adds	r7, #32
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}
 800e894:	080104a8 	.word	0x080104a8

0800e898 <FTOA>:

int FTOA( int a,  unsigned char *v1, int comma)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b08c      	sub	sp, #48	; 0x30
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	60f8      	str	r0, [r7, #12]
 800e8a0:	60b9      	str	r1, [r7, #8]
 800e8a2:	607a      	str	r2, [r7, #4]
char origbuff[20]="0";
 800e8a4:	2330      	movs	r3, #48	; 0x30
 800e8a6:	617b      	str	r3, [r7, #20]
 800e8a8:	f107 0318 	add.w	r3, r7, #24
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	601a      	str	r2, [r3, #0]
 800e8b0:	605a      	str	r2, [r3, #4]
 800e8b2:	609a      	str	r2, [r3, #8]
 800e8b4:	60da      	str	r2, [r3, #12]
int i=0;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
int b=0;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	62bb      	str	r3, [r7, #40]	; 0x28

		sprintf(origbuff,"%i",a);
 800e8be:	f107 0314 	add.w	r3, r7, #20
 800e8c2:	68fa      	ldr	r2, [r7, #12]
 800e8c4:	4917      	ldr	r1, [pc, #92]	; (800e924 <FTOA+0x8c>)
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f000 f9ba 	bl	800ec40 <siprintf>
		b=strlen(origbuff);
 800e8cc:	f107 0314 	add.w	r3, r7, #20
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7f1 fc8f 	bl	80001f4 <strlen>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	62bb      	str	r3, [r7, #40]	; 0x28
		while(i<=((b)+1))
 800e8da:	e018      	b.n	800e90e <FTOA+0x76>
		{
			if((i==comma)&&(comma<(b)))
 800e8dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d108      	bne.n	800e8f6 <FTOA+0x5e>
 800e8e4:	687a      	ldr	r2, [r7, #4]
 800e8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	da04      	bge.n	800e8f6 <FTOA+0x5e>
			{
				*v1++='.';
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	1c5a      	adds	r2, r3, #1
 800e8f0:	60ba      	str	r2, [r7, #8]
 800e8f2:	222e      	movs	r2, #46	; 0x2e
 800e8f4:	701a      	strb	r2, [r3, #0]
				//i++;
			}
			*v1++=(unsigned char)origbuff[i];
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	1c5a      	adds	r2, r3, #1
 800e8fa:	60ba      	str	r2, [r7, #8]
 800e8fc:	f107 0114 	add.w	r1, r7, #20
 800e900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e902:	440a      	add	r2, r1
 800e904:	7812      	ldrb	r2, [r2, #0]
 800e906:	701a      	strb	r2, [r3, #0]
			i++;
 800e908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90a:	3301      	adds	r3, #1
 800e90c:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(i<=((b)+1))
 800e90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e910:	3301      	adds	r3, #1
 800e912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e914:	429a      	cmp	r2, r3
 800e916:	dde1      	ble.n	800e8dc <FTOA+0x44>
		}
		return(i);
 800e918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3730      	adds	r7, #48	; 0x30
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}
 800e922:	bf00      	nop
 800e924:	080104a8 	.word	0x080104a8

0800e928 <CopiaVector>:
					 c|=(b);
	return (c);
}

int CopiaVector( char *a, char *b, int c, int d,char *e)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b088      	sub	sp, #32
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	60f8      	str	r0, [r7, #12]
 800e930:	60b9      	str	r1, [r7, #8]
 800e932:	607a      	str	r2, [r7, #4]
 800e934:	603b      	str	r3, [r7, #0]
int x =0;
 800e936:	2300      	movs	r3, #0
 800e938:	61bb      	str	r3, [r7, #24]
char j[]="\0";  //Vector
 800e93a:	2300      	movs	r3, #0
 800e93c:	823b      	strh	r3, [r7, #16]
char *f=&j;		//Puntero tipo char que aloja las direcciones de memoria del vector j
 800e93e:	f107 0310 	add.w	r3, r7, #16
 800e942:	617b      	str	r3, [r7, #20]
if (c==0)
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d105      	bne.n	800e956 <CopiaVector+0x2e>
{
	x=strlen(b);
 800e94a:	68b8      	ldr	r0, [r7, #8]
 800e94c:	f7f1 fc52 	bl	80001f4 <strlen>
 800e950:	4603      	mov	r3, r0
 800e952:	61bb      	str	r3, [r7, #24]
 800e954:	e02e      	b.n	800e9b4 <CopiaVector+0x8c>
}
else
	{
		x=c;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	61bb      	str	r3, [r7, #24]
		if (x>512)// OJO SOLO HTTP if (x>128)
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e960:	dd01      	ble.n	800e966 <CopiaVector+0x3e>
			{
				return(1);
 800e962:	2301      	movs	r3, #1
 800e964:	e027      	b.n	800e9b6 <CopiaVector+0x8e>
			}
		else
			{
				int p=0;
 800e966:	2300      	movs	r3, #0
 800e968:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800e96a:	e00a      	b.n	800e982 <CopiaVector+0x5a>
				{
					*a++=*b++;
 800e96c:	68ba      	ldr	r2, [r7, #8]
 800e96e:	1c53      	adds	r3, r2, #1
 800e970:	60bb      	str	r3, [r7, #8]
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	1c59      	adds	r1, r3, #1
 800e976:	60f9      	str	r1, [r7, #12]
 800e978:	7812      	ldrb	r2, [r2, #0]
 800e97a:	701a      	strb	r2, [r3, #0]
					p++;
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	3301      	adds	r3, #1
 800e980:	61fb      	str	r3, [r7, #28]
				while(p<x)
 800e982:	69fa      	ldr	r2, [r7, #28]
 800e984:	69bb      	ldr	r3, [r7, #24]
 800e986:	429a      	cmp	r2, r3
 800e988:	dbf0      	blt.n	800e96c <CopiaVector+0x44>
				}


			if (d==1)
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d111      	bne.n	800e9b4 <CopiaVector+0x8c>
			{
			  p=c;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800e994:	e008      	b.n	800e9a8 <CopiaVector+0x80>
			  {

				  *a++=*f;//*a++=*e; //Lo que está en la memoria de f vaya a la memoria de a
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	1c5a      	adds	r2, r3, #1
 800e99a:	60fa      	str	r2, [r7, #12]
 800e99c:	697a      	ldr	r2, [r7, #20]
 800e99e:	7812      	ldrb	r2, [r2, #0]
 800e9a0:	701a      	strb	r2, [r3, #0]
				  p++;
 800e9a2:	69fb      	ldr	r3, [r7, #28]
 800e9a4:	3301      	adds	r3, #1
 800e9a6:	61fb      	str	r3, [r7, #28]
			  while (p<512)// OJO SOLO HTTP while (p<128)
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9ae:	dbf2      	blt.n	800e996 <CopiaVector+0x6e>
				  //&a[p]="/0";

			  }
			return (0);
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	e000      	b.n	800e9b6 <CopiaVector+0x8e>
			}

			}
	}
return (1);
 800e9b4:	2301      	movs	r3, #1
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3720      	adds	r7, #32
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}

0800e9be <atoi>:
 800e9be:	220a      	movs	r2, #10
 800e9c0:	2100      	movs	r1, #0
 800e9c2:	f000 b883 	b.w	800eacc <strtol>
	...

0800e9c8 <_strtol_l.constprop.0>:
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9ce:	d001      	beq.n	800e9d4 <_strtol_l.constprop.0+0xc>
 800e9d0:	2b24      	cmp	r3, #36	; 0x24
 800e9d2:	d906      	bls.n	800e9e2 <_strtol_l.constprop.0+0x1a>
 800e9d4:	f000 fa54 	bl	800ee80 <__errno>
 800e9d8:	2316      	movs	r3, #22
 800e9da:	6003      	str	r3, [r0, #0]
 800e9dc:	2000      	movs	r0, #0
 800e9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800eac8 <_strtol_l.constprop.0+0x100>
 800e9e6:	460d      	mov	r5, r1
 800e9e8:	462e      	mov	r6, r5
 800e9ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e9ee:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e9f2:	f017 0708 	ands.w	r7, r7, #8
 800e9f6:	d1f7      	bne.n	800e9e8 <_strtol_l.constprop.0+0x20>
 800e9f8:	2c2d      	cmp	r4, #45	; 0x2d
 800e9fa:	d132      	bne.n	800ea62 <_strtol_l.constprop.0+0x9a>
 800e9fc:	782c      	ldrb	r4, [r5, #0]
 800e9fe:	2701      	movs	r7, #1
 800ea00:	1cb5      	adds	r5, r6, #2
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d05b      	beq.n	800eabe <_strtol_l.constprop.0+0xf6>
 800ea06:	2b10      	cmp	r3, #16
 800ea08:	d109      	bne.n	800ea1e <_strtol_l.constprop.0+0x56>
 800ea0a:	2c30      	cmp	r4, #48	; 0x30
 800ea0c:	d107      	bne.n	800ea1e <_strtol_l.constprop.0+0x56>
 800ea0e:	782c      	ldrb	r4, [r5, #0]
 800ea10:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ea14:	2c58      	cmp	r4, #88	; 0x58
 800ea16:	d14d      	bne.n	800eab4 <_strtol_l.constprop.0+0xec>
 800ea18:	786c      	ldrb	r4, [r5, #1]
 800ea1a:	2310      	movs	r3, #16
 800ea1c:	3502      	adds	r5, #2
 800ea1e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ea22:	f108 38ff 	add.w	r8, r8, #4294967295
 800ea26:	f04f 0e00 	mov.w	lr, #0
 800ea2a:	fbb8 f9f3 	udiv	r9, r8, r3
 800ea2e:	4676      	mov	r6, lr
 800ea30:	fb03 8a19 	mls	sl, r3, r9, r8
 800ea34:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ea38:	f1bc 0f09 	cmp.w	ip, #9
 800ea3c:	d816      	bhi.n	800ea6c <_strtol_l.constprop.0+0xa4>
 800ea3e:	4664      	mov	r4, ip
 800ea40:	42a3      	cmp	r3, r4
 800ea42:	dd24      	ble.n	800ea8e <_strtol_l.constprop.0+0xc6>
 800ea44:	f1be 3fff 	cmp.w	lr, #4294967295
 800ea48:	d008      	beq.n	800ea5c <_strtol_l.constprop.0+0x94>
 800ea4a:	45b1      	cmp	r9, r6
 800ea4c:	d31c      	bcc.n	800ea88 <_strtol_l.constprop.0+0xc0>
 800ea4e:	d101      	bne.n	800ea54 <_strtol_l.constprop.0+0x8c>
 800ea50:	45a2      	cmp	sl, r4
 800ea52:	db19      	blt.n	800ea88 <_strtol_l.constprop.0+0xc0>
 800ea54:	fb06 4603 	mla	r6, r6, r3, r4
 800ea58:	f04f 0e01 	mov.w	lr, #1
 800ea5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea60:	e7e8      	b.n	800ea34 <_strtol_l.constprop.0+0x6c>
 800ea62:	2c2b      	cmp	r4, #43	; 0x2b
 800ea64:	bf04      	itt	eq
 800ea66:	782c      	ldrbeq	r4, [r5, #0]
 800ea68:	1cb5      	addeq	r5, r6, #2
 800ea6a:	e7ca      	b.n	800ea02 <_strtol_l.constprop.0+0x3a>
 800ea6c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ea70:	f1bc 0f19 	cmp.w	ip, #25
 800ea74:	d801      	bhi.n	800ea7a <_strtol_l.constprop.0+0xb2>
 800ea76:	3c37      	subs	r4, #55	; 0x37
 800ea78:	e7e2      	b.n	800ea40 <_strtol_l.constprop.0+0x78>
 800ea7a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ea7e:	f1bc 0f19 	cmp.w	ip, #25
 800ea82:	d804      	bhi.n	800ea8e <_strtol_l.constprop.0+0xc6>
 800ea84:	3c57      	subs	r4, #87	; 0x57
 800ea86:	e7db      	b.n	800ea40 <_strtol_l.constprop.0+0x78>
 800ea88:	f04f 3eff 	mov.w	lr, #4294967295
 800ea8c:	e7e6      	b.n	800ea5c <_strtol_l.constprop.0+0x94>
 800ea8e:	f1be 3fff 	cmp.w	lr, #4294967295
 800ea92:	d105      	bne.n	800eaa0 <_strtol_l.constprop.0+0xd8>
 800ea94:	2322      	movs	r3, #34	; 0x22
 800ea96:	6003      	str	r3, [r0, #0]
 800ea98:	4646      	mov	r6, r8
 800ea9a:	b942      	cbnz	r2, 800eaae <_strtol_l.constprop.0+0xe6>
 800ea9c:	4630      	mov	r0, r6
 800ea9e:	e79e      	b.n	800e9de <_strtol_l.constprop.0+0x16>
 800eaa0:	b107      	cbz	r7, 800eaa4 <_strtol_l.constprop.0+0xdc>
 800eaa2:	4276      	negs	r6, r6
 800eaa4:	2a00      	cmp	r2, #0
 800eaa6:	d0f9      	beq.n	800ea9c <_strtol_l.constprop.0+0xd4>
 800eaa8:	f1be 0f00 	cmp.w	lr, #0
 800eaac:	d000      	beq.n	800eab0 <_strtol_l.constprop.0+0xe8>
 800eaae:	1e69      	subs	r1, r5, #1
 800eab0:	6011      	str	r1, [r2, #0]
 800eab2:	e7f3      	b.n	800ea9c <_strtol_l.constprop.0+0xd4>
 800eab4:	2430      	movs	r4, #48	; 0x30
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d1b1      	bne.n	800ea1e <_strtol_l.constprop.0+0x56>
 800eaba:	2308      	movs	r3, #8
 800eabc:	e7af      	b.n	800ea1e <_strtol_l.constprop.0+0x56>
 800eabe:	2c30      	cmp	r4, #48	; 0x30
 800eac0:	d0a5      	beq.n	800ea0e <_strtol_l.constprop.0+0x46>
 800eac2:	230a      	movs	r3, #10
 800eac4:	e7ab      	b.n	800ea1e <_strtol_l.constprop.0+0x56>
 800eac6:	bf00      	nop
 800eac8:	080104c5 	.word	0x080104c5

0800eacc <strtol>:
 800eacc:	4613      	mov	r3, r2
 800eace:	460a      	mov	r2, r1
 800ead0:	4601      	mov	r1, r0
 800ead2:	4802      	ldr	r0, [pc, #8]	; (800eadc <strtol+0x10>)
 800ead4:	6800      	ldr	r0, [r0, #0]
 800ead6:	f7ff bf77 	b.w	800e9c8 <_strtol_l.constprop.0>
 800eada:	bf00      	nop
 800eadc:	20000194 	.word	0x20000194

0800eae0 <std>:
 800eae0:	2300      	movs	r3, #0
 800eae2:	b510      	push	{r4, lr}
 800eae4:	4604      	mov	r4, r0
 800eae6:	e9c0 3300 	strd	r3, r3, [r0]
 800eaea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eaee:	6083      	str	r3, [r0, #8]
 800eaf0:	8181      	strh	r1, [r0, #12]
 800eaf2:	6643      	str	r3, [r0, #100]	; 0x64
 800eaf4:	81c2      	strh	r2, [r0, #14]
 800eaf6:	6183      	str	r3, [r0, #24]
 800eaf8:	4619      	mov	r1, r3
 800eafa:	2208      	movs	r2, #8
 800eafc:	305c      	adds	r0, #92	; 0x5c
 800eafe:	f000 f902 	bl	800ed06 <memset>
 800eb02:	4b05      	ldr	r3, [pc, #20]	; (800eb18 <std+0x38>)
 800eb04:	6263      	str	r3, [r4, #36]	; 0x24
 800eb06:	4b05      	ldr	r3, [pc, #20]	; (800eb1c <std+0x3c>)
 800eb08:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb0a:	4b05      	ldr	r3, [pc, #20]	; (800eb20 <std+0x40>)
 800eb0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb0e:	4b05      	ldr	r3, [pc, #20]	; (800eb24 <std+0x44>)
 800eb10:	6224      	str	r4, [r4, #32]
 800eb12:	6323      	str	r3, [r4, #48]	; 0x30
 800eb14:	bd10      	pop	{r4, pc}
 800eb16:	bf00      	nop
 800eb18:	0800ec81 	.word	0x0800ec81
 800eb1c:	0800eca3 	.word	0x0800eca3
 800eb20:	0800ecdb 	.word	0x0800ecdb
 800eb24:	0800ecff 	.word	0x0800ecff

0800eb28 <stdio_exit_handler>:
 800eb28:	4a02      	ldr	r2, [pc, #8]	; (800eb34 <stdio_exit_handler+0xc>)
 800eb2a:	4903      	ldr	r1, [pc, #12]	; (800eb38 <stdio_exit_handler+0x10>)
 800eb2c:	4803      	ldr	r0, [pc, #12]	; (800eb3c <stdio_exit_handler+0x14>)
 800eb2e:	f000 b869 	b.w	800ec04 <_fwalk_sglue>
 800eb32:	bf00      	nop
 800eb34:	2000013c 	.word	0x2000013c
 800eb38:	0800f801 	.word	0x0800f801
 800eb3c:	20000148 	.word	0x20000148

0800eb40 <cleanup_stdio>:
 800eb40:	6841      	ldr	r1, [r0, #4]
 800eb42:	4b0c      	ldr	r3, [pc, #48]	; (800eb74 <cleanup_stdio+0x34>)
 800eb44:	4299      	cmp	r1, r3
 800eb46:	b510      	push	{r4, lr}
 800eb48:	4604      	mov	r4, r0
 800eb4a:	d001      	beq.n	800eb50 <cleanup_stdio+0x10>
 800eb4c:	f000 fe58 	bl	800f800 <_fflush_r>
 800eb50:	68a1      	ldr	r1, [r4, #8]
 800eb52:	4b09      	ldr	r3, [pc, #36]	; (800eb78 <cleanup_stdio+0x38>)
 800eb54:	4299      	cmp	r1, r3
 800eb56:	d002      	beq.n	800eb5e <cleanup_stdio+0x1e>
 800eb58:	4620      	mov	r0, r4
 800eb5a:	f000 fe51 	bl	800f800 <_fflush_r>
 800eb5e:	68e1      	ldr	r1, [r4, #12]
 800eb60:	4b06      	ldr	r3, [pc, #24]	; (800eb7c <cleanup_stdio+0x3c>)
 800eb62:	4299      	cmp	r1, r3
 800eb64:	d004      	beq.n	800eb70 <cleanup_stdio+0x30>
 800eb66:	4620      	mov	r0, r4
 800eb68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb6c:	f000 be48 	b.w	800f800 <_fflush_r>
 800eb70:	bd10      	pop	{r4, pc}
 800eb72:	bf00      	nop
 800eb74:	200043f8 	.word	0x200043f8
 800eb78:	20004460 	.word	0x20004460
 800eb7c:	200044c8 	.word	0x200044c8

0800eb80 <global_stdio_init.part.0>:
 800eb80:	b510      	push	{r4, lr}
 800eb82:	4b0b      	ldr	r3, [pc, #44]	; (800ebb0 <global_stdio_init.part.0+0x30>)
 800eb84:	4c0b      	ldr	r4, [pc, #44]	; (800ebb4 <global_stdio_init.part.0+0x34>)
 800eb86:	4a0c      	ldr	r2, [pc, #48]	; (800ebb8 <global_stdio_init.part.0+0x38>)
 800eb88:	601a      	str	r2, [r3, #0]
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	2104      	movs	r1, #4
 800eb90:	f7ff ffa6 	bl	800eae0 <std>
 800eb94:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800eb98:	2201      	movs	r2, #1
 800eb9a:	2109      	movs	r1, #9
 800eb9c:	f7ff ffa0 	bl	800eae0 <std>
 800eba0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800eba4:	2202      	movs	r2, #2
 800eba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebaa:	2112      	movs	r1, #18
 800ebac:	f7ff bf98 	b.w	800eae0 <std>
 800ebb0:	20004530 	.word	0x20004530
 800ebb4:	200043f8 	.word	0x200043f8
 800ebb8:	0800eb29 	.word	0x0800eb29

0800ebbc <__sfp_lock_acquire>:
 800ebbc:	4801      	ldr	r0, [pc, #4]	; (800ebc4 <__sfp_lock_acquire+0x8>)
 800ebbe:	f000 b989 	b.w	800eed4 <__retarget_lock_acquire_recursive>
 800ebc2:	bf00      	nop
 800ebc4:	20004539 	.word	0x20004539

0800ebc8 <__sfp_lock_release>:
 800ebc8:	4801      	ldr	r0, [pc, #4]	; (800ebd0 <__sfp_lock_release+0x8>)
 800ebca:	f000 b984 	b.w	800eed6 <__retarget_lock_release_recursive>
 800ebce:	bf00      	nop
 800ebd0:	20004539 	.word	0x20004539

0800ebd4 <__sinit>:
 800ebd4:	b510      	push	{r4, lr}
 800ebd6:	4604      	mov	r4, r0
 800ebd8:	f7ff fff0 	bl	800ebbc <__sfp_lock_acquire>
 800ebdc:	6a23      	ldr	r3, [r4, #32]
 800ebde:	b11b      	cbz	r3, 800ebe8 <__sinit+0x14>
 800ebe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebe4:	f7ff bff0 	b.w	800ebc8 <__sfp_lock_release>
 800ebe8:	4b04      	ldr	r3, [pc, #16]	; (800ebfc <__sinit+0x28>)
 800ebea:	6223      	str	r3, [r4, #32]
 800ebec:	4b04      	ldr	r3, [pc, #16]	; (800ec00 <__sinit+0x2c>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d1f5      	bne.n	800ebe0 <__sinit+0xc>
 800ebf4:	f7ff ffc4 	bl	800eb80 <global_stdio_init.part.0>
 800ebf8:	e7f2      	b.n	800ebe0 <__sinit+0xc>
 800ebfa:	bf00      	nop
 800ebfc:	0800eb41 	.word	0x0800eb41
 800ec00:	20004530 	.word	0x20004530

0800ec04 <_fwalk_sglue>:
 800ec04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec08:	4607      	mov	r7, r0
 800ec0a:	4688      	mov	r8, r1
 800ec0c:	4614      	mov	r4, r2
 800ec0e:	2600      	movs	r6, #0
 800ec10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec14:	f1b9 0901 	subs.w	r9, r9, #1
 800ec18:	d505      	bpl.n	800ec26 <_fwalk_sglue+0x22>
 800ec1a:	6824      	ldr	r4, [r4, #0]
 800ec1c:	2c00      	cmp	r4, #0
 800ec1e:	d1f7      	bne.n	800ec10 <_fwalk_sglue+0xc>
 800ec20:	4630      	mov	r0, r6
 800ec22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec26:	89ab      	ldrh	r3, [r5, #12]
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d907      	bls.n	800ec3c <_fwalk_sglue+0x38>
 800ec2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec30:	3301      	adds	r3, #1
 800ec32:	d003      	beq.n	800ec3c <_fwalk_sglue+0x38>
 800ec34:	4629      	mov	r1, r5
 800ec36:	4638      	mov	r0, r7
 800ec38:	47c0      	blx	r8
 800ec3a:	4306      	orrs	r6, r0
 800ec3c:	3568      	adds	r5, #104	; 0x68
 800ec3e:	e7e9      	b.n	800ec14 <_fwalk_sglue+0x10>

0800ec40 <siprintf>:
 800ec40:	b40e      	push	{r1, r2, r3}
 800ec42:	b500      	push	{lr}
 800ec44:	b09c      	sub	sp, #112	; 0x70
 800ec46:	ab1d      	add	r3, sp, #116	; 0x74
 800ec48:	9002      	str	r0, [sp, #8]
 800ec4a:	9006      	str	r0, [sp, #24]
 800ec4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ec50:	4809      	ldr	r0, [pc, #36]	; (800ec78 <siprintf+0x38>)
 800ec52:	9107      	str	r1, [sp, #28]
 800ec54:	9104      	str	r1, [sp, #16]
 800ec56:	4909      	ldr	r1, [pc, #36]	; (800ec7c <siprintf+0x3c>)
 800ec58:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec5c:	9105      	str	r1, [sp, #20]
 800ec5e:	6800      	ldr	r0, [r0, #0]
 800ec60:	9301      	str	r3, [sp, #4]
 800ec62:	a902      	add	r1, sp, #8
 800ec64:	f000 fab8 	bl	800f1d8 <_svfiprintf_r>
 800ec68:	9b02      	ldr	r3, [sp, #8]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	701a      	strb	r2, [r3, #0]
 800ec6e:	b01c      	add	sp, #112	; 0x70
 800ec70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec74:	b003      	add	sp, #12
 800ec76:	4770      	bx	lr
 800ec78:	20000194 	.word	0x20000194
 800ec7c:	ffff0208 	.word	0xffff0208

0800ec80 <__sread>:
 800ec80:	b510      	push	{r4, lr}
 800ec82:	460c      	mov	r4, r1
 800ec84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec88:	f000 f8d6 	bl	800ee38 <_read_r>
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	bfab      	itete	ge
 800ec90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec92:	89a3      	ldrhlt	r3, [r4, #12]
 800ec94:	181b      	addge	r3, r3, r0
 800ec96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec9a:	bfac      	ite	ge
 800ec9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec9e:	81a3      	strhlt	r3, [r4, #12]
 800eca0:	bd10      	pop	{r4, pc}

0800eca2 <__swrite>:
 800eca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eca6:	461f      	mov	r7, r3
 800eca8:	898b      	ldrh	r3, [r1, #12]
 800ecaa:	05db      	lsls	r3, r3, #23
 800ecac:	4605      	mov	r5, r0
 800ecae:	460c      	mov	r4, r1
 800ecb0:	4616      	mov	r6, r2
 800ecb2:	d505      	bpl.n	800ecc0 <__swrite+0x1e>
 800ecb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecb8:	2302      	movs	r3, #2
 800ecba:	2200      	movs	r2, #0
 800ecbc:	f000 f8aa 	bl	800ee14 <_lseek_r>
 800ecc0:	89a3      	ldrh	r3, [r4, #12]
 800ecc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ecca:	81a3      	strh	r3, [r4, #12]
 800eccc:	4632      	mov	r2, r6
 800ecce:	463b      	mov	r3, r7
 800ecd0:	4628      	mov	r0, r5
 800ecd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecd6:	f000 b8c1 	b.w	800ee5c <_write_r>

0800ecda <__sseek>:
 800ecda:	b510      	push	{r4, lr}
 800ecdc:	460c      	mov	r4, r1
 800ecde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ece2:	f000 f897 	bl	800ee14 <_lseek_r>
 800ece6:	1c43      	adds	r3, r0, #1
 800ece8:	89a3      	ldrh	r3, [r4, #12]
 800ecea:	bf15      	itete	ne
 800ecec:	6560      	strne	r0, [r4, #84]	; 0x54
 800ecee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ecf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ecf6:	81a3      	strheq	r3, [r4, #12]
 800ecf8:	bf18      	it	ne
 800ecfa:	81a3      	strhne	r3, [r4, #12]
 800ecfc:	bd10      	pop	{r4, pc}

0800ecfe <__sclose>:
 800ecfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed02:	f000 b877 	b.w	800edf4 <_close_r>

0800ed06 <memset>:
 800ed06:	4402      	add	r2, r0
 800ed08:	4603      	mov	r3, r0
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d100      	bne.n	800ed10 <memset+0xa>
 800ed0e:	4770      	bx	lr
 800ed10:	f803 1b01 	strb.w	r1, [r3], #1
 800ed14:	e7f9      	b.n	800ed0a <memset+0x4>

0800ed16 <strncat>:
 800ed16:	b530      	push	{r4, r5, lr}
 800ed18:	4604      	mov	r4, r0
 800ed1a:	7825      	ldrb	r5, [r4, #0]
 800ed1c:	4623      	mov	r3, r4
 800ed1e:	3401      	adds	r4, #1
 800ed20:	2d00      	cmp	r5, #0
 800ed22:	d1fa      	bne.n	800ed1a <strncat+0x4>
 800ed24:	3a01      	subs	r2, #1
 800ed26:	d304      	bcc.n	800ed32 <strncat+0x1c>
 800ed28:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed2c:	f803 4b01 	strb.w	r4, [r3], #1
 800ed30:	b904      	cbnz	r4, 800ed34 <strncat+0x1e>
 800ed32:	bd30      	pop	{r4, r5, pc}
 800ed34:	2a00      	cmp	r2, #0
 800ed36:	d1f5      	bne.n	800ed24 <strncat+0xe>
 800ed38:	701a      	strb	r2, [r3, #0]
 800ed3a:	e7f3      	b.n	800ed24 <strncat+0xe>

0800ed3c <strtok>:
 800ed3c:	4b16      	ldr	r3, [pc, #88]	; (800ed98 <strtok+0x5c>)
 800ed3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed40:	681e      	ldr	r6, [r3, #0]
 800ed42:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800ed44:	4605      	mov	r5, r0
 800ed46:	b9fc      	cbnz	r4, 800ed88 <strtok+0x4c>
 800ed48:	2050      	movs	r0, #80	; 0x50
 800ed4a:	9101      	str	r1, [sp, #4]
 800ed4c:	f000 f936 	bl	800efbc <malloc>
 800ed50:	9901      	ldr	r1, [sp, #4]
 800ed52:	6470      	str	r0, [r6, #68]	; 0x44
 800ed54:	4602      	mov	r2, r0
 800ed56:	b920      	cbnz	r0, 800ed62 <strtok+0x26>
 800ed58:	4b10      	ldr	r3, [pc, #64]	; (800ed9c <strtok+0x60>)
 800ed5a:	4811      	ldr	r0, [pc, #68]	; (800eda0 <strtok+0x64>)
 800ed5c:	215b      	movs	r1, #91	; 0x5b
 800ed5e:	f000 f8c3 	bl	800eee8 <__assert_func>
 800ed62:	e9c0 4400 	strd	r4, r4, [r0]
 800ed66:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ed6a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ed6e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ed72:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ed76:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ed7a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ed7e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ed82:	6184      	str	r4, [r0, #24]
 800ed84:	7704      	strb	r4, [r0, #28]
 800ed86:	6244      	str	r4, [r0, #36]	; 0x24
 800ed88:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	4628      	mov	r0, r5
 800ed8e:	b002      	add	sp, #8
 800ed90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed94:	f000 b806 	b.w	800eda4 <__strtok_r>
 800ed98:	20000194 	.word	0x20000194
 800ed9c:	080105c5 	.word	0x080105c5
 800eda0:	080105dc 	.word	0x080105dc

0800eda4 <__strtok_r>:
 800eda4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eda6:	b908      	cbnz	r0, 800edac <__strtok_r+0x8>
 800eda8:	6810      	ldr	r0, [r2, #0]
 800edaa:	b188      	cbz	r0, 800edd0 <__strtok_r+0x2c>
 800edac:	4604      	mov	r4, r0
 800edae:	4620      	mov	r0, r4
 800edb0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800edb4:	460f      	mov	r7, r1
 800edb6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800edba:	b91e      	cbnz	r6, 800edc4 <__strtok_r+0x20>
 800edbc:	b965      	cbnz	r5, 800edd8 <__strtok_r+0x34>
 800edbe:	6015      	str	r5, [r2, #0]
 800edc0:	4628      	mov	r0, r5
 800edc2:	e005      	b.n	800edd0 <__strtok_r+0x2c>
 800edc4:	42b5      	cmp	r5, r6
 800edc6:	d1f6      	bne.n	800edb6 <__strtok_r+0x12>
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d1f0      	bne.n	800edae <__strtok_r+0xa>
 800edcc:	6014      	str	r4, [r2, #0]
 800edce:	7003      	strb	r3, [r0, #0]
 800edd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edd2:	461c      	mov	r4, r3
 800edd4:	e00c      	b.n	800edf0 <__strtok_r+0x4c>
 800edd6:	b915      	cbnz	r5, 800edde <__strtok_r+0x3a>
 800edd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eddc:	460e      	mov	r6, r1
 800edde:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ede2:	42ab      	cmp	r3, r5
 800ede4:	d1f7      	bne.n	800edd6 <__strtok_r+0x32>
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d0f3      	beq.n	800edd2 <__strtok_r+0x2e>
 800edea:	2300      	movs	r3, #0
 800edec:	f804 3c01 	strb.w	r3, [r4, #-1]
 800edf0:	6014      	str	r4, [r2, #0]
 800edf2:	e7ed      	b.n	800edd0 <__strtok_r+0x2c>

0800edf4 <_close_r>:
 800edf4:	b538      	push	{r3, r4, r5, lr}
 800edf6:	4d06      	ldr	r5, [pc, #24]	; (800ee10 <_close_r+0x1c>)
 800edf8:	2300      	movs	r3, #0
 800edfa:	4604      	mov	r4, r0
 800edfc:	4608      	mov	r0, r1
 800edfe:	602b      	str	r3, [r5, #0]
 800ee00:	f7f3 fb25 	bl	800244e <_close>
 800ee04:	1c43      	adds	r3, r0, #1
 800ee06:	d102      	bne.n	800ee0e <_close_r+0x1a>
 800ee08:	682b      	ldr	r3, [r5, #0]
 800ee0a:	b103      	cbz	r3, 800ee0e <_close_r+0x1a>
 800ee0c:	6023      	str	r3, [r4, #0]
 800ee0e:	bd38      	pop	{r3, r4, r5, pc}
 800ee10:	20004534 	.word	0x20004534

0800ee14 <_lseek_r>:
 800ee14:	b538      	push	{r3, r4, r5, lr}
 800ee16:	4d07      	ldr	r5, [pc, #28]	; (800ee34 <_lseek_r+0x20>)
 800ee18:	4604      	mov	r4, r0
 800ee1a:	4608      	mov	r0, r1
 800ee1c:	4611      	mov	r1, r2
 800ee1e:	2200      	movs	r2, #0
 800ee20:	602a      	str	r2, [r5, #0]
 800ee22:	461a      	mov	r2, r3
 800ee24:	f7f3 fb3a 	bl	800249c <_lseek>
 800ee28:	1c43      	adds	r3, r0, #1
 800ee2a:	d102      	bne.n	800ee32 <_lseek_r+0x1e>
 800ee2c:	682b      	ldr	r3, [r5, #0]
 800ee2e:	b103      	cbz	r3, 800ee32 <_lseek_r+0x1e>
 800ee30:	6023      	str	r3, [r4, #0]
 800ee32:	bd38      	pop	{r3, r4, r5, pc}
 800ee34:	20004534 	.word	0x20004534

0800ee38 <_read_r>:
 800ee38:	b538      	push	{r3, r4, r5, lr}
 800ee3a:	4d07      	ldr	r5, [pc, #28]	; (800ee58 <_read_r+0x20>)
 800ee3c:	4604      	mov	r4, r0
 800ee3e:	4608      	mov	r0, r1
 800ee40:	4611      	mov	r1, r2
 800ee42:	2200      	movs	r2, #0
 800ee44:	602a      	str	r2, [r5, #0]
 800ee46:	461a      	mov	r2, r3
 800ee48:	f7f3 fac8 	bl	80023dc <_read>
 800ee4c:	1c43      	adds	r3, r0, #1
 800ee4e:	d102      	bne.n	800ee56 <_read_r+0x1e>
 800ee50:	682b      	ldr	r3, [r5, #0]
 800ee52:	b103      	cbz	r3, 800ee56 <_read_r+0x1e>
 800ee54:	6023      	str	r3, [r4, #0]
 800ee56:	bd38      	pop	{r3, r4, r5, pc}
 800ee58:	20004534 	.word	0x20004534

0800ee5c <_write_r>:
 800ee5c:	b538      	push	{r3, r4, r5, lr}
 800ee5e:	4d07      	ldr	r5, [pc, #28]	; (800ee7c <_write_r+0x20>)
 800ee60:	4604      	mov	r4, r0
 800ee62:	4608      	mov	r0, r1
 800ee64:	4611      	mov	r1, r2
 800ee66:	2200      	movs	r2, #0
 800ee68:	602a      	str	r2, [r5, #0]
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	f7f3 fad3 	bl	8002416 <_write>
 800ee70:	1c43      	adds	r3, r0, #1
 800ee72:	d102      	bne.n	800ee7a <_write_r+0x1e>
 800ee74:	682b      	ldr	r3, [r5, #0]
 800ee76:	b103      	cbz	r3, 800ee7a <_write_r+0x1e>
 800ee78:	6023      	str	r3, [r4, #0]
 800ee7a:	bd38      	pop	{r3, r4, r5, pc}
 800ee7c:	20004534 	.word	0x20004534

0800ee80 <__errno>:
 800ee80:	4b01      	ldr	r3, [pc, #4]	; (800ee88 <__errno+0x8>)
 800ee82:	6818      	ldr	r0, [r3, #0]
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	20000194 	.word	0x20000194

0800ee8c <__libc_init_array>:
 800ee8c:	b570      	push	{r4, r5, r6, lr}
 800ee8e:	4d0d      	ldr	r5, [pc, #52]	; (800eec4 <__libc_init_array+0x38>)
 800ee90:	4c0d      	ldr	r4, [pc, #52]	; (800eec8 <__libc_init_array+0x3c>)
 800ee92:	1b64      	subs	r4, r4, r5
 800ee94:	10a4      	asrs	r4, r4, #2
 800ee96:	2600      	movs	r6, #0
 800ee98:	42a6      	cmp	r6, r4
 800ee9a:	d109      	bne.n	800eeb0 <__libc_init_array+0x24>
 800ee9c:	4d0b      	ldr	r5, [pc, #44]	; (800eecc <__libc_init_array+0x40>)
 800ee9e:	4c0c      	ldr	r4, [pc, #48]	; (800eed0 <__libc_init_array+0x44>)
 800eea0:	f001 f800 	bl	800fea4 <_init>
 800eea4:	1b64      	subs	r4, r4, r5
 800eea6:	10a4      	asrs	r4, r4, #2
 800eea8:	2600      	movs	r6, #0
 800eeaa:	42a6      	cmp	r6, r4
 800eeac:	d105      	bne.n	800eeba <__libc_init_array+0x2e>
 800eeae:	bd70      	pop	{r4, r5, r6, pc}
 800eeb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeb4:	4798      	blx	r3
 800eeb6:	3601      	adds	r6, #1
 800eeb8:	e7ee      	b.n	800ee98 <__libc_init_array+0xc>
 800eeba:	f855 3b04 	ldr.w	r3, [r5], #4
 800eebe:	4798      	blx	r3
 800eec0:	3601      	adds	r6, #1
 800eec2:	e7f2      	b.n	800eeaa <__libc_init_array+0x1e>
 800eec4:	080106b0 	.word	0x080106b0
 800eec8:	080106b0 	.word	0x080106b0
 800eecc:	080106b0 	.word	0x080106b0
 800eed0:	080106b4 	.word	0x080106b4

0800eed4 <__retarget_lock_acquire_recursive>:
 800eed4:	4770      	bx	lr

0800eed6 <__retarget_lock_release_recursive>:
 800eed6:	4770      	bx	lr

0800eed8 <strcpy>:
 800eed8:	4603      	mov	r3, r0
 800eeda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eede:	f803 2b01 	strb.w	r2, [r3], #1
 800eee2:	2a00      	cmp	r2, #0
 800eee4:	d1f9      	bne.n	800eeda <strcpy+0x2>
 800eee6:	4770      	bx	lr

0800eee8 <__assert_func>:
 800eee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eeea:	4614      	mov	r4, r2
 800eeec:	461a      	mov	r2, r3
 800eeee:	4b09      	ldr	r3, [pc, #36]	; (800ef14 <__assert_func+0x2c>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	4605      	mov	r5, r0
 800eef4:	68d8      	ldr	r0, [r3, #12]
 800eef6:	b14c      	cbz	r4, 800ef0c <__assert_func+0x24>
 800eef8:	4b07      	ldr	r3, [pc, #28]	; (800ef18 <__assert_func+0x30>)
 800eefa:	9100      	str	r1, [sp, #0]
 800eefc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef00:	4906      	ldr	r1, [pc, #24]	; (800ef1c <__assert_func+0x34>)
 800ef02:	462b      	mov	r3, r5
 800ef04:	f000 fca4 	bl	800f850 <fiprintf>
 800ef08:	f000 fcec 	bl	800f8e4 <abort>
 800ef0c:	4b04      	ldr	r3, [pc, #16]	; (800ef20 <__assert_func+0x38>)
 800ef0e:	461c      	mov	r4, r3
 800ef10:	e7f3      	b.n	800eefa <__assert_func+0x12>
 800ef12:	bf00      	nop
 800ef14:	20000194 	.word	0x20000194
 800ef18:	08010636 	.word	0x08010636
 800ef1c:	08010643 	.word	0x08010643
 800ef20:	08010671 	.word	0x08010671

0800ef24 <_free_r>:
 800ef24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef26:	2900      	cmp	r1, #0
 800ef28:	d044      	beq.n	800efb4 <_free_r+0x90>
 800ef2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef2e:	9001      	str	r0, [sp, #4]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	f1a1 0404 	sub.w	r4, r1, #4
 800ef36:	bfb8      	it	lt
 800ef38:	18e4      	addlt	r4, r4, r3
 800ef3a:	f000 f8e7 	bl	800f10c <__malloc_lock>
 800ef3e:	4a1e      	ldr	r2, [pc, #120]	; (800efb8 <_free_r+0x94>)
 800ef40:	9801      	ldr	r0, [sp, #4]
 800ef42:	6813      	ldr	r3, [r2, #0]
 800ef44:	b933      	cbnz	r3, 800ef54 <_free_r+0x30>
 800ef46:	6063      	str	r3, [r4, #4]
 800ef48:	6014      	str	r4, [r2, #0]
 800ef4a:	b003      	add	sp, #12
 800ef4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef50:	f000 b8e2 	b.w	800f118 <__malloc_unlock>
 800ef54:	42a3      	cmp	r3, r4
 800ef56:	d908      	bls.n	800ef6a <_free_r+0x46>
 800ef58:	6825      	ldr	r5, [r4, #0]
 800ef5a:	1961      	adds	r1, r4, r5
 800ef5c:	428b      	cmp	r3, r1
 800ef5e:	bf01      	itttt	eq
 800ef60:	6819      	ldreq	r1, [r3, #0]
 800ef62:	685b      	ldreq	r3, [r3, #4]
 800ef64:	1949      	addeq	r1, r1, r5
 800ef66:	6021      	streq	r1, [r4, #0]
 800ef68:	e7ed      	b.n	800ef46 <_free_r+0x22>
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	b10b      	cbz	r3, 800ef74 <_free_r+0x50>
 800ef70:	42a3      	cmp	r3, r4
 800ef72:	d9fa      	bls.n	800ef6a <_free_r+0x46>
 800ef74:	6811      	ldr	r1, [r2, #0]
 800ef76:	1855      	adds	r5, r2, r1
 800ef78:	42a5      	cmp	r5, r4
 800ef7a:	d10b      	bne.n	800ef94 <_free_r+0x70>
 800ef7c:	6824      	ldr	r4, [r4, #0]
 800ef7e:	4421      	add	r1, r4
 800ef80:	1854      	adds	r4, r2, r1
 800ef82:	42a3      	cmp	r3, r4
 800ef84:	6011      	str	r1, [r2, #0]
 800ef86:	d1e0      	bne.n	800ef4a <_free_r+0x26>
 800ef88:	681c      	ldr	r4, [r3, #0]
 800ef8a:	685b      	ldr	r3, [r3, #4]
 800ef8c:	6053      	str	r3, [r2, #4]
 800ef8e:	440c      	add	r4, r1
 800ef90:	6014      	str	r4, [r2, #0]
 800ef92:	e7da      	b.n	800ef4a <_free_r+0x26>
 800ef94:	d902      	bls.n	800ef9c <_free_r+0x78>
 800ef96:	230c      	movs	r3, #12
 800ef98:	6003      	str	r3, [r0, #0]
 800ef9a:	e7d6      	b.n	800ef4a <_free_r+0x26>
 800ef9c:	6825      	ldr	r5, [r4, #0]
 800ef9e:	1961      	adds	r1, r4, r5
 800efa0:	428b      	cmp	r3, r1
 800efa2:	bf04      	itt	eq
 800efa4:	6819      	ldreq	r1, [r3, #0]
 800efa6:	685b      	ldreq	r3, [r3, #4]
 800efa8:	6063      	str	r3, [r4, #4]
 800efaa:	bf04      	itt	eq
 800efac:	1949      	addeq	r1, r1, r5
 800efae:	6021      	streq	r1, [r4, #0]
 800efb0:	6054      	str	r4, [r2, #4]
 800efb2:	e7ca      	b.n	800ef4a <_free_r+0x26>
 800efb4:	b003      	add	sp, #12
 800efb6:	bd30      	pop	{r4, r5, pc}
 800efb8:	2000453c 	.word	0x2000453c

0800efbc <malloc>:
 800efbc:	4b02      	ldr	r3, [pc, #8]	; (800efc8 <malloc+0xc>)
 800efbe:	4601      	mov	r1, r0
 800efc0:	6818      	ldr	r0, [r3, #0]
 800efc2:	f000 b823 	b.w	800f00c <_malloc_r>
 800efc6:	bf00      	nop
 800efc8:	20000194 	.word	0x20000194

0800efcc <sbrk_aligned>:
 800efcc:	b570      	push	{r4, r5, r6, lr}
 800efce:	4e0e      	ldr	r6, [pc, #56]	; (800f008 <sbrk_aligned+0x3c>)
 800efd0:	460c      	mov	r4, r1
 800efd2:	6831      	ldr	r1, [r6, #0]
 800efd4:	4605      	mov	r5, r0
 800efd6:	b911      	cbnz	r1, 800efde <sbrk_aligned+0x12>
 800efd8:	f000 fc66 	bl	800f8a8 <_sbrk_r>
 800efdc:	6030      	str	r0, [r6, #0]
 800efde:	4621      	mov	r1, r4
 800efe0:	4628      	mov	r0, r5
 800efe2:	f000 fc61 	bl	800f8a8 <_sbrk_r>
 800efe6:	1c43      	adds	r3, r0, #1
 800efe8:	d00a      	beq.n	800f000 <sbrk_aligned+0x34>
 800efea:	1cc4      	adds	r4, r0, #3
 800efec:	f024 0403 	bic.w	r4, r4, #3
 800eff0:	42a0      	cmp	r0, r4
 800eff2:	d007      	beq.n	800f004 <sbrk_aligned+0x38>
 800eff4:	1a21      	subs	r1, r4, r0
 800eff6:	4628      	mov	r0, r5
 800eff8:	f000 fc56 	bl	800f8a8 <_sbrk_r>
 800effc:	3001      	adds	r0, #1
 800effe:	d101      	bne.n	800f004 <sbrk_aligned+0x38>
 800f000:	f04f 34ff 	mov.w	r4, #4294967295
 800f004:	4620      	mov	r0, r4
 800f006:	bd70      	pop	{r4, r5, r6, pc}
 800f008:	20004540 	.word	0x20004540

0800f00c <_malloc_r>:
 800f00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f010:	1ccd      	adds	r5, r1, #3
 800f012:	f025 0503 	bic.w	r5, r5, #3
 800f016:	3508      	adds	r5, #8
 800f018:	2d0c      	cmp	r5, #12
 800f01a:	bf38      	it	cc
 800f01c:	250c      	movcc	r5, #12
 800f01e:	2d00      	cmp	r5, #0
 800f020:	4607      	mov	r7, r0
 800f022:	db01      	blt.n	800f028 <_malloc_r+0x1c>
 800f024:	42a9      	cmp	r1, r5
 800f026:	d905      	bls.n	800f034 <_malloc_r+0x28>
 800f028:	230c      	movs	r3, #12
 800f02a:	603b      	str	r3, [r7, #0]
 800f02c:	2600      	movs	r6, #0
 800f02e:	4630      	mov	r0, r6
 800f030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f034:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f108 <_malloc_r+0xfc>
 800f038:	f000 f868 	bl	800f10c <__malloc_lock>
 800f03c:	f8d8 3000 	ldr.w	r3, [r8]
 800f040:	461c      	mov	r4, r3
 800f042:	bb5c      	cbnz	r4, 800f09c <_malloc_r+0x90>
 800f044:	4629      	mov	r1, r5
 800f046:	4638      	mov	r0, r7
 800f048:	f7ff ffc0 	bl	800efcc <sbrk_aligned>
 800f04c:	1c43      	adds	r3, r0, #1
 800f04e:	4604      	mov	r4, r0
 800f050:	d155      	bne.n	800f0fe <_malloc_r+0xf2>
 800f052:	f8d8 4000 	ldr.w	r4, [r8]
 800f056:	4626      	mov	r6, r4
 800f058:	2e00      	cmp	r6, #0
 800f05a:	d145      	bne.n	800f0e8 <_malloc_r+0xdc>
 800f05c:	2c00      	cmp	r4, #0
 800f05e:	d048      	beq.n	800f0f2 <_malloc_r+0xe6>
 800f060:	6823      	ldr	r3, [r4, #0]
 800f062:	4631      	mov	r1, r6
 800f064:	4638      	mov	r0, r7
 800f066:	eb04 0903 	add.w	r9, r4, r3
 800f06a:	f000 fc1d 	bl	800f8a8 <_sbrk_r>
 800f06e:	4581      	cmp	r9, r0
 800f070:	d13f      	bne.n	800f0f2 <_malloc_r+0xe6>
 800f072:	6821      	ldr	r1, [r4, #0]
 800f074:	1a6d      	subs	r5, r5, r1
 800f076:	4629      	mov	r1, r5
 800f078:	4638      	mov	r0, r7
 800f07a:	f7ff ffa7 	bl	800efcc <sbrk_aligned>
 800f07e:	3001      	adds	r0, #1
 800f080:	d037      	beq.n	800f0f2 <_malloc_r+0xe6>
 800f082:	6823      	ldr	r3, [r4, #0]
 800f084:	442b      	add	r3, r5
 800f086:	6023      	str	r3, [r4, #0]
 800f088:	f8d8 3000 	ldr.w	r3, [r8]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d038      	beq.n	800f102 <_malloc_r+0xf6>
 800f090:	685a      	ldr	r2, [r3, #4]
 800f092:	42a2      	cmp	r2, r4
 800f094:	d12b      	bne.n	800f0ee <_malloc_r+0xe2>
 800f096:	2200      	movs	r2, #0
 800f098:	605a      	str	r2, [r3, #4]
 800f09a:	e00f      	b.n	800f0bc <_malloc_r+0xb0>
 800f09c:	6822      	ldr	r2, [r4, #0]
 800f09e:	1b52      	subs	r2, r2, r5
 800f0a0:	d41f      	bmi.n	800f0e2 <_malloc_r+0xd6>
 800f0a2:	2a0b      	cmp	r2, #11
 800f0a4:	d917      	bls.n	800f0d6 <_malloc_r+0xca>
 800f0a6:	1961      	adds	r1, r4, r5
 800f0a8:	42a3      	cmp	r3, r4
 800f0aa:	6025      	str	r5, [r4, #0]
 800f0ac:	bf18      	it	ne
 800f0ae:	6059      	strne	r1, [r3, #4]
 800f0b0:	6863      	ldr	r3, [r4, #4]
 800f0b2:	bf08      	it	eq
 800f0b4:	f8c8 1000 	streq.w	r1, [r8]
 800f0b8:	5162      	str	r2, [r4, r5]
 800f0ba:	604b      	str	r3, [r1, #4]
 800f0bc:	4638      	mov	r0, r7
 800f0be:	f104 060b 	add.w	r6, r4, #11
 800f0c2:	f000 f829 	bl	800f118 <__malloc_unlock>
 800f0c6:	f026 0607 	bic.w	r6, r6, #7
 800f0ca:	1d23      	adds	r3, r4, #4
 800f0cc:	1af2      	subs	r2, r6, r3
 800f0ce:	d0ae      	beq.n	800f02e <_malloc_r+0x22>
 800f0d0:	1b9b      	subs	r3, r3, r6
 800f0d2:	50a3      	str	r3, [r4, r2]
 800f0d4:	e7ab      	b.n	800f02e <_malloc_r+0x22>
 800f0d6:	42a3      	cmp	r3, r4
 800f0d8:	6862      	ldr	r2, [r4, #4]
 800f0da:	d1dd      	bne.n	800f098 <_malloc_r+0x8c>
 800f0dc:	f8c8 2000 	str.w	r2, [r8]
 800f0e0:	e7ec      	b.n	800f0bc <_malloc_r+0xb0>
 800f0e2:	4623      	mov	r3, r4
 800f0e4:	6864      	ldr	r4, [r4, #4]
 800f0e6:	e7ac      	b.n	800f042 <_malloc_r+0x36>
 800f0e8:	4634      	mov	r4, r6
 800f0ea:	6876      	ldr	r6, [r6, #4]
 800f0ec:	e7b4      	b.n	800f058 <_malloc_r+0x4c>
 800f0ee:	4613      	mov	r3, r2
 800f0f0:	e7cc      	b.n	800f08c <_malloc_r+0x80>
 800f0f2:	230c      	movs	r3, #12
 800f0f4:	603b      	str	r3, [r7, #0]
 800f0f6:	4638      	mov	r0, r7
 800f0f8:	f000 f80e 	bl	800f118 <__malloc_unlock>
 800f0fc:	e797      	b.n	800f02e <_malloc_r+0x22>
 800f0fe:	6025      	str	r5, [r4, #0]
 800f100:	e7dc      	b.n	800f0bc <_malloc_r+0xb0>
 800f102:	605b      	str	r3, [r3, #4]
 800f104:	deff      	udf	#255	; 0xff
 800f106:	bf00      	nop
 800f108:	2000453c 	.word	0x2000453c

0800f10c <__malloc_lock>:
 800f10c:	4801      	ldr	r0, [pc, #4]	; (800f114 <__malloc_lock+0x8>)
 800f10e:	f7ff bee1 	b.w	800eed4 <__retarget_lock_acquire_recursive>
 800f112:	bf00      	nop
 800f114:	20004538 	.word	0x20004538

0800f118 <__malloc_unlock>:
 800f118:	4801      	ldr	r0, [pc, #4]	; (800f120 <__malloc_unlock+0x8>)
 800f11a:	f7ff bedc 	b.w	800eed6 <__retarget_lock_release_recursive>
 800f11e:	bf00      	nop
 800f120:	20004538 	.word	0x20004538

0800f124 <__ssputs_r>:
 800f124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f128:	688e      	ldr	r6, [r1, #8]
 800f12a:	461f      	mov	r7, r3
 800f12c:	42be      	cmp	r6, r7
 800f12e:	680b      	ldr	r3, [r1, #0]
 800f130:	4682      	mov	sl, r0
 800f132:	460c      	mov	r4, r1
 800f134:	4690      	mov	r8, r2
 800f136:	d82c      	bhi.n	800f192 <__ssputs_r+0x6e>
 800f138:	898a      	ldrh	r2, [r1, #12]
 800f13a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f13e:	d026      	beq.n	800f18e <__ssputs_r+0x6a>
 800f140:	6965      	ldr	r5, [r4, #20]
 800f142:	6909      	ldr	r1, [r1, #16]
 800f144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f148:	eba3 0901 	sub.w	r9, r3, r1
 800f14c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f150:	1c7b      	adds	r3, r7, #1
 800f152:	444b      	add	r3, r9
 800f154:	106d      	asrs	r5, r5, #1
 800f156:	429d      	cmp	r5, r3
 800f158:	bf38      	it	cc
 800f15a:	461d      	movcc	r5, r3
 800f15c:	0553      	lsls	r3, r2, #21
 800f15e:	d527      	bpl.n	800f1b0 <__ssputs_r+0x8c>
 800f160:	4629      	mov	r1, r5
 800f162:	f7ff ff53 	bl	800f00c <_malloc_r>
 800f166:	4606      	mov	r6, r0
 800f168:	b360      	cbz	r0, 800f1c4 <__ssputs_r+0xa0>
 800f16a:	6921      	ldr	r1, [r4, #16]
 800f16c:	464a      	mov	r2, r9
 800f16e:	f000 fbab 	bl	800f8c8 <memcpy>
 800f172:	89a3      	ldrh	r3, [r4, #12]
 800f174:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f17c:	81a3      	strh	r3, [r4, #12]
 800f17e:	6126      	str	r6, [r4, #16]
 800f180:	6165      	str	r5, [r4, #20]
 800f182:	444e      	add	r6, r9
 800f184:	eba5 0509 	sub.w	r5, r5, r9
 800f188:	6026      	str	r6, [r4, #0]
 800f18a:	60a5      	str	r5, [r4, #8]
 800f18c:	463e      	mov	r6, r7
 800f18e:	42be      	cmp	r6, r7
 800f190:	d900      	bls.n	800f194 <__ssputs_r+0x70>
 800f192:	463e      	mov	r6, r7
 800f194:	6820      	ldr	r0, [r4, #0]
 800f196:	4632      	mov	r2, r6
 800f198:	4641      	mov	r1, r8
 800f19a:	f000 fb6b 	bl	800f874 <memmove>
 800f19e:	68a3      	ldr	r3, [r4, #8]
 800f1a0:	1b9b      	subs	r3, r3, r6
 800f1a2:	60a3      	str	r3, [r4, #8]
 800f1a4:	6823      	ldr	r3, [r4, #0]
 800f1a6:	4433      	add	r3, r6
 800f1a8:	6023      	str	r3, [r4, #0]
 800f1aa:	2000      	movs	r0, #0
 800f1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1b0:	462a      	mov	r2, r5
 800f1b2:	f000 fb9e 	bl	800f8f2 <_realloc_r>
 800f1b6:	4606      	mov	r6, r0
 800f1b8:	2800      	cmp	r0, #0
 800f1ba:	d1e0      	bne.n	800f17e <__ssputs_r+0x5a>
 800f1bc:	6921      	ldr	r1, [r4, #16]
 800f1be:	4650      	mov	r0, sl
 800f1c0:	f7ff feb0 	bl	800ef24 <_free_r>
 800f1c4:	230c      	movs	r3, #12
 800f1c6:	f8ca 3000 	str.w	r3, [sl]
 800f1ca:	89a3      	ldrh	r3, [r4, #12]
 800f1cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1d0:	81a3      	strh	r3, [r4, #12]
 800f1d2:	f04f 30ff 	mov.w	r0, #4294967295
 800f1d6:	e7e9      	b.n	800f1ac <__ssputs_r+0x88>

0800f1d8 <_svfiprintf_r>:
 800f1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1dc:	4698      	mov	r8, r3
 800f1de:	898b      	ldrh	r3, [r1, #12]
 800f1e0:	061b      	lsls	r3, r3, #24
 800f1e2:	b09d      	sub	sp, #116	; 0x74
 800f1e4:	4607      	mov	r7, r0
 800f1e6:	460d      	mov	r5, r1
 800f1e8:	4614      	mov	r4, r2
 800f1ea:	d50e      	bpl.n	800f20a <_svfiprintf_r+0x32>
 800f1ec:	690b      	ldr	r3, [r1, #16]
 800f1ee:	b963      	cbnz	r3, 800f20a <_svfiprintf_r+0x32>
 800f1f0:	2140      	movs	r1, #64	; 0x40
 800f1f2:	f7ff ff0b 	bl	800f00c <_malloc_r>
 800f1f6:	6028      	str	r0, [r5, #0]
 800f1f8:	6128      	str	r0, [r5, #16]
 800f1fa:	b920      	cbnz	r0, 800f206 <_svfiprintf_r+0x2e>
 800f1fc:	230c      	movs	r3, #12
 800f1fe:	603b      	str	r3, [r7, #0]
 800f200:	f04f 30ff 	mov.w	r0, #4294967295
 800f204:	e0d0      	b.n	800f3a8 <_svfiprintf_r+0x1d0>
 800f206:	2340      	movs	r3, #64	; 0x40
 800f208:	616b      	str	r3, [r5, #20]
 800f20a:	2300      	movs	r3, #0
 800f20c:	9309      	str	r3, [sp, #36]	; 0x24
 800f20e:	2320      	movs	r3, #32
 800f210:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f214:	f8cd 800c 	str.w	r8, [sp, #12]
 800f218:	2330      	movs	r3, #48	; 0x30
 800f21a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f3c0 <_svfiprintf_r+0x1e8>
 800f21e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f222:	f04f 0901 	mov.w	r9, #1
 800f226:	4623      	mov	r3, r4
 800f228:	469a      	mov	sl, r3
 800f22a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f22e:	b10a      	cbz	r2, 800f234 <_svfiprintf_r+0x5c>
 800f230:	2a25      	cmp	r2, #37	; 0x25
 800f232:	d1f9      	bne.n	800f228 <_svfiprintf_r+0x50>
 800f234:	ebba 0b04 	subs.w	fp, sl, r4
 800f238:	d00b      	beq.n	800f252 <_svfiprintf_r+0x7a>
 800f23a:	465b      	mov	r3, fp
 800f23c:	4622      	mov	r2, r4
 800f23e:	4629      	mov	r1, r5
 800f240:	4638      	mov	r0, r7
 800f242:	f7ff ff6f 	bl	800f124 <__ssputs_r>
 800f246:	3001      	adds	r0, #1
 800f248:	f000 80a9 	beq.w	800f39e <_svfiprintf_r+0x1c6>
 800f24c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f24e:	445a      	add	r2, fp
 800f250:	9209      	str	r2, [sp, #36]	; 0x24
 800f252:	f89a 3000 	ldrb.w	r3, [sl]
 800f256:	2b00      	cmp	r3, #0
 800f258:	f000 80a1 	beq.w	800f39e <_svfiprintf_r+0x1c6>
 800f25c:	2300      	movs	r3, #0
 800f25e:	f04f 32ff 	mov.w	r2, #4294967295
 800f262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f266:	f10a 0a01 	add.w	sl, sl, #1
 800f26a:	9304      	str	r3, [sp, #16]
 800f26c:	9307      	str	r3, [sp, #28]
 800f26e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f272:	931a      	str	r3, [sp, #104]	; 0x68
 800f274:	4654      	mov	r4, sl
 800f276:	2205      	movs	r2, #5
 800f278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f27c:	4850      	ldr	r0, [pc, #320]	; (800f3c0 <_svfiprintf_r+0x1e8>)
 800f27e:	f7f0 ffc7 	bl	8000210 <memchr>
 800f282:	9a04      	ldr	r2, [sp, #16]
 800f284:	b9d8      	cbnz	r0, 800f2be <_svfiprintf_r+0xe6>
 800f286:	06d0      	lsls	r0, r2, #27
 800f288:	bf44      	itt	mi
 800f28a:	2320      	movmi	r3, #32
 800f28c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f290:	0711      	lsls	r1, r2, #28
 800f292:	bf44      	itt	mi
 800f294:	232b      	movmi	r3, #43	; 0x2b
 800f296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f29a:	f89a 3000 	ldrb.w	r3, [sl]
 800f29e:	2b2a      	cmp	r3, #42	; 0x2a
 800f2a0:	d015      	beq.n	800f2ce <_svfiprintf_r+0xf6>
 800f2a2:	9a07      	ldr	r2, [sp, #28]
 800f2a4:	4654      	mov	r4, sl
 800f2a6:	2000      	movs	r0, #0
 800f2a8:	f04f 0c0a 	mov.w	ip, #10
 800f2ac:	4621      	mov	r1, r4
 800f2ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2b2:	3b30      	subs	r3, #48	; 0x30
 800f2b4:	2b09      	cmp	r3, #9
 800f2b6:	d94d      	bls.n	800f354 <_svfiprintf_r+0x17c>
 800f2b8:	b1b0      	cbz	r0, 800f2e8 <_svfiprintf_r+0x110>
 800f2ba:	9207      	str	r2, [sp, #28]
 800f2bc:	e014      	b.n	800f2e8 <_svfiprintf_r+0x110>
 800f2be:	eba0 0308 	sub.w	r3, r0, r8
 800f2c2:	fa09 f303 	lsl.w	r3, r9, r3
 800f2c6:	4313      	orrs	r3, r2
 800f2c8:	9304      	str	r3, [sp, #16]
 800f2ca:	46a2      	mov	sl, r4
 800f2cc:	e7d2      	b.n	800f274 <_svfiprintf_r+0x9c>
 800f2ce:	9b03      	ldr	r3, [sp, #12]
 800f2d0:	1d19      	adds	r1, r3, #4
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	9103      	str	r1, [sp, #12]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	bfbb      	ittet	lt
 800f2da:	425b      	neglt	r3, r3
 800f2dc:	f042 0202 	orrlt.w	r2, r2, #2
 800f2e0:	9307      	strge	r3, [sp, #28]
 800f2e2:	9307      	strlt	r3, [sp, #28]
 800f2e4:	bfb8      	it	lt
 800f2e6:	9204      	strlt	r2, [sp, #16]
 800f2e8:	7823      	ldrb	r3, [r4, #0]
 800f2ea:	2b2e      	cmp	r3, #46	; 0x2e
 800f2ec:	d10c      	bne.n	800f308 <_svfiprintf_r+0x130>
 800f2ee:	7863      	ldrb	r3, [r4, #1]
 800f2f0:	2b2a      	cmp	r3, #42	; 0x2a
 800f2f2:	d134      	bne.n	800f35e <_svfiprintf_r+0x186>
 800f2f4:	9b03      	ldr	r3, [sp, #12]
 800f2f6:	1d1a      	adds	r2, r3, #4
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	9203      	str	r2, [sp, #12]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	bfb8      	it	lt
 800f300:	f04f 33ff 	movlt.w	r3, #4294967295
 800f304:	3402      	adds	r4, #2
 800f306:	9305      	str	r3, [sp, #20]
 800f308:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f3d0 <_svfiprintf_r+0x1f8>
 800f30c:	7821      	ldrb	r1, [r4, #0]
 800f30e:	2203      	movs	r2, #3
 800f310:	4650      	mov	r0, sl
 800f312:	f7f0 ff7d 	bl	8000210 <memchr>
 800f316:	b138      	cbz	r0, 800f328 <_svfiprintf_r+0x150>
 800f318:	9b04      	ldr	r3, [sp, #16]
 800f31a:	eba0 000a 	sub.w	r0, r0, sl
 800f31e:	2240      	movs	r2, #64	; 0x40
 800f320:	4082      	lsls	r2, r0
 800f322:	4313      	orrs	r3, r2
 800f324:	3401      	adds	r4, #1
 800f326:	9304      	str	r3, [sp, #16]
 800f328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f32c:	4825      	ldr	r0, [pc, #148]	; (800f3c4 <_svfiprintf_r+0x1ec>)
 800f32e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f332:	2206      	movs	r2, #6
 800f334:	f7f0 ff6c 	bl	8000210 <memchr>
 800f338:	2800      	cmp	r0, #0
 800f33a:	d038      	beq.n	800f3ae <_svfiprintf_r+0x1d6>
 800f33c:	4b22      	ldr	r3, [pc, #136]	; (800f3c8 <_svfiprintf_r+0x1f0>)
 800f33e:	bb1b      	cbnz	r3, 800f388 <_svfiprintf_r+0x1b0>
 800f340:	9b03      	ldr	r3, [sp, #12]
 800f342:	3307      	adds	r3, #7
 800f344:	f023 0307 	bic.w	r3, r3, #7
 800f348:	3308      	adds	r3, #8
 800f34a:	9303      	str	r3, [sp, #12]
 800f34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f34e:	4433      	add	r3, r6
 800f350:	9309      	str	r3, [sp, #36]	; 0x24
 800f352:	e768      	b.n	800f226 <_svfiprintf_r+0x4e>
 800f354:	fb0c 3202 	mla	r2, ip, r2, r3
 800f358:	460c      	mov	r4, r1
 800f35a:	2001      	movs	r0, #1
 800f35c:	e7a6      	b.n	800f2ac <_svfiprintf_r+0xd4>
 800f35e:	2300      	movs	r3, #0
 800f360:	3401      	adds	r4, #1
 800f362:	9305      	str	r3, [sp, #20]
 800f364:	4619      	mov	r1, r3
 800f366:	f04f 0c0a 	mov.w	ip, #10
 800f36a:	4620      	mov	r0, r4
 800f36c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f370:	3a30      	subs	r2, #48	; 0x30
 800f372:	2a09      	cmp	r2, #9
 800f374:	d903      	bls.n	800f37e <_svfiprintf_r+0x1a6>
 800f376:	2b00      	cmp	r3, #0
 800f378:	d0c6      	beq.n	800f308 <_svfiprintf_r+0x130>
 800f37a:	9105      	str	r1, [sp, #20]
 800f37c:	e7c4      	b.n	800f308 <_svfiprintf_r+0x130>
 800f37e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f382:	4604      	mov	r4, r0
 800f384:	2301      	movs	r3, #1
 800f386:	e7f0      	b.n	800f36a <_svfiprintf_r+0x192>
 800f388:	ab03      	add	r3, sp, #12
 800f38a:	9300      	str	r3, [sp, #0]
 800f38c:	462a      	mov	r2, r5
 800f38e:	4b0f      	ldr	r3, [pc, #60]	; (800f3cc <_svfiprintf_r+0x1f4>)
 800f390:	a904      	add	r1, sp, #16
 800f392:	4638      	mov	r0, r7
 800f394:	f3af 8000 	nop.w
 800f398:	1c42      	adds	r2, r0, #1
 800f39a:	4606      	mov	r6, r0
 800f39c:	d1d6      	bne.n	800f34c <_svfiprintf_r+0x174>
 800f39e:	89ab      	ldrh	r3, [r5, #12]
 800f3a0:	065b      	lsls	r3, r3, #25
 800f3a2:	f53f af2d 	bmi.w	800f200 <_svfiprintf_r+0x28>
 800f3a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3a8:	b01d      	add	sp, #116	; 0x74
 800f3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ae:	ab03      	add	r3, sp, #12
 800f3b0:	9300      	str	r3, [sp, #0]
 800f3b2:	462a      	mov	r2, r5
 800f3b4:	4b05      	ldr	r3, [pc, #20]	; (800f3cc <_svfiprintf_r+0x1f4>)
 800f3b6:	a904      	add	r1, sp, #16
 800f3b8:	4638      	mov	r0, r7
 800f3ba:	f000 f879 	bl	800f4b0 <_printf_i>
 800f3be:	e7eb      	b.n	800f398 <_svfiprintf_r+0x1c0>
 800f3c0:	08010672 	.word	0x08010672
 800f3c4:	0801067c 	.word	0x0801067c
 800f3c8:	00000000 	.word	0x00000000
 800f3cc:	0800f125 	.word	0x0800f125
 800f3d0:	08010678 	.word	0x08010678

0800f3d4 <_printf_common>:
 800f3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3d8:	4616      	mov	r6, r2
 800f3da:	4699      	mov	r9, r3
 800f3dc:	688a      	ldr	r2, [r1, #8]
 800f3de:	690b      	ldr	r3, [r1, #16]
 800f3e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	bfb8      	it	lt
 800f3e8:	4613      	movlt	r3, r2
 800f3ea:	6033      	str	r3, [r6, #0]
 800f3ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f3f0:	4607      	mov	r7, r0
 800f3f2:	460c      	mov	r4, r1
 800f3f4:	b10a      	cbz	r2, 800f3fa <_printf_common+0x26>
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	6033      	str	r3, [r6, #0]
 800f3fa:	6823      	ldr	r3, [r4, #0]
 800f3fc:	0699      	lsls	r1, r3, #26
 800f3fe:	bf42      	ittt	mi
 800f400:	6833      	ldrmi	r3, [r6, #0]
 800f402:	3302      	addmi	r3, #2
 800f404:	6033      	strmi	r3, [r6, #0]
 800f406:	6825      	ldr	r5, [r4, #0]
 800f408:	f015 0506 	ands.w	r5, r5, #6
 800f40c:	d106      	bne.n	800f41c <_printf_common+0x48>
 800f40e:	f104 0a19 	add.w	sl, r4, #25
 800f412:	68e3      	ldr	r3, [r4, #12]
 800f414:	6832      	ldr	r2, [r6, #0]
 800f416:	1a9b      	subs	r3, r3, r2
 800f418:	42ab      	cmp	r3, r5
 800f41a:	dc26      	bgt.n	800f46a <_printf_common+0x96>
 800f41c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f420:	1e13      	subs	r3, r2, #0
 800f422:	6822      	ldr	r2, [r4, #0]
 800f424:	bf18      	it	ne
 800f426:	2301      	movne	r3, #1
 800f428:	0692      	lsls	r2, r2, #26
 800f42a:	d42b      	bmi.n	800f484 <_printf_common+0xb0>
 800f42c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f430:	4649      	mov	r1, r9
 800f432:	4638      	mov	r0, r7
 800f434:	47c0      	blx	r8
 800f436:	3001      	adds	r0, #1
 800f438:	d01e      	beq.n	800f478 <_printf_common+0xa4>
 800f43a:	6823      	ldr	r3, [r4, #0]
 800f43c:	6922      	ldr	r2, [r4, #16]
 800f43e:	f003 0306 	and.w	r3, r3, #6
 800f442:	2b04      	cmp	r3, #4
 800f444:	bf02      	ittt	eq
 800f446:	68e5      	ldreq	r5, [r4, #12]
 800f448:	6833      	ldreq	r3, [r6, #0]
 800f44a:	1aed      	subeq	r5, r5, r3
 800f44c:	68a3      	ldr	r3, [r4, #8]
 800f44e:	bf0c      	ite	eq
 800f450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f454:	2500      	movne	r5, #0
 800f456:	4293      	cmp	r3, r2
 800f458:	bfc4      	itt	gt
 800f45a:	1a9b      	subgt	r3, r3, r2
 800f45c:	18ed      	addgt	r5, r5, r3
 800f45e:	2600      	movs	r6, #0
 800f460:	341a      	adds	r4, #26
 800f462:	42b5      	cmp	r5, r6
 800f464:	d11a      	bne.n	800f49c <_printf_common+0xc8>
 800f466:	2000      	movs	r0, #0
 800f468:	e008      	b.n	800f47c <_printf_common+0xa8>
 800f46a:	2301      	movs	r3, #1
 800f46c:	4652      	mov	r2, sl
 800f46e:	4649      	mov	r1, r9
 800f470:	4638      	mov	r0, r7
 800f472:	47c0      	blx	r8
 800f474:	3001      	adds	r0, #1
 800f476:	d103      	bne.n	800f480 <_printf_common+0xac>
 800f478:	f04f 30ff 	mov.w	r0, #4294967295
 800f47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f480:	3501      	adds	r5, #1
 800f482:	e7c6      	b.n	800f412 <_printf_common+0x3e>
 800f484:	18e1      	adds	r1, r4, r3
 800f486:	1c5a      	adds	r2, r3, #1
 800f488:	2030      	movs	r0, #48	; 0x30
 800f48a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f48e:	4422      	add	r2, r4
 800f490:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f494:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f498:	3302      	adds	r3, #2
 800f49a:	e7c7      	b.n	800f42c <_printf_common+0x58>
 800f49c:	2301      	movs	r3, #1
 800f49e:	4622      	mov	r2, r4
 800f4a0:	4649      	mov	r1, r9
 800f4a2:	4638      	mov	r0, r7
 800f4a4:	47c0      	blx	r8
 800f4a6:	3001      	adds	r0, #1
 800f4a8:	d0e6      	beq.n	800f478 <_printf_common+0xa4>
 800f4aa:	3601      	adds	r6, #1
 800f4ac:	e7d9      	b.n	800f462 <_printf_common+0x8e>
	...

0800f4b0 <_printf_i>:
 800f4b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4b4:	7e0f      	ldrb	r7, [r1, #24]
 800f4b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f4b8:	2f78      	cmp	r7, #120	; 0x78
 800f4ba:	4691      	mov	r9, r2
 800f4bc:	4680      	mov	r8, r0
 800f4be:	460c      	mov	r4, r1
 800f4c0:	469a      	mov	sl, r3
 800f4c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f4c6:	d807      	bhi.n	800f4d8 <_printf_i+0x28>
 800f4c8:	2f62      	cmp	r7, #98	; 0x62
 800f4ca:	d80a      	bhi.n	800f4e2 <_printf_i+0x32>
 800f4cc:	2f00      	cmp	r7, #0
 800f4ce:	f000 80d4 	beq.w	800f67a <_printf_i+0x1ca>
 800f4d2:	2f58      	cmp	r7, #88	; 0x58
 800f4d4:	f000 80c0 	beq.w	800f658 <_printf_i+0x1a8>
 800f4d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f4e0:	e03a      	b.n	800f558 <_printf_i+0xa8>
 800f4e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f4e6:	2b15      	cmp	r3, #21
 800f4e8:	d8f6      	bhi.n	800f4d8 <_printf_i+0x28>
 800f4ea:	a101      	add	r1, pc, #4	; (adr r1, 800f4f0 <_printf_i+0x40>)
 800f4ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f4f0:	0800f549 	.word	0x0800f549
 800f4f4:	0800f55d 	.word	0x0800f55d
 800f4f8:	0800f4d9 	.word	0x0800f4d9
 800f4fc:	0800f4d9 	.word	0x0800f4d9
 800f500:	0800f4d9 	.word	0x0800f4d9
 800f504:	0800f4d9 	.word	0x0800f4d9
 800f508:	0800f55d 	.word	0x0800f55d
 800f50c:	0800f4d9 	.word	0x0800f4d9
 800f510:	0800f4d9 	.word	0x0800f4d9
 800f514:	0800f4d9 	.word	0x0800f4d9
 800f518:	0800f4d9 	.word	0x0800f4d9
 800f51c:	0800f661 	.word	0x0800f661
 800f520:	0800f589 	.word	0x0800f589
 800f524:	0800f61b 	.word	0x0800f61b
 800f528:	0800f4d9 	.word	0x0800f4d9
 800f52c:	0800f4d9 	.word	0x0800f4d9
 800f530:	0800f683 	.word	0x0800f683
 800f534:	0800f4d9 	.word	0x0800f4d9
 800f538:	0800f589 	.word	0x0800f589
 800f53c:	0800f4d9 	.word	0x0800f4d9
 800f540:	0800f4d9 	.word	0x0800f4d9
 800f544:	0800f623 	.word	0x0800f623
 800f548:	682b      	ldr	r3, [r5, #0]
 800f54a:	1d1a      	adds	r2, r3, #4
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	602a      	str	r2, [r5, #0]
 800f550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f558:	2301      	movs	r3, #1
 800f55a:	e09f      	b.n	800f69c <_printf_i+0x1ec>
 800f55c:	6820      	ldr	r0, [r4, #0]
 800f55e:	682b      	ldr	r3, [r5, #0]
 800f560:	0607      	lsls	r7, r0, #24
 800f562:	f103 0104 	add.w	r1, r3, #4
 800f566:	6029      	str	r1, [r5, #0]
 800f568:	d501      	bpl.n	800f56e <_printf_i+0xbe>
 800f56a:	681e      	ldr	r6, [r3, #0]
 800f56c:	e003      	b.n	800f576 <_printf_i+0xc6>
 800f56e:	0646      	lsls	r6, r0, #25
 800f570:	d5fb      	bpl.n	800f56a <_printf_i+0xba>
 800f572:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f576:	2e00      	cmp	r6, #0
 800f578:	da03      	bge.n	800f582 <_printf_i+0xd2>
 800f57a:	232d      	movs	r3, #45	; 0x2d
 800f57c:	4276      	negs	r6, r6
 800f57e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f582:	485a      	ldr	r0, [pc, #360]	; (800f6ec <_printf_i+0x23c>)
 800f584:	230a      	movs	r3, #10
 800f586:	e012      	b.n	800f5ae <_printf_i+0xfe>
 800f588:	682b      	ldr	r3, [r5, #0]
 800f58a:	6820      	ldr	r0, [r4, #0]
 800f58c:	1d19      	adds	r1, r3, #4
 800f58e:	6029      	str	r1, [r5, #0]
 800f590:	0605      	lsls	r5, r0, #24
 800f592:	d501      	bpl.n	800f598 <_printf_i+0xe8>
 800f594:	681e      	ldr	r6, [r3, #0]
 800f596:	e002      	b.n	800f59e <_printf_i+0xee>
 800f598:	0641      	lsls	r1, r0, #25
 800f59a:	d5fb      	bpl.n	800f594 <_printf_i+0xe4>
 800f59c:	881e      	ldrh	r6, [r3, #0]
 800f59e:	4853      	ldr	r0, [pc, #332]	; (800f6ec <_printf_i+0x23c>)
 800f5a0:	2f6f      	cmp	r7, #111	; 0x6f
 800f5a2:	bf0c      	ite	eq
 800f5a4:	2308      	moveq	r3, #8
 800f5a6:	230a      	movne	r3, #10
 800f5a8:	2100      	movs	r1, #0
 800f5aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f5ae:	6865      	ldr	r5, [r4, #4]
 800f5b0:	60a5      	str	r5, [r4, #8]
 800f5b2:	2d00      	cmp	r5, #0
 800f5b4:	bfa2      	ittt	ge
 800f5b6:	6821      	ldrge	r1, [r4, #0]
 800f5b8:	f021 0104 	bicge.w	r1, r1, #4
 800f5bc:	6021      	strge	r1, [r4, #0]
 800f5be:	b90e      	cbnz	r6, 800f5c4 <_printf_i+0x114>
 800f5c0:	2d00      	cmp	r5, #0
 800f5c2:	d04b      	beq.n	800f65c <_printf_i+0x1ac>
 800f5c4:	4615      	mov	r5, r2
 800f5c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800f5ca:	fb03 6711 	mls	r7, r3, r1, r6
 800f5ce:	5dc7      	ldrb	r7, [r0, r7]
 800f5d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f5d4:	4637      	mov	r7, r6
 800f5d6:	42bb      	cmp	r3, r7
 800f5d8:	460e      	mov	r6, r1
 800f5da:	d9f4      	bls.n	800f5c6 <_printf_i+0x116>
 800f5dc:	2b08      	cmp	r3, #8
 800f5de:	d10b      	bne.n	800f5f8 <_printf_i+0x148>
 800f5e0:	6823      	ldr	r3, [r4, #0]
 800f5e2:	07de      	lsls	r6, r3, #31
 800f5e4:	d508      	bpl.n	800f5f8 <_printf_i+0x148>
 800f5e6:	6923      	ldr	r3, [r4, #16]
 800f5e8:	6861      	ldr	r1, [r4, #4]
 800f5ea:	4299      	cmp	r1, r3
 800f5ec:	bfde      	ittt	le
 800f5ee:	2330      	movle	r3, #48	; 0x30
 800f5f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f5f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f5f8:	1b52      	subs	r2, r2, r5
 800f5fa:	6122      	str	r2, [r4, #16]
 800f5fc:	f8cd a000 	str.w	sl, [sp]
 800f600:	464b      	mov	r3, r9
 800f602:	aa03      	add	r2, sp, #12
 800f604:	4621      	mov	r1, r4
 800f606:	4640      	mov	r0, r8
 800f608:	f7ff fee4 	bl	800f3d4 <_printf_common>
 800f60c:	3001      	adds	r0, #1
 800f60e:	d14a      	bne.n	800f6a6 <_printf_i+0x1f6>
 800f610:	f04f 30ff 	mov.w	r0, #4294967295
 800f614:	b004      	add	sp, #16
 800f616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f61a:	6823      	ldr	r3, [r4, #0]
 800f61c:	f043 0320 	orr.w	r3, r3, #32
 800f620:	6023      	str	r3, [r4, #0]
 800f622:	4833      	ldr	r0, [pc, #204]	; (800f6f0 <_printf_i+0x240>)
 800f624:	2778      	movs	r7, #120	; 0x78
 800f626:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f62a:	6823      	ldr	r3, [r4, #0]
 800f62c:	6829      	ldr	r1, [r5, #0]
 800f62e:	061f      	lsls	r7, r3, #24
 800f630:	f851 6b04 	ldr.w	r6, [r1], #4
 800f634:	d402      	bmi.n	800f63c <_printf_i+0x18c>
 800f636:	065f      	lsls	r7, r3, #25
 800f638:	bf48      	it	mi
 800f63a:	b2b6      	uxthmi	r6, r6
 800f63c:	07df      	lsls	r7, r3, #31
 800f63e:	bf48      	it	mi
 800f640:	f043 0320 	orrmi.w	r3, r3, #32
 800f644:	6029      	str	r1, [r5, #0]
 800f646:	bf48      	it	mi
 800f648:	6023      	strmi	r3, [r4, #0]
 800f64a:	b91e      	cbnz	r6, 800f654 <_printf_i+0x1a4>
 800f64c:	6823      	ldr	r3, [r4, #0]
 800f64e:	f023 0320 	bic.w	r3, r3, #32
 800f652:	6023      	str	r3, [r4, #0]
 800f654:	2310      	movs	r3, #16
 800f656:	e7a7      	b.n	800f5a8 <_printf_i+0xf8>
 800f658:	4824      	ldr	r0, [pc, #144]	; (800f6ec <_printf_i+0x23c>)
 800f65a:	e7e4      	b.n	800f626 <_printf_i+0x176>
 800f65c:	4615      	mov	r5, r2
 800f65e:	e7bd      	b.n	800f5dc <_printf_i+0x12c>
 800f660:	682b      	ldr	r3, [r5, #0]
 800f662:	6826      	ldr	r6, [r4, #0]
 800f664:	6961      	ldr	r1, [r4, #20]
 800f666:	1d18      	adds	r0, r3, #4
 800f668:	6028      	str	r0, [r5, #0]
 800f66a:	0635      	lsls	r5, r6, #24
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	d501      	bpl.n	800f674 <_printf_i+0x1c4>
 800f670:	6019      	str	r1, [r3, #0]
 800f672:	e002      	b.n	800f67a <_printf_i+0x1ca>
 800f674:	0670      	lsls	r0, r6, #25
 800f676:	d5fb      	bpl.n	800f670 <_printf_i+0x1c0>
 800f678:	8019      	strh	r1, [r3, #0]
 800f67a:	2300      	movs	r3, #0
 800f67c:	6123      	str	r3, [r4, #16]
 800f67e:	4615      	mov	r5, r2
 800f680:	e7bc      	b.n	800f5fc <_printf_i+0x14c>
 800f682:	682b      	ldr	r3, [r5, #0]
 800f684:	1d1a      	adds	r2, r3, #4
 800f686:	602a      	str	r2, [r5, #0]
 800f688:	681d      	ldr	r5, [r3, #0]
 800f68a:	6862      	ldr	r2, [r4, #4]
 800f68c:	2100      	movs	r1, #0
 800f68e:	4628      	mov	r0, r5
 800f690:	f7f0 fdbe 	bl	8000210 <memchr>
 800f694:	b108      	cbz	r0, 800f69a <_printf_i+0x1ea>
 800f696:	1b40      	subs	r0, r0, r5
 800f698:	6060      	str	r0, [r4, #4]
 800f69a:	6863      	ldr	r3, [r4, #4]
 800f69c:	6123      	str	r3, [r4, #16]
 800f69e:	2300      	movs	r3, #0
 800f6a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6a4:	e7aa      	b.n	800f5fc <_printf_i+0x14c>
 800f6a6:	6923      	ldr	r3, [r4, #16]
 800f6a8:	462a      	mov	r2, r5
 800f6aa:	4649      	mov	r1, r9
 800f6ac:	4640      	mov	r0, r8
 800f6ae:	47d0      	blx	sl
 800f6b0:	3001      	adds	r0, #1
 800f6b2:	d0ad      	beq.n	800f610 <_printf_i+0x160>
 800f6b4:	6823      	ldr	r3, [r4, #0]
 800f6b6:	079b      	lsls	r3, r3, #30
 800f6b8:	d413      	bmi.n	800f6e2 <_printf_i+0x232>
 800f6ba:	68e0      	ldr	r0, [r4, #12]
 800f6bc:	9b03      	ldr	r3, [sp, #12]
 800f6be:	4298      	cmp	r0, r3
 800f6c0:	bfb8      	it	lt
 800f6c2:	4618      	movlt	r0, r3
 800f6c4:	e7a6      	b.n	800f614 <_printf_i+0x164>
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	4632      	mov	r2, r6
 800f6ca:	4649      	mov	r1, r9
 800f6cc:	4640      	mov	r0, r8
 800f6ce:	47d0      	blx	sl
 800f6d0:	3001      	adds	r0, #1
 800f6d2:	d09d      	beq.n	800f610 <_printf_i+0x160>
 800f6d4:	3501      	adds	r5, #1
 800f6d6:	68e3      	ldr	r3, [r4, #12]
 800f6d8:	9903      	ldr	r1, [sp, #12]
 800f6da:	1a5b      	subs	r3, r3, r1
 800f6dc:	42ab      	cmp	r3, r5
 800f6de:	dcf2      	bgt.n	800f6c6 <_printf_i+0x216>
 800f6e0:	e7eb      	b.n	800f6ba <_printf_i+0x20a>
 800f6e2:	2500      	movs	r5, #0
 800f6e4:	f104 0619 	add.w	r6, r4, #25
 800f6e8:	e7f5      	b.n	800f6d6 <_printf_i+0x226>
 800f6ea:	bf00      	nop
 800f6ec:	08010683 	.word	0x08010683
 800f6f0:	08010694 	.word	0x08010694

0800f6f4 <__sflush_r>:
 800f6f4:	898a      	ldrh	r2, [r1, #12]
 800f6f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6fa:	4605      	mov	r5, r0
 800f6fc:	0710      	lsls	r0, r2, #28
 800f6fe:	460c      	mov	r4, r1
 800f700:	d458      	bmi.n	800f7b4 <__sflush_r+0xc0>
 800f702:	684b      	ldr	r3, [r1, #4]
 800f704:	2b00      	cmp	r3, #0
 800f706:	dc05      	bgt.n	800f714 <__sflush_r+0x20>
 800f708:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	dc02      	bgt.n	800f714 <__sflush_r+0x20>
 800f70e:	2000      	movs	r0, #0
 800f710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f714:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f716:	2e00      	cmp	r6, #0
 800f718:	d0f9      	beq.n	800f70e <__sflush_r+0x1a>
 800f71a:	2300      	movs	r3, #0
 800f71c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f720:	682f      	ldr	r7, [r5, #0]
 800f722:	6a21      	ldr	r1, [r4, #32]
 800f724:	602b      	str	r3, [r5, #0]
 800f726:	d032      	beq.n	800f78e <__sflush_r+0x9a>
 800f728:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f72a:	89a3      	ldrh	r3, [r4, #12]
 800f72c:	075a      	lsls	r2, r3, #29
 800f72e:	d505      	bpl.n	800f73c <__sflush_r+0x48>
 800f730:	6863      	ldr	r3, [r4, #4]
 800f732:	1ac0      	subs	r0, r0, r3
 800f734:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f736:	b10b      	cbz	r3, 800f73c <__sflush_r+0x48>
 800f738:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f73a:	1ac0      	subs	r0, r0, r3
 800f73c:	2300      	movs	r3, #0
 800f73e:	4602      	mov	r2, r0
 800f740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f742:	6a21      	ldr	r1, [r4, #32]
 800f744:	4628      	mov	r0, r5
 800f746:	47b0      	blx	r6
 800f748:	1c43      	adds	r3, r0, #1
 800f74a:	89a3      	ldrh	r3, [r4, #12]
 800f74c:	d106      	bne.n	800f75c <__sflush_r+0x68>
 800f74e:	6829      	ldr	r1, [r5, #0]
 800f750:	291d      	cmp	r1, #29
 800f752:	d82b      	bhi.n	800f7ac <__sflush_r+0xb8>
 800f754:	4a29      	ldr	r2, [pc, #164]	; (800f7fc <__sflush_r+0x108>)
 800f756:	410a      	asrs	r2, r1
 800f758:	07d6      	lsls	r6, r2, #31
 800f75a:	d427      	bmi.n	800f7ac <__sflush_r+0xb8>
 800f75c:	2200      	movs	r2, #0
 800f75e:	6062      	str	r2, [r4, #4]
 800f760:	04d9      	lsls	r1, r3, #19
 800f762:	6922      	ldr	r2, [r4, #16]
 800f764:	6022      	str	r2, [r4, #0]
 800f766:	d504      	bpl.n	800f772 <__sflush_r+0x7e>
 800f768:	1c42      	adds	r2, r0, #1
 800f76a:	d101      	bne.n	800f770 <__sflush_r+0x7c>
 800f76c:	682b      	ldr	r3, [r5, #0]
 800f76e:	b903      	cbnz	r3, 800f772 <__sflush_r+0x7e>
 800f770:	6560      	str	r0, [r4, #84]	; 0x54
 800f772:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f774:	602f      	str	r7, [r5, #0]
 800f776:	2900      	cmp	r1, #0
 800f778:	d0c9      	beq.n	800f70e <__sflush_r+0x1a>
 800f77a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f77e:	4299      	cmp	r1, r3
 800f780:	d002      	beq.n	800f788 <__sflush_r+0x94>
 800f782:	4628      	mov	r0, r5
 800f784:	f7ff fbce 	bl	800ef24 <_free_r>
 800f788:	2000      	movs	r0, #0
 800f78a:	6360      	str	r0, [r4, #52]	; 0x34
 800f78c:	e7c0      	b.n	800f710 <__sflush_r+0x1c>
 800f78e:	2301      	movs	r3, #1
 800f790:	4628      	mov	r0, r5
 800f792:	47b0      	blx	r6
 800f794:	1c41      	adds	r1, r0, #1
 800f796:	d1c8      	bne.n	800f72a <__sflush_r+0x36>
 800f798:	682b      	ldr	r3, [r5, #0]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d0c5      	beq.n	800f72a <__sflush_r+0x36>
 800f79e:	2b1d      	cmp	r3, #29
 800f7a0:	d001      	beq.n	800f7a6 <__sflush_r+0xb2>
 800f7a2:	2b16      	cmp	r3, #22
 800f7a4:	d101      	bne.n	800f7aa <__sflush_r+0xb6>
 800f7a6:	602f      	str	r7, [r5, #0]
 800f7a8:	e7b1      	b.n	800f70e <__sflush_r+0x1a>
 800f7aa:	89a3      	ldrh	r3, [r4, #12]
 800f7ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7b0:	81a3      	strh	r3, [r4, #12]
 800f7b2:	e7ad      	b.n	800f710 <__sflush_r+0x1c>
 800f7b4:	690f      	ldr	r7, [r1, #16]
 800f7b6:	2f00      	cmp	r7, #0
 800f7b8:	d0a9      	beq.n	800f70e <__sflush_r+0x1a>
 800f7ba:	0793      	lsls	r3, r2, #30
 800f7bc:	680e      	ldr	r6, [r1, #0]
 800f7be:	bf08      	it	eq
 800f7c0:	694b      	ldreq	r3, [r1, #20]
 800f7c2:	600f      	str	r7, [r1, #0]
 800f7c4:	bf18      	it	ne
 800f7c6:	2300      	movne	r3, #0
 800f7c8:	eba6 0807 	sub.w	r8, r6, r7
 800f7cc:	608b      	str	r3, [r1, #8]
 800f7ce:	f1b8 0f00 	cmp.w	r8, #0
 800f7d2:	dd9c      	ble.n	800f70e <__sflush_r+0x1a>
 800f7d4:	6a21      	ldr	r1, [r4, #32]
 800f7d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f7d8:	4643      	mov	r3, r8
 800f7da:	463a      	mov	r2, r7
 800f7dc:	4628      	mov	r0, r5
 800f7de:	47b0      	blx	r6
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	dc06      	bgt.n	800f7f2 <__sflush_r+0xfe>
 800f7e4:	89a3      	ldrh	r3, [r4, #12]
 800f7e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7ea:	81a3      	strh	r3, [r4, #12]
 800f7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f0:	e78e      	b.n	800f710 <__sflush_r+0x1c>
 800f7f2:	4407      	add	r7, r0
 800f7f4:	eba8 0800 	sub.w	r8, r8, r0
 800f7f8:	e7e9      	b.n	800f7ce <__sflush_r+0xda>
 800f7fa:	bf00      	nop
 800f7fc:	dfbffffe 	.word	0xdfbffffe

0800f800 <_fflush_r>:
 800f800:	b538      	push	{r3, r4, r5, lr}
 800f802:	690b      	ldr	r3, [r1, #16]
 800f804:	4605      	mov	r5, r0
 800f806:	460c      	mov	r4, r1
 800f808:	b913      	cbnz	r3, 800f810 <_fflush_r+0x10>
 800f80a:	2500      	movs	r5, #0
 800f80c:	4628      	mov	r0, r5
 800f80e:	bd38      	pop	{r3, r4, r5, pc}
 800f810:	b118      	cbz	r0, 800f81a <_fflush_r+0x1a>
 800f812:	6a03      	ldr	r3, [r0, #32]
 800f814:	b90b      	cbnz	r3, 800f81a <_fflush_r+0x1a>
 800f816:	f7ff f9dd 	bl	800ebd4 <__sinit>
 800f81a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d0f3      	beq.n	800f80a <_fflush_r+0xa>
 800f822:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f824:	07d0      	lsls	r0, r2, #31
 800f826:	d404      	bmi.n	800f832 <_fflush_r+0x32>
 800f828:	0599      	lsls	r1, r3, #22
 800f82a:	d402      	bmi.n	800f832 <_fflush_r+0x32>
 800f82c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f82e:	f7ff fb51 	bl	800eed4 <__retarget_lock_acquire_recursive>
 800f832:	4628      	mov	r0, r5
 800f834:	4621      	mov	r1, r4
 800f836:	f7ff ff5d 	bl	800f6f4 <__sflush_r>
 800f83a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f83c:	07da      	lsls	r2, r3, #31
 800f83e:	4605      	mov	r5, r0
 800f840:	d4e4      	bmi.n	800f80c <_fflush_r+0xc>
 800f842:	89a3      	ldrh	r3, [r4, #12]
 800f844:	059b      	lsls	r3, r3, #22
 800f846:	d4e1      	bmi.n	800f80c <_fflush_r+0xc>
 800f848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f84a:	f7ff fb44 	bl	800eed6 <__retarget_lock_release_recursive>
 800f84e:	e7dd      	b.n	800f80c <_fflush_r+0xc>

0800f850 <fiprintf>:
 800f850:	b40e      	push	{r1, r2, r3}
 800f852:	b503      	push	{r0, r1, lr}
 800f854:	4601      	mov	r1, r0
 800f856:	ab03      	add	r3, sp, #12
 800f858:	4805      	ldr	r0, [pc, #20]	; (800f870 <fiprintf+0x20>)
 800f85a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f85e:	6800      	ldr	r0, [r0, #0]
 800f860:	9301      	str	r3, [sp, #4]
 800f862:	f000 f89f 	bl	800f9a4 <_vfiprintf_r>
 800f866:	b002      	add	sp, #8
 800f868:	f85d eb04 	ldr.w	lr, [sp], #4
 800f86c:	b003      	add	sp, #12
 800f86e:	4770      	bx	lr
 800f870:	20000194 	.word	0x20000194

0800f874 <memmove>:
 800f874:	4288      	cmp	r0, r1
 800f876:	b510      	push	{r4, lr}
 800f878:	eb01 0402 	add.w	r4, r1, r2
 800f87c:	d902      	bls.n	800f884 <memmove+0x10>
 800f87e:	4284      	cmp	r4, r0
 800f880:	4623      	mov	r3, r4
 800f882:	d807      	bhi.n	800f894 <memmove+0x20>
 800f884:	1e43      	subs	r3, r0, #1
 800f886:	42a1      	cmp	r1, r4
 800f888:	d008      	beq.n	800f89c <memmove+0x28>
 800f88a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f88e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f892:	e7f8      	b.n	800f886 <memmove+0x12>
 800f894:	4402      	add	r2, r0
 800f896:	4601      	mov	r1, r0
 800f898:	428a      	cmp	r2, r1
 800f89a:	d100      	bne.n	800f89e <memmove+0x2a>
 800f89c:	bd10      	pop	{r4, pc}
 800f89e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f8a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f8a6:	e7f7      	b.n	800f898 <memmove+0x24>

0800f8a8 <_sbrk_r>:
 800f8a8:	b538      	push	{r3, r4, r5, lr}
 800f8aa:	4d06      	ldr	r5, [pc, #24]	; (800f8c4 <_sbrk_r+0x1c>)
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	4604      	mov	r4, r0
 800f8b0:	4608      	mov	r0, r1
 800f8b2:	602b      	str	r3, [r5, #0]
 800f8b4:	f7f2 fe00 	bl	80024b8 <_sbrk>
 800f8b8:	1c43      	adds	r3, r0, #1
 800f8ba:	d102      	bne.n	800f8c2 <_sbrk_r+0x1a>
 800f8bc:	682b      	ldr	r3, [r5, #0]
 800f8be:	b103      	cbz	r3, 800f8c2 <_sbrk_r+0x1a>
 800f8c0:	6023      	str	r3, [r4, #0]
 800f8c2:	bd38      	pop	{r3, r4, r5, pc}
 800f8c4:	20004534 	.word	0x20004534

0800f8c8 <memcpy>:
 800f8c8:	440a      	add	r2, r1
 800f8ca:	4291      	cmp	r1, r2
 800f8cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800f8d0:	d100      	bne.n	800f8d4 <memcpy+0xc>
 800f8d2:	4770      	bx	lr
 800f8d4:	b510      	push	{r4, lr}
 800f8d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8de:	4291      	cmp	r1, r2
 800f8e0:	d1f9      	bne.n	800f8d6 <memcpy+0xe>
 800f8e2:	bd10      	pop	{r4, pc}

0800f8e4 <abort>:
 800f8e4:	b508      	push	{r3, lr}
 800f8e6:	2006      	movs	r0, #6
 800f8e8:	f000 fa34 	bl	800fd54 <raise>
 800f8ec:	2001      	movs	r0, #1
 800f8ee:	f7f2 fd6b 	bl	80023c8 <_exit>

0800f8f2 <_realloc_r>:
 800f8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8f6:	4680      	mov	r8, r0
 800f8f8:	4614      	mov	r4, r2
 800f8fa:	460e      	mov	r6, r1
 800f8fc:	b921      	cbnz	r1, 800f908 <_realloc_r+0x16>
 800f8fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f902:	4611      	mov	r1, r2
 800f904:	f7ff bb82 	b.w	800f00c <_malloc_r>
 800f908:	b92a      	cbnz	r2, 800f916 <_realloc_r+0x24>
 800f90a:	f7ff fb0b 	bl	800ef24 <_free_r>
 800f90e:	4625      	mov	r5, r4
 800f910:	4628      	mov	r0, r5
 800f912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f916:	f000 fa39 	bl	800fd8c <_malloc_usable_size_r>
 800f91a:	4284      	cmp	r4, r0
 800f91c:	4607      	mov	r7, r0
 800f91e:	d802      	bhi.n	800f926 <_realloc_r+0x34>
 800f920:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f924:	d812      	bhi.n	800f94c <_realloc_r+0x5a>
 800f926:	4621      	mov	r1, r4
 800f928:	4640      	mov	r0, r8
 800f92a:	f7ff fb6f 	bl	800f00c <_malloc_r>
 800f92e:	4605      	mov	r5, r0
 800f930:	2800      	cmp	r0, #0
 800f932:	d0ed      	beq.n	800f910 <_realloc_r+0x1e>
 800f934:	42bc      	cmp	r4, r7
 800f936:	4622      	mov	r2, r4
 800f938:	4631      	mov	r1, r6
 800f93a:	bf28      	it	cs
 800f93c:	463a      	movcs	r2, r7
 800f93e:	f7ff ffc3 	bl	800f8c8 <memcpy>
 800f942:	4631      	mov	r1, r6
 800f944:	4640      	mov	r0, r8
 800f946:	f7ff faed 	bl	800ef24 <_free_r>
 800f94a:	e7e1      	b.n	800f910 <_realloc_r+0x1e>
 800f94c:	4635      	mov	r5, r6
 800f94e:	e7df      	b.n	800f910 <_realloc_r+0x1e>

0800f950 <__sfputc_r>:
 800f950:	6893      	ldr	r3, [r2, #8]
 800f952:	3b01      	subs	r3, #1
 800f954:	2b00      	cmp	r3, #0
 800f956:	b410      	push	{r4}
 800f958:	6093      	str	r3, [r2, #8]
 800f95a:	da08      	bge.n	800f96e <__sfputc_r+0x1e>
 800f95c:	6994      	ldr	r4, [r2, #24]
 800f95e:	42a3      	cmp	r3, r4
 800f960:	db01      	blt.n	800f966 <__sfputc_r+0x16>
 800f962:	290a      	cmp	r1, #10
 800f964:	d103      	bne.n	800f96e <__sfputc_r+0x1e>
 800f966:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f96a:	f000 b935 	b.w	800fbd8 <__swbuf_r>
 800f96e:	6813      	ldr	r3, [r2, #0]
 800f970:	1c58      	adds	r0, r3, #1
 800f972:	6010      	str	r0, [r2, #0]
 800f974:	7019      	strb	r1, [r3, #0]
 800f976:	4608      	mov	r0, r1
 800f978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f97c:	4770      	bx	lr

0800f97e <__sfputs_r>:
 800f97e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f980:	4606      	mov	r6, r0
 800f982:	460f      	mov	r7, r1
 800f984:	4614      	mov	r4, r2
 800f986:	18d5      	adds	r5, r2, r3
 800f988:	42ac      	cmp	r4, r5
 800f98a:	d101      	bne.n	800f990 <__sfputs_r+0x12>
 800f98c:	2000      	movs	r0, #0
 800f98e:	e007      	b.n	800f9a0 <__sfputs_r+0x22>
 800f990:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f994:	463a      	mov	r2, r7
 800f996:	4630      	mov	r0, r6
 800f998:	f7ff ffda 	bl	800f950 <__sfputc_r>
 800f99c:	1c43      	adds	r3, r0, #1
 800f99e:	d1f3      	bne.n	800f988 <__sfputs_r+0xa>
 800f9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f9a4 <_vfiprintf_r>:
 800f9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a8:	460d      	mov	r5, r1
 800f9aa:	b09d      	sub	sp, #116	; 0x74
 800f9ac:	4614      	mov	r4, r2
 800f9ae:	4698      	mov	r8, r3
 800f9b0:	4606      	mov	r6, r0
 800f9b2:	b118      	cbz	r0, 800f9bc <_vfiprintf_r+0x18>
 800f9b4:	6a03      	ldr	r3, [r0, #32]
 800f9b6:	b90b      	cbnz	r3, 800f9bc <_vfiprintf_r+0x18>
 800f9b8:	f7ff f90c 	bl	800ebd4 <__sinit>
 800f9bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9be:	07d9      	lsls	r1, r3, #31
 800f9c0:	d405      	bmi.n	800f9ce <_vfiprintf_r+0x2a>
 800f9c2:	89ab      	ldrh	r3, [r5, #12]
 800f9c4:	059a      	lsls	r2, r3, #22
 800f9c6:	d402      	bmi.n	800f9ce <_vfiprintf_r+0x2a>
 800f9c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9ca:	f7ff fa83 	bl	800eed4 <__retarget_lock_acquire_recursive>
 800f9ce:	89ab      	ldrh	r3, [r5, #12]
 800f9d0:	071b      	lsls	r3, r3, #28
 800f9d2:	d501      	bpl.n	800f9d8 <_vfiprintf_r+0x34>
 800f9d4:	692b      	ldr	r3, [r5, #16]
 800f9d6:	b99b      	cbnz	r3, 800fa00 <_vfiprintf_r+0x5c>
 800f9d8:	4629      	mov	r1, r5
 800f9da:	4630      	mov	r0, r6
 800f9dc:	f000 f93a 	bl	800fc54 <__swsetup_r>
 800f9e0:	b170      	cbz	r0, 800fa00 <_vfiprintf_r+0x5c>
 800f9e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9e4:	07dc      	lsls	r4, r3, #31
 800f9e6:	d504      	bpl.n	800f9f2 <_vfiprintf_r+0x4e>
 800f9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9ec:	b01d      	add	sp, #116	; 0x74
 800f9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9f2:	89ab      	ldrh	r3, [r5, #12]
 800f9f4:	0598      	lsls	r0, r3, #22
 800f9f6:	d4f7      	bmi.n	800f9e8 <_vfiprintf_r+0x44>
 800f9f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9fa:	f7ff fa6c 	bl	800eed6 <__retarget_lock_release_recursive>
 800f9fe:	e7f3      	b.n	800f9e8 <_vfiprintf_r+0x44>
 800fa00:	2300      	movs	r3, #0
 800fa02:	9309      	str	r3, [sp, #36]	; 0x24
 800fa04:	2320      	movs	r3, #32
 800fa06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa0e:	2330      	movs	r3, #48	; 0x30
 800fa10:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fbc4 <_vfiprintf_r+0x220>
 800fa14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa18:	f04f 0901 	mov.w	r9, #1
 800fa1c:	4623      	mov	r3, r4
 800fa1e:	469a      	mov	sl, r3
 800fa20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa24:	b10a      	cbz	r2, 800fa2a <_vfiprintf_r+0x86>
 800fa26:	2a25      	cmp	r2, #37	; 0x25
 800fa28:	d1f9      	bne.n	800fa1e <_vfiprintf_r+0x7a>
 800fa2a:	ebba 0b04 	subs.w	fp, sl, r4
 800fa2e:	d00b      	beq.n	800fa48 <_vfiprintf_r+0xa4>
 800fa30:	465b      	mov	r3, fp
 800fa32:	4622      	mov	r2, r4
 800fa34:	4629      	mov	r1, r5
 800fa36:	4630      	mov	r0, r6
 800fa38:	f7ff ffa1 	bl	800f97e <__sfputs_r>
 800fa3c:	3001      	adds	r0, #1
 800fa3e:	f000 80a9 	beq.w	800fb94 <_vfiprintf_r+0x1f0>
 800fa42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa44:	445a      	add	r2, fp
 800fa46:	9209      	str	r2, [sp, #36]	; 0x24
 800fa48:	f89a 3000 	ldrb.w	r3, [sl]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	f000 80a1 	beq.w	800fb94 <_vfiprintf_r+0x1f0>
 800fa52:	2300      	movs	r3, #0
 800fa54:	f04f 32ff 	mov.w	r2, #4294967295
 800fa58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa5c:	f10a 0a01 	add.w	sl, sl, #1
 800fa60:	9304      	str	r3, [sp, #16]
 800fa62:	9307      	str	r3, [sp, #28]
 800fa64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa68:	931a      	str	r3, [sp, #104]	; 0x68
 800fa6a:	4654      	mov	r4, sl
 800fa6c:	2205      	movs	r2, #5
 800fa6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa72:	4854      	ldr	r0, [pc, #336]	; (800fbc4 <_vfiprintf_r+0x220>)
 800fa74:	f7f0 fbcc 	bl	8000210 <memchr>
 800fa78:	9a04      	ldr	r2, [sp, #16]
 800fa7a:	b9d8      	cbnz	r0, 800fab4 <_vfiprintf_r+0x110>
 800fa7c:	06d1      	lsls	r1, r2, #27
 800fa7e:	bf44      	itt	mi
 800fa80:	2320      	movmi	r3, #32
 800fa82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa86:	0713      	lsls	r3, r2, #28
 800fa88:	bf44      	itt	mi
 800fa8a:	232b      	movmi	r3, #43	; 0x2b
 800fa8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa90:	f89a 3000 	ldrb.w	r3, [sl]
 800fa94:	2b2a      	cmp	r3, #42	; 0x2a
 800fa96:	d015      	beq.n	800fac4 <_vfiprintf_r+0x120>
 800fa98:	9a07      	ldr	r2, [sp, #28]
 800fa9a:	4654      	mov	r4, sl
 800fa9c:	2000      	movs	r0, #0
 800fa9e:	f04f 0c0a 	mov.w	ip, #10
 800faa2:	4621      	mov	r1, r4
 800faa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800faa8:	3b30      	subs	r3, #48	; 0x30
 800faaa:	2b09      	cmp	r3, #9
 800faac:	d94d      	bls.n	800fb4a <_vfiprintf_r+0x1a6>
 800faae:	b1b0      	cbz	r0, 800fade <_vfiprintf_r+0x13a>
 800fab0:	9207      	str	r2, [sp, #28]
 800fab2:	e014      	b.n	800fade <_vfiprintf_r+0x13a>
 800fab4:	eba0 0308 	sub.w	r3, r0, r8
 800fab8:	fa09 f303 	lsl.w	r3, r9, r3
 800fabc:	4313      	orrs	r3, r2
 800fabe:	9304      	str	r3, [sp, #16]
 800fac0:	46a2      	mov	sl, r4
 800fac2:	e7d2      	b.n	800fa6a <_vfiprintf_r+0xc6>
 800fac4:	9b03      	ldr	r3, [sp, #12]
 800fac6:	1d19      	adds	r1, r3, #4
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	9103      	str	r1, [sp, #12]
 800facc:	2b00      	cmp	r3, #0
 800face:	bfbb      	ittet	lt
 800fad0:	425b      	neglt	r3, r3
 800fad2:	f042 0202 	orrlt.w	r2, r2, #2
 800fad6:	9307      	strge	r3, [sp, #28]
 800fad8:	9307      	strlt	r3, [sp, #28]
 800fada:	bfb8      	it	lt
 800fadc:	9204      	strlt	r2, [sp, #16]
 800fade:	7823      	ldrb	r3, [r4, #0]
 800fae0:	2b2e      	cmp	r3, #46	; 0x2e
 800fae2:	d10c      	bne.n	800fafe <_vfiprintf_r+0x15a>
 800fae4:	7863      	ldrb	r3, [r4, #1]
 800fae6:	2b2a      	cmp	r3, #42	; 0x2a
 800fae8:	d134      	bne.n	800fb54 <_vfiprintf_r+0x1b0>
 800faea:	9b03      	ldr	r3, [sp, #12]
 800faec:	1d1a      	adds	r2, r3, #4
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	9203      	str	r2, [sp, #12]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	bfb8      	it	lt
 800faf6:	f04f 33ff 	movlt.w	r3, #4294967295
 800fafa:	3402      	adds	r4, #2
 800fafc:	9305      	str	r3, [sp, #20]
 800fafe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fbd4 <_vfiprintf_r+0x230>
 800fb02:	7821      	ldrb	r1, [r4, #0]
 800fb04:	2203      	movs	r2, #3
 800fb06:	4650      	mov	r0, sl
 800fb08:	f7f0 fb82 	bl	8000210 <memchr>
 800fb0c:	b138      	cbz	r0, 800fb1e <_vfiprintf_r+0x17a>
 800fb0e:	9b04      	ldr	r3, [sp, #16]
 800fb10:	eba0 000a 	sub.w	r0, r0, sl
 800fb14:	2240      	movs	r2, #64	; 0x40
 800fb16:	4082      	lsls	r2, r0
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	3401      	adds	r4, #1
 800fb1c:	9304      	str	r3, [sp, #16]
 800fb1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb22:	4829      	ldr	r0, [pc, #164]	; (800fbc8 <_vfiprintf_r+0x224>)
 800fb24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb28:	2206      	movs	r2, #6
 800fb2a:	f7f0 fb71 	bl	8000210 <memchr>
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	d03f      	beq.n	800fbb2 <_vfiprintf_r+0x20e>
 800fb32:	4b26      	ldr	r3, [pc, #152]	; (800fbcc <_vfiprintf_r+0x228>)
 800fb34:	bb1b      	cbnz	r3, 800fb7e <_vfiprintf_r+0x1da>
 800fb36:	9b03      	ldr	r3, [sp, #12]
 800fb38:	3307      	adds	r3, #7
 800fb3a:	f023 0307 	bic.w	r3, r3, #7
 800fb3e:	3308      	adds	r3, #8
 800fb40:	9303      	str	r3, [sp, #12]
 800fb42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb44:	443b      	add	r3, r7
 800fb46:	9309      	str	r3, [sp, #36]	; 0x24
 800fb48:	e768      	b.n	800fa1c <_vfiprintf_r+0x78>
 800fb4a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb4e:	460c      	mov	r4, r1
 800fb50:	2001      	movs	r0, #1
 800fb52:	e7a6      	b.n	800faa2 <_vfiprintf_r+0xfe>
 800fb54:	2300      	movs	r3, #0
 800fb56:	3401      	adds	r4, #1
 800fb58:	9305      	str	r3, [sp, #20]
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	f04f 0c0a 	mov.w	ip, #10
 800fb60:	4620      	mov	r0, r4
 800fb62:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb66:	3a30      	subs	r2, #48	; 0x30
 800fb68:	2a09      	cmp	r2, #9
 800fb6a:	d903      	bls.n	800fb74 <_vfiprintf_r+0x1d0>
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d0c6      	beq.n	800fafe <_vfiprintf_r+0x15a>
 800fb70:	9105      	str	r1, [sp, #20]
 800fb72:	e7c4      	b.n	800fafe <_vfiprintf_r+0x15a>
 800fb74:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb78:	4604      	mov	r4, r0
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	e7f0      	b.n	800fb60 <_vfiprintf_r+0x1bc>
 800fb7e:	ab03      	add	r3, sp, #12
 800fb80:	9300      	str	r3, [sp, #0]
 800fb82:	462a      	mov	r2, r5
 800fb84:	4b12      	ldr	r3, [pc, #72]	; (800fbd0 <_vfiprintf_r+0x22c>)
 800fb86:	a904      	add	r1, sp, #16
 800fb88:	4630      	mov	r0, r6
 800fb8a:	f3af 8000 	nop.w
 800fb8e:	4607      	mov	r7, r0
 800fb90:	1c78      	adds	r0, r7, #1
 800fb92:	d1d6      	bne.n	800fb42 <_vfiprintf_r+0x19e>
 800fb94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb96:	07d9      	lsls	r1, r3, #31
 800fb98:	d405      	bmi.n	800fba6 <_vfiprintf_r+0x202>
 800fb9a:	89ab      	ldrh	r3, [r5, #12]
 800fb9c:	059a      	lsls	r2, r3, #22
 800fb9e:	d402      	bmi.n	800fba6 <_vfiprintf_r+0x202>
 800fba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fba2:	f7ff f998 	bl	800eed6 <__retarget_lock_release_recursive>
 800fba6:	89ab      	ldrh	r3, [r5, #12]
 800fba8:	065b      	lsls	r3, r3, #25
 800fbaa:	f53f af1d 	bmi.w	800f9e8 <_vfiprintf_r+0x44>
 800fbae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fbb0:	e71c      	b.n	800f9ec <_vfiprintf_r+0x48>
 800fbb2:	ab03      	add	r3, sp, #12
 800fbb4:	9300      	str	r3, [sp, #0]
 800fbb6:	462a      	mov	r2, r5
 800fbb8:	4b05      	ldr	r3, [pc, #20]	; (800fbd0 <_vfiprintf_r+0x22c>)
 800fbba:	a904      	add	r1, sp, #16
 800fbbc:	4630      	mov	r0, r6
 800fbbe:	f7ff fc77 	bl	800f4b0 <_printf_i>
 800fbc2:	e7e4      	b.n	800fb8e <_vfiprintf_r+0x1ea>
 800fbc4:	08010672 	.word	0x08010672
 800fbc8:	0801067c 	.word	0x0801067c
 800fbcc:	00000000 	.word	0x00000000
 800fbd0:	0800f97f 	.word	0x0800f97f
 800fbd4:	08010678 	.word	0x08010678

0800fbd8 <__swbuf_r>:
 800fbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbda:	460e      	mov	r6, r1
 800fbdc:	4614      	mov	r4, r2
 800fbde:	4605      	mov	r5, r0
 800fbe0:	b118      	cbz	r0, 800fbea <__swbuf_r+0x12>
 800fbe2:	6a03      	ldr	r3, [r0, #32]
 800fbe4:	b90b      	cbnz	r3, 800fbea <__swbuf_r+0x12>
 800fbe6:	f7fe fff5 	bl	800ebd4 <__sinit>
 800fbea:	69a3      	ldr	r3, [r4, #24]
 800fbec:	60a3      	str	r3, [r4, #8]
 800fbee:	89a3      	ldrh	r3, [r4, #12]
 800fbf0:	071a      	lsls	r2, r3, #28
 800fbf2:	d525      	bpl.n	800fc40 <__swbuf_r+0x68>
 800fbf4:	6923      	ldr	r3, [r4, #16]
 800fbf6:	b31b      	cbz	r3, 800fc40 <__swbuf_r+0x68>
 800fbf8:	6823      	ldr	r3, [r4, #0]
 800fbfa:	6922      	ldr	r2, [r4, #16]
 800fbfc:	1a98      	subs	r0, r3, r2
 800fbfe:	6963      	ldr	r3, [r4, #20]
 800fc00:	b2f6      	uxtb	r6, r6
 800fc02:	4283      	cmp	r3, r0
 800fc04:	4637      	mov	r7, r6
 800fc06:	dc04      	bgt.n	800fc12 <__swbuf_r+0x3a>
 800fc08:	4621      	mov	r1, r4
 800fc0a:	4628      	mov	r0, r5
 800fc0c:	f7ff fdf8 	bl	800f800 <_fflush_r>
 800fc10:	b9e0      	cbnz	r0, 800fc4c <__swbuf_r+0x74>
 800fc12:	68a3      	ldr	r3, [r4, #8]
 800fc14:	3b01      	subs	r3, #1
 800fc16:	60a3      	str	r3, [r4, #8]
 800fc18:	6823      	ldr	r3, [r4, #0]
 800fc1a:	1c5a      	adds	r2, r3, #1
 800fc1c:	6022      	str	r2, [r4, #0]
 800fc1e:	701e      	strb	r6, [r3, #0]
 800fc20:	6962      	ldr	r2, [r4, #20]
 800fc22:	1c43      	adds	r3, r0, #1
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d004      	beq.n	800fc32 <__swbuf_r+0x5a>
 800fc28:	89a3      	ldrh	r3, [r4, #12]
 800fc2a:	07db      	lsls	r3, r3, #31
 800fc2c:	d506      	bpl.n	800fc3c <__swbuf_r+0x64>
 800fc2e:	2e0a      	cmp	r6, #10
 800fc30:	d104      	bne.n	800fc3c <__swbuf_r+0x64>
 800fc32:	4621      	mov	r1, r4
 800fc34:	4628      	mov	r0, r5
 800fc36:	f7ff fde3 	bl	800f800 <_fflush_r>
 800fc3a:	b938      	cbnz	r0, 800fc4c <__swbuf_r+0x74>
 800fc3c:	4638      	mov	r0, r7
 800fc3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc40:	4621      	mov	r1, r4
 800fc42:	4628      	mov	r0, r5
 800fc44:	f000 f806 	bl	800fc54 <__swsetup_r>
 800fc48:	2800      	cmp	r0, #0
 800fc4a:	d0d5      	beq.n	800fbf8 <__swbuf_r+0x20>
 800fc4c:	f04f 37ff 	mov.w	r7, #4294967295
 800fc50:	e7f4      	b.n	800fc3c <__swbuf_r+0x64>
	...

0800fc54 <__swsetup_r>:
 800fc54:	b538      	push	{r3, r4, r5, lr}
 800fc56:	4b2a      	ldr	r3, [pc, #168]	; (800fd00 <__swsetup_r+0xac>)
 800fc58:	4605      	mov	r5, r0
 800fc5a:	6818      	ldr	r0, [r3, #0]
 800fc5c:	460c      	mov	r4, r1
 800fc5e:	b118      	cbz	r0, 800fc68 <__swsetup_r+0x14>
 800fc60:	6a03      	ldr	r3, [r0, #32]
 800fc62:	b90b      	cbnz	r3, 800fc68 <__swsetup_r+0x14>
 800fc64:	f7fe ffb6 	bl	800ebd4 <__sinit>
 800fc68:	89a3      	ldrh	r3, [r4, #12]
 800fc6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc6e:	0718      	lsls	r0, r3, #28
 800fc70:	d422      	bmi.n	800fcb8 <__swsetup_r+0x64>
 800fc72:	06d9      	lsls	r1, r3, #27
 800fc74:	d407      	bmi.n	800fc86 <__swsetup_r+0x32>
 800fc76:	2309      	movs	r3, #9
 800fc78:	602b      	str	r3, [r5, #0]
 800fc7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fc7e:	81a3      	strh	r3, [r4, #12]
 800fc80:	f04f 30ff 	mov.w	r0, #4294967295
 800fc84:	e034      	b.n	800fcf0 <__swsetup_r+0x9c>
 800fc86:	0758      	lsls	r0, r3, #29
 800fc88:	d512      	bpl.n	800fcb0 <__swsetup_r+0x5c>
 800fc8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc8c:	b141      	cbz	r1, 800fca0 <__swsetup_r+0x4c>
 800fc8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc92:	4299      	cmp	r1, r3
 800fc94:	d002      	beq.n	800fc9c <__swsetup_r+0x48>
 800fc96:	4628      	mov	r0, r5
 800fc98:	f7ff f944 	bl	800ef24 <_free_r>
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	6363      	str	r3, [r4, #52]	; 0x34
 800fca0:	89a3      	ldrh	r3, [r4, #12]
 800fca2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fca6:	81a3      	strh	r3, [r4, #12]
 800fca8:	2300      	movs	r3, #0
 800fcaa:	6063      	str	r3, [r4, #4]
 800fcac:	6923      	ldr	r3, [r4, #16]
 800fcae:	6023      	str	r3, [r4, #0]
 800fcb0:	89a3      	ldrh	r3, [r4, #12]
 800fcb2:	f043 0308 	orr.w	r3, r3, #8
 800fcb6:	81a3      	strh	r3, [r4, #12]
 800fcb8:	6923      	ldr	r3, [r4, #16]
 800fcba:	b94b      	cbnz	r3, 800fcd0 <__swsetup_r+0x7c>
 800fcbc:	89a3      	ldrh	r3, [r4, #12]
 800fcbe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fcc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcc6:	d003      	beq.n	800fcd0 <__swsetup_r+0x7c>
 800fcc8:	4621      	mov	r1, r4
 800fcca:	4628      	mov	r0, r5
 800fccc:	f000 f88c 	bl	800fde8 <__smakebuf_r>
 800fcd0:	89a0      	ldrh	r0, [r4, #12]
 800fcd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fcd6:	f010 0301 	ands.w	r3, r0, #1
 800fcda:	d00a      	beq.n	800fcf2 <__swsetup_r+0x9e>
 800fcdc:	2300      	movs	r3, #0
 800fcde:	60a3      	str	r3, [r4, #8]
 800fce0:	6963      	ldr	r3, [r4, #20]
 800fce2:	425b      	negs	r3, r3
 800fce4:	61a3      	str	r3, [r4, #24]
 800fce6:	6923      	ldr	r3, [r4, #16]
 800fce8:	b943      	cbnz	r3, 800fcfc <__swsetup_r+0xa8>
 800fcea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fcee:	d1c4      	bne.n	800fc7a <__swsetup_r+0x26>
 800fcf0:	bd38      	pop	{r3, r4, r5, pc}
 800fcf2:	0781      	lsls	r1, r0, #30
 800fcf4:	bf58      	it	pl
 800fcf6:	6963      	ldrpl	r3, [r4, #20]
 800fcf8:	60a3      	str	r3, [r4, #8]
 800fcfa:	e7f4      	b.n	800fce6 <__swsetup_r+0x92>
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	e7f7      	b.n	800fcf0 <__swsetup_r+0x9c>
 800fd00:	20000194 	.word	0x20000194

0800fd04 <_raise_r>:
 800fd04:	291f      	cmp	r1, #31
 800fd06:	b538      	push	{r3, r4, r5, lr}
 800fd08:	4604      	mov	r4, r0
 800fd0a:	460d      	mov	r5, r1
 800fd0c:	d904      	bls.n	800fd18 <_raise_r+0x14>
 800fd0e:	2316      	movs	r3, #22
 800fd10:	6003      	str	r3, [r0, #0]
 800fd12:	f04f 30ff 	mov.w	r0, #4294967295
 800fd16:	bd38      	pop	{r3, r4, r5, pc}
 800fd18:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fd1a:	b112      	cbz	r2, 800fd22 <_raise_r+0x1e>
 800fd1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fd20:	b94b      	cbnz	r3, 800fd36 <_raise_r+0x32>
 800fd22:	4620      	mov	r0, r4
 800fd24:	f000 f830 	bl	800fd88 <_getpid_r>
 800fd28:	462a      	mov	r2, r5
 800fd2a:	4601      	mov	r1, r0
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd32:	f000 b817 	b.w	800fd64 <_kill_r>
 800fd36:	2b01      	cmp	r3, #1
 800fd38:	d00a      	beq.n	800fd50 <_raise_r+0x4c>
 800fd3a:	1c59      	adds	r1, r3, #1
 800fd3c:	d103      	bne.n	800fd46 <_raise_r+0x42>
 800fd3e:	2316      	movs	r3, #22
 800fd40:	6003      	str	r3, [r0, #0]
 800fd42:	2001      	movs	r0, #1
 800fd44:	e7e7      	b.n	800fd16 <_raise_r+0x12>
 800fd46:	2400      	movs	r4, #0
 800fd48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fd4c:	4628      	mov	r0, r5
 800fd4e:	4798      	blx	r3
 800fd50:	2000      	movs	r0, #0
 800fd52:	e7e0      	b.n	800fd16 <_raise_r+0x12>

0800fd54 <raise>:
 800fd54:	4b02      	ldr	r3, [pc, #8]	; (800fd60 <raise+0xc>)
 800fd56:	4601      	mov	r1, r0
 800fd58:	6818      	ldr	r0, [r3, #0]
 800fd5a:	f7ff bfd3 	b.w	800fd04 <_raise_r>
 800fd5e:	bf00      	nop
 800fd60:	20000194 	.word	0x20000194

0800fd64 <_kill_r>:
 800fd64:	b538      	push	{r3, r4, r5, lr}
 800fd66:	4d07      	ldr	r5, [pc, #28]	; (800fd84 <_kill_r+0x20>)
 800fd68:	2300      	movs	r3, #0
 800fd6a:	4604      	mov	r4, r0
 800fd6c:	4608      	mov	r0, r1
 800fd6e:	4611      	mov	r1, r2
 800fd70:	602b      	str	r3, [r5, #0]
 800fd72:	f7f2 fb19 	bl	80023a8 <_kill>
 800fd76:	1c43      	adds	r3, r0, #1
 800fd78:	d102      	bne.n	800fd80 <_kill_r+0x1c>
 800fd7a:	682b      	ldr	r3, [r5, #0]
 800fd7c:	b103      	cbz	r3, 800fd80 <_kill_r+0x1c>
 800fd7e:	6023      	str	r3, [r4, #0]
 800fd80:	bd38      	pop	{r3, r4, r5, pc}
 800fd82:	bf00      	nop
 800fd84:	20004534 	.word	0x20004534

0800fd88 <_getpid_r>:
 800fd88:	f7f2 bb06 	b.w	8002398 <_getpid>

0800fd8c <_malloc_usable_size_r>:
 800fd8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd90:	1f18      	subs	r0, r3, #4
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	bfbc      	itt	lt
 800fd96:	580b      	ldrlt	r3, [r1, r0]
 800fd98:	18c0      	addlt	r0, r0, r3
 800fd9a:	4770      	bx	lr

0800fd9c <__swhatbuf_r>:
 800fd9c:	b570      	push	{r4, r5, r6, lr}
 800fd9e:	460c      	mov	r4, r1
 800fda0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fda4:	2900      	cmp	r1, #0
 800fda6:	b096      	sub	sp, #88	; 0x58
 800fda8:	4615      	mov	r5, r2
 800fdaa:	461e      	mov	r6, r3
 800fdac:	da0d      	bge.n	800fdca <__swhatbuf_r+0x2e>
 800fdae:	89a3      	ldrh	r3, [r4, #12]
 800fdb0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fdb4:	f04f 0100 	mov.w	r1, #0
 800fdb8:	bf0c      	ite	eq
 800fdba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fdbe:	2340      	movne	r3, #64	; 0x40
 800fdc0:	2000      	movs	r0, #0
 800fdc2:	6031      	str	r1, [r6, #0]
 800fdc4:	602b      	str	r3, [r5, #0]
 800fdc6:	b016      	add	sp, #88	; 0x58
 800fdc8:	bd70      	pop	{r4, r5, r6, pc}
 800fdca:	466a      	mov	r2, sp
 800fdcc:	f000 f848 	bl	800fe60 <_fstat_r>
 800fdd0:	2800      	cmp	r0, #0
 800fdd2:	dbec      	blt.n	800fdae <__swhatbuf_r+0x12>
 800fdd4:	9901      	ldr	r1, [sp, #4]
 800fdd6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fdda:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fdde:	4259      	negs	r1, r3
 800fde0:	4159      	adcs	r1, r3
 800fde2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fde6:	e7eb      	b.n	800fdc0 <__swhatbuf_r+0x24>

0800fde8 <__smakebuf_r>:
 800fde8:	898b      	ldrh	r3, [r1, #12]
 800fdea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fdec:	079d      	lsls	r5, r3, #30
 800fdee:	4606      	mov	r6, r0
 800fdf0:	460c      	mov	r4, r1
 800fdf2:	d507      	bpl.n	800fe04 <__smakebuf_r+0x1c>
 800fdf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fdf8:	6023      	str	r3, [r4, #0]
 800fdfa:	6123      	str	r3, [r4, #16]
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	6163      	str	r3, [r4, #20]
 800fe00:	b002      	add	sp, #8
 800fe02:	bd70      	pop	{r4, r5, r6, pc}
 800fe04:	ab01      	add	r3, sp, #4
 800fe06:	466a      	mov	r2, sp
 800fe08:	f7ff ffc8 	bl	800fd9c <__swhatbuf_r>
 800fe0c:	9900      	ldr	r1, [sp, #0]
 800fe0e:	4605      	mov	r5, r0
 800fe10:	4630      	mov	r0, r6
 800fe12:	f7ff f8fb 	bl	800f00c <_malloc_r>
 800fe16:	b948      	cbnz	r0, 800fe2c <__smakebuf_r+0x44>
 800fe18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe1c:	059a      	lsls	r2, r3, #22
 800fe1e:	d4ef      	bmi.n	800fe00 <__smakebuf_r+0x18>
 800fe20:	f023 0303 	bic.w	r3, r3, #3
 800fe24:	f043 0302 	orr.w	r3, r3, #2
 800fe28:	81a3      	strh	r3, [r4, #12]
 800fe2a:	e7e3      	b.n	800fdf4 <__smakebuf_r+0xc>
 800fe2c:	89a3      	ldrh	r3, [r4, #12]
 800fe2e:	6020      	str	r0, [r4, #0]
 800fe30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe34:	81a3      	strh	r3, [r4, #12]
 800fe36:	9b00      	ldr	r3, [sp, #0]
 800fe38:	6163      	str	r3, [r4, #20]
 800fe3a:	9b01      	ldr	r3, [sp, #4]
 800fe3c:	6120      	str	r0, [r4, #16]
 800fe3e:	b15b      	cbz	r3, 800fe58 <__smakebuf_r+0x70>
 800fe40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe44:	4630      	mov	r0, r6
 800fe46:	f000 f81d 	bl	800fe84 <_isatty_r>
 800fe4a:	b128      	cbz	r0, 800fe58 <__smakebuf_r+0x70>
 800fe4c:	89a3      	ldrh	r3, [r4, #12]
 800fe4e:	f023 0303 	bic.w	r3, r3, #3
 800fe52:	f043 0301 	orr.w	r3, r3, #1
 800fe56:	81a3      	strh	r3, [r4, #12]
 800fe58:	89a3      	ldrh	r3, [r4, #12]
 800fe5a:	431d      	orrs	r5, r3
 800fe5c:	81a5      	strh	r5, [r4, #12]
 800fe5e:	e7cf      	b.n	800fe00 <__smakebuf_r+0x18>

0800fe60 <_fstat_r>:
 800fe60:	b538      	push	{r3, r4, r5, lr}
 800fe62:	4d07      	ldr	r5, [pc, #28]	; (800fe80 <_fstat_r+0x20>)
 800fe64:	2300      	movs	r3, #0
 800fe66:	4604      	mov	r4, r0
 800fe68:	4608      	mov	r0, r1
 800fe6a:	4611      	mov	r1, r2
 800fe6c:	602b      	str	r3, [r5, #0]
 800fe6e:	f7f2 fafa 	bl	8002466 <_fstat>
 800fe72:	1c43      	adds	r3, r0, #1
 800fe74:	d102      	bne.n	800fe7c <_fstat_r+0x1c>
 800fe76:	682b      	ldr	r3, [r5, #0]
 800fe78:	b103      	cbz	r3, 800fe7c <_fstat_r+0x1c>
 800fe7a:	6023      	str	r3, [r4, #0]
 800fe7c:	bd38      	pop	{r3, r4, r5, pc}
 800fe7e:	bf00      	nop
 800fe80:	20004534 	.word	0x20004534

0800fe84 <_isatty_r>:
 800fe84:	b538      	push	{r3, r4, r5, lr}
 800fe86:	4d06      	ldr	r5, [pc, #24]	; (800fea0 <_isatty_r+0x1c>)
 800fe88:	2300      	movs	r3, #0
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	4608      	mov	r0, r1
 800fe8e:	602b      	str	r3, [r5, #0]
 800fe90:	f7f2 faf9 	bl	8002486 <_isatty>
 800fe94:	1c43      	adds	r3, r0, #1
 800fe96:	d102      	bne.n	800fe9e <_isatty_r+0x1a>
 800fe98:	682b      	ldr	r3, [r5, #0]
 800fe9a:	b103      	cbz	r3, 800fe9e <_isatty_r+0x1a>
 800fe9c:	6023      	str	r3, [r4, #0]
 800fe9e:	bd38      	pop	{r3, r4, r5, pc}
 800fea0:	20004534 	.word	0x20004534

0800fea4 <_init>:
 800fea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fea6:	bf00      	nop
 800fea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800feaa:	bc08      	pop	{r3}
 800feac:	469e      	mov	lr, r3
 800feae:	4770      	bx	lr

0800feb0 <_fini>:
 800feb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feb2:	bf00      	nop
 800feb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800feb6:	bc08      	pop	{r3}
 800feb8:	469e      	mov	lr, r3
 800feba:	4770      	bx	lr
